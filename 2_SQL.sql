
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_OrderDetailVW'))
	BEGIN
		DROP VIEW [DBO].COM_OrderDetailVW
	END
GO
-- #desc					Get Sales Order Detail Information
-- #db_dependencies			N/A
-- #db_references			COM_SalesOrderHeadSrchVW

CREATE VIEW [DBO].COM_OrderDetailVW
AS
WITH CTE_F4211 AS (
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		A.SDSHAN AS SHAN,
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
	FROM [SCDATA].F4211 A		--Sales Order Lines
	UNION ALL
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		A.SDSHAN AS SHAN,
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
	FROM [SCDATA].F42119 A	
	)--Historical Sales Order Lines

	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		CASE SD$9TYP WHEN 1 THEN B.SD$9SHAN ELSE A.SHAN END AS SHAN,
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
	FROM CTE_F4211 A
	LEFT OUTER JOIN [SCDATA].FQ674211 B	--Extended Sales Order Lines
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID

GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_SalesOrderHeadVW'))
	BEGIN
		DROP VIEW [DBO].COM_SalesOrderHeadVW
	END
GO
-- #desc					Get Sales Order Header Information
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderHeadSrchList

CREATE VIEW [DBO].COM_SalesOrderHeadVW
AS
WITH CTE AS (
	SELECT 
		A.SHDOCO ,	
		A.SHDCTO , 
		A.SHKCOO , 
		A.SHVR01 , 
		A.SHTRDJ , 
		A.SHDRQJ ,
		A.SHOTOT ,
		A.SHFAP  ,
		A.SHCRCD , 
		A.SHCRRM ,
		A.SHHOLD ,
		A.SHRORN ,
		A.SHRCTO ,
		A.SHDEL1 , 
		A.SHDEL2 ,
		ISNULL(B.SH$9TYP, 0)		AS AddressBookType,
		B.SH$9AN8	AS SCBillToNumber,
		A.SHAN8	AS BillToNumber,
	    ISNULL(B.SHIDLN, 0)			AS BillToContactID,
		B.SH$9SHAN AS SCShipToNumber,
		A.SHSHAN AS ShipToNumber,
		ISNULL(B.SHRCK7, 0)			AS ShipToContactID,
		SHCO
	FROM [SCDATA].F4201 A
		LEFT OUTER JOIN [SCDATA].FQ674201 B	--Extended Sales Order Header
		ON  A.SHKCOO = B.SHKCOO
		AND A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO	
	UNION ALL
	SELECT 
		A.SHDOCO ,	
		A.SHDCTO , 
		A.SHKCOO , 
		A.SHVR01 , 
		A.SHTRDJ , 
		A.SHDRQJ ,
		A.SHOTOT ,
		A.SHFAP  ,
		A.SHCRCD , 
		A.SHCRRM ,
		A.SHHOLD ,
		A.SHRORN ,
		A.SHRCTO ,
		A.SHDEL1 , 
		A.SHDEL2 ,
		ISNULL(B.SH$9TYP, 0)		AS AddressBookType,
		B.SH$9AN8	AS SCBillToNumber,
		A.SHAN8	AS BillToNumber,
	    ISNULL(B.SHIDLN, 0)			AS BillToContactID,
		B.SH$9SHAN AS SCShipToNumber,
		A.SHSHAN AS ShipToNumber,
		ISNULL(B.SHRCK7, 0)			AS ShipToContactID,
		SHCO
	FROM [SCDATA].F42019 A				--Historical Sales Order Header
	LEFT OUTER JOIN [SCDATA].FQ674201 B	--Extended Sales Order Header
		ON  A.SHKCOO = B.SHKCOO
		AND A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO	
)
SELECT 
		SHDOCO ,	
		SHDCTO , 
		SHKCOO , 
		SHVR01 , 
		SHTRDJ , 
		SHDRQJ ,
		SHOTOT ,
		SHFAP  ,
		SHCRCD , 
		SHCRRM ,
		SHHOLD ,
		SHRORN ,
		SHRCTO ,
		SHDEL1 , 
		SHDEL2 ,
		AddressBookType,
		CASE AddressBookType WHEN 1 THEN SCBillToNumber ELSE BillToNumber END AS BillToNumber,
	    BillToContactID,
		CASE AddressBookType WHEN 1 THEN SCShipToNumber ELSE ShipToNumber END AS ShipToNumber,
		ShipToContactID,
		SHCO,
		TB.CCCRCD AS BaseCurrencyCode 
FROM CTE
INNER JOIN [SCDATA].F0010 TB 
	ON TB.CCCO = SHKCOO
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_SalesOrderHeadSrchVW'))
	BEGIN
		DROP VIEW [DBO].COM_SalesOrderHeadSrchVW
	END
GO

-- #desc				Get Sales Order Header/Detail Information
-- #db_dependencies		COM_OrderDetailVW
-- #db_references			COM_GetSalesOrderHeadSrchList

CREATE VIEW [DBO].COM_SalesOrderHeadSrchVW  
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddressBookType,
		A.BillToNumber,
	    A.BillToContactID,
		A.ShipToNumber,
		B.SHAN,
		A.ShipToContactID,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurrencyCode
	FROM [DBO].COM_SalesOrderHeadVW A			
	INNER JOIN [DBO].COM_OrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_RecentOrderDetailExtVW'))
	BEGIN
		DROP VIEW [DBO].COM_RecentOrderDetailExtVW
	END
GO

-- #desc					Get Sales Order Detail Information for Recent Stored Procedures
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderRecentList
CREATE VIEW [DBO].COM_RecentOrderDetailExtVW  
AS
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		B.SD$9SHAN AS SHAN, 
		A.SDLNTY  
	FROM [SCDATA].F4211 A	--Sales Order Lines
	INNER JOIN [SCDATA].FQ674211 B	--Extended Sales Order Lines
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
		AND B.SD$9TYP = 1
	UNION 
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		B.SD$9SHAN AS SHAN, 
		A.SDLNTY
	FROM [SCDATA].F42119 A --Historical Sales Order Lines
	INNER JOIN [SCDATA].FQ674211 B	--Extended Sales Order Lines
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
		AND B.SD$9TYP = 1
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_RecentOrderDetailVW'))
	BEGIN
		DROP VIEW [DBO].COM_RecentOrderDetailVW
	END
GO

-- #desc					Get Sales Order Detail Information for Recent Stored Procedures
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderRecentList
CREATE VIEW [DBO].COM_RecentOrderDetailVW 
AS
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDSHAN AS SHAN, 
		A.SDLNTY 
	FROM [SCDATA].F4211 A		--Sales Order Lines
	UNION 
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDSHAN AS SHAN, 
		A.SDLNTY    
	FROM [SCDATA].F42119 A	--Historical Sales Order Lines
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_InvoicePayHistListVW'))
	BEGIN
		DROP VIEW [DBO].COM_InvoicePayHistListVW
	END
GO
-- #desc					Get Invoice related information
-- #db_dependencies			N/A	
-- #db_references			COM_GetInvoicePayHistList

CREATE VIEW [DBO].COM_InvoicePayHistListVW
AS
	SELECT  
		A.RPAN8                 AS AddressNumber,
		ISNULL(AB.ABALPH,'')    AS AlphaName,
		A.RPKCO                 AS InvoiceCompany,
		A.RPDCT                 AS InvoiceType,
		A.RPDOC                 AS InvoiceNumber,
		A.RPSFX                 AS InvoiceSuffix,
		A.RPDIVJ                AS InvoiceDate,
		A.RPDDJ                 AS DueDate,
		B.CVCRCD                AS CurrencyCode,
		A.RPBCRC				AS BaseCurrencyCode,	
		A.RPCRRM                AS CurrencyMode,
		B.CVDL01                AS CurrencyDesc,
		A.RPAG                  AS GrossAmount,
		A.RPAAP                 AS OpenAmount,
		ISNULL(C.RZPAAP,0)		AS PaidAmount,
		0				        AS InTransitAmount,
		A.RPACR                 AS GrossAmountForeign,
		A.RPFAP                 AS OpenAmountForeign,
		ISNULL(C.RZPFAP,0)		AS PaidAmountForeign,
		0				        AS InTransitAmountForeign,
		''						AS RUEDUS,
		''						AS RUEDBT,
		''						AS RUEDTN,
		0						AS RUEDLN,
		A.RPCO					AS RPCO,
		RZCKNU					AS PaymentReference
	FROM [SCDATA].F03B11 A            --Invoice
	INNER JOIN [SCDATA].F03B14 C --Receipts Detail
		ON C.RZAN8 = A.RPAN8
		AND C.RZDOC = A.RPDOC
		AND C.RZDCT = A.RPDCT
		AND C.RZKCO = A.RPKCO
		AND C.RZSFX = A.RPSFX
	INNER JOIN [SCDATA].F0013 B --Currency Master
		ON B.CVCRCD = A.RPCRCD
	LEFT JOIN [SCDATA].F0101 AB --Address Book Master
		ON AB.ABAN8 = A.RPAN8
	UNION
	SELECT  
		A.RPAN8					AS AddressNumber,
		ISNULL(AB.ABALPH,'')	AS AlphaName,
		A.RPKCO					AS InvoiceCompany,
		A.RPDCT					AS InvoiceType,
		A.RPDOC					AS InvoiceNumber,
		A.RPSFX					AS InvoiceSuffix,
		A.RPDIVJ				As InvoiceDate,
		A.RPDDJ					As DueDate,
		B.CVCRCD				As CurrencyCode,
		A.RPBCRC				AS BaseCurrencyCode,	
		A.RPCRRM				AS CurrencyMode,
		B.CVDL01				AS CurrencyDesc,
		A.RPAG					AS GrossAmount,
		A.RPAAP					AS OpenAmount,
		0						AS PaidAmount,
		ISNULL(D.RUAG,0)		AS InTransitAmount,
		A.RPACR					AS GrossAmountForeign,
		A.RPFAP					AS OpenAmountForeign,
		0						AS PaidAmountForeign,
		ISNULL(D.RUFAP,0)		AS InTransitAmountForeign,
		D.RUEDUS				AS RUEDUS,
		D.RUEDBT				AS RUEDBT,
		D.RUEDTN				AS RUEDTN,
		D.RUEDLN 	  			AS RUEDLN,
		A.RPCO					AS RPCO,
		D.RUCKNU				AS PaymentReference
	FROM [SCDATA].F03B11 A				 --Invoice
	INNER JOIN [SCDATA].F03B13Z1 D -- Electronic Receipts Input                           
		ON A.RPDOC = D.RUDOC
		AND A.RPDCT = D.RUDCT
		AND A.RPKCO = D.RUKCO
		AND A.RPSFX = D.RUSFX	
	INNER JOIN [SCDATA].F0013 B --Currency Master
		ON B.CVCRCD = A.RPCRCD
	LEFT JOIN [SCDATA].F0101 AB --Address Book Master
		ON AB.ABAN8 = A.RPAN8
	WHERE
		A.RPAN8 = D.RUAN8 
		AND D.RUEUPS IN ('', 'E')
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].QTS_OrderDetailVW'))
	BEGIN
		DROP VIEW [DBO].QTS_OrderDetailVW
	END
GO
-- #desc					Get Quote Order Detail Information
-- #db_dependencies			N/A
-- #db_references			QTS_OrderHeadSrchVW, QTS_GetQuoteRecentList

CREATE VIEW [DBO].QTS_OrderDetailVW
AS
	SELECT 
		A.SDDOCO,
		A.SDKCOO,
		A.SDDCTO,
		A.SDSHAN AS SHAN
	FROM [SCDATA].F4211 A	--Sales Order Lines
	UNION
		SELECT 
		A.SDDOCO,
		A.SDKCOO,
		A.SDDCTO,
		A.SDSHAN AS SHAN
	FROM [SCDATA].F42119 A	--Sales Order Lines
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].QTS_OrderHeadVW'))
	BEGIN
		DROP VIEW [DBO].QTS_OrderHeadVW
	END
GO
-- #desc					Get Quote Order Header Information
-- #db_dependencies			N/A
-- #db_references			QTS_OrderHeadSrchVW, QTS_GetQuoteOrderHeadSrchList

CREATE VIEW [DBO].QTS_OrderHeadVW
AS
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHRORN,
		A.SHRCTO,
		A.SHAN8 AS BillToNumber,
		A.SHCO
	FROM [SCDATA].F4201 A					/*Sales Order Header*/
	UNION ALL
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHRORN,
		A.SHRCTO,
		A.SHAN8 AS BillToNumber,
		A.SHCO
	FROM [SCDATA].F42019 A				/*Historical Sales Order Header*/
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].QTS_OrderHeadSrchVW'))
	BEGIN
		DROP VIEW [DBO].QTS_OrderHeadSrchVW
	END
GO
-- #desc				Get Quote Order Header/Detail Information
-- #db_dependencies		QTS_OrderHeadVW, QTS_OrderDetailVW
-- #db_references			QTS_GetQuoteOrderHeadSrchList

CREATE VIEW [DBO].QTS_OrderHeadSrchVW 
AS
SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHRORN,
		A.SHRCTO,
		A.BillToNumber,
		B.SHAN,
		A.SHCO
	FROM [DBO].QTS_OrderHeadVW A	
	INNER JOIN [DBO].QTS_OrderDetailVW B
	ON A.SHDOCO =  B.SDDOCO
	AND A.SHDCTO = B.SDDCTO	
	AND A.SHKCOO = B.SDKCOO

GO


IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_ConsumerOrderDetailVW'))
	BEGIN
		DROP VIEW [DBO].COM_ConsumerOrderDetailVW
	END
GO
-- #desc				
-- #db_dependencies				N/A
-- #db_references				N/A		

CREATE VIEW [DBO].COM_ConsumerOrderDetailVW 
AS
	WITH CTE_F4211 AS ( 
			SELECT 
				A.SDKCOO, 
				A.SDDOCO, 
				A.SDDCTO, 
				A.SDLNID, 
				A.SDITM, 
				A.SDNXTR, 
				A.SDLNTY, 
				A.SDLTTR, 
				A.SDCNDJ, 
				A.SDRLIT 
			FROM [SCDATA].F4211 A		 --Sales Order Lines 
			UNION ALL
			SELECT 
				A.SDKCOO, 
				A.SDDOCO, 
				A.SDDCTO, 
				A.SDLNID, 
				A.SDITM, 
				A.SDNXTR, 
				A.SDLNTY, 
				A.SDLTTR, 
				A.SDCNDJ, 
				A.SDRLIT 
			FROM [SCDATA].F42119 A	 
			) --Historical Sales Order Lines 
			SELECT 
				A.SDKCOO, 
				A.SDDOCO, 
				A.SDDCTO, 
				A.SDLNID, 
				B.SD$9SHAN AS SHAN, 
				A.SDITM, 
				A.SDNXTR, 
				A.SDLNTY, 
				A.SDLTTR, 
				A.SDCNDJ, 
				A.SDRLIT 
			FROM CTE_F4211 A 
			INNER JOIN [SCDATA].FQ674211 B	 --Extended Sales Order Lines 
				ON A.SDKCOO = B.SDKCOO 
				AND A.SDDOCO = B.SDDOCO 
				AND A.SDDCTO = B.SDDCTO 
				AND A.SDLNID = B.SDLNID 
	 AND B.SD$9TYP = 1
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_CustomerOrderDetailVW'))
	BEGIN
		DROP VIEW [DBO].COM_CustomerOrderDetailVW
	END
GO
-- #desc				
-- #db_dependencies				N/A
-- #db_references				N/A		

CREATE VIEW [DBO].COM_CustomerOrderDetailVW 
AS
	SELECT 
		A.SDKCOO, 
		A.SDDOCO, 
		A.SDDCTO, 
		A.SDLNID, 
		A.SDSHAN AS SHAN, 
		A.SDITM, 
		A.SDNXTR, 
		A.SDLNTY, 
		A.SDLTTR, 
		A.SDCNDJ, 
		A.SDRLIT 
	FROM [SCDATA].F4211 A		 --Sales Order Lines 
	UNION ALL
	SELECT 
		A.SDKCOO, 
		A.SDDOCO, 
		A.SDDCTO, 
		A.SDLNID, 
		A.SDSHAN AS SHAN, 
		A.SDITM, 
		A.SDNXTR, 
		A.SDLNTY, 
		A.SDLTTR, 
		A.SDCNDJ, 
		A.SDRLIT 
	FROM [SCDATA].F42119 A
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_CustomerOrderHeaderVW'))
	BEGIN
		DROP VIEW [DBO].COM_CustomerOrderHeaderVW
	END
GO
-- #desc				
-- #db_dependencies				N/A
-- #db_references				N/A		

CREATE VIEW [DBO].COM_CustomerOrderHeaderVW 
AS
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			0		AS AddressBookType, 
			A.SHAN8	AS BillToNumber, 
			A.SHSHAN AS ShipToNumber,
			SHCO 
		FROM [SCDATA].F4201 A 
		UNION ALL
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			0		AS AddressBookType, 
			A.SHAN8	AS BillToNumber, 
			A.SHSHAN AS ShipToNumber,
			SHCO 
		FROM [SCDATA].F42019 A				 --Historical Sales Order Header 
	) 
	SELECT 
			SHDOCO,	 
			SHDCTO, 
			SHKCOO, 
			SHVR01, 
			SHTRDJ, 
			SHDRQJ, 
			SHOTOT, 
			SHFAP,
			SHCRCD, 
			SHCRRM, 
			SHHOLD, 
			SHRORN, 
			SHRCTO, 
			SHDEL1, 
			SHDEL2, 
			AddressBookType, 
			BillToNumber, 
			ShipToNumber,
			SHCO, 
			TB.CCCRCD AS  BaseCurrencyCode
	FROM CTE 
	INNER JOIN [SCDATA].F0010 TB 
		ON TB.CCCO = SHKCOO
GO


IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_ConsumerOrderHeaderVW'))
	BEGIN
		DROP VIEW [DBO].COM_ConsumerOrderHeaderVW
	END
GO
-- #desc				
-- #db_dependencies				N/A
-- #db_references				N/A		

CREATE VIEW [DBO].COM_ConsumerOrderHeaderVW 
AS
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2,
			SHCO 
		FROM [SCDATA].F4201 A
		UNION ALL
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2,
			SHCO 
		FROM [SCDATA].F42019 A				 --Historical Sales Order Header 
	) 
	SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			B.SH$9TYP AS AddressBookType, 
			B.SH$9AN8 AS BillToNumber, 
			B.SH$9SHAN AS ShipToNumber,
			A.SHCO, 
			TB.CCCRCD AS BaseCurrencyCode 
	FROM CTE A 
	INNER JOIN [SCDATA].FQ674201 B	 --Extended Sales Order Header 
			ON B.SHKCOO = A.SHKCOO 
			AND B.SHDOCO = A.SHDOCO 
			AND B.SHDCTO = A.SHDCTO	 
			AND B.SH$9TYP = 1 
	INNER JOIN [SCDATA].F0010 TB 
		ON TB.CCCO = A.SHKCOO
GO

 
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_CustomerSOHeadSrchVW'))
	BEGIN
		DROP VIEW [DBO].COM_CustomerSOHeadSrchVW
	END
GO
-- #desc				
-- #db_dependencies				N/A
-- #db_references				N/A		

CREATE VIEW [DBO].COM_CustomerSOHeadSrchVW 
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddressBookType,
		A.BillToNumber,
		A.ShipToNumber,
		B.SHAN,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurrencyCode
	FROM [DBO].COM_CustomerOrderHeaderVW A			
	INNER JOIN [DBO].COM_CustomerOrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_ConsumerSOHeadSrchVW'))
	BEGIN
		DROP VIEW [DBO].COM_ConsumerSOHeadSrchVW
	END
GO
-- #desc				
-- #db_dependencies				N/A
-- #db_references				N/A		

CREATE VIEW [DBO].COM_ConsumerSOHeadSrchVW 
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddressBookType,
		A.BillToNumber,
		A.ShipToNumber,
		B.SHAN,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurrencyCode
	FROM [DBO].COM_ConsumerOrderHeaderVW A			
	INNER JOIN [DBO].COM_ConsumerOrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[DBO].COM_InvoiceOrderHeaderVW'))
	BEGIN
		DROP VIEW [DBO].COM_InvoiceOrderHeaderVW
	END
GO
-- #desc					Get Invoice Order Header Information
-- #db_dependencies			N/A
-- #db_references			COM_GetInvoiceOrderDetail
CREATE VIEW [DBO].COM_InvoiceOrderHeaderVW
AS
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHDEL1, 
		A.SHDEL2,
		A.SHCO,
		0       AS AddressBookType,
		A.SHAN8	AS BillToNumber,
        A.SHSHAN AS ShipToNumber
	FROM [SCDATA].F4201 A					--Sales Order Header
	UNION ALL	
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHDEL1, 
		A.SHDEL2,
		A.SHCO,
		0       AS AddressBookType,
		A.SHAN8	AS BillToNumber,
        A.SHSHAN AS ShipToNumber
	FROM [SCDATA].F42019 A				--History Sales Order Header
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetConstantValue'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetConstantValue
	END

GO

-- #desc							Get constant by installation value only
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @Constant					Constant ID
-- #param @InstallationID			Installation ID
-- #param @ConstantValue			output the value, used inside other SPs

CREATE Procedure [DBO].CMM_GetConstantValue
	@Constant		NVARCHAR(10),
	@InstallationID NVARCHAR(3) OUTPUT,
	@ConstantValue NVARCHAR(256) = NULL OUTPUT
AS
	SET NOCOUNT ON
	
	SET @ConstantValue = null;
	
	--First try to get constant by installation defined value
	SELECT TOP 1 
		@ConstantValue = CN$9VAL
	FROM  
		[SCDATA].FQ670004 A
	WHERE 
		A.CN$9INID = @InstallationID AND 
		A.CN$9CNST = @Constant

	--select @ConstantValue as value
	
	--Check value, if null then get base value
	IF @ConstantValue IS NULL
	BEGIN
		SET @InstallationID = '***'	
		
		SELECT TOP 1 
			@ConstantValue = CN$9VAL
		FROM  
			[SCDATA].FQ670004 A
		WHERE 
			A.CN$9INID = @InstallationID AND 
			A.CN$9CNST = @Constant
	END
	
RETURN
			

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'FN' AND id = OBJECT_ID(N'[DBO].CMM_GetCurrentJulianDate'))
	BEGIN
		DROP  FUNCTION  [DBO].CMM_GetCurrentJulianDate
	END
GO
-- #desc						Return Julian Date
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param currentDate			Current Date

CREATE FUNCTION [DBO].CMM_GetCurrentJulianDate
(@currentDate DATETIME )
RETURNS INTEGER
AS
BEGIN

RETURN CONVERT( INTEGER , CONVERT(NVARCHAR, DATEPART(yy, @currentDate)-1900) + RIGHT('000' + CONVERT(NVARCHAR,DATEPART(dy, @currentDate)),3))

END

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'IF' AND id = OBJECT_ID(N'[DBO].CMM_GetEffectiveAddressFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].CMM_GetEffectiveAddressFnc
	END

GO

-- #desc						Get a table with Effective Address by AN8
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				COM_GetSalesOrderInfo_BillTo, COM_GetSalesOrderShipments, QTS_GetQuoteOrderInfoShipments
--								QTS_GetQuoteOrderInfo_BillTo, CMM_GetBranchPlantInfo, CMM_GetBranchPlantInfoList,
--						

-- #param @AddressNumber		Address Number
-- #param @CurrentDate			Current Julian Date

CREATE FUNCTION [DBO].CMM_GetEffectiveAddressFnc
(	
	@AddressNumber	FLOAT,
	@CurrentDate	NUMERIC
)
RETURNS TABLE 
AS
RETURN
	SELECT TOP 1
		A.ALAN8,
		A.ALEFTB,
		A.ALADD1,
		A.ALADD2,
		A.ALADD3,
		A.ALADD4,
		A.ALADDZ,
		A.ALCTY1,
		A.ALCOUN,
		A.ALADDS,
		A.ALCTR
	FROM [SCDATA].F0116 A
	WHERE A.ALAN8 = @AddressNumber 
		AND A.ALEFTB <= @CurrentDate 
	ORDER BY ALEFTB DESC;

GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TF' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogTree'))
	BEGIN
		DROP  FUNCTION  [DBO].INV_GetCatalogTree
	END

GO 

-- #desc							Gets Nodes.
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					[DBO].INV_DelCatalogDetail

-- #param @IncludeParent			Bit Include or exclude the parent node 
-- #param @Catalog					Catalog ID
-- #param @UniqueKey				Unique Key	


CREATE FUNCTION [DBO].INV_GetCatalogTree
(
	@IncludeParent FLOAT, 
	@Catalog	   NVARCHAR(3),
	@UniqueKey	   FLOAT
)

RETURNS @TreeView TABLE 
(
    
	UniqueKeyID FLOAT, 
	CatalogId   NVARCHAR(50) collate DATABASE_DEFAULT, 
	ParentKeyID FLOAT,
	Description NVARCHAR(30) collate DATABASE_DEFAULT,
	SeqNumber	FLOAT
)

AS  
BEGIN 
	
	IF (@UniqueKey=0) 
	BEGIN
	select @UniqueKey = CDUKID from  [SCDATA].FQ67413 where  CD$9CLGID = @Catalog  
	and (CD$9PKID IS NULL OR CD$9PKID = 0)
	end
	
	IF (@IncludeParent=1) 
	BEGIN
		INSERT INTO @TreeView 
		SELECT 
			CDUKID,
			CD$9CLGID,
			CD$9PKID,
			CDDL01,
			CDSEQ 
		FROM [SCDATA].FQ67413 
		WHERE CD$9CLGID = @Catalog
		AND CDUKID = @UniqueKey
 	END

	DECLARE @Unique_Key int, @CatalogId NVARCHAR(50), @Parent_Key int,@Description NVARCHAR(30),@SequenceNumber int

	DECLARE RetrieveReports CURSOR STATIC LOCAL FOR
	SELECT CDUKID,CD$9CLGID,CD$9PKID,CDDL01,CDSEQ 
	FROM [SCDATA].FQ67413 
	WHERE CD$9CLGID = @Catalog
	AND CD$9PKID=@UniqueKey
	ORDER BY CDUKID

	OPEN RetrieveReports

	FETCH NEXT FROM RetrieveReports
	INTO @Unique_Key, @CatalogId, @Parent_Key,@Description,@SequenceNumber


	WHILE (@@FETCH_STATUS = 0) 
	BEGIN
		INSERT INTO @TreeView
		SELECT * FROM [DBO].INV_GetCatalogTree(0,@CatalogId,@Unique_Key)
  
		INSERT INTO @TreeView
		VALUES(@Unique_Key,@CatalogId, @Parent_Key,@Description,@SequenceNumber)
   
		FETCH NEXT FROM RetrieveReports
		INTO @Unique_Key, @CatalogId, @Parent_Key,@Description,@SequenceNumber
	END
	
	CLOSE RetrieveReports
	DEALLOCATE RetrieveReports

	RETURN
END


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'FN' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogNodePathFnc'))
 BEGIN
  DROP  Function  [DBO].INV_GetCatalogNodePathFnc
 END

GO

-- #desc						Gets Bread Crumb in a string
-- #bl_class					N/A	
-- #db_references				INV_GetCatalogDetListByInst    
-- #db_dependencies				N/A

-- #param CatalogID			    Catalog ID
-- #param CatalodDetailId		Catalod Node Id

CREATE Function [DBO].INV_GetCatalogNodePathFnc
(
	@CatalogId			NVARCHAR(3),
	@CatalodDetailId	FLOAT
)RETURNS  nvarchar(500) 
AS
BEGIN
	declare @CookieCrumb nvarchar(500) =''; 
	declare @Exist FLOAT; 
	declare @ParentTmp FLOAT;
	declare @CatalodDetailIdTmp FLOAT;
	declare @NodeTemp nvarchar(30);

	WHILE(@CatalodDetailId <> 0 AND @CatalodDetailId IS NOT NULL) BEGIN
		SELECT @Exist = COUNT(*), @CatalodDetailIdTmp = CD$9PKID
		FROM [SCDATA].FQ67413 
		WHERE CD$9CLGID = @CatalogId 
		AND CDUKID = @CatalodDetailId	
		GROUP BY CD$9PKID

		IF(@Exist > 0) BEGIN
			
			SELECT @NodeTemp = RTRIM(A.CDDL01)
			FROM [SCDATA].FQ67413 A		
			WHERE A.CD$9CLGID = @CatalogId 
			AND A.CDUKID = @CatalodDetailId;
		
			Set @CookieCrumb = @NodeTemp +  ' / '  + @CookieCrumb ; 			
			Set @ParentTmp = @CatalodDetailId;
			set @CatalodDetailId = @CatalodDetailIdTmp;		
		
			if (@ParentTmp = @CatalodDetailId) BEGIN
				SET @CatalodDetailId = NULL;			
			END 		
		END
		ELSE BEGIN
			SET @CatalodDetailId = NULL	    
		END  	
	END
	
	IF (LEN(@CookieCrumb) > 0) BEGIN 
		SELECT @NodeTemp = CADSC1 FROM [SCDATA].FQ67412 WHERE CA$9CLGID = @CatalogId;
		SET @CookieCrumb = RTRIM(@NodeTemp) + ' / ' + SUBSTRING(@CookieCrumb, 1, LEN(@CookieCrumb) - 2) ; 
	END
	ELSE BEGIN
		SET @CookieCrumb = ' '
	END			    
	
	RETURN  @CookieCrumb;

END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelCatalogDetailLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelCatalogDetailLang
	END

GO


-- #desc						All relationated rows and Catalog Detail Lang Delete.
-- #bl_class					Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID    	    UniqueKeyID.
-- #param @LangPref    			Language Preference.

CREATE PROCEDURE [DBO].INV_DelCatalogDetailLang
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID		FLOAT,
	@LangPref			NVARCHAR(2)
AS


DELETE FROM [SCDATA].FQ67413L
WHERE
     (CD$9CLGID = @CatalogId) AND
     (@UniqueKeyID IS NULL OR CDUKID = @UniqueKeyID) AND
     (@LangPref IS NULL OR CDLNGP = @LangPref)
    
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelCatalogLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelCatalogLang
	END

GO



-- #desc						Catalog Lang Delete.
-- #bl_class					Premier.Inventory.CatalogLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @LangPref    			Language Preference.

CREATE PROCEDURE [DBO].INV_DelCatalogLang
	
	@CatalogId		    NVARCHAR(3),
	@LangPref           NVARCHAR(2)
AS


DELETE FROM [SCDATA].FQ67412L
WHERE
     (CA$9CLGID = @CatalogId) AND
     (@LangPref IS NULL OR CALNGP  = @LangPref)
    
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelItemWebContentDetLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelItemWebContentDetLang
	END

GO

-- #desc					Delete language override for Item Web Content Detail
-- #bl_class				Premier.Inventory.ItemWebContentDetailLang
-- #db_dependencies		
-- #db_references			INV_DelItemWebContentDetail

-- #param @ItemNumber	    Item Number
-- #param @InstallationID	Installation ID	 
-- #param @DesignStatus		Design Status
-- #param @UniqueKeyID		Unique Key ID
-- #param @LangPref			Language Preference

CREATE PROCEDURE [DBO].INV_DelItemWebContentDetLang
	@InstallationID NVARCHAR(3),
    @ItemNumber FLOAT,
	@DesignStatus FLOAT,
	@UniqueKeyID FLOAT,
	@LangPref NVARCHAR(2)

AS

	DELETE FROM 
		[SCDATA].FQ67411L
    WHERE 
		CLITM = @ItemNumber 
		AND CL$9INID = @InstallationID
		AND CL$9DS = @DesignStatus
		AND (@UniqueKeyID IS NULL OR CLUKID = @UniqueKeyID)
		AND (@LangPref IS NULL OR CLLNGP = @LangPref)
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelItemWebContentHeadLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelItemWebContentHeadLang
	END

GO

-- #desc					Delete language override for Item Web Content Header
-- #bl_class				Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies			N/A
-- #db_references			INV_DelItemWebContentHeader

-- #param @InstallationID	Installation ID
-- #param @ItemNumber	    Item Number	 
-- #param @DesignStatus		Design Status
-- #param @LangPref			Language Preference

CREATE PROCEDURE [DBO].INV_DelItemWebContentHeadLang
		@InstallationID NVARCHAR(3),
	    @ItemNumber FLOAT,
		@DesignStatus FLOAT,
		@LangPref NVARCHAR(2)
AS

	DELETE FROM 
		[SCDATA].FQ67410L
	WHERE	
		CLITM = @ItemNumber 
		AND CL$9INID = @InstallationID 
		AND CL$9DS = @DesignStatus
		AND (@LangPref IS NULL OR CLLNGP = @LangPref)
            
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelUnitOfMeasureLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelUnitOfMeasureLang
	END

GO

-- #desc					Del UOM Lang
-- #bl_class				Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @UnitOfMeasure	Unit of Measure
-- #param @LangPref			Language Preference


CREATE PROCEDURE [DBO].INV_DelUnitOfMeasureLang
	@UnitOfMeasure		NVARCHAR(10),
	@LangPref			NVARCHAR(2)
AS

	DELETE  
		FROM  [SCDATA].FQ67415L
	WHERE UMUOM = @UnitOfMeasure
	    AND (@LangPref IS NULL OR UMLNGP = @LangPref)



  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcGetCatDetailTemplate'))
BEGIN
  DROP	PROCEDURE  [DBO].INV_ExcGetCatDetailTemplate
END

GO
-- #desc						Get the first Template Id 
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog ID
-- #param @UniqueKeyId		    Node ID

CREATE PROCEDURE [DBO].INV_ExcGetCatDetailTemplate
(
	@CatalogID			NVARCHAR(3),
	@UniqueKeyID		FLOAT,
	@TemplateID			NVARCHAR(10) = NULL OUTPUT
)
AS

DECLARE @Exist FLOAT 
DECLARE @ParentTmp FLOAT
DECLARE @TemplateIDTemp NVARCHAR(10)
SET @TemplateIDTemp = NULL

WHILE(@UniqueKeyID IS NOT NULL) 
BEGIN
	
	SELECT @Exist = COUNT(*)
	FROM [SCDATA].FQ67413 
	WHERE CD$9CLGID = @CatalogID 
	AND CDUKID = @UniqueKeyID
  
	IF(@Exist > 0) 
	BEGIN
		
		SELECT @ParentTmp=A.CD$9PKID, @TemplateIDTemp=A.CDTMPI
		FROM [SCDATA].FQ67413 A		
		WHERE A.CD$9CLGID = @CatalogID
		AND A.CDUKID = @UniqueKeyID					
		
		SET @TemplateID = @TemplateIDTemp
		
		IF (@ParentTmp = 0) 
		BEGIN
			SET @UniqueKeyID = NULL		
		END
		ELSE 
		BEGIN
			SET @UniqueKeyID = @ParentTmp
		END	
		
		IF(@TemplateID IS NOT NULL AND @TemplateID <>'' AND @TemplateID <>'NOTEMPLATE') 
		BEGIN				
			SET @UniqueKeyID = NULL
		END
		
	END
	ELSE 
	BEGIN
		SET @UniqueKeyID = NULL	   
	END
		 
END


GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TF' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogNodeListFnc'))
BEGIN
	DROP  FUNCTION  [DBO].INV_GetCatalogNodeListFnc
END
GO

-- #desc					Get Valid Catalog Node List. Remove Orphan nodes (Nodes where parent does not exist).
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			INV_ExcGetCatXMLNodeList, INV_ExcGetCatNodeXMLItemList

-- #param @CatalogID		Catalog Id
  
CREATE FUNCTION [DBO].INV_GetCatalogNodeListFnc
( 
	@CatalogID NVARCHAR(3)
) 

RETURNS @CATALOGNODES TABLE
( 
	CatalogID			NVARCHAR(3),
	UniqueKeyID			FLOAT,
	ParentKeyID			FLOAT,
	IncludeInSearch		FLOAT, 
	Description			NVARCHAR(30),
	EffectiveModeFlag	FLOAT,
	EffectiveFromDate	NUMERIC,
	EffectiveThruDate	NUMERIC,
	SequenceNumber		FLOAT,
	ImageName			NVARCHAR(256),
	TemplateID			NVARCHAR(10)
)   
AS

BEGIN 
		INSERT INTO @CATALOGNODES
		(
			CatalogID,
			UniqueKeyID,
			ParentKeyID,
			IncludeInSearch,
			Description,
			EffectiveModeFlag,
			EffectiveFromDate,
			EffectiveThruDate,
			SequenceNumber,
			ImageName,
			TemplateID 
		)
		SELECT 
			CD$9CLGID,
			CDUKID,
			CD$9PKID,
			CD$9IIS,
			CDDL01,
			CD$9EFM,
			CDEFFF,
			CDEFFT,
			CDSEQ,
			CDIMGURL,
			CDTMPI
		FROM [SCDATA].FQ67413 
		WHERE CD$9CLGID = @CatalogID;
		 
		WHILE((SELECT COUNT(*) FROM @CATALOGNODES
						WHERE ParentKeyID <> 0
						AND ParentKeyID IS NOT NULL
						AND ParentKeyID NOT IN (SELECT UniqueKeyID FROM @CATALOGNODES)) <> 0 )
		BEGIN
			DELETE FROM @CATALOGNODES
			WHERE ParentKeyID <> 0
				AND ParentKeyID IS NOT NULL
				AND ParentKeyID NOT IN (SELECT UniqueKeyID FROM @CATALOGNODES);
		END /*END WHILE*/
		
		RETURN
END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'FN' AND id = OBJECT_ID(N'[DBO].INV_GetItemBranchPlantStrFnc'))
BEGIN
	DROP  FUNCTION  [DBO].INV_GetItemBranchPlantStrFnc
END
GO

-- #desc						Returns the BranchPlant list of an item in a string value concatenated with bMCU'+-NCU code-+'eMCU '
-- #bl_class					N/A	
-- #db_dependencies				N/A
-- #db_references				INV_GetCatalogDetailItemList

-- #param @InstallationID		Installation Identifier
-- #param @CatalogID			Catalog Identifier
CREATE FUNCTION [DBO].INV_GetItemBranchPlantStrFnc
(
      @InstallationID   NVARCHAR(3),
      @ItemNumber       FLOAT
)
RETURNS NVARCHAR(800)
AS          
BEGIN 
      DECLARE @BranchPlant NVARCHAR(MAX);        
      SELECT 
            @BranchPlant = ISNULL(@BranchPlant, '') + 'bMCU'+RTRIM(LTRIM(MCMCU))+'eMCU '      
            FROM [SCDATA].F0006 BM                      --Branch Plant Master
            INNER JOIN [SCDATA].F4102 IB          --Item Master Branch
                  ON IB.IBMCU = BM.MCMCU
            INNER JOIN [SCDATA].FQ679910 BI        -- BrachPlant by Installation
                  ON BI.BI$9INID = @InstallationID
                  AND BI.BIMCU = IB.IBMCU
            WHERE
                  IB.IBITM = @ItemNumber      
      RETURN @BranchPlant;
END

GO
-- #desc						Return table with desc1,desc2,desc3 and URL
-- #bl_class					N/A
-- #db_dependencies				N/A			
-- #db_references				Several SPs

-- #param @InstallationID		Installation ID
-- #param @ItemNumber			Item Number
-- #param @LangPref				Language Preference
-- #param @DesignStatus			Design Status

IF EXISTS (SELECT * FROM sysobjects WHERE type IN ('IF', 'FN') AND id = OBJECT_ID(N'[DBO].INV_GetItemContenDescAndURLFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].INV_GetItemContenDescAndURLFnc
	END
GO

CREATE FUNCTION [DBO].INV_GetItemContenDescAndURLFnc
(
	@InstallationID		NVARCHAR(3),
	@ItemNumber			FLOAT,
	@LangPref			NVARCHAR(2),
	@DesignStatus 	    NUMERIC(18,0)
)
RETURNS TABLE 
AS
RETURN 
(

WITH CTE AS (
	SELECT CASE WHEN EXISTS (
	SELECT 1 from [SCDATA].FQ67410 WHERE (CHITM = @ItemNumber AND CH$9INID = @InstallationID AND CH$9DS = @DesignStatus))
	THEN @InstallationID
	ELSE '***' END AS INSTALLATIONID
)
SELECT ISNULL (B.CLDSC1,A.CHDSC1) AS DESC1,
	   ISNULL (B.CLDSC2,A.CHDSC2) AS DESC2,
	   ISNULL (B.CLDSC3,A.CHDSC3) AS DESC3,   
	   A.CHPTURL AS URL
FROM CTE C, [SCDATA].FQ67410 A
LEFT OUTER JOIN [SCDATA].FQ67410L B
	ON  B.CLITM = A.CHITM
	AND B.CL$9INID = A.CH$9INID
	AND B.CL$9DS = A.CH$9DS
	AND B.CLLNGP = @LangPref
WHERE	
	A.CHITM = @ItemNumber
	AND (A.CH$9INID = C.INSTALLATIONID)
	AND A.CH$9DS = @DesignStatus
)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'FN' AND id = OBJECT_ID(N'[DBO].INV_GetItemCrossRefStrFnc'))
BEGIN
	DROP FUNCTION  [DBO].INV_GetItemCrossRefStrFnc
END
GO
 
-- #desc					Read Cross Reference item list associated to an Item Number
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			INV_GetCatalogDetailItemList

-- #param @ItemNumber		Short Item Number
-- #param Type				Cross Reference Type (XRT)

CREATE FUNCTION [DBO].INV_GetItemCrossRefStrFnc
(
	@ItemNumber	FLOAT,
	@CrossRefType  NVARCHAR(2)
)

RETURNS NVARCHAR(MAX)
BEGIN
		DECLARE @FinalResult NVARCHAR(MAX) ;
			SELECT 
			@FinalResult = ISNULL(@FinalResult,'')+	LTRIM(RTRIM(IVCITM)) + ' ' 			 
			FROM [SCDATA].F4104 
			WHERE
				IVITM = @ItemNumber
				AND IVXRT in ('M', 'UP', @CrossRefType) 
	RETURN RTRIM(@FinalResult);
END;


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelCatalogDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelCatalogDetail
	END

GO

-- #desc						All relationated rows and Catalog Detail Delete.
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				[DBO].INV_GetCatalogTree
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID    	    UniqueKeyID (Node ID)

CREATE PROCEDURE [DBO].INV_DelCatalogDetail
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID		FLOAT
AS

IF(@UniqueKeyID IS NULL)
BEGIN 
	--Delete All Catalog Node Items
	DELETE FROM [SCDATA].FQ67413I
	WHERE IN$9CLGID = @CatalogId

	--DELETE ALL NODES
	DELETE FROM [SCDATA].FQ67413
	WHERE CD$9CLGID = @CatalogId
     
	EXEC [DBO].INV_DelCatalogDetailLang @CatalogId,NULL,NULL
END
ELSE
BEGIN
    /*--------------------------------------------*/
	/*Delete information for all the Node children*/
	--Delete Catalog Node Items
	DELETE FROM [SCDATA].FQ67413I
	WHERE IN$9CLGID = @CatalogId AND
		  INUKID IN (SELECT UniqueKeyID 
					FROM [DBO].INV_GetCatalogTree(0,@CatalogId,@UniqueKeyID))
		 
	--DELETE NODE LANGUAGES
	DELETE FROM [SCDATA].FQ67413L
	WHERE CD$9CLGID = @CatalogId
	AND CDUKID IN (SELECT UniqueKeyID 
				   FROM [DBO].INV_GetCatalogTree(0,@CatalogId,@UniqueKeyID))

			
	--DELETE  Catalog Nodes
	DELETE FROM [SCDATA].FQ67413
	WHERE CD$9CLGID = @CatalogId
    AND CDUKID IN (SELECT UniqueKeyID 
				   FROM [DBO].INV_GetCatalogTree(0,@CatalogId,@UniqueKeyID))
	
	/*--------------------------------------------*/
	/*Delete information for the specific node*/
	
	--Delete Catalog Node Items
	DELETE FROM [SCDATA].FQ67413I
	WHERE IN$9CLGID = @CatalogId 
	AND	 INUKID = @UniqueKeyID

	--DELETE NODE SPECIFIC LANG      
	EXEC [DBO].INV_DelCatalogDetailLang @CatalogId,@UniqueKeyID,NULL
	
	--DELETE THE SPECIFIC NODE
	DELETE FROM [SCDATA].FQ67413
	WHERE CD$9CLGID = @CatalogId 
	AND CDUKID = @UniqueKeyID

END

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelItemWebContentDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelItemWebContentDetail
	END

GO

-- #desc					Delete Item Web Content Detail and related registers
-- #bl_class				Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies			INV_DelItemWebContentDetailLang
-- #db_references			INV_DelItemWebContentHeader

-- #param @InstallationID	Installation ID
-- #param @ItemNumber	    Item Number	 
-- #param @DesignStatus		Design Status
-- #param @UniqueKeyID		Unique Key ID


CREATE PROCEDURE [DBO].INV_DelItemWebContentDetail
	@InstallationID NVARCHAR(3),
    @ItemNumber FLOAT,	
	@DesignStatus FLOAT,
	@UniqueKeyID FLOAT

AS

	DELETE FROM 
		[SCDATA].FQ67411
    WHERE 
		CD$9INID = @InstallationID
		AND CDITM = @ItemNumber 
		AND CD$9DS = @DesignStatus
		AND (@UniqueKeyID IS NULL OR CDUKID = @UniqueKeyID)
		
		
	EXEC [DBO].INV_DelItemWebContentDetLang @InstallationID, @ItemNumber, @DesignStatus, @UniqueKeyID, null

GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogDetailLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogDetailLang
	END

GO

-- #desc						Get Catalog Detail Language.
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				INV_GetCatalogDetail

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID    		UniqueKeyID.
-- #param @LangPref				Language Preference

CREATE PROCEDURE [DBO].INV_GetCatalogDetailLang  
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID		FLOAT,
	@LangPref			NVARCHAR(2)
AS
	SET NOCOUNT ON
	
SELECT     A.CD$9CLGID AS CatalogId,
           A.CDUKID    AS UniqueKeyID,
           A.CDLNGP    AS LangPref,
           A.CDDL01	   AS Description,
           [DBO].CMM_GetUserDefinedCodeFnc('01','LP',A.CDLNGP,@LangPref) AS LanguageDescE1           
FROM [SCDATA].FQ67413L A
WHERE
           (CD$9CLGID = @CatalogID AND
			(@UniqueKeyID IS NULL OR CDUKID = @UniqueKeyID)) 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogDetail
	END

GO

-- #desc						Get Catalog Detail.
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				[DBO].INV_GetCatalogDetailLang
-- #db_references				[DBO].INV_GetCatalog

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID    		UniqueKeyID.

CREATE PROCEDURE [DBO].INV_GetCatalogDetail  
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID		FLOAT
	
AS
	SET NOCOUNT ON
	
SELECT     CD$9CLGID AS CatalogId,
           CDUKID    AS UniqueKeyID,
           CD$9PKID  AS ParentKeyID,
           CD$9IIS   AS IncludeInSearch,
           CDDTAI	 AS DataItem,
           CDKY	     AS UserDefinedCode,
           CDDL01	 AS Description,
           CD$9EFM   AS EffectiveModeFlag,
		   CDEFFF	 AS EffectiveFromDate,
	       CDEFFT    AS EffectiveThruDate,
		   CDSEQ     AS SequenceNumber,
		   CDIMGURL	 AS	ImageName,
		   CDTMPI    AS TemplateID

            
FROM [SCDATA].FQ67413
WHERE
           CD$9CLGID = @CatalogID AND
           (@UniqueKeyID is null or CDUKID = @UniqueKeyID)
           ORDER BY CDSEQ 			
			
Exec [DBO].INV_GetCatalogDetailLang @CatalogID,@UniqueKeyID,'*'

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogLang
	END

GO

-- #desc				Get Catalog Lang
-- #bl_class			Premier.Inventory.CatalogLang.cs
-- #db_dependencies		N/A
-- #db_references		INV_GetCatalog		

-- #param @CatalogID	Catalog ID	
-- #param @LangPref		Language Preference

CREATE PROCEDURE [DBO].INV_GetCatalogLang  
	
	@CatalogId		    NVARCHAR(3),
	@LangPref           NVARCHAR(2)
AS
	SET NOCOUNT ON
	
SELECT     A.CA$9CLGID AS CatalogId,
	       A.CALNGP    AS LanguagePreference,
           A.CADSC1	   AS Description,
           [DBO].CMM_GetUserDefinedCodeFnc('01','LP',A.CALNGP,@LangPref) AS LanguageDescE1
           
FROM [SCDATA].FQ67412L A
WHERE
           CA$9CLGID = @CatalogID
			 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemMasterInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemMasterInfo
	END
GO 

-- #desc									Gets item info by item number
-- #bl_class								Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies							N/A
-- #db_references							N/A				
	
-- #param @InstallationID					Installation Id
-- #param @BranchPlant						Specific Branch Plant (mcu)
-- #param @ShortItemNumber					Short Item Number to Search For
-- #param @LongItemNumber					Long Item Number to Search For
-- #param @AuxItemNumber					Aux Item Number to Search For
-- #param @RetrieveWebContentInfo			if value=1 then return values of web content item, value = 0 return the information from Item master

CREATE Procedure [DBO].INV_GetItemMasterInfo
	@InstallationID			NVARCHAR(3) ,
	@BranchPlant			NVARCHAR(12),
	@ShortItemNumber		FLOAT = NULL,
	@LongItemNumber			NVARCHAR(25), 
	@AuxItemNumber			NVARCHAR(25),
	@RetrieveWebContentInfo	FLOAT,			-- 0 return the DSC1 and DSC2 from IM, 1 returns info from FQ67410
	@LangPref				NVARCHAR(2)
AS

BEGIN
	DECLARE @InventoryFlag			NVARCHAR(1)
	DECLARE @StockingType			NVARCHAR(2)
	DECLARE @MatrixTemplate			NVARCHAR(20)
	DECLARE @MatrixControlled		NVARCHAR(1)
	DECLARE @MatrixParentItemNumber	FLOAT = 0
	DECLARE @Segment1				NVARCHAR(10)
	
	 
	IF (@ShortItemNumber IS NULL OR @ShortItemNumber = 0 )
	 BEGIN 
		IF (@LongItemNumber <> '*' )
			BEGIN 
			SELECT @ShortItemNumber = A.IMITM 	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMLITM = @LongItemNumber
		
		END

	ELSE IF (@AuxItemNumber <> '*')
		BEGIN 
			SELECT @ShortItemNumber = A.IMITM	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMAITM = @AuxItemNumber 
 
		END 
	END
	
	/*First Resolve the inventory flag of the item.*/
	SET @InventoryFlag = 
	(SELECT TOP 1 B.LFIVI				/*Inventory Interface*/
	FROM [SCDATA].F4101 A			 /*Item Master*/
	INNER JOIN [SCDATA].F40205 B			/*Line Type Control Table*/
	ON B.LFLNTY = A.IMLNTY
	WHERE 
	(A.IMITM = @ShortItemNumber))

	/*Resolve StockingType and MatrixParentItemNumber*/
	SELECT TOP 1 
		@StockingType		= IMSTKT,
		@MatrixTemplate		= IMTMPL,
		@MatrixControlled	= IMMIC,
		@Segment1			= IMSEG1
	FROM [SCDATA].F4101
	WHERE IMITM = @ShortItemNumber

	IF(@MatrixTemplate <> '' AND @MatrixControlled = '2')
	BEGIN
		SET @MatrixParentItemNumber = ISNULL((SELECT TOP 1 IMITM FROM [SCDATA].F4101	WHERE IMTMPL = @MatrixTemplate AND IMSEG1 = @Segment1  AND IMMIC = '1'),0)
	END
		
	IF(@StockingType = 'N' OR (@InventoryFlag <> 'Y' AND @InventoryFlag <> 'D'))
	BEGIN
		SELECT TOP 1
			@InstallationID AS InstallationID, 
			'' AS BranchPlant, 
			'' AS BranchPlantDesc, 
			A.IMITM ItemNumber, 
			A.IMLITM LongItemNumber, 
			A.IMAITM AuxItemNumber,
			CASE @RetrieveWebContentInfo
				WHEN 0 THEN A.IMDSC1
				ELSE ISNULL(ContenDesc.DESC1, A.IMDSC1) END
				AS Description1,
			CASE @RetrieveWebContentInfo
				WHEN 0 THEN A.IMDSC2
				ELSE ISNULL(ContenDesc.DESC2, A.IMDSC2) END
				AS Description2,
			CASE @RetrieveWebContentInfo
				WHEN 0 THEN ''
				ELSE ContenDesc.URL END
				AS URL,	
			A.IMUOM1 PrimaryUnitOfMeasure,
			A.IMUOM2 SecondaryUnitOfMeasure,
			A.IMUOM4 PricingUnitOfMeasure,
			A.IMSRTX SearchItemText,
			A.IMSTKT StockingType ,
			A.IMLNTY LineType ,
			@InventoryFlag AS InventoryFlag,
			A.IMIFLA AS ItemFlashMessage,
			A.IMTMPL AS MatrixTemplate,
			A.IMMIC AS MatrixControlled,
			@MatrixParentItemNumber AS MatrixParentItemNumber,
			0    AS AddressNumber,
			''	AS	AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A						/*Item Master*/
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.IMITM,@LangPref,0) ContenDesc 
		WHERE 
			(A.IMITM = @ShortItemNumber)
	END
	ELSE
	BEGIN
		SELECT TOP 1
			E.BI$9INID AS InstallationID, 
			B.IBMCU BranchPlant, 
			C.MCDL01 BranchPlantDesc, 
			A.IMITM ItemNumber, 
			A.IMLITM LongItemNumber, 
			A.IMAITM AuxItemNumber,
			CASE @RetrieveWebContentInfo
				WHEN 0 THEN A.IMDSC1
				ELSE ISNULL(ContenDesc.DESC1, A.IMDSC1) END
				AS Description1,
			CASE @RetrieveWebContentInfo
				WHEN 0 THEN A.IMDSC2
				ELSE ISNULL(ContenDesc.DESC2, A.IMDSC2) END
				AS Description2,
			CASE @RetrieveWebContentInfo
				WHEN 0 THEN ''
				ELSE ContenDesc.URL END
				AS URL,	
			A.IMUOM1 PrimaryUnitOfMeasure,
			A.IMUOM2 SecondaryUnitOfMeasure,
			A.IMUOM4 PricingUnitOfMeasure,
			A.IMSRTX SearchItemText,
			A.IMSTKT StockingType ,
			A.IMLNTY LineType ,
			@InventoryFlag AS InventoryFlag,
			A.IMIFLA AS ItemFlashMessage,
			A.IMTMPL AS MatrixTemplate,
			A.IMMIC AS MatrixControlled,
			@MatrixParentItemNumber AS MatrixParentItemNumber,
			0    AS AddressNumber,
			''	AS	AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM [SCDATA].F4101 A					/*Item Master*/
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.IMITM,@LangPref,0) ContenDesc 
		INNER JOIN [SCDATA].FQ679910 E		/*BrachPlant by Installation*/
			ON E.BI$9INID = @InstallationID 
		INNER JOIN [SCDATA].F4102 B			/*Item Master by BranchPlant*/
			ON B.IBITM = A.IMITM
			AND B.IBMCU = E.BIMCU
		INNER JOIN [SCDATA].F0006 C			/*Branch Master*/
			ON C.MCMCU = B.IBMCU
	WHERE 
		(@BranchPlant = '*' OR B.IBMCU = @BranchPlant) AND 
		(A.IMITM = @ShortItemNumber)
	END
	
END


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContentDetLangs'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContentDetLangs
	END

GO

-- #desc				        Get Web Content Detail Language
-- #bl_class			        Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies		        N/A
-- #db_references		        [DBO].INV_GetItemWebContentDetail

-- #param @ItemNumber			Item Number.
-- #param @InstallationID		Installation ID.
-- #param @DesignStatus			Desing Status.
-- #param @UniqueKeyID          Unique Key ID.
-- #param @LangPref             Language Preference.

CREATE PROCEDURE [DBO].INV_GetItemWebContentDetLangs

@InstallationID NVARCHAR(3),
@ItemNumber FLOAT,
@DesignStatus FLOAT,
@UniqueKeyID FLOAT,
@LangPref NVARCHAR(2)

AS
	SET NOCOUNT ON
	
SELECT	A.CLITM AS ItemNumber,
		A.CLUKID AS UniqueKeyID,
		A.CL$9INID AS InstallationID,
		A.CL$9DS AS DesignStatus,
		A.CLLNGP AS LangPref,
	    A.CL$9PTL AS ParagraphTitle
       ,A.CL$9HTML AS HtmlContent
       ,A.CLURCD AS UserReservedCode
       ,A.CLURDT AS UserReservedDate
       ,A.CLURAT AS UserReservedAmount
       ,A.CLURAB AS UserReservedNumber
       ,A.CLURRF AS UserReservedReference
       ,A.CLUSER AS UserId
       ,A.CLPID AS ProgramId
       ,A.CLJOBN AS WorkStationId
       ,A.CLUPMJ AS DateUpdated
       ,A.CLTDAY AS TimeOfDay,
       [DBO].CMM_GetUserDefinedCodeFnc('01','LP',A.CLLNGP,@LangPref) AS LanguageDescE1
	   FROM [SCDATA].FQ67411L A		
WHERE (CLITM = @ItemNumber) AND
	  (CL$9INID = @InstallationID) AND
      (@DesignStatus IS NULL OR CL$9DS = @DesignStatus) AND 
      (@UniqueKeyID IS NULL OR CLUKID = @UniqueKeyID)
      
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContentHeadLangs'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContentHeadLangs
	END

GO

-- #desc				        Get Web Content Header
-- #bl_class			        N/A
-- #db_dependencies		        N/A
-- #db_references		        [DBO].INV_GetItemWebContentHeader

-- #param @ItemNumber			Item Number.
-- #param @InstallationID		Installation ID.
-- #param @DesignStatus			Desing Status.
-- #param @LangPref			    Language Preference.

CREATE PROCEDURE [DBO].INV_GetItemWebContentHeadLangs
	  
	  @InstallationID NVARCHAR(3),
	  @ItemNumber FLOAT,
      @DesignStatus FLOAT,
      @LangPref NVARCHAR(2)

AS
	SET NOCOUNT ON

SELECT A. CLITM AS ItemNumber
      ,A. CL$9INID AS InstallationID
      ,A. CL$9DS AS DesignStatus
      ,A. CLLNGP AS LangPref
      ,A. CLDSC1 AS Description1
      ,A. CLDSC2 AS Description2
      ,A. CLDSC3 AS Description3
      ,A. CL$9HTML AS HtmlContent
      ,A. CLURCD AS UserReservedCode
      ,A. CLURDT AS UserReservedDate
      ,A. CLURAT AS UserReservedAmount
      ,A. CLURAB AS UserReservedNumber
      ,A. CLURRF AS UserReservedReference
      ,A. CLUSER AS UserId
      ,A. CLPID AS ProgramId
      ,A. CLJOBN AS WorkStationId
      ,A. CLUPMJ AS DateUpdated
      ,A. CLTDAY AS TimeOfDay,
      [DBO].CMM_GetUserDefinedCodeFnc('01','LP',A.CLLNGP,@LangPref) AS LanguageDescE1
 FROM [SCDATA].FQ67410L A		
 WHERE  (A.CLITM = @ItemNumber)AND
		(A.CL$9INID  =  @InstallationID)AND
		(A.CL$9DS  = @DesignStatus)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetUnitOfMeasureLangs'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetUnitOfMeasureLangs
	END

GO

-- #desc						Read UOM 
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Installation 		Installation id
-- #param @UnitofMeasureCode	Unit of Measure
-- #param @LangPref				Language
-- #param @Description			Description

CREATE PROCEDURE [DBO].INV_GetUnitOfMeasureLangs
  @InstallationID		NVARCHAR(3),
  @UnitofMeasure		NVARCHAR(2),
  @LangPref				NVARCHAR(2) 

AS
	
    SELECT  
		UM$9INID	AS InstallationID, 
		UMUOM		AS UnitofMeasure, 
		UMLNGP		AS LanguagePref,
		[DBO].CMM_GetUserDefinedCodeFnc('01','LP',UMLNGP,@LangPref)	AS LanguageDescE1,
		UMDSC1		AS Description	
      FROM  
	    [SCDATA].FQ67415L A
      WHERE 
		A.UMUOM = @UnitofMeasure
      ORDER BY A.UMUOM, A.UMLNGP
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_DelAboutUsLang'))
	BEGIN
		DROP  Procedure  [DBO].PRO_DelAboutUsLang
	END

GO

-- #desc					Delete AboutUs language.
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AboutUsID		AboutUsID
-- #param @LangPref			Language

CREATE Procedure [DBO].PRO_DelAboutUsLang
	@AboutUsID	NVARCHAR(3),
	@LangPref	NVARCHAR(2)
		
	AS

	DELETE 
			[SCDATA].FQ67102L 
	WHERE 
			HH$9HHA  = @AboutUsID AND
			(@LangPref IS NULL OR  HHLNGP =  @LangPref)
   
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_DelLineOfBusinessLang'))
	BEGIN
		DROP  Procedure  [DBO].PRO_DelLineOfBusinessLang
	END

GO

-- #desc						Delete line of business.
-- #bl_class					Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @LineOfBusinessID		Line of business 
-- #param @LangPref				Language

CREATE Procedure [DBO].PRO_DelLineOfBusinessLang
	@LineOfBusinessID	NVARCHAR(3),
	@LangPref			NVARCHAR(2)
		
	AS

	DELETE 
			[SCDATA].FQ67103L 
	WHERE 
			LB$9LOB  = @LineOfBusinessID 
			AND (@LangPref IS NULL OR LBLNGP =  @LangPref)
  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetAboutUsLangs'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetAboutUsLangs
	END

GO

-- #desc				Read AboutUsLangs
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @AboutUsID 	AboutUsID
-- #param @LangPref		Language

CREATE PROCEDURE [DBO].PRO_GetAboutUsLangs
  @AboutUsID		NVARCHAR(3),
  @LangPref				NVARCHAR(2) 
AS
 

	     SELECT  
			HH$9HHA		AS AboutUsID, 
			HHLNGP		AS LanguagePref,
			[DBO].CMM_GetUserDefinedCodeFnc('01','LP',HHLNGP,@LangPref) AS LanguageDescE1,
			HHDSC1		AS Description		  FROM  
			[SCDATA].FQ67102L
		  WHERE 
			HH$9HHA = @AboutUsID 
	     ORDER BY HH$9HHA
	     

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetContactExtInformation'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetContactExtInformation
	END

GO

-- #desc						Fetch Contact Extended Info for Customer/Consumer
-- #bl_class	 	 			N/A
-- #db_dependencies				N/A
-- #db_references				CST_GetContactChildren, CSM_GetContactChildren

-- #param @AddressNumber		Address Number
-- #param @AddressType			AddressBook Type
-- #param @ContactID			Contact ID

CREATE Procedure [DBO].PRO_GetContactExtInformation
(
	@AddressNumber FLOAT,
	@AddressType FLOAT,
	@ContactID FLOAT
)
AS
SET NOCOUNT ON


SELECT 
			AB$9AN8 AS AddressNumber  ,
			AB$9TYP AS AddressType  ,
			ABIDLN AS ContactID  ,
			ABLNGP AS LanguagePreference  ,
			AB$9SHAN AS ShipToNumber  ,
			AB$9MAIL AS MailPreference  ,
			AB$9EMYN AS EmailPreference  ,
			AB$9EMFP AS EmailFormat  ,
			AB$9MLCP AS MailContentPreference  ,
			AB$9MLP AS PartnerMail  ,
			AB$9EMALS AS ShareEmail  ,
			AB$9CRS AS IsCrossRefOn  ,
			ABURC1 AS UserReserveCode1  ,
			ABURC2 AS UserReserveCode2  ,
			ABURRF AS UserReservedReference  ,
			ABURAB AS UserReservedNumber  ,
			ABURDT AS UserReservedDate  ,
			ABURAT AS UserReservedAmount  ,
			ABAURCH1 AS UserReservedChar  ,
			ABUSER AS UserId  ,
			ABPID AS ProgramId  ,
			ABUPMJ AS DateUpdated  ,
			ABJOBN AS WorkStationId  ,
			ABUPMT AS TimeLastUpdated  ,
			ABRELY AS RelationType  ,
			ABRCK7 AS ShipToContactID ,
			[DBO].CMM_GetUserDefinedCodeFnc('01','RT',ABRELY,'*') AS RelationTypeDescription
		FROM [SCDATA].FQ67104
		WHERE AB$9AN8 = @AddressNumber AND 
		AB$9TYP = @AddressType AND 
		ABIDLN = @ContactID;
	
RETURN
GO




IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetLineOfBusinessLangs'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetLineOfBusinessLangs
	END

GO

-- #desc						Read LineOfBusinessLangs
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @LineOfBusinessID 	LineOfBusinessID
-- #param @LangPref				Language

CREATE PROCEDURE [DBO].PRO_GetLineOfBusinessLangs
  @LineOfBusinessID		NVARCHAR(3),
  @LangPref				NVARCHAR(2) 
AS


			SELECT  
			LB$9LOB		 LineOfBusinessID, 
			LBLNGP		 LanguagePref,
			[DBO].CMM_GetUserDefinedCodeFnc('01','LP',LBLNGP,@LangPref) AS LanguageDescE1,
			LBDSC1		 Description	
		  FROM  
			[SCDATA].FQ67103L
		  WHERE 
				 LB$9LOB =  @LineOfBusinessID
		  ORDER BY LB$9LOB;
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_DelPasswordHistory'))
	BEGIN
		DROP  Procedure  [DBO].SEC_DelPasswordHistory
	END

GO

-- #desc				Delete password  history by User Id
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		SEC_DelUser

-- #param UserID		User ID number.

CREATE Procedure [DBO].SEC_DelPasswordHistory
	@UserID	FLOAT
AS

SET NOCOUNT ON

DELETE  

FROM  
	[SCDATA].FQ679911
WHERE 
	PH$9USER = @UserID


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_DelUserByInst'))
	BEGIN
		DROP  Procedure  [DBO].SEC_DelUserByInst
	END

GO

-- #desc					Delete from User by Installation Table 
-- #bl_class				Premier.Security.StoreByUserList.cs/UserStore.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param UserID			User ID number.
-- #param InstallationID	Installation ID

CREATE Procedure [DBO].SEC_DelUserByInst
	@UserID	FLOAT,
	@InstallationID	NVARCHAR(3)
AS

SET NOCOUNT ON

	DELETE  
	FROM  
		[SCDATA].FQ67996
	WHERE 
		UI$9USER = @UserID AND 
		(@InstallationID = '*' OR UI$9INID = @InstallationID)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_DelUserPermission'))
	BEGIN
		DROP  Procedure  [DBO].SEC_DelUserPermission
	END

GO

-- #desc					Delete user permision, when permission code is null delete all permision of the user.
-- #bl_class				Premier.Security.UserPermission.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserID			User ID number.
-- #param PermissionCode	Permission code.

CREATE Procedure [DBO].SEC_DelUserPermission
	@UserID	FLOAT,
	@PermissionCode	NVARCHAR(5)
AS

SET NOCOUNT ON

	DELETE  
	
	FROM  
		[SCDATA].FQ67997
	WHERE 
		UP$9USER = @UserID AND 
		(@PermissionCode IS NULL OR UP$9PCD = @PermissionCode)



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetInstByUserListRelated'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetInstByUserListRelated
	END

GO

-- #desc						Read related Installation list by UserID and Installation type.
-- #bl_class					Premier.Security.StoreByUserList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UserID				User ID
-- #param ApplicationUseFlag	Installation type

CREATE Procedure [DBO].SEC_GetInstByUserListRelated
	@UserID				FLOAT,
	@ApplicationUseFlag NVARCHAR(4)
AS

SET NOCOUNT ON

SELECT  
	A.IN$9INID as InstallationID, 
	UI$9USER as UserID,
	INDSC1 as Description,
	IN$9APFL as ApplicationUseFlag
FROM  
	-- Installation Id's 	
	[SCDATA].FQ670001 A
INNER JOIN [SCDATA].FQ67996 B --User by Installation
	ON A.IN$9INID = B.UI$9INID
WHERE 
	UI$9USER = @UserID
	AND
	(@ApplicationUseFlag = '*' OR IN$9APFL = @ApplicationUseFlag)
	ORDER BY  IN$9APFL ASC,
	INDSC1 ASC	 	
	
					
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetUserPermisions'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetUserPermisions
	END

GO


-- #desc					Read user permission. 
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			SEC_GetUser


-- #param UserID			User ID number.
-- #param PermissionCode	Permission code.

CREATE Procedure [DBO].SEC_GetUserPermisions
	@UserID	FLOAT
AS

SET NOCOUNT ON

	SELECT  
		A.UP$9USER as UserID, 
		A.UP$9PCD as PermissionCode, 
		B.PEDSC1 as Description,
		A.UP$9ALLOW as ActionAllowed,
		B.PECLS as ApplicationUseFlag
	FROM  
		[SCDATA].FQ67997 A
		INNER JOIN [SCDATA].FQ67994 B
		ON A.UP$9PCD = B.PE$9PCD
	WHERE 
		A.UP$9USER = @UserID 	


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetUser'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetUser
	END

GO


-- #desc				Read all user information.  Uses procedures:  
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_GetUserPermision
-- #db_references		N/A

-- #param UserID		User ID number.

CREATE Procedure [DBO].SEC_GetUser
 -- User Id search criteria
  @UserID  FLOAT
  
AS

SET NOCOUNT ON

SELECT 
	USR.US$9USER	as UserID , 
	ISNULL(WUSR.WAEMAL, USR.US$9USRN) as UserName,
	USR.US$9PWD		as Password ,  
	USR.USLNGP		as LanguagePreference ,
    USR.US$9SQ		as SecretQuestion ,   
    USR.US$9ANS		as SecretAnswer ,  
    USR.US$9LDPC	as LastDatePasswordChanged, 
    USR.US$9SFCP	as ChangePassword ,  
    USR.US$9SFNP	as NoPasswordChange , 
    USR.US$9SFNE	as PasswordExpires, 
    USR.US$9SFAD	as AccountDisable , 
    USR.US$9SFAL	as AccountLockout ,
	USR.US$9LDAL	as LastDateAccountLocked, 
	USR.US$9LTAL	as LastTimeAccountLocked
FROM 
	[SCDATA].FQ67991 USR
LEFT OUTER JOIN [SCDATA].FQ67101 WUSR
	ON WUSR.WA$9USER = USR.US$9USER
WHERE 
	-- User Id filter	
    (USR.US$9USER = @UserID)  
    
--User Permisions
EXEC [DBO].SEC_GetUserPermisions @UserID

--User Installations
EXEC [DBO].SEC_GetInstByUserListRelated @UserID, '*'


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetConsumerContacts'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetConsumerContacts
	END

GO

-- #desc						Fetch Consumer Contacts excluding main consumer contact 0 or 1
-- #bl_class	 	 			N/A
-- #db_dependencies				N/A
-- #db_references				GetConsumerChildren

-- #param @AddressNumber		Consumer Number
-- #param @ContactID			Contact ID ( The main contact to exclude )

CREATE Procedure [DBO].CSM_GetConsumerContacts
(
	@AddressNumber FLOAT,
	@ContactID	FLOAT
)
AS
SET NOCOUNT ON


SELECT 
		PC$9AN8 AS AddressNumber,   
		PCIDLN AS ContactID,    
		PCMLNM AS MailingName, 
	 	PCATTL AS Salutation,    
	 	PCEMAL AS EmailAddress,    
	 	PCSLNM AS Title,    
	 	PCALPH AS AlphaName, 
	 	PCGNNM AS FirstName,    
	 	PCMDNM AS MiddleName,    
	 	PCSRNM AS LastName,    
	 	PCTYC AS Type, 
	 	PCURC1 AS UserReserveCode1,    
	 	PCURC2 AS UserReserveCode2,    
	 	PCURRF AS UserReservedReference,    
	 	PCURAB AS UserReservedNumber, 
	 	PCURDT AS UserReservedDate,    
	 	PCURAT AS UserReservedAmount,    
	 	PCAURCH1 AS UserReservedChar,  
	 	PC$9W001 AS CategoryCode001,  
	 	PC$9W002 AS CategoryCode002,  
	 	PC$9W003 AS CategoryCode003,  
	 	PC$9W004 AS CategoryCode004, 
	 	PC$9W005 AS CategoryCode005,  
	 	PC$9W006 AS CategoryCode006,  
	 	PC$9W007 AS CategoryCode007,  
	 	PC$9W008 AS CategoryCode008, 
	 	PC$9W009 AS CategoryCode009,  
	 	PC$9W010 AS CategoryCode010,
	 	PCUSER AS UserId, 
	 	PCPID AS ProgramId ,     
	 	PCUPMJ AS DateUpdated,    
	 	PCJOBN AS WorkStationId,    
	 	PCUPMT AS TimeLastUpdated
FROM [SCDATA].FQ67303
WHERE PC$9AN8 = @AddressNumber 
AND PCIDLN <> @ContactID -- Main Contact To Exclude.

SET NOCOUNT OFF
RETURN
GO
 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetBrandMailSubscriptions'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetBrandMailSubscriptions
	END
GO
-- #desc						Get Brand Mailing
-- #bl_class	 	 			N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		AddressNumber
-- #param @AddressBookType		AddressBookType
-- #param @ContactID			ContactID

CREATE Procedure [DBO].CSM_GetBrandMailSubscriptions
(
	@AddressNumber				FLOAT,
	@AddressBookType			FLOAT,
	@ContactID					FLOAT
)
AS

SET NOCOUNT ON

SELECT
	A.PR$9AN8	AS	AddressNumber,
	A.PR$9TYP	AS	AddressBookType,
	A.PRIDLN	AS	ContactID,
	A.PR$9SRP1	AS	Brand,
	[DBO].CMM_GetUserDefinedCodeFnc('58','S1',A.PR$9SRP1,'*') AS BrandDescription,
	A.PR$9MAIL	AS	MailPreference,
	A.PR$9EMYN	AS	EmailPreference,
	A.PR$9EMFP	AS	EmailFormat,
	A.PR$9MLCP	AS  MailContentPreference,
	A.PR$9MLP	AS	PartnerMail,
	A.PR$9EMALS	AS	ShareEmail,
	A.PR$9MLF1	AS	MailingFlag1,
	A.PR$9MLF2	AS	MailingFlag2,
	A.PR$9MLF3	AS	MailingFlag3,
	A.PR$9MLF4	AS	MailingFlag4,
	A.PR$9MLF5	AS	MailingFlag5,
	A.PR$9MLF6	AS	MailingFlag6,
	A.PR$9MLF7	AS	MailingFlag7,
	A.PR$9MLF8	AS	MailingFlag8,
	A.PR$9MLF9	AS	MailingFlag9,
	A.PR$9MLF10	AS	MailingFlag10,
	A.PR$9MLC1	AS	MailingCatCode1,
	A.PR$9MLC2	AS	MailingCatCode2,
	A.PR$9MLC3	AS	MailingCatCode3,
	A.PR$9MLC4	AS	MailingCatCode4,
	A.PR$9MLC5	AS	MailingCatCode5,
	A.PR$9MLC6	AS	MailingCatCode6,
	A.PR$9MLC7	AS	MailingCatCode7,
	A.PR$9MLC8	AS	MailingCatCode8,
	A.PR$9MLC9	AS	MailingCatCode9,
	A.PR$9MLC10	AS	MailingCatCode10,
	A.PRURC1	AS	UserReserveCode1,
	A.PRURC2	AS	UserReserveCode2,
	A.PRURRF	AS	UserReservedReference,
	A.PRURAB	AS	UserReservedNumber,
	A.PRURDT	AS	UserReservedDate,
	A.PRURAT	AS	UserReservedAmount,
	A.PRAURCH1	AS	UserReservedChar,
	A.PRUSER	AS	UserId,
	A.PRPID		AS	ProgramId,
	A.PRUPMJ	AS	DateUpdated,
	A.PRJOBN	AS	WorkStationId,
	A.PRUPMT	AS	TimeLastUpdated
FROM
	[SCDATA].FQ671041 A
WHERE
		A.PR$9AN8  = @AddressNumber
	AND A.PR$9TYP  = @AddressBookType
	AND A.PRIDLN   = @ContactID

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetPhones'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetPhones
	END

GO

-- #desc					Reads the phones associated with a consumer
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			CSM_GetContactChildren

-- #param @AddressNumber	Address Number to search for
-- #param @ContactID		Contact Id to search for
-- #param @TelephoneID		TelephoneID (optional)

CREATE Procedure [DBO].CSM_GetPhones
(
	@AddressNumber FLOAT,
	@ContactID FLOAT,
	@TelephoneID FLOAT = null,
	@LangPref NVARCHAR(2)
)
AS

SET NOCOUNT ON
	
	SELECT  
		A.PP$9AN8 AS AddressNumber,  
		A.PPIDLN AS ContactID, 
		A.PPRCK7 AS TelephoneID, 
		A.PPPHTP AS PhoneType,   
		A.PPAR1 AS AreaCode,  
		A.PPPH1 AS PhoneNumber,  
		A.PPURC1 AS UserReserveCode1, 
		A.PPURC2 AS UserReserveCode2,   
		A.PPURRF AS UserReservedReference, 
		A.PPURAB AS UserReservedNumber, 
		A.PPURDT AS UserReservedDate, 
		A.PPAURCH1 AS UserReservedChar, 
		A.PPUSER AS UserId, 
		A.PPPID AS ProgramId,  
		A.PPUPMJ AS DateUpdated, 
		A.PPJOBN AS WorkStationId,   
		A.PPUPMT AS TimeLastUpdated,
		[DBO].CMM_GetUserDefinedCodeFnc('01','PH',PPPHTP,@LangPref) AS PhoneTypeDescription
	FROM  [SCDATA].FQ67304 A
	WHERE A.PP$9AN8 = @AddressNumber
	AND A.PPIDLN = @ContactID
	AND (@TelephoneID IS NULL OR A.PPRCK7 = @TelephoneID)


SET NOCOUNT OFF
RETURN
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetShipToList'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetShipToList
	END

GO

-- #desc							Get Consumer ship tos by address number
-- #bl_class						Premier.Consumer.ShipToList.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param @StoreId 					StoreId 
-- #param @Status					Status
-- #param @ParentAddressNumber		Parent Address Number
-- #param @WebAccountId				Web Account
-- #param @FilterByWebAccount		Filter By Web Account
-- #param @Name					    Filter Term to search ship to by Name
-- #param @Address					Filter Term to search ship to by address 1
-- #param @City						Filter Term to search ship to by City
-- #param @State					Filter Term to search ship to by State (Code)
-- #param @ZipCode					Filter Term to search ship to by Zip Code
-- #param @Country					Filter Term to search ship to by Country(code)
-- #param @SortBy					Column to filter by Name (Default PRALPH),
--									Address (PRADD1), City, State, ZipCode */
-- #param @SortDir					Direction to filter (A = Ascendent, D = Descendent) 
-- #param @PageIndex				Page Index
-- #param @PageSize					Page Size
-- #param RetrievePrimaryPhone		Retrieve Primary Phone(1 true, 0 false) 

CREATE Procedure [DBO].CSM_GetShipToList
(
	@StoreId		NVARCHAR(3),
	@ParentAddressNumber	FLOAT,
	@WebAccountId			FLOAT,
	@FilterByWebAccount		INT,
	@Status					NVARCHAR(1),
	@Name				    NVARCHAR(100),
	@Address				NVARCHAR(80),
	@City					NVARCHAR(25),
	@State					NVARCHAR(3),
	@ZipCode				NVARCHAR(12),
	@Country				NVARCHAR(3),
	@SortBy					NVARCHAR(40),
	@SortDir				NVARCHAR(3),
	@RetrievePrimaryPhone	FLOAT,
	@PageIndex              FLOAT,
    @PageSize               FLOAT
)
AS

	-- Get the PhoneType value constant
	DECLARE @PHONECONSTANTCMP NVARCHAR(256)
	DECLARE @PHONECONSTANTIND NVARCHAR(256)
	
	DECLARE @PHONECMPINSTA     NVARCHAR(3)
	DECLARE @PHONEINDINSTA     NVARCHAR(3)

	DECLARE @SHIPTO_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @SHIPTO_COUNT INT
	
	SET @PHONECMPINSTA = @StoreId
	SET @PHONEINDINSTA = @StoreId
	
	EXEC [DBO].CMM_GetConstantValue 'CMP_PHTY01', @PHONECMPINSTA, @PHONECONSTANTCMP OUT
	EXEC [DBO].CMM_GetConstantValue 'IND_PHTY01', @PHONEINDINSTA, @PHONECONSTANTIND OUT
	
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @SORT_DYNAMIC NVARCHAR(40)
	DECLARE @SORTDIR_DYNAMIC NVARCHAR(5)
	
SET NOCOUNT ON

	/* Dynamic sort direction statement */
    SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

	SET @SORT_DYNAMIC = CASE @SortBy 
		WHEN 'Address' THEN 'PRADD1'
		WHEN 'City' THEN 'PRCTY1'
		WHEN 'State' THEN 'PRADDS'
		WHEN 'ZipCode' THEN 'PRADDZ'
		ELSE 'PCMLNM'
	END

	SET @SORT_DYNAMIC += @SORTDIR_DYNAMIC

	SET @SHIPTO_COUNT = (SELECT count(*) FROM [SCDATA].FQ67101S WHERE WS$9INID = @StoreId AND WS$9WAN8 = @WebAccountId AND WS$9AN8=@ParentAddressNumber)

	/* If the FilterByWebAccount parameter is true, it returns only the selected ship to's for the web account,
	otherwise it returns the complete list with the difference that the Selected property would be true or false.*/
	IF (@FilterByWebAccount = 1 AND @SHIPTO_COUNT > 0) BEGIN
		SET @SHIPTO_DYNAMIC = N' INNER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = @WebAccountId AND S.WS$9INID = @StoreId AND S.WS$9AN8=@ParentAddressNumber AND S.WS$9SHAN = PR$9AN8 '
	END
	ELSE BEGIN
		SET @SHIPTO_DYNAMIC = N' LEFT OUTER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = @WebAccountId AND S.WS$9INID = @StoreId AND S.WS$9AN8=@ParentAddressNumber AND S.WS$9SHAN = PR$9AN8 '
	END

	IF (@Status <> '*')
		SET @WHERE_DYNAMIC += N' AND T0.PR$9STS = @Status ';

	/*Filter by Name*/
	IF (@Name <> '*')
		SET @WHERE_DYNAMIC += N' AND (ISNULL(PRALPH,'''') LIKE ''%'' + @Name + ''%'')';

	/*Filter by Address1*/
	IF (@Address <> '*')
		SET @WHERE_DYNAMIC += N' AND (PRADD1 LIKE ''%'' +  @Address + ''%'')';

	/*Filter by City*/
	IF (@City <> '*')
		SET @WHERE_DYNAMIC += N' AND (PRCTY1 LIKE ''%'' + @City + ''%'')';
	
	/*Filter by State*/
	IF (@State <> '*')
		SET @WHERE_DYNAMIC += N' AND (PRADDS = @State)';
	
	/*Filter by ZipCode*/
	IF (@ZipCode <> '*')
		SET @WHERE_DYNAMIC += N' AND (PRADDZ LIKE ''%'' + @ZipCode + ''%'')';
	
	/*Filter by Country*/
	IF (@Country <> '*')
		SET @WHERE_DYNAMIC += N' AND (PRCTR = @Country)';


	SET @SQL_DYNAMIC ='SELECT AddressNumber, ParentAddressNumber, AlphaName, MailingName, AddressLine1,
              AddressLine2, AddressLine3, AddressLine4, City, State,
              ZipCode, Country, ContactId, Firstname, Middlename, Lastname, Nickname, Selected, 
              PoBoxFlag, DeliveryInstructions1, DeliveryInstructions2, Status,
			  Phone, TotalRowCount
		FROM(
			SELECT	PR$9AN8 AS AddressNumber,
					PR$9PA8 AS ParentAddressNumber,
					PRALPH AS AlphaName,
					PCMLNM AS MailingName,
					PRADD1 AS AddressLine1,
					PRADD2 AS AddressLine2,
					PRADD3 AS AddressLine3,
					PRADD4 AS AddressLine4,
					PRCTY1 AS City,
					PRADDS AS State,
					PRADDZ AS ZipCode,
					PRCTR AS Country,
					PCIDLN AS ContactId,
					PCGNNM AS Firstname,
					PCMDNM AS Middlename,
					PCSRNM AS Lastname,
					PRURRF AS Nickname,
					ISNULL(S.WS$9WAN8, 0) AS Selected, 
					0 AS PoBoxFlag,
					PRDEL1 AS DeliveryInstructions1, 
					PRDEL2 AS DeliveryInstructions2, 
					PR$9STS AS Status, ';

			/* Returns dummy value in Phone when @RetrievePrimaryPhone = 0 */
			IF(@RetrievePrimaryPhone = 1)
				SET @SQL_DYNAMIC += N' 
					PH.Phone, ';
			ELSE
				SET @SQL_DYNAMIC += N' 
					'''' AS Phone, ';
			
			SET @SQL_DYNAMIC += N'
					ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM, COUNT(*) OVER () AS TotalRowCount 
			FROM [SCDATA].FQ670302 T0 
				INNER JOIN [SCDATA].FQ67303 T1
					ON	T0.PR$9AN8 = T1.PC$9AN8
					AND T1.PCIDLN = 0 ' + @SHIPTO_DYNAMIC ;

			/* Do not join with FQ67107 if @RetrievePrimaryPhone = 0 
			 * Join with phones table only when @RetrievePrimaryPhone = 1 */
			IF(@RetrievePrimaryPhone = 1) 
			BEGIN
				SET @SQL_DYNAMIC += N' INNER JOIN [SCDATA].FQ67107
					ON PS$9AN8 =  T1.PC$9AN8
					AND PS$9TYP = 1
			OUTER APPLY (SELECT TOP 1 CASE WHEN ISNULL(PPAR1, '''') = '''' THEN PPPH1 ELSE ''('' + RTRIM(LTRIM(PPAR1)) + '') '' + PPPH1 END AS Phone
					FROM [SCDATA].FQ67304 P
					WHERE P.PP$9AN8 = PR$9AN8 AND P.PPIDLN = 0 
						AND P.PPPHTP = CASE PS$9ICF WHEN 0 THEN @PHONECONSTANTIND ELSE @PHONECONSTANTCMP END) PH  ';
			END

			SET @SQL_DYNAMIC += N' WHERE T0.PRBADT IN (''S'', ''X'')
				AND (T0.PR$9PA8 = @ParentAddressNumber OR T0.PR$9AN8 = @ParentAddressNumber) ' 
			+ @WHERE_DYNAMIC;

		SET @SQL_DYNAMIC += N' ) AS SHIPTOS 
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize));'
		
EXECUTE sp_executesql @SQL_DYNAMIC, N' @Status NVARCHAR(1), @Name NVARCHAR(100), @Address NVARCHAR(80), @City NVARCHAR(25), @State NVARCHAR(3), 
										@ZipCode NVARCHAR(12), @Country NVARCHAR(3), @ParentAddressNumber FLOAT, @PageIndex FLOAT, @PageSize FLOAT,
										@PHONECONSTANTIND NVARCHAR(256), @PHONECONSTANTCMP NVARCHAR(256), @WebAccountId FLOAT, @StoreId NVARCHAR(3) ', 
									@Status = @Status, @Name = @Name, @Address = @Address, @City = @City, @State = @State, @ZipCode = @ZipCode, 
									@Country = @Country, @ParentAddressNumber = @ParentAddressNumber, @PageIndex = @PageIndex, @PageSize = @PageSize,
									@PHONECONSTANTIND = @PHONECONSTANTIND, @PHONECONSTANTCMP = @PHONECONSTANTCMP, @WebAccountId=@WebAccountId, @StoreId=@StoreId
GO
   IF EXISTS (SELECT * FROM sysobjects WHERE type IN ('IF', 'TF') AND id = OBJECT_ID(N'[DBO].CST_GetCustomerInfoFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].CST_GetCustomerInfoFnc
	END
GO 

 -- #desc						Gets Customer Information
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Company				Company
-- #param AddressNumber			AddressNumber

CREATE FUNCTION [DBO].CST_GetCustomerInfoFnc
(
	@Company		NVARCHAR(5),
	@AddressNumber	FLOAT
)
RETURNS TABLE 
AS
RETURN 
	WITH CTE AS (
		SELECT CASE WHEN COUNT(1) > 0 THEN @Company ELSE '00000' END AS CompanyTMP 
		FROM [SCDATA].F03012
		WHERE AIAN8 = @AddressNumber AND AICO = @Company
	)
	SELECT 
		AIAN8,			-- AddressNumber
		CTE.CompanyTMP AS AICO,	-- Company		
		AIBADT,			-- BillingAddressType
		AICMGR,			-- AccountRepresentative
		AICARS,			-- Carrier
		AITXA1,			-- TaxAreaCode
		AIEXR1,			-- TaxExplanationCode
		AIPORQ,			-- CustomerPORequired
		AIAPRC,			-- OpenOrders
		AIACL,			-- CreditLimit
		AIDAOJ,			-- DateAccountOpened
		AITRAR,			-- PaymentTermsCode
		AIASTY,			-- InvoicedYTD
		AISPYE,			-- InvoicedPriorYear
		AICPGP,			-- PricingGroup
		AIBACK,			-- AllowBackOrder
		AICUSTS,		-- Status
		AIDEL1,			-- DeliveryInstructions1
		AIDEL2,			-- DeliveryInstructions2
		AIEDF2,			-- ItemRestrictionsCode
		AIMINO,			-- MinimumOrderAmount
		AIMAXO			-- MaximumOrderAmount
	FROM [SCDATA].F03012
	INNER JOIN CTE
		ON AICO = CTE.CompanyTMP
		AND AIAN8 = @AddressNumber;


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetCustomerContacts'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetCustomerContacts
	END

GO

-- #desc						Fetch Customer Contacts excluding main customer contact 0 or 1
-- #bl_class	 	 			N/A
-- #db_dependencies				N/A
-- #db_references				GetCustomerChildren

-- #param @AddressNumber		Customer Number
-- #param @ContactID			Contact ID ( The main contact to exclude )

CREATE Procedure [DBO].CST_GetCustomerContacts
(
	@AddressNumber	FLOAT,
	@ContactID		FLOAT
)
AS
SET NOCOUNT ON

SELECT 
		WWAN8	AS AddressNumber, 
		WWIDLN	AS ContactID,
		WWMLNM	AS MailingName,
		WWATTL	AS Title,
		ISNULL((SELECT TOP 1 EAEMAL
			FROM	[SCDATA].F01151
			WHERE	EAAN8 = WWAN8
			AND		EAIDLN = WWIDLN
			AND		EAETP = 'E'
			ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'') AS EmailAddress,
		WWSLNM	AS Salutation , 
		WWALPH	AS AlphaName , 
		WWGNNM	AS FirstName , 
		WWMDNM	AS MiddleName , 
		WWSRNM	AS LastName , 
		WWTYC	AS Type , 
		WWUSER	AS UserId , 
		WWPID	AS ProgramId , 
		WWUPMJ	AS DateUpdated , 
		WWJOBN	AS WorkStationId , 
		WWUPMT	AS TimeLastUpdated , 
		''		AS WebSite , 
		WWDC	AS CompressName  
FROM [SCDATA].F0111
WHERE WWAN8 = @AddressNumber 
AND WWIDLN <> @ContactID -- Main Contact To Exclude.

SET NOCOUNT OFF
RETURN
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetElectronicAddress'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetElectronicAddress
	END

GO

-- #desc					Read Electronic Addresses
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber	AddressNumber
-- #param @ContactID		specific contact ID

CREATE Procedure [DBO].CST_GetElectronicAddress
(
	@AddressNumber	FLOAT,
	@ContactID	FLOAT = null,
	@ElectronicAddressID FLOAT = null,
	@ElectronicAddressType NVARCHAR(1) = null
)

AS
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';
	
	IF (@ContactID IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC += N' AND EAIDLN = @ContactID';
	END
	IF (@ElectronicAddressID IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC += N' AND EARCK7 = @ElectronicAddressID';
	END
	IF (@ElectronicAddressType IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC += N' AND EAETP = @ElectronicAddressType';
	END

	SET @SQL_DYNAMIC = N'
		SELECT	
			EAAN8 AddressNumber,
			EAIDLN ContactID,
			EARCK7 ElectronicAddressID,
			EAETP ElectronicAddressType,
			EAEMAL Address
	
		FROM	
			[SCDATA].F01151
		WHERE
			EAAN8 = @AddressNumber 
			'+ @WHERE_DYNAMIC +'
			ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC';

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@AddressNumber FLOAT, @ContactID FLOAT, @ElectronicAddressID FLOAT, @ElectronicAddressType NVARCHAR(1)', 
	@AddressNumber = @AddressNumber, @ContactID = @ContactID, @ElectronicAddressID = @ElectronicAddressID, @ElectronicAddressType = @ElectronicAddressType;

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetPhones'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetPhones
	END
GO

-- #desc						Fetch Phones for a Contact
-- #bl_class	 	 			N/A
-- #db_dependencies				N/A
-- #db_references				CST_GetContactChildren

-- #param @AddressNumber		Address Number
-- #param @ContactID			Contact ID
-- #param @TelephoneID			TelephoneID (optional)

CREATE Procedure [DBO].CST_GetPhones
(
	@AddressNumber FLOAT,
	@ContactID FLOAT,
	@TelephoneID FLOAT,
	@LangPref NVARCHAR(2)
)
AS
SET NOCOUNT ON

	SELECT 
			A.WPAN8 AS AddressNumber  ,
			A.WPIDLN AS ContactID  ,
			A.WPRCK7 AS TelephoneID  ,
			A.WPPHTP AS PhoneType  ,
			A.WPAR1 AS AreaCode  ,
			A.WPPH1 AS PhoneNumber  ,
			A.WPUSER AS UserId  ,
			A.WPPID AS ProgramId  ,
			A.WPUPMJ AS DateUpdated  ,
			A.WPJOBN AS WorkStationId  ,
			A.WPUPMT AS TimeLastUpdated  ,
			[DBO].CMM_GetUserDefinedCodeFnc('01','PH',WPPHTP ,@LangPref)AS PhoneTypeDescription
	FROM [SCDATA].F0115 A 
	WHERE A.WPAN8 = @AddressNumber 
	AND A.WPIDLN = @ContactID
	AND (@TelephoneID IS NULL OR A.WPRCK7 = @TelephoneID)


SET NOCOUNT OFF
RETURN





GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetShipToList'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetShipToList
	END
GO

-- #desc							Get Customer ship tos by address number for DV811 environment
-- #bl_class						Premier.Customer.ShipToList.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param @StoreId					StoreId
-- #param @Company					Company
-- #param @ParentAddressNumber		Parent Address Number
-- #param @WebAccountId				Web Account
-- #param @FilterByWebAccount		Filter By Web Account
-- #param @Status					Status
-- #param @Name						Filter Term to search ship to by Name
-- #param @Address					Filter Term to search ship to by address 1
-- #param @City						Filter Term to search ship to by City
-- #param @State					Filter Term to search ship to by State (Code)
-- #param @ZipCode					Filter Term to search ship to by Zip Code
-- #param @Country					Filter Term to search ship to by Country(code)
-- #param @ZipCode					Filter Term to search ship to by Zip Code
-- #param @Country					Filter Term to search ship to by Country(code)
-- #param @SortBy					Column to filter by Name (Default WWMLNM),
--									Address (ALADD1), City, State, ZipCode */
-- #param @SortDir					Direction to filter (A = Ascendent, D = Descendent) 
-- #param @PageIndex				Page Index
-- #param @PageSize					Page Size
-- #param @RetrievePrimaryPhone		Retrieve Primary Phone

CREATE Procedure [DBO].CST_GetShipToList
(
	@StoreId			NVARCHAR(3),
	@Company				NVARCHAR(5),
	@ParentAddressNumber	FLOAT,	
	@WebAccountId			FLOAT,
	@FilterByWebAccount		INT,
	@Status					NVARCHAR(1),
	@Name			        NVARCHAR(100),
	@Address				NVARCHAR(80),
	@City					NVARCHAR(25),
	@State					NVARCHAR(3),
	@ZipCode				NVARCHAR(12),
	@Country				NVARCHAR(3),
	@SortBy					NVARCHAR(40),
	@SortDir				NVARCHAR(3),
	@RetrievePrimaryPhone	FLOAT,
	@PageIndex              FLOAT,
    @PageSize               FLOAT

)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	-- Get the PhoneType value constant
	DECLARE @PHONECONSTANTCMP NVARCHAR(256)
	DECLARE @PHONECONSTANTIND NVARCHAR(256)
	
	DECLARE @PHONECMPINSTA     NVARCHAR(3)
	DECLARE @PHONEINDINSTA     NVARCHAR(3)

	DECLARE @SHIPTO_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @SHIPTO_COUNT INT
	
	SET @PHONECMPINSTA = @StoreId
	SET @PHONEINDINSTA = @StoreId
	
	-- Get Code Length
	DECLARE @CodeLength INT
	SET @CodeLength = 0;
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
	WHERE DTSY = 'H00' AND DTRT = 'TA');
	
	EXEC [DBO].CMM_GetConstantValue 'CMP_PHTY01', @PHONECMPINSTA, @PHONECONSTANTCMP OUT
	EXEC [DBO].CMM_GetConstantValue 'IND_PHTY01', @PHONEINDINSTA, @PHONECONSTANTIND OUT
	
	/* If settings do not exist, work like RetrievePrimaryPhone = 0 */
	IF(@PhoneConstantCMP IS NULL OR @PhoneConstantIND IS NULL) BEGIN
		SET @RetrievePrimaryPhone = 0;
	END;

	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @SORT_DYNAMIC NVARCHAR(40)
	DECLARE @SORTDIR_DYNAMIC NVARCHAR(5)

	--------------------------Gets the Organization Structure Type
	DECLARE @OrgStrType	NCHAR(3)
	DECLARE @OrgStrTypeINID	NCHAR(3)
	SET @OrgStrTypeINID = @StoreId
	EXEC [DBO].CMM_GetConstantValue 'ORGSTRTYPE', @OrgStrTypeINID, @OrgStrType OUT


SET NOCOUNT ON

	/* Dynamic sort direction statement */
    SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

	SET @SORT_DYNAMIC = CASE @SortBy 
		WHEN 'Address' THEN 'AddressLine1'
		WHEN 'City' THEN 'City'
		WHEN 'State' THEN 'State'
		WHEN 'ZipCode' THEN 'ZipCode'
		ELSE 'MailingName'
	END
	
	SET @SHIPTO_COUNT = (SELECT count(*) FROM [SCDATA].FQ67101S WHERE WS$9INID = @StoreId AND WS$9WAN8 = @WebAccountId AND WS$9AN8=@ParentAddressNumber)

	/* If the FilterByWebAccount parameter is true, it returns only the selected ship to's for the web account,
	otherwise it returns the complete list with the difference that the Selected property would be true or false.*/
	IF (@FilterByWebAccount = 1 AND @SHIPTO_COUNT > 0) BEGIN
		SET @SHIPTO_DYNAMIC = N' INNER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = @WebAccountId AND S.WS$9INID = @StoreId AND S.WS$9AN8=@ParentAddressNumber AND S.WS$9SHAN = ABAN8 '
	END
	ELSE BEGIN
		SET @SHIPTO_DYNAMIC = N' LEFT OUTER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = @WebAccountId AND S.WS$9INID = @StoreId AND S.WS$9AN8=@ParentAddressNumber AND S.WS$9SHAN = ABAN8 '
	END

	SET @SORT_DYNAMIC += @SORTDIR_DYNAMIC


	SET @SQL_DYNAMIC ='SELECT AddressNumber, ParentAddressNumber, AlphaName, MailingName, AddressLine1,
              AddressLine2, AddressLine3, AddressLine4, City, State,
              ZipCode, Country, ContactId, Firstname, Middlename, Lastname, Nickname,
              0 AS PoBoxFlag, DeliveryInstructions1, DeliveryInstructions2, Status, Selected, ';
		/* Return phone or dummy value based in @RetrievePrimaryPhone parameter */
		IF(@RetrievePrimaryPhone = 1) BEGIN
			SET @SQL_DYNAMIC += N' ISNULL(PH.Phone, '''') Phone,'; 
		END
		ELSE BEGIN
			SET @SQL_DYNAMIC += N' '''' Phone,'; 
		END
		SET @SQL_DYNAMIC += N' AlternateAddressKey,TotalRowCount
		FROM( SELECT SHIPTOS.*,  ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM,  COUNT(*) OVER () AS TotalRowCount FROM(
			SELECT	ABAN8 AS AddressNumber,
					MAPA8 AS ParentAddressNumber,
					WWALPH AS AlphaName,
					WWMLNM AS MailingName,
					ALADD1 AS AddressLine1,
					ALADD2 AS AddressLine2,
					ALADD3 AS AddressLine3,
					ALADD4 AS AddressLine4,
					ALCTY1 AS City,
					ALADDS AS State,
					ALADDZ AS ZipCode,
					ALCTR AS Country,
					WWIDLN AS ContactId,
					WWGNNM AS Firstname,
					WWMDNM AS Middlename,
					WWSRNM AS Lastname,
					WWNICK AS Nickname,
					ISNULL(S.WS$9WAN8, 0) AS Selected,'

				IF(@Company <> '00000') BEGIN
					SET @SQL_DYNAMIC += N' ISNULL(OVERRIDECOMPANY.AIDEL1, DEFAULTCOMPANY.AIDEL1 ) AS DeliveryInstructions1,
					ISNULL(OVERRIDECOMPANY.AIDEL2, DEFAULTCOMPANY.AIDEL2 ) AS DeliveryInstructions2,
					ISNULL(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) AS Status,'
				END
				ELSE BEGIN
					SET @SQL_DYNAMIC += N' DEFAULTCOMPANY.AIDEL1 AS DeliveryInstructions1,
					DEFAULTCOMPANY.AIDEL2 AS DeliveryInstructions2,
					DEFAULTCOMPANY.AICUSTS AS Status,'
				END
				
				/* Calculate Individual Company Flag when @RetrievePrimaryPhone = 1 */
				IF(@RetrievePrimaryPhone = 1) BEGIN
					SET @SQL_DYNAMIC += N' ISNULL(PS$9ICF, (CASE WHEN LTRIM(RTRIM(DRSPHD)) = ''0'' THEN 0 ELSE 1 END)) AS IndividualCompanyFlag, ';
				END

				SET @SQL_DYNAMIC += N' ABALKY AS AlternateAddressKey
				FROM [SCDATA].F0101
				INNER JOIN [SCDATA].F0150
					ON  ABAN8 = MAAN8
					AND MAOSTP = @OrgStrType
					' + @SHIPTO_DYNAMIC + '
				INNER JOIN [SCDATA].F0111
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0
				CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(MAAN8, @CurrentJulianDate) ';
			/* Do not calculate override company when company parameter is 00000 */
			IF (@Company <> '00000') BEGIN
				SET @SQL_DYNAMIC += N' 
				LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY
					ON	OVERRIDECOMPANY.AIAN8 = ABAN8
					AND OVERRIDECOMPANY.AICO = @Company'
			END

				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' INNER JOIN [SCDATA].F03012 AS DEFAULTCOMPANY
					ON	DEFAULTCOMPANY.AIAN8 = ABAN8
					AND DEFAULTCOMPANY.AICO = ''00000''
					AND (DEFAULTCOMPANY.AIBADT IN (''S'', ''X''))'
			
			/* Join to calculate IndividualCompanyFlag only when the @RetrievePrimaryPhone is 1 */
			IF(@RetrievePrimaryPhone = 1) BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' LEFT OUTER JOIN [SCDATA].FQ67107
					ON PS$9AN8 = ABAN8
					AND PS$9TYP = 0
				LEFT OUTER JOIN [SCCTL].F0005
				  ON PS$9AN8 IS NULL
				  AND DRSY = ''H00''
				  AND DRRT = ''TA''
				  AND SUBSTRING(DRKY, 10 - ' + CAST(@CodeLength AS NVARCHAR(25)) + ' + 1, ' + CAST(@CodeLength AS NVARCHAR(25)) + ') = ABTAXC ';
			END

			SET @SQL_DYNAMIC += N'
			WHERE MAPA8 = @ParentAddressNumber 
			AND MAAN8 <> @ParentAddressNumber '

			/*Filter by Name*/
			IF (@Name <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ISNULL(WWMLNM,'''') LIKE ''%'' + @Name + ''%'')'

			/*Filter by Address1*/
			IF (@Address <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALADD1 LIKE ''%'' + @Address + ''%'')'

			/*Filter by City*/
			IF (@City <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALCTY1 LIKE ''%'' + @City + ''%'')'
	
			/*Filter by State*/
			IF (@State <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALADDS = @State)'
	
			/*Filter by ZipCode*/
			IF (@ZipCode <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALADDZ LIKE ''%'' + @ZipCode + ''%'')'
	
			/*Filter by Country*/
			IF (@Country <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALCTR = @Country)'

			/* Dynamic status statement. Evaluates Status for specific Company. If the Company record does not exists then uses 00000 */
			IF (@Status <> '*') BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND ('

				IF(@Company <> '00000')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'ISNULL(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS)'
				ELSE
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'DEFAULTCOMPANY.AICUSTS'

				IF (@Status = '1')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' = ''1'')'
				IF (@Status = '0')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' <> ''1'')'
			END;

			SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' UNION ALL
			SELECT 	ABAN8  AS AddressNumber,
					@ParentAddressNumber AS ParentAddressNumber,
					WWALPH AS AlphaName,
					WWMLNM AS MailingName,
					ALADD1 AS AddressLine1,
					ALADD2 AS AddressLine2,
					ALADD3 AS AddressLine3,
					ALADD4 AS AddressLine4,
					ALCTY1 AS City,
					ALADDS AS State,
					ALADDZ AS ZipCode,
					ALCTR  AS Country,
					WWIDLN AS ContactId,
					WWGNNM AS Firstname,
					WWMDNM AS Middlename,
					WWSRNM AS Lastname,
					WWNICK AS Nickname,
					ISNULL(S.WS$9WAN8, 0) AS Selected,';
				IF(@Company <> '00000') BEGIN
					SET @SQL_DYNAMIC += N' ISNULL(OVERRIDECOMPANY.AIDEL1, DEFAULTCOMPANY.AIDEL1) AS DeliveryInstructions1,
					ISNULL(OVERRIDECOMPANY.AIDEL2, DEFAULTCOMPANY.AIDEL2) AS DeliveryInstructions2,
					ISNULL(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) AS Status,';
				END
				ELSE BEGIN
					SET @SQL_DYNAMIC += N' DEFAULTCOMPANY.AIDEL1 AS DeliveryInstructions1,
					DEFAULTCOMPANY.AIDEL2 AS DeliveryInstructions2,
					DEFAULTCOMPANY.AICUSTS AS Status,';
				END
				
				/* Calculate Individual Company Flag when @RetrievePrimaryPhone = 1 */
				IF(@RetrievePrimaryPhone = 1) BEGIN
					SET @SQL_DYNAMIC += N' ISNULL(PS$9ICF, (CASE WHEN LTRIM(RTRIM(DRSPHD)) = ''0'' THEN 0 ELSE 1 END)) AS IndividualCompanyFlag, ';
				END

				SET @SQL_DYNAMIC += N' ABALKY    AS AlternateAddressKey 
				FROM [SCDATA].F0101 INNER JOIN [SCDATA].F0111
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0
					' + @SHIPTO_DYNAMIC + '
				CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(ABAN8, @CurrentJulianDate) ';
			/* Do not join to calculate override company when the company parameter is 00000 */
			IF (@Company <> '00000') BEGIN
				SET @SQL_DYNAMIC += N' 
				LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY
					ON	OVERRIDECOMPANY.AIAN8 = ABAN8
					AND OVERRIDECOMPANY.AICO = @Company';
				
			END

				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' INNER JOIN [SCDATA].F03012 AS DEFAULTCOMPANY
					ON	DEFAULTCOMPANY.AIAN8 = ABAN8
					AND DEFAULTCOMPANY.AICO = ''00000''
					AND (DEFAULTCOMPANY.AIBADT IN (''S'', ''X''))'
			
			/* Join to calculate IndividualCompanyFlag only when the @RetrievePrimaryPhone is 1 */
			IF(@RetrievePrimaryPhone = 1) BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' 
				LEFT OUTER JOIN [SCDATA].FQ67107
					ON PS$9AN8 = ABAN8
					AND PS$9TYP = 0
				LEFT OUTER JOIN [SCCTL].F0005
				  ON PS$9AN8 IS NULL
				  AND DRSY = ''H00''
				  AND DRRT = ''TA''
				  AND SUBSTRING(DRKY, 10 - ' + CAST(@CodeLength AS NVARCHAR(25)) + ' + 1, ' + CAST(@CodeLength AS NVARCHAR(25)) + ') = ABTAXC ';
			END
			
			SET @SQL_DYNAMIC += N'
			WHERE ABAN8 = @ParentAddressNumber '
				/*Filter by Name*/
				IF (@Name <> '*')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ISNULL(WWALPH,'''') LIKE ''%'' + @Name + ''%'')'

				/*Filter by Address1*/
				IF (@Address <> '*')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALADD1 LIKE ''%'' + @Address + ''%'')'

				/*Filter by City*/
				IF (@City <> '*')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALCTY1 LIKE ''%'' + @City + ''%'')'
	
				/*Filter by State*/
				IF (@State <> '*')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALADDS = @State)'
	
				/*Filter by ZipCode*/
				IF (@ZipCode <> '*')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALADDZ LIKE ''%'' + @ZipCode + ''%'')'
	
				/*Filter by Country*/
				IF (@Country <> '*')
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND (ALCTR = @Country )'

				/* Dynamic status statement. Evaluates Status for specific Company. If the Company record does not exists then uses 00000 */
				IF (@Status <> '*') BEGIN
					SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND ('

					IF(@Company <> '00000')
						SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'ISNULL(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS)'
					ELSE
						SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'DEFAULTCOMPANY.AICUSTS'

					IF (@Status = '1')
						SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' = ''1'')'
					IF (@Status = '0')
						SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' <> ''1'')'
				END;

				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N') AS SHIPTOS )AS SHIPTOS2 ';
	
	/* Join with phones table only when @RetrievePrimaryPhone = 1 */
	IF(@RetrievePrimaryPhone = 1) BEGIN
		SET @SQL_DYNAMIC += N' 
		OUTER APPLY (SELECT TOP 1 CASE WHEN ISNULL(WPAR1,'''') = '''' THEN WPPH1 ELSE ''('' + LTRIM(RTRIM(WPAR1)) + '') '' + WPPH1 END AS Phone
					FROM [SCDATA].F0115 P
					WHERE P.WPAN8 = AddressNumber AND P.WPIDLN = 0 
						AND P.WPPHTP = CASE IndividualCompanyFlag WHEN 0 THEN '''+ @PHONECONSTANTIND + ''' ELSE ''' + @PHONECONSTANTCMP + ''' END) PH '; 
	END

	SET @SQL_DYNAMIC += N'
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) '

EXECUTE sp_executesql @SQL_DYNAMIC, N' @Company NVARCHAR(5), @ParentAddressNumber FLOAT, @Status NVARCHAR(1), @Name NVARCHAR(100), @CurrentJulianDate NUMERIC, @Address NVARCHAR(80), 
											@City NVARCHAR(25), @State NVARCHAR(3), @ZipCode NVARCHAR(12), @Country NVARCHAR(3), @OrgStrType NCHAR(3), @PageIndex FLOAT, @PageSize FLOAT, @WebAccountId FLOAT, @StoreId NVARCHAR(3) ',
										@Company=@Company, @ParentAddressNumber=@ParentAddressNumber, @Status=@Status, @Name=@Name, @CurrentJulianDate = @CurrentJulianDate,
										@Address=@Address, @City=@City, @State=@State, @ZipCode=@ZipCode, @Country=@Country,@OrgStrType	= @OrgStrType, @PageIndex=@PageIndex, @PageSize=@PageSize, @WebAccountId=@WebAccountId, @StoreId=@StoreId

GO
   IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembershipAttributes'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembershipAttributes
	END

GO

-- #desc								Reads the Customer/Consumer Attibutes view with the given information
-- #bl_class							Premier.Club.MembershipAttributes.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param @ClubId						ClubId to search for
-- #param @MembershipAddressNumber		Address Number to search for
-- #param @MembershipUniqueId			Membership Unique Id to search for

CREATE Procedure [DBO].CLB_GetMembershipAttributes
	@MembershipAddressNumber	FLOAT,
	@MembershipUniqueId			FLOAT
AS
	
	SELECT	B.CASEQ			AS SequenceNo, 
			A.MA$9AID		AS AttributeId, 
			C.AMDSC1		AS Description1, 
			C.AMDSC2		AS Description2,
			A.MA$9DASN		AS AttributeSelection,
			B.CA$9FASN		AS SelectionCriteria,
			B.CA$9ADRV		AS AttributeDriver,
			C.AM$9DTY		AS AttributeType,
			C.AMSY			AS ProductCode,
			C.AMRT			AS UserDefinedCodes
	FROM	
			[SCDATA].FQ6759B1 A INNER JOIN [SCDATA].FQ675911 B 
			ON  A.MA$9AID = B.CA$9AID
			INNER JOIN [SCDATA].FQ675950 C 
			ON  A.MA$9AID = C.AM$9AID
			INNER JOIN [SCDATA].FQ6759B0 D 
			ON  A.MAUKID = D.MMUKID AND B.CA$9CLUB = D.MM$9CLUB
	WHERE	
			A.MA$9AN8 = @MembershipAddressNumber 
			AND	A.MAUKID = @MembershipUniqueId 
	ORDER BY 
			B.CASEQ
	


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetMarketingCodeValues'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetMarketingCodeValues
	END
GO

-- #desc					Read marketing code values
-- #bl_class				Premier.Commerce.MarketingCodeValues.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Marketing Code  search criteria
-- #param @PriceKey			Price Key search criteria




CREATE Procedure [DBO].COM_GetMarketingCodeValues
  @MarketingCode	NVARCHAR(30)
AS
    SELECT  MK$9MKT AS MarketingCode, 
			MK$9MCOL AS PriceKey, 
			MK$9MVAL AS PriceKeyValue
    -- Marketing Code Detail	
	FROM  [SCDATA].FQ674205 MKDET
	WHERE 
	-- Marketing Code filter	
	MKDET.MK$9MKT = @MarketingCode
	

GO




 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetP4210VersRuleDetails'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetP4210VersRuleDetails
	END

GO

-- #desc					Read P4210 Version Rule Details
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleUniqueID		Rule Unique ID
-- #param @ProductCode		Product Code
-- #param @UserDefinedCode	User Defined Code

CREATE Procedure [DBO].COM_GetP4210VersRuleDetails
	@InstallationID		NVARCHAR(3),
	@RuleUniqueID		FLOAT,
	@ProductCode		NVARCHAR(4),
	@UserDefinedCode	NVARCHAR(2)
AS

SET NOCOUNT ON

DECLARE	@CodeLength	INT

-- Get Code Length
SET @CodeLength = 0;
SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
					WHERE DTSY = @ProductCode AND DTRT = @UserDefinedCode)

IF (@UserDefinedCode IS NOT NULL OR @UserDefinedCode <> '')
 BEGIN
	SELECT
		A.RDUKID				AS RuleUniqueID,
		A.RDLNID				AS LineID,
		A.RDKY					AS UserDefinedKey,
		B.DRDL01				AS DescriptionUDC,
		A.RDMCU					AS BranchPlant,
		''						AS BranchPlantDescription,
		A.RD$9AN8				AS AddressNumber,
		''						AS AlphaName
	FROM
		[SCDATA].FQ674231 A
	INNER JOIN [SCCTL].F0005 B
		ON  B.DRRT = @UserDefinedCode
		AND B.DRSY = @ProductCode	
	WHERE
		RD$9INID = @InstallationID AND
		RDUKID = @RuleUniqueID AND
		SUBSTRING(B.DRKY, 10 - @CodeLength + 1, @CodeLength) = A.RDKY
 END		
ELSE
 BEGIN	
	SELECT
		A.RDUKID				AS RuleUniqueID,
		A.RDLNID				AS LineID,
		A.RDKY					AS UserDefinedKey,
		''						AS DescriptionUDC,
		A.RDMCU					AS BranchPlant,
		ISNULL(C.MCDL01,' ')	AS BranchPlantDescription,
		A.RD$9AN8				AS AddressNumber,
		ISNULL(D.ABALPH,ISNULL(E.PRALPH,'')) AS AlphaName
	FROM
		[SCDATA].FQ674231 A
	LEFT OUTER JOIN [SCDATA].F0006 C -- Branch Master
		ON C.MCMCU = A.RDMCU
	LEFT OUTER JOIN [SCDATA].f0101 D -- Address Book Master
		ON D.ABAN8 = A.RD$9AN8
	LEFT OUTER JOIN [SCDATA].FQ670302 E -- Consumer Master
		ON E.PR$9AN8= A.RD$9AN8
	WHERE
		RD$9INID = @InstallationID AND
		RDUKID = @RuleUniqueID 

END		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'FN' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderStatusFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].COM_GetSalesOrderStatusFnc
	END
GO

-- #desc						Get the Sales Order Status
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				COM_GetSalesOrderRecentList.sql

-- #param @OrderNumber			Order Number
-- #param @OrderCompany			Order Company
-- #param @OrderType			Order Type
-- #param @OpenLnStatus			Open Line Status 
-- #param @FreightLnType		Freight Line Type
-- #param @DiscountLnType		Discount Line Type
-- #param @SurchargeLnType		Surcharge Line Type

CREATE FUNCTION [DBO].COM_GetSalesOrderStatusFnc
(
		@OrderNumber		FLOAT,
	@OrderCompany		NVARCHAR(5),
	@OrderType			NVARCHAR(2),	
	@OpenLnStatus		NVARCHAR(256),
	@FreightLnType		NVARCHAR(256),
	@DiscountLnType		NVARCHAR(256),
	@SurchargeLnType    NVARCHAR(256)
)
RETURNS NVARCHAR(256)
AS
BEGIN
	/* If all rows are CANCELLED then order is CANCELLED
     * Else if at least one row is OPEN then order is OPEN 
     * Otherwise order is COMPLETED 
	 */
	DECLARE @SalesStatusResult NVARCHAR(256);
	
		IF EXISTS (SELECT 1 FROM [SCDATA].F4211
						WHERE SDDOCO = @OrderNumber
						AND SDKCOO = @OrderCompany 
						AND SDDCTO = @OrderType 
						AND SDLNTY <> @FreightLnType
						AND SDLNTY <> @DiscountLnType
						AND SDLNTY <> @SurchargeLnType
						AND (SDLTTR < '980' OR SDLTTR = '995'))
		BEGIN
			IF EXISTS (SELECT 1 FROM [SCDATA].F4211
							WHERE SDDOCO = @OrderNumber
							AND SDKCOO = @OrderCompany 
							AND SDDCTO = @OrderType 
							AND SDLNTY <> @FreightLnType
							AND SDLNTY <> @DiscountLnType
							AND SDLNTY <> @SurchargeLnType
							AND SDNXTR <= @OpenLnStatus)
			BEGIN
				SET  @SalesStatusResult = 'OPEN'
			END
			ELSE
			BEGIN
				SET  @SalesStatusResult = 'COMPLETED'
			END
		END
		ELSE
			IF EXISTS (SELECT 1 FROM [SCDATA].F42119
						WHERE SDDOCO = @OrderNumber
						AND SDKCOO = @OrderCompany 
						AND SDDCTO = @OrderType 
						AND SDLNTY <> @FreightLnType
						AND SDLNTY <> @DiscountLnType
						AND SDLNTY <> @SurchargeLnType
						AND (SDLTTR < '980' OR SDLTTR = '995'))
			BEGIN
				IF EXISTS (SELECT 1 FROM [SCDATA].F42119
								WHERE SDDOCO = @OrderNumber
								AND SDKCOO = @OrderCompany 
								AND SDDCTO = @OrderType 
								AND SDLNTY <> @FreightLnType
								AND SDLNTY <> @DiscountLnType
								AND SDLNTY <> @SurchargeLnType
								AND SDNXTR <= @OpenLnStatus)
				BEGIN
					SET  @SalesStatusResult = 'OPEN'
				END
				ELSE
				BEGIN
					SET  @SalesStatusResult = 'COMPLETED'
				END
			END
		ELSE
		BEGIN
			SET  @SalesStatusResult = 'CANCELLED'	
		END

	RETURN @SalesStatusResult
END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderHeader'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderHeader
	END

GO

-- #desc					N/A
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrder

-- #param @Company			Company Number to search for.
-- #param @OrderType		Order number to search for.
-- #param @OrderNumber		Order type to search for.
-- #param @InstallationID	Installation Id.

CREATE Procedure [DBO].COM_GetSalesOrderHeader
(
	@Company NVARCHAR(5),
	@OrderType NVARCHAR(3),
	@OrderNumber FLOAT,
	@InstallationID NVARCHAR(3)
)
AS

    SELECT 
		A.SHKCOO AS Company,
		A.SHDOCO AS OrderNumber,
		A.SHDCTO AS OrderType,   
		SHMCU AS BranchPlant,
		SHOKCO AS OriginalOrderCo,    
		SHOORN AS OriginalOrderNo,
		SHOCTO AS OriginalOrderType,     
		SHAN8 AS CustomerNumber,
		SHSHAN AS ShipToID,
		SHDRQJ AS RequestedDate,     
		SHTRDJ AS OrderDate,    
		SHPDDJ AS PromisedDate,
		SHCNDJ AS CancelDate,
		SHVR01 AS CustomerPO,     
		SHDEL1 AS DeliveryInstructions1,
		SHDEL2 AS DeliveryInstructions2,     
		SHINMG AS PrintMesg,    
		SHPTC AS PaymentTerms,
		SHRYIN AS PaymentInstrument,     
		SHASN AS AdjustmentSchedule,     
		SHPRGP AS PricingGroup,
		SHTRDC AS TradeDiscount,
		SHTXA1 AS TaxArea,     
		SHEXR1 AS TaxExplanationCode,    
		SHTXCT AS Certificate,
		SHATXT AS AssociatedText,     
		SHHOLD AS HoldOrdersCode,    
		SHPLST AS PricePickListYN,
		SHINVC AS InvoiceCopies,
		SHANBY AS BuyerNumber,
		SHCARS AS Carrier,
		SHMOT AS ModeOfTransport,      
		SHROUT AS RouteCode,
		SHSTOP AS StopCode,     
		SHZON AS ZoneNumber,      
		SHFRTH AS FreightCode,     
		SHAFT AS ApplyFreightYN,     
		SHWUMD AS WeightDisplayUOM,     
		SHVUMD AS VolumeDisplayUOM,    
		SHAUTN AS AuthorizationNo,
		SHCACT AS CreditBankAcctNo,     
		SHCEXP AS CreditBankExpiredDate,    
		SHCRRM AS CurrencyMode,     
		SHCRCD AS CurrencyCode,
		SHCRR AS ExchangeRate,
		SHORBY AS OrderedBy,     
		SHTKBY AS OrderTakenBy,    
		SHURCD AS UserReservedCode,
		SHURDT AS UserReservedDate,     
		SHURAT AS UserReservedAmnt,
		SHURAB AS UserReservedNo,
		SHURRF AS UserReservedRef,     
		A.SHUSER AS UserId,    
		A.SHUPMJ AS DateUpdated,
		B.SH$9AN8 AS SCBillToNumber,  
		B.SH$9TYP AS AddressType, 
		B.SH$9SHAN AS SCShipToNumber, 
		B.SH$9WHI AS WarehouseInstructions,  
		B.SH$9MKT AS MarketingCode, 
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		B.SHIDLN AS SCBillToContactID,
		B.SHRCK7 AS SCShipToContactID,
		A.SHRCD AS ReasonCode,
		ISNULL(Tax.STUTP, 0) AS UseTaxedPrices
    FROM [SCDATA].F4201 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
  		ON A.SHKCOO = B.SHKCOO 
		AND A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO
    LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.SHDOCO 
		AND Tax.STDCTO = A.SHDCTO
		AND Tax.STKCOO = A.SHKCOO
	WHERE A.SHKCOO = @Company 
       AND A.SHDOCO = @OrderNumber
       AND A.SHDCTO = @OrderType
    UNION ALL
    SELECT 
		A.SHKCOO AS Company,
		A.SHDOCO AS OrderNumber,
		A.SHDCTO AS OrderType,   
		SHMCU AS BranchPlant,
		SHOKCO AS OriginalOrderCo,    
		SHOORN AS OriginalOrderNo,
		SHOCTO AS OriginalOrderType,     
		SHAN8 AS CustomerNumber,
		SHSHAN AS ShipToID,
		SHDRQJ AS RequestedDate,     
		SHTRDJ AS OrderDate,    
		SHPDDJ AS PromisedDate,
		SHCNDJ AS CancelDate,
		SHVR01 AS CustomerPO,     
		SHDEL1 AS DeliveryInstructions1,
		SHDEL2 AS DeliveryInstructions2,     
		SHINMG AS PrintMesg,    
		SHPTC AS PaymentTerms,
		SHRYIN AS PaymentInstrument,     
		SHASN AS AdjustmentSchedule,     
		SHPRGP AS PricingGroup,
		SHTRDC AS TradeDiscount,
		SHTXA1 AS TaxArea,     
		SHEXR1 AS TaxExplanationCode,    
		SHTXCT AS Certificate,
		SHATXT AS AssociatedText,     
		SHHOLD AS HoldOrdersCode,    
		SHPLST AS PricePickListYN,
		SHINVC AS InvoiceCopies,
		SHANBY AS BuyerNumber,
		SHCARS AS Carrier,
		SHMOT AS ModeOfTransport,      
		SHROUT AS RouteCode,
		SHSTOP AS StopCode,     
		SHZON AS ZoneNumber,      
		SHFRTH AS FreightCode,     
		SHAFT AS ApplyFreightYN,     
		SHWUMD AS WeightDisplayUOM,     
		SHVUMD AS VolumeDisplayUOM,    
		SHAUTN AS AuthorizationNo,
		SHCACT AS CreditBankAcctNo,     
		SHCEXP AS CreditBankExpiredDate,    
		SHCRRM AS CurrencyMode,     
		SHCRCD AS CurrencyCode,
		SHCRR AS ExchangeRate,
		SHORBY AS OrderedBy,     
		SHTKBY AS OrderTakenBy,    
		SHURCD AS UserReservedCode,
		SHURDT AS UserReservedDate,     
		SHURAT AS UserReservedAmnt,
		SHURAB AS UserReservedNo,
		SHURRF AS UserReservedRef,     
		A.SHUSER AS UserId,    
		A.SHUPMJ AS DateUpdated,
		B.SH$9AN8 AS SCBillToNumber,  
		B.SH$9TYP AS AddressType, 
		B.SH$9SHAN AS SCShipToNumber, 
		B.SH$9WHI AS WarehouseInstructions,  
		B.SH$9MKT AS MarketingCode, 
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		B.SHIDLN AS SCBillToContactID,
		B.SHRCK7 AS SCShipToContactID,
		A.SHRCD AS ReasonCode,
		ISNULL(TxHistory.STUTP, 0) AS UseTaxedPrices
    FROM [SCDATA].F42019 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
	ON A.SHKCOO = B.SHKCOO 
		AND A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.SHDOCO 
		AND TxHistory.STDCTO = A.SHDCTO
		AND TxHistory.STKCOO = A.SHKCOO
     WHERE A.SHKCOO = @Company 
       AND A.SHDOCO = @OrderNumber
       AND A.SHDCTO = @OrderType

RETURN 

GO






IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderInfo_BillTo'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderInfo_BillTo
	END

GO

-- #desc					Profile Read only info
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_Z, COM_GetOrderShipConfInfo, COM_GetReturnOrderInfo

-- #param @OrderCompany		Company ID
-- #param @OrderType		Document Type
-- #param @OrderNumber		OrderNumber
-- #param @SCBillToNumber	AddressNumber
-- #param @AddressType		AddressType
-- #param @ContactID        ContactID

CREATE Procedure [DBO].COM_GetSalesOrderInfo_BillTo
(
	@OrderCompany	NVARCHAR(5),
	@OrderType		NVARCHAR(2),
	@OrderNumber	FLOAT,
	@SCBillToNumber	FLOAT,
	@AddressType	FLOAT,
	@ContactID		FLOAT
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	-- TEMPORARY TABLE FOR THE BILLTO INFO
	CREATE TABLE #TMP_BILLTOINFO
	(
		MailingName		NVARCHAR(40) collate DATABASE_DEFAULT,
		AddressLine1	NVARCHAR(40) collate DATABASE_DEFAULT,
		AddressLine2	NVARCHAR(40) collate DATABASE_DEFAULT,
		AddressLine3	NVARCHAR(40) collate DATABASE_DEFAULT,
		AddressLine4	NVARCHAR(40) collate DATABASE_DEFAULT,
		City			NVARCHAR(25) collate DATABASE_DEFAULT,
		State			NVARCHAR(3) collate DATABASE_DEFAULT,
		ZipCode			NVARCHAR(12) collate DATABASE_DEFAULT,
		Country			NVARCHAR(3) collate DATABASE_DEFAULT
	);

	/*SEARCH FOR A BILLTO ADDRESS OVERRIDE*/
	INSERT 	INTO #TMP_BILLTOINFO
	SELECT 
		OAMLNM AS MailingName,
		OAADD1 AS AddressLine1, 
		OAADD2 AS AddressLine2, 
		OAADD3 AS AddressLine3,
		OAADD4 AS AddressLine4,
		OACTY1 AS City,
		OAADDS AS State,
		OAADDZ AS ZipCode,
		OACTR AS Country
	FROM [SCDATA].F4006
	WHERE
		OAANTY = 1 --BILLTO TYPE
		AND OADOCO = @OrderNumber
		AND OADCTO = @OrderType
		AND OAKCOO = @OrderCompany;

	--NO BILLTO OVERRIDE GET BILLTO INFORMATION FOR THE CONSUMER/CUSTOMER
	IF((SELECT COUNT(*) FROM #TMP_BILLTOINFO) = 0)
	BEGIN
		IF(@AddressType = 0) --CUSTOMER
		BEGIN
			INSERT 	INTO #TMP_BILLTOINFO
				SELECT 
					WW.WWMLNM AS MailingName,
					AL.ALADD1 AS AddressLine1, 
					AL.ALADD2 AS AddressLine2, 
					AL.ALADD3 AS AddressLine3,
					AL.ALADD4 AS AddressLine4,
					AL.ALCTY1 AS City,
					AL.ALADDS AS State,
					AL.ALADDZ AS ZipCode,
					AL.ALCTR AS Country
				FROM [SCDATA].F0101 AB-- Customer Master
				CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AB.ABAN8, @CurrentJulianDate) AL	/* Address Book Join */
				INNER JOIN [SCDATA].F0111 WW	--Contact Information
					ON WWAN8 = ABAN8
					AND WWIDLN = @ContactID
				WHERE 
					ABAN8 = @SCBillToNumber
		END
		ELSE --CONSUMER
		BEGIN
			--Read Consumer Information
			INSERT 	INTO #TMP_BILLTOINFO
			SELECT 				
				PCMLNM AS MailingName,
				PRADD1 AS AddressLine1,
				PRADD2 AS AddressLine2,
				PRADD3 AS AddressLine3,
				PRADD4 AS AddressLine4,
				PRCTY1 AS City,
				PRADDS AS State,
				PRADDZ AS ZipCode,
				PRCTR AS Country
			FROM [SCDATA].FQ670302 --Consumer
			INNER JOIN [SCDATA].FQ67303 --Contact Information
					ON PR$9AN8 = PC$9AN8
					AND PCIDLN = @ContactID
			WHERE 
				PR$9AN8 = @SCBillToNumber
		END
	END

	SELECT * FROM #TMP_BILLTOINFO

	DROP TABLE #TMP_BILLTOINFO

RETURN 

SET QUOTED_IDENTIFIER OFF 

GO

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderInfo_Payments'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderInfo_Payments
	END

GO

-- #desc					Sales order payment read only info
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_Z

-- #param @OrderCompany		Company ID
-- #param @OrderType		Document Type
-- #param @OrderNumber		OrderNumber

CREATE Procedure [DBO].COM_GetSalesOrderInfo_Payments
(
	@OrderCompany	NVARCHAR(5),
	@OrderType		NVARCHAR(2),
	@OrderNumber	FLOAT
)
AS
		
	SELECT  DISTINCT
			PTRYIN		AS PaymentInstrument,
			(CASE 
				WHEN PTATS = '01' OR PTATS = '02' then PTATRM
				WHEN PTATS = '05' then PTSTRM
				ELSE 0
			 END )		AS CreditCardAmount,
			PTCHKP		AS CheckAmount,
			PTCASP		AS CashAmount,
			PT$9CODAM	AS CODAmount,
			PT$9ACNT	AS OnAccountAmount,
			PTOPY1		AS OtherAmount,
			PTOPY2		AS OtherAmount2,
			(CASE 
				WHEN PTATS = '02' then PTABTM
				WHEN PTATS = '05' then PT$9VSATCD
				ELSE ''
			 END )		AS AuthorizationCode,
			PTCRCI		AS MaskedCreditCardNumber,
			PTCARD		AS CreditCardType,
			PTATS		AS TransactionStatus,
			B.PT$9FRUC	AS FreightUpCharge,
			A.PTCEXP	AS ExpirationDate,			
			A.PTALPH	AS NameOnCreditCard,
			PTSTRM		AS SettleAmount,
			CASE WHEN A.PTATS = '05' THEN B.PT$9PNREF2 ELSE B.PT$9PAYID END AS PNRef,
			A.PTCRCD	AS CurrencyCode,
			CASE WHEN A.PTATS = '02' THEN B.PT$9CCSURE  ELSE 0 END AS SurchargeAmount
	FROM	[SCDATA].F004201 A 
	LEFT OUTER JOIN [SCDATA].FQ670041 B
			ON  A.PTDOCO = B.PTDOCO
			AND A.PTDCTO = B.PTDCTO
			AND A.PTKCOO = B.PTKCOO
			AND A.PTLNID = B.PTLNID
	WHERE	A.PTDOCO = @OrderNumber
	AND	A.PTKCOO = @OrderCompany
	AND	A.PTDCTO = @OrderType	
	

RETURN 

SET QUOTED_IDENTIFIER OFF 

GO

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderPayments'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderPayments
	END

GO

-- #desc					Load the order payments List
-- #bl_class				Premier.Commerce.SalesOrderPayments.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @OrderCompany		Company id to search for.
-- #param @OrderType		Document type to search for.
-- #param @OrderNumber		Order number to search for.

CREATE Procedure [DBO].COM_GetSalesOrderPayments
	(
		@OrderCompany NVARCHAR(5),
		@OrderType NVARCHAR(3),
		@OrderNumber FLOAT
	)
AS


	 SELECT A.PTDOCO AS OrderNumber, 
			A.PTDCTO AS OrderType,
			A.PTKCOO AS OrderCompany, 
			A.PTSFXO AS OrderSuffix,
			A.PTLNID AS LineNumber,
			A.PTSEQ AS SequenceNumber,
			A.PTPOF AS OriginationFlag,
			A.PTRYIN AS PaymentInstrument,
			CAST(round(A.PTATRM, 0) AS FLOAT) AS AuthorizeAmount,
			A.PTALPH AS AlphaName, 
			A.PTAN8 AS AddressNumber,
			A.PTADD1 AS AddressLine1, 
			A.PTADD2 AS AddressLine2,
			A.PTCTY1 AS City, 
			A.PTADDS AS State, 
			B.PTADDZ AS ZipCode,
			A.PTCTR AS Country, 
			A.PTCARD AS CreditCardType,
			A.PTCRCI AS CreditCardNumber,
			A.PTCEXP AS CreditCardExpDate,
			A.PTCASP AS CashAmount,
			CAST(round(A.PTCHKP, 0) AS FLOAT) AS CheckAmount,
			A.PTCKNU AS CheckNumber,
			CAST(round(A.PTOPY1, 0) AS FLOAT) AS OtherAmount,
			CAST(round(A.PTOPY2, 0) AS FLOAT) AS OtherAmount2,
			A.PTCRCD AS Currency, 
			A.PTEMCU AS CostCenter,
			A.PTDL01 AS Reference, 
			A.PTATS AS TransactionStatus,
			CAST(round(B.PT$9ACNT, 0) AS FLOAT)  AS OnAccountAmount,
			CAST(round(B.PT$9CODAM, 0) AS FLOAT) AS CODAmount,
			B.PT$9FRUC AS FreightUpCharge,
			B.PT$9VSCVRS AS CVResult,
			B.PT$9VSIAVS AS IAVS,
			B.PT$9VSSTMC AS StreetMatch,
			B.PT$9VSZPMC AS ZipMatch, 
			CASE WHEN A.PTATS = '05' THEN B.PT$9VSATCD ELSE A.PTABTM END AS AuthCode,
			CASE WHEN A.PTATS = '05' THEN B.PT$9PNREF2 ELSE B.PT$9PAYID END AS PNRef,
			A.PTATRD AS TransactionDate,
			A.PTSTRM  AS SettleAmount, 
			A.PTSETD AS SettleDate,
			A.PTPID AS ProgramId, 
			B.PT$9REGID AS Register,
			B.PT$9DRAW AS Drawer,
			B.PTEDBT AS EditBatch,
			B.PT$9VSCCN AS CreditCardNumRef,
			CASE WHEN A.PTATS = '02' THEN B.PT$9CCSURE  ELSE 0 END AS SurchargeAmount
	   FROM [SCDATA].F004201 AS A 
		LEFT OUTER JOIN [SCDATA].FQ670041 AS B 
		 ON B.PTDOCO = A.PTDOCO
		AND B.PTDCTO = A.PTDCTO
		AND B.PTKCOO = A.PTKCOO
		AND B.PTLNID = A.PTLNID
		AND B.PTSFXO = A.PTSFXO
		AND B.PTSEQ = A.PTSEQ
		AND B.PTPOF = A.PTPOF
	  WHERE 
		A.PTDOCO = @OrderNumber 
		AND A.PTDCTO = @OrderType 
		AND A.PTKCOO = @OrderCompany

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderDetail'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderDetail
	END

GO
-- #desc							N/A
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					COM_GetSalesOrder

-- #param @Company					Company Number to search for.
-- #param @OrderType				Order number to search for.
-- #param @OrderNumber				Order type to search for.
-- #param @RetrieveWebContentInfo	Condition to validate if Retrieve Web Content Info or no.
-- #param @InstallationID			Installation Id

CREATE Procedure [DBO].COM_GetSalesOrderDetail
(
	@Company NVARCHAR(5),
	@OrderType NVARCHAR(3),
	@OrderNumber FLOAT,
	@InstallationID NVARCHAR(3),
	@RetrieveWebContentInfo INT,
	@LangPref NVARCHAR(2)

)
AS
	IF(@RetrieveWebContentInfo = 0)
	BEGIN
	    SELECT 
			A.SDKCOO AS Company, 
			A.SDDOCO AS OrderNumber,
			A.SDDCTO AS OrderType,
			A.SDLNID AS LineNumberID,
			A.SDMCU AS BusinessUnit,      
			A.SDOKCO AS OriginalOrderCompany,     
			A.SDOORN AS OriginalOrderNumber,     
			A.SDOCTO AS OriginalOrderType,
			A.SDOGNO AS OriginalOrderLineNumber,
			A.SDDMCT AS AgreementNumber,
			A.SDAN8 AS BillToNumber,
			A.SDSHAN AS ShipToID,
			A.SDDRQJ AS RequestedDate,     
			A.SDTRDJ AS TransactionDate,     
			A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
			A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
			A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)    
			A.SDCNDJ AS CancelDate,     
			A.SDITM AS ItemNumber,
			A.SDLITM AS ItemNo,     
			A.SDAITM AS AuxItemNumber,     
			A.SDDSC1 AS ItemDescription1,		/* Retrieve Description 1 for Tracking lines */
			A.SDDSC2 AS ItemDescription2, 
			'' AS URL,    
			A.SDLNTY AS LineType,
			A.SDNXTR AS NextStatus,     
			A.SDLTTR AS LastStatus,     
			A.SDEMCU AS  RevenueBusinessUnit,
			A.SDHDBU AS F4201BranchPlant,
			A.SDRLIT AS ItemNumberRelatedKit,
			A.SDKTLN AS KitMasterLineNo,
			A.SDCPNT AS ComponentLineNumber,
			A.SDRKIT AS RelatedKitComponent,
			A.SDUOM AS TransactionUOM,
			A.SDUORG AS QuantityOrdered,
			A.SDSOQS AS QuantityShipped,
			A.SDSOBK AS QuantityBackOrdered,
			A.SDSOCN AS QuantityCanceled,
			A.SDUPRC AS UnitPrice,
			A.SDFUP  AS ForeignUnitPrice,
			A.SDAEXP AS ExtendedPrice,
			A.SDFEA	 AS ForeignExtPrice,
			A.SDPROV AS OverridePrice,     
			A.SDUNCS AS UnitCost,
			A.SDFUC AS ForeignUnitCost,
			A.SDECST AS ExtendedCost,
			A.SDFEC AS ForeignExtendedCost, 
			A.SDCSTO AS CostOverrideMode,
			A.SDINMG AS ItemFlashMessage,     
			A.SDPTC AS PaymentTerms,      
			A.SDRYIN AS PaymentInstrument,
			A.SDDTBS AS BasedOnDate,
			A.SDTRDC AS DiscountTrade,
			A.SDASN AS AdjustmentSchedule,
			A.SDPRGR AS PricingCategory,     
			A.SDCLVL AS PricingCategoryLevel,     
			A.SDCADC AS DiscountCash,
			A.SDKCO AS InvoiceCompany,
			A.SDDOC AS InvoiceNo,
			A.SDDCT AS InvoiceDocType,
			A.SDTAX1 AS IsTaxable,     
			A.SDTXA1 AS TaxArea,     
			A.SDEXR1 AS TaxExplanationCode, 
			A.SDLOB AS LineofBusiness,      
			A.SDEUSE AS EndUse,     
			A.SDDTYS AS DutyStatus,
			A.SDANBY AS BuyerNumber,
			A.SDCARS AS Carrier,
			A.SDMOT AS ModeOfTransport,      
			A.SDUOM4 AS PricingUOM,
			A.SDITWT AS ItemWeight,
			A.SDWTUM AS WeightUOM,
			A.SDITVL AS ItemVolume,
			A.SDVLUM AS VolumeUOM,     
			A.SDRPRC AS RepriceBasketPriceCat,     
			A.SDORPR AS OrderRepriceCategory, 
			A.SDRCD AS ReasonCode,  
			A.SDUPC1 AS PriceCode1,     
			A.SDUPC2 AS PriceCode2,
			A.SDUPC3 AS PriceCode3,      
			A.SDCRCD AS CurrencyCode,
			A.SDURRF AS UserReservedReference,     
			A.SDUSER AS UserID,
			A.SDPID AS ProgramId,
			A.SDJOBN AS WorkStationId,
			A.SDUPMJ AS DateUpdated,
			B.SD$9AN8 AS SCBillToNumber,  
			B.SD$9SHAN AS SCShipToNumber, 
			B.SD$9TYP AS AddressType, 
			B.SD$9MKTG AS MarketingCode, 
			B.SD$9IGPR AS ItemGroupPriority, 
			B.SDKIT AS ItemNumberShortKit, 
			B.SDMMCU AS CostCenterAlt,   
			B.SD$9SLN AS ShipLineNumber,  
			B.SD$9FQTY AS FamilyQuantityItems, 
			B.SD$9IID AS ItemGroupKeyID, 
			B.SD$9STS AS NextStatus,  
			B.SDQNTY AS FamilyQuantityItems1,   
			B.SD$9UOM AS FamilyUnitOfMeasure,
			B.SDIDLN AS SCBillToContactID,   
			B.SDRCK7 AS SCShipToContactID,
			IM.IMSTKT	AS StockingType,
			A.SDLOCN AS Location,
			A.SDLOTN AS LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			ISNULL(C.RFOGNO, 0 ) AS ParentLineNo,
			ISNULL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
			ISNULL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
			ISNULL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
			ISNULL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
			ISNULL(Tax.DTUTA,0)   AS UnitTaxAmount,
			ISNULL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
			ISNULL(Tax.DTETA,0)   AS ExtendedTaxAmount,
			ISNULL(Tax.DTFETA,0)  AS ForeignExtTaxAmount
		FROM [SCDATA].F4211 A 
			LEFT OUTER JOIN [SCDATA].FQ674211 B
   		ON A.SDKCOO = B.SDKCOO 
			AND A.SDDOCO = B.SDDOCO 
			AND A.SDDCTO = B.SDDCTO 
			AND A.SDLNID = B.SDLNID
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
		LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO 
		AND C.RFDCTO = A.SDDCTO 
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID 
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.SDDOCO 
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID 
		WHERE A.SDKCOO = @Company 
		AND A.SDDOCO = @OrderNumber
		AND A.SDDCTO = @OrderType
    UNION ALL
    SELECT 
			A.SDKCOO AS Company, 
			A.SDDOCO AS OrderNumber,
			A.SDDCTO AS OrderType,
			A.SDLNID AS LineNumberID,
			A.SDMCU AS BusinessUnit,      
			A.SDOKCO AS OriginalOrderCompany,     
			A.SDOORN AS OriginalOrderNumber,     
			A.SDOCTO AS OriginalOrderType,
			A.SDOGNO AS OriginalOrderLineNumber,
			A.SDDMCT AS AgreementNumber,
			A.SDAN8 AS BillToNumber,
			A.SDSHAN AS ShipToID,
			A.SDDRQJ AS RequestedDate,     
			A.SDTRDJ AS TransactionDate,     
			A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
			A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
			A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)    
			A.SDCNDJ AS CancelDate,     
			A.SDITM AS ItemNumber,
			A.SDLITM AS ItemNo,     
			A.SDAITM AS AuxItemNumber,
			A.SDDSC1 AS ItemDescription1,		/* Retrieve Description 1 for Tracking lines */
			A.SDDSC2 AS ItemDescription2, 
			'' AS URL,  
			A.SDLNTY AS LineType,
			A.SDNXTR AS NextStatus,     
			A.SDLTTR AS LastStatus,     
			A.SDEMCU AS  RevenueBusinessUnit,
			A.SDHDBU AS F4201BranchPlant,
			A.SDRLIT AS ItemNumberRelatedKit,
			A.SDKTLN AS KitMasterLineNo,
			A.SDCPNT AS ComponentLineNumber,
			A.SDRKIT AS RelatedKitComponent,
			A.SDUOM AS TransactionUOM,
			A.SDUORG AS QuantityOrdered,
			A.SDSOQS AS QuantityShipped,
			A.SDSOBK AS QuantityBackOrdered,
			A.SDSOCN AS QuantityCanceled,
			A.SDUPRC AS UnitPrice,
			A.SDFUP  AS ForeignUnitPrice,
			A.SDAEXP AS ExtendedPrice,
			A.SDFEA	 AS ForeignExtPrice,
			A.SDPROV AS OverridePrice,     
			A.SDUNCS AS UnitCost,
			A.SDFUC AS ForeignUnitCost,
			A.SDECST AS ExtendedCost,
			A.SDFEC AS ForeignExtendedCost, 
			A.SDCSTO AS CostOverrideMode,
			A.SDINMG AS ItemFlashMessage,     
			A.SDPTC AS PaymentTerms,      
			A.SDRYIN AS PaymentInstrument,
			A.SDDTBS AS BasedOnDate,
			A.SDTRDC AS DiscountTrade,
			A.SDASN AS AdjustmentSchedule,      
			A.SDPRGR AS PricingCategory,
			A.SDCLVL AS PricingCategoryLevel, 
			A.SDCADC AS DiscountCash,
			A.SDKCO AS InvoiceCompany,
			A.SDDOC AS InvoiceNo,
			A.SDDCT AS InvoiceDocType,
			A.SDTAX1 AS IsTaxable,     
			A.SDTXA1 AS TaxArea,     
			A.SDEXR1 AS TaxExplanationCode,  
			A.SDLOB AS LineofBusiness,      
			A.SDEUSE AS EndUse,     
			A.SDDTYS AS DutyStatus,
			SDANBY AS BuyerNumber,
			A.SDCARS AS Carrier,
			A.SDMOT AS ModeOfTransport,      
			A.SDUOM4 AS PricingUOM,
			A.SDITWT AS ItemWeight,
			A.SDWTUM AS WeightUOM,
			A.SDITVL AS ItemVolume,
			A.SDVLUM AS VolumeUOM,     
			A.SDRPRC AS RepriceBasketPriceCat,     
			A.SDORPR AS OrderRepriceCategory,  
			A.SDRCD AS ReasonCode,   
			A.SDUPC1 AS PriceCode1,     
			A.SDUPC2 AS PriceCode2,
			A.SDUPC3 AS PriceCode3,         
			A.SDCRCD AS CurrencyCode,
			A.SDURRF AS UserReservedReference,     
			A.SDUSER AS UserID,
			A.SDPID AS ProgramId,
			A.SDJOBN AS WorkStationId,
			A.SDUPMJ AS DateUpdated,
			B.SD$9AN8 AS SCBillToNumber,  
			B.SD$9SHAN AS SCShipToNumber, 
			B.SD$9TYP AS AddressType, 
			B.SD$9MKTG AS MarketingCode, 
			B.SD$9IGPR AS ItemGroupPriority, 
			B.SDKIT AS ItemNumberShortKit, 
			B.SDMMCU AS CostCenterAlt,   
			B.SD$9SLN AS ShipLineNumber,  
			B.SD$9FQTY AS FamilyQuantityItems, 
			B.SD$9IID AS ItemGroupKeyID, 
			B.SD$9STS AS NextStatus,  
			B.SDQNTY AS FamilyQuantityItems1,   
			B.SD$9UOM AS FamilyUnitOfMeasure,
			B.SDIDLN AS SCBillToContactID,   
			B.SDRCK7 AS SCShipToContactID,
			IM.IMSTKT	AS StockingType,
			A.SDLOCN AS Location,
			A.SDLOTN AS LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			ISNULL(C.RFOGNO, 0 ) AS ParentLineNo,
			ISNULL(TxHistory.DTTUPRC,0) AS TaxedUnitPrice,
			ISNULL(TxHistory.DTTFUP,0)  AS ForeignTaxedUnitPrice,
			ISNULL(TxHistory.DTTAEXP,0) AS TaxedExtendedPrice,
			ISNULL(TxHistory.DTTFEA,0)  AS ForeignTaxedExtPrice,
			ISNULL(TxHistory.DTUTA,0)   AS UnitTaxAmount,
			ISNULL(TxHistory.DTFUTA,0)  AS ForeignUnitTaxAmount,
			ISNULL(TxHistory.DTETA,0)   AS ExtendedTaxAmount,
			ISNULL(TxHistory.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F42119 A 
	LEFT OUTER JOIN [SCDATA].FQ674211 B
 	ON A.SDKCOO = B.SDKCOO 
       AND A.SDDOCO = B.SDDOCO 
       AND A.SDDCTO = B.SDDCTO 
       AND A.SDLNID = B.SDLNID
    LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
	ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO 
		AND C.RFDCTO = A.SDDCTO 
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID 
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.SDDOCO 
		AND TxHistory.DTDCTO = A.SDDCTO
		AND TxHistory.DTKCOO = A.SDKCOO 
		AND TxHistory.DTLNID = A.SDLNID
     WHERE A.SDKCOO = @Company 
       AND A.SDDOCO = @OrderNumber
       AND A.SDDCTO = @OrderType
	END
	ELSE
	BEGIN
	  SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,      
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)    
		A.SDCNDJ AS CancelDate,     
		A.SDITM AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		ISNULL (ContenDesc.DESC1,A.SDDSC1) AS ItemDescription1,
		ISNULL (ContenDesc.DESC2,A.SDDSC2) AS ItemDescription2, 
		ContenDesc.URL AS URL,  
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS  RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost, 
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,
		A.SDPRGR AS PricingCategory,     
		A.SDCLVL AS PricingCategoryLevel,     
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode, 
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		A.SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,      
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory, 
		A.SDRCD AS ReasonCode,  
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,      
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS UserID,
		A.SDPID AS ProgramId,
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems1,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
		A.SDLOCN AS Location,
		A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		ISNULL(C.RFOGNO, 0 ) AS ParentLineNo,
		ISNULL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		ISNULL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		ISNULL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		ISNULL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		ISNULL(Tax.DTUTA,0)   AS UnitTaxAmount,
		ISNULL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		ISNULL(Tax.DTETA,0)   AS ExtendedTaxAmount,
		ISNULL(Tax.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F4211 A 
	LEFT OUTER JOIN [SCDATA].FQ674211 B
   	ON A.SDKCOO = B.SDKCOO 
       AND A.SDDOCO = B.SDDOCO 
       AND A.SDDCTO = B.SDDCTO 
       AND A.SDLNID = B.SDLNID
    LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
	ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO 
		AND C.RFDCTO = A.SDDCTO 
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID 
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.SDDOCO 
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID 
	OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.SDITM,@LangPref,0)ContenDesc 
     WHERE A.SDKCOO = @Company 
       AND A.SDDOCO = @OrderNumber
       AND A.SDDCTO = @OrderType
    UNION ALL
    SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,      
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)    
		A.SDCNDJ AS CancelDate,     
		A.SDITM AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		ISNULL (ContenDesc.DESC1,A.SDDSC1) AS ItemDescription1,
		ISNULL (ContenDesc.DESC2,A.SDDSC2) AS ItemDescription2, 
		ContenDesc.URL AS URL,  
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS  RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost, 
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,      
		A.SDPRGR AS PricingCategory,
		A.SDCLVL AS PricingCategoryLevel, 
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,  
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,      
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,  
		A.SDRCD AS ReasonCode,   
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,         
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS UserID,
		A.SDPID AS ProgramId,
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems1,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
		A.SDLOCN AS Location,
		A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		ISNULL(C.RFOGNO, 0 ) AS ParentLineNo,
		ISNULL(TxHistory.DTTUPRC,0) AS TaxedUnitPrice,
		ISNULL(TxHistory.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		ISNULL(TxHistory.DTTAEXP,0) AS TaxedExtendedPrice,
		ISNULL(TxHistory.DTTFEA,0)  AS ForeignTaxedExtPrice,
		ISNULL(TxHistory.DTUTA,0)   AS UnitTaxAmount,
		ISNULL(TxHistory.DTFUTA,0)  AS ForeignUnitTaxAmount,
		ISNULL(TxHistory.DTETA,0)   AS ExtendedTaxAmount,
		ISNULL(TxHistory.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F42119 A 
	LEFT OUTER JOIN [SCDATA].FQ674211 B
 	ON A.SDKCOO = B.SDKCOO 
       AND A.SDDOCO = B.SDDOCO 
       AND A.SDDCTO = B.SDDCTO 
       AND A.SDLNID = B.SDLNID
    LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
	ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO 
		AND C.RFDCTO = A.SDDCTO 
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID 
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.SDDOCO 
		AND TxHistory.DTDCTO = A.SDDCTO
		AND TxHistory.DTKCOO = A.SDKCOO 
		AND TxHistory.DTLNID = A.SDLNID
	OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc (@InstallationID,A.SDITM,@LangPref,0) ContenDesc
     WHERE A.SDKCOO = @Company 
       AND A.SDDOCO = @OrderNumber
       AND A.SDDCTO = @OrderType
	END

RETURN 
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderShipments'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderShipments
	END
GO


-- #desc						Reads Order Shipment information  
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				COM_GetSalesOrderInfo_Z, COM_GetOrderShipConfInfo

-- #param @InstallationID		Installation ID
-- #param @OrderCompany			Company ID
-- #param @OrderType			Document Type
-- #param @OrderNumber			OrderNumber
-- #param @OrderShipToNumber	Order ShipTo Number
-- #param @AddressType			AddressType
-- #param @Freight				Freight on or off flag  0= off  1 = On
-- #param @IsOverrideShipTo		Is Override Ship To	Address 

CREATE Procedure [DBO].COM_GetSalesOrderShipments
(
	@InstallationID NVARCHAR(3),
	@OrderCompany	NVARCHAR(5),
	@OrderType		NVARCHAR(2),
	@OrderNumber	FLOAT,
	@OrderShipToNumber	FLOAT,
	@AddressType	FLOAT,
	@Freight		INT,
	@IsOverrideShipTo	INT
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	DECLARE @DiscountLineType NVARCHAR(256)
	DECLARE @TrackingLineType NVARCHAR(256)
	DECLARE @InstallationTemp NVARCHAR(3)
	
								
	IF (@IsOverrideShipTo > 0) BEGIN		
		SELECT DISTINCT
			@OrderShipToNumber	AS SCShipToNumber,
			' '			AS NickName,
			A.OAMLNM AS MailingName,
			A.OAADD1 AS AddressLine1, 
			A.OAADD2 AS AddressLine2, 
			A.OAADD3 AS AddressLine3,
			A.OAADD4 AS AddressLine4,
			A.OACTY1 AS City,
			A.OAADDS AS State,
			A.OAADDZ AS ZipCode,
			A.OACTR AS Country,
			(CASE WHEN @Freight = 0 THEN ' ' ELSE DETAIL.CostCenter END) AS CostCenter,
			'Y' AS IsShipToOverride
		FROM [SCDATA].F4006 A 
		INNER JOIN #COM_GetSalesOrderShipments_A DETAIL
			ON DETAIL.OrderNumber = OADOCO
			AND DETAIL.OrderType = OADCTO
			AND DETAIL.OrderCompany = OAKCOO
		WHERE OADOCO = @OrderNumber
			AND OADCTO = @OrderType 
			AND OAKCOO = @OrderCompany  
			AND OAANTY = 2 /*SHIPTO TYPE*/			
	END
	ELSE BEGIN /*NO SHIPTO OVERRIDE GET SHIPTO INFORMATION FOR THE CONSUMER/CUSTOMER*/
		SET @InstallationTemp = @InstallationID
		EXEC [DBO].CMM_GetConstantValue 'DISCOUNTLN', @InstallationTemp, @DiscountLineType out
		SET @InstallationTemp = @InstallationID
		EXEC [DBO].CMM_GetConstantValue 'TRACKINGLN', @InstallationTemp, @TrackingLineType out
	
		IF(@AddressType = 0) BEGIN /*Customer*/
			SELECT DISTINCT
				DETAIL.SCShipToNumber	AS SCShipToNumber,
				CASE
					WHEN	LEN(RTRIM(LTRIM(S2.WWNICK))) >	0 THEN 
						S2.WWNICK
					ELSE
						(
							CASE 
								WHEN ISNULL(PE.PS$9ICF, 0) = 1  THEN S2.WWALPH
								ELSE S2.WWMLNM
								END
						)
				END AS  Nickname,
				S2.WWMLNM AS MailingName,
				S3.ALADD1 AS AddressLine1, 
				S3.ALADD2 AS AddressLine2, 
				S3.ALADD3 AS AddressLine3,
				S3.ALADD4 AS AddressLine4,
				S3.ALCTY1 AS City,
				S3.ALADDS AS State,
				S3.ALADDZ AS ZipCode,
				S3.ALCTR AS Country,
				(CASE WHEN @Freight = 0 THEN ' ' ELSE DETAIL.CostCenter END) AS CostCenter,
				'N' AS IsShipToOverride
			FROM #COM_GetSalesOrderShipments_A DETAIL
			INNER JOIN [SCDATA].F0101					S1
				/* Address Book Join Who's Who (Contacts)*/
				ON S1.ABAN8 = DETAIL.SCShipToNumber
			INNER JOIN [SCDATA].F0111					S2
				ON S2.WWAN8 = S1.ABAN8
				AND S2.WWIDLN = 0
				/* Address Book Join Address File*/
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(S1.ABAN8, @CurrentJulianDate) S3
				/* Address Book Join Customer Master*/
			LEFT OUTER JOIN [SCDATA].FQ67107 PE		/* Profile Extended Information*/
				ON PS$9AN8 = S1.ABAN8
				AND PS$9TYP = 0 /*CUSTOMER			*/
			WHERE DETAIL.LineType <> @DiscountLineType 
				AND DETAIL.LineType <> @TrackingLineType	
		END
		ELSE BEGIN /*Consumer*/
			SELECT DISTINCT
				DETAIL.SCShipToNumber	AS SCShipToNumber,
				(CASE
					WHEN LEN(RTRIM(LTRIM(C.PRURRF))) > 0 THEN C.PRURRF
					ELSE (
							CASE 
							WHEN ISNULL(PE.PS$9ICF,0) = 1 THEN C.PRALPH
							ELSE CONT.PCMLNM
							END)
				END)		AS NickName,
				CONT.PCMLNM AS MailingName,
				C.PRADD1 AS AddressLine1, 
				C.PRADD2 AS AddressLine2, 
				C.PRADD3 AS AddressLine3,
				C.PRADD4 AS AddressLine4,
				C.PRCTY1 AS City,
				C.PRADDS AS State,
				C.PRADDZ AS ZipCode,
				C.PRCTR AS Country,
				(CASE WHEN @Freight = 0 THEN ' ' ELSE DETAIL.CostCenter END) AS CostCenter,
				'N' AS IsShipToOverride
			FROM #COM_GetSalesOrderShipments_A DETAIL
			INNER JOIN [SCDATA].FQ670302 C /*Consumer*/
				ON DETAIL.SCShipToNumber = PR$9AN8
			INNER JOIN [SCDATA].FQ67303 CONT /*Consumer*/
				ON DETAIL.SCShipToNumber = PC$9AN8
				AND PCIDLN = 0
			LEFT OUTER JOIN [SCDATA].FQ67107 PE		/*Profile Extended Information*/
				ON PS$9AN8 = PC$9AN8
				AND PS$9TYP = 1 /*CONSUMER*/
			WHERE DETAIL.LineType <> @DiscountLineType 
				AND DETAIL.LineType <> @TrackingLineType
		END
	END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSOConfiguredLineList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSOConfiguredLineList
	END

GO

-- #desc					Load the Configured Segments List
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetOrderShipConfInfo, COM_GetSalesOrderInfo_Z, QTS_GetQuoteOrderInfo_Z

-- #param @OrderCompany		Company id
-- #param @OrderType		Document type
-- #param @OrderNumber		Order number
-- #param @LangPref			Lang Pref

CREATE Procedure [DBO].COM_GetSOConfiguredLineList
(
	@OrderCompany	NVARCHAR(5),
	@OrderType		NVARCHAR(3),
	@OrderNumber	FLOAT,
	@LangPref		NVARCHAR(2)
)
AS
	/*Stores the history for the configured items of all the configurations ordered.*/
	;WITH ConfiguratorMaster AS (
		SELECT DISTINCT
			CT.CMCFGID	AS ConfiguratorID,
			CT.CMEMCU	AS BranchPlant,
			CT.CMLNID	AS LineNumber
		FROM 
			[SCDATA].F3201 CT	 /*Configurator Master*/
		WHERE
			CT.CMKCOO = @OrderCompany AND
			CT.CMDOCO =	@OrderNumber AND
			CT.CMDCTO =	@OrderType AND
			CT.CMCFGCID  = 1 /*assumption:1 is the parent number ID - CMLNID = 1*/
		UNION ALL
		SELECT DISTINCT
			CTH.CHCFGID	AS ConfiguratorID,
			CTH.CHEMCU	AS BranchPlant,
			CTH.CHLNID	AS LineNumber
		FROM 
			[SCDATA].F32019 CTH /*Configurator Master History*/
		WHERE
			CTH.CHKCOO = @OrderCompany AND
			CTH.CHDOCO = @OrderNumber AND
			CTH.CHDCTO = @OrderType AND
			CTH.CHCFGCID  = 1 /*assumption:1 is the parent number ID - CMLNID = 1*/
	)

	/*Stores segment information*/
	SELECT 
			OrderCompany,
			OrderType,
			OrderNumber,
			LineNumberID,
			ConfigurationIDNumber,
			ComponentIDNumber,
			SegmentNumber,
			SegmentValue,
			ParentItemNumber,
			ISNULL(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ) AS RequiredorOptional,
			ISNULL(CIS_MCU.KWDSC1, CIS_EMPTY_MCU.KWDSC1) AS Description,
			ISNULL(CIS_MCU.KWDTAS, CIS_EMPTY_MCU.KWDTAS) AS SegmentSequence,
			(CASE WHEN (ISNULL(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ)) = 'C' OR RTRIM(ISNULL(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY)) = '' OR RTRIM(ISNULL(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT)) = ''
				THEN ' ' 
				ELSE [DBO].CMM_GetUserDefinedCodeFnc(ISNULL(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY), ISNULL(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT), SegmentValue, @LangPref)  
			END) AS SegmentDescription
	FROM
		(SELECT DISTINCT
			@OrderCompany	AS OrderCompany,
			@OrderType		AS OrderType,        
			@OrderNumber	AS OrderNumber,	 
			CM.LineNumber	AS LineNumberID,
			SD.KZCFGID		AS ConfigurationIDNumber,	
			SD.KZCFGCID		AS ComponentIDNumber,
			SD.KZPEL		AS SegmentNumber,
			SD.KZSGVL		AS SegmentValue,
			SD.KZKIT		AS ParentItemNumber,
			CM.BranchPlant  AS  BranchPlant
		FROM
			[SCDATA].F3211 SD	  /*Configurator Segment Detail*/
		INNER JOIN ConfiguratorMaster CM
			ON CM.ConfiguratorID = SD.KZCFGID
		UNION ALL
		SELECT DISTINCT
			@OrderCompany	AS OrderCompany,
			@OrderType		AS OrderType,        
			@OrderNumber	AS OrderNumber,	 
			CM.LineNumber	AS LineNumberID,
			SDH.KSCFGID		AS ConfigurationIDNumber,	
			SDH.KSCFGCID	AS ComponentIDNumber,
			SDH.KSPEL		AS SegmentNumber,
			SDH.KSSGVL 		AS SegmentValue,
			SDH.KSKIT		AS ParentItemNumber,
			CM.BranchPlant AS  BranchPlant
		FROM 	
			[SCDATA].F32119 SDH /*Configurator Segment Detail History*/
		INNER JOIN ConfiguratorMaster CM
			ON CM.ConfiguratorID = SDH.KSCFGID) AS OrderConf
	LEFT JOIN [SCDATA].F3291 CIS_MCU /*Configured Item Segments*/
            ON CIS_MCU.KWKIT  = OrderConf.ParentItemNumber 
            AND CIS_MCU.KWMCU = OrderConf.BranchPlant
            AND CIS_MCU.KWPEL = OrderConf.SegmentNumber
	LEFT JOIN [SCDATA].F3291 CIS_EMPTY_MCU /*Configured Item Segments*/
        ON CIS_EMPTY_MCU.KWKIT  = OrderConf.ParentItemNumber 
        AND CIS_EMPTY_MCU.KWMCU = ''
        AND CIS_EMPTY_MCU.KWPEL = OrderConf.SegmentNumber
	ORDER BY ComponentIDNumber, SegmentSequence, SegmentNumber, Description
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelMarketingCodeTracking'))
	BEGIN
		DROP  Procedure  [DBO].COM_DelMarketingCodeTracking
	END

GO

-- #desc					Delete marketing code tracking 
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Marketing Code

CREATE Procedure [DBO].COM_DelMarketingCodeTracking
	@MarketingCode  NVARCHAR(30)
AS

SET NOCOUNT ON

DELETE  FROM  
	[SCDATA].FQ674240
WHERE 
	MK$9MKT = @MarketingCode

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSOReturnLineList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSOReturnLineList
	END

GO

-- #desc					Return Line List 
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @OrderCompany		Company ID
-- #param @OrderType		Document Type
-- #param @OrderNumber		OrderNumber

CREATE Procedure [DBO].COM_GetSOReturnLineList
(
	@InstallationID NVARCHAR(3),
	@OrderCompany	NVARCHAR(5),
	@OrderType		NVARCHAR(2),
	@OrderNumber	FLOAT
)
AS
	
	DECLARE @CORestric	NVARCHAR(256)
	DECLARE @COINID     NVARCHAR(3) 
	DECLARE @COConstant	NVARCHAR(10)
	/* Cast Order number as text, Use STR to avoid scientific notation and Trim to remove white spaces at the beginning */
	DECLARE @OriginalOrderNumber	NCHAR(8) = LTRIM(STR(@OrderNumber, 8, 0));
	/* Gets the Sales Order Document Restrictions */	
	SET @COConstant = 'CO_RESTRIC'
    SET @COINID = @InstallationID	
    EXEC [DBO].CMM_GetConstantValue @COConstant, @COINID out, @CORestric out

	;WITH SOReturnLineList AS
	(
		SELECT
				A.SDKCOO	AS CreditCompany, 
				A.SDDCTO	AS CreditType,
				A.SDDOCO	AS CreditNumber,
				A.SDOGNO	AS LineNumberID,			
				A.SDITM		AS IdentifierShortItem,
				A.SDUOM		AS UnitOfMeasure,
				A.SDMCU		AS CostCenter, 
				A.SDSOQS	AS ReturnQuantity,
				A.SDTRDJ	AS TransactionDate
		FROM	[SCDATA].F4211 A		--Standard Sales OrderDetail		
		WHERE	A.SDOORN = @OriginalOrderNumber
			AND	A.SDOCTO = @OrderType
			AND	A.SDOKCO = @OrderCompany
			AND (A.SDLTTR < '980' OR A.SDLTTR = '995') /* Cancelled Lines Validation */
		UNION ALL
		SELECT
				A.SDKCOO	AS CreditCompany, 
				A.SDDCTO	AS CreditType,
				A.SDDOCO	AS CreditNumber,
				A.SDOGNO	AS LineNumberID,			
				A.SDITM		AS IdentifierShortItem,
				A.SDUOM		AS UnitOfMeasure,
				A.SDMCU		AS CostCenter, 
				A.SDUORG	AS ReturnQuantity,
				A.SDTRDJ	AS TransactionDate			
		FROM 	[SCDATA].F42119 A			
		WHERE	A.SDOORN = @OriginalOrderNumber
			AND	A.SDOCTO = @OrderType
			AND	A.SDOKCO = @OrderCompany
			AND (A.SDLTTR < '980' OR A.SDLTTR = '995') /* Cancelled Lines Validation */
	)
	SELECT
		CreditCompany, 
		CreditType,
		CreditNumber,
		LineNumberID,			
		IdentifierShortItem,
		UnitOfMeasure,
		CostCenter, 
		ReturnQuantity,
		TransactionDate
	FROM SOReturnLineList
	LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
		ON SOR1.DR$9INID = @COINID
		AND SOR1.DR$9CNST = @COConstant
		AND SOR1.DRKY = CreditType 
	WHERE (@CORestric = '0' OR SOR1.DRKY IS NOT NULL)
	ORDER BY LineNumberID ASC
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteOrderInfo_BillTo'))
	BEGIN
		DROP  Procedure  [DBO].QTS_GetQuoteOrderInfo_BillTo
	END

GO

-- #desc						Profile Read Billing Information
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderInfo_Z.sql

-- #param @SCBillToNumber		AddressNumber
-- #param @ContactID			ContactID

CREATE Procedure [DBO].QTS_GetQuoteOrderInfo_BillTo
(
	@SCBillToNumber	FLOAT,
	@ContactID		FLOAT
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	SELECT 
		WW.WWMLNM AS MailingName,
		AL.ALADD1 AS AddressLine1, 
		AL.ALADD2 AS AddressLine2, 
		AL.ALADD3 AS AddressLine3,
		AL.ALADD4 AS AddressLine4,
		AL.ALCTY1 AS City,
		AL.ALADDS AS State,
		AL.ALADDZ AS ZipCode,
		AL.ALCTR  AS Country
	FROM 
		[SCDATA].F0101 AB			    -- Customer Master
	CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AB.ABAN8, @CurrentJulianDate) AL
	INNER JOIN [SCDATA].F0111 WW		--Contact Information
		ON WWAN8 = ABAN8
		AND WWIDLN = @ContactID
	WHERE 
		ABAN8 = @SCBillToNumber

RETURN 

SET QUOTED_IDENTIFIER OFF 

GO

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteOrderInfoShipments'))
	BEGIN
		DROP  Procedure  [DBO].QTS_GetQuoteOrderInfoShipments
	END
GO

-- #desc					Shipment read only info
-- #bl_class				N/A				
-- #db_dependencies			N/A
-- #db_references			QTS_GetQuoteOrderInfo_Z.sql

-- #param @OrderCompany		Company ID
-- #param @OrderType		Document Type
-- #param @@QuoteNumber		Quote Number
-- #param @OrderCompany		Order ShipTo Number

CREATE Procedure [DBO].QTS_GetQuoteOrderInfoShipments
(
	@OrderCompany			NVARCHAR(5),
	@OrderType				NVARCHAR(2),
	@QuoteNumber			FLOAT,
	@OrderShipToNumber		FLOAT
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	IF((SELECT COUNT(*) FROM [SCDATA].F4006
			WHERE OADOCO = @QuoteNumber
				AND OADCTO = @OrderType 
				AND OAKCOO = @OrderCompany  
				AND OAANTY = 2) > 0) 
	BEGIN
		UPDATE #TMP_ORDERDETAIL SET SCShipToNumber = @OrderShipToNumber
		SELECT DISTINCT
			@OrderShipToNumber	AS SCShipToNumber,
			DETAIL.ShipLineNumber AS ShipLineNumber,
			' '			AS NickName,
			A.OAMLNM AS MailingName,
			A.OAADD1 AS AddressLine1, 
			A.OAADD2 AS AddressLine2, 
			A.OAADD3 AS AddressLine3,
			A.OAADD4 AS AddressLine4,
			A.OACTY1 AS City,
			A.OAADDS AS State,
			A.OAADDZ AS ZipCode,
			A.OACTR AS Country,
			'Y' AS IsShipToOverride
		FROM [SCDATA].F4006 A 
		INNER JOIN #TMP_ORDERDETAIL DETAIL
			ON DETAIL.QuoteNumber = OADOCO
			AND DETAIL.OrderType = OADCTO
			AND DETAIL.OrderCompany = OAKCOO
		WHERE OADOCO = @QuoteNumber
			AND OADCTO = @OrderType 
			AND OAKCOO = @OrderCompany  
			AND OAANTY = 2 --SHIPTO TYPE
	END
	ELSE BEGIN --NO SHIPTO OVERRIDE GET SHIPTO INFORMATION FOR THE CONSUMER/CUSTOMER
		SELECT
			DETAIL.SCShipToNumber	AS SCShipToNumber,
			DETAIL.ShipLineNumber AS ShipLineNumber,
			S2.WWNICK AS Nickname,				-- Nick Name
			S2.WWMLNM AS MailingName,
			S3.ALADD1 AS AddressLine1, 
			S3.ALADD2 AS AddressLine2, 
			S3.ALADD3 AS AddressLine3,
			S3.ALADD4 AS AddressLine4,
			S3.ALCTY1 AS City,
			S3.ALADDS AS State,
			S3.ALADDZ AS ZipCode,
			S3.ALCTR AS Country,
			'N' AS IsShipToOverride
		FROM #TMP_ORDERDETAIL DETAIL
		INNER JOIN  [SCDATA].F0101					S1
			-- Address Book Join Who's Who (Contacts)
			ON S1.ABAN8 = DETAIL.SCShipToNumber
		INNER JOIN  [SCDATA].F0111					S2
			ON S2.WWAN8 = S1.ABAN8
			AND S2.WWIDLN = 0
			-- Address Book Join Address File
		CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(S1.ABAN8, @CurrentJulianDate) S3
			-- Address Book Join Customer Master	
		GROUP BY DETAIL.SCShipToNumber,DETAIL.ShipLineNumber,S2.WWNICK ,S2.WWMLNM,S3.ALADD1,S3.ALADD2,S3.ALADD3,S3.ALADD4,S3.ALCTY1,S3.ALADDS,S3.ALADDZ,S3.ALCTR
	END

RETURN 

SET QUOTED_IDENTIFIER OFF 

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type IN('FN', 'IF') AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteOrderStatusFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].QTS_GetQuoteOrderStatusFnc
	END

GO

-- #desc						Calculate Quote Status in Order Mode
--								Get a table with Quote Status
-- #bl_class					N/A	
-- #db_dependencies				N/A	
-- #db_references				QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteOrderInfo_Z, QTS_GetQuoteRecentList

-- #param @QuoteNumber			Quote Number
-- #param @QuoteType			Quote Type
-- #param @QuoteCompany			Quote Company
-- #param @QuoteStatus			Quote Acceptance Status

CREATE FUNCTION [DBO].QTS_GetQuoteOrderStatusFnc
(	
	@QuoteNumber		FLOAT,
	@QuoteType			NVARCHAR(2),
	@QuoteCompany		NVARCHAR(5),
	@QuoteStatus		NVARCHAR(3)
)
RETURNS TABLE 
AS
RETURN 
WITH CTE AS (

		SELECT 
			SDNXTR AS MINSTATUS
		FROM 
			[SCDATA].F4211 	/*Sales Order Lines*/
		WHERE 
			SDDOCO = @QuoteNumber AND SDDCTO = @QuoteType AND SDKCOO = @QuoteCompany 
		AND SDRLIT = '' AND (SDLTTR < '980' OR SDLTTR = '995') 
		
		UNION ALL
		
		SELECT 
			SDNXTR AS MINSTATUS
		FROM 
			[SCDATA].F42119 	/*History Sales Order Lines*/
		WHERE 
			SDDOCO = @QuoteNumber AND SDDCTO = @QuoteType AND SDKCOO = @QuoteCompany 
		AND SDRLIT = '' AND (SDLTTR < '980' OR SDLTTR = '995') 
	)
	SELECT
		CASE WHEN MIN(MINSTATUS) = @QuoteStatus THEN 'READYFORREVIEW'
		WHEN MIN(MINSTATUS) < @QuoteStatus THEN 'PENDING'
		WHEN MIN(MINSTATUS) > @QuoteStatus THEN 'COMPLETED' 
		ELSE 'CANCELLED' END AS SDNXTR
	FROM CTE 


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelFastButtonLang'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelFastButtonLang
	END

GO

-- #desc					Del Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	InstallationID
-- #param @LineNumberID		LineNumberID
-- #param @LangPref			LangPref


CREATE PROCEDURE [DBO].POS_DelFastButtonLang
	@InstallationID	NVARCHAR(6),
	@LineNumber		FLOAT,
	@LangPref		NVARCHAR(4)
AS
	DELETE FROM  
		[SCDATA].FQ67416L
	WHERE
		FB$9INID = @InstallationID
		AND FBLNID = @LineNumber
		AND (@LangPref IS NULL OR FBLNGP = @LangPref)

 


    
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelReceiptItemMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelReceiptItemMessage
	END
GO

-- #desc					POS_DelReceiptItemMessage
-- #bl_class				Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.
-- #param @MessageText      Message Text

CREATE PROCEDURE [DBO].POS_DelReceiptItemMessage
    @InstallationID NVARCHAR(3),
    @ItemNumber     FLOAT,
    @MessageID      NVARCHAR(50)
AS
	SET NOCOUNT ON

 DELETE
	FROM  [SCDATA].FQ674220
 WHERE (@InstallationID IS NULL OR MI$9INID = @InstallationID) AND
       (@ItemNumber IS NULL OR MIITM = @ItemNumber) AND
       (MI$9MID  = @MessageID) 




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawer'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetDrawer
	END

GO

-- #desc				Read drawer by register 
-- #bl_class			Premier.POS.Drawer.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @RegisterID	Register ID.
-- #param @DrawerNumber Drawer Number.

CREATE Procedure [DBO].POS_GetDrawer
	@RegisterID NVARCHAR(12) = null,
	@DrawerNumber FLOAT = null

AS

SET NOCOUNT ON

Select 
	DR$9REGID RegisterID,
	DR$9DRAW  DrawerNumber,
	DR$9DRST  Status,
	DR$9DRMUL AllowMultipleUsers,
	DREDBT    CurrentBatchNumber,
	DRURRF    UserReservedReference,
	DRURAB    UserReservedNumber,
	DRURAT    UserReservedAmount,
	DRURCD    UserReservedCode,
	DRURDT    UserReservedDate,
	DR$9AATR  CashDrawerLimit,
	DRPID     ProgramID,
	DRJOBN    WorkStationId,
	DRUSER    UserId,
	DRUPMJ    DateUpdated,
	DRUPMT    TimeUpdated

FROM
	[SCDATA].FQ674261
WHERE
	(@RegisterID IS NULL OR DR$9REGID = @RegisterID) and
	(@DrawerNumber IS NULL OR DR$9DRAW = @DrawerNumber)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetReceiptDetail'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetReceiptDetail
	END

GO

-- #desc					Get receipt detail
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			POS_GetReceipt

-- #param @InstallationID	Installation ID
-- #param @ReceiptID		Receipt ID
-- #param @RegisterID		Register ID

CREATE Procedure [DBO].POS_GetReceiptDetail
	@InstallationID NVARCHAR(3),
	@RegisterID NVARCHAR(12),
	@ReceiptID NVARCHAR(10) 
	
AS
	SET NOCOUNT ON
	
	BEGIN
	declare 
		@COUNT INT
	
--CREATE TEMP TABLE TO INSERT THE SELECT RESULTS
CREATE TABLE #REPORTTEMP (
	ReceiptID NVARCHAR(10) collate DATABASE_DEFAULT,
	InstallationID NVARCHAR(3) collate DATABASE_DEFAULT,
	RegisterID 	NVARCHAR(12) collate DATABASE_DEFAULT,
	XmlBody 	ntext collate DATABASE_DEFAULT
	)

BEGIN
	INSERT INTO #REPORTTEMP
SELECT 
	A.RR$9RCID ReceiptID, 
	A.RR$9INID InstallationID, 
	A.RR$9REGID RegisterID, 
	A.RR$9XML XmlBody
FROM 
	[SCDATA].FQ674213 A
WHERE 
	(@ReceiptID IS NULL OR A.RR$9RCID = @ReceiptID) AND 
	(A.RR$9INID = @InstallationID) AND 
	(@RegisterID IS NULL OR A.RR$9REGID = @RegisterID)
END

	SELECT @COUNT = COUNT(*) FROM #REPORTTEMP
--RECIEPTID AND INSTALLATIONID SELECT
if(@COUNT = 0 )
BEGIN 
	INSERT INTO #REPORTTEMP
SELECT 
	A.RR$9RCID ReceiptID, 
	A.RR$9INID InstallationID, 
	A.RR$9REGID RegisterID, 
	A.RR$9XML XmlBody
FROM 
	[SCDATA].FQ674213 A
WHERE 
	(@ReceiptID IS NULL OR A.RR$9RCID = @ReceiptID) AND 
	(A.RR$9INID = @InstallationID) 
END

	SELECT @COUNT = COUNT(*) FROM #REPORTTEMP
--BASE INSTALLATION SELECT
if(@COUNT = 0 )
BEGIN
	INSERT INTO #REPORTTEMP
SELECT 
	A.RR$9RCID ReceiptID, 
	A.RR$9INID InstallationID, 
	A.RR$9REGID RegisterID, 
	A.RR$9XML XmlBody
FROM 
	[SCDATA].FQ674213 A
WHERE 
	(@ReceiptID IS NULL OR A.RR$9RCID = @ReceiptID) AND 
	(A.RR$9INID = '***') 
END

	SELECT * FROM #REPORTTEMP

	DROP TABLE #REPORTTEMP

END


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawerPayment'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetDrawerPayment
	END

GO

-- #desc						Reads Register Payment
-- #bl_class					Premier.POS.RegisterPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch
-- #param @PaymentInstrument	Payment Instrument

CREATE Procedure [DBO].POS_GetDrawerPayment
	@InstallationID		NVARCHAR(3),
	@RegisterID			NVARCHAR(12),
	@DrawerNumber		FLOAT,
	@CurrentBatchNumber NVARCHAR(15),
	@PaymentInstrument	NVARCHAR(1) = null	
AS
	SET NOCOUNT ON
	
	DECLARE @CC_DETAILCONSTANT NVARCHAR(1)
	--Gets the Credit Card Detail on Close Drawer Report Constant
	EXEC [DBO].CMM_GetConstantValue 'CC_DETPAY', @InstallationID, @CC_DETAILCONSTANT OUT
	
	DECLARE @PAYMENTSCOUNT FLOAT;
	
	SELECT 
		A.RC$9REGID,
		A.RC$9DRAW,
		A.RCEDBT,
		C.DPRYIN,
		C.DPCARD,
		C.DPCRCD,
		0    AS OpeningBalance,
		0    AS LeftInDrawer,
		0    AS TotalsPerCashier,
		C.DP$9AATR
	INTO #TMP_DRAWERPAYMENT
	FROM 
		[SCDATA].FQ67427 A 
	INNER JOIN [SCDATA].FQ674281 C
		ON C.DPEDBT = A.RCEDBT AND
		C.DP$9REGID = A.RC$9REGID AND
		C.DP$9DRAW = A.RC$9DRAW
	WHERE 
		A.RC$9REGID = @RegisterID AND
		A.RC$9DRAW = @DrawerNumber AND 
		A.RCEDBT = @CurrentBatchNumber
	UNION ALL
	SELECT  
		Y.DC$9REGID,
		Y.DC$9DRAW,
		Y.DCEDBT,
		Y.DCRYIN,
		'',
		Y.DCCRCD,
		Y.DC$9AAOB,
		Y.DC$9AALF,
		Y.DC$9AACS,
		Y.DC$9AATR
	FROM 
		[SCDATA].FQ67428 Y
	WHERE 
		Y.DC$9REGID = @RegisterID AND
		Y.DC$9DRAW = @DrawerNumber AND
		Y.DCEDBT = @CurrentBatchNumber
	UNION ALL
	SELECT  
		Z.DR$9REGID,
		Z.DR$9DRAW,
		Z.DREDBT,
		Z.DRRYIN,
		'',
		Z.DRCRCD,
		0,
		0,
		0,
		Z.DR$9AATR
	FROM 
		[SCDATA].FQ674282 Z
	WHERE 
		Z.DR$9REGID = @RegisterID  AND
		Z.DR$9DRAW = @DrawerNumber AND 
		Z.DREDBT = @CurrentBatchNumber
	
IF(@CC_DETAILCONSTANT='1')
	BEGIN
		SELECT 
			  RC$9REGID   AS      RegisterID,
			  RC$9DRAW    AS      DrawerNumber,
			  RCEDBT      AS      CurrentBatchNumber,
			  DPRYIN      AS      PaymentInstrument,
			  DPCARD      AS      CreditCardType,
			  DPCRCD      AS      CurrecyCode,
			  [DBO].CMM_GetUserDefinedCodeFnc('00','PY',DPRYIN,'*') AS PaymentInstrumentDesc,
			  SUM(OpeningBalance)		AS OpeningBalance,
			  SUM(LeftInDrawer)			AS LeftInDrawer,
			  SUM(TotalsPerCashier)		AS TotalsPerCashier,
			  (ISNULL(SUM(DP$9AATR),0) )AS SumOfTransactions,
			  (ISNULL(SUM(TotalsPerCashier),0) - (ISNULL(SUM(DP$9AATR), 0) + ISNULL(SUM(OpeningBalance),0))) AS PendingDifference,
			  (ISNULL(SUM(DP$9AATR),0) + ISNULL(SUM(OpeningBalance),0)) AS TotalsByInstrument
		FROM #TMP_DRAWERPAYMENT
		GROUP BY 
			  RC$9REGID,
			  RC$9DRAW,
			  RCEDBT,
			  DPRYIN,
			  DPCARD,
			  DPCRCD
		ORDER BY DPRYIN DESC
	END
	ELSE
	BEGIN
		SELECT 
			  RC$9REGID   AS      RegisterID,
			  RC$9DRAW    AS      DrawerNumber,
			  RCEDBT      AS      CurrentBatchNumber,
			  DPRYIN      AS      PaymentInstrument,
			  ''	      AS      CreditCardType,
			  DPCRCD      AS      CurrecyCode,
			  [DBO].CMM_GetUserDefinedCodeFnc('00','PY',DPRYIN,'*') AS PaymentInstrumentDesc,
			  SUM(OpeningBalance)		AS OpeningBalance,
			  SUM(LeftInDrawer)			AS LeftInDrawer,
			  SUM(TotalsPerCashier)		AS TotalsPerCashier,
			  (ISNULL(SUM(DP$9AATR),0) )AS SumOfTransactions,
			  (ISNULL(SUM(TotalsPerCashier),0) - (ISNULL(SUM(DP$9AATR), 0) + ISNULL(SUM(OpeningBalance),0))) AS PendingDifference,
			  (ISNULL(SUM(DP$9AATR),0) + ISNULL(SUM(OpeningBalance),0)) AS TotalsByInstrument
		FROM #TMP_DRAWERPAYMENT
		GROUP BY 
			  RC$9REGID,
			  RC$9DRAW,
			  RCEDBT,
			  DPRYIN,
			  DPCRCD
		ORDER BY DPRYIN DESC
	END
	
	DROP TABLE #TMP_DRAWERPAYMENT
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetFastButtonLangs'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetFastButtonLangs
	END

GO

-- #desc					Read Fast Button Langs
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	InstallationID
-- #param @LineNumberID		LineNumberID
-- #param @LangPref			LangPref
-- #param @Description1		Description1 
-- #param @Description2		Description2

CREATE PROCEDURE [DBO].POS_GetFastButtonLangs
	@InstallationID	NVARCHAR(6),
	@LineNumber		FLOAT,
	@LangPref		NVARCHAR(4)

AS


     SELECT
			FB$9INID	AS InstallationID,
			FBLNID		AS LineNumber, 
			FBLNGP		AS LanguagePref,
			[DBO].CMM_GetUserDefinedCodeFnc('01','LP',FBLNGP,@LangPref) AS LanguageDescE1,
			FBDSC1		AS Description1,
			FBDSC2		AS Description2
		  FROM  
			[SCDATA].FQ67416L
		  WHERE
				FB$9INID = @InstallationID
				AND FBLNID   = @LineNumber	
		  ORDER BY 
				FB$9INID, FBLNID, FBLNGP
	
				
      
      
  
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelGnrlAnnounceAssign'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelGnrlAnnounceAssign
	END

GO

-- #desc						Delete a General Announcement Assignments
-- #bl_class					Premier.Common.GeneralAnnouncementAssignment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param UniqueKeyID			Unique key ID	


CREATE PROCEDURE [DBO].CMM_DelGnrlAnnounceAssign
(
	@AnnouncementID	FLOAT,
	@UniqueKeyID	FLOAT
)
AS
	DELETE FROM	[SCDATA].FQ67105A
		WHERE MA$9NID = @AnnouncementID
		 AND (@UniqueKeyID IS NULL OR MAUKID = @UniqueKeyID);



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type IN('FN', 'IF') AND id = OBJECT_ID(N'[DBO].COM_GetSOReturnedQuantityFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].COM_GetSOReturnedQuantityFnc
	END
GO

-- #desc					Get the Sales Order Quantity Available per Line
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @CORestric		Credit Order Restrict

CREATE FUNCTION [DBO].COM_GetSOReturnedQuantityFnc
(	
	@InstallationID		NVARCHAR(3),
	@CORestric			NVARCHAR(256)
)
RETURNS TABLE 
AS
RETURN 
(

	WITH CTE AS (
		SELECT 
			SDSOQS,
			SDDCTO,
			SDOORN,
			SDOGNO,
			SDOCTO,
			SDOKCO
		FROM [SCDATA].F4211 A	
		WHERE	
			(A.SDLTTR < '980' OR A.SDLTTR = '995')
		UNION ALL
		SELECT 
			SDSOQS,
			SDDCTO,
			SDOORN,
			SDOGNO,
			SDOCTO,
			SDOKCO
		FROM [SCDATA].F42119 A
		WHERE	
			(A.SDLTTR < '980' OR A.SDLTTR = '995') 
	),
	CTE2 AS (
		SELECT 
			SUM(SDSOQS) AS ReturnQuantity,
			SDDCTO,SDOORN,SDOGNO,SDOCTO,SDOKCO
		FROM CTE A
		GROUP BY SDOORN, SDOGNO, SDOCTO, SDOKCO, SDDCTO
	)

	SELECT ReturnQuantity,SDOORN,SDOGNO,SDOCTO,SDOKCO
	FROM 
		CTE2 A
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON DR.DRKY = A.SDDCTO
				AND DR.DR$9INID = @InstallationID 
				AND DR.DR$9CNST = 'CO_RESTRIC'
	WHERE
		(@CORestric = '0' OR DR.DRKY IS NOT NULL)
)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'IF' AND id = OBJECT_ID(N'[DBO].COM_GetRecentDocExtendedFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].COM_GetRecentDocExtendedFnc
	END

GO

-- #desc						Get a table with Documents using Extended table, filter by Company and Address Number, 
--								also validate Document Restrict and Company Restrict
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				COM_GetReturnOrderRecentList

-- #param @Company				Company
-- #param @OrderINID			Setting Installation
-- #param @OrderConstant		Setting Name
-- #param @ConstantInstallation	Company Installation
-- #param @CompanyConstant		Company Setting
-- #param @OrderRestric			Order Restrict
-- #param @AddressNumber		Address Number

CREATE FUNCTION [DBO].COM_GetRecentDocExtendedFnc
(	
	@Company NVARCHAR(5),
	@OrderINID NVARCHAR(3),
	@OrderConstant NVARCHAR(10),
	@ConstantInstallation NVARCHAR(3),
	@CompanyConstant NVARCHAR(256),
	@OrderRestric NVARCHAR(256),
	@AddressNumber FLOAT
)
RETURNS TABLE 
AS
RETURN 		

WITH CTE AS
	(
		SELECT 
			A.SHDOCO, 
			A.SHDCTO, 
			A.SHKCOO,			
			A.SHTRDJ,
			A.SHVR01,
			A.SHCRCD,
			A.SHCRRM,
			A.SHHOLD,
			A.SHOTOT,
			A.SHFAP,
			A.SHCO
		FROM [SCDATA].F4201 A			 --Sales Order Header
		INNER JOIN [SCDATA].FQ674201 B -- Extended Sales Order Header */
				ON  B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO
				AND B.SH$9AN8 = @AddressNumber
				AND B.SH$9TYP = 1 
		WHERE
				(@Company = '*' OR A.SHCO = @Company)	
		UNION ALL
		SELECT 
			A.SHDOCO, 
			A.SHDCTO, 
			A.SHKCOO,			
			A.SHTRDJ,
			A.SHVR01,
			A.SHCRCD,
			A.SHCRRM,
			A.SHHOLD,
			A.SHOTOT,
			A.SHFAP,
			SHCO
		FROM [SCDATA].F42019 A			 --Sales Order Header
		INNER JOIN [SCDATA].FQ674201 B -- Extended Sales Order Header */
				ON  B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO
				AND B.SH$9AN8 = @AddressNumber
				AND B.SH$9TYP = 1 
		WHERE
				(@Company = '*' OR A.SHCO = @Company)	

	)
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO,			
		A.SHTRDJ,
		A.SHVR01,
		A.SHCRCD,
		A.SHCRRM,
		A.SHHOLD,
		A.SHOTOT,
		A.SHFAP,
		ROW_NUMBER() OVER (ORDER BY SHTRDJ DESC, SHDOCO DESC) AS RNUM
	FROM CTE A
	LEFT OUTER JOIN [SCDATA].FQ679912 CR
		ON  CR.CICO = A.SHCO
		AND CR.CI$9INID = @ConstantInstallation
	LEFT OUTER JOIN [SCDATA].FQ67008 DR
		ON  DR.DRKY = A.SHDCTO
		AND DR.DR$9INID = @OrderINID 
		AND DR.DR$9CNST = @OrderConstant
	WHERE
		(@CompanyConstant='A' OR CR.CICO IS NOT NULL)
	AND (@OrderRestric = '0' OR DR.DRKY IS NOT NULL)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'IF' AND id = OBJECT_ID(N'[DBO].COM_GetRecentDocsFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].COM_GetRecentDocsFnc
	END

GO

-- #desc						Get a table with Documents filtered by Company and Address Number, 
--								also validate Document Restrict and Company Restrict
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				COM_GetReturnOrderRecentList, QTS_GetQuoteRecentList

-- #param @Company				Company
-- #param @OrderINID			Setting Installation
-- #param @OrderConstant		Setting Name
-- #param @ConstantInstallation	Company Installation
-- #param @CompanyConstant		Company Setting
-- #param @OrderRestric			Order Restrict
-- #param @AddressNumber		Address Number

CREATE FUNCTION [DBO].COM_GetRecentDocsFnc
(	
	@Company NVARCHAR(5),
	@OrderINID NVARCHAR(3),
	@OrderConstant NVARCHAR(10),
	@ConstantInstallation NVARCHAR(3),
	@CompanyConstant NVARCHAR(1),
	@OrderRestric NVARCHAR(1),
	@AddressNumber FLOAT
)
RETURNS TABLE 
AS
RETURN 		

WITH CTE AS
	(
		SELECT 
			A.SHDOCO, 
			A.SHDCTO, 
			A.SHKCOO,			
			A.SHTRDJ,
			A.SHVR01,
			A.SHCRCD,
			A.SHCRRM,
			A.SHHOLD,
			A.SHOTOT,
			A.SHFAP,
			A.SHCO
		FROM [SCDATA].F4201 A			/*Sales Order Header*/
		WHERE
			A.SHAN8 = @AddressNumber
		AND (@Company = '*' OR A.SHCO = @Company)	
		UNION ALL
		SELECT 
			A.SHDOCO, 
			A.SHDCTO, 
			A.SHKCOO,			
			A.SHTRDJ,
			A.SHVR01,
			A.SHCRCD,
			A.SHCRRM,
			A.SHHOLD,
			A.SHOTOT,
			A.SHFAP,
			A.SHCO
		FROM [SCDATA].F42019 A			/*Sales Order Header*/
		WHERE
			A.SHAN8 = @AddressNumber
		AND (@Company = '*' OR A.SHCO = @Company)	
	)
	SELECT 				
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO,			
		A.SHTRDJ,
		A.SHVR01,
		A.SHCRCD,
		A.SHCRRM,
		A.SHHOLD, 
		A.SHOTOT,
		A.SHFAP,
		ROW_NUMBER() OVER (ORDER BY SHTRDJ DESC, SHDOCO DESC) AS RNUM
	FROM CTE A
	LEFT OUTER JOIN [SCDATA].FQ679912 CR
		ON CR.CICO = SHCO
		AND CR.CI$9INID = @ConstantInstallation
	LEFT OUTER JOIN [SCDATA].FQ67008 DR
		ON  DR.DR$9INID = @OrderINID 
		AND DR.DR$9CNST = @OrderConstant
		AND DR.DRKY = SHDCTO
	WHERE
			(@CompanyConstant='A' OR CR.CICO IS NOT NULL)
	AND   (@OrderRestric = '0' OR DR.DRKY IS NOT NULL)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcUserAnnounceClearHist'))
	BEGIN
		DROP  Procedure  [DBO].CMM_ExcUserAnnounceClearHist
	END
GO

-- #desc						Delete Announcement History
-- #bl_class					Premier.Common.UserAnnouncementHistory.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AnnouncementID		Announcement ID
-- #param @AnnouncementType		Announcement Type AGen | ATag
-- #param @WebAccountID			Web Account ID

CREATE PROCEDURE [DBO].CMM_ExcUserAnnounceClearHist
(
	@AnnouncementID		FLOAT,
	@AnnouncementType	NVARCHAR(4),
	@WebAccountID	    FLOAT
)
AS
	DELETE FROM
		[SCDATA].FQ67105H
	WHERE
		MH$9NID  = @AnnouncementID AND 
		MH$9APFL = @AnnouncementType AND
		(@WebAccountID IS NULL  OR MH$9WAN8 = @WebAccountID) 
		
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddAllCompaniesByInst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddAllCompaniesByInst
	END

GO

-- #desc							Relate All Companies
-- #bl_class						Premier.Common.CompanyList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID
-- #param @SalesQtyPriorMonth01		Sales Qty Prior Month 01
-- #param @SalesQtyPriorMonth02		Sales Qty Prior Month 02
-- #param @Amount					Amount
-- #param @AmountAa1				Amount Aa1
-- #param @ADPDate01				ADP Date 01
-- #param @ADPDate02				ADP Date 02
-- #param @SalesReportingCode1		Sales Reporting Code 1
-- #param @SalesReportingCode2		Sales Reporting Code 2
-- #param @SalesReportingCode3		Sales Reporting Code 3
-- #param @SalesReportingCode4		Sales Reporting Code 4
-- #param @SalesReportingCode5		Sales Reporting Code 5
-- #param @SalesReportingCode6		Sales Reporting Code 6
-- #param @SalesReportingCode7		Sales Reporting Code 7
-- #param @SalesReportingCode8		Sales Reporting Code 8
-- #param @SalesReportingCode9		Sales Reporting Code 9
-- #param @SalesReportingCode10		Sales Reporting Code 10
-- #param @UserReservedNumber		User Reserved Number
-- #param @UserReservedAmount		User Reserved Amount
-- #param @UserReservedCode			User Reserved Code
-- #param @UserReservedDate			User Reserved Date
-- #param @UserReservedReference	User Reserved Reference
-- #param @UserID					User ID
-- #param @ProgramID				Program ID
-- #param @DateUpdated				Date Updated 
-- #param @TimeLastUpdated			Time Last Updated
-- #param @WorkStationID			WorkStation ID

CREATE PROCEDURE [DBO].CMM_AddAllCompaniesByInst
(
    @InstallationID				NVARCHAR(3),
	@SalesQtyPriorMonth01		FLOAT,
	@SalesQtyPriorMonth02		FLOAT,
	@Amount						FLOAT,
	@AmountAa1					FLOAT,
	@ADPDate01						NUMERIC,
	@ADPDate02						NUMERIC,
	@SalesReportingCode1		NVARCHAR(3),
	@SalesReportingCode2		NVARCHAR(3),
	@SalesReportingCode3		NVARCHAR(3),
	@SalesReportingCode4		NVARCHAR(3),
	@SalesReportingCode5		NVARCHAR(3),
	@SalesReportingCode6		NVARCHAR(6),
	@SalesReportingCode7		NVARCHAR(6),
	@SalesReportingCode8		NVARCHAR(6),
	@SalesReportingCode9		NVARCHAR(6),
	@SalesReportingCode10		NVARCHAR(6),
	@UserReservedNumber			FLOAT, 
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),	
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC,
	@WorkStationID				NVARCHAR(10)
)
AS

	DELETE FROM
		[SCDATA].FQ679912 
	WHERE 
		CI$9INID = @InstallationID

	INSERT INTO [SCDATA].FQ679912
	(	
		CI$9INID,		
		CICO,		
		CIDSC1,
		CIDSC2,
		CISQ01,
		CISQ02,
		CIAA,
		CIAA1,
		CIDATE01,
		CIDATE02,
		CISRP1,
		CISRP2,
		CISRP3,
		CISRP4,
		CISRP5,
		CISRP6,
		CISRP7,
		CISRP8,
		CISRP9,
		CISRP0,
		CIURAB,
		CIURAT,
		CIURCD,
		CIURDT,
		CIURRF,
		CIUSER,   
		CIPID,		
		CIUPMJ,
        CIUPMT,
		CIJOBN             
	)
	SELECT	
		@InstallationID,
		CCCO,					--Company ID
		CCNAME,					--Description 1
		'',						--Description 2
		@SalesQtyPriorMonth01,
		@SalesQtyPriorMonth02,
		@Amount,
		@AmountAa1,
		@ADPDate01,
		@ADPDate02,
		@SalesReportingCode1,
		@SalesReportingCode2,
		@SalesReportingCode3,
		@SalesReportingCode4,
		@SalesReportingCode5,
		@SalesReportingCode6,
		@SalesReportingCode7,
		@SalesReportingCode8,
		@SalesReportingCode9,
		@SalesReportingCode10,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedReference,
		@UserID,
		@ProgramID,		
		@DateUpdated,
		@TimeLastUpdated,
		@WorkStationID			
	FROM	
		[SCDATA].F0010

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddAllDocRestric'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddAllDocRestric
	END

GO

-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @Constant			Constant Id
-- #param @ProductCode		Product code
-- #param @UserDefinedCode	User define code 
-- #param @UserDefinedKey	UDC Key

CREATE PROCEDURE [DBO].CMM_AddAllDocRestric
(
    @InstallationID				NVARCHAR(3),
    @ConstantID					NVARCHAR(10),
    @ProductCode				NVARCHAR(4),
    @UserDefinedCode			NVARCHAR(2),
    @UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedAmount			FLOAT, 
	@UserReservedNumber			FLOAT, 
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC
)
AS
	SET NOCOUNT ON

    DECLARE	@CODELENGTH INTEGER;
	SET @CODELENGTH = 0 ; 
	SET @CODELENGTH = ( SELECT DTCDL FROM [SCCTL].F0004 
						WHERE DTSY = @ProductCode AND DTRT = @UserDefinedCode);
	
	CREATE TABLE #TEMP_TABLE
	(
		DR$9INID	NVARCHAR(3) collate DATABASE_DEFAULT,		-- Installation Id
		DR$9CNST	NVARCHAR(10) collate DATABASE_DEFAULT,	-- Constant ID
		DRSY		NVARCHAR(4) collate DATABASE_DEFAULT,		-- Product Code
		DRRT		NVARCHAR(2) collate DATABASE_DEFAULT,		-- User defined Code  
		DRKY		NVARCHAR(2) collate DATABASE_DEFAULT,
		DRURRF		NVARCHAR(15) collate DATABASE_DEFAULT
	)
	
	INSERT INTO #TEMP_TABLE 
	(
		DR$9INID,
		DR$9CNST,
		DRSY,
		DRRT,
		DRKY,
		DRURRF
	) 
	SELECT 
		DR$9INID,
		DR$9CNST,
		DRSY,
		DRRT,
		DRKY,
		DRURRF		
		FROM	[SCDATA].FQ67008 
		WHERE	DR$9INID = @InstallationID
		AND		DR$9CNST = @ConstantID
		AND		DRSY	= @ProductCode
		AND		DRRT = @UserDefinedCode
		AND		DRURRF = 'Y';
	
	DELETE FROM [SCDATA].FQ67008 WHERE			DR$9INID = @InstallationID
										 AND    DR$9CNST = @ConstantID
										 AND	DRSY	 = @ProductCode
										 AND    DRRT     = @UserDefinedCode;
	INSERT INTO [SCDATA].FQ67008
	(	
		DR$9INID,		-- Installation Id
		DR$9CNST,		-- Constant ID
		DRSY,			-- Product Code
		DRRT,			-- User defined Code  
		DRKY,			-- User defined Key 
		DRURCD,   
		DRURDT,
		DRURAT,  
		DRURAB, 
		DRURRF,  
		DRUSER,   
		DRPID,
		DRJOBN,
		DRUPMJ,
        DRUPMT             
	)
	SELECT	
			@InstallationID,
			@ConstantID,
			@ProductCode,
			@UserDefinedCode,
			SUBSTRING (A.DRKY,10-@CODELENGTH+1,@CODELENGTH) AS UserDefinedKey,
			@UserReservedCode,
			@UserReservedDate,
			@UserReservedAmount,
			@UserReservedNumber,
			@UserReservedReference,
			@UserID,
			@ProgramID,
			@WorkStationID,
			@DateUpdated,
			@TimeLastUpdated
			
			FROM	[SCCTL].F0005 A
			WHERE	A.DRSY = @ProductCode
			AND	A.DRRT = @UserDefinedCode
			
			ORDER BY DRKY;
			
	UPDATE [SCDATA].FQ67008
	SET 
		DRURRF = 'Y'
	FROM 
		#TEMP_TABLE T, [SCDATA].FQ67008 F 				  
	WHERE  
		F.DR$9INID = T.DR$9INID
		AND    F.DR$9CNST = T.DR$9CNST
		AND	   F.DRSY	 = T.DRSY
		AND    F.DRRT     = T.DRRT
		AND	   F.DRKY = T.DRKY
		AND	   T.DRURRF = 'Y';	
	
	DROP TABLE #TEMP_TABLE
			
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddAnnounceInstallation'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddAnnounceInstallation
	END
GO

-- #desc					Add Announcement Installation relation.
-- #bl_class				Premier.Common.AnnouncementStore.cs

-- #param @AnnouncementID	Announcement ID
-- #param @InstallationID	Installation ID
-- #param @AnnouncementType	Announcement Type   AGen | ATag

CREATE PROCEDURE [DBO].CMM_AddAnnounceInstallation
(
    @AnnouncementID				FLOAT,
    @InstallationID				NVARCHAR(3),
	@AnnouncementType			NVARCHAR(4),
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC, 
	@UserReservedAmount			FLOAT,
	@UserReservedNumber			FLOAT,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeOfDay					NUMERIC
)
AS
	INSERT INTO [SCDATA].FQ67105I
	(
		MI$9NID,
		MI$9INID,
		MI$9APFL,
		MIURCD,
		MIURDT,
		MIURAT,
		MIURAB,
		MIURRF,
		MIUSER,
		MIPID,
		MIJOBN,
		MIUPMJ,
		MITDAY
	)
	VALUES
	(
		@AnnouncementID,
		@InstallationID,
		@AnnouncementType,
		@UserReservedCode,
		@UserReservedDate, 
		@UserReservedAmount,
		@UserReservedNumber,
		@UserReservedReference,
		@UserID,
		@ProgramID,
		@WorkStationID,
		@DateUpdated,
		@TimeOfDay
	)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddBranchPlantByInst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddBranchPlantByInst
	END

GO

-- #desc					Add Branch Plants to a Instalation.
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @BranchPlant		Branch Plant (MCU)

CREATE PROCEDURE [DBO].CMM_AddBranchPlantByInst
(
    @InstallationID NVARCHAR(3),
	@BranchPlant	NVARCHAR(12)
)
AS
	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ679910
	(
		BI$9INID,		-- Installation Id
		BIMCU,			-- Branch Plant
		BILCNF          -- AllowPickup
	)
	VALUES
	(
		@InstallationID,
		@BranchPlant,
		'N'	
	) 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddCompanyByInst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddCompanyByInst
	END

GO

-- #desc							Relate Company
-- #bl_class						Premier.Common.CompanyList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID
-- #param @Company					Company
-- #param @Description1				Description 1
-- #param @Description2				Description 2
-- #param @SalesQtyPriorMonth01		Sales Qty Prior Month 01
-- #param @SalesQtyPriorMonth02		Sales Qty Prior Month 02
-- #param @Amount					Amount
-- #param @AmountAa1				Amount Aa1
-- #param @ADPDate01				ADP Date 01
-- #param @ADPDate02				ADP Date 02
-- #param @SalesReportingCode1		Sales Reporting Code 1
-- #param @SalesReportingCode2		Sales Reporting Code 2
-- #param @SalesReportingCode3		Sales Reporting Code 3
-- #param @SalesReportingCode4		Sales Reporting Code 4
-- #param @SalesReportingCode5		Sales Reporting Code 5
-- #param @SalesReportingCode6		Sales Reporting Code 6
-- #param @SalesReportingCode7		Sales Reporting Code 7
-- #param @SalesReportingCode8		Sales Reporting Code 8
-- #param @SalesReportingCode9		Sales Reporting Code 9
-- #param @SalesReportingCode10		Sales Reporting Code 10
-- #param @UserReservedNumber		User Reserved Number
-- #param @UserReservedAmount		User Reserved Amount
-- #param @UserReservedCode			User Reserved Code
-- #param @UserReservedDate			User Reserved Date
-- #param @UserReservedReference	User Reserved Reference
-- #param @UserID					User ID
-- #param @ProgramID				Program ID
-- #param @DateUpdated				Date Updated 
-- #param @TimeLastUpdated			Time Last Updated
-- #param @WorkStationID			WorkStation ID

CREATE PROCEDURE [DBO].CMM_AddCompanyByInst
(
    @InstallationID				NVARCHAR(3),
    @Company					NVARCHAR(5),
	@Description1				NVARCHAR(30),
	@Description2				NVARCHAR(30),
	@SalesQtyPriorMonth01		FLOAT,
	@SalesQtyPriorMonth02		FLOAT,
	@Amount						FLOAT,
	@AmountAa1					FLOAT,
	@ADPDate01						NUMERIC,
	@ADPDate02						NUMERIC,
	@SalesReportingCode1		NVARCHAR(3),
	@SalesReportingCode2		NVARCHAR(3),
	@SalesReportingCode3		NVARCHAR(3),
	@SalesReportingCode4		NVARCHAR(3),
	@SalesReportingCode5		NVARCHAR(3),
	@SalesReportingCode6		NVARCHAR(6),
	@SalesReportingCode7		NVARCHAR(6),
	@SalesReportingCode8		NVARCHAR(6),
	@SalesReportingCode9		NVARCHAR(6),
	@SalesReportingCode10		NVARCHAR(6),
	@UserReservedNumber			FLOAT, 
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),	
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC,
	@WorkStationID				NVARCHAR(10)
)
AS

	INSERT INTO [SCDATA].FQ679912
	(
		CI$9INID,		
		CICO,		
		CIDSC1,
		CIDSC2,
		CISQ01,
		CISQ02,
		CIAA,
		CIAA1,
		CIDATE01,
		CIDATE02,
		CISRP1,
		CISRP2,
		CISRP3,
		CISRP4,
		CISRP5,
		CISRP6,
		CISRP7,
		CISRP8,
		CISRP9,
		CISRP0,
		CIURAB,
		CIURAT,
		CIURCD,
		CIURDT,
		CIURRF,
		CIUSER,   
		CIPID,		
		CIUPMJ,
        CIUPMT,
		CIJOBN    
	)
	VALUES
	(
		@InstallationID,
		@Company,
		@Description1,
		@Description2,
		@SalesQtyPriorMonth01,
		@SalesQtyPriorMonth02,
		@Amount,
		@AmountAa1,
		@ADPDate01,
		@ADPDate02,
		@SalesReportingCode1,
		@SalesReportingCode2,
		@SalesReportingCode3,
		@SalesReportingCode4,
		@SalesReportingCode5,
		@SalesReportingCode6,
		@SalesReportingCode7,
		@SalesReportingCode8,
		@SalesReportingCode9,
		@SalesReportingCode10,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedReference,
		@UserID,
		@ProgramID,		
		@DateUpdated,
		@TimeLastUpdated,
		@WorkStationID
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddConstant'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddConstant
	END

GO


-- #desc							Add contant detail
-- #bl_class						Premier.Common.Constant.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @Constant					Constant ID
-- #param @InstallationID			Installation ID
-- #param @ConstantValue			Constant Value

CREATE Procedure [DBO].CMM_AddConstant
	
	@Constant		NVARCHAR(10),
	@InstallationID NVARCHAR(3),
	@ConstantValue	NVARCHAR(256)
	
AS

	SET NOCOUNT ON
	
	INSERT INTO [SCDATA].FQ670004
	(
		CN$9INID,  CN$9CNST,  CN$9VAL
	)
	VALUES
	(
		@InstallationID, @Constant, @ConstantValue
	)


GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddCurrencyDetail'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddCurrencyDetail
	END

GO

-- #desc					Insert currency detail
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code
-- #param @Description		Currency Description
-- #param @Amount			Denomination Amount
-- #param @CoinBillFlag		IS Coin or Bill
-- #param @IsSpeedCash		mark as speed cash button

CREATE PROCEDURE [DBO].CMM_AddCurrencyDetail
(
    @CurrencyCode				NVARCHAR(3),
    @Amount						FLOAT,
    @Description				NVARCHAR(30),
    @CoinBillFlag				NVARCHAR(1),
    @IsSpeedCash				NVARCHAR(1),
    @SequenceID					FLOAT OUTPUT,
    @UserReservedNumber			FLOAT,
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC
)
AS
--Get max sequence number
 SET @SequenceID = (ISNULL((SELECT MAX (CILNID) FROM [SCDATA].FQ67012 WHERE CICRCD = @CurrencyCode),0) + 1)
 
	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ67012
	(
		CICRCD,
		CILNID,
		CIAEXP,
		CIDL01,
		CIBCF8,
		CISPEOW,
		CIURAB,
	    CIURAT,
	    CIURCD,
	    CIURDT,
	    CIURRF,
		CIUSER,   
		CIPID,
		CIJOBN,
		CIUPMJ,
		CIUPMT
	)
	VALUES
	(	
		@CurrencyCode,
		@SequenceID,
		@Amount,
		@Description,
		@CoinBillFlag,
		@IsSpeedCash,
		@UserReservedNumber,
	    @UserReservedAmount,
	    @UserReservedCode,
	    @UserReservedDate,
	    @UserReservedReference,
		@UserID,
		@ProgramID,
		@WorkStationID,
		@DateUpdated,
		@TimeLastUpdated
	)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddCurrencyHeader'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddCurrencyHeader
	END

GO

-- #desc					Insert currency header
-- #bl_class				Premier.Common.CurrencyHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code
-- #param @CurrencySymbol	Currency Symbol
-- #param @RoundingRule		Rounding Rule Name

CREATE PROCEDURE [DBO].CMM_AddCurrencyHeader
(
    @CurrencyCode				NVARCHAR(3),
    @CurrencySymbol				NVARCHAR(3),
    @RoundingRule				NVARCHAR(10),
    @UserReservedNumber			FLOAT,
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC
)
AS
	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ67011
	(
		CICRCD,
		CICC0,
		CIRULENAME,
		CIURAB,
	    CIURAT,
	    CIURCD,
	    CIURDT,
	    CIURRF,
		CIUSER,   
		CIPID,
		CIJOBN,
		CIUPMJ,
		CIUPMT
	)
	VALUES
	(	
		@CurrencyCode,
		@CurrencySymbol,
		@RoundingRule,
		@UserReservedNumber,
	    @UserReservedAmount,
	    @UserReservedCode,
	    @UserReservedDate,
	    @UserReservedReference,
		@UserID,
		@ProgramID,
		@WorkStationID,
		@DateUpdated,
		@TimeLastUpdated
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddDocRestric'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddDocRestric
	END

GO

-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @Constant			Constant Id
-- #param @ProductCode		Product code
-- #param @UserDefinedCode	User define code 
-- #param @UserDefinedKey	UDC Key

CREATE PROCEDURE [DBO].CMM_AddDocRestric
(
    @InstallationID				NVARCHAR(3),
    @ConstantID					NVARCHAR(10),
    @ProductCode				NVARCHAR(4),
    @UserDefinedCode			NVARCHAR(2),
    @UserDefinedKey				NVARCHAR(10),
    @UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedAmount			FLOAT, 
	@UserReservedNumber			FLOAT, 
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC
)
AS
	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ67008
	(
		DR$9INID,		-- Installation Id
		DR$9CNST,		-- Constant ID
		DRSY,			-- Product Code
		DRRT,			-- User defined Code  
		DRKY,			-- User defined Key 
		DRURCD,   
		DRURDT,
		DRURAT,  
		DRURAB, 
		DRURRF,  
		DRUSER,   
		DRPID,
		DRJOBN,
		DRUPMJ,
        DRUPMT    
	)
	VALUES
	(
		@InstallationID,
		@ConstantID,
		@ProductCode,
		@UserDefinedCode,
		@UserDefinedKey,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedAmount,
		@UserReservedNumber,
		@UserReservedReference,
		@UserID,
		@ProgramID,
		@WorkStationID,
		@DateUpdated,
		@TimeLastUpdated
	)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddGeneralAnnounceLang'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddGeneralAnnounceLang
	END

GO
-- #desc							Add GeneralAnnouncement Lang
-- #bl_class						Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @AnnouncementID			AnnouncementID
-- #param @DesignStatus				DesignStatus
-- #param @LangPref 				Language
-- #param @Title					Title
-- #param @HtmlContent				HtmlContent

CREATE PROCEDURE [DBO].CMM_AddGeneralAnnounceLang
(
	@AnnouncementID			FLOAT,
	@DesignStatus			FLOAT,
	@LangPref 				NVARCHAR(2),
	@Title					NVARCHAR(100),
	@HtmlContent			NTEXT
)
AS
	INSERT INTO [SCDATA].FQ67105L
	(
		ML$9NID,
		ML$9DS,
		MLLNGP,
		ML$9MTT,
		ML$9MSC
	)
	VALUES
	(
		@AnnouncementID,
		@DesignStatus,
		@LangPref,
		@Title,
		@HtmlContent
	)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddGeneralAnnouncement'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddGeneralAnnouncement
	END

GO

-- #desc						Add General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param @AnnouncementID		AnnouncementID.
-- #param @DesignStatus			DesignStatus.
-- #param @Priority				Priority.
-- #param @AccessLevel			AccessLevel.
-- #param @EffectiveDate		EffectiveDate.
-- #param @ExpirationDate		ExpirationDate.
-- #param @Title				Title.
-- #param @HtmlContent			HtmlContent.
-- #param @Url					Url.

CREATE PROCEDURE [DBO].CMM_AddGeneralAnnouncement 
(
		@AnnouncementID			FLOAT OUTPUT,	
		@DesignStatus			FLOAT,
		@Priority				FLOAT,
		@AccessLevel			FLOAT,
		@EffectiveDate			NUMERIC,
		@ExpirationDate			NUMERIC,
		@Title					NVARCHAR(100),
		@HtmlContent			NTEXT,
		@Url					NVARCHAR(254),
		@UserReservedCode		NVARCHAR(2),
		@UserReservedDate		NUMERIC, 
		@UserReservedAmount		FLOAT,
		@UserReservedNumber		FLOAT,
		@UserReservedReference	NVARCHAR(15),
		@UserID					NVARCHAR(10),
		@ProgramID				NVARCHAR(10),
		@WorkStationID			NVARCHAR(10),
		@DateUpdated			NUMERIC,
		@TimeOfDay				NUMERIC
)
AS
	IF (@AnnouncementID IS NULL OR @AnnouncementID = 0) BEGIN
		SELECT @AnnouncementID = ISNULL(MAX(MS$9NID), 0) + 1 
		FROM [SCDATA].FQ67105
	END

	INSERT INTO [SCDATA].FQ67105
    (
        MS$9NID
       ,MS$9DS
       ,MS$9PRI
       ,MS$9MST
       ,MSEFFF
       ,MSEFFT
       ,MS$9MTT
       ,MS$9MSC
       ,MS$9MLK
       ,MSURCD
       ,MSURDT
       ,MSURAT
       ,MSURAB
       ,MSURRF
       ,MSUSER
       ,MSPID
       ,MSJOBN
	   ,MSUPMJ
       ,MSTDAY
    )
    VALUES
    (	
        @AnnouncementID,
		@DesignStatus,
		@Priority,
		@AccessLevel,
		@EffectiveDate,
		@ExpirationDate,
		@Title,
		@HtmlContent,
		@Url,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedAmount,
		@UserReservedNumber,
		@UserReservedReference,
		@UserId,
		@ProgramId,
		@WorkStationId,
		@DateUpdated,
		@TimeOfDay
    )
		
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddGnrlAnnounceAssign'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddGnrlAnnounceAssign
	END

GO

-- #desc							Add a General Announcement Assignments
-- #bl_class						Premier.Common.GeneralAnnouncementAssignment.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @AnnouncementID			Announcement ID
-- #param @UniqueKeyID				Unique ID	
-- #param @AssignmentType			Assignment Type
-- #param @WebAccountID				Web Account ID
-- #param @AddressNumber			Address Number
-- #param @AddressBookType			Address Book Type
-- #param @DataItem					Data Item
-- #param @UserDefinedKey			User Defined Key

-- #param @UserReservedCode			UserReservedCode
-- #param @UserReservedDate			UserReservedDate
-- #param @UserReservedAmount		UserReservedAmount
-- #param @UserReservedNumber		Web Account ID
-- #param @UserReservedReference	Address Number
-- #param @UserID					Address Book Type
-- #param @ProgramID				Data Item
-- #param @WorkStationID			User Defined Key
-- #param @DateUpdated				Data Item
-- #param @TimeOfDay				User Defined Key

CREATE PROCEDURE [DBO].CMM_AddGnrlAnnounceAssign
(		
	@AnnouncementID			 FLOAT,
	@UniqueKeyID			 FLOAT OUT,
	@AssignmentType			 FLOAT,	
	@WebAccountID			 FLOAT,
	@AddressNumber			 FLOAT,
	@AddressBookType		 FLOAT,
	@DataItem				 NVARCHAR(10),
	@UserDefinedKey			 NVARCHAR(10),

	@UserReservedCode		 NVARCHAR(2),
	@UserReservedDate		 NUMERIC, 
	@UserReservedAmount		 FLOAT,
	@UserReservedNumber		 FLOAT,
	@UserReservedReference	 NVARCHAR(15),
	@UserID					 NVARCHAR(10),
	@ProgramID				 NVARCHAR(10),
	@WorkStationID			 NVARCHAR(10),
	@DateUpdated			 NUMERIC,
	@TimeOfDay				 NUMERIC
)
AS 
	SET @UniqueKeyID = (SELECT ISNULL(MAX(MAUKID), 0) + 1 FROM [SCDATA].FQ67105A WHERE MA$9NID = @AnnouncementID)

	INSERT INTO [SCDATA].FQ67105A
	(
		MA$9NID,
		MAUKID,
		MA$9ATYP,
		MA$9WAN8,
		MA$9AN8,
		MA$9TYP,
		MADTAI,
		MAKY,
		MAURCD,
		MAURDT,
		MAURAT,
		MAURAB,
		MAURRF,
		MAUSER,
		MAPID,
		MAJOBN,
		MAUPMJ,
		MATDAY
	)
	VALUES
	(
		@AnnouncementID,
		@UniqueKeyID,
		@AssignmentType,
		@WebAccountID,
		@AddressNumber,
		@AddressBookType,
		@DataItem,
		@UserDefinedKey,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedAmount,
		@UserReservedNumber,
		@UserReservedReference,
		@UserID,
		@ProgramID,
		@WorkStationID,
		@DateUpdated,
		@TimeOfDay
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddInstallation'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddInstallation
	END

GO

-- #desc							Add an Installation.
-- #bl_class						Premier.Common.Store.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID.
-- #param @description				Description
-- #param @ApplicationUseFlag		POS WEB NONE app Use Flag

CREATE Procedure [DBO].CMM_AddInstallation
	@InstallationID NVARCHAR(3),
	@Description NVARCHAR(30),
	@ApplicationUseFlag NVARCHAR(8)
AS

SET NOCOUNT ON

INSERT INTO [SCDATA].FQ670001
	(
	  IN$9INID,  
	  INDSC1,
	  IN$9APFL
	)
	VALUES
	(
	  @InstallationID, 
	  @Description,
	  @ApplicationUseFlag
	)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_AddNextNumber'))
	BEGIN
		DROP  Procedure  [DBO].CMM_AddNextNumber
	END

GO

-- #desc							Create next number into table FQ67002
-- #bl_class						Premier.Common.NextNumber.cs	
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @NextNumberID				key
-- #param @UseDescription1			Description
-- #param @UseDescription2			Description 2
-- #param @NextValue				Next value
-- #param @UserReservedCode			
-- #param @UserReservedDate
-- #param @UserReservedAmount
-- #param @UserReservedNumber
-- #param @UserReservedReference
-- #param @UserId
-- #param @ProgramId
-- #param @WorkStationId
-- #param @DateUpdated
-- #param @TimeOfDay

CREATE Procedure [DBO].CMM_AddNextNumber
@NextNumberID FLOAT,
@UseDescription1 NVARCHAR(15),
@UseDescription2 NVARCHAR(15),
@NextValue FLOAT,
@UserReservedCode NVARCHAR(6),
@UserReservedDate NUMERIC,
@UserReservedAmount FLOAT,
@UserReservedNumber FLOAT,
@UserReservedReference  NVARCHAR(30),
@UserId NVARCHAR(10),
@ProgramId NVARCHAR(10),
@WorkStationId NVARCHAR(10),
@DateUpdated NUMERIC,
@TimeOfDay NUMERIC

AS

SET NOCOUNT ON

INSERT INTO [SCDATA].FQ67002
(
NN$9UKID,  NNUD01,  NNUD02, 
NN$9N001,  NNURCD,  NNURDT,  NNURAT, 
NNURAB,    NNURRF,  NNUSER,  NNPID, 
NNJOBN,    NNUPMJ,  NNTDAY
)
VALUES
(
@NextNumberID, @UseDescription1, @UseDescription2, 
@NextValue, @UserReservedCode, @UserReservedDate, @UserReservedAmount, 
@UserReservedNumber,   @UserReservedReference, @UserId, @ProgramId, 
@WorkStationId,   @DateUpdated, @TimeOfDay
)



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TF' AND id = OBJECT_ID(N'[DBO].CMM_AssocItemBranchPlantFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].CMM_AssocItemBranchPlantFnc
	END

GO

-- #desc						Associates ItemNumbers and BranchPlants sent as parameters separated by a ','
-- #bl_class					N/A		
-- #db_dependencies				N/A
-- #db_references				COM_GetCrossSegmentRulesList

-- #param ItemNumberList		Item Number List
-- #param BranchPlantList		Branch Plant List
-- #param Separator				Separator


CREATE FUNCTION [DBO].CMM_AssocItemBranchPlantFnc
(
    @ItemNumberList   VARCHAR(MAX), 
	@BranchPlantList  VARCHAR(MAX), 
	@Separator CHAR(1)
)
RETURNS @RESULT TABLE(ItemNumber FLOAT, BranchPlant VARCHAR(12))
AS
BEGIN     
 DECLARE @SeparatorPositionIN INT = CHARINDEX(@Separator, @ItemNumberList ), 
		 @SeparatorPositionBP INT = CHARINDEX(@Separator, @BranchPlantList ),
         @ItemNumber FLOAT, 
		 @BranchPlant VARCHAR(12), 
		 @TMPBranchPlant VARCHAR(12),
		 @StartPositionIN INT = 1, 
		 @StartPositionBP INT = 1
 
 IF @SeparatorPositionIN = 0  
  BEGIN
   SET @TMPBranchPlant = (SELECT TOP 1 KUMCU
					FROM [SCDATA].F3292
					WHERE KUKIT = @ItemNumberList
					AND KUMCU = @BranchPlantList); /*Retrieve first MCU valid for the specified product in the cross segment rules table*/
	
	SET @ItemNumber = CAST(@ItemNumberList AS FLOAT)
	SET @BranchPlant = CASE WHEN @TMPBranchPlant IS NULL THEN '' ELSE @TMPBranchPlant END
	INSERT INTO @RESULT VALUES(@ItemNumber, @BranchPlant)
   RETURN
  END
     
 SET @ItemNumberList = @ItemNumberList + @Separator
 SET @BranchPlantList = @BranchPlantList + @Separator
 WHILE @SeparatorPositionIN > 0
  BEGIN
   SET @ItemNumber = CAST(SUBSTRING(@ItemNumberList , @StartPositionIN, @SeparatorPositionIN- @StartPositionIN) AS FLOAT)
   SET @BranchPlant = SUBSTRING(@BranchPlantList , @StartPositionBP, @SeparatorPositionBP- @StartPositionBP)

   SET @TMPBranchPlant = (SELECT TOP 1 KUMCU
					FROM [SCDATA].F3292
					WHERE KUKIT = @ItemNumber
					AND KUMCU = @BranchPlant); /*Retrieve first MCU valid for the specified product in the cross segment rules table*/

	SET @BranchPlant = CASE WHEN @TMPBranchPlant IS NULL THEN '' ELSE @TMPBranchPlant END
 
   IF( @ItemNumber <> 0) 
      INSERT INTO @RESULT VALUES(@ItemNumber, @BranchPlant)
   
   SET @StartPositionIN = @SeparatorPositionIN + 1
   SET @SeparatorPositionIN = CHARINDEX(@Separator, @ItemNumberList , @StartPositionIN)
   SET @StartPositionBP = @SeparatorPositionBP + 1
   SET @SeparatorPositionBP = CHARINDEX(@Separator, @BranchPlantList , @StartPositionBP)
  END    
     
 RETURN
END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelAllCompaniesByInst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelAllCompaniesByInst
	END

GO

-- #desc					Un Relate All Companies
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation ID 

CREATE Procedure [DBO].CMM_DelAllCompaniesByInst
	@InstallationID				NVARCHAR(3)
AS

	DELETE FROM
		[SCDATA].FQ679912
	WHERE
		CI$9INID = @InstallationID		
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelAllDocRestric'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelAllDocRestric
	END

GO
-- #desc					Deletes an Installation description.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @Constant			Constant Id
-- #param @ProductCode		Product code
-- #param @UserDefinedCode	User define code 

CREATE Procedure [DBO].CMM_DelAllDocRestric
	@InstallationID				NVARCHAR(3),
    @ConstantID					NVARCHAR(10),
    @ProductCode				NVARCHAR(4),
    @UserDefinedCode			NVARCHAR(2)

AS

SET NOCOUNT ON

	DELETE  
	FROM  [SCDATA].FQ67008
		
	WHERE
		DR$9INID =	@InstallationID		
		AND DR$9CNST =	@ConstantID		
		AND DRSY =		@ProductCode	
		AND DRRT =		@UserDefinedCode
		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelAnnounceInstallation'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelAnnounceInstallation
	END
GO

-- #desc						Delete Announcement Installation
-- #bl_class					Premier.Common.AnnouncementStore.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AnnouncementID		Announcement ID
-- #param @InstallationID		Installation ID
-- #param @AnnouncementType		Announcement Type  AGen | ATag

CREATE PROCEDURE [DBO].CMM_DelAnnounceInstallation
(
	@AnnouncementID		FLOAT,
	@InstallationID	    NVARCHAR(3),
	@AnnouncementType	NVARCHAR(4)
)
AS
	DELETE FROM
		[SCDATA].FQ67105I
	WHERE
		MI$9NID = @AnnouncementID AND 
		(@InstallationID = '*' OR MI$9INID = @InstallationID) AND 
		MI$9APFL = @AnnouncementType

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelBranchPlantByInst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelBranchPlantByInst
	END

GO

-- #desc					Delete Branch Plant from installation
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @BranchPlant		Branch Plant (MCU)

CREATE Procedure [DBO].CMM_DelBranchPlantByInst
	@InstallationID NVARCHAR(3),
	@BranchPlant	NVARCHAR(12)
AS

	/* Item Branch Plant Override By Installation */
	DELETE FROM [SCDATA].FQ670005 WHERE BP$9INID = @InstallationID AND BPMCU = @BranchPlant

	Delete from
		[SCDATA].FQ679910
	Where
		BI$9INID = @InstallationID and
		BIMCU = @BranchPlant
		

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelCompanyByInst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelCompanyByInst
	END

GO

-- #desc						Un Relate Company
-- #bl_class					Premier.Common.CompanyList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @Company				Company

CREATE Procedure [DBO].CMM_DelCompanyByInst
	@InstallationID				NVARCHAR(3),
    @Company					NVARCHAR(5)
AS

	DELETE FROM
		[SCDATA].FQ679912		
	WHERE
		CI$9INID = @InstallationID		
		AND CICO = @Company	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelConstant'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelConstant
	END

GO

-- #desc							Delete contant detail
-- #bl_class						Premier.Common.Constant.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @Constant					Constant ID
-- #param @InstallationID			Installation ID

CREATE Procedure [DBO].CMM_DelConstant
	
	@Constant		NVARCHAR(10),
	@InstallationID NVARCHAR(3)

AS

	SET NOCOUNT ON
	
	DELETE FROM
		[SCDATA].FQ670004
	WHERE
		CN$9INID = @InstallationID AND 
		CN$9CNST = @Constant



GO
   IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelCurrencyDetail'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelCurrencyDetail
	END

GO

-- #desc					Remove currency Detail
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #bl_class				Premier.Common.Constant.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code
-- #param @SequenceId		Sequence Id

CREATE PROCEDURE [DBO].CMM_DelCurrencyDetail
(
    @CurrencyCode		NVARCHAR(3),
    @SequenceId			FLOAT
)
AS
	SET NOCOUNT ON

	DELETE FROM 
		[SCDATA].FQ67012 
	WHERE 
		CICRCD = @CurrencyCode 
		AND CILNID = @SequenceId
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelCurrencyHeader'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelCurrencyHeader
	END

GO

-- #desc					Remove currency header
-- #bl_class				Premier.Common.CurrencyHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code

CREATE PROCEDURE [DBO].CMM_DelCurrencyHeader
(
    @CurrencyCode		NVARCHAR(3)
)
AS
	SET NOCOUNT ON

DELETE FROM [SCDATA].FQ67011 WHERE CICRCD = @CurrencyCode

DELETE FROM [SCDATA].FQ67012 WHERE CICRCD = @CurrencyCode

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelDocRestric'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelDocRestric
	END

GO
-- #desc					Deletes an Installation description.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @Constant			Constant Id
-- #param @ProductCode		Product code
-- #param @UserDefinedCode	User define code 
-- #param @UserDefinedKey	UDC Key

CREATE Procedure [DBO].CMM_DelDocRestric
	@InstallationID				NVARCHAR(3),
    @ConstantID					NVARCHAR(10),
    @ProductCode				NVARCHAR(4),
    @UserDefinedCode			NVARCHAR(2),
    @UserDefinedKey				NVARCHAR(10)

AS

SET NOCOUNT ON

	DELETE  
	FROM  [SCDATA].FQ67008
		
	WHERE
		DR$9INID =	@InstallationID		
		AND DR$9CNST =	@ConstantID		
		AND DRSY =		@ProductCode	
		AND DRRT =		@UserDefinedCode
		AND DRKY =		@UserDefinedKey	
		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelGeneralAnnounceLang'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelGeneralAnnounceLang
	END
GO

-- #desc					Deletes General Announcement Lang
-- #bl_class				Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AnnouncementID		Announcement ID
-- #param @DesignStatus			Design Status
-- #param @LangPref				Language

CREATE PROCEDURE [DBO].CMM_DelGeneralAnnounceLang
(
	@AnnouncementID		FLOAT,
	@DesignStatus		FLOAT,
	@LangPref			NVARCHAR(2)
)
AS
	DELETE FROM  
		[SCDATA].FQ67105L
	WHERE 
		ML$9NID = @AnnouncementID
		AND (@LangPref = '*' OR MLLNGP= @LangPref)
		AND (@DesignStatus IS NULL OR ML$9DS = @DesignStatus)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelGeneralAnnouncement'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelGeneralAnnouncement
	END
GO
-- #desc					Delete General Announcement
-- #bl_class				Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies			CMM_DelGeneralAnnouncLang, CMM_DelGeneralAnnouncInst
-- #db_references			N/A

-- #param @AnnouncementID	Announcement ID
-- #param @DesignStatus		Design Status


CREATE PROCEDURE [DBO].CMM_DelGeneralAnnouncement
(
	@AnnouncementID		FLOAT,
	@DesignStatus		FLOAT
)
AS
	
	/* IF Announcement doesn't have copy (draft and published) or
	DesignStatus Is null then delete published and draft versions */
	IF (SELECT COUNT(*) FROM [SCDATA].FQ67105 WHERE MS$9NID = @AnnouncementID) = 1 OR @DesignStatus IS NULL BEGIN
		
		/*Delete relation with installations */
		EXEC [DBO].CMM_DelAnnounceInstallation @AnnouncementID, '*', 'AGen'
		/*User History */
		EXEC [DBO].CMM_ExcUserAnnounceClearHist @AnnouncementID, 'AGen' , NULL
		/*Delete assignments */
		EXEC [DBO].CMM_DelGnrlAnnounceAssign @AnnouncementID, NULL
	END 

	EXEC [DBO].CMM_DelGeneralAnnounceLang @AnnouncementID, @DesignStatus, '*'

	DELETE FROM 
		[SCDATA].FQ67105
	WHERE 
		MS$9NID = @AnnouncementID AND
		(@DesignStatus IS NULL OR MS$9DS = @DesignStatus)
			
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelInstallation'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelInstallation
	END

GO
-- #desc					Deletes an Installation description.
-- #bl_class				Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.


CREATE Procedure [DBO].CMM_DelInstallation
	@InstallationID NVARCHAR(3)

AS

SET NOCOUNT ON	

	--Line of Business By Installation
	DELETE FROM [SCDATA].FQ671031 WHERE LI$9INID = @InstallationID
		
	--Item Branch Priority
	DELETE FROM [SCDATA].FQ674101 WHERE PR$9INID = @InstallationID	
	
	/* Item Branch Plant Override By Installation */
	DELETE FROM [SCDATA].FQ670005 WHERE BP$9INID = @InstallationID
	
	--Branch Plant By Installation
	DELETE FROM [SCDATA].FQ679910 WHERE BI$9INID = @InstallationID
	
	--Constant Value By Installation
	DELETE FROM [SCDATA].FQ670004 WHERE CN$9INID = @InstallationID
	
	--Sales Unit of Measure
	DELETE FROM [SCDATA].FQ67415 WHERE UM$9INID = @InstallationID
	
	--Sales Unit of Measure (language)
	DELETE FROM [SCDATA].FQ67415L WHERE UM$9INID = @InstallationID AND UMUOM NOT IN (SELECT UMUOM FROM [SCDATA].FQ67415)
		
	--Items Fast Buttons (language)
	DELETE FROM [SCDATA].FQ67416L WHERE FB$9INID = @InstallationID
	
	--Items Fast Buttons
	DELETE FROM [SCDATA].FQ67416 WHERE FB$9INID = @InstallationID
	
	--Document Restrictions (AR - SO)
	DELETE FROM [SCDATA].FQ67008 WHERE DR$9INID = @InstallationID
	
	--Permission Setup by Installation (eCommerce Permissions)
	DELETE FROM [SCDATA].FQ67994E WHERE PE$9INID = @InstallationID
	
	--Item Web Content Detail
	DELETE FROM [SCDATA].FQ67411 WHERE CD$9INID = @InstallationID
	
	--Item Web Content Detail (Language)
	DELETE FROM [SCDATA].FQ67411L WHERE CL$9INID = @InstallationID
	
	--Item Web Content Header
	DELETE FROM [SCDATA].FQ67410 WHERE CH$9INID = @InstallationID
	
	--Item Web Content Header ( Language)
	DELETE FROM [SCDATA].FQ67410L WHERE CL$9INID = @InstallationID
	
	--Receipts by Installation ID or Registers
	DELETE FROM [SCDATA].FQ674213 WHERE RR$9INID = @InstallationID
	
	--Drawers by Register
	DELETE FROM [SCDATA].FQ674261 WHERE EXISTS(SELECT * FROM [SCDATA].FQ67426 
												WHERE RG$9REGID = DR$9REGID AND RG$9INID = @InstallationID)
	
	--Registers Master
	DELETE FROM [SCDATA].FQ67426 WHERE RG$9INID = @InstallationID	
	
	--Catalog Detail (language)
	DELETE CDL FROM [SCDATA].FQ67413L CDL WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = CDL.CD$9CLGID AND C.CA$9INID = @InstallationID)
	--Catalogs Detail
	DELETE CD FROM [SCDATA].FQ67413 CD WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = CD.CD$9CLGID AND C.CA$9INID = @InstallationID)
	--Catalogs (language)
	DELETE CL FROM [SCDATA].FQ67412L CL WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = CL.CA$9CLGID AND C.CA$9INID = @InstallationID)	
	
	--Catalog Node Items
	DELETE I FROM [SCDATA].FQ67413I I WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = I.IN$9CLGID AND C.CA$9INID = @InstallationID)
	--Catalogs
	DELETE FROM [SCDATA].FQ67412 WHERE CA$9INID = @InstallationID
	
	--- Sales Person Clients	
	DELETE FROM [SCDATA].FQ67125 WHERE SP$9INID = @InstallationID
	
	--- P4210 Settings Detail	
	DELETE FROM [SCDATA].FQ674231 WHERE RD$9INID = @InstallationID
	
	--- P4210 Settings Header	
	DELETE FROM [SCDATA].FQ674230 WHERE RH$9INID = @InstallationID
	
	--Recently View Items
	DELETE FROM [SCDATA].FQ67120 WHERE WI$9INID = @InstallationID

	--Companies By Installation
	DELETE FROM [SCDATA].FQ679912 WHERE CI$9INID = @InstallationID
	
	--///////////// Delete User /////////////////////////
		
	--User Permissions
	DELETE FROM [SCDATA].FQ67997 WHERE EXISTS(SELECT US$9USER FROM [SCDATA].FQ67991
														INNER JOIN [SCDATA].FQ67101
															ON WA$9USER = US$9USER
														INNER JOIN [SCDATA].FQ67996
															ON WA$9USER = UI$9USER
														WHERE US$9USER = UP$9USER 
															AND UI$9INID = @InstallationID)
	
	--User Password History
	DELETE FROM [SCDATA].FQ679911 WHERE EXISTS(SELECT US$9USER FROM [SCDATA].FQ67991
														INNER JOIN [SCDATA].FQ67101
															ON WA$9USER = US$9USER
														INNER JOIN [SCDATA].FQ67996
															ON WA$9USER = UI$9USER
														WHERE US$9USER = PH$9USER
															AND UI$9INID = @InstallationID)
	
	--Users
	DELETE FROM [SCDATA].FQ67991 WHERE EXISTS(SELECT WA$9USER FROM [SCDATA].FQ67101	
																INNER JOIN [SCDATA].FQ67996
																	ON WA$9USER = UI$9USER
																WHERE WA$9USER = US$9USER
																	AND UI$9INID = @InstallationID)	 
		
	--Shopping Cart Detail (Persist Information)	
	DELETE FROM [SCDATA].FQ67411W WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = SD$9WAN8
														AND UI$9INID = @InstallationID)
		
	--Shopping Cart Header (Persist Information)
	DELETE FROM [SCDATA].FQ6742WF WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = SH$9WAN8
														AND UI$9INID = @InstallationID)		
	
	--Wish List Detail
	DELETE FROM [SCDATA].FQ674215 WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = WD$9WAN8
														AND UI$9INID = @InstallationID)	
	
	--Wish List Header
	DELETE FROM [SCDATA].FQ674214 WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = WH$9WAN8
														 AND UI$9INID = @InstallationID)	
		
	--Announcements - Assignments by web account 
	DELETE FROM [SCDATA].FQ67105A WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101 
													WHERE WA$9INID = @InstallationID AND WA$9WAN8 = MA$9WAN8) AND MA$9ATYP = 5;
		
	--Web Accounts
	DELETE FROM [SCDATA].FQ67101 WHERE EXISTS(SELECT UI$9USER FROM [SCDATA].FQ67996
														WHERE UI$9USER = WA$9USER
															AND UI$9INID = @InstallationID)	
	
	--Users by Installation Id
	DELETE FROM [SCDATA].FQ67996 WHERE UI$9INID = @InstallationID
	
	--///////////////////////////////////////////////////
	
	--Announcements  History
	DELETE FROM [SCDATA].FQ67105H WHERE MH$9INID = @InstallationID;

	--Announcements 
	DELETE FROM [SCDATA].FQ67105I WHERE MI$9INID = @InstallationID;
	
	--InstallationId Master
	DELETE FROM [SCDATA].FQ670001 WHERE IN$9INID = @InstallationID;
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_DelNextNumber'))
	BEGIN
		DROP  Procedure  [DBO].CMM_DelNextNumber
	END

GO


-- #desc						Update next number from table FQ67002
-- #bl_class					Premier.Common.NextNumber.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param @NextNumberID			Key

CREATE Procedure [DBO].CMM_DelNextNumber
	@NextNumberID FLOAT
	
AS
	
DELETE 

FROM  
	[SCDATA].FQ67002
WHERE 
	NN$9UKID = @NextNumberID




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcBranchPlantRelatedExist'))
	BEGIN
		DROP Procedure [DBO].CMM_ExcBranchPlantRelatedExist
	END
GO

-- #desc					Check BranchPlant Related Exist
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @BranchPlantID	BranchPlant ID

CREATE Procedure [DBO].CMM_ExcBranchPlantRelatedExist	
	@BranchPlantID	NVARCHAR(12)	
AS
	BEGIN
		SELECT
			COUNT(*)
		FROM
			[SCDATA].FQ679910			
		WHERE 
			BIMCU = @BranchPlantID AND 
			BI$9INID <> '***'
	END 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcCheckDryState'))
	BEGIN
		DROP  PROCEDURE  [DBO].CMM_ExcCheckDryState
	END
GO

-- #desc						Check dry state
-- #bl_class					Premier.Common.CheckDryStateCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param State					State

CREATE Procedure [DBO].CMM_ExcCheckDryState
(
	@State	NVARCHAR(10)
)

AS

SET NOCOUNT ON
		SELECT
			SC$9CLR
		FROM [SCDATA].FQ675520
		WHERE
			SCADDS = @State

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcCopyInstallation'))
	BEGIN
		DROP  Procedure  [DBO].CMM_ExcCopyInstallation
	END

GO

-- #desc						Copy an Installation.
-- #bl_class					Premier.Common.CopyStoreCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID	    Installation ID.
-- #param @InstallationIDFrom	Copy Installation ID.
-- #param @SelectionKeys        Selection Keys.
-- #param @UserID				User ID.

CREATE Procedure [DBO].CMM_ExcCopyInstallation
(
	@InstallationID		NVARCHAR(3),
	@InstallationIDFrom NVARCHAR(3),
	@UserID				FLOAT,
	@SelectionKeys		NVARCHAR(256)
)
AS

BEGIN
	DECLARE @Pos INT
	DECLARE @NextString NVARCHAR(1000)
	
    IF (@SelectionKeys <> '')
	BEGIN
		SET @Pos = CHARINDEX('|@', @SelectionKeys)		
		WHILE (@Pos <> 0)
			BEGIN
				SET @NextString = substring(@SelectionKeys, 1, @Pos - 1)
				SET @SelectionKeys = substring(@SelectionKeys,@Pos + 2,LEN(@SelectionKeys))
				SET @Pos = charindex('|@', @SelectionKeys)

				
				IF (@NextString = 'CONSTANT')
					BEGIN
						INSERT INTO [SCDATA].FQ670004 (CN$9INID,CN$9CNST,CN$9VAL)
							SELECT
								@InstallationID,
								A.CN$9CNST,
								A.CN$9VAL
							FROM [SCDATA].FQ670004 A
							INNER JOIN [SCDATA].FQ670003 B
								ON B.CN$9CNST= A.CN$9CNST
							WHERE A.CN$9INID = @InstallationIDFrom
								AND CN$9SOF = 0
								AND NOT EXISTS (SELECT 1 FROM [SCDATA].FQ670004 C WHERE C.CN$9INID = @InstallationID AND C.CN$9CNST= A.CN$9CNST)
						
						INSERT INTO [SCDATA].FQ679912 (CI$9INID,CICO,CIDSC1,CIDSC2,CISQ01,CISQ02,CIAA,CIAA1,CIDATE01,CIDATE02,CISRP1,CISRP2,CISRP3,CISRP4,
						CISRP5,CISRP6,CISRP7,CISRP8,CISRP9,CISRP0,CIURAB,CIURAT,CIURCD,CIURDT,CIURRF,CIUSER,CIPID,CIUPMJ,CIUPMT,CIJOBN) 
						SELECT
								@InstallationID,
								CICO,
								CIDSC1,
								CIDSC2,
								CISQ01,
								CISQ02,
								CIAA,
								CIAA1,
								CIDATE01,
								CIDATE02,
								CISRP1,
								CISRP2,
								CISRP3,
								CISRP4,
								CISRP5,
								CISRP6,
								CISRP7,
								CISRP8,
								CISRP9,
								CISRP0,
								CIURAB,
								CIURAT,
								CIURCD,
								CIURDT,
								CIURRF,
								CIUSER,
								CIPID,
								CIUPMJ,
								CIUPMT,
								CIJOBN
							FROM [SCDATA].FQ679912
							WHERE CI$9INID = @InstallationIDFrom
							
					END --IF
							
				ELSE IF (@NextString = 'LOB')
					BEGIN
						INSERT INTO [SCDATA].FQ671031 (LI$9LOB,LI$9INID,LIPID,LIJOBN,LIUSER,LIUPMJ,LIUPMT)
							SELECT
								LI$9LOB,
								@InstallationID,
								LIPID,
								LIJOBN,
								LIUSER,
								LIUPMJ,
								LIUPMT
							FROM [SCDATA].FQ671031
							WHERE LI$9INID = @InstallationIDFrom						
					END --IF
					
				ELSE IF (@NextString = 'MCU')
					BEGIN
						INSERT INTO [SCDATA].FQ679910 (BI$9INID,BIMCU)
							SELECT
								@InstallationID,
								BIMCU
							FROM [SCDATA].FQ679910
							WHERE BI$9INID = @InstallationIDFrom
					END --IF
					
				ELSE IF (@NextString = 'UOM')
					BEGIN
						INSERT INTO [SCDATA].FQ67415 (UM$9INID,UMUOM,UMDSC1)
							SELECT
								@InstallationID,
								UMUOM,	
								UMDSC1
							FROM [SCDATA].FQ67415
							WHERE UM$9INID = @InstallationIDFrom	
					END --IF
					
				ELSE IF (@NextString = 'DOCREST')
					BEGIN
						INSERT INTO [SCDATA].FQ67008 (DR$9INID,DRSY,DRRT,DRKY,DR$9CNST,DRURCD,DRURDT,DRURAT,DRURAB,DRURRF,DRUSER,DRPID,DRUPMJ,DRJOBN,DRUPMT)
							SELECT	
								@InstallationID,
								DRSY,
								DRRT,
								DRKY,
								DR$9CNST,
								DRURCD,
								DRURDT,
								DRURAT,
								DRURAB,
								DRURRF,
								DRUSER,
								DRPID,
								DRUPMJ,
								DRJOBN,
								DRUPMT
							FROM [SCDATA].FQ67008
							WHERE DR$9INID = @InstallationIDFrom	
					END --IF
					
				ELSE IF (@NextString = 'ITEMCNT')
					BEGIN
						INSERT INTO [SCDATA].FQ67411L (CLITM,CLUKID,CL$9INID,CL$9DS,CLLNGP,CL$9PTL,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
							SELECT
								CLITM,
								CLUKID,
								@InstallationID,       
								CL$9DS,
								CLLNGP,
								CL$9PTL,
								CL$9HTML,
								CLURCD,
								CLURDT,
								CLURAT,
								CLURAB,
								CLURRF,
								CLUSER,
								CLPID,
								CLJOBN,
								CLUPMJ,
								CLTDAY
							FROM [SCDATA].FQ67411L
							WHERE CL$9INID = @InstallationIDFrom
						
						INSERT INTO [SCDATA].FQ67411 (CDITM,CDUKID,CD$9INID,CD$9DS,CDSEQ,CD$9PTL,CD$9HTML,CDASAI,CDEFFF,CDEFFT,CDURCD,CDURDT,CDURAT,CDURAB,CDURRF,CDUSER,CDPID,CDJOBN,CDUPMJ,CDTDAY)
							SELECT
								CDITM,
								CDUKID,
								@InstallationID,
								CD$9DS,
								CDSEQ,
								CD$9PTL,
								CD$9HTML,
								CDASAI,
								CDEFFF,
								CDEFFT,
								CDURCD,
								CDURDT,
								CDURAT,
								CDURAB,
								CDURRF,
								CDUSER,
								CDPID,
								CDJOBN,
								CDUPMJ,
								CDTDAY
							FROM [SCDATA].FQ67411
							WHERE CD$9INID = @InstallationIDFrom


						INSERT INTO [SCDATA].FQ67410L (CLITM,CL$9INID,CL$9DS,CLLNGP,CLDSC1,CLDSC2,CLDSC3,CLPGTX,CLDL01,CLDL02,CLDL03,CLDL04,CLDL05,CLDL06,CLDL07,CLDL08,CLDL09,CLDL10,CLCOMMENTS,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
							SELECT
								CLITM,
								@InstallationID,       
								CL$9DS,
								CLLNGP,
								CLDSC1,
								CLDSC2,
								CLDSC3,
								CLPGTX,
								CLDL01,
								CLDL02,
								CLDL03,
								CLDL04,
								CLDL05,
								CLDL06,
								CLDL07,
								CLDL08,
								CLDL09,
								CLDL10,
								CLCOMMENTS,
								CL$9HTML,
								CLURCD,
								CLURDT,
								CLURAT,
								CLURAB,
								CLURRF,
								CLUSER,
								CLPID,
								CLJOBN,
								CLUPMJ,
								CLTDAY
							FROM [SCDATA].FQ67410L
							WHERE CL$9INID = @InstallationIDFrom


						INSERT INTO [SCDATA].FQ67410 (CHITM,CH$9INID,CH$9DS,CHDSC1,CHDSC2,CHDSC3,CHPGTX,CHDL01,CHDL02,CHDL03,CHDL04,CHDL05,CHDL06,CHDL07,CHDL08,CHDL09,CHDL10,CHCOMMENTS,CH$9PRI,CH$9HTML,CHPTURL,CHURCD,CHURDT,CHURAT,CHURAB,CHURRF,CHUSER,CHPID,CHJOBN,CHUPMJ,CHTDAY)
							SELECT
								CHITM,
								@InstallationID,
								CH$9DS,
								CHDSC1,
								CHDSC2,
								CHDSC3,
								CHPGTX,
								CHDL01,
								CHDL02,
								CHDL03,
								CHDL04,
								CHDL05,
								CHDL06,
								CHDL07,
								CHDL08,
								CHDL09,
								CHDL10,
								CHCOMMENTS,
								CH$9PRI,
								CH$9HTML,
								CHPTURL,
								CHURCD,
								CHURDT,
								CHURAT,
								CHURAB,
								CHURRF,
								CHUSER,
								CHPID,
								CHJOBN,
								CHUPMJ,
								CHTDAY
							FROM [SCDATA].FQ67410
							WHERE CH$9INID = @InstallationIDFrom
					END --IF
					
				ELSE IF (@NextString = 'PERMISSION')
					BEGIN
						INSERT INTO [SCDATA].FQ67994E (PE$9INID,PE$9PCD,PE$9ICF,PE$9ALLOW,PE$9WEBA)
							SELECT
							@InstallationID,
							PE$9PCD,
							PE$9ICF,							
							(CASE 
								WHEN (PE$9PCD IN ('EOVAB', 'EOCIH', 'EOIVP', 'EBAAD', 'EBAMF', 'EBASW', 'ECCSW', 'ECCAD', 'ECCMF')) 
								THEN PE$9ALLOW
								ELSE 1 
							END),
							(CASE 
								WHEN (PE$9PCD IN ('EOVAB', 'EOCIH', 'EOIVP', 'EBAAD', 'EBAMF', 'EBASW', 'ECCSW', 'ECCAD', 'ECCMF')) 
								THEN PE$9WEBA
								ELSE 0 
							END)
						FROM [SCDATA].FQ67994E
						WHERE PE$9INID = @InstallationIDFrom						
					END --IF
					
				ELSE IF (@NextString = 'RECEIPT')
					BEGIN
						INSERT INTO [SCDATA].FQ674213 (RR$9RCID,RR$9INID,RR$9REGID,RR$9XML,RRPID,RRJOBN,RRUSER,RRUPMJ,RRUPMT)
							SELECT
								RR$9RCID,
								@InstallationID,
								RR$9REGID,
								RR$9XML,
								RRPID,
								RRJOBN,
								RRUSER,
								RRUPMJ,
								RRUPMT
							FROM [SCDATA]. FQ674213
							WHERE RR$9INID = @InstallationIDFrom
					END --IF
					
				ELSE IF (@NextString = 'FASTBTN')
					BEGIN
						INSERT INTO [SCDATA].FQ67416L (FB$9INID,FBLNID,FBLNGP,FBDSC1,FBDSC2)
							SELECT
								@InstallationID,
								FBLNID,
								FBLNGP,
								FBDSC1,
								FBDSC2
							FROM [SCDATA].FQ67416L
							WHERE FB$9INID = @InstallationIDFrom

						INSERT INTO [SCDATA].FQ67416 (FB$9INID,FBLNID,FBITM,FBUOM,FBUORG,FBDSC1,FBDSC2)
							SELECT
								@InstallationID,
								FBLNID,
								FBITM,
								FBUOM,
								FBUORG,
								FBDSC1,
								FBDSC2
							FROM [SCDATA].FQ67416
							WHERE FB$9INID = @InstallationIDFrom
					END --IF						
				ELSE IF (@NextString = 'P4210')
					BEGIN
						INSERT INTO [SCDATA].FQ674230 (RH$9INID,RHUKID,RHDSC1,RHVER,RHSEQ,RHRUDTP,RHRT,RHURAB,RHURAT,RHURCD,RHURDT,RHURRF,RHUSER,RHPID,RHUPMJ,RHUPMT,RHJOBN)
							SELECT
								@InstallationID,																
								RHUKID,
								RHDSC1,
								RHVER,
								RHSEQ,
								RHRUDTP,
								RHRT,
								RHURAB,
								RHURAT,
								RHURCD,
								RHURDT,
								RHURRF,
								RHUSER,
								RHPID,
								RHUPMJ,
								RHUPMT,
								RHJOBN
							FROM [SCDATA].FQ674230
							WHERE RH$9INID = @InstallationIDFrom	
							
						INSERT INTO [SCDATA].FQ674231 (RD$9INID,RDUKID,RDLNID,RDKY,RDMCU,RD$9AN8,RDURAB,RDURAT,RDURCD,RDURDT,RDURRF,RDUSER,RDPID,RDUPMJ,RDUPMT,RDJOBN)
							SELECT								
								@InstallationID,								
								RDUKID,
								RDLNID,
								RDKY,
								RDMCU,
								RD$9AN8,
								RDURAB,
								RDURAT,
								RDURCD,
								RDURDT,
								RDURRF,
								RDUSER,
								RDPID,
								RDUPMJ,
								RDUPMT,
								RDJOBN
							FROM [SCDATA].FQ674231			
							WHERE RD$9INID = @InstallationIDFrom								
					END --IF				
			END --WHILE
	
	END ---Principal IF	
		
END

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcGetCountryAddrFormat'))
	BEGIN
		DROP  Procedure  [DBO].CMM_ExcGetCountryAddrFormat
	END

GO

-- #desc					Get country address format from table F0070
-- #bl_class				Premier.Common.GetCountryAddressFormatCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param @Country			Country id
-- #param @AddressFormatId	Output value

CREATE  PROCEDURE [DBO].CMM_ExcGetCountryAddrFormat
  @Country			NVARCHAR(3),
  @AddressFormatId	NVARCHAR(2) OUTPUT
AS

	SET NOCOUNT ON
  
	SET @AddressFormatId = (SELECT A.CKADID 
						FROM [SCDATA].F0070 A
						WHERE A.CKCTR  = @Country)
	
	IF(@AddressFormatId IS NULL)
	BEGIN
		SET @AddressFormatId = (SELECT A.CKADID 
						FROM [SCDATA].F0070 A
						WHERE A.CKCTR  = '')
		
		IF(@AddressFormatId IS NULL)
		BEGIN
			SET @AddressFormatId = '04'	
		END		
	END					

	SET NOCOUNT OFF

	RETURN @AddressFormatId




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcGnrlAnnouncePublish'))
	BEGIN
		DROP  Procedure  [DBO].CMM_ExcGnrlAnnouncePublish
	END
GO
-- #desc					Publish Announcement.
-- #bl_class				Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AnnouncementID	Announcement ID.

CREATE PROCEDURE [DBO].CMM_ExcGnrlAnnouncePublish
(
	@AnnouncementID FLOAT,
	@UserID			NVARCHAR(10),
	@WorkStationID	NVARCHAR(10),
	@DateUpdated	NUMERIC,
	@TimeOfDay		NUMERIC
)
AS	
	/* Delete Announcement Languages */
	DELETE FROM [SCDATA].FQ67105L 
	WHERE  
	ML$9NID = @AnnouncementID AND
	ML$9DS = 0;							/* Published = 0 | Draft = 1 */

	/* Delete Published version	*/
	DELETE FROM [SCDATA].FQ67105 
	WHERE  
	MS$9NID = @AnnouncementID AND
	MS$9DS = 0;							/* Published = 0 | Draft = 1 */

	/* Update Announcement status (Draft to Published) */
	UPDATE [SCDATA].FQ67105 
	SET MS$9DS = 0,						/* Published = 0 | Draft = 1 */
		MSUSER = @UserID,
		MSJOBN = @WorkStationID,
		MSUPMJ = @DateUpdated,
		MSTDAY = @TimeOfDay
	WHERE 
	MS$9NID = @AnnouncementID AND 
	MS$9DS = 1;

	/* Update Announcement Langs */
	UPDATE [SCDATA].FQ67105L 
	SET ML$9DS = 0						/* Published = 0 | Draft = 1 */
	WHERE 
	ML$9NID = @AnnouncementID AND 
	ML$9DS = 1;
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcSystemDefaultDataSync'))
	BEGIN
		DROP PROCEDURE [DBO].CMM_ExcSystemDefaultDataSync
	END
GO

-- #desc					Execute a command of Default Data Syncronization
-- #bl_class				Premier.SysBase.SystemDefaultDataSyncCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @TableName		Table Name
-- #param @ExecuteCommand	Command(s) To Execute

CREATE PROCEDURE [DBO].CMM_ExcSystemDefaultDataSync
(
	@TableName NVARCHAR(50),
	@ExecuteCommand NVARCHAR(MAX)
)
AS
	--Dynamic
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = '';

	DECLARE @DTAOWNER NVARCHAR(30);
	DECLARE @CTLOWNER NVARCHAR(30);
  
	SET @DTAOWNER = N'[SCDATA]';
	SET @CTLOWNER = N'[SCCTL]';  

	SET @TableName = REPLACE(@tableName, N'[JDEDTA]', @DTAOWNER);
	SET @TableName = REPLACE(@tableName, N'[JDECTL]', @CTLOWNER);

	DECLARE @OriginalExistingRecords INT;
	DECLARE @OriginalExistingRecordsSQL NVARCHAR(MAX) = ''
  
	SET @OriginalExistingRecordsSQL = N'SELECT @OriginalExistingRecords = COUNT(1)  FROM '+ @TableName;

	--Original existing records result
	EXEC SP_EXECUTESQL @OriginalExistingRecordsSQL, N'@OriginalExistingRecords INT OUT ', @OriginalExistingRecords OUT ;
 
	--Replace owner and dummy table also add the BEGIN and END of PLSQL block statement
	SET @executeCommand = Replace(Replace(Replace(Replace(@executeCommand, N'[JDEDTA]', @DTAOWNER), N'[JDECTL]', @CTLOWNER), N'{DUMMYTABLE}',''), N'{SPLITTER}',';');
	EXEC(@executeCommand);  
  
	SET @SQL_DYNAMIC = N'SELECT @OriginalExistingRecords AS OriginalExistingRecords, Count(1) AS OverallResult FROM '+ @TableName;
	--Get the results
	EXEC SP_EXECUTESQL @SQL_DYNAMIC, N' @OriginalExistingRecords INT ', @OriginalExistingRecords = @OriginalExistingRecords ;






GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcUpdBranchPlantPickup'))
	BEGIN
		DROP  Procedure  [DBO].CMM_ExcUpdBranchPlantPickup
	END

GO

-- #desc							Update pickup flag for Branchplants by Installations
-- #bl_class						Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID
-- #param @BranchPlant			    Branch Plant (MCU)
-- #param @AllowPickup              AllowPickup

CREATE Procedure [DBO].CMM_ExcUpdBranchPlantPickup
	
	@InstallationID NVARCHAR(3),
	@BranchPlant	NVARCHAR(12),
	@AllowPickup    NVARCHAR(1)
AS	
	SET NOCOUNT ON
	
	UPDATE 
		[SCDATA].FQ679910
	SET  
		BILCNF = @AllowPickup
	WHERE 
		BI$9INID = @InstallationID AND 
		BIMCU = @BranchPlant
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_ExcUserAnnounceUpdHist'))
	BEGIN
		DROP Procedure [DBO].CMM_ExcUserAnnounceUpdHist
	END
GO

-- #desc							Add User Announcement History
-- #bl_class						Premier.Common.UserAnnouncementHistory.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AnnouncementID			Announcement ID		
-- #param AnnouncementType			Announcement Type		
-- #param WebAccountID				WebAccount ID			
-- #param InstallationID			Installation ID		
-- #param AddressNumber				Address Number			
-- #param ContactID					Contact ID				
-- #param AddressBookType			Address Book Type		
-- #param Priority					Priority				
-- #param UserAnnouncementStatus	Announcement Record History Status
-- #param AcceptanceDate			Acceptance Date

CREATE PROCEDURE [DBO].CMM_ExcUserAnnounceUpdHist
(
	@AnnouncementID				FLOAT,
	@AnnouncementType			NVARCHAR(4),
	@WebAccountID				FLOAT,
	@InstallationID				NVARCHAR(3),
	@AddressNumber				FLOAT,
	@ContactID					FLOAT,
	@AddressBookType			FLOAT,
	@Priority					FLOAT,
	@UserAnnouncementStatus		NVARCHAR(3),
	@AcceptanceDate				DECIMAL,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			DECIMAL,
	@UserReservedAmount			FLOAT,
	@UserReservedNumber			FLOAT,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				DECIMAL,
	@TimeOfDay					DECIMAL
)

AS
BEGIN	
	IF(@UserAnnouncementStatus = 'U')
		BEGIN
			DELETE 
			FROM [SCDATA].FQ67105H
			WHERE MH$9WAN8 = @WebAccountID AND 
				  MH$9NID = @AnnouncementID AND 
				  MH$9APFL = @AnnouncementType
		END
	ELSE IF EXISTS (SELECT * FROM [SCDATA].FQ67105H WHERE MH$9WAN8 = @WebAccountID AND MH$9NID = @AnnouncementID AND MH$9APFL = @AnnouncementType)
		BEGIN
			UPDATE [SCDATA].FQ67105H
			SET 
				MH$9NID = @AnnouncementID,
				MH$9APFL = @AnnouncementType, 
				MH$9WAN8 = @WebAccountID, 
				MH$9INID = @InstallationID, 
				MH$9AN8 = @AddressNumber, 
				MHIDLN = @ContactID, 
				MH$9TYP = @AddressBookType, 
				MH$9PRI = @Priority, 
				MH$9A1ST = @UserAnnouncementStatus,
				MH$9MDT =
				CASE 
				  WHEN @UserAnnouncementStatus = 'R' THEN @AcceptanceDate ELSE MH$9MDT
				END, 
				MHURCD = @UserReservedCode, 
				MHURDT = @UserReservedDate, 
				MHURAT = @UserReservedAmount, 
				MHURAB = @UserReservedNumber, 
				MHURRF = @UserReservedReference, 
				MHUSER = @UserID, 
				MHPID = @ProgramID, 
				MHJOBN = @WorkStationID, 
				MHUPMJ =
				CASE 
				  WHEN @UserAnnouncementStatus = 'RB' 
				  OR @UserAnnouncementStatus = 'B' 
				  OR @UserAnnouncementStatus = 'D' THEN  @DateUpdated ELSE MHUPMJ
				END, 
				MHTDAY = @TimeOfDay
			WHERE
				MH$9WAN8 = @WebAccountID 
				AND MH$9NID = @AnnouncementID 
				AND MH$9APFL = @AnnouncementType
		END
	ELSE
		BEGIN
			INSERT INTO [SCDATA].FQ67105H
			(
				MH$9NID, MH$9APFL, MH$9WAN8, MH$9INID, MH$9AN8, MHIDLN, MH$9TYP, MH$9PRI, MH$9A1ST, MH$9MDT, 
				MHURCD, MHURDT, MHURAT, MHURAB, MHURRF, MHUSER, MHPID, MHJOBN, MHUPMJ, MHTDAY
			)
			VALUES 
			(
				@AnnouncementID,
				@AnnouncementType,
				@WebAccountID,
				@InstallationID,
				@AddressNumber,
				@ContactID,
				@AddressBookType,
				@Priority,
				@UserAnnouncementStatus,
				@AcceptanceDate,
				@UserReservedCode,
				@UserReservedDate,
				@UserReservedAmount,
				@UserReservedNumber,
				@UserReservedReference,
				@UserID,
				@ProgramID,
				@WorkStationID,
				@DateUpdated,
				@TimeOfDay				
			);
		END
END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetAnnounceInstallations'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetAnnounceInstallations
	END
GO
-- #desc					Get Announceent Installations.
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AnnouncementID	Announcement ID.
-- #param @AnnouncementType	Announcement Type  AGen | ATag


CREATE PROCEDURE [DBO].CMM_GetAnnounceInstallations
(
	@AnnouncementID		FLOAT,
	@AnnouncementType	NVARCHAR(4)
)
AS
    SELECT 
		MI$9NID AS AnnouncementID,
		MI$9INID AS InstallationID,
		MI$9APFL AS AnnouncementType,
	    INDSC1	 AS Description,
		MIURCD AS UserReservedCode,
		MIURDT AS UserReservedDate,
		MIURAT AS UserReservedAmount,
		MIURAB AS UserReservedNumber,
		MIURRF AS UserReservedReference,
		MIUSER AS UserID,
		MIPID AS ProgramID,
		MIJOBN AS WorkStationID,
		MIUPMJ AS DateUpdated,
		MITDAY AS TimeOfDay
    FROM  
	    [SCDATA].FQ67105I ANNI
		INNER JOIN 
			[SCDATA].FQ670001 INID 
		ON 
			INID.IN$9INID = ANNI.MI$9INID
    WHERE 
			MI$9NID = @AnnouncementID AND
			MI$9APFL = @AnnouncementType;
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetAnnounceUserAcceptLst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetAnnounceUserAcceptLst
	END
GO
-- #desc					Get Announce User Acceptance List
-- #bl_class				Premier.Common.AnnounceUserAcceptHistList
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AnnouncementID	Announcement ID.
-- #param @AnnouncementType	Announcement Type  AGen | ATag
-- #param @FilterTerm		Criteria to search by username or mailing name
-- #param @PageIndex		Page number
-- #param @PageSize			Page size

CREATE PROCEDURE [DBO].CMM_GetAnnounceUserAcceptLst
(
	@AnnouncementID			FLOAT,
	@AnnouncementType		NVARCHAR(4),
	@FilterTerm				NVARCHAR(256),
	@PageIndex				FLOAT,
    @PageSize				FLOAT
)
AS	
	SELECT
		    AnnouncementID,
			AnnouncementType,
			WebAccountID,
			InstallationID,
			AddressNumber, 
			ContactId, 
			AcceptanceDate,
			MailingName, 
			UserName,
			Installation,
			ApplicationUseFlag,
			TotalRowCount
	FROM	
		(SELECT 
			MH$9NID		AS AnnouncementID,
			MH$9APFL	AS AnnouncementType,
			MH$9WAN8	AS WebAccountID,
			MH$9INID	AS InstallationID,
			MH$9AN8		AS AddressNumber,
			MHIDLN		AS ContactId,
			MH$9MDT		AS AcceptanceDate,
			CASE ANNH.MH$9TYP WHEN 0 THEN CUST.WWMLNM ELSE CONS.PCMLNM END AS  MailingName, 
			WUSR.WAEMAL AS UserName,
			INID.INDSC1 AS Installation,
			INID.IN$9APFL AS ApplicationUseFlag,
			ROW_NUMBER() OVER (ORDER BY (MH$9MDT) DESC) AS RNUM,  
			COUNT(*) OVER () AS TotalRowCount  
		FROM [SCDATA].FQ67105H ANNH
		INNER JOIN [SCDATA].FQ670001 INID 
			ON INID.IN$9INID =  ANNH.MH$9INID 	  
		INNER JOIN [SCDATA].FQ67101 WUSR 
			ON ANNH.MH$9WAN8 = WUSR.WA$9WAN8 
		LEFT OUTER JOIN [SCDATA].F0111 CUST
			ON CUST.WWAN8 = ANNH.MH$9AN8 AND 
			CUST.WWIDLN = ANNH.MHIDLN  AND
			ANNH.MH$9TYP = 0 /*Customer Only*/
		LEFT OUTER JOIN [SCDATA].FQ67303 CONS
			ON ANNH.MH$9AN8 = CONS.PC$9AN8 AND 
			ANNH.MHIDLN = CONS.PCIDLN AND		  
			ANNH.MH$9TYP = 1 /*Consumer Only*/      
		WHERE 
			MH$9NID = @AnnouncementID AND
			MH$9APFL = @AnnouncementType AND
			(@FilterTerm = '*' OR 
			WUSR.WAEMAL LIKE '%' +  @FilterTerm + '%' 
			OR CUST.WWMLNM LIKE '%' +  @FilterTerm + '%' 
			OR CONS.PCMLNM LIKE '%' +  @FilterTerm + '%') AND
			(MH$9A1ST = 'R' OR MH$9A1ST = 'RB' OR MH$9A1ST = 'D')) AS ANNOUNCEHIST
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetBranchPlantInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetBranchPlantInfo
	END

GO

-- #desc					Reads BranchPlant information
-- #bl_class				Premier.Common.BranchPlantInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @BranchPlant		BranchPlant
-- #param @PhoneType		PhoneType

CREATE Procedure [DBO].CMM_GetBranchPlantInfo
(
	@BranchPlant	NCHAR(12),
	@PhoneType		NCHAR(4)
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

    IF @PhoneType = '*'
	BEGIN
		SELECT
			A.MCCO	 AS Company,
			B.BILCNF AS AllowPickup,
			C.WWMLNM AS MailingName,
			D.ALCTY1 AS City,
			D.ALADDS AS State,
			D.ALADDZ AS ZipCode,
			D.ALCTR  AS Country,
			D.ALADD1 AS AddressLine1,
			D.ALADD2 AS AddressLine2,
			''		 AS Area,
			''		 AS PhoneNumber
		FROM	
			[SCDATA].F0006 A				/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 F
				ON A.MCMCU = F.CIMCU
			INNER JOIN [SCDATA].FQ679910 B /*AllowPickup*/
				ON  B.BIMCU = A.MCMCU
			LEFT OUTER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = A.MCAN8
				AND C.WWIDLN = 0
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(ISNULL(F.CIAN8, A.MCAN8), @CurrentJulianDate) D	/*Address*/
		WHERE	A.MCMCU = @BranchPlant
	END
	ELSE
	BEGIN
		SELECT
			A.MCCO	 AS Company,
			B.BILCNF AS AllowPickup,
			C.WWMLNM AS MailingName,
			D.ALCTY1 AS City,
			D.ALADDS AS State,
			D.ALADDZ AS ZipCode,
			D.ALCTR  AS Country,
			D.ALADD1 AS AddressLine1,
			D.ALADD2 AS AddressLine2,
			E.WPAR1	 AS Area,
			E.WPPH1	 AS PhoneNumber
		FROM	
			[SCDATA].F0006 A				/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 F
				ON A.MCMCU = F.CIMCU
			INNER JOIN [SCDATA].FQ679910 B /*AllowPickup*/
				ON  B.BIMCU = A.MCMCU
			LEFT OUTER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = A.MCAN8
				AND C.WWIDLN = 0
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(ISNULL(F.CIAN8, A.MCAN8), @CurrentJulianDate) D	/*Address*/
			LEFT OUTER JOIN (
				SELECT TOP 1 WPAR1,WPPH1,WPAN8,WPIDLN  
				FROM  [SCDATA].F0115
				INNER JOIN [SCDATA].F0006 
				ON  WPAN8 = MCAN8      
				WHERE                                    
					WPPHTP = @PhoneType
				AND WPIDLN = 0
				AND MCMCU = @BranchPlant) AS  E /*Phone*/
            ON A.MCAN8 = E.WPAN8					
		WHERE	A.MCMCU = @BranchPlant
	END

	GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetBranchPlantInfoList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetBranchPlantInfoList
	END

GO

-- #desc					Reads Branch Plants by Store
-- #bl_class				Premier.Common.BranchPlantInfoList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			Store Id
-- #param PhoneType			Phone Type Setting
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE Procedure [DBO].CMM_GetBranchPlantInfoList
(
	@StoreId		NCHAR(3),
	@PhoneType		NCHAR(4),
	@PageIndex		INT,
	@PageSize		INT
)
AS
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	-- Dynamic
	DECLARE @COLUMNS_DYNAMIC NVARCHAR(60);
	DECLARE @JOIN_DYNAMIC NVARCHAR(100);
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = N'';
	
	IF EXISTS (SELECT 1 FROM sysobjects WHERE type = 'U' AND id = OBJECT_ID(N'[SCDATA].F0119'))
	BEGIN
		SET @COLUMNS_DYNAMIC = N' F.PXNLATT AS Latitude, F.PXNLONG AS Longitude, ';
		SET @JOIN_DYNAMIC = N' LEFT OUTER JOIN [SCDATA].F0119 F ON F.PXAN8 = A.MCAN8 ';
	END
	ELSE
	BEGIN
		SET @COLUMNS_DYNAMIC = N' 0 AS Latitude, 0 AS Longitude, ';
		SET @JOIN_DYNAMIC = N' ';

	END

	SET @RowStart = (@PageSize * @PageIndex) - @PageSize + 1;
	SET @RowEnd = @PageIndex * @PageSize;
	
	/* Dynamic query */
	SET @SQL_DYNAMIC = 
	N'WITH CTE AS (
		SELECT
			A.MCMCU		AS BranchPlant,
			ISNULL(G.CIAN8, A.MCAN8)		AS AddressNumber,
			A.MCCO		AS Company,
			B.BILCNF	AS AllowPickup,
			C.WWMLNM	AS MailingName,
			
			E.WPAR1		AS Area,
			E.WPPH1		AS PhoneNumber,
			' + @COLUMNS_DYNAMIC + '
			ROW_NUMBER() OVER(ORDER BY A.MCMCU) RNUM
		FROM	
			[SCDATA].F0006 A			/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 G
				ON A.MCMCU = G.CIMCU
			INNER JOIN [SCDATA].FQ679910 B /*AllowPickup*/
				ON B.BI$9INID = @StoreId
				AND B.BIMCU = A.MCMCU
			INNER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = ISNULL(G.CIAN8, A.MCAN8)
				AND C.WWIDLN = 0
			' + @JOIN_DYNAMIC + ' /* Address Book Geo Code */
			OUTER APPLY (
					SELECT TOP 1 WPAR1, WPPH1  
					FROM  [SCDATA].F0115
					WHERE
						WPAN8 = A.MCAN8
						AND WPIDLN = 0                 
						AND WPPHTP = @PhoneType
			) AS  E /*Phone*/
	)
	SELECT
		A.BranchPlant,
		A.AddressNumber,
		A.Company,
		A.MailingName,
		A.AllowPickup,
		D.ALADD1	AS AddressLine1,
		D.ALADD2	AS AddressLine2,
		D.ALCTY1	AS City,
		D.ALADDS	AS State,
		D.ALADDZ	AS ZipCode,
		D.ALCTR		AS Country,
		A.Area,
		A.PhoneNumber,
		A.Latitude,
		A.Longitude,
		(SELECT COUNT(1) FROM CTE) TotalRowCount
	FROM CTE A
		CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(A.AddressNumber, @CurrentJulianDate) D	/*Address*/
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (A.RNUM BETWEEN @RowStart AND @RowEnd));'

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@StoreId NCHAR(3), @CurrentJulianDate NUMERIC, @PhoneType NVARCHAR(4), @PageIndex INT, @PageSize INT, @RowStart INT, @RowEnd INT', 
										@StoreId = @StoreId, @CurrentJulianDate = @CurrentJulianDate, @PhoneType = @PhoneType, @PageIndex = @PageIndex, @PageSize = @PageSize, 
										@RowStart = @RowStart, @RowEnd = @RowEnd
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetBranchPlantList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetBranchPlantList
	END

GO

-- #desc					Get Branch Plants 
-- #bl_class				Premier.Common.BranchPlantList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @BranchPlant		Branch Plant (MCU)
-- #param @Description		Description

CREATE Procedure [DBO].CMM_GetBranchPlantList
	@InstallationID NVARCHAR(3),
	@BranchPlant	NVARCHAR(12),
	@Description	NVARCHAR(30)
AS

	IF ( @InstallationID = '*')
	 BEGIN
		SELECT 
			A.MCMCU BranchPlant, 
			A.MCDL01 Description		
		FROM 
			[SCDATA].F0006 A
		WHERE 		
			(@BranchPlant = '*' OR A.MCMCU LIKE '%' + RTRIM(@BranchPlant) + '%') AND
			(@Description = '*' OR A.MCDL01 LIKE '%' + LTRIM(RTRIM(@Description)) + '%')
		ORDER BY 
			A.MCMCU
	 END
	ELSE
	 BEGIN
		SELECT 
			A.MCMCU BranchPlant, 
			A.MCDL01 Description		
		FROM 
			[SCDATA].F0006 A
			INNER JOIN [SCDATA].FQ679910 B 
			ON A.MCMCU = B.BIMCU
		WHERE 
			-- Installation ID filter	
			B.BI$9INID = @InstallationID AND
			(@BranchPlant = '*' OR A.MCMCU LIKE '%' + RTRIM(@BranchPlant) + '%') AND
			(@Description = '*' OR A.MCDL01 LIKE '%' + LTRIM(RTRIM(@Description)) + '%')
		ORDER BY A.MCMCU
	 END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetBranchPlantListNotRel'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetBranchPlantListNotRel
	END

GO

-- #desc						Get Branch Plants Not Related
-- #bl_class					Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @BranchPlant			Branch Plant
-- #param @Description			Description

CREATE Procedure [DBO].CMM_GetBranchPlantListNotRel
	@InstallationID NVARCHAR(3),
	@BranchPlant	NVARCHAR(12),
	@Description	NVARCHAR(30)
AS
	BEGIN
		SELECT
			A.MCMCU BranchPlant, 
			A.MCDL01 Description,
			'N' AllowPickup
		FROM
			[SCDATA].F0006 A			
		WHERE 
			-- Installation ID filter				
			A.MCMCU Not in (SELECT B.BIMCU FROM [SCDATA].FQ679910 AS B WHERE B.BI$9INID = @InstallationID) AND
			(@BranchPlant = '*' OR A.MCMCU LIKE '%' + RTRIM(@BranchPlant) + '%') AND
			(@Description = '*' OR A.MCDL01 LIKE '%' + LTRIM(RTRIM(@Description)) + '%')
		ORDER BY
			A.MCMCU ASC
	END 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetBranchPlantListRelated'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetBranchPlantListRelated
	END

GO

-- #desc					Get Branch Plants Related
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID

CREATE Procedure [DBO].CMM_GetBranchPlantListRelated
	@InstallationID NVARCHAR(3)
AS
	BEGIN
		SELECT
			A.MCMCU BranchPlant, 
			A.MCDL01 Description,
			B.BILCNF AllowPickup
		FROM
			[SCDATA].F0006 A
			INNER JOIN [SCDATA].FQ679910 B ON
			A.MCMCU = B.BIMCU
		WHERE 
			-- Installation ID filter	
			B.BI$9INID = @InstallationID
		ORDER BY
			A.MCMCU ASC
	END
			

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCompaniesByInstList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCompaniesByInstList
	END

GO

-- #desc						Get Companies By Installation List
-- #bl_class					Premier.Common.CompanyList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID	    Installation ID

CREATE Procedure [DBO].CMM_GetCompaniesByInstList	
	@InstallationID		NVARCHAR(3)
AS
	
	DECLARE @CompanyConstant NVARCHAR(256)
    DECLARE @ConstantInstallation NVARCHAR(3)
	
	--RGM this call change the output installation back up before send it.
    SET @ConstantInstallation = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY ', @ConstantInstallation OUT, @CompanyConstant OUT

	SELECT 
		CCCO AS CompanyID, 
		CCNAME AS Description1, 
		CCCRCD	AS CurrencyCode,
		(CASE WHEN CICO IS NULL THEN 'N' ELSE 'Y' END) AS IsRelated  
	FROM 
		[SCDATA].F0010
	LEFT OUTER JOIN [SCDATA].FQ679912
		ON CICO = CCCO 
		AND CI$9INID = @ConstantInstallation
	WHERE 
		CCCO <> '00000'	
		
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCompanyInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCompanyInfo
	END

GO
-- #desc				Get Company Info
-- #bl_class			Premier.Common.CompanyInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param CompanyID	Company ID

CREATE Procedure [DBO].CMM_GetCompanyInfo	
	@CompanyID		NVARCHAR(5)	
AS
	SELECT 
		CCCO	AS CompanyID, 
		CCNAME	AS Description1, 
		CCCRCD	AS CurrencyCode,
		' '		AS IsRelated  
	FROM [SCDATA].F0010
	WHERE
		CCCO = @CompanyID
		
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCompanyList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCompanyList
	END

GO
-- #desc					Get Company List
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE Procedure [DBO].CMM_GetCompanyList		
AS
	SELECT 
		CCCO	AS CompanyID, 
		CCNAME	AS Description1, 
		CCCRCD	AS CurrencyCode,
		' '		AS IsRelated  
	FROM [SCDATA].F0010
		
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetConstant'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetConstant
	END

GO

-- #desc							Get constant by installation 
-- #bl_class						Premier.Common.Constant.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @Constant					Constant ID
-- #param @InstallationID			Installation ID

CREATE Procedure [DBO].CMM_GetConstant
	
	@Constant		NVARCHAR(10),
	@InstallationID NVARCHAR(3)
	
AS
	SET NOCOUNT ON

	SELECT  
		A.CN$9VAL  ConstantValue,
		A.CN$9CNST  Constant,
		A.CN$9INID InstallationID,
		B.CN$9SOF  SystemOnlyFlag
	FROM  
		[SCDATA].FQ670004 A
		INNER JOIN
         [SCDATA].FQ670003 B ON A.CN$9CNST = B.CN$9CNST
	WHERE 
		A.CN$9INID = @InstallationID AND 
		A.CN$9CNST = @Constant

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetConstantHeader'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetConstantHeader
	END

GO


-- #desc					Reads contant header
-- #bl_class				Premier.Common.ConstantHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ConstantID		Constant ID

CREATE Procedure [DBO].CMM_GetConstantHeader
	@ConstantID		NVARCHAR(10)

AS

    SELECT  
		CN$9CNST	ConstantID,
		CNSYS		SubSystemCode,  
		CNDTA1		Description1,
	    CNDTA2		Description2,
		CNSY		ProductCode,
	    CNRT		UserDefinedCode,
	    CN$9SOF		SystemOnlyFlag	
	    -- Constants Master 	
     FROM  
		[SCDATA].FQ670003 CNST
     WHERE 
	    -- Constant Id filter	
  	    CNST.CN$9CNST = @ConstantID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetConstantHeaderList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetConstantHeaderList
	END

GO

-- #desc						Get constant header list
-- #bl_class					Premier.Common.ConstantHeaderList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Constant				Constant ID
-- #param @Description1			Description
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown

CREATE Procedure [DBO].CMM_GetConstantHeaderList
	
	@ConstantID		NVARCHAR(10),
	@Description1	NVARCHAR(256),
	@PageIndex		INT,
    @PageSize		INT

AS
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	IF (@ConstantID = '*' AND @Description1 = '*') BEGIN
		;WITH CTE AS (
			SELECT 
				CN$9CNST	AS ConstantID,
				CNDTA1		AS Description1,
				CNDTA2		AS Description2,
				CNSY		AS ProductCode,
				CNRT		AS UserDefinedCode,
				CN$9SOF 	AS SystemOnlyFlag,
				ROW_NUMBER() OVER (ORDER BY CN$9CNST) AS RNUM
			FROM 
				[SCDATA].FQ670003 
		)
		SELECT 
			A.ConstantID,
			A.Description1,
			A.Description2,
			A.ProductCode,
			A.UserDefinedCode,
			A.SystemOnlyFlag,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END
	ELSE BEGIN
		;WITH CTE AS (
			SELECT 
				CN$9CNST	AS ConstantID,
				CNDTA1		AS Description1,
				CNDTA2		AS Description2,
				CNSY		AS ProductCode,
				CNRT		AS UserDefinedCode,
				CN$9SOF 	AS SystemOnlyFlag,
				ROW_NUMBER() OVER (ORDER BY CN$9CNST) AS RNUM
			FROM 
				[SCDATA].FQ670003 
			WHERE		
				(@ConstantID = '*' OR CN$9CNST LIKE '%' + @ConstantID + '%') 
				AND
				(@Description1 = '*' OR CNDTA1 LIKE '%' + @Description1 + '%')
		)
		SELECT 
			A.ConstantID,
			A.Description1,
			A.Description2,
			A.ProductCode,
			A.UserDefinedCode,
			A.SystemOnlyFlag,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END;

GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetConstantInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetConstantInfo
	END

GO

-- #desc							Get constant by installation 
-- #bl_class						Premier.Common.ConstantInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @Constant					Constant ID
-- #param @InstallationID			Installation ID

CREATE Procedure [DBO].CMM_GetConstantInfo
	@Constant		NVARCHAR(10),
	@InstallationID NVARCHAR(3)
AS
	SET NOCOUNT ON
	
	Declare @ConstantValue NVARCHAR(256)
	SET @ConstantValue = null;
	
	--First try to get constant by installation defined value
	SELECT  
		@ConstantValue = CN$9VAL
	FROM  
		[SCDATA].FQ670004 A
	WHERE 
		A.CN$9INID = @InstallationID AND 
		A.CN$9CNST = @Constant

	--select @ConstantValue as value
	
	--Check value, if null then get base value
	IF @ConstantValue IS NULL
	BEGIN
		SET @InstallationID = '***'	
		
		SELECT  
			@ConstantValue = CN$9VAL
		FROM  
			[SCDATA].FQ670004 A
		WHERE 
			A.CN$9INID = @InstallationID AND 
			A.CN$9CNST = @Constant
	END
	
	--Return
	SELECT  
			@ConstantValue as  ConstantValue,
			@InstallationID as InstallationID,
			@Constant as Constant
			

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetConstantInfobyValue'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetConstantInfobyValue
	END

GO

-- #desc						Get constant by value
-- #bl_class					Premier.Common.ConstantInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Constant				Constant ID
-- #param @ConstantValue		Constant Value

CREATE Procedure [DBO].CMM_GetConstantInfobyValue
	@Constant		NVARCHAR(10),
	@ConstantValue	NVARCHAR(256)
AS
	SET NOCOUNT ON
	
	DECLARE @InstallationID NVARCHAR(3);
	DECLARE @ConstantValueTemp	NVARCHAR(256);
	
	SET @ConstantValueTemp = REPLACE(REPLACE(@ConstantValue,'http://',''), 'https://','')

	--Get installation constant by value
	SELECT TOP 1 
		@InstallationID = A.CN$9INID
	FROM  
		[SCDATA].FQ670004 A
	WHERE 
		REPLACE(REPLACE(A.CN$9VAL,'http://',''), 'https://','') = @ConstantValueTemp AND 
		A.CN$9CNST = @Constant

	
	--Return
	SELECT  
			@ConstantValueTemp	AS  ConstantValue,
			@InstallationID AS	InstallationID,
			@Constant		AS	Constant
			
  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetConstantList'))
BEGIN
	DROP  Procedure  [DBO].CMM_GetConstantList
END

GO

-- #desc                    Get Constant List.
-- #bl_class                Premier.Common.ConstantList.cs
-- #db_dependencies			N/A
-- #db_references			N/A


-- #param @Constant         Constant ID

CREATE PROCEDURE [DBO].CMM_GetConstantList
	@Constant		NVARCHAR(10)
AS
	SET NOCOUNT ON

	SELECT  
		A.CN$9VAL  ConstantValue,
		A.CN$9CNST  Constant,
		A.CN$9INID InstallationID,
		B.CN$9SOF  SystemOnlyFlag
	FROM  
		[SCDATA].FQ670004 A
		INNER JOIN [SCDATA].FQ670003 B 
			ON A.CN$9CNST = B.CN$9CNST
	WHERE 
		A.CN$9CNST = @Constant
GO
    IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCurrencyDetailList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCurrencyDetailList
	END

GO

-- #desc					Get currency header List
-- #bl_class				Premier.Common.CurrencyDetailList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code

CREATE PROCEDURE [DBO].CMM_GetCurrencyDetailList
(
	@CurrencyCode	NVARCHAR(3)
)
AS
	SET NOCOUNT ON

	SELECT
		CICRCD	AS CurrencyCode,
		CILNID	AS SequenceID,
		CIAEXP	AS Amount,
		CIDL01	AS Description,
		CIBCF8	AS CoinBillFlag,
		CISPEOW AS IsSpeedCash,
		CIUSER	AS UserID,   
		CIPID	AS ProgramID,
		CIJOBN	AS WorkStationID,
		CIUPMJ	AS DateUpdated,
		CIUPMT	AS TimeLastUpdated  
	FROM
		[SCDATA].FQ67012
	WHERE
		CICRCD = @CurrencyCode
	ORDER BY CIAEXP ASC
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCurrencyHeader'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCurrencyHeader
	END

GO

-- #desc					Get currency header
-- #bl_class				Premier.Common.CurrencyHeader.cs/CurrencyHeaderInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code

CREATE PROCEDURE [DBO].CMM_GetCurrencyHeader
(
    @CurrencyCode	NVARCHAR(3)
)
AS
	SET NOCOUNT ON

	SELECT
		A.CICRCD		AS CurrencyCode,
		B.CVDL01		AS CurrencyDescription,
		A.CICC0			AS CurrencySymbol,
		A.CIRULENAME	AS RoundingRule
	FROM
		[SCDATA].FQ67011 A
	LEFT OUTER JOIN [SCDATA].F0013 B
		ON B.CVCRCD = A.CICRCD
	WHERE
		A.CICRCD = @CurrencyCode

	EXEC [DBO].CMM_GetCurrencyDetailList @CurrencyCode

GO
   IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCurrencyHeaderList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCurrencyHeaderList
	END

GO

-- #desc					Get currency header List
-- #bl_class				Premier.Common.CurrencyHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code

CREATE PROCEDURE [DBO].CMM_GetCurrencyHeaderList
AS
	SET NOCOUNT ON

	SELECT
		A.CICRCD		AS CurrencyCode,
		B.CVDL01		AS CurrencyDescription,
		A.CICC0			AS CurrencySymbol,
		A.CIRULENAME	AS RoundingRule
	FROM
		[SCDATA].FQ67011 A
	LEFT OUTER JOIN [SCDATA].F0013 B
		ON B.CVCRCD = A.CICRCD
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCurrencyInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCurrencyInfo
	END

GO

-- #desc				Get Currency Information
-- #bl_class			Premier.Common.GetCurrencyInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].CMM_GetCurrencyInfo
	@CurrencyCode		NVARCHAR(3)
AS
	SET NOCOUNT ON

	SELECT 
		C.CVCRCD AS CurrencyCode,
		C.CVDL01 AS CurrencyDesc
	FROM 
		[SCDATA].F0013 C
	WHERE  
		C.CVCRCD = @CurrencyCode

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetCurrencyList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetCurrencyList
	END

GO

-- #desc				Get Currency List
-- #bl_class			Premier.Common.CurrencyList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].CMM_GetCurrencyList
AS
	SET NOCOUNT ON

	SELECT 
		C.CVDL01 AS CurrencyDesc,
		C.CVCRCD AS CurrencyCode
	FROM 
		[SCDATA].F0013 C

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetDocRestricListNotRel'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetDocRestricListNotRel
	END

GO

-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @Constant			Constant Id
-- #param @ProductCode		Product code
-- #param @UserDefinedCode	User define code

CREATE PROCEDURE [DBO].CMM_GetDocRestricListNotRel  
(
    @InstallationID		NVARCHAR(3),
    @ConstantID			NVARCHAR(10),
	@ProductCode		NVARCHAR(4),
	@UserDefinedCode	NVARCHAR(2)
)

AS
SET NOCOUNT ON
	DECLARE	@CODELENGTH INTEGER;
	SET @CODELENGTH = 0;
	SET @CODELENGTH = ( SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = @ProductCode AND DTRT = @UserDefinedCode);

	SELECT	
			@InstallationID	AS InstallationID,
			@ConstantID		AS ConstantID,
			A.DRSY		AS ProductCode,
			A.DRRT		AS UserDefinedCode,
			SUBSTRING (A.DRKY,10-@CODELENGTH+1 ,@CODELENGTH) AS UserDefinedKey, 
			A.DRDL01 	AS DescriptionUDC,
			A.DRDL02	AS DescriptionUDC2,
			'' AS UserReservedCode,
			0 AS UserReservedDate,
			0 AS UserReservedAmount,
			0 AS UserReservedNumber,
			'' AS UserReservedReference
	FROM	[SCCTL].F0005 A
	WHERE	A.DRSY = @ProductCode
	AND	A.DRRT = @UserDefinedCode
	AND	SUBSTRING(A.DRKY, 10 - @CodeLength + 1, @CodeLength) NOT IN (SELECT ISNULL(DRKY,'')
							  FROM	 [SCDATA].FQ67008 DR
							  WHERE  DR$9INID = @InstallationID
							  AND    DRSY	  = @ProductCode
							  AND    DRRT     = @UserDefinedCode
						      AND    DR$9CNST = @ConstantID)
	ORDER BY DRKY;

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetDocRestricListRelated'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetDocRestricListRelated
	END
GO

-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @Constant			Constant Id
-- #param @ProductCode		Product code
-- #param @UserDefinedCode	User define code 

CREATE PROCEDURE [DBO].CMM_GetDocRestricListRelated
(
    @InstallationID		NVARCHAR(3),
    @ConstantID			NVARCHAR(10),
	@ProductCode		NVARCHAR(4),
	@UserDefinedCode	NVARCHAR(2),
	@LangPref			NVARCHAR(2)
)

AS

SET NOCOUNT ON

	DECLARE @CodeLength  INT
	
	-- Get Code Length
	SET @CodeLength = 0
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
		  WHERE DTSY = @ProductCode AND DTRT = @UserDefinedCode)
 
 /*Note: Join with table F0005 must be an outer join because Related Doc Restrictions list must display all values even when
   the UDC was deleted from F0005*/
	SELECT	
			A.DR$9INID	AS InstallationID,
			A.DR$9CNST	AS ConstantID,
			A.DRSY		AS ProductCode,
			A.DRRT		AS UserDefinedCode,
			A.DRKY 		AS UserDefinedKey,
			ISNULL(C.DRDL01,B.DRDL01) AS DescriptionUDC,
			B.DRDL02	AS DescriptionUDC2,
			A.DRURCD AS UserReservedCode,
			A.DRURDT AS UserReservedDate,
			A.DRURAT AS UserReservedAmount,
			A.DRURAB AS UserReservedNumber,
			A.DRURRF AS UserReservedReference
	FROM	[SCDATA].FQ67008 A	
	LEFT OUTER JOIN [SCCTL].F0005 B		
		ON B.DRRT = A.DRRT
		AND B.DRSY = A.DRSY
	LEFT OUTER JOIN [SCCTL].F0005D C
        ON	C.DRSY = B.DRSY
        AND C.DRRT = B.DRRT
        AND C.DRKY = B.DRKY
        AND C.DRLNGP = @LangPref
	WHERE	
		A.DR$9INID	= @InstallationID AND
		A.DR$9CNST	= @ConstantID AND
		A.DRSY	= @ProductCode AND
		A.DRRT = @UserDefinedCode AND
		SUBSTRING(B.DRKY, 10 - @CodeLength + 1, @CodeLength) = A.DRKY

	ORDER BY A.DRKY;
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetDocRestricRelatedInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetDocRestricRelatedInfo
	END

GO
-- #desc					Reads an Document Restriction information
-- #bl_class				Premier.Common.DocRestricInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @Constant			Constant Id
-- #param @ProductCode		Product code
-- #param @UserDefinedCode	User define code 
-- #param @UserDefinedKey   User Defined Key
-- #param @LangPref			Language Preference

CREATE Procedure [DBO].CMM_GetDocRestricRelatedInfo
	@InstallationID		NVARCHAR(3),
    @ConstantID			NVARCHAR(10),
	@ProductCode		NVARCHAR(4),
	@UserDefinedCode	NVARCHAR(2),
	@UserDefinedKey		NVARCHAR(10),
	@LangPref			NVARCHAR(2)	
AS

SET NOCOUNT ON
	DECLARE @CodeLength  INT
	
	-- Get Code Length
	SET @CodeLength = 0
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004 WHERE DTSY = @ProductCode AND DTRT = @UserDefinedCode)
   
   /*Note: Join with table F0005 must be an outer join because Related Doc Restrictions list must display all values even when
   the UDC was deleted from F0005*/

	SELECT	
		A.DR$9INID					AS InstallationID,
		A.DR$9CNST					AS ConstantID,
		A.DRSY						AS ProductCode,
		A.DRRT						AS UserDefinedCode,
		A.DRKY 						AS UserDefinedKey,
		ISNULL(C.DRDL01,B.DRDL01)	AS DescriptionUDC,
		B.DRDL02					AS DescriptionUDC2,
		A.DRURCD					AS UserReservedCode,
		A.DRURDT					AS UserReservedDate,
		A.DRURAT					AS UserReservedAmount,
		A.DRURAB					AS UserReservedNumber,
		A.DRURRF					AS UserReservedReference
	FROM [SCDATA].FQ67008 A	
	LEFT OUTER JOIN [SCCTL].F0005 B		
		ON B.DRRT = A.DRRT
		AND B.DRSY = A.DRSY
		AND  SUBSTRING(B.DRKY, 10 - @CodeLength + 1, @CodeLength) = A.DRKY
	LEFT OUTER JOIN [SCCTL].F0005D C
        ON	C.DRSY = B.DRSY
        AND C.DRRT = B.DRRT
        AND C.DRKY = B.DRKY
        AND C.DRLNGP = @LangPref	
	WHERE	
		A.DR$9INID	= @InstallationID AND
		A.DR$9CNST	= @ConstantID AND
		A.DRSY	= @ProductCode AND
		A.DRRT = @UserDefinedCode AND
		A.DRKY = @UserDefinedKey
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetDryStateList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetDryStateList
	END

GO

-- #desc						Gets dry state list
-- #bl_class					Premier.Common.DryStateList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @LangPref				LangPref

CREATE PROCEDURE [DBO].CMM_GetDryStateList
(
	@InstallationID		NVARCHAR(3),
	@DocumentType		NVARCHAR(2),
	@ItemNumber			FLOAT,
	@LangPref			NVARCHAR(2)
)
AS

SET NOCOUNT ON

		DECLARE @CodeLength  INT
		DECLARE @SalesReportingCode1 NVARCHAR(3)
		-- Get Code Length
		SET @CodeLength = 0;
		SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'S');
						
		SET @SalesReportingCode1 = (SELECT	IMSRP1
									FROM 	[SCDATA].F4101
									WHERE	IMITM = @ItemNumber);
		
		SELECT 	
				SC$9CLR + ';' + LTRIM(RTRIM(DRKY)) AS UserDefinedKey,
				[DBO].CMM_GetUserDefinedCodeFnc('00','S',SCADDS,@LangPref) AS DescriptionUDC
			FROM [SCDATA].FQ675520
			INNER JOIN [SCCTL].F0005	
				ON DRSY = '00' 
				AND DRRT = 'S'
			WHERE 	 
				SUBSTRING(DRKY, 10 - @CodeLength + 1, @CodeLength) = SCADDS 
			AND SC$9CSR = CASE SC$9CSR 
						WHEN '1' THEN  
							ISNULL((SELECT	SC$9CSR 
									FROM	[SCDATA].FQ675522  
									WHERE  	SCADDS = DTADDS 
										AND DTDCT = @DocumentType
										AND SCCTR = DTCTR),'0')
						ELSE 
							SC$9CSR 
						END
				AND ((@SalesReportingCode1 <> '' 
						AND (SUBSTRING(DRKY, 10 - @CodeLength + 1, @CodeLength) 
						IN (SELECT	
								DISTINCT LDADDS
							FROM [SCDATA].FQ675511  	A
							INNER JOIN [SCDATA].FQ679910    	B
								ON B.BIMCU = A.LDMCU
							WHERE	B.BI$9INID = @InstallationID
								AND	A.LD$9SRP1 = @SalesReportingCode1))) -- IF LICENSE EXISTS LOOKS FOR STATES WITH PERMISSION
					  OR
					 (@SalesReportingCode1 = '') -- LICENSE DOESN'T EXISTS
					);

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetGeneralAnnounceLangs'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetGeneralAnnounceLangs
	END
GO
-- #desc						Read General Announcement Langs
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AnnouncementID		Announcement ID
-- #param @DesignStatus			DesignStatus

CREATE PROCEDURE [DBO].CMM_GetGeneralAnnounceLangs
(
  @AnnouncementID	 FLOAT,
  @DesignStatus		 FLOAT
)
AS
	SELECT 
		ML$9NID			AS AnnouncementID,
		ML$9DS			AS DesignStatus,
		MLLNGP			AS LangPref,
		[DBO].CMM_GetUserDefinedCodeFnc( '01', 'LP', MLLNGP, '*') AS LanguageDescE1,
		ML$9MTT			AS Title,
		ML$9MSC			AS HtmlContent
	  FROM  
		[SCDATA].FQ67105L L
	  WHERE 
			ML$9NID = @AnnouncementID AND
			ML$9DS = @DesignStatus
	  ORDER BY L.ML$9NID, L.MLLNGP
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetGeneralAnnouncement'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetGeneralAnnouncement
	END

GO

-- #desc						Get General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				CMM_GetGeneralAnnounceLangs
-- #db_references				N/A

-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.


CREATE PROCEDURE [DBO].CMM_GetGeneralAnnouncement
(
	@AnnouncementID	FLOAT,
	@DesignStatus	FLOAT
)
AS
	SELECT  		
		MS$9NID AS AnnouncementID,
		MS$9DS  AS DesignStatus,
		MS$9PRI AS Priority,
		MS$9MST AS AccessLevel,
		MSEFFF  AS EffectiveDate,
		MSEFFT  AS ExpirationDate,
		MS$9MTT AS Title,
		MS$9MSC AS HtmlContent,
		MS$9MLK AS Url,
		MSURCD  AS UserReservedCode,
		MSURDT  AS UserReservedDate,
		MSURAT  AS UserReservedAmount,
		MSURAB  AS UserReservedNumber,
		MSURRF  AS UserReservedReference,
		MSUSER  AS UserID,
		MSPID   AS ProgramID,
		MSJOBN  AS WorkStationID,
		MSUPMJ  AS DateUpdated,
		MSTDAY  AS TimeOfDay
		
	FROM  
		[SCDATA].FQ67105
	WHERE  
		MS$9NID  =  @AnnouncementID
		AND (@DesignStatus IS NULL OR MS$9DS = @DesignStatus)
		
EXEC [DBO].CMM_GetGeneralAnnounceLangs @AnnouncementID, @DesignStatus
EXEC [DBO].CMM_GetAnnounceInstallations @AnnouncementID, 'AGen'



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetGnrlAnnounceAssignLst'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetGnrlAnnounceAssignLst
	END

GO
-- #desc							Get the General Announcements Assignments
-- #bl_class						Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param @AnnouncementID			Announcement ID	
--	#param @AssignmentType			Assignment Type		Any = 0 |  AddressBookCategoryCode = 1 | ConsumerCategoryCode = 2 | CustomerNumber = 3 | ConsumerNumber = 4 | WebAccount = 5
--	#param @FilterTerm				Filter Term
--	#param @PageIndex				PageIndex		
--  #param @PageSize					PageSize		
--  #param @TotalRowCount			TotalRowCount

CREATE PROCEDURE [DBO].CMM_GetGnrlAnnounceAssignLst
(
	@AnnouncementID			FLOAT,
	@AssignmentType			FLOAT,
	@FilterTerm				NVARCHAR(15),
	@PageIndex				FLOAT,
	@PageSize				FLOAT,
	@TotalRowCount			int OUTPUT
)
AS
	DECLARE @ROWSTART	INT;
	DECLARE @ROWEND     INT;
	DECLARE @CodeLength  INT;

	CREATE TABLE #FinalTable
	( 
		nID					int identity,
		ANNOUNCEMENTID		FLOAT, 
		UNIQUEKEYID			FLOAT, 
		ASSIGNMENTTYPE		FLOAT,
		ASSIGNMENTVALUE		NVARCHAR(256) collate DATABASE_DEFAULT,
		DESCRIPTION			NVARCHAR(256) collate DATABASE_DEFAULT,
		CATEGORYCODE		NCHAR(10)
	)  
	SET NOCOUNT ON	

	BEGIN
	IF(@AssignmentType = 1 OR @AssignmentType IS NULL)BEGIN /* CUSTOMER CATEGORY CODE */
	;WITH CTE AS (
       SELECT 
              AA.MA$9NID           AS AnnouncementID,
              AA.MAUKID            AS UniqueKeyID,
              AA.MA$9ATYP          AS AssignmentType,
              AA.MAKY                    AS AssignmentValue,
              [DBO].CMM_GetUserDefinedCodeFnc('01', SUBSTRING(AA.MADTAI,3,LEN(AA.MADTAI)-2),AA.MAKY,'*') AS Description, 
              SUBSTRING(AA.MADTAI,3,LEN(AA.MADTAI)-2) AS CategoryCode
       FROM [SCDATA].FQ67105A AA    
       WHERE  AA.MA$9NID =  @AnnouncementID
              AND AA.MA$9ATYP = 1
	)
	INSERT INTO #FinalTable
	SELECT 
       A.AnnouncementID,
       A.UniqueKeyID,
       A.AssignmentType,
       A.AssignmentValue,
       A.Description, 
       A.CategoryCode
	FROM CTE A           
	WHERE ( @FilterTerm = '*' OR A.AssignmentValue LIKE '%' +  @FilterTerm + '%' OR A.Description LIKE '%' +  @FilterTerm + '%')

	END;
	IF(@AssignmentType = 2 OR @AssignmentType IS NULL)

	BEGIN /* CONSUMER CATEGORY CODE */
	;WITH CTE AS (
       SELECT 
              AA.MA$9NID           AS AnnouncementID,
              AA.MAUKID            AS UniqueKeyID,
              AA.MA$9ATYP          AS AssignmentType,
              AA.MAKY                    AS AssignmentValue,
              [DBO].CMM_GetUserDefinedCodeFnc('59', SUBSTRING(AA.MADTAI,5,LEN(AA.MADTAI)-4),AA.MAKY,'*') AS Description, 
              SUBSTRING(AA.MADTAI,5,LEN(AA.MADTAI)-4) AS CategoryCode
       FROM [SCDATA].FQ67105A AA    
                            
       WHERE  AA.MA$9NID =  @AnnouncementID
              AND AA.MA$9ATYP = 2
	)
	INSERT INTO #FinalTable
		SELECT 
		  A.AnnouncementID,
		  A.UniqueKeyID,
		  A.AssignmentType,
		  A.AssignmentValue,
		  A.Description, 
		  A.CategoryCode
		FROM CTE A
		WHERE
		    ( @FilterTerm = '*' OR A.AssignmentValue LIKE '%' +  @FilterTerm + '%' OR A.Description LIKE '%' +  @FilterTerm + '%')

	END;

	IF(@AssignmentType = 3 OR @AssignmentType IS NULL)BEGIN /* CUSTOMER NUMBER */
		INSERT INTO #FinalTable
		SELECT 
			AA.MA$9NID		AS AnnouncementID,
			AA.MAUKID		AS UniqueKeyID,
			AA.MA$9ATYP		AS AssignmentType,
			STR(AA.MA$9AN8, 25)	AS AssignmentValue, 
			CUST.ABALPH		AS Description,
			'' AS CategoryCode
		FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */
		LEFT OUTER JOIN [SCDATA].F0101 CUST			/* CUSTOMER TABLE */
		ON	CUST.ABAN8 = AA.MA$9AN8			   		
		WHERE	AA.MA$9NID = @AnnouncementID
			AND	AA.MA$9ATYP = 3
			AND ( @FilterTerm = '*' OR AA.MA$9AN8 LIKE '%' +  @FilterTerm + '%' 
								OR CUST.ABALPH LIKE '%' +  @FilterTerm + '%')
	END;

	IF(@AssignmentType = 4 OR @AssignmentType IS NULL)BEGIN /* CONSUMER NUMBER */
		INSERT INTO #FinalTable
		SELECT 
			AA.MA$9NID		AS AnnouncementID,
			AA.MAUKID		AS UniqueKeyID,
			AA.MA$9ATYP		AS AssignmentType,	
			STR(AA.MA$9AN8, 25) AS AssignmentValue,
			CONS.PRALPH		AS Description,
			'' AS CategoryCode
		FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */
		LEFT OUTER JOIN [SCDATA].FQ670302 CONS		/* CONSUMER TABLE */
		ON	CONS.PR$9AN8 = AA.MA$9AN8			   		
		WHERE	AA.MA$9NID = @AnnouncementID
			AND AA.MA$9ATYP = 4
			AND	( @FilterTerm = '*' OR AA.MA$9AN8 LIKE '%' +  @FilterTerm + '%' 
								OR CONS.PRALPH LIKE '%' +  @FilterTerm + '%')
	END;

	IF(@AssignmentType = 5 OR @AssignmentType IS NULL)BEGIN  /* WEB ACCOUNT ID */
		INSERT INTO #FinalTable
		SELECT 
			AA.MA$9NID						AS AnnouncementID,
			AA.MAUKID						AS UniqueKeyID,
			AA.MA$9ATYP						AS AssignmentType, 
			STR(WA.WA$9AN8, 25) + '-' + STR(WA.WAIDLN,  5)	AS AssignmentValue,
			WA.WAEMAL						AS Description,
			'' AS CategoryCode
		FROM [SCDATA].FQ67105A AA							/* ANNOUNCEMENT ASSIGNMENTS */
		LEFT OUTER JOIN [SCDATA].FQ67101 WA				/* WEB ACCOUNT TABLE */
		ON	WA.WA$9WAN8 = AA.MA$9WAN8			   		
		WHERE AA.MA$9NID = @AnnouncementID 
		  AND AA.MA$9ATYP = 5
		  AND ( @FilterTerm = '*' OR CAST(WA.WA$9AN8 AS NVARCHAR(256)) + '-' + CAST(WA.WAIDLN AS NVARCHAR(256)) LIKE '%' +  @FilterTerm + '%' 
								OR WA.WAEMAL LIKE '%' + @FilterTerm + '%');
	END;

	-------------------------------------------------------
	-- Obtain the total count of the result
	-------------------------------------------------------
	SELECT @TotalRowCount = COUNT(*) FROM #FinalTable

	-------------------------------------------------------
	-- Validate if paging is not required
	-------------------------------------------------------
	IF(@PageIndex = 0 OR @PageSize = 0)
	BEGIN
		-------------------------------------------------------
		-- Set the first row to be selected
		-------------------------------------------------------
		SET @ROWSTART = 1
		-------------------------------------------------------
		-- Set the last row to be selected
		-------------------------------------------------------
		SET @ROWEND = @TotalRowCount
	END
	ELSE
	BEGIN
		-------------------------------------------------------
		-- Set the first row to be selected
		-------------------------------------------------------
		SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
		-------------------------------------------------------
		-- Set the last row to be selected
		-------------------------------------------------------
		SET @ROWEND = @PageIndex * @PageSize	
	END
		
	
	SELECT
		AnnouncementID,
		UniqueKeyID,
		AssignmentType,
		AssignmentValue,
		Description,
		CategoryCode 
	FROM #FinalTable
	WHERE nID BETWEEN  @ROWSTART AND @ROWEND
		
END;

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetGnrlAnnounceAssigns'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetGnrlAnnounceAssigns
	END
GO

-- #desc				            Get the General Announcements Assignments
-- #bl_class			            Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies		            N/A
-- #db_references		            N/A

--	#param AnnouncementID			Announcement ID	
--	#param AssignmentType			Assignment Type		Any = 0 |  AddressBookCategoryCode = 1 | ConsumerCategoryCode = 2 | CustomerNumber = 3 | ConsumerNumber = 4 | WebAccount = 5

CREATE PROCEDURE [DBO].CMM_GetGnrlAnnounceAssigns
(
	@AnnouncementID	  FLOAT,
	@AssignmentType	  FLOAT
)
AS
SELECT        MA$9NID       AS AnnouncementID,
              MAUKID        AS UniqueKeyID,
              MA$9ATYP      AS AssignmentType,
              MA$9WAN8      AS WebAccountID,
              WA.WA$9INID   AS InstallationID,
              MA$9AN8              AS AddressNumber,
              MA$9TYP              AS AddressBookType,
              MADTAI        AS DataItem,
              MAKY          AS UserDefinedKey,
              MAURCD        AS UserReservedCode,
              MAURDT        AS UserReservedDate,
              MAURAT        AS UserReservedAmount,
              MAURAB        AS UserReservedNumber,
              MAURRF        AS UserReservedReference,
              MAUSER        AS UserID,
              MAPID         AS ProgramID,
              MAJOBN        AS WorkStationID,
              MAUPMJ        AS DateUpdated,
              MATDAY        AS TimeOfDay
       FROM  [SCDATA].FQ67105A AA
             LEFT OUTER JOIN  [SCDATA].FQ67101 WA ON WA.WA$9WAN8 = AA.MA$9WAN8 AND AA.MA$9ATYP = 5 /* Web Account */
       WHERE AA.MA$9NID = @AnnouncementID AND
              (@AssignmentType IS NULL OR AA.MA$9ATYP = @AssignmentType)

GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetGnrlAnnouncementList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetGnrlAnnouncementList
	END
GO
-- #desc							Get the General Announcements List
-- #bl_class						Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param @DesignStatus			Design Status		0 = Published | 1 = Draft | 2 = Any
--	#param @InstallationID			Installation ID
--	#param @FilterTerm				Filter Term
--	#param @Relation				Relation			Any = 0 | Related = 1 | NotRelated = 2 
--	#param @AnnouncementType		Announcement Type	AGen | ATag
--	#param @PageIndex				PageIndex		
--  #param @PageSize				PageSize

CREATE PROCEDURE [DBO].CMM_GetGnrlAnnouncementList
(
	@DesignStatus		NUMERIC(18,0),
	@InstallationID		NVARCHAR(3),
	@FilterTerm			NVARCHAR(100),
	@Relation			INT,
	@AnnouncementType	NVARCHAR(4),
	@PageIndex			INT,
	@PageSize			INT
)
AS	
	DECLARE @Rowstart INT;
	DECLARE @Rowend INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	/* Relationship		Any = 0 | Related = 1 | NotRelated = 2 | Shared = 3 */
	IF @Relation = 1 BEGIN			/* Related */
		;WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID	AS	AnnouncementID, 
				ANNOUNCE.MS$9DS		AS	DesignStatus, 
				ANNOUNCE.MSEFFF		AS	EffectiveDate,
				ANNOUNCE.MSEFFT		AS  ExpirationDate,
				ANNOUNCE.MSUPMJ		AS	PublishedSince,
				ANNOUNCE.MS$9MTT	AS	Title, 
				CASE 
					WHEN B.MS$9DS IS NULL THEN 0 ELSE 1
				END					AS	DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = @AnnouncementType) = 0 THEN 3 /* SHARED */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = @InstallationID AND MI$9APFL = @AnnouncementType) > 0 THEN 1 /* RELATED */
					ELSE 2 /* RESTRICTED */
				END					AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
			LEFT OUTER JOIN [SCDATA].FQ67105 B 
				ON B.MS$9NID = ANNOUNCE.MS$9NID
				AND B.MS$9DS <> ANNOUNCE.MS$9DS
			WHERE
				( @FilterTerm = '*' OR ANNOUNCE.MS$9MTT LIKE '%' +  @FilterTerm + '%')
		), STS AS (
			SELECT
				A.AnnouncementID, 
				A.DesignStatus, 
				A.EffectiveDate, 
				A.ExpirationDate, 
				A.PublishedSince, 
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM CTE A
			WHERE ((A.DesignStatus = @DesignStatus) OR (@DesignStatus = 2 AND (A.DesignStatus = 1 OR (A.DesignStatus = 0 AND A.DraftAndPublished = 0))))
				AND A.RelationShip IN (1, 3)
		)
		SELECT
			A.AnnouncementID, 
			A.DesignStatus, 
			A.EffectiveDate,
			A.ExpirationDate,
			A.PublishedSince,
			A.Title,
			A.DraftAndPublished,
			A.RelationShip,
			A.TotalRowCount
		FROM STS A		
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END
	ELSE IF @Relation = 2 BEGIN			/* Not related */
		;WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID	AS	AnnouncementID, 
				ANNOUNCE.MS$9DS		AS	DesignStatus, 
				ANNOUNCE.MSEFFF		AS	EffectiveDate,
				ANNOUNCE.MSEFFT		AS  ExpirationDate,
				ANNOUNCE.MSUPMJ		AS	PublishedSince,
				ANNOUNCE.MS$9MTT	AS	Title, 
				CASE 
					WHEN B.MS$9DS IS NULL THEN 0 ELSE 1
				END					AS	DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = @AnnouncementType) = 0 THEN 3 /* SHARED */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = @InstallationID AND MI$9APFL = @AnnouncementType) > 0 THEN 1 /* RELATED */
					ELSE 2 /* RESTRICTED */
				END					AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
			LEFT OUTER JOIN [SCDATA].FQ67105 B 
				ON B.MS$9NID = ANNOUNCE.MS$9NID
				AND B.MS$9DS <> ANNOUNCE.MS$9DS
			WHERE
				( @FilterTerm = '*' OR ANNOUNCE.MS$9MTT LIKE '%' +  @FilterTerm + '%')
		), STS AS (
			SELECT
				A.AnnouncementID, 
				A.DesignStatus, 
				A.EffectiveDate, 
				A.ExpirationDate, 
				A.PublishedSince, 
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM CTE A
			WHERE ((A.DesignStatus = @DesignStatus) OR (@DesignStatus = 2 AND (A.DesignStatus = 1 OR (A.DesignStatus = 0 AND A.DraftAndPublished = 0))))
				AND A.RelationShip = 2
		)
		SELECT
			A.AnnouncementID, 
			A.DesignStatus, 
			A.EffectiveDate,
			A.ExpirationDate,
			A.PublishedSince,
			A.Title,
			A.DraftAndPublished,
			A.RelationShip,
			A.TotalRowCount
		FROM STS A		
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END;
	ELSE BEGIN		/* Any */
		;WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID	AS	AnnouncementID, 
				ANNOUNCE.MS$9DS		AS	DesignStatus, 
				ANNOUNCE.MSEFFF		AS	EffectiveDate,
				ANNOUNCE.MSEFFT		AS  ExpirationDate,
				ANNOUNCE.MSUPMJ		AS	PublishedSince,
				ANNOUNCE.MS$9MTT	AS	Title, 
				CASE 
					WHEN B.MS$9DS IS NULL THEN 0 ELSE 1
				END					AS	DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = @AnnouncementType) = 0 THEN 3 /* SHARED */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = @AnnouncementType AND MI$9INID = @InstallationID) > 0 THEN 1 /* RELATED */
					ELSE 2 /* RESTRICTED */
				END					AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
			LEFT OUTER JOIN [SCDATA].FQ67105 B 
				ON B.MS$9NID = ANNOUNCE.MS$9NID
				AND B.MS$9DS <> ANNOUNCE.MS$9DS
			WHERE
				( @FilterTerm = '*' OR ANNOUNCE.MS$9MTT LIKE '%' +  @FilterTerm + '%')
		), STS AS (
			SELECT
				A.AnnouncementID, 
				A.DesignStatus, 
				A.EffectiveDate, 
				A.ExpirationDate, 
				A.PublishedSince, 
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM CTE A
			WHERE ((A.DesignStatus = @DesignStatus) OR (@DesignStatus = 2 AND (A.DesignStatus = 1 OR (A.DesignStatus = 0 AND A.DraftAndPublished = 0))))
		)
		SELECT
			A.AnnouncementID, 
			A.DesignStatus, 
			A.EffectiveDate,
			A.ExpirationDate,
			A.PublishedSince,
			A.Title,
			A.DraftAndPublished,
			A.RelationShip,
			A.TotalRowCount
		FROM STS A		
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END;

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetInstallation'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetInstallation
	END

GO
-- #desc					Reads an Installation description.
-- #bl_class				Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.

CREATE Procedure [DBO].CMM_GetInstallation
	@InstallationID NVARCHAR(3)

AS

SET NOCOUNT ON

  SELECT  
	IN$9INID InstallationID, 
	INDSC1	Description,
	IN$9APFL as ApplicationUseFlag
   FROM  
 	    -- Installation Id's 	
	    [SCDATA].FQ670001 INID
      WHERE 
	    -- Installation Id filter	
  	    INID.IN$9INID = @InstallationID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetInstallationDelStatInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetInstallationDelStatInfo
	END

GO
-- #desc						Get the row count of installation related tables.
-- #bl_class					Premier.Common.StoreDeleteStatInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID.
-- #param @IsECOMInstallation	IsECOMInstallation


CREATE Procedure [DBO].CMM_GetInstallationDelStatInfo
(
	@InstallationID			NVARCHAR(3),
	@IsECOMInstallation     INT,
	@BranchPlantByInst		FLOAT = NULL OUTPUT,
	@ItemBranchOverride		FLOAT = NULL OUTPUT,
	@Catalogs				FLOAT = NULL OUTPUT,
	@ItemsFastButtons		FLOAT = NULL OUTPUT,			
	@ItemWebContentHeader	FLOAT = NULL OUTPUT,
	@LobByInst				FLOAT = NULL OUTPUT,
	@Registers				FLOAT = NULL OUTPUT,
	@SalesUnitOfMeasure		FLOAT = NULL OUTPUT,	
	@WebAccounts			FLOAT = NULL OUTPUT,						
	@SalesPersonClient		FLOAT = NULL OUTPUT,
	@P4210Settings			FLOAT = NULL OUTPUT,	
	@RecentlyViewedItems	FLOAT = NULL OUTPUT,
	@CompaniesByInst		FLOAT = NULL OUTPUT,
	@TotalCount				FLOAT = NULL OUTPUT
)
AS
	SET NOCOUNT ON				
	
	--Line of Business By Installation
	SET @LobByInst = (SELECT COUNT(*) FROM [SCDATA].FQ671031 WHERE LI$9INID = @InstallationID)
	
	--Branch Plant By Installation
	SET @BranchPlantByInst = (SELECT COUNT(*) FROM [SCDATA].FQ679910 WHERE BI$9INID = @InstallationID)
	
	/* Item Branch Plant Override By Installation */
	SET @ItemBranchOverride = (SELECT COUNT(*) FROM [SCDATA].FQ670005 WHERE BP$9INID = @InstallationID)				
	
	--Sales Unit of Measure
	SET @SalesUnitOfMeasure = (SELECT COUNT(*) FROM [SCDATA].FQ67415 WHERE UM$9INID = @InstallationID)
	
	--Items Fast Buttons
	SET @ItemsFastButtons = (SELECT COUNT(*) FROM [SCDATA].FQ67416 WHERE FB$9INID = @InstallationID)		
	
	IF (@IsECOMInstallation = 0) BEGIN
		--Item Web Content Header
		SET @ItemWebContentHeader = (SELECT COUNT(*) FROM [SCDATA].FQ67410 WHERE CH$9INID = @InstallationID)		
		
		--Catalogs
		SET @Catalogs = (SELECT COUNT(*) FROM [SCDATA].FQ67412 WHERE CA$9INID = @InstallationID)
	END
	ELSE BEGIN
		SET @ItemWebContentHeader = 0
		SET @Catalogs = 0
	END
	
	--Web Accounts
	SET @WebAccounts = (SELECT COUNT(*) 
					FROM [SCDATA].FQ67101 
					WHERE EXISTS (SELECT UI$9USER FROM [SCDATA].FQ67996	
									WHERE UI$9USER = WA$9USER AND UI$9INID = @InstallationID))
		
	--Registers Master
	SET @Registers = (SELECT COUNT(*) FROM [SCDATA].FQ67426 WHERE RG$9INID = @InstallationID)	
	
	--Sales Person Client
	SET @SalesPersonClient = (SELECT COUNT(*) FROM [SCDATA].FQ67125 WHERE SP$9INID = @InstallationID)
		
	--- P4210 Settings Header	
	SET @P4210Settings = (SELECT COUNT(*) FROM [SCDATA].FQ674230 WHERE RH$9INID = @InstallationID)
		
	--Recently View Items
	SET @RecentlyViewedItems = (SELECT COUNT(*) FROM [SCDATA].FQ67120 WHERE WI$9INID = @InstallationID)
	
	--Companies By Installation
	SET @CompaniesByInst = (SELECT COUNT(*) FROM [SCDATA].FQ679912 WHERE CI$9INID = @InstallationID)
			
	SET @TotalCount =	@LobByInst				+
						@BranchPlantByInst		+
						@ItemBranchOverride		+
						@SalesUnitOfMeasure		+
						@ItemsFastButtons		+
						@ItemWebContentHeader	+
						@WebAccounts			+
						@Registers				+	
						@Catalogs				+
						@SalesPersonClient		+
						@P4210Settings			+
						@RecentlyViewedItems	+
						@CompaniesByInst
		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetInstallationInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetInstallationInfo
	END

GO
-- #desc					Reads an Installation information
-- #bl_class				Premier.Common.StoreInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.

CREATE Procedure [DBO].CMM_GetInstallationInfo
	@InstallationID NVARCHAR(3)

AS

SET NOCOUNT ON

  SELECT  
	IN$9INID InstallationID, 
	INDSC1	Description,
	IN$9APFL as ApplicationUseFlag
   FROM  
 	    -- Installation Id's 	
	    [SCDATA].FQ670001
      WHERE 
	    -- Installation Id filter	
  	    IN$9INID = @InstallationID


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetInstallationsList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetInstallationsList
	END

GO
-- #desc					Read InstallationID list.
-- #bl_class				Premier.Common.StoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.

CREATE PROCEDURE [DBO].CMM_GetInstallationsList
	@InstallationID as NVARCHAR(3),
	@Description as NVARCHAR(30),
	@ApplicationUseFlag as NVARCHAR(4)
AS

SET NOCOUNT ON

IF (@InstallationID <> '*' AND (@Description='*' OR @ApplicationUseFlag= '*'))
BEGIN

SELECT  
	IN$9INID as InstallationID, 
	INDSC1 as Description,
	IN$9APFL as ApplicationUseFlag
FROM  
	-- Installation Id's 	
	[SCDATA].FQ670001 
WHERE 
    -- Installation Id filter	    
	IN$9INID =  @InstallationID  

ORDER BY  IN$9APFL ASC, IN$9INID ASC
END
ELSE
SELECT  
	IN$9INID as InstallationID, 
	INDSC1 as Description,
	IN$9APFL as ApplicationUseFlag
FROM  
	-- Installation Id's 	
	[SCDATA].FQ670001 
WHERE 
    -- Installation Id filter	    
	(@InstallationID = '*' OR IN$9INID like '%' + @InstallationID + '%') 
	AND
	(@Description = '*' OR INDSC1 like '%' + @Description + '%') 
	AND
	(@ApplicationUseFlag = '*' OR IN$9APFL like '%' +  @ApplicationUseFlag + '%')
ORDER BY  IN$9APFL ASC, IN$9INID ASC


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetNextNumber'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetNextNumber
	END

GO

-- #desc						Get next number from table FQ67002
-- #bl_class					Premier.Common.NextNumber.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @NextNumberID			Key


CREATE Procedure [DBO].CMM_GetNextNumber
@NextNumberID FLOAT
AS

SET NOCOUNT ON

SELECT 
	NN$9UKID NextNumberID ,
	NNUD01 UseDescription1,
	NNUD02 UseDescription2,
	NN$9N001 NextValue ,
	NNURCD UserReservedCode  ,
	NNURDT UserReservedDate  ,
	NNURAT UserReservedAmount  ,
	NNURAB UserReservedNumber  ,
	NNURRF UserReservedReference  ,
	NNUSER UserId  ,
	NNPID ProgramId  ,
	NNJOBN WorkStationId  ,
	NNUPMJ DateUpdated  ,
	NNTDAY TimeOfDay  
	
FROM
	[SCDATA].FQ67002
WHERE
	NN$9UKID = @NextNumberID
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetNextNumberList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetNextNumberList
	END

GO
-- #desc					Get next number list
-- #bl_class				Premier.Common.NextNumberList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @NextNumberID		Next number ID
-- #param @Description1		Description 
-- #param @Description2		Description

CREATE  PROCEDURE [DBO].CMM_GetNextNumberList
   @NextNumberID FLOAT,
   @Description1 NVARCHAR(15),
   @Description2 NVARCHAR(15)
AS

SET NOCOUNT ON

SELECT 
	NN$9UKID NextNumberID,
	NNUD01 UseDescription1,
	NNUD02 UseDescription2,
	NN$9N001 NextValue
FROM 
	[SCDATA].FQ67002 
WHERE 		
	(@NextNumberID IS NULL OR NN$9UKID  = @NextNumberID) 
	and
	(@Description1 = '*' OR NNUD01 like '%' + @Description1 + '%') 
	and
	(@Description2 = '*' OR NNUD02 like '%' + @Description2 + '%')
	

 




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetPaymentTermList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetPaymentTermList
	END

GO

-- #desc					Read Payment Terms List
-- #bl_class				Premier.Common.PaymentTermsList
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE Procedure [DBO].CMM_GetPaymentTermList
	@PaymentTermCode NVARCHAR(3),
	@PaymentTermDescription NVARCHAR(30)
AS

SET NOCOUNT ON

SELECT 
	PNPTC  PaymentTermCode,
	PNPTD PaymentTermDescription
FROM
	[SCDATA].F0014
WHERE
	 (@PaymentTermCode = '*' OR PNPTC LIKE '%' + @PaymentTermCode + '%')	
	 AND
	 (@PaymentTermDescription = '*' OR PNPTD LIKE '%' + @PaymentTermDescription + '%')	 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetPickUpAddressInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetPickUpAddressInfo
	END

GO

-- #desc					Read Branch Plant by Installation info incluing address information
-- #bl_class				Premier.Common.PickUpAddressInfo
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @BranchPlant		Branch Plant.

CREATE Procedure [DBO].CMM_GetPickUpAddressInfo	
	@InstallationID		NVARCHAR(3),
	@BranchPlant	NVARCHAR(12)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	SELECT
		A.MCAN8 AS AddressNumber,
		A.MCMCU AS BranchPlant,
		A.MCCO	 AS Company,
		C.WWMLNM AS MailingName,
		D.ALCTY1 AS City,
		D.ALADDS AS State,
		D.ALADDZ AS ZipCode,
		D.ALCTR  AS Country,
		D.ALADD1 AS AddressLine1,
		D.ALADD2 AS AddressLine2
	FROM
		[SCDATA].F0006 A
	INNER JOIN [SCDATA].FQ679910 B
		ON A.MCMCU = B.BIMCU
	INNER JOIN [SCDATA].F0111 C	/*Contact*/
		ON C.WWAN8 = A.MCAN8
		AND C.WWIDLN = 0
	CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(A.MCAN8, @CurrentJulianDate) D	/*Address*/
	WHERE 
		B.BI$9INID = @InstallationID
		AND A.MCMCU = @BranchPlant
		AND B.BILCNF = 'Y'
		
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetPickUpAddressList'))
	BEGIN
		DROP PROCEDURE [DBO].CMM_GetPickUpAddressList
	END

GO

-- #desc					Read Branch Plant by Installation list incluing address information
-- #bl_class				Premier.Common.PickUpAddressList
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.

CREATE PROCEDURE [DBO].CMM_GetPickUpAddressList
(
	@InstallationID NVARCHAR(3)
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	SELECT
		A.MCAN8 AS AddressNumber,
		A.MCMCU AS BranchPlant,
		A.MCCO	 AS Company,
		C.WWMLNM AS MailingName,
		D.ALCTY1 AS City,
		D.ALADDS AS State,
		D.ALADDZ AS ZipCode,
		D.ALCTR  AS Country,
		D.ALADD1 AS AddressLine1,
		D.ALADD2 AS AddressLine2
	FROM
		[SCDATA].F0006 A
	INNER JOIN [SCDATA].FQ679910 B
		ON A.MCMCU = B.BIMCU
	INNER JOIN [SCDATA].F0111 C	/*Contact*/
		ON C.WWAN8 = A.MCAN8
		AND C.WWIDLN = 0
	CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(A.MCAN8, @CurrentJulianDate) D	/*Address*/
	WHERE 
		B.BI$9INID = @InstallationID
		AND B.BILCNF = 'Y'
	ORDER BY
		A.MCMCU ASC
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetRoundingRuleList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetRoundingRuleList
	END

GO

-- #desc				Get Rounding Rule List
-- #bl_class			Premier.Common.RoundingRuleList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].CMM_GetRoundingRuleList
AS
	SET NOCOUNT ON

	SELECT 
		C.RRRULENAME AS RuleName,
		C.RRRULEDESC AS RuleDescription
	FROM
		[SCDATA].F95701 C
	GROUP BY
		C.RRRULENAME, C.RRRULEDESC
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetUDCHeaderInfo'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetUDCHeaderInfo
	END

GO

-- #desc					Reads the UDC detail
-- #bl_class				Premier.Common.UserDefinedCodeHeaderInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ProductCode		Product code to search for
-- #param @UserDefinedCode	User define code to search for     
-- #param @LangPref			Language preference

CREATE Procedure [DBO].CMM_GetUDCHeaderInfo
  @ProductCode		NVARCHAR(4),
  @UserDefinedCode	NVARCHAR(2),
  @LangPref			NVARCHAR(2) = null
AS

SET NOCOUNT ON
	IF @LangPref IS NULL OR @LangPref = '' BEGIN
			SELECT 
				HUDC.DTSY AS ProductCode, 
				HUDC.DTRT as UserDefinedCode,
				CASE WHEN HUDC.DTDL01 = '.' THEN '' ELSE HUDC.DTDL01 END AS Description,
				HUDC.DTCDL    AS CodeLength
	         	-- UDC Header Master 	
		   FROM [SCCTL].F0004 HUDC
		  WHERE 
			-- Product Code filter	
		  	HUDC.DTSY = @ProductCode
			-- User Defined Codes filter	
		    AND (LTRIM(RTRIM( HUDC.DTRT))  = LTRIM(RTRIM(@UserDefinedCode)))
	        -- Description filter
		  ORDER BY HUDC.DTSY, HUDC.DTRT
	END
	ELSE BEGIN
			SELECT 
				HUDC.DTSY AS ProductCode, 
				HUDC.DTRT as UserDefinedCode,
				CASE WHEN ISNULL(HUDCLNG.DTDL01,HUDC.DTDL01) = '.' THEN '' ELSE ISNULL(HUDCLNG.DTDL01,HUDC.DTDL01) END AS Description,
				HUDC.DTCDL    AS CodeLength
	         	-- UDC Header Master 	
 			FROM [SCCTL].F0004 HUDC
	         	-- UDC Header Language Master 	
            LEFT JOIN [SCCTL].F0004D HUDCLNG
                     ON HUDCLNG.DTSY = HUDC.DTSY
                    AND HUDCLNG.DTRT = HUDC.DTRT
                    AND HUDCLNG.DTLNGP = @LangPref
			WHERE 
				-- Product Code filter	
		  		HUDC.DTSY = @ProductCode
				-- User Defined Codes filter	
				AND LTRIM(RTRIM( HUDC.DTRT)) = LTRIM(RTRIM(@UserDefinedCode))
						-- Description filter
			ORDER BY HUDC.DTSY, HUDC.DTRT
		END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetUDCHeaderList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetUDCHeaderList
	END

GO

-- #desc					Reads the UDC detail
-- #bl_class				Premier.Common.UserDefinedCodeHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ProductCode		Product code to search for
-- #param @UserDefinedCode	User define code to search for    
-- #param @Description		Description to search for  
-- #param @LangPref			Language preference

CREATE Procedure [DBO].CMM_GetUDCHeaderList
  @ProductCode		NVARCHAR(4),
  @UserDefinedCode	NVARCHAR(2),
  @Description		NVARCHAR(30),
  @LangPref			NVARCHAR(2) = null
AS

SET NOCOUNT ON
	IF @LangPref IS NULL OR @LangPref = '' BEGIN
			 SELECT 
				HUDC.DTRT as UserDefinedCode,
			CASE WHEN HUDC.DTDL01 = '.' THEN '' ELSE HUDC.DTDL01 END AS Description
	         	-- UDC Header Master 	
		   FROM [SCCTL].F0004 HUDC
		  WHERE 
			-- Product Code filter	
		  	HUDC.DTSY = @ProductCode
			-- User Defined Codes filter	
		    AND (@UserDefinedCode = '*' OR LTRIM(RTRIM( HUDC.DTRT)) LIKE '%' + LTRIM(RTRIM(@UserDefinedCode)) + '%' )
	        -- Description filter
	        AND (@Description = '*' OR LTRIM(RTRIM( HUDC.DTDL01)) LIKE '%' + LTRIM(RTRIM(@Description)) + '%'  ) 
		  ORDER BY HUDC.DTSY, HUDC.DTRT
	END
	ELSE BEGIN
			SELECT 
				HUDC.DTRT as UserDefinedCode,
			CASE WHEN ISNULL(HUDCLNG.DTDL01,HUDC.DTDL01) = '.' THEN '' ELSE ISNULL(HUDCLNG.DTDL01,HUDC.DTDL01) END AS Description
	         	-- UDC Header Master 	
 			FROM [SCCTL].F0004 HUDC
	         	-- UDC Header Language Master 	
            LEFT JOIN [SCCTL].F0004D HUDCLNG
                     ON HUDCLNG.DTSY = HUDC.DTSY
                    AND HUDCLNG.DTRT = HUDC.DTRT
                    AND HUDCLNG.DTLNGP = @LangPref
			WHERE 
				-- Product Code filter	
		  		HUDC.DTSY = @ProductCode
				-- User Defined Codes filter	
				AND (@UserDefinedCode = '*' OR LTRIM(RTRIM( HUDC.DTRT)) LIKE '%' + LTRIM(RTRIM(@UserDefinedCode)) + '%')
						-- Description filter
				AND (@Description = '*' OR LTRIM(RTRIM( HUDC.DTDL01)) LIKE '%' + LTRIM(RTRIM(@Description)) + '%') 
			ORDER BY HUDC.DTSY, HUDC.DTRT
		END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetUserAnnouncementList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetUserAnnouncementList
	END

GO

-- #desc						Get User Announcement List 
-- #bl_class					Premier.Common.UserAnnouncementList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @WebAccountId			Web Account ID
-- #param @AddressNumber		Address Number
-- #param @AddressType			Address book type
-- #param @DisplayType			Display Type /* 0= Prompt - 1=Floating - 2=List*/ 
-- #param @MaxItemsToDisplay	Max Items To Display /* 0 returs all */
-- #param @LangPref				Language preference

CREATE Procedure [DBO].CMM_GetUserAnnouncementList
	@InstallationID		NVARCHAR(3),
	@WebAccountId		FLOAT,
	@AddressNumber		FLOAT,
	@AddressBookType	FLOAT,  
	@DisplayType		FLOAT, /* 0= Prompt - 1=Floating - 2=List*/
    @MaxItemsToDisplay	FLOAT,
	@LangPref			NVARCHAR(2)
AS
	DECLARE @CurrentJulianDate INTEGER
	DECLARE @ConstantInst		NVARCHAR(3)
	DECLARE @CCAssignmentType FLOAT
    DECLARE @AssignmentConstant NVARCHAR(256)
    DECLARE @AnnounceLastDaysConstant NVARCHAR(256)
    DECLARE @AnnounceTotalDisplayConstant NVARCHAR(256)
    DECLARE @UserDefinedKey NVARCHAR(10)
    DECLARE @STRSQL VARCHAR(1000)

	CREATE TABLE #CATEGORYCODE
	(
		ANNOUNCEMENTID		FLOAT
	);

	CREATE TABLE #ANNOUNCETEMP (			
		AnnouncementID FLOAT 
	);

	SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
	SET @ConstantInst = @InstallationID

	EXEC [DBO].CMM_GetConstantValue 'ANMDSPDAYS', @ConstantInst, @AnnounceLastDaysConstant out
	SET @ConstantInst = @InstallationID

	IF (@AddressBookType = 1) /*Category Code Assignments (Consumer)*/
	 BEGIN
		;WITH CTE AS (
		SELECT PRDTAI, PRKY
		FROM 
			(
			SELECT 
				PR$9AC01 AC01,PR$9AC02 AC02,PR$9AC03 AC03,PR$9AC04 AC04,PR$9AC05 AC05,PR$9AC06 AC06,PR$9AC07 AC07,PR$9AC08 AC08,PR$9AC09 AC09,PR$9AC10 AC10,
                PR$9AC11 AC11,PR$9AC12 AC12,PR$9AC13 AC13,PR$9AC14 AC14,PR$9AC15 AC15,PR$9AC16 AC16,PR$9AC17 AC17,PR$9AC18 AC18,PR$9AC19 AC19,PR$9AC20 AC20,
                PR$9AC21 AC21,PR$9AC22 AC22,PR$9AC23 AC23,PR$9AC24 AC24,PR$9AC25 AC25,PR$9AC26 AC26,PR$9AC27 AC27,PR$9AC28 AC28,PR$9AC29 AC29,PR$9AC30 AC30
			FROM [SCDATA].FQ670302 WHERE PR$9AN8 = CAST (@AddressNumber AS NVARCHAR(50))
			) CATCODES
	UNPIVOT (PRKY FOR PRDTAI IN
			(AC01, AC02, AC03, AC04, AC05, AC06, AC07, AC08, AC09, AC10, AC11, AC12, AC13, AC14, AC15, 
             AC16, AC17, AC18, AC19, AC20, AC21, AC22, AC23, AC24, AC25, AC26, AC27, AC28, AC29, AC30)) AS CATCODES)

	INSERT INTO #CATEGORYCODE 
				SELECT MA$9NID AnnouncementID
				FROM 
					[SCDATA].FQ67105A A
				INNER JOIN CTE AS B
				ON  2 = A.MA$9ATYP
					AND B.PRDTAI = A.MADTAI
					AND B.PRKY = A.MAKY		
	END
    ELSE IF(@AddressBookType = 0 OR @AddressBookType = 2) /*(Customer/Sales Person)*/
	    BEGIN
			;WITH CTE AS (
			SELECT ABDTAI, ABKY
			FROM 
				(
					SELECT ABAC01 AC01, ABAC02 AC02,ABAC03 AC03,ABAC04 AC04, ABAC05 AC05, ABAC06 AC06,ABAC07 AC07,ABAC08 AC08,ABAC09 AC09,ABAC10 AC10,
				     ABAC11 AC11,ABAC12 AC12,ABAC13 AC13,ABAC14 AC14,ABAC15 AC15,ABAC16 AC16,ABAC17 AC17,ABAC18 AC18, ABAC19 AC19, ABAC20 AC20,
					 ABAC21 AC21,ABAC22 AC22,ABAC23 AC23, ABAC24 AC24,ABAC25 AC25,ABAC26 AC26,ABAC27 AC27,ABAC28 AC28,ABAC29 AC29,ABAC30 AC30
					FROM [SCDATA].F0101 WHERE ABAN8 = CAST (@AddressNumber AS NVARCHAR(50))
				) CATCODES
				UNPIVOT (ABKY FOR ABDTAI IN
						(AC01, AC02, AC03, AC04, AC05, AC06, AC07, AC08, AC09, AC10, AC11, AC12, AC13, AC14, AC15, 
						AC16, AC17, AC18, AC19, AC20, AC21, AC22, AC23, AC24, AC25,AC26,AC27,AC28,AC29,AC30)) AS CATCODES)
		INSERT INTO #CATEGORYCODE 
				SELECT MA$9NID AnnouncementID
				FROM 
					[SCDATA].FQ67105A A
				INNER JOIN CTE AS B
				ON  1 = A.MA$9ATYP
					AND B.ABDTAI = A.MADTAI
					AND B.ABKY = A.MAKY		
	END /*Category Code Assignments*/

	INSERT INTO #ANNOUNCETEMP
		 
		SELECT A.MS$9NID 
		FROM (/*Without assignment*/
			SELECT ANNOUNCE.MS$9NID
			FROM [SCDATA].FQ67105 ANNOUNCE   
			WHERE
			  ANNOUNCE.MS$9DS = 0  /*Live Status*/
			  AND (@DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
			  AND (ANNOUNCE.MSEFFF = 0 OR (@CurrentJulianDate >= ANNOUNCE.MSEFFF AND @CurrentJulianDate <= ANNOUNCE.MSEFFT))
			  AND (@AnnounceLastDaysConstant = 0 OR ((@CurrentJulianDate - @AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
			  AND (
				   (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/      
					OR
				   (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = @InstallationID) > 0 
				  )   
			  AND ((SELECT COUNT(*) FROM [SCDATA].FQ67105A WHERE MA$9NID = ANNOUNCE.MS$9NID) = 0)
			UNION       
			/*Assignment By Web Account*/
			SELECT ANNOUNCE.MS$9NID
			FROM [SCDATA].FQ67105 ANNOUNCE 
			INNER JOIN [SCDATA].FQ67105A ANNASSIG
				ON  ANNOUNCE.MS$9NID = ANNASSIG.MA$9NID
				AND  ANNASSIG.MA$9ATYP = 5 
				AND ANNASSIG.MA$9WAN8 = @WebAccountId
			WHERE
				ANNOUNCE.MS$9DS = 0  /*Live Status*/
				AND (@DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
				AND (ANNOUNCE.MSEFFF = 0 OR (@CurrentJulianDate >= ANNOUNCE.MSEFFF AND @CurrentJulianDate <= ANNOUNCE.MSEFFT))
				AND (@AnnounceLastDaysConstant = 0 OR ((@CurrentJulianDate - @AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
			UNION
			 /*Assignment By Address Number*/
			SELECT ANNOUNCE.MS$9NID
			FROM [SCDATA].FQ67105 ANNOUNCE   
			INNER JOIN [SCDATA].FQ67105A ANNASSIG
				ON  ANNOUNCE.MS$9NID = ANNASSIG.MA$9NID
				AND  ANNASSIG.MA$9ATYP IN(3, 4)
				AND ANNASSIG.MA$9AN8 = @AddressNumber
			WHERE
				ANNOUNCE.MS$9DS = 0  /*Live Status*/
				AND (@DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
				AND (ANNOUNCE.MSEFFF = 0 OR (@CurrentJulianDate >= ANNOUNCE.MSEFFF AND @CurrentJulianDate <= ANNOUNCE.MSEFFT))
				AND (@AnnounceLastDaysConstant = 0 OR ((@CurrentJulianDate - @AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
				AND (
					(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/      
					OR
					(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = @InstallationID) > 0 
					)) A 
		LEFT OUTER JOIN [SCDATA].FQ67105H H
			ON A.MS$9NID = H.MH$9NID AND H.MH$9WAN8 = @WebAccountID
		WHERE H.MH$9A1ST IS NULL OR H.MH$9A1ST <> 'D'
	BEGIN
	INSERT INTO #ANNOUNCETEMP
		SELECT DISTINCT A.MS$9NID 
		FROM (
			SELECT  
				ANNOUNCE.MS$9NID         
			FROM 
				 [SCDATA].FQ67105 ANNOUNCE        
			INNER JOIN #CATEGORYCODE TEMP
				ON  ANNOUNCE.MS$9NID = TEMP.ANNOUNCEMENTID
			WHERE
				ANNOUNCE.MS$9DS = 0  /*Live Status*/
				AND (@DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
				AND (ANNOUNCE.MSEFFF = 0 OR (@CurrentJulianDate >= ANNOUNCE.MSEFFF AND @CurrentJulianDate <= ANNOUNCE.MSEFFT))
				AND (@AnnounceLastDaysConstant = 0 OR ((@CurrentJulianDate - @AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
				AND (
					 (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/      
					  OR
					 (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = @InstallationID) > 0 
					)) A 
		LEFT OUTER JOIN [SCDATA].FQ67105H H
			ON A.MS$9NID = H.MH$9NID AND H.MH$9WAN8 = @WebAccountID
		WHERE H.MH$9A1ST IS NULL OR H.MH$9A1ST <> 'D'
	END
	
	SET @ConstantInst = @InstallationID
		
	IF(@DisplayType = 0) /*Prompt*/
    BEGIN
		SELECT  
			MG.AnnouncementID        AS AnnouncementID,       
			ISNULL(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
			ISNULL(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
			CASE ANNOUNCE.MSEFFF 
				WHEN 0 THEN ANNOUNCE.MSUPMJ 
				ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
			ANNOUNCE.MSTDAY   AS PublishedTimeSince,
			ANNOUNCE.MS$9PRI  AS Priority,
			ISNULL(H.MH$9A1ST, '') AS Status,
			ANNOUNCE.MSEFFF AS EffectiveDate,
			ANNOUNCE.MSEFFT AS ExpirationDate,
			0 AS TotalRowCount
		FROM #ANNOUNCETEMP MG
		INNER JOIN [SCDATA].FQ67105 ANNOUNCE
			ON MG.AnnouncementID = ANNOUNCE.MS$9NID
			AND ANNOUNCE.MS$9DS = 0
		LEFT JOIN [SCDATA].FQ67105L LANG
			ON LANG.ML$9NID = MG.AnnouncementID 
			AND LANG.ML$9DS = ANNOUNCE.MS$9DS
			AND LANG.MLLNGP = @LangPref
		LEFT OUTER JOIN [SCDATA].FQ67105H H
			ON H.MH$9NID = ANNOUNCE.MS$9NID AND H.MH$9WAN8 = @WebAccountID
		WHERE
			H.MH$9A1ST IS NULL OR H.MH$9A1ST NOT IN ('R', 'RB')
		ORDER BY ANNOUNCE.MS$9PRI DESC, ANNOUNCE.MSEFFT;
	END
	 
	ELSE IF(@DisplayType = 1) /*Floating*/
	BEGIN
        SELECT  
            AnnouncementID, Title, HtmlContent, PublishedDateSince, PublishedTimeSince, Priority, Status, EffectiveDate, ExpirationDate, TotalRowCount
          FROM
            (SELECT  
					MG.AnnouncementID        AS AnnouncementID,       
					ISNULL(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
					ISNULL(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
					CASE ANNOUNCE.MSEFFF 
						WHEN 0 THEN ANNOUNCE.MSUPMJ 
						ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
					ANNOUNCE.MSTDAY   AS PublishedTimeSince,
					ANNOUNCE.MS$9PRI  AS Priority,
					ISNULL(H.MH$9A1ST, '') AS Status,
					ANNOUNCE.MSEFFF AS EffectiveDate,
					ANNOUNCE.MSEFFT AS ExpirationDate,
					ROW_NUMBER() OVER (ORDER BY (ANNOUNCE.MS$9PRI) DESC) AS RNUM,             
					COUNT(*) OVER () TotalRowCount
                FROM #ANNOUNCETEMP MG
                INNER JOIN [SCDATA].FQ67105 ANNOUNCE
					ON MG.AnnouncementID = ANNOUNCE.MS$9NID
					AND ANNOUNCE.MS$9DS = 0
                LEFT JOIN [SCDATA].FQ67105L LANG
					ON LANG.ML$9NID = MG.AnnouncementID 
					AND LANG.ML$9DS = ANNOUNCE.MS$9DS
					AND LANG.MLLNGP = @LangPref
				LEFT OUTER JOIN [SCDATA].FQ67105H H 
					ON H.MH$9NID = ANNOUNCE.MS$9NID AND H.MH$9WAN8 = @WebAccountID
                WHERE 
                  H.MH$9A1ST IS NULL OR H.MH$9A1ST NOT IN ('R', 'RB')
                )TEMP
           WHERE @MaxItemsToDisplay = 0 OR (TEMP.RNUM <= @MaxItemsToDisplay)
	END     
	ELSE /*List*/
	BEGIN
        SELECT  
			MG.AnnouncementID        AS AnnouncementID,       
			ISNULL(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
			ISNULL(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,	
			CASE ANNOUNCE.MSEFFF 
				WHEN 0 THEN ANNOUNCE.MSUPMJ 
				ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
			ANNOUNCE.MSTDAY   AS PublishedTimeSince,
			ANNOUNCE.MS$9PRI  AS Priority,
			ISNULL(HIST.MH$9A1ST, '') AS Status,
			ANNOUNCE.MSEFFF AS EffectiveDate,
			ANNOUNCE.MSEFFT AS ExpirationDate,
			0 AS TotalRowCount
        FROM #ANNOUNCETEMP MG
        INNER JOIN [SCDATA].FQ67105 ANNOUNCE
            ON MG.AnnouncementID = ANNOUNCE.MS$9NID
            AND ANNOUNCE.MS$9DS = 0
        LEFT JOIN [SCDATA].FQ67105L LANG
            ON LANG.ML$9NID = MG.AnnouncementID 
            AND LANG.ML$9DS = ANNOUNCE.MS$9DS
            AND LANG.MLLNGP = @LangPref
        LEFT JOIN [SCDATA].FQ67105H HIST
            ON HIST.MH$9NID = MG.AnnouncementID
            AND MH$9APFL = 'AGen'
            AND HIST.MH$9WAN8 = @WebAccountID
        ORDER BY ANNOUNCE.MS$9PRI, ANNOUNCE.MSEFFT
	END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetUserDefinedCode'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetUserDefinedCode
	END

GO

-- #desc					Reads the UDC Info
-- #bl_class				Premier.Common.UserDefinedCodeInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ProductCode		Product code to search for
-- #param @UserDefinedCode	User define code to search for    
-- #param @UserDefinedKey	User Defined Key search criteria	  
-- #param @LangPref			Language preference

CREATE Procedure [DBO].CMM_GetUserDefinedCode
  @ProductCode		NVARCHAR(4),
  @UserDefinedCode	NVARCHAR(2),
  @UserDefinedKey	NVARCHAR(10),
  @LangPref			NVARCHAR(2) = null
AS

SET NOCOUNT ON

	DECLARE	@CodeLength INT
	SET @CodeLength = 0
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004 
						WHERE DTSY = @ProductCode AND DTRT = @UserDefinedCode)
	
	-- set UserDefinedKey with blank spaces
	SET @UserDefinedKey = REPLICATE(' ' , 10 - @CodeLength) + @UserDefinedKey

	IF @LangPref IS NULL OR @LangPref = '' BEGIN
		SELECT
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN DUDC.DRDL01 = '.' THEN '' ELSE DUDC.DRDL01 END AS Description1,
			DUDC.DRDL02 AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength
	         	-- UDC Detail Master 	
		FROM  
			[SCCTL].F0005 DUDC
		INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
		WHERE 
			-- Product Code filter	
		  	DUDC.DRSY = @ProductCode
			-- User Defined Codes filter	
		    AND DUDC.DRRT = @UserDefinedCode
	         -- User Defined Key filter
		    AND DUDC.DRKY = @UserDefinedKey
	END
	ELSE BEGIN
		 SELECT 
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN ISNULL(DUDCLNG.DRDL01,DUDC.DRDL01) = '.' THEN '' ELSE ISNULL(DUDCLNG.DRDL01,DUDC.DRDL01) END AS Description1,
			ISNULL(DUDCLNG.DRDL02,DUDC.DRDL02) AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength
	        -- UDC Detail Master 	
		 FROM [SCCTL].F0005 DUDC
		 INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
	        -- UDC Detail Language Master 	
		 LEFT JOIN [SCCTL].F0005D DUDCLNG
				 ON DUDCLNG.DRSY = DUDC.DRSY
				AND DUDCLNG.DRRT = DUDC.DRRT
				AND DUDCLNG.DRKY = DUDC.DRKY
				AND DUDCLNG.DRLNGP = @LangPref
		 WHERE 
			-- Product Code filter	
		  	DUDC.DRSY = @ProductCode
			-- User Defined Codes filter	
		    AND DUDC.DRRT = @UserDefinedCode
	        -- User Defined Key filter
		    AND DUDC.DRKY = @UserDefinedKey
	END

RETURN

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_GetUserDefinedCodeList'))
	BEGIN
		DROP  Procedure  [DBO].CMM_GetUserDefinedCodeList
	END

GO

-- #desc					Reads the UDC detail
-- #bl_class				Premier.Common.UserDefinedCodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ProductCode		Product code to search for
-- #param @UserDefinedCode	User define code to search for    
-- #param @UserDefinedKey	User Defined Key search criteria	  
-- #param @Description1		Description to search for  
-- #param @Description2		Description 2 to search for
-- #param @LangPref			Language preference

CREATE Procedure [DBO].CMM_GetUserDefinedCodeList
  @ProductCode		NVARCHAR(4),
  @UserDefinedCode	NVARCHAR(2),
  @UserDefinedKey	NVARCHAR(10),
  @Description1		NVARCHAR(30),
  @Description2		NVARCHAR(30),
  @LangPref			NVARCHAR(2) = null
AS

SET NOCOUNT ON

	IF @LangPref IS NULL OR @LangPref = '' BEGIN
		SELECT  
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN DUDC.DRDL01 = '.' THEN '' ELSE DUDC.DRDL01 END AS Description1,
			DUDC.DRDL02 AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength 
	         	-- UDC Detail Master 	
		FROM  [SCCTL].F0005 DUDC
		INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
		WHERE 
			-- Product Code filter	
		  	DUDC.DRSY = @ProductCode
			-- User Defined Codes filter	
		    AND DUDC.DRRT = @UserDefinedCode
	                -- User Defined Key filter
		    AND ( @UserDefinedKey = '*' OR LTRIM(RTRIM(DUDC.DRKY)) LIKE '%' + LTRIM(RTRIM(@UserDefinedKey)) + '%')
	                -- Description filter
            AND (@Description1 = '*' OR DUDC.DRDL01 LIKE '%' + @Description1 + '%' )
                -- Description2 filter
            AND (@Description2 = '*' OR DUDC.DRDL02 LIKE '%' + @Description2 + '%')
		ORDER BY DUDC.DRSY, DUDC.DRRT, DUDC.DRKY
	END
	ELSE BEGIN
		 SELECT 
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN ISNULL(DUDCLNG.DRDL01,DUDC.DRDL01) = '.' THEN '' ELSE ISNULL(DUDCLNG.DRDL01,DUDC.DRDL01) END AS Description1,
			ISNULL(DUDCLNG.DRDL02,DUDC.DRDL02) AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength
	        -- UDC Detail Master 	
		 FROM [SCCTL].F0005 DUDC
		 INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
	         	-- UDC Detail Language Master 	
        LEFT JOIN [SCCTL].F0005D DUDCLNG
                     ON DUDCLNG.DRSY = DUDC.DRSY
                    AND DUDCLNG.DRRT = DUDC.DRRT
                    AND DUDCLNG.DRKY = DUDC.DRKY
                    AND DUDCLNG.DRLNGP = @LangPref
		 WHERE 
			-- Product Code filter	
		  	DUDC.DRSY = @ProductCode
			-- User Defined Codes filter	
		    AND DUDC.DRRT = @UserDefinedCode
	                -- User Defined Key filter
		    AND (@UserDefinedKey = '*' OR LTRIM(RTRIM(DUDC.DRKY)) LIKE '%' + LTRIM(RTRIM(@UserDefinedKey)) + '%')
                -- Description filter
            AND (@Description1 = '*' OR DUDC.DRDL01 LIKE '%' + @Description1 + '%')
                -- Description2 filter
            AND (@Description2 = '*' OR DUDC.DRDL02 LIKE '%' + @Description2 + '%')
		  ORDER BY DUDC.DRSY, DUDC.DRRT, DUDC.DRKY
	END

RETURN

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdConstant'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdConstant
	END

GO

-- #desc							Add contant detail
-- #bl_class						Premier.Common.UserDefinedCodeList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @Constant					Constant ID
-- #param @InstallationID			Installation ID
-- #param @ConstantValue			Constant Value

CREATE Procedure [DBO].CMM_UpdConstant
	
	@Constant		NVARCHAR(10),
	@InstallationID NVARCHAR(3),
	@ConstantValue	NVARCHAR(256)
AS	
	SET NOCOUNT ON
	
	UPDATE 
		[SCDATA].FQ670004
	SET  
		CN$9VAL = @ConstantValue
	WHERE 
		CN$9INID = @InstallationID AND 
		CN$9CNST = @Constant

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdConstantHeader'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdConstantHeader
	END

GO


-- #desc					Updates contant header
-- #bl_class				Premier.Common.Constant.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ConstantID		Constant ID
-- #param @SubSystemCode	Sub system code
-- #param @Description1		Description 1
-- #param @Description2		Description 2

CREATE Procedure [DBO].CMM_UpdConstantHeader
	@ConstantID		NVARCHAR(10),
	@SubSystemCode	NVARCHAR(2),
	@Description1	NVARCHAR(256),
	@Description2	NVARCHAR(256),
	@ProductCode	NVARCHAR(4),
	@UserDefinedCode	NVARCHAR(2),
	@SystemOnlyFlag		FLOAT
	
AS

	SET NOCOUNT ON
	
	UPDATE 
		[SCDATA].FQ670003
	SET  
		CNSYS = @SubSystemCode,
	    CNDTA1 = @Description1,
	    CNDTA2 = @Description2,
	    CNSY = @ProductCode,
	    CNRT = @UserDefinedCode,
	    CN$9SOF = @SystemOnlyFlag	
	    
	WHERE 
		CN$9CNST = @ConstantID

GO
   IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdCurrencyDetail'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdCurrencyDetail
	END

GO

-- #desc					Insert currency detail
-- #bl_class				Premier.Common.ConstantHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code
-- #param @Description		Currency Description
-- #param @Amount			Denomination Amount
-- #param @CoinBillFlag		IS Coin or Bill
-- #param @IsSpeedCash		mark as speed cash button

CREATE PROCEDURE [DBO].CMM_UpdCurrencyDetail
(
    @CurrencyCode				NVARCHAR(3),
    @SequenceID					FLOAT,
    @Amount						FLOAT,
    @Description				NVARCHAR(30),
    @CoinBillFlag				NVARCHAR(1),
    @IsSpeedCash				NVARCHAR(1),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC
)
AS
	SET NOCOUNT ON

	UPDATE
		[SCDATA].FQ67012
	SET
		CIAEXP	= @Amount,
		CIDL01	= @Description,
		CIBCF8	= @CoinBillFlag,
		CISPEOW = @IsSpeedCash,
		CIUSER	= @UserID,   
		CIPID	= @ProgramID,
		CIJOBN	= @WorkStationID,
		CIUPMJ	= @DateUpdated,
		CIUPMT	= @TimeLastUpdated    
	WHERE
		CICRCD = @CurrencyCode AND
		CILNID = @SequenceID
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdCurrencyHeader'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdCurrencyHeader
	END

GO

-- #desc					Update currency header
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CurrencyCode		Currency Code
-- #param @CurrencySymbol	Currency Symbol
-- #param @RoundingRule		Rounding Rule Name

CREATE PROCEDURE [DBO].CMM_UpdCurrencyHeader
(
    @CurrencyCode				NVARCHAR(3),
    @CurrencySymbol				NVARCHAR(3),
    @RoundingRule				NVARCHAR(10),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC
)
AS
	SET NOCOUNT ON

	UPDATE
		[SCDATA].FQ67011
	SET
		CICC0		= @CurrencySymbol,
		CIRULENAME	= @RoundingRule,
		CIUSER		= @UserID,   
		CIPID		= @ProgramID,
		CIJOBN		= @WorkStationID,
		CIUPMJ		= @DateUpdated,
		CIUPMT		= @TimeLastUpdated
	WHERE
		CICRCD = @CurrencyCode
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdDocRestricRef'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdDocRestricRef
	END

GO
-- #desc					Update User Reserved Reference Enhancement for DME
-- #bl_class				Premier.Common.DocRestricInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param InstallationID				
-- #param ConstantID				
-- #param ProductCode				
-- #param UserDefinedCode				
-- #param UserDefinedKey				
-- #param UserReservedReference

CREATE Procedure [DBO].CMM_UpdDocRestricRef
(
	@InstallationID				NVARCHAR(3),
    @ConstantID					NVARCHAR(10),
    @ProductCode				NVARCHAR(4),
    @UserDefinedCode			NVARCHAR(2),
    @UserDefinedKey				NVARCHAR(10),
    @UserReservedReference		NVARCHAR(15)
)
AS
SET NOCOUNT ON

	UPDATE 
		[SCDATA].FQ67008 
	SET 
		DRURRF = @UserReservedReference
	WHERE
		DR$9INID = @InstallationID				
		AND	DR$9CNST = @ConstantID					
		AND	DRSY = @ProductCode				
		AND	DRRT= @UserDefinedCode			
		AND	DRKY = @UserDefinedKey		    
GO
  
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdGeneralAnnounceLang'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdGeneralAnnounceLang
	END

GO
-- #desc							Update General Announcement Lang
-- #bl_class						Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param AnnouncementID			AnnouncementID
-- #param DesignStatus				DesignStatus
-- #param Language					Language
-- #param Title						Title
-- #param HtmlContent				Html Content

CREATE PROCEDURE [DBO].CMM_UpdGeneralAnnounceLang
(
	@AnnouncementID	 FLOAT,
	@DesignStatus	 FLOAT,
	@LangPref 		 NVARCHAR(2),
	@Title			 NVARCHAR(200),
	@HtmlContent	 NTEXT
)
AS
	UPDATE [SCDATA].FQ67105L
	  SET 
		ML$9MTT = @Title,
		ML$9MSC = @HtmlContent
	WHERE
		ML$9NID = @AnnouncementID
		AND ML$9DS = @DesignStatus
		AND MLLNGP = @LangPref






	
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdGeneralAnnouncement'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdGeneralAnnouncement
	END

GO
-- #desc						Update General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				N/A
-- #db_references				N/A	


-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.
-- #param Priority				Priority.
-- #param AccessLevel			AccessLevel.
-- #param EffectiveDate			EffectiveDate.
-- #param ExpirationDate		ExpirationDate.
-- #param Title					Title.
-- #param HtmlContent			HtmlContent.
-- #param Url					Url.

CREATE PROCEDURE [DBO].CMM_UpdGeneralAnnouncement 
(
		@AnnouncementID			 FLOAT,	
		@DesignStatus			 FLOAT,
		@Priority				 FLOAT,
		@AccessLevel		     FLOAT,
		@EffectiveDate			 NUMERIC,
		@ExpirationDate			 NUMERIC,
		@Title					 NVARCHAR(200),
		@HtmlContent			 NTEXT,
		@Url				     NVARCHAR(508),
		@UserReservedCode		 NVARCHAR(2),
		@UserReservedDate		 NUMERIC,
		@UserReservedAmount		 FLOAT,
		@UserReservedNumber		 FLOAT,
		@UserReservedReference	 NVARCHAR(15),
		@UserId					 NVARCHAR(10),
		@ProgramId				 NVARCHAR(10),
		@WorkStationId			 NVARCHAR(10),
		@DateUpdated			 NUMERIC,
		@TimeOfDay				 NUMERIC
)
AS
	UPDATE [SCDATA].FQ67105
	SET 
		MS$9PRI = @Priority
	   ,MS$9MST = @AccessLevel
	   ,MSEFFF  = @EffectiveDate
	   ,MSEFFT  = @ExpirationDate
	   ,MS$9MTT = @Title
	   ,MS$9MSC = @HtmlContent
	   ,MS$9MLK = @Url
	   ,MSURCD  = @UserReservedCode
	   ,MSURDT  = @UserReservedDate
	   ,MSURAT  = @UserReservedAmount
	   ,MSURAB  = @UserReservedNumber
	   ,MSURRF  = @UserReservedReference
	   ,MSUSER  = @UserId
	   ,MSPID   = @ProgramId
	   ,MSJOBN  = @WorkStationId
	   ,MSUPMJ  = @DateUpdated
	   ,MSTDAY  = @TimeOfDay
	WHERE
		MS$9NID = @AnnouncementID AND
		MS$9DS  = @DesignStatus
		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdInstallation'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdInstallation
	END

GO

-- #desc					Updates an Installation description.
-- #bl_class				Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param @InstallationID	Installation ID.
-- #param @description		Description

CREATE Procedure [DBO].CMM_UpdInstallation
	@InstallationID NVARCHAR(3),
	@Description NVARCHAR(30),
	@ApplicationUseFlag NVARCHAR(8)
AS

SET NOCOUNT ON


	UPDATE 
		[SCDATA].FQ670001
	SET  
		INDSC1 = @Description,
		IN$9APFL = @ApplicationUseFlag 
	WHERE 
		IN$9INID = @InstallationID



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CMM_UpdNextNumber'))
	BEGIN
		DROP  Procedure  [DBO].CMM_UpdNextNumber
	END

GO

-- #desc							Update next number from table FQ67002
-- #bl_class						Premier.Common.NextNumber.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param @NextNumberID				key
-- #param @UseDescription1			Description
-- #param @UseDescription2			Description 2
-- #param @NextValue				Next value
-- #param @UserReservedCode			
-- #param @UserReservedDate
-- #param @UserReservedAmount
-- #param @UserReservedNumber
-- #param @UserReservedReference
-- #param @UserId
-- #param @ProgramId
-- #param @WorkStationId
-- #param @DateUpdated
-- #param @TimeOfDay

CREATE Procedure [DBO].CMM_UpdNextNumber
	@NextNumberID FLOAT,
	@UseDescription1 NVARCHAR(15),
	@UseDescription2 NVARCHAR(15),
	@NextValue FLOAT,
	@UserReservedCode NVARCHAR(6),
	@UserReservedDate NUMERIC,
	@UserReservedAmount FLOAT,
	@UserReservedNumber FLOAT,
	@UserReservedReference  NVARCHAR(30),
	@UserId NVARCHAR(10),
	@ProgramId NVARCHAR(10),
	@WorkStationId NVARCHAR(10),
	@DateUpdated NUMERIC,
	@TimeOfDay NUMERIC

AS

SET NOCOUNT ON

UPDATE
	[SCDATA].FQ67002
SET
	NNUD01 = @UseDescription1,
	NNUD02 = @UseDescription2,
	NN$9N001 = @NextValue,
	NNURCD = @UserReservedCode,
	NNURDT = @UserReservedDate,
	NNURAT = @UserReservedAmount,
	NNURAB = @UserReservedNumber,
	NNURRF = @UserReservedReference,
	NNUSER = @UserId,
	NNPID = @ProgramId,
	NNJOBN = @WorkStationId,
	NNUPMJ = @DateUpdated,
	NNTDAY = @TimeOfDay
WHERE 
	NN$9UKID = @NextNumberID
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddBranchPlantItems'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddBranchPlantItems
	END

GO

-- #desc						Add Item Related to Branch Plants
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId				Store Id
-- #param @BranchPlant    	    Branch Plant.
-- #param @ProductListXML		XML Short Product Numbers List.


CREATE PROCEDURE [DBO].INV_AddBranchPlantItems

	@StoreId		    NVARCHAR(3),
	@BranchPlant			NVARCHAR(12),
	@ProductListXML			XML,
	@Sequence				FLOAT,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC(18, 0),
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@DateUpdated			NUMERIC(18, 0),
	@TimeLastUpdated		FLOAT,
	@WorkStationID			NVARCHAR(10)

AS
BEGIN
	DECLARE @Pos INT;
	DECLARE @ItemNumber NVARCHAR(25);

	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @DeleteItemList NVARCHAR(MAX);
	DECLARE @ProductNumberQuery NVARCHAR(MAX);

	SET @ProductNumberQuery = N' '
	IF @ProductListXML IS NOT NULL 	
	BEGIN
			
		SET @ProductNumberQuery = N' INNER JOIN @ProductListXML.nodes(''/items/item'') AS items(item)
											ON FQ.BPITM = items.item.value(''.'',''FLOAT'') '

		/* Delete selected overrides */
		SET @SQL_DYNAMIC =
		N'DELETE FQ
		FROM 
			[SCDATA].FQ670005 FQ 
		'+ @ProductNumberQuery + N'
		WHERE
			FQ.BP$9INID = @StoreId';

		EXECUTE sp_executesql @SQL_DYNAMIC, N'@StoreId NVARCHAR(3), @ProductListXML	XML', @StoreId = @StoreId, @ProductListXML = @ProductListXML

		INSERT INTO [SCDATA].FQ670005
		(
			BP$9INID,
			BPITM,
			BPMCU,
			BPSEQ,
			BPURAB,
			BPURAT,
			BPURCD,
			BPURDT,
			BPURRF,
			BPUSER,
			BPPID,
			BPUPMJ,
			BPUPMT,
			BPJOBN
		)
		SELECT 
			@StoreId,
			items.item.value('.','FLOAT'),
			@BranchPlant,
			@Sequence,
			@UserReservedNumber,
			@UserReservedAmount,
			@UserReservedCode,
			@UserReservedDate,
			@UserReservedReference,
			@UserID,
			@ProgramID,
			@DateUpdated,
			@TimeLastUpdated,
			@WorkStationID
		FROM @ProductListXML.nodes('/items/item') AS items(item)

		
	END
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddCatalog'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddCatalog
	END

GO

-- #desc						Add Catalog
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @EffectiveModeFlag	Effective Mode Flag.		
-- #param @EffectiveFromDate	Effective From Date.
-- #param @EffectiveThruDate	Effective Thru Date.
-- #param @Description			Description.
-- #param @SequenceNumber		SequenceNumber.
-- #param @InstallationID	    InstallationID.
-- #param @MCU					MCU					
-- #param @MCUBehavior			MCU Behavior
-- #param @UserReservedNumber	User Reserved Number	
-- #param @UserReservedAmount	User Reserved Amount	
-- #param @UserReservedCode		User Reserved Code		
-- #param @UserReservedDate		User Reserved Date		
-- #param @UserReservedReference User Reserved Reference
-- #param @UserID				User Id
-- #param @ProgramID			Program Id
-- #param @WorkStationID		WorkStation ID		
-- #param @DateUpdated			Date Updated			
-- #param @TimeLastUpdated		Time Last Updated

CREATE PROCEDURE [DBO].INV_AddCatalog  
	
	@InstallationID			NVARCHAR(3),
	@CatalogId				NVARCHAR(3),
	@EffectiveModeFlag 		FLOAT,	
	@EffectiveFromDate		NUMERIC,
	@EffectiveThruDate		NUMERIC,
	@Description			NVARCHAR(30),
	@SequenceNumber			FLOAT,
	@MCU					NVARCHAR(12),	
	@MCUBehavior			NVARCHAR(1),	
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@WorkStationID			NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC
	
AS


INSERT INTO [SCDATA].FQ67412
           (CA$9CLGID
           ,CA$9EFM
           ,CAEFFF
           ,CAEFFT
           ,CADSC1
           ,CASEQ
           ,CA$9INID
		   ,CAMCU
		   ,CA$9CCFU
		   ,CAURAB  
		   ,CAURAT  
	       ,CAURCD  
		   ,CAURDT  
	       ,CAURRF  
		   ,CAUSER  
		   ,CAPID   
		   ,CAUPMJ  
		   ,CAUPMT  
		   ,CAJOBN)
     VALUES
           (@CatalogID,
			@EffectiveModeFlag,
			@EffectiveFromDate,
			@EffectiveThruDate,
			@Description,
			@SequenceNumber,
			@InstallationID,
			@MCU,
			@MCUBehavior,
			@UserReservedNumber,
			@UserReservedAmount,
			@UserReservedCode,
			@UserReservedDate,
			@UserReservedReference,
			@UserID,
			@ProgramID,
			@DateUpdated,
			@TimeLastUpdated,
			@WorkStationID
			)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddCatalogDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddCatalogDetail
	END

GO

-- #desc						Add Catalog Detail
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID			UniqueKeyID
-- #param @ParentKeyID    	    ParentKeyID.
-- #param @IncludeInSearch		Include In Search.
-- #param @DataItem				Data Item.
-- #param @UserDefinedCode	    User Defined Code.
-- #param @Description			Description.
-- #param @EffectiveModeFlag	Effective Mode Flag.		
-- #param @EffectiveFromDate	Effective From Date.
-- #param @EffectiveThruDate	Effective Thru Date.
-- #param @SequenceNumber		SequenceNumber.
-- #param @ImageName		    Node Image Name.
-- #param @TemplateID		    TemplateID.

CREATE PROCEDURE [DBO].INV_AddCatalogDetail  
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID        FLOAT OUTPUT,
	@ParentKeyID    	FLOAT,	
	@IncludeInSearch	FLOAT,
	@DataItem			NVARCHAR(10),
	@UserDefinedCode	NVARCHAR(10),
	@Description	    NVARCHAR(30),
	@EffectiveModeFlag 	FLOAT,
	@EffectiveFromDate	NUMERIC,
	@EffectiveThruDate	NUMERIC,
	@SequenceNumber		FLOAT,
	@ImageName			NVARCHAR(256),
	@TemplateID			NVARCHAR(10)
	
AS
	IF(@UniqueKeyID = 0)
	BEGIN
		SET @UniqueKeyID = (SELECT MAX(CDUKID) + 1 
							FROM [SCDATA].FQ67413
							WHERE CD$9CLGID = @CatalogID)
	END
		
	IF(@UniqueKeyID IS NULL) BEGIN
		SET @UniqueKeyID = 1
	END		
	
	IF(@SequenceNumber IS NULL)
	BEGIN
	SET @SequenceNumber = 1
	END
	
	INSERT INTO [SCDATA].FQ67413
			   (
				CD$9CLGID
			   ,CDUKID
			   ,CD$9PKID
			   ,CD$9IIS
			   ,CDDTAI
			   ,CDKY
			   ,CDDL01
			   ,CD$9EFM
			   ,CDEFFF
			   ,CDEFFT
			   ,CDSEQ
			   ,CDIMGURL
			   ,CDTMPI
			   )
		 VALUES
			   (
				@CatalogID,
				@UniqueKeyID,
				@ParentKeyID,
				@IncludeInSearch,
				@DataItem,
				@UserDefinedCode,
				@Description,
				@EffectiveModeFlag,	
				@EffectiveFromDate,
				@EffectiveThruDate,
				@SequenceNumber,
				@ImageName,
				@TemplateID
				) 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddCatalogDetailLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddCatalogDetailLang
	END

GO

-- #desc						Add Catalog Detail Lang
-- #bl_class					Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID			UniqueKeyID.
-- #param @LangPref    	        Language Preference.
-- #param @Description			Description.

CREATE PROCEDURE [DBO].INV_AddCatalogDetailLang
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID        FLOAT,	
	@LangPref			NVARCHAR(2),
	@Description	    NVARCHAR(30)
AS



INSERT INTO [SCDATA].FQ67413L
           (CD$9CLGID
           ,CDUKID
		   ,CDLNGP
           ,CDDL01)
     VALUES
           (@CatalogID,
			@UniqueKeyID,
			@LangPref,
			@Description
			)  
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddCatalogLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddCatalogLang
	END

GO

-- #desc						Add Catalog Lang
-- #bl_class					Premier.Inventory.CatalogLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @LangPref    	        Language Preference.
-- #param @Description			Description.

CREATE PROCEDURE [DBO].INV_AddCatalogLang  
	
	@CatalogId		    NVARCHAR(3),
	@LangPref			NVARCHAR(2),
	@Description		NVARCHAR(30)
	
AS

INSERT INTO [SCDATA].FQ67412L
          (CA$9CLGID
           ,CALNGP
           ,CADSC1)
     VALUES
           (@CatalogID,
			@LangPref,
			@Description
			)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddCatalogNodeItem'))
BEGIN
	DROP  Procedure  [DBO].INV_AddCatalogNodeItem
END

GO

-- #desc						Add Catalog Node Item
-- #bl_class					Premier.Inventory.CatalogNodeItem.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id
-- #param @UniqueKeyID			UniqueKey ID
-- #param @ItemNumber			Item Number
-- #param @SequenceNumber		Sequence Number

CREATE Procedure [DBO].INV_AddCatalogNodeItem
	@CatalogId				NVARCHAR(3),
	@UniqueKeyID			FLOAT,
	@ItemNumber				FLOAT,
	@SequenceNumber			FLOAT,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC,
	@WorkStationID			NVARCHAR(10)
AS

	INSERT INTO  [SCDATA].FQ67413I
	(
		IN$9CLGID,
		INUKID,
		INITM,
		INSEQ,
		INURAB,--UserReservedNumber 
		INURAT,--UserReservedAmount
		INURCD,--UserReservedCode
		INURDT,--UserReservedDate
		INURRF,--UserReservedReference
		INUSER,--UserId
		INPID, --ProgramId
		INUPMJ,--DateUpdated
		INUPMT,--TimeLastUpdated
		INJOBN --WorkstationId
	)
	VALUES
	(
		@CatalogId,
		@UniqueKeyID,
		@ItemNumber,
		@SequenceNumber,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedReference,
		@UserID,
		@ProgramID,
		@DateUpdated,
		@TimeLastUpdated,
		@WorkStationID
	) 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddItemWebContentDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddItemWebContentDetail
	END

GO

-- #desc						Add Item Web Content Detail
-- #bl_class					Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param @InstallationID	    InstallationID.
-- #param @ItemNumber			ItemNumber.
-- #param @DesignStatus			DesignStatus.
-- #param @SequenceNumber		SequenceNumber.
-- #param @ParagraphTitle		ParagraphTitle.
-- #param @HtmlContent			HtmlContent.
-- #param @ActiveInactive		Active-Inactive.

CREATE PROCEDURE [DBO].INV_AddItemWebContentDetail  
	@InstallationID NVARCHAR(3),
	@ItemNumber FLOAT,
	@UniqueKeyID AS FLOAT OUTPUT,
	@DesignStatus FLOAT,
	@SequenceNumber FLOAT,
	@ParagraphTitle NVARCHAR(30),
	@HtmlContent NTEXT,
	@ActiveInactive NVARCHAR(1),
	@EffectiveFromDate NUMERIC,
	@EffectiveThruDate NUMERIC,
	@UserReservedDate NUMERIC,
	@UserReservedAmount FLOAT,
	@UserReservedNumber FLOAT,
	@UserReservedReference NVARCHAR(15),
	@UserId NVARCHAR(10),
	@ProgramId NVARCHAR(10),
	@WorkStationId NVARCHAR(10),
	@DateUpdated NUMERIC,
	@TimeOfDay NUMERIC
	
AS 

SET NOCOUNT ON

-- Get next Unique Key Id   
SELECT @UniqueKeyID = MAX(CDUKID) + 1 
FROM [SCDATA].FQ67411 A 
WHERE 
	CDITM = @ItemNumber 
	AND CD$9INID = @InstallationID 
	AND CD$9DS = @DesignStatus
	
IF @UniqueKeyID IS NULL SET @UniqueKeyID = 1

INSERT INTO [SCDATA].FQ67411
           (CDITM
           ,CDUKID
           ,CD$9INID
           ,CD$9DS
           ,CDSEQ
           ,CD$9PTL
           ,CD$9HTML
           ,CDASAI
           ,CDEFFF
           ,CDEFFT
           ,CDURDT
           ,CDURAT
           ,CDURAB
           ,CDURRF
           ,CDUSER
           ,CDPID
           ,CDJOBN
           ,CDUPMJ
           ,CDTDAY)
     VALUES
           (@ItemNumber ,
			@UniqueKeyID ,
			@InstallationID ,
			@DesignStatus ,
			@SequenceNumber ,
			@ParagraphTitle ,
			@HtmlContent ,
			@ActiveInactive ,
			@EffectiveFromDate ,
			@EffectiveThruDate ,
			@UserReservedDate ,
			@UserReservedAmount ,
			@UserReservedNumber ,
			@UserReservedReference ,
			@UserId ,
			@ProgramId ,
			@WorkStationId ,
			@DateUpdated ,
			@TimeOfDay )
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddItemWebContentDetLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddItemWebContentDetLang
	END

GO


-- #desc						Add Language override for Item Web Content Detail
-- #bl_class					Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param @InstallationID	    InstallationID.
-- #param @ItemNumber			ItemNumber.
-- #param @DesignStatus			DesignStatus.
-- #param @LangPref				Language Preference.
-- #param @UniqueKeyID			UniqueKeyID.
-- #param @ParagraphTitle		ParagraphTitle.
-- #param @HtmlContent			HtmlContent.


CREATE PROCEDURE [DBO].INV_AddItemWebContentDetLang  
	@InstallationID NVARCHAR(3),
	@ItemNumber FLOAT,
	@DesignStatus FLOAT,
	@UniqueKeyID FLOAT,
	@LangPref NVARCHAR(2),
	@ParagraphTitle NVARCHAR(30),
	@HtmlContent ntext,
	@UserReservedCode NVARCHAR(2),
	@UserReservedDate NUMERIC,
	@UserReservedAmount FLOAT,
	@UserReservedNumber FLOAT,
	@UserReservedReference NVARCHAR(15),
	@UserId NVARCHAR(10),
	@ProgramId NVARCHAR(10),
	@WorkStationId NVARCHAR(10),
	@DateUpdated NUMERIC,
	@TimeOfDay NUMERIC

AS 

SET NOCOUNT ON


INSERT INTO [SCDATA].FQ67411L
           (CLITM
           ,CLUKID
           ,CL$9INID
           ,CL$9DS
           ,CLLNGP
           ,CL$9PTL
           ,CL$9HTML
           ,CLURCD
           ,CLURDT
           ,CLURAT
           ,CLURAB
           ,CLURRF
           ,CLUSER
           ,CLPID
           ,CLJOBN
           ,CLUPMJ
           ,CLTDAY)
     VALUES
           (@ItemNumber ,
			@UniqueKeyID ,
			@InstallationID ,
			@DesignStatus ,
			@LangPref ,
			@ParagraphTitle ,
			@HtmlContent ,
			@UserReservedCode ,
			@UserReservedDate ,
			@UserReservedAmount ,
			@UserReservedNumber ,
			@UserReservedReference ,
			@UserId ,
			@ProgramId ,
			@WorkStationId ,
			@DateUpdated ,
			@TimeOfDay )
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddItemWebContentHeader'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddItemWebContentHeader
	END

GO


-- #desc						Add Content Header
-- #bl_class					Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param @ItemNumber			ItemNumber.
-- #param @InstallationID		InstallationID.
-- #param @DesignStatus			DesignStatus.
-- #param @Description1			Description1.
-- #param @Description2			Description2.
-- #param @Description3			Description3.

CREATE PROCEDURE [DBO].INV_AddItemWebContentHeader 

		@InstallationID NVARCHAR(3),	
		@ItemNumber FLOAT,
		@DesignStatus FLOAT,
		@Description1 NVARCHAR(30),
		@Description2 NVARCHAR(30),
		@Description3 NVARCHAR(30),
		@MessagePriority FLOAT,
		@HtmlContent NTEXT,
		@PortalUrl NVARCHAR(256),
		@UserReservedCode NVARCHAR(2),
		@UserReservedDate NUMERIC,
		@UserReservedAmount FLOAT,
		@UserReservedNumber FLOAT,
		@UserReservedReference NVARCHAR(15),
		@UserId NVARCHAR(10),
		@ProgramId NVARCHAR(10),
		@WorkStationId NVARCHAR(10),
		@DateUpdated NUMERIC,
		@TimeOfDay NUMERIC
		
	AS

	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ67410
           (CHITM
           ,CH$9INID
           ,CH$9DS
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,CHUPMJ
           ,CHTDAY)
     VALUES
      (	@ItemNumber,
		@InstallationID ,	
		@DesignStatus ,
		@Description1 ,
		@Description2 ,
		@Description3 ,
		@MessagePriority ,
		@HtmlContent ,
		@PortalUrl,
		@UserReservedCode ,
		@UserReservedDate ,
		@UserReservedAmount ,
		@UserReservedNumber ,
		@UserReservedReference ,
		@UserId ,
		@ProgramId ,
		@WorkStationId,
		@DateUpdated,
		@TimeOfDay )
		
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddItemWebContentHeadLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddItemWebContentHeadLang
	END

GO

-- #desc						Add Content Header Lang
-- #bl_class					Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param @ItemNumber			ItemNumber.
-- #param @InstallationID		InstallationID.
-- #param @LangPref				Language Preference
-- #param @DesignStatus			DesignStatus.
-- #param @Description1			Description1.
-- #param @Description2			Description2.
-- #param @Description3			Description3.

CREATE PROCEDURE [DBO].INV_AddItemWebContentHeadLang 

		@InstallationID NVARCHAR(3),
		@ItemNumber FLOAT,
		@DesignStatus FLOAT,
		@LangPref NVARCHAR(2),
		@Description1 NVARCHAR(30),
		@Description2 NVARCHAR(30),
		@Description3 NVARCHAR(30),
		@HtmlContent NTEXT,
		@UserReservedCode NVARCHAR(2),
		@UserReservedDate NUMERIC,
		@UserReservedAmount FLOAT,
		@UserReservedNumber FLOAT,
		@UserReservedReference NVARCHAR(15),
		@UserId NVARCHAR(10),
		@ProgramId NVARCHAR(10),
		@WorkStationId NVARCHAR(10),
		@DateUpdated NUMERIC,
		@TimeOfDay NUMERIC
		
	AS

	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ67410L
           (CLITM
           ,CL$9INID
           ,CL$9DS
           ,CLLNGP
           ,CLDSC1
           ,CLDSC2
           ,CLDSC3
           ,CL$9HTML
           ,CLURCD
           ,CLURDT
           ,CLURAT
           ,CLURAB
           ,CLURRF
           ,CLUSER
           ,CLPID
           ,CLJOBN
           ,CLUPMJ
           ,CLTDAY)
     VALUES
      (	@ItemNumber,
		@InstallationID ,	
		@DesignStatus ,
		@LangPref,
		@Description1 ,
		@Description2 ,
		@Description3 ,
		@HtmlContent ,
		@UserReservedCode ,
		@UserReservedDate ,
		@UserReservedAmount ,
		@UserReservedNumber ,
		@UserReservedReference ,
		@UserId ,
		@ProgramId ,
		@WorkStationId,
		@DateUpdated,
		@TimeOfDay )
		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddUnitOfMeasure'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddUnitOfMeasure
	END

GO

-- #desc						Add UOM 
-- #bl_class					Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @UnitOfMeasure		Unit of Measure
-- #param @InstallationID		Installation ID		
-- #param @Description Drawer	Number.

CREATE Procedure [DBO].INV_AddUnitOfMeasure
	@InstallationID NVARCHAR(3), 
	@UnitOfMeasure NVARCHAR(2),
	@Description NVARCHAR(30)
AS

	SET NOCOUNT ON

	INSERT INTO  [SCDATA].FQ67415
	(
	 UM$9INID,  UMUOM,  UMDSC1
	)
	VALUES
	(
	 @InstallationID, @UnitOfMeasure, @Description
	)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_AddUnitOfMeasureLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_AddUnitOfMeasureLang
	END

GO

-- #desc					Add UOM Lang
-- #bl_class				Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @UnitOfMeasure	Unit of Measure	
-- #param @LangPref			Language Preference
-- #param @Description		Description	

CREATE PROCEDURE [DBO].INV_AddUnitOfMeasureLang	
	@UnitOfMeasure  	NVARCHAR(10),	
	@Description		NVARCHAR(30),
	@LangPref			NVARCHAR(2)
AS

	INSERT INTO [SCDATA].FQ67415L
	(
	 UM$9INID,  
	 UMUOM, 
	 UMLNGP,    
	 UMDSC1
	)
	VALUES
	(
	 '', 
	 @UnitOfMeasure, 
	 @LangPref,   
	 @Description
	)

  
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_CheckAssociatedItems'))
	BEGIN
		DROP  Procedure  [DBO].INV_CheckAssociatedItems
	END

GO 

-- #desc						Check if item has replacements 
-- #bl_class					Premier.Inventory.ItemAssociatedList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @ShortItemNumber		Short Item Number
-- #param @RefType				Reference Type

CREATE Procedure [DBO].INV_CheckAssociatedItems
(		
	@ShortItemNumber	FLOAT,
	@RefType			NVARCHAR(256),
	@AddressNumber		FLOAT
)
AS
	
	DECLARE @CurrentJulianDate INTEGER
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
	
	SELECT 
		COUNT(*) 
	FROM 
		[SCDATA].F4104               
	WHERE 
		IVITM = @ShortItemNumber
		AND IVXRT = @RefType
		AND ((@CurrentJulianDate >= IVEFTJ AND @CurrentJulianDate <= IVEXDJ) OR
			 (@CurrentJulianDate >= IVEFTJ AND IVEXDJ = 0))
		AND  (IVAN8 = @AddressNumber OR IVAN8 = 0)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelBranchPlantItems'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelBranchPlantItems
	END

GO

-- #desc						Add Item Related to Branch Plants
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs 
-- #db_dependencies				N/A
-- #db_references				N/AC:\DevOps\Data\ORACLE

-- #param @StoreId		Installation ID
-- #param @BranchPlant    	    Branch Plant.
-- #param @ShortProductNumbersXML	XML with short item numbers list.


CREATE PROCEDURE [DBO].INV_DelBranchPlantItems

	@StoreId			NVARCHAR(3),
	@BranchPlant			NVARCHAR(12),
	@ShortProductNumbersXML	XML
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @ShortProductNumberQuery NVARCHAR(MAX);

	SET @ShortProductNumberQuery = N' '
	IF @ShortProductNumbersXML IS NOT NULL 
		BEGIN
			SET @ShortProductNumberQuery = N' INNER JOIN @ShortProductNumbersXML.nodes(''/items/item'') AS items(item)
											ON A.BPITM = items.item.value(''.'',''FLOAT'') '
	END


	SET @SQL_DYNAMIC =
	N'DELETE A
	FROM
		[SCDATA].FQ670005 A 
		'+ @ShortProductNumberQuery + N'
	WHERE
		A.BP$9INID = @StoreId AND A.BPMCU = @BranchPlant';

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@StoreId NVARCHAR(3),@BranchPlant NVARCHAR(12), @ShortProductNumbersXML	XML', @StoreId = @StoreId, @BranchPlant = @BranchPlant, @ShortProductNumbersXML = @ShortProductNumbersXML
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelCatalog'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelCatalog
	END

GO


-- #desc						Delete Catalog,Delete Catalog Language
--								Delete Catalog Detail and Delete Catalog Detail Language
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @InstallationID    	InstallationID.

CREATE PROCEDURE [DBO].INV_DelCatalog
	
	@InstallationID     NVARCHAR(3),
	@CatalogId		    NVARCHAR(3)
	
AS

DELETE FROM [SCDATA].FQ67412
WHERE
     (CA$9CLGID = @CatalogId AND
      CA$9INID  = @InstallationID);
      
--DELETE CATALOG LANG
EXEC [DBO].INV_DelCatalogLang @CatalogId,NULL
--DELETE CATALOG DETAIL
EXEC [DBO].INV_DelCatalogDetail @CatalogId,NULL

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelCatalogNodeItem'))
BEGIN
	DROP  Procedure  [DBO].INV_DelCatalogNodeItem
END

GO

-- #desc					Delete Catalog Node Item
-- #bl_class				Premier.Inventory.CatalogNodeItem.cs/CatalogNodeItems.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AttributeID		Catalog ID
-- #param @UniqueKeyID		UniqueKey ID
-- #param @ItemNumber		ItemNumber

CREATE Procedure [DBO].INV_DelCatalogNodeItem
	@CatalogID		NVARCHAR(10),
	@UniqueKeyID	FLOAT,
	@ItemNumber		FLOAT
AS
	SET NOCOUNT ON
	
	DELETE FROM
		[SCDATA].FQ67413I
	WHERE
		IN$9CLGID = @CatalogID AND
	    INUKID	= @UniqueKeyID  AND
	    INITM	= @ItemNumber
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelItemWebContentHeader'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelItemWebContentHeader
	END

GO

-- #desc					Delete Item Web Content Header and related registers
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			INV_DelItemWebContentHeadLang, INV_DelItemWebContentDetail
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @ItemNumber	    Item Number	 
-- #param @DesignStatus		Design Status


CREATE PROCEDURE [DBO].INV_DelItemWebContentHeader
		@InstallationID NVARCHAR(3),
	    @ItemNumber FLOAT,	
		@DesignStatus FLOAT
AS

	DELETE FROM 
		[SCDATA].FQ67410
    WHERE 
		CHITM = @ItemNumber 
		AND CH$9INID = @InstallationID
        AND CH$9DS = @DesignStatus
        
    EXEC [DBO].INV_DelItemWebContentHeadLang @InstallationID,@ItemNumber,@DesignStatus,null
    
    --Delete all Item Web Content Detail asociated with Header
    EXEC [DBO].INV_DelItemWebContentDetail @InstallationID, @ItemNumber, @DesignStatus, null
            
            
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_DelUnitOfMeasure'))
	BEGIN
		DROP  Procedure  [DBO].INV_DelUnitOfMeasure
	END

GO

-- #desc						Del UOM 
-- #bl_class					Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @UnitOfMeasure		Unit of Measure
-- #param @InstallationID		Installation ID		
-- #param @Description Drawer	Number.

CREATE Procedure [DBO].INV_DelUnitOfMeasure
	@InstallationID NVARCHAR(3),
	@UnitOfMeasure NVARCHAR(10)
	
AS

	SET NOCOUNT ON
	
	DELETE 
		[SCDATA].FQ67415
	WHERE
		UM$9INID = @InstallationID
	    AND UMUOM = @UnitOfMeasure
	    
	EXEC [DBO].INV_DelUnitOfMeasureLang @UnitOfMeasure, null

	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcCheckDisplayItemNumbers'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcCheckDisplayItemNumbers
	END

GO

SET QUOTED_IDENTIFIER ON
GO

-- #desc							Verify if exist items for the DisplayItemNumber List provided and return the ShortItemNumber respective.
-- #bl_class						Premier.Inventory.CheckDisplayItemNumbersCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param DisplayItemSetting		Display Item Setting
-- #param DisplayItemNumbersXML		Display Item Number List

CREATE PROCEDURE [DBO].INV_ExcCheckDisplayItemNumbers
(
	@DisplayItemSetting			NVARCHAR(4),
	@DisplayItemNumbersXML		XML
)
AS

	IF @DisplayItemSetting = 'LITM' BEGIN
		;WITH CTE AS 
		(
			SELECT items.item.value('.','NVARCHAR(25)') AS LongItemNumber
			FROM @DisplayItemNumbersXML.nodes('/items/item') AS items(item)
		)
		SELECT 
			I.IMITM	AS ShortItemNumber,
			I.IMLITM AS DisplayItemNumber
		FROM CTE X
		INNER JOIN [SCDATA].F4101 I
			ON I.IMLITM = X.LongItemNumber
		OPTION ( OPTIMIZE FOR ( @DisplayItemNumbersXML = NULL ) );

	END
	ELSE IF @DisplayItemSetting = 'AITM' BEGIN
		;WITH CTE AS 
		(
			SELECT items.item.value('.','NVARCHAR(25)') AS AuxItemNumber
			FROM @DisplayItemNumbersXML.nodes('/items/item') AS items(item)
		)
		SELECT 
			I.IMITM AS ShortItemNumber,
			I.IMAITM AS DisplayItemNumber
		FROM CTE X
		INNER JOIN [SCDATA].F4101 I
			ON I.IMAITM = X.AuxItemNumber
		OPTION ( OPTIMIZE FOR ( @DisplayItemNumbersXML = NULL ) );

	END
	ELSE BEGIN
		;WITH CTE AS 
		(
			SELECT items.item.value('.','FLOAT') AS ShortItemNumber
			FROM @DisplayItemNumbersXML.nodes('/items/item') AS items(item)
		)
		SELECT 
			I.IMITM AS ShortItemNumber,
			CAST(I.IMITM AS NVARCHAR(25)) AS DisplayItemNumber
		FROM CTE X
		INNER JOIN [SCDATA].F4101 I
			ON I.IMITM = X.ShortItemNumber
		OPTION ( OPTIMIZE FOR ( @DisplayItemNumbersXML = NULL ) );

	END;

GO
SET QUOTED_IDENTIFIER OFF 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcCheckItemBranchOverr'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcCheckItemBranchOverr
	END
GO

-- #desc				
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @ShortItemNumber		Short Item Number		

CREATE Procedure [DBO].INV_ExcCheckItemBranchOverr
(
	@InstallationID			NVARCHAR(3),
	@ShortItemNumber		FLOAT
)
AS
	BEGIN
		SELECT A.BPMCU AS BranchPlantID
		FROM
			[SCDATA].FQ670005 A			/*Branch Plant Override by Item and Installation ID*/
		INNER JOIN [SCDATA].FQ679910 B	/*BranchPlant by Installation*/
			ON B.BI$9INID = A.BP$9INID
			AND B.BIMCU = A.BPMCU
		WHERE
			A.BP$9INID = @InstallationID AND
			A.BPITM = @ShortItemNumber
	END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcCopyCatalog'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcCopyCatalog
	END

GO

-- #desc						Copy a Catalog from Source Installation to Target Installation.
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID	    Installation ID.
-- #param @InstallationIDFrom	Copy Installation ID.
-- #param @SelectionKeys        Selection Keys.
-- #param @UserID				User ID.

CREATE PROCEDURE [DBO].INV_ExcCopyCatalog
	@SourceInstallationID NVARCHAR(3),
	@SourceCatalogID NVARCHAR(3),
	@NewInstallationID NVARCHAR(3),
	@NewCatalogID NVARCHAR(3)
	
AS
BEGIN
	--CATALOG COPY
	INSERT INTO [SCDATA].FQ67412 (CA$9CLGID, CA$9EFM, CAEFFF, CAEFFT, CADSC1, CASEQ, CA$9INID)
	SELECT 
		@NewCatalogID,
		CA$9EFM,
		CAEFFF,
		CAEFFT,
		CADSC1,
		CASEQ,
		@NewInstallationID
	FROM [SCDATA].FQ67412
	WHERE CA$9CLGID = @SourceCatalogID

	--CATALOG HEADER LANG
	INSERT INTO [SCDATA].FQ67412L (CA$9CLGID, CALNGP, CADSC1)
	SELECT 
		@NewCatalogID,
		CALNGP,
		CADSC1
	FROM [SCDATA].FQ67412L
	WHERE CA$9CLGID = @SourceCatalogID


	--NODES COPY
	INSERT INTO [SCDATA].FQ67413 (CD$9CLGID, CDUKID, CD$9PKID, CD$9IIS, CDDTAI, CDKY, CDDL01, CD$9EFM, CDEFFF, CDEFFT, CDSEQ, CDIMGURL, CDTMPI)
	SELECT
		@NewCatalogID,
		CDUKID,
		CD$9PKID,
		CD$9IIS,
		CDDTAI,
		CDKY,
		CDDL01,
		CD$9EFM,
		CDEFFF,
		CDEFFT,
		CDSEQ,
		CDIMGURL,
		CDTMPI
	FROM [SCDATA].FQ67413
	WHERE CD$9CLGID = @SourceCatalogID

	--NODE ITEMS
	INSERT INTO [SCDATA].FQ67413I (IN$9CLGID, INUKID, INITM, INSEQ, INURAB, INURAT, INURCD, INURDT, INURRF, INUSER, INPID, INUPMJ, INUPMT, INJOBN)
	SELECT
		@NewCatalogID,
		INUKID,
		INITM,
		INSEQ,
		INURAB,
		INURAT,
		INURCD,
		INURDT,
		INURRF,
		INUSER,
		INPID,
		INUPMJ,
		INUPMT,
		INJOBN
	FROM [SCDATA].FQ67413I
	WHERE IN$9CLGID = @SourceCatalogID

	--NODE LANGUAGES
	INSERT INTO [SCDATA].FQ67413L (CD$9CLGID, CDUKID, CDLNGP, CDDL01)
	SELECT
		@NewCatalogID,
		CDUKID,
		CDLNGP,
		CDDL01
		FROM [SCDATA].FQ67413L
	WHERE CD$9CLGID = @SourceCatalogID
	
END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcCopyItemWebContenToInst'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcCopyItemWebContenToInst
	END

GO

-- #desc							Copy Item Web Content to Specific Installation
-- #bl_class						Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @SourceInstallation		Source Installation ID
-- #param @TargetInstallation		Target Installation ID
-- #param @ItemNumber				Item Number.
-- #param @Status					Item Web Status.

CREATE Procedure [DBO].INV_ExcCopyItemWebContenToInst
(
		@SourceInstallation NVARCHAR(3),
		@TargetInstallation NVARCHAR(3),
		@ItemNumber FLOAT,
		@Status FLOAT
)
AS

	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = @ItemNumber AND
    CH$9INID = @TargetInstallation AND
	CH$9DS = @Status
	--Delete main header table language
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = @ItemNumber AND
    CL$9INID = @TargetInstallation AND
	CL$9DS = @Status
	--Delete detail table
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = @ItemNumber AND
    CD$9INID = @TargetInstallation AND
	CD$9DS = @Status
	--Delete detail table language
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = @ItemNumber AND
    CL$9INID = @TargetInstallation AND
	CL$9DS = @Status
	
	--Copy main header table
	INSERT INTO [SCDATA].FQ67410 (CHITM,CH$9INID,CH$9DS,CHDSC1,CHDSC2,CHDSC3,CHPGTX,CHDL01,CHDL02,CHDL03,CHDL04,CHDL05,CHDL06,CHDL07,CHDL08,CHDL09,CHDL10,CHCOMMENTS,CH$9PRI,CH$9HTML,CHPTURL,CHURCD,CHURDT,CHURAT,CHURAB,CHURRF,CHUSER,CHPID,CHJOBN,CHUPMJ,CHTDAY)
	SELECT 
		    CHITM
           ,@TargetInstallation
           ,CH$9DS
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CHPGTX
           ,CHDL01
           ,CHDL02
           ,CHDL03
           ,CHDL04
           ,CHDL05
           ,CHDL06
           ,CHDL07
           ,CHDL08
           ,CHDL09
           ,CHDL10
           ,CHCOMMENTS
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB 
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,CHUPMJ
           ,CHTDAY
	FROM [SCDATA].FQ67410
	WHERE  
		CHITM = @ItemNumber AND
        CH$9INID = @SourceInstallation AND
		CH$9DS = @Status
		
	--Copy header Lang Table	
	INSERT INTO [SCDATA].FQ67410L (CLITM,CL$9INID,CL$9DS,CLLNGP,CLDSC1,CLDSC2,CLDSC3,CLPGTX,CLDL01,CLDL02,CLDL03,CLDL04,CLDL05,CLDL06,CLDL07,CLDL08,CLDL09,CLDL10,CLCOMMENTS,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
	SELECT 
	   CLITM
	  ,@TargetInstallation
	  ,CL$9DS
	  ,CLLNGP
      ,CLDSC1
      ,CLDSC2
      ,CLDSC3
      ,CLPGTX
      ,CLDL01
      ,CLDL02
      ,CLDL03
      ,CLDL04
      ,CLDL05
      ,CLDL06
      ,CLDL07
      ,CLDL08
      ,CLDL09
      ,CLDL10
      ,CLCOMMENTS
      ,CL$9HTML
      ,CLURCD
      ,CLURDT
      ,CLURAT
      ,CLURAB
      ,CLURRF
      ,CLUSER
      ,CLPID
      ,CLJOBN
      ,CLUPMJ
      ,CLTDAY
	FROM [SCDATA].FQ67410L
	WHERE  
		CLITM = @ItemNumber AND
        CL$9INID = @SourceInstallation AND
		CL$9DS = @Status
		
	--Copy Detail Table
	INSERT INTO [SCDATA].FQ67411 (CDITM,CDUKID,CD$9INID,CD$9DS,CDSEQ,CD$9PTL,CD$9HTML,CDASAI,CDEFFF,CDEFFT,CDURCD,CDURDT,CDURAT,CDURAB,CDURRF,CDUSER,CDPID,CDJOBN,CDUPMJ,CDTDAY)
	SELECT 
		 CDITM
		,CDUKID
		,@TargetInstallation
		,CD$9DS
		,CDSEQ
		,CD$9PTL
		,CD$9HTML
		,CDASAI
		,CDEFFF
		,CDEFFT
		,CDURCD
		,CDURDT
		,CDURAT
		,CDURAB
		,CDURRF
		,CDUSER
		,CDPID
		,CDJOBN
		,CDUPMJ
		,CDTDAY
	FROM [SCDATA].FQ67411
	WHERE  
		CDITM = @ItemNumber AND
        CD$9INID = @SourceInstallation AND
		CD$9DS = @Status
	
	--Copy Lang Detail Table
	INSERT INTO [SCDATA].FQ67411L (CLITM,CLUKID,CL$9INID,CL$9DS,CLLNGP,CL$9PTL,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
	SELECT 
		 CLITM
		,CLUKID
		,@TargetInstallation
		,CL$9DS
		,CLLNGP
		,CL$9PTL
		,CL$9HTML
		,CLURCD
		,CLURDT
		,CLURAT
		,CLURAB
		,CLURRF
		,CLUSER
		,CLPID
		,CLJOBN
		,CLUPMJ
		,CLTDAY
	FROM [SCDATA].FQ67411L
	WHERE  
		CLITM = @ItemNumber AND
        CL$9INID = @SourceInstallation AND
		CL$9DS = @Status

GO
 
 
     
       
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcExistItemContentByInst'))
BEGIN
	DROP  Procedure  [DBO].INV_ExcExistItemContentByInst
END

GO

-- #desc						Indicates if the Item Content of an installation exist
-- #bl_class					Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @ItemNumber			Item Number.
-- #param @InstallationID		Installation ID.
-- #param @DesignStatus			DesignStatus.

CREATE PROCEDURE [DBO].INV_ExcExistItemContentByInst
@InstallationID NVARCHAR(3),
@ItemNumber FLOAT,
@DesignStatus FLOAT

AS

	 IF NOT EXISTS(SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE (CH$9INID = @InstallationID AND CHITM = @ItemNumber) AND (@DesignStatus IS NULL OR CH$9DS = @DesignStatus))
		 BEGIN
		  SET @InstallationID='***';
		 END

	  SELECT 
	  count(*) AS ItemsCount
	  , CH$9INID AS InstallationID
	  
	  FROM [SCDATA].FQ67410 
	  WHERE CHITM=@ItemNumber AND CH$9INID = @InstallationID
	  AND (@DesignStatus IS NULL OR CH$9DS = @DesignStatus)
	  GROUP BY CH$9INID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcGetCatNodeXMLItemList'))
BEGIN
	DROP  PROCEDURE  [DBO].INV_ExcGetCatNodeXMLItemList
END
GO
-- #bl_class					Premier.Inventory.GetCatalogNodeXMLItemsCommand.cs
-- #desc						Returns the data of the items, langs.
-- #db_dependencies				INV_GetCatalogNodeListFnc
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @CatalogID			Catalog Id
-- #param @CatalogMCU			Catalog MCU


CREATE PROCEDURE [DBO].INV_ExcGetCatNodeXMLItemList
(
	 @InstallationID	NVARCHAR(3),
	 @CatalogID			NVARCHAR(3),
	 @CatalogMCU		NVARCHAR(12)	 
)
AS
BEGIN
	BEGIN --Region Data of Items		
		
		DECLARE @Count INT
		DECLARE @currentJulianDate NUMERIC;
		
		CREATE TABLE #NODELEAVES (
			nodeId FLOAT,
			templateId NCHAR(20) collate DATABASE_DEFAULT,
			parentId FLOAT,
			rankNode FLOAT,
			includeInsearch FLOAT,		 
			effectiveThruDate NUMERIC,
			effectiveModeFlag FLOAT,
		)
		
		CREATE TABLE #FINALITEMSTABLE (
			itemNumber FLOAT ,
			description1 NVARCHAR(30) collate DATABASE_DEFAULT,
			description2 NVARCHAR(30) collate DATABASE_DEFAULT,
			description3 NVARCHAR(30) collate DATABASE_DEFAULT,
			branchPlant NVARCHAR(MAX) collate DATABASE_DEFAULT,
			primaryUnitMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
			pricingUnitMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
			shippingUnitMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
			content NVARCHAR(MAX) collate DATABASE_DEFAULT,
			inventoryFlag NVARCHAR(1) collate DATABASE_DEFAULT,
			crossReference NVARCHAR(MAX) collate DATABASE_DEFAULT,
			longItemNumber NVARCHAR(25) collate DATABASE_DEFAULT,
			auxiliaryItemNumber NVARCHAR(25) collate DATABASE_DEFAULT,
			stockingType NVARCHAR(2) collate DATABASE_DEFAULT,
			installationID NVARCHAR(3) collate DATABASE_DEFAULT,
			scType NVARCHAR(1) collate DATABASE_DEFAULT,
			template NVARCHAR(20) collate DATABASE_DEFAULT
		)
		
		CREATE TABLE #ITEMSTABLE (
			itemNumber FLOAT,
			scType NVARCHAR(1) collate DATABASE_DEFAULT,
			template NVARCHAR(20) collate DATABASE_DEFAULT,
			segment1 NVARCHAR(10) collate DATABASE_DEFAULT
		)
		
		CREATE TABLE  #NODEITEM 
		(
			nodeId	   FLOAT,
			itemNumber FLOAT,
			priority FLOAT
		)
		
		CREATE TABLE #TEMPORARYITEMS  (
			itemNumber FLOAT,
			priority NVARCHAR(25) collate DATABASE_DEFAULT,
			scType NVARCHAR(1) collate DATABASE_DEFAULT,
			template NVARCHAR(20) collate DATABASE_DEFAULT,
			segment1 NVARCHAR(10) collate DATABASE_DEFAULT
		)
		
		INSERT INTO #NODELEAVES
		(
			nodeId,
			templateId,
			parentId,
			rankNode,
			includeInSearch,
			effectiveThruDate,
			effectiveModeFlag
		)
		SELECT 
			A.UniqueKeyID,
			A.TemplateID,
			A.ParentKeyID,
			RANK() OVER(ORDER BY  A.UniqueKeyID) AS RANK, 
			A.IncludeInSearch,
			A.EffectiveThruDate,
			A.EffectiveModeFlag
		FROM [DBO].INV_GetCatalogNodeListFnc(@CatalogID) AS A
		WHERE (SELECT COUNT(1) FROM [SCDATA].FQ67413 B WHERE B.CD$9CLGID = @CatalogID AND B.CD$9PKID = A.UniqueKeyID) = 0;
		
		SET @Count = @@ROWCOUNT;					
		DECLARE @index INT
		SET @index =0;
		
		--Set the values of Current Date in Julians and Current Node values			
		SELECT @currentJulianDate = [DBO].CMM_GetCurrentJulianDate(GETDATE());
				
		WHILE @index < @Count
		BEGIN	--Begin While 1
			--SELECT @currentRow;
			DECLARE @currentNode FLOAT;
			DECLARE @currentNodeIncludeInsearch FLOAT;
			DECLARE @effectiveThruDate NUMERIC;
			DECLARE @effectiveModeFlag FLOAT;
			
			SELECT TOP 1 @currentNode= nodeId, @currentNodeIncludeInsearch=includeInsearch, @effectiveThruDate =effectiveThruDate, @effectiveModeFlag=effectiveModeFlag FROM #NODELEAVES	WHERE rankNode = @index+1
			
			--Compare Effective Mode flag for verify current date 
			IF(@effectiveModeFlag =0 OR(@effectiveModeFlag=1 AND @currentJulianDate <=@effectiveThruDate))
			BEGIN --EXTRACT ITEMS DATA
				DECLARE @SQL_DYNAMIC NVARCHAR(MAX) ;
				DECLARE @WHERE_DYNAMIC	NVARCHAR(MAX);	
				DECLARE @FROM_DYNAMIC NVARCHAR(MAX);		

				-- Gets Cust Cross Document Restrictions
				DECLARE @IncludeInSearch FLOAT;
				DECLARE @Parent FLOAT;
				DECLARE @ParentTmp FLOAT;				
				DECLARE @CategoryCode NVARCHAR(10); 
				DECLARE @CategoryValue NVARCHAR(10);       				
				DECLARE @IsOverdue BIT;--Indicate if apply efective dates is on and the dates are overdue
				SET @WHERE_DYNAMIC = '';        
				SET @Parent = @currentNode;     
				SET @ParentTmp =0;		
				SET @IsOverdue =0;
				SET @FROM_DYNAMIC = '';
				
				---Verifies the availables include in search codes
				IF(@currentNodeIncludeInsearch =0 OR @currentNodeIncludeInsearch =2 OR @currentNodeIncludeInsearch = 4 OR @currentNodeIncludeInsearch =5)
				BEGIN--Begin comparation of include in search				
					WHILE(@Parent <> 0 AND @Parent IS NOT NULL AND @IsOverdue=0) 
						BEGIN--Begin While 2
								DECLARE @effectiveThruDateParent  NUMERIC;								
								DECLARE @effectiveModeFlagParent FLOAT;
																
								SET @ParentTmp = @Parent;							
								SELECT @IncludeInSearch=A.CD$9IIS,  @CategoryCode=A.CDDTAI, @CategoryValue=A.CDKY, @Parent=A.CD$9PKID, 
									   @effectiveThruDateParent=A.CDEFFT, @effectiveModeFlagParent=A.CD$9EFM
				 				FROM [SCDATA].FQ67413 A
								WHERE A.CD$9CLGID = @CatalogID 
								AND A.CDUKID = @ParentTmp;
								
								IF(@effectiveModeFlagParent=0 OR (@effectiveModeFlagParent=1 AND @currentJulianDate<=@effectiveThruDateParent ))
								BEGIN--Begin Modeflag and Dates verification							
									IF(@IncludeInSearch = 0 OR @IncludeInSearch = 2)
										BEGIN
											IF @WHERE_DYNAMIC <> ''
											BEGIN
												SET @WHERE_DYNAMIC = @WHERE_DYNAMIC + ' AND ';
											END 									
											SET @WHERE_DYNAMIC = @WHERE_DYNAMIC + 'IM' + LTRIM(RTRIM(@CategoryCode)) + ' = ''' + LTRIM(RTRIM(@CategoryValue)) + '''';
										END									
									IF (@ParentTmp = @Parent)
									BEGIN
										SET @Parent = NULL;
									END
								END
								ELSE
									BEGIN
										--Break the While Process and set the node as excluded
										SET @IsOverdue= 1;
										SET @Parent = NULL;
									END

						END --End While	2	
					IF(@IsOverdue=0)
					BEGIN --Begin Overdue verification
						--Validate fiter by Cat Code  Include = 0
						IF(@currentNodeIncludeInsearch = 0)
							BEGIN --Begin Include Insearch 1
							
								SET @FROM_DYNAMIC = ' FROM [SCDATA].F4101 A 
															INNER JOIN [SCDATA].F40205 C
															ON C.LFLNTY = A.IMLNTY
															INNER JOIN [SCDATA].FQ679910 E                                 
															ON E.BI$9INID = @InstallationID                                                                                                                                       
															INNER JOIN [SCDATA].F4102 B
															ON B.IBITM = A.IMITM
															AND B.IBMCU = E.BIMCU ';

								SET  @SQL_DYNAMIC =	
								'
								INSERT INTO #TEMPORARYITEMS (itemNumber, priority, scType, template, segment1)
								SELECT DISTINCT
									A.IMITM ItemNumber,
									ISNULL (CONTENTINS.CH$9PRI,ISNULL(CONTENTBASE.CH$9PRI,0)) AS Priority,
									CASE 
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN ''M''
										ELSE ''S''
									END AS ScType,
									A.IMTMPL AS Template, A.IMSEG1 AS Segment1 '
								 + @FROM_DYNAMIC 
								 + '                                                                                                                       
									LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  --Contents by Installation
									ON CONTENTINS.CHITM = A.IMITM  
									AND CONTENTINS.CH$9INID = @InstallationID     
									AND CONTENTINS.CH$9DS =0  
									LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  --Contents Base
												ON CONTENTBASE.CHITM = A.IMITM  
												AND CONTENTBASE.CH$9INID = ''***''
												AND CONTENTBASE.CH$9DS =0     	            
								WHERE ' + @WHERE_DYNAMIC + '  AND (A.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))
								AND (A.IMTMPL = '''' OR A.IMMIC IN (''1'', ''''))
								UNION
								SELECT   
									A.IMITM ItemNumber,
									ISNULL (CONTENTINS.CH$9PRI,ISNULL(CONTENTBASE.CH$9PRI,0)) AS Priority,
									CASE 
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN ''M''
										ELSE ''N''
									END AS ScType,
									A.IMTMPL AS Template, A.IMSEG1 AS Segment1
								FROM
									[SCDATA].F4101 A
								INNER JOIN [SCDATA].F40205 C
									ON C.LFLNTY = A.IMLNTY
								LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  --Contents by Installation
									ON CONTENTINS.CHITM = A.IMITM  
									AND CONTENTINS.CH$9INID = @InstallationID    
									AND CONTENTINS.CH$9DS =0  
									LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  --Contents Base
												ON CONTENTBASE.CHITM = A.IMITM  
												AND CONTENTBASE.CH$9INID = ''***''
												AND CONTENTBASE.CH$9DS =0     	                         
								WHERE ' + @WHERE_DYNAMIC + ' AND (A.IMSTKT =''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))
								AND (A.IMTMPL = '''' OR A.IMMIC IN (''1'', ''''))';
							END --End Include In search 1
						 ELSE --By Catalog Node Items
						 BEGIN --Begin ELSE OF IncludeInSearch					 
						 --If IncludeInSearch is ItemList = 2
						 
							SET @FROM_DYNAMIC = ' FROM [SCDATA].FQ67413I D   /*Catalog Node Items*/						
														INNER JOIN  [SCDATA].F4101 A    
														ON D.IN$9CLGID = @CatalogID
														AND D.INUKID = @currentNode 
														AND D.INITM = A.IMITM
														INNER JOIN [SCDATA].F40205 C 
														ON C.LFLNTY = A.IMLNTY
														INNER JOIN [SCDATA].FQ679910 E                                 
														ON E.BI$9INID = @InstallationID                                                                                                                                         
														INNER JOIN [SCDATA].F4102 B
														ON B.IBITM = A.IMITM
														AND B.IBMCU = E.BIMCU ';
										 					 
							 SET  @SQL_DYNAMIC =						
								'
								INSERT INTO #TEMPORARYITEMS (itemNumber, priority, scType, template, segment1)
								SELECT DISTINCT
									A.IMITM ItemNumber,
									D.INSEQ AS Priority,
									CASE 
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN ''M''
										ELSE ''S''
									END AS ScType,
									A.IMTMPL AS Template, A.IMSEG1 AS Segment1 '
								+ @FROM_DYNAMIC  
								+ ' 
								WHERE (A.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))
								UNION
								SELECT   
									A.IMITM ItemNumber,
									D.INSEQ AS Priority,
									CASE 
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN ''M''
										ELSE ''N''
									END AS ScType,
									A.IMTMPL AS Template, A.IMSEG1 AS Segment1
								FROM
								[SCDATA].F4101 A
								INNER JOIN [SCDATA].FQ67413I D       --Catalog Node Items
								ON  D.INITM = A.IMITM
								AND D.IN$9CLGID= @CatalogId 
								AND D.INUKID = @currentNode
								INNER JOIN [SCDATA].F40205 C
								ON C.LFLNTY = A.IMLNTY
								WHERE (A.IMSTKT =''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))';
							END;--END ELSE OF  IncludeInSearch 4,5
						--CLEAR TEMP LOOP DATA 
						TRUNCATE TABLE  #TEMPORARYITEMS;	
						--Execute the query fill the items associated				

						EXECUTE sp_executesql @SQL_DYNAMIC,	N'@InstallationID NVARCHAR(3),	@CatalogID NVARCHAR(3), @currentNode FLOAT, @CatalogMCU	NVARCHAR(12)',
						@InstallationID = @InstallationID,@CatalogID = @CatalogID, @currentNode = @currentNode, @CatalogMCU = @CatalogMCU	
						--Insert the relation of Items of Node with the items owned by the Node (@TEMPORARYITEMS)					       					 									
						INSERT INTO #NODEITEM(nodeId, itemNumber, priority)									
						SELECT @currentNode,itemNumber,priority 
						FROM #TEMPORARYITEMS					
						--Insert temporal items in list of all items 
						INSERT INTO #ITEMSTABLE (itemNumber, scType,template, segment1)
						SELECT A.itemNumber, A.ScType, A.template, A.segment1
						FROM #TEMPORARYITEMS A
						WHERE
							NOT EXISTS (select B.itemNumber from #ITEMSTABLE B WHERE B.itemNumber = A.itemNumber)             					 									
											  
		            END --END Overdue verification  
				End--END comparation of include in search
			END --End EXTRACT ITEMS DATA	
			SET @index=@index+1;	
		END--End While 1

		/* Gets all item information and insert that into #FINALITEMSTABLE */
		INSERT INTO #FINALITEMSTABLE (itemNumber, description1, description2, description3, branchPlant, crossReference, 
				primaryUnitMeasure, pricingUnitMeasure, shippingUnitMeasure, content, installationID, longItemNumber, auxiliaryItemNumber, inventoryFlag,
				stockingType, scType, template)
		SELECT 
			I.itemNumber	AS itemNumber,
			ISNULL (CONTENTINS.CHDSC1, ISNULL( CONTENTBASE.CHDSC1, A.IMDSC1))					AS Description1, /* Description 1 */                           
			ISNULL (CONTENTINS.CHDSC2, ISNULL( CONTENTBASE.CHDSC2, A.IMDSC2))					AS Description2, /* DescRiption 2 */
			ISNULL (CONTENTINS.CHDSC3, ISNULL( CONTENTBASE.CHDSC3, ' '))						AS Description3 , /* Description 3 */
			ISNULL ((SELECT [DBO].INV_GetItemBranchPlantStrFnc(@InstallationID, A.IMITM)), ' ')	AS BranchPlant,
			ISNULL ((SELECT [DBO].INV_GetItemCrossRefStrFnc(A.IMITM, ' ')), ' ')					AS CrossReference,
			A.IMUOM1		AS PrimaryUnitMeasure,
			A.IMUOM4		AS PricingUnitMeasure,
			A.IMUOM6		AS ShippingUnitMeasure, 							
			A.IMSRTX		AS Content,
			ISNULL (CONTENTINS.CH$9INID, '***') AS installationID,
			A.IMLITM		AS LongItemNumber,
			A.IMAITM		AS AuxiliaryItemNumber,
			C.LFIVI			AS InventoryFlag,
			A.IMSTKT		AS StockingType,
			I.ScType		AS ScType,
			A.IMTMPL		AS Template
		FROM #ITEMSTABLE I
		INNER JOIN [SCDATA].F4101 A
			ON A.IMITM = I.itemNumber
		INNER JOIN [SCDATA].F40205 C
			ON C.LFLNTY = A.IMLNTY
		LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  /* Contents by Installation */
			ON CONTENTINS.CHITM = I.itemNumber
			AND CONTENTINS.CH$9INID = @InstallationID     
			AND CONTENTINS.CH$9DS = 0  
		LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  /* Contents Base */
			ON CONTENTBASE.CHITM = I.itemNumber 
			AND CONTENTBASE.CH$9INID = '***'
			AND CONTENTBASE.CH$9DS = 0
		
		/* Gets all items information */
		SELECT I.itemNumber,
			I.description1,
			I.description2,
			I.description3,
			I.branchPlant,
			I.crossReference,
			I.primaryUnitMeasure,
			I.pricingUnitMeasure,
			I.shippingUnitMeasure,
			I.longItemNumber,
			I.auxiliaryItemNumber,
			I.content,
			@InstallationID AS InstallationID, /*Return input installation*/
			I.StockingType,
			I.InventoryFlag,
			I.ScType,
			I.Template
		FROM #FINALITEMSTABLE I

		SELECT nodeId,
			itemNumber,
			priority
		FROM #NODEITEM
		
	END --End region of Data of Items
			
	BEGIN --Region LANGS
		--SELECT THE ITEMS BY INSTALLATION OF THE ITEM
		SELECT  ITMLANG.CLITM ItemId,ITMLANG.CLLNGP LangId,ISNULL(ITMLANG.CLDSC1,'') Description1,ISNULL(ITMLANG.CLDSC2,'') Description2,ISNULL(ITMLANG.CLDSC3  ,'')Description3,
				 crossReference,longItemNumber,auxiliaryItemNumber
		FROM 	 [SCDATA].FQ67410L ITMLANG, #FINALITEMSTABLE IT
		WHERE ITMLANG.CLITM = itemNumber 
		   AND (ITMLANG.CL$9INID = IT.installationID) --INSTALLATION 
		   AND(ITMLANG.CL$9DS =0)
		   
	END --End region LANGS
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcGetCatXMLCrossRefList'))
BEGIN
	DROP  Procedure  [DBO].INV_ExcGetCatXMLCrossRefList
END

GO 
-- #desc							Get the list of cross reference by installation
-- #bl_class						Premier.Inventory.GetCatXMLCrossReferencesCommand.cs	
-- #db_dependencies					N/A
-- #db_references					N/A			

-- #param InstallationID		    Installation ID
-- #param AddressNumber				Optional  -- Address Number
-- #param ShortItemNumber		    Optional  -- Item Number 

CREATE PROCEDURE [DBO].INV_ExcGetCatXMLCrossRefList
(
	@InstallationID NVARCHAR(3),
	@AddressNumber FLOAT,
	@ShortItemNumber FLOAT
)
AS
BEGIN	
	--Gets the custom cross reference type of installation
	DECLARE @CustCrossRefType	NVARCHAR(256)
	DECLARE @CustCrossConstantINID NVARCHAR(3)
	
	SET @CustCrossConstantINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossConstantINID, @CustCrossRefType out    
    
	SELECT DISTINCT
		   A.WA$9AN8  AS AddressNumber,
		   B.IVITM AS ShortItemNumber,
		   B.IVXRT AS CrossRefType,
		   B.IVCITM AS RefProductNumber,
		   B.IVEFTJ AS EfectiveDate, 		   
		   B.IVEXDJ AS ExpirationDate
		   
	FROM [SCDATA].FQ67101 A,
		 [SCDATA].F4104 B
	WHERE B.IVAN8 = A.WA$9AN8
		AND A.WA$9INID = @InstallationID
		AND B.IVXRT = @CustCrossRefType
		AND [DBO].CMM_GetCurrentJulianDate(GETDATE())<= B.IVEXDJ
		AND (@AddressNumber IS NULL OR A.WA$9AN8 = @AddressNumber)
		AND ( @ShortItemNumber IS NULL OR B.IVITM = @ShortItemNumber) 
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcGetCatXMLCustomersItems'))
BEGIN
	DROP  Procedure  [DBO].INV_ExcGetCatXMLCustomersItems
END

GO


-- #desc							Get the list of items by installation
-- #bl_class						Premier.Inventory.GetCatXMLCutomersItemsCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			Installation ID
-- #param AddressNumber				(AN8) Address Number

CREATE Procedure [DBO].INV_ExcGetCatXMLCustomersItems
(
	@InstallationID	NVARCHAR(3),
	@AddressNumber	FLOAT
)
AS 
	DECLARE @DefCustomerConstant	NVARCHAR(256)
	DECLARE @DefCustomer			FLOAT = 0
	DECLARE @ConstantINID			NVARCHAR(3)
BEGIN
	-- Get the Default Customer value constant
	SET @ConstantINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'DEFCUSTOM', @ConstantINID, @DefCustomerConstant OUT
	SET @DefCustomer = CAST(@DefCustomerConstant AS FLOAT)

	SELECT DISTINCT 
		CAST(SXXRVF AS FLOAT) AddressNumber,
		CAST(SXXRVT AS FLOAT) ItemNumber
	FROM [SCDATA].FQ67101
    INNER JOIN [SCDATA].F4013
        ON WA$9AN8=SXXRVF  AND
        SXEDF1 = 'S' AND SXXRTC = 'IR'  
    WHERE	
		((@AddressNumber IS NULL OR SXXRVF = @AddressNumber) AND WA$9INID = @InstallationID)
		OR (@AddressNumber IS NULL AND SXXRVF = @DefCustomer)
				 
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcGetCatXMLNodeList'))
BEGIN
	DROP  PROCEDURE  [DBO].INV_ExcGetCatXMLNodeList
END
GO

-- #desc						Returns the nodes  and languages of a catalog
-- #bl_class					Premier.Inventory.GetCatalogXMLNodesCommand.cs
-- #db_dependencies				INV_GetCatalogNodeListFnc, INV_GetCatalogDetailLang
-- #db_references				N/A

-- #param @CatalogID			Catalog Id

CREATE PROCEDURE [DBO].INV_ExcGetCatXMLNodeList
(
	 @CatalogID		NVARCHAR(3)
)
AS
BEGIN
	SELECT     
		UniqueKeyID,
		ParentKeyID,
		IncludeInSearch,
		Description,
		EffectiveModeFlag,
		EffectiveFromDate,
		EffectiveThruDate,
		SequenceNumber,
		ImageName,
		TemplateID    
	FROM [DBO].INV_GetCatalogNodeListFnc(@CatalogID)
	ORDER BY ParentKeyID, SequenceNumber 		 									
	
	Exec [DBO].INV_GetCatalogDetailLang @CatalogID,NULL,'*';
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcGetConfigProdSegments'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcGetConfigProdSegments
	END

GO 

-- #desc							Return configured product segment options
-- #bl_class						Premier.Inventory.ConfiguredProductComponentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A					

-- #param ProductNumber				Long Product Number
-- #param StoreId					Store Id

CREATE PROCEDURE [DBO].INV_ExcGetConfigProdSegments
(
	@ProductNumber NVARCHAR(25),
	@StoreId	   NVARCHAR(3)
)
AS
BEGIN

	DECLARE @MCU NVARCHAR(12)
	DECLARE @ShortProductNumber FLOAT
	DECLARE @CurrentJulianDate INTEGER;

	SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE());
	SET @ShortProductNumber = (SELECT IMITM AS ShortProductNumber FROM [SCDATA].F4101 WHERE IMLITM = @ProductNumber)	

	SET @MCU = (SELECT A.BPMCU
		FROM
			[SCDATA].FQ670005 A			/*Branch Plant Override by Item and Installation ID*/
		INNER JOIN [SCDATA].FQ679910 B	/*BranchPlant by Installation*/
			ON B.BI$9INID = A.BP$9INID
			AND B.BIMCU = A.BPMCU
		WHERE
			A.BP$9INID = @StoreId AND
			A.BPITM = @ShortProductNumber)	

	IF (@MCU IS NULL) BEGIN
		SET @MCU = (SELECT TOP 1 KWMCU
				FROM [SCDATA].F3291 
				WHERE KWKIT = @ShortProductNumber)	
	END
	
	;WITH 
		CTE (KYKIT, KYITM) AS
			(SELECT KYKIT,
					KYITM
				FROM [SCDATA].F3293
				WHERE KYKIT = @ShortProductNumber AND 
						KYKIT <> KYITM AND
						KYITM <> 0 AND 
						((@CurrentJulianDate BETWEEN KYEFFF AND KYEFFT) OR (KYEFFF = 0 AND KYEFFT = 0 AND KYAO IN ('I','A','O'))) /*Validate if rules are not expired*/
				UNION ALL
				SELECT
					B.KYKIT,
					B.KYITM
				FROM CTE A, [SCDATA].F3293 B
				WHERE A.KYITM = B.KYKIT AND 
						B.KYKIT <> B.KYITM AND 
						B.KYITM <> 0 AND 
						((@CurrentJulianDate BETWEEN B.KYEFFF AND B.KYEFFT) OR (B.KYEFFF = 0 AND B.KYEFFT = 0 AND B.KYAO IN ('I','A','O')))), /*Validate if rules are not expired*/
		CTE2 AS 
			(SELECT DISTINCT(KYITM) /*Retrieve assembly product numbers*/
			 FROM CTE
			 UNION ALL
			 SELECT @ShortProductNumber)

	SELECT 
		KWKIT AS ShortProductNumber,
		KWPEL AS SegmentNumber, 
		MIN(KWDSC1) AS SegmentDescription, 
		KWSY AS ProductCode, 
		KWRT AS UserDefinedCode, 
		DRKY AS UserDefinedKey, 
		DRDL01 AS SegmentValueDescription,
		MIN(KWDTAS) AS SegmentSequence
	FROM CTE2 
		INNER JOIN [SCDATA].F3291 
			ON KWKIT = KYITM
		LEFT OUTER JOIN [SCCTL].F0005
			ON DRRT = KWRT AND 
				DRSY = KWSY
	WHERE 
		(KWMCU = @MCU OR KWMCU = '')
		AND KWATRQ <> 'C'
	GROUP BY KWKIT, KWPEL, KWSY, KWRT, DRKY, DRDL01
	ORDER BY KWPEL
END

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcGetItemXMLInfo'))
BEGIN
	DROP  Procedure  [DBO].INV_ExcGetItemXMLInfo
END

GO

-- #desc				
-- #bl_class						Premier.Inventory.CatalogNSMItemUpdateCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

CREATE PROCEDURE [DBO].INV_ExcGetItemXMLInfo
(
	@InstallationID		NVARCHAR(3),
	@ShortItemNumber	FLOAT
)

AS
	DECLARE @RECORDFOUND INT;
	DECLARE @ItemWebContentINID	NVARCHAR(3);

	SET @ItemWebContentINID = @InstallationID;
	BEGIN /* BEGIN REGION ITEM DATA */
	
		/* CHECK IF ITEM HAS CONTENT */
		SELECT @RECORDFOUND = COUNT(*)
		FROM [SCDATA].FQ67410 
		WHERE CHITM = @ShortItemNumber
		   AND CH$9INID = @InstallationID
		   AND CH$9DS = 0
	   
		IF (@RECORDFOUND = 0)
		BEGIN
			SET @ItemWebContentINID = '***';
		END
	
		SELECT
			A.IMITM ItemNumber,
			ISNULL(CONTENT.CHDSC1, A.IMDSC1) AS description1, /* Description 1 */
			ISNULL(CONTENT.CHDSC2, A.IMDSC2) AS description2, /* Desciption 2 */
			ISNULL(CONTENT.CHDSC3, ' ') AS description3, /* Description 3 */
			ISNULL((SELECT [DBO].INV_GetItemBranchPlantStrFnc( @InstallationID ,A.IMITM)), ' ') branchPlant,
			ISNULL((SELECT [DBO].INV_GetItemCrossRefStrFnc(A.IMITM,' ')), ' ') crossReference,
			A.IMUOM1 primaryUnitMeasure,
			A.IMUOM4 pricingUnitMeasure,
			A.IMUOM6 shippingUnitMeasure,		
			A.IMLITM longItemNumber,
			A.IMAITM auxiliaryItemNumber, 							
            A.IMSRTX  AS Content,
			A.IMSTKT  StockingType,
			B.LFIVI   InventoryFlag,
			CASE 
				WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
				WHEN A.IMMIC = '1' AND A.IMTMPL <> '' THEN N'M'
				WHEN (A.IMSTKT <> N'N' AND (B.LFIVI = N'Y' OR B.LFIVI = N'D')) then N'S'
				ELSE 'N'
			END AS ScType,
			A.IMTMPL AS Template
		FROM
			[SCDATA].F4101 A
			LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENT  
				ON  CONTENT.CHITM = A.IMITM  
				AND CONTENT.CH$9INID = @ItemWebContentINID
				AND CONTENT.CH$9DS = 0     
			INNER JOIN [SCDATA].F40205 B   /*Line Type Control Table*/
				ON B.LFLNTY = A.IMLNTY	                          
		WHERE A.IMITM = @ShortItemNumber
	
	END /* REGION ITEM DATA */
	BEGIN /* Region LANGS */

		/* SELECT THE ITEMS BY INSTALLATION */
		SELECT  ITMLANG.CLITM ItemId,ITMLANG.CLLNGP LangId,ISNULL(ITMLANG.CLDSC1,'') Description1,ISNULL(ITMLANG.CLDSC2,'') Description2,ISNULL(ITMLANG.CLDSC3  ,'')Description3
		FROM 	 [SCDATA].FQ67410L ITMLANG
		WHERE ITMLANG.CLITM = @ShortItemNumber 
		   AND ITMLANG.CL$9INID = @ItemWebContentINID /* INSTALLATION */
		   AND ITMLANG.CL$9DS = 0
	   	
	END /* End region LANGS */
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE TYPE = 'P' AND ID = OBJECT_ID(N'[DBO].INV_ExcGetItemXMLList'))
BEGIN
	DROP  PROCEDURE  [DBO].INV_ExcGetItemXMLList
END

GO

SET QUOTED_IDENTIFIER ON
GO

-- #desc				
-- #bl_class						Premier.Inventory.CatalogNSMMassiveItemsUpdateCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

--	#param @InstallationID			Installation ID
--	#param @ShortItemNumbersXML		XML of Short Item Numbers to be published, XML Template : <items><item>60020</item></items>

CREATE PROCEDURE [DBO].INV_ExcGetItemXMLList
(
	@InstallationID			NVARCHAR(3),
	@ShortItemNumbersXML	XML
)

AS

	BEGIN /* BEGIN REGION ITEM DATA */
	
		/* CHECK IF ITEM HAS CONTENT */
		;WITH CTE AS 
		(
			SELECT items.item.value('.','FLOAT') AS ShortItemNumber
			FROM @ShortItemNumbersXML.nodes('/items/item') AS items(item)
		)
		SELECT 
			A.ShortItemNumber,
			ISNULL(B.CH$9INID, '***') AS InstallationID
			INTO #ItemsIntallation
		FROM 
			CTE A
		LEFT OUTER JOIN [SCDATA].FQ67410 B
			ON B.CHITM = A.ShortItemNumber
				AND B.CH$9INID = @InstallationID
				AND B.CH$9DS = 0;
		
		SELECT
			A.IMITM ItemNumber,
			ISNULL(CONTENT.CHDSC1, A.IMDSC1) AS description1, /* Description 1 */
			ISNULL(CONTENT.CHDSC2, A.IMDSC2) AS description2, /* Desciption 2 */
			ISNULL(CONTENT.CHDSC3, ' ') AS description3, /* Description 3 */
			ISNULL((SELECT [DBO].INV_GetItemBranchPlantStrFnc( @InstallationID ,A.IMITM)), ' ') branchPlant,
			ISNULL((SELECT [DBO].INV_GetItemCrossRefStrFnc(A.IMITM,' ')), ' ') crossReference,
			A.IMUOM1 primaryUnitMeasure,
			A.IMUOM4 pricingUnitMeasure,
			A.IMUOM6 shippingUnitMeasure,		
			A.IMLITM longItemNumber,
			A.IMAITM auxiliaryItemNumber, 							
			A.IMSRTX  AS Content,
			A.IMSTKT  StockingType,
			B.LFIVI   InventoryFlag,
			CASE 
				WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
				WHEN A.IMMIC = '1' AND A.IMTMPL <> '' THEN N'M'
				WHEN (A.IMSTKT <> N'N' AND (B.LFIVI = N'Y' OR B.LFIVI = N'D')) then N'S'
				ELSE N'N'
			END AS ScType,
			A.IMTMPL AS Template
		FROM
			[SCDATA].F4101 A
			INNER JOIN #ItemsIntallation C
				ON C.ShortItemNumber = A.IMITM
			INNER JOIN [SCDATA].F40205 B   /*Line Type Control Table*/
				ON B.LFLNTY = A.IMLNTY
			LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENT  
				ON  CONTENT.CHITM = C.ShortItemNumber
				AND CONTENT.CH$9INID = C.InstallationID
				AND CONTENT.CH$9DS = 0;
	
	END /* REGION ITEM DATA */
	BEGIN /* Region LANGS */

		/* SELECT THE ITEMS BY INSTALLATION */
		SELECT  ITMLANG.CLITM ItemId,ITMLANG.CLLNGP LangId,ISNULL(ITMLANG.CLDSC1,'') Description1,ISNULL(ITMLANG.CLDSC2,'') Description2,ISNULL(ITMLANG.CLDSC3  ,'')Description3,
				 ISNULL((SELECT [DBO].INV_GetItemCrossRefStrFnc(ITMLANG.CLITM,' ')), ' ') CrossReference,
				 D.IMLITM AS LongItemNumber,
				 D.IMAITM AS AuxiliaryItemNumber 
	   FROM   [SCDATA].FQ67410L ITMLANG    
		  INNER JOIN #ItemsIntallation C    
			 ON C.ShortItemNumber = ITMLANG.CLITM     
		    AND C.InstallationID = ITMLANG.CL$9INID /* INSTALLATION */   
	      INNER JOIN [SCDATA].F4101 D
			ON D.IMITM = ITMLANG.CLITM
		WHERE ITMLANG.CL$9DS = 0
	   	
	END /* End region LANGS */
	
GO
SET QUOTED_IDENTIFIER OFF 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcItemBackOrderStatus'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcItemBackOrderStatus
	END

GO

-- #desc							Check the Item back order status
-- #bl_class						Premier.Inventory.ItemBackOrderStatus.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @AddressNumber			Address Number
-- #param @ShortItemNumber			Short Item Number
-- #param @BranchPlant				Branch Plant

CREATE Procedure [DBO].INV_ExcItemBackOrderStatus
(
	@Company			NVARCHAR(5),
	@AddressNumber		FLOAT,
	@ShortItemNumber	FLOAT,
	@BranchPlant		NVARCHAR(12)
)
AS
	DECLARE @AllowBackOrder NVARCHAR(1)
	
	SET @AllowBackOrder = (SELECT IMBACK FROM [SCDATA].F4101 WHERE IMITM = @ShortItemNumber)
	IF (@AllowBackOrder = 'Y')
	BEGIN
		SET @AllowBackOrder = (SELECT IBBACK FROM [SCDATA].F4102 WHERE IBITM = @ShortItemNumber AND IBMCU = @BranchPlant)
		IF (@AllowBackOrder = 'Y')
		BEGIN
			SET @AllowBackOrder = (SELECT AIBACK FROM [DBO].CST_GetCustomerInfoFnc(@Company, @AddressNumber))
			IF (@AllowBackOrder = 'Y')
			BEGIN
				SET @AllowBackOrder = (SELECT CIBACK FROM [SCDATA].F41001 WHERE CIMCU = @BranchPlant)
				IF (@AllowBackOrder = 'Y')
				BEGIN
					SELECT 'Y' AS AllowBackOrder
					RETURN
				END
			END
		END
	END
	SELECT 'N' AS AllowBackOrder
GO


  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcItemCatCodeValidation'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcItemCatCodeValidation
	END
GO
-- #desc					Return if the Item is or not  Category Code Validation Restricted
-- #bl_class				Premier.Inventory.ItemCategoryCodeValidationCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param @InstallationID	Installation ID
-- #param @ShortItemNumber  Item Number
-- #param @BranchPlant		BranchPlant
-- #param @IsValid			The Item IsValid or Not 


CREATE  PROCEDURE [DBO].INV_ExcItemCatCodeValidation

	@InstallationID		NVARCHAR(3), 		
	@BranchPlant		NVARCHAR(12),
	@ShortItemNumber	FLOAT,
	@IsValid			int OUTPUT
AS	
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)	
	DECLARE @CC_RESTRIC_INID NVARCHAR(3)
	DECLARE @strConstantValue NVARCHAR(256)
	DECLARE @strCategoryValue NVARCHAR(15)
	DECLARE @StockingType NVARCHAR(2)
	DECLARE @InventoryFlag NVARCHAR(1)

	CREATE TABLE #CATEGORYCODE
	(
		CATEGORY NVARCHAR(15) collate DATABASE_DEFAULT
	);

	/*************************************************************************************/
	/*Reads Category Code Restriction Constant*/
	SET @CC_RESTRIC_INID = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue 'CC_RESTRIC', @CC_RESTRIC_INID OUT, @strConstantValue OUT
	/*************************************************************************************/

	IF @strConstantValue = '' OR @strConstantValue IS NULL BEGIN
		SELECT @IsValid = 1 --true
	END
	ELSE 
		BEGIN
			SELECT @StockingType = IMSTKT FROM [SCDATA].F4101 WHERE IMITM = @ShortItemNumber;		
			IF(@StockingType <> 'N') BEGIN
				SET @InventoryFlag = (SELECT TOP 1 LFIVI FROM [SCDATA].F4101 A 
										INNER JOIN [SCDATA].F40205 B 
										ON A.IMLNTY = B.LFLNTY 
										WHERE A.IMITM = @ShortItemNumber);
			END
			
			IF (@StockingType = 'N' OR (@InventoryFlag <> 'Y' AND @InventoryFlag <> 'D'))
				BEGIN
					SET @SQL_DYNAMIC = ' INSERT INTO #CATEGORYCODE SELECT IM' + @strConstantValue +
							   ' FROM [SCDATA].F4101  
							     WHERE IMITM = @ShortItemNumber'
				END
			ELSE 
				BEGIN
					SET @SQL_DYNAMIC = ' INSERT INTO #CATEGORYCODE SELECT IB' + @strConstantValue +
							   ' FROM [SCDATA].F4102 
								 WHERE IBITM = @ShortItemNumber
								 AND IBMCU = @BranchPlant'  		
				END		
				
		EXECUTE sp_executesql @SQL_DYNAMIC,	N'@ShortItemNumber FLOAT,	@BranchPlant NVARCHAR(12)',
		@ShortItemNumber = @ShortItemNumber, @BranchPlant = @BranchPlant

			
		SELECT @strCategoryValue = CATEGORY FROM #CATEGORYCODE;

		SET @IsValid = (SELECT CASE 
							WHEN EXISTS (SELECT DR$9INID FROM [SCDATA].FQ67008 
								WHERE
										DR$9INID = @CC_RESTRIC_INID 
								AND DR$9CNST = 'CC_RESTRIC'
								AND DRKY = @strCategoryValue) THEN 1
						ELSE 0 END)
		 
	END

	DROP TABLE #CATEGORYCODE


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcItemStockTypeValidation'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcItemStockTypeValidation
	END

GO

-- #desc						Return if the Item is or not StockingType restricted
-- #bl_class					Premier.Inventory.ItemStockingTypeValidationCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param @InstallationID		Installation ID
-- #param @ShortItemNumber		Item Number
-- #param @BranchPlant			BranchPlant
-- #param @IsValid				The Item IsValid or Not 
-- #param @IsObsolete			The Item IsObsolete or Not
-- #param @IsInBranchPlant		The Item IsInBranchPlant or Not

-- Note /*	1= True    0 = False	*/

CREATE PROCEDURE [DBO].INV_ExcItemStockTypeValidation
	@InstallationID 	NVARCHAR(3),
	@BranchPlant		NVARCHAR(24),
	@ShortItemNumber	FLOAT,
	@IsValid			int OUTPUT,
	@IsObsolete			int OUTPUT,
	@IsInBranchPlant	int OUTPUT,
	@StockingType		NVARCHAR(2) OUTPUT
AS
	
	/* Gets the ST_RESTRIC Document Restrictions Parameters */
	DECLARE @RestrictConst		NVARCHAR(256)
	DECLARE @ST_RESTRIC_INID	NVARCHAR(3)
	DECLARE @InventoryFlag		NVARCHAR(1)
	SET @ST_RESTRIC_INID =		@InstallationID

BEGIN
    SELECT @StockingType = IMSTKT FROM [SCDATA].F4101 WHERE IMITM = @ShortItemNumber;
	SET @InventoryFlag = (SELECT TOP 1 LFIVI FROM [SCDATA].F4101 A 
						  INNER JOIN [SCDATA].F40205 B 
							ON A.IMLNTY = B.LFLNTY 
							WHERE A.IMITM = @ShortItemNumber);
			
	IF(@StockingType <> 'N' AND (@InventoryFlag ='Y' OR @InventoryFlag ='D')) BEGIN
		SET @StockingType = (SELECT TOP 1 IBSTKT FROM [SCDATA].F4102 WHERE IBITM = @ShortItemNumber AND IBMCU = @BranchPlant);
	END

	IF (@StockingType IS NULL) BEGIN
		SET @IsInBranchPlant = 0	/* FALSE */
		SET @IsValid = 0			/* FALSE */
		SET @IsObsolete = 1			/* Is Obsolete */
	END
	ELSE BEGIN
		IF (@StockingType <> 'O') BEGIN
			SET @IsInBranchPlant = 1	/* TRUE */
			SET @IsObsolete = 0			/* Is no Obsolete */
			EXEC [DBO].CMM_GetConstantValue 'ST_RESTRIC', @ST_RESTRIC_INID OUT, @RestrictConst OUT

			IF (@RestrictConst = 1) BEGIN
				SET @IsValid = (SELECT 
								CASE WHEN EXISTS (SELECT DR$9INID FROM [SCDATA].FQ67008 WHERE DR$9INID = @ST_RESTRIC_INID
																						   AND DR$9CNST = 'ST_RESTRIC'
																						  AND DRKY = @StockingType) THEN 1
								ELSE 0 END)
			END
			ELSE 
				SET @IsValid = 1
		END					
		ELSE BEGIN 
			SET @IsInBranchPlant = 1	/* TRUE */
			SET @IsValid = 0			/* FALSE */
			SET @IsObsolete = 1			/* TRUE */
		END
	END		
END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcMoveItemBranchOverr'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcMoveItemBranchOverr
	END

GO

-- #desc						Move items from a Branch Plant to another
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId		Installation ID
-- #param @BranchPlantTo  	    Branch Plant.
-- #param @ShortProductNumbersXML	XML Short Product Numbers List.
-- #param @UserID				User ID
-- #param @ProgramID			Program ID
-- #param @WorkStationID		WorkStation ID
-- #param @DateUpdated			Date Updated 
-- #param @TimeLastUpdated		Time Last Updated

CREATE PROCEDURE [DBO].INV_ExcMoveItemBranchOverr

	@StoreId		    NVARCHAR(3),
	@BranchPlantTo			NVARCHAR(12),
	@ShortProductNumbersXML	XML,
	@UserID					NVARCHAR(10),
	@ProgramId				NVARCHAR(10),
	@WorkStationID			NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC
AS
BEGIN
	SET NOCOUNT ON

	IF @ShortProductNumbersXML IS NOT NULL 
		BEGIN		
			UPDATE item
				SET 
					BPMCU = @BranchPlantTo, 
					BPUSER = @UserID, 
					BPPID = @ProgramId, 
					BPJOBN = @WorkStationID, 
					BPUPMJ = @DateUpdated, 
					BPUPMT = @TimeLastUpdated 
				FROM [SCDATA].FQ670005 item
					INNER JOIN @ShortProductNumbersXML.nodes('/items/item') AS items(item)
								ON item.BPITM = items.item.value('.','FLOAT')
				WHERE 
					item.BP$9INID = @StoreId; 	
	END
END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcUpdCatalogSequence'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcUpdCatalogSequence
	END
GO

-- #desc							Update Catalog Sequence
-- #bl_class						Premier.Inventory.CatalogList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @CatalogIDs 				Catalog IDs

CREATE Procedure [DBO].INV_ExcUpdCatalogSequence
(
	@CatalogIDs 	 NVARCHAR(MAX)
)
AS

BEGIN
	DECLARE @Pos INT
	DECLARE @SequenceNumb FLOAT = 0
	DECLARE @NextString NVARCHAR(6)

	IF (@CatalogIDs <> '')
	BEGIN
		SET @Pos = CHARINDEX('|@', @CatalogIDs)
		WHILE (@Pos <> 0)
		BEGIN
			SET @NextString = substring(@CatalogIDs, 1, @Pos - 1)
			SET @CatalogIDs = substring(@CatalogIDs,@Pos + 2,LEN(@CatalogIDs))
			SET @Pos = CHARINDEX('|@', @CatalogIDs)
			SET @SequenceNumb = @SequenceNumb + 1

			UPDATE
				[SCDATA].FQ67412
			SET
				CASEQ   = @SequenceNumb
			WHERE
				CA$9CLGID = @NextString
		END
	END
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_ExcUpdItemWebContentStatus'))
	BEGIN
		DROP  Procedure  [DBO].INV_ExcUpdItemWebContentStatus
	END

GO

-- #desc					Update Content Status.
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID		
-- #param @ItemNumber		Item Number.

/*Item Status: Published: 0 / Draft: 1 */

CREATE Procedure [DBO].INV_ExcUpdItemWebContentStatus 
(
		@InstallationID NVARCHAR(3),
		@ItemNumber FLOAT
)
AS	

	/*Delete all new status record when changing status
	Avoid any primary key violation
	Delete main header table	*/
	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = @ItemNumber AND
    CH$9INID = @InstallationID AND
	CH$9DS = 0
	/*Delete main header table language*/
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = @ItemNumber AND
    CL$9INID = @InstallationID AND
	CL$9DS = 0
	/*Delete detail table*/
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = @ItemNumber AND
    CD$9INID = @InstallationID AND
	CD$9DS = 0
	/*Delete detail table language*/
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = @ItemNumber AND
    CL$9INID = @InstallationID AND
	CL$9DS = 0
	
	/*Copy main header table*/
	INSERT INTO [SCDATA].FQ67410 (CHITM,CH$9INID,CH$9DS,CHDSC1,CHDSC2,CHDSC3,CHPGTX,CHDL01,CHDL02,CHDL03,CHDL04,CHDL05,CHDL06,CHDL07,CHDL08,CHDL09,CHDL10,CHCOMMENTS,CH$9PRI,CH$9HTML,CHPTURL,CHURCD,CHURDT,CHURAT,CHURAB,CHURRF,CHUSER,CHPID,CHJOBN,CHUPMJ,CHTDAY) --DATE
	SELECT 
		   CHITM
           ,CH$9INID
           ,0
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CHPGTX
           ,CHDL01
           ,CHDL02
           ,CHDL03
           ,CHDL04
           ,CHDL05
           ,CHDL06
           ,CHDL07
           ,CHDL08
           ,CHDL09
           ,CHDL10
           ,CHCOMMENTS
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,[DBO].CMM_GetCurrentJulianDate (GETDATE())
           ,CHTDAY
	FROM [SCDATA].FQ67410
	WHERE  
		CHITM = @ItemNumber AND
        CH$9INID = @InstallationID
		
	/*Copy header Lang Table	*/
	INSERT INTO [SCDATA].FQ67410L (CLITM,CL$9INID,CL$9DS,CLLNGP,CLDSC1,CLDSC2,CLDSC3,CLPGTX,CLDL01,CLDL02,CLDL03,CLDL04,CLDL05,CLDL06,CLDL07,CLDL08,CLDL09,CLDL10,CLCOMMENTS,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
	SELECT 
	   CLITM
      ,CL$9INID
      ,0
      ,CLLNGP
      ,CLDSC1
      ,CLDSC2
      ,CLDSC3
      ,CLPGTX
      ,CLDL01
      ,CLDL02
      ,CLDL03
      ,CLDL04
      ,CLDL05
      ,CLDL06
      ,CLDL07
      ,CLDL08
      ,CLDL09
      ,CLDL10
      ,CLCOMMENTS
      ,CL$9HTML
      ,CLURCD
      ,CLURDT
      ,CLURAT
      ,CLURAB
      ,CLURRF
      ,CLUSER
      ,CLPID
      ,CLJOBN
      ,[DBO].CMM_GetCurrentJulianDate (GETDATE())
      ,CLTDAY
	FROM [SCDATA].FQ67410L
	WHERE  
		CLITM = @ItemNumber AND
        CL$9INID = @InstallationID
		
	/*Copy Detail Table*/
	INSERT INTO [SCDATA].FQ67411 (CDITM,CDUKID,CD$9INID,CD$9DS,CDSEQ,CD$9PTL,CD$9HTML,CDASAI,CDEFFF,CDEFFT,CDURCD,CDURDT,CDURAT,CDURAB,CDURRF,CDUSER,CDPID,CDJOBN,CDUPMJ,CDTDAY)
	SELECT 
		CDITM
		,CDUKID
		,CD$9INID
		,0
		,CDSEQ
		,CD$9PTL
		,CD$9HTML
		,CDASAI
		,CDEFFF
		,CDEFFT
		,CDURCD
		,CDURDT
		,CDURAT
		,CDURAB
		,CDURRF
		,CDUSER
		,CDPID
		,CDJOBN
		,[DBO].CMM_GetCurrentJulianDate (GETDATE())
		,CDTDAY
	FROM [SCDATA].FQ67411
	WHERE   
		CDITM = @ItemNumber AND
        CD$9INID = @InstallationID
	
	/*Copy Lang Detail Table*/
	INSERT INTO [SCDATA].FQ67411L(CLITM,CLUKID,CL$9INID,CL$9DS,CLLNGP,CL$9PTL,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
	SELECT 
	   CLITM
      ,CLUKID
      ,CL$9INID
      ,0
      ,CLLNGP
      ,CL$9PTL
      ,CL$9HTML
      ,CLURCD
      ,CLURDT
      ,CLURAT
      ,CLURAB
      ,CLURRF
      ,CLUSER
      ,CLPID
      ,CLJOBN
      ,[DBO].CMM_GetCurrentJulianDate (GETDATE())
      ,CLTDAY
	FROM [SCDATA].FQ67411L
	WHERE  
		CLITM = @ItemNumber AND
        CL$9INID = @InstallationID
	
	

	/*Delete design record when changing to live
	Delete main header table	*/
	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = @ItemNumber AND
    CH$9INID = @InstallationID AND
	CH$9DS = 1
	/*Delete main header table language*/
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = @ItemNumber AND
    CL$9INID = @InstallationID AND
	CL$9DS = 1
	/*Delete detail table*/
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = @ItemNumber AND
    CD$9INID = @InstallationID AND
	CD$9DS = 1
	/*Delete detail table language*/
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = @ItemNumber AND
    CL$9INID = @InstallationID AND
	CL$9DS = 1

GO
 
 
     
      
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetBranchPlantItemList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetBranchPlantItemList
	END

GO

-- #desc						Get Items Related to Branch Plants
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId				Store ID
-- #param @BranchPlant    		Branch Plant.
-- #param @FilterTerm			Criteria to search by Item Number or Description
-- #param @PageIndex			Page number
-- #param @PageSize				Page size

CREATE PROCEDURE [DBO].INV_GetBranchPlantItemList

	@StoreId					NVARCHAR(3),
	@BranchPlant				NVARCHAR(12),
	@FilterTerm					NVARCHAR(MAX),
	@PageIndex					DECIMAL,
    @PageSize					DECIMAL
AS
BEGIN

	--Dynamic sql query
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @WHERECONDITION NVARCHAR(MAX) = ''

	DECLARE @ItemNumberCondition NVARCHAR(50) = ''

	SET @WHERECONDITION = N'WHERE IBO.BP$9INID = @StoreId ';

	IF(@BranchPlant <> '*')
	BEGIN
		SET @WHERECONDITION = @WHERECONDITION + ' AND LTRIM(RTRIM(BP.MCMCU)) = LTRIM(RTRIM(@BranchPlant)) '
	END

	IF(@FilterTerm <> '*')
	BEGIN
		IF(ISNUMERIC(@FilterTerm) = 1) BEGIN
			SET @ItemNumberCondition = ' (IM.IMITM = @FilterTerm) OR '
		END
		SET @WHERECONDITION = @WHERECONDITION +
		' AND (' + @ItemNumberCondition + '
		    ( IM.IMLITM LIKE ''%'' + @FilterTerm + ''%'')
		OR	( IM.IMAITM LIKE ''%'' + @FilterTerm + ''%'')
		OR  ( IM.IMDSC1 LIKE ''%'' + @FilterTerm + ''%'')
		OR  ( IM.IMDSC2 LIKE ''%'' + @FilterTerm + ''%'')
		OR  ( IM.IMSRTX LIKE ''%'' + @FilterTerm + ''%''))'

	END

	SET @SQL_DYNAMIC =
	N'SELECT
		PAGING.StoreId,
		PAGING.ShortItemNumber,
		PAGING.LongItemNumber,
		PAGING.AuxItemNumber,
		PAGING.ItemDescription1,
		PAGING.ItemDescription2,
		PAGING.BranchPlant,
		PAGING.BranchPlantDescription,
		PAGING.DateUpdated,
		PAGING.TotalRowCount
	 FROM
		(SELECT
			IBO.BP$9INID as StoreId,
			IBO.BPITM as ShortItemNumber,
			IM.IMLITM AS LongItemNumber,
			IM.IMAITM AS AuxItemNumber,
			IM.IMDSC1 as ItemDescription1,
			IM.IMDSC2 as ItemDescription2,
			BP.MCMCU as BranchPlant,
			ISNULL(BP.MCDL01,'' '')	AS BranchPlantDescription,
			IBO.BPUPMJ AS DateUpdated,
			ROW_NUMBER() OVER(ORDER BY IM.IMITM ASC) AS RNUM,
			COUNT(*) OVER () AS TotalRowCount
			FROM [SCDATA].FQ670005 as IBO
				INNER JOIN [SCDATA].F0006 as BP
				ON IBO.BPMCU = BP.MCMCU
					INNER JOIN [SCDATA].F4101 as IM
					ON IBO.BPITM = IM.IMITM '+ @WHERECONDITION+') AS PAGING
			WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (PAGING.RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))';

	EXECUTE sp_executesql @SQL_DYNAMIC,N'@StoreId NVARCHAR(3), @BranchPlant NVARCHAR(12), @FilterTerm NVARCHAR(MAX), @PageIndex DECIMAL, @PageSize DECIMAL', @StoreId = @StoreId, @BranchPlant = @BranchPlant, @FilterTerm = @FilterTerm, @PageIndex = @PageIndex, @PageSize = @PageSize
END


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalog'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalog
	END

GO


-- #desc						Get Catalog.
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				[DBO].INV_GetCatalogLang
--								[DBO].INV_GetCatalogDetail
-- #db_references				N/A	

-- #param @CatalogId			Catalog Id.
-- #param @InstallationID    	InstallationID.

CREATE PROCEDURE [DBO].INV_GetCatalog  
	
	@InstallationID     NVARCHAR(3),
	@CatalogId		    NVARCHAR(3)
	
AS
	SET NOCOUNT ON
	
SELECT     CA$9CLGID AS CatalogId,
           CA$9EFM   AS EffectiveModeFlag,
           CAEFFF	 AS EffectiveFromDate,
           CAEFFT	 AS EffectiveThruDate,
           CADSC1	 AS Description,
           CASEQ     AS SequenceNumber,
           CA$9INID	 AS InstallationID,
		   CAMCU	 AS MCU,
		   CA$9CCFU  AS MCUBehavior,
		   CAUSER    AS UserID,
		   CAPID     AS ProgramID,
           CAUPMJ    AS DateUpdated,
           CAUPMT    AS TimeLastUpdated,
           CAJOBN    AS WorkStationId           
FROM [SCDATA].FQ67412
WHERE
	(CA$9CLGID =  @CatalogID) AND
	(@InstallationID = '*' OR CA$9INID  =  @InstallationID) 
			
Exec [DBO].INV_GetCatalogLang @CatalogId,'*'
Exec [DBO].INV_GetCatalogDetail @CatalogId,null
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogDetailInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogDetailInfo
	END
GO

-- #desc						Get Catalog Detail Info.
-- #bl_class					Premier.Inventory.CatalogDetailInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID    		UniqueKeyID (Node ID)
-- #param @LangPref				Language Preference


CREATE PROCEDURE [DBO].INV_GetCatalogDetailInfo
(	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID		FLOAT,
	@LangPref			NVARCHAR(2)
)
AS
	SET NOCOUNT ON
	
SELECT     A.CD$9CLGID		AS CatalogId,
           A.CDUKID			AS UniqueKeyID,
           A.CD$9PKID		AS ParentKeyID,
           ISNULL(B.CDDL01, A.CDDL01 ) AS Description,
		   ' '				AS NodePath,
           A.CD$9IIS		AS IncludeInSearch,
           A.CDDTAI			AS DataItem,
           A.CDKY			AS UserDefinedCode,
           A.CDIMGURL		AS ImageURL,
           CDTMPI			AS TemplateID,
		   ' '			    AS InstallationID,
		   ' '				AS InstallationDesc           
FROM [SCDATA].FQ67413 A
LEFT JOIN [SCDATA].FQ67413L B
	ON B.CD$9CLGID = A.CD$9CLGID
	AND A.CDUKID = B.CDUKID
	AND B.CDLNGP = @LangPref
WHERE A.CD$9CLGID = @CatalogID 
AND A.CDUKID = @UniqueKeyID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogDetailList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogDetailList
	END
GO 

-- #desc						Get Catalog Detail Detail List
-- #bl_class					Premier.Inventory.CatalogDetailList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @CatalogID			Catalog ID	
-- #param @ParentKeyID			Catalog Detail Node ID	
-- #param @RetrieveAllTree		0 = Specific , 1 = ALL
-- #param @EffectiveOnly		Effective Only 
-- #param @LangPref				Language Preference

CREATE Procedure [DBO].INV_GetCatalogDetailList
(
	@CatalogID				NVARCHAR(3),
	@ParentKeyID			FLOAT,
	@RetrieveAllTree		FLOAT,
	@EffectiveOnly			FLOAT,
	@LangPref				NVARCHAR(2)
)	
AS
	BEGIN
		DECLARE @CurrentJulianDate INTEGER
		SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
								 
		SELECT
			A.CDUKID		AS UniqueKeyID,
			A.CD$9CLGID		AS CatalogId,
			A.CD$9PKID		AS ParentKeyID,
			ISNULL(B.CDDL01 ,A.CDDL01 ) AS Description,
			' '				AS NodePath,
			A.CD$9IIS		AS IncludeInSearch,
			A.CDDTAI		AS DataItem,
			A.CDKY			AS UserDefinedCode,
			A.CDIMGURL		AS ImageURL,
			A.CDTMPI		AS TemplateID,
			' '				AS InstallationID,
		    ' '				AS InstallationDesc        
		FROM [SCDATA].FQ67413 A 		
		LEFT JOIN [SCDATA].FQ67413L B
			ON B.CD$9CLGID = A.CD$9CLGID 
			AND	A.CDUKID = B.CDUKID
			AND B.CDLNGP = @LangPref			
		WHERE A.CD$9CLGID= @CatalogID
		AND (@RetrieveAllTree > 0 OR A.CD$9PKID = @ParentKeyID OR (@ParentKeyID is null and (A.CD$9PKID is null OR A.CD$9PKID = 0)))
		AND	(A.CD$9EFM = 0 OR  (@EffectiveOnly = 0 OR (@CurrentJulianDate >= A.CDEFFF and @CurrentJulianDate <= A.CDEFFT)))
		ORDER BY CDSEQ
	END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogDetails'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogDetails
	END

GO


-- #desc						Get Catalog Detail Detail List
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @CatalogID			Catalog ID	
-- #param @UniqueKeyID			Unique Key ID	

CREATE PROCEDURE [DBO].INV_GetCatalogDetails 
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID		FLOAT
	
AS
	SET NOCOUNT ON
	
SELECT     CD$9CLGID AS CatalogId,
           CDUKID    AS UniqueKeyID,
           CD$9PKID  AS ParentKeyID,
           CD$9IIS   AS IncludeInSearch,
           CDDTAI	 AS DataItem,
           CDKY	     AS UserDefinedCode,
           CDDL01	 AS Description,
           CD$9EFM   AS EffectiveModeFlag,
		   CDEFFF	 AS EffectiveFromDate,
	       CDEFFT    AS EffectiveThruDate,
		   CDSEQ     AS SequenceNumber,
		   CDIMGURL	 AS	ImageName,
           CDTMPI	 AS TemplateID
            
FROM [SCDATA].FQ67413
WHERE
           (CD$9CLGID = @CatalogID AND
            @UniqueKeyID is null or CDUKID = @UniqueKeyID) 
			
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogDetListByInst'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogDetListByInst
	END
GO 
-- #desc						Get - Search Catalog Detail List by Installation
-- #bl_class					Premier.Inventory.CatalogDetailList.cs
-- #db_references				N/A		
-- #db_dependencies				INV_GetCatalogNodePathFnc

-- #param InstallationList		Installation List- optional	. For example "DV1, DV2"
-- #param FilterTerm			Filter Term to search nodes
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param TotalRowCount			Total Count of Rows

CREATE PROCEDURE [DBO].INV_GetCatalogDetListByInst	
(
	@InstallationList		NVARCHAR(50),
	@FilterTerm				NVARCHAR(40),
	@PageIndex				FLOAT,
    @PageSize				FLOAT
)	
AS 			   
    SELECT UniqueKeyID, CatalogId, ParentKeyID, Description, [DBO].INV_GetCatalogNodePathFnc(CatalogId, UniqueKeyID) AS NodePath, 
		   IncludeInSearch,  DataItem, UserDefinedCode, ImageURL, TemplateID, InstallationID, C.INDSC1 AS InstallationDesc, TotalRowCount 
	FROM 	
	(SELECT
			A.CDUKID		AS UniqueKeyID,
			A.CD$9CLGID		AS CatalogId,
			A.CD$9PKID		AS ParentKeyID,
			A.CDDL01		AS Description,
			A.CD$9IIS		AS IncludeInSearch,			
			A.CDDTAI		AS DataItem,
			A.CDKY			AS UserDefinedCode,
			A.CDIMGURL		AS ImageURL,
			A.CDTMPI		AS TemplateID,			
			B.CA$9INID		AS InstallationID,
			ROW_NUMBER() OVER (ORDER BY (A.CDDL01)) AS RNUM,  
			COUNT(*) OVER () AS TotalRowCount  
		FROM [SCDATA].FQ67413 A
		INNER JOIN [SCDATA].FQ67412 B
			ON A.CD$9CLGID = B.CA$9CLGID		
		WHERE (@InstallationList = '*' OR @InstallationList LIKE '%' + B.CA$9INID +'%')
			AND (@FilterTerm= '*' OR  A.CDDL01 LIKE '%' + @FilterTerm + '%')) AS NODES
	INNER JOIN [SCDATA].FQ670001 C
		ON C.IN$9INID = InstallationID
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize));
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogInfo
	END

GO


-- #desc						Get Catalog Info
-- #bl_class					Premier.Inventory.CatalogInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param @CatalogID			Catalog ID	
-- #param @InstallationID		Installation ID	
-- #param @LangPref				Language Preference

CREATE PROCEDURE [DBO].INV_GetCatalogInfo  
	
	@InstallationID     NVARCHAR(3),
	@CatalogId		    NVARCHAR(3),
	@LangPref			NVARCHAR(2)
AS
	SET NOCOUNT ON
	
SELECT     A.CA$9CLGID AS CatalogId,
		   A.CADSC1   AS CatalogName,
           A.CA$9EFM   AS EffectiveModeFlag,
           A.CAEFFF    AS EffectiveFromDate,
           A.CAEFFT	 AS EffectiveThruDate,
           ISNULL(B.CADSC1 ,A.CADSC1 ) AS Description,
           A.CASEQ     AS SequenceNumber,
           A.CA$9INID	 AS InstallationID,
		   A.CAMCU AS MCU,
		   A.CA$9CCFU AS MCUBehavior             
FROM [SCDATA].FQ67412 A
LEFT JOIN [SCDATA].FQ67412L B 
			ON	A.CA$9CLGID = B.CA$9CLGID
			AND B.CALNGP = @LangPref
WHERE
           (A.CA$9CLGID = @CatalogID AND
			A.CA$9INID  =  @InstallationID) 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogList
	END

GO 

-- #desc								Gets catalog List
-- #bl_class							Premier.Inventory.CatalogList.cs
-- #db_dependencies						N/A
-- #db_references						N/A		

-- #param @CatalogID					Catalog ID
-- #param @UniqueKey					Unique Key
-- #param @ParentKey					Parent Key
-- #param @EffectiveOnly				Retrieve only the effective catalogs for today or retrieve all catalogs
-- #param @EffectiveFromDate			Effective From Date
-- #param @EffectiveThruDate			Effective Thru Date
-- #param @PageIndex					Paging - Current page
-- #param @PageSize						Paging - Items to be shown	

CREATE Procedure [DBO].INV_GetCatalogList
(
	@InstallationID			NVARCHAR(3) ,
	@CatalogID				NVARCHAR(3),
	@Description			NVARCHAR(30),
	@EffectiveOnly			FLOAT,
	@EffectiveFromDate	    NUMERIC,
	@EffectiveThruDate	    NUMERIC,
	@PageIndex				FLOAT,
    @PageSize				FLOAT
)	
AS
	SELECT 		
		C.CatalogID,
		C.CatalogName,
		C.EffectiveModeFlag,	
		C.EffectiveFromDate,
		C.EffectiveThruDate,
		C.Description,
		C.SequenceNumber,
		C.InstallationID,
		C.MCU,
		C.MCUBehavior,
		C.TotalRowCount
	FROM(
		SELECT  
				A.CA$9CLGID			AS CatalogID,
				A.CADSC1			AS CatalogName,
				A.CA$9EFM			AS EffectiveModeFlag,
				A.CAEFFF			AS EffectiveFromDate,
				A.CAEFFT			AS EffectiveThruDate,
				A.CADSC1			AS Description,
				A.CASEQ				AS SequenceNumber,
				A.CA$9INID			AS InstallationID,
				A.CAMCU				AS MCU,
				A.CA$9CCFU			AS MCUBehavior,
				ROW_NUMBER() OVER (ORDER BY A.CASEQ) AS RNUM,  
				COUNT(*) OVER ()	AS TotalRowCount  	 
		FROM  
			[SCDATA].FQ67412 A
		WHERE 
			(@InstallationID = '*' OR A.CA$9INID  = @InstallationID) AND
			(@CatalogID	 = '*' OR LTRIM(RTRIM(A.CA$9CLGID)) LIKE LTRIM(RTRIM( '%' + @CatalogID + '%'))) AND 		
			((@EffectiveFromDate = 0 AND @EffectiveThruDate= 0) OR (A.CAEFFF BETWEEN @EffectiveFromDate AND @EffectiveThruDate 
					 OR  A.CAEFFT BETWEEN @EffectiveFromDate AND @EffectiveThruDate) OR A.CA$9EFM = 0)
			AND (A.CA$9EFM = 0 OR (@EffectiveOnly=0 OR [DBO].CMM_GetCurrentJulianDate(GETDATE()) Between A.CAEFFF and A.CAEFFT)) AND
			(@Description = '*'   OR LTRIM(RTRIM(A.CADSC1)) LIKE (LTRIM(RTRIM( '%' + @Description + '%' ))))) AS C
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (C.RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))
	
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogNodeItemList'))
BEGIN
	DROP  Procedure  [DBO].INV_GetCatalogNodeItemList
END
GO
-- #desc								Gets Catalog Node Item List. 
-- #bl_class							Premier.Inventory.CatalogNodeItemList.cs
-- #db_dependencies						N/A
-- #db_references						N/A	

-- #param @StoreId				        Store Id
-- #param @CatalogId					Catalog Id
-- #param @CatalogDetailId				Catalog Detail Id (Node id)
-- #param @CatalogMCU					Catalog MCU
-- #param @SelectedProductsXML			Selected Products: used when the node is configured as a NodeItemList and the user is adding new items that haven't been saved
-- #param @DeletedProductsXML			Products Removed: used when the node is configured as a NodeItemList and the user deleted items that haven't been saved
-- #param @WhereCondition				Where Condition (Category code)
-- #param @FilterByCategoryCodes		Filter By Category Codes (Y/N)


CREATE Procedure [DBO].INV_GetCatalogNodeItemList
(
	@StoreId					NVARCHAR(3),
	@CatalogId					NVARCHAR(3),
	@CatalogDetailId			FLOAT,
	@CatalogMCU					NVARCHAR(12),
	@SelectedProductsXML		XML,
	@DeletedProductsXML			XML,
	@WhereCondition				NVARCHAR(MAX),
	@FilterByCategoryCodes		NVARCHAR(1)

)	
AS
	CREATE TABLE #Items
	(
		ItemNumber			FLOAT,
		LongItemNumber		NVARCHAR(25) collate DATABASE_DEFAULT,
		AuxItemNumber		NVARCHAR(25) collate DATABASE_DEFAULT,
		Description1		NVARCHAR(30) collate DATABASE_DEFAULT,
		Description2		NVARCHAR(30) collate DATABASE_DEFAULT,
		SearchText			NVARCHAR(300) collate DATABASE_DEFAULT,
		Template			NVARCHAR(20) collate DATABASE_DEFAULT,
		Segment1			NVARCHAR(10) collate DATABASE_DEFAULT,
		MatrixControlled	NVARCHAR(1) collate DATABASE_DEFAULT
	)

	--Dynamic
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @WHERE_DYNAMIC1 NVARCHAR(MAX) = ' '
	DECLARE @WHERE_DYNAMIC2 NVARCHAR(MAX) = ' '
	DECLARE @FROM_DYNAMIC NVARCHAR(MAX ) = ''
	DECLARE @SelectedProductsQuery NVARCHAR(MAX);
	DECLARE @DeletedProductsQuery NVARCHAR(MAX);

	--Build selected items query according to @SelectedProductsXML parameter
	SET @SelectedProductsQuery = N' '
	IF @SelectedProductsXML IS NOT NULL 
		BEGIN
			SET @SelectedProductsQuery = N' INNER JOIN @SelectedProductsXML.nodes(''/items/item'') AS items(item)
											ON IM.IMITM = items.item.value(''.'',''FLOAT'') '
	END

	--Build deleted items query according to @DeletedProductsXML parameter
	SET @DeletedProductsQuery = N' '
	IF @DeletedProductsXML IS NOT NULL 
		BEGIN
			SET @DeletedProductsQuery = N' INNER JOIN @DeletedProductsXML.nodes(''/items/item'') AS items(item)
											ON A.INITM <> items.item.value(''.'',''FLOAT'') '
	END
	
	/*Insert Items by Category Code or by Node Item List*/
	IF @FilterByCategoryCodes = 'Y'	BEGIN

		IF @WhereCondition <> '' BEGIN 
			SET @WHERE_DYNAMIC1 =  @WhereCondition +  N' AND (IM.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))'	
			SET @WHERE_DYNAMIC2 =  @WhereCondition + N' AND (IM.IMSTKT =''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))'			
		END
		ELSE BEGIN
			SET @WHERE_DYNAMIC1 =  N' (IM.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))'	
			SET @WHERE_DYNAMIC2 =  N' (IM.IMSTKT =''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))'		
		END

		/* Filter Matrix items children */
		IF (@WHERE_DYNAMIC1 <> '') 
			SET @WHERE_DYNAMIC1 = N' WHERE ' + @WHERE_DYNAMIC1 + ' AND (IM.IMTMPL = '''' OR IM.IMMIC IN (''1'', ''''))' 
		IF (@WHERE_DYNAMIC2 <> '') 
			SET @WHERE_DYNAMIC2  = N' WHERE ' + @WHERE_DYNAMIC2 + ' AND (IM.IMTMPL = '''' OR IM.IMMIC IN (''1'', ''''))'
		
		SET @FROM_DYNAMIC = N' FROM [SCDATA].F4101 IM 
									INNER JOIN [SCDATA].F40205 C
										ON C.LFLNTY = IM.IMLNTY
									INNER JOIN [SCDATA].FQ679910 E
										ON E.BI$9INID = @StoreId
									INNER JOIN [SCDATA].F4102 B
										ON B.IBITM = IM.IMITM
										AND B.IBMCU = E.BIMCU ';

		SET  @SQL_DYNAMIC = 
		N'SELECT 	
			IM.IMITM ItemNumber,
			IM.IMLITM LongItemNumber, 
			IM.IMAITM AuxItemNumber, 
			IM.IMDSC1 AS Description1, /*Description 1*/
			IM.IMDSC2 AS Description2, /*Description 2*/
			IM.IMLITM + '' '' + IM.IMAITM + '' '' + IM.IMSRTX  AS SearchText, 
			IM.IMTMPL AS Template,
			IM.IMSEG1 AS Segment1,
			IM.IMMIC  AS MatrixControlled '
			+ @FROM_DYNAMIC	     
		+ @WHERE_DYNAMIC1		
		+ ' UNION 
		SELECT   			
			IM.IMITM ItemNumber,
			IM.IMLITM LongItemNumber,
			IM.IMAITM AuxItemNumber,
			IM.IMDSC1 AS Description1, /*Description 1*/
			IM.IMDSC2 AS Description2, /*Description 2*/
			IM.IMLITM + '' '' + IM.IMAITM + '' '' + IM.IMSRTX  AS SearchText, 
			IM.IMTMPL AS Template,
			IM.IMSEG1 AS Segment1,
			IM.IMMIC  AS MatrixControlled		
		FROM [SCDATA].F4101 IM
		INNER JOIN [SCDATA].F40205 C
			ON C.LFLNTY = IM.IMLNTY  '
		 + @WHERE_DYNAMIC2 ;
    END
    ELSE BEGIN /*By Catalog Node Items*/
		
		SET @FROM_DYNAMIC = ' FROM [SCDATA].FQ67413I A 
									INNER JOIN [SCDATA].F4101 IM
										ON IM.IMITM = A.INITM 								
									INNER JOIN [SCDATA].F40205 C
										ON C.LFLNTY = IM.IMLNTY					
									INNER JOIN [SCDATA].FQ679910 E
										ON E.BI$9INID = @StoreId
									INNER JOIN [SCDATA].F4102 B
										ON B.IBITM = IM.IMITM
										AND B.IBMCU = E.BIMCU';
		
		SET	@SQL_DYNAMIC = 
		N'SELECT 				
			IM.IMITM ItemNumber,
			IM.IMLITM LongItemNumber, 
			IM.IMAITM AuxItemNumber, 
			IM.IMDSC1 AS Description1, /*Description 1*/
			IM.IMDSC2 AS Description2, /*Description 2*/
			IM.IMLITM + '' '' + IM.IMAITM + '' '' + IM.IMSRTX  AS SearchText, 
			IM.IMTMPL AS Template,
			IM.IMSEG1 AS Segment1,
			IM.IMMIC  AS MatrixControlled '
			 + @FROM_DYNAMIC + ' '
			 + @DeletedProductsQuery + ' 				 
		  WHERE A.IN$9CLGID = @CatalogId
		AND A.INUKID =  @CatalogDetailId 				
		 AND (IM.IMSTKT <>''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))' 
		+ ' UNION
		SELECT
			IM.IMITM ItemNumber,
			IM.IMLITM LongItemNumber, 
			IM.IMAITM AuxItemNumber, 
			IM.IMDSC1 AS Description1, /*Description 1*/
			IM.IMDSC2 AS Description2, /*Description 2*/
			IM.IMLITM + '' '' + IM.IMAITM + '' '' + IM.IMSRTX  AS SearchText, 
			IM.IMTMPL AS Template,
			IM.IMSEG1 AS Segment1,
			IM.IMMIC  AS MatrixControlled 
		FROM [SCDATA].FQ67413I A
		 INNER JOIN [SCDATA].F4101 IM 
			ON IM.IMITM = A.INITM 					
		 INNER JOIN [SCDATA].F40205 C
			ON C.LFLNTY = IM.IMLNTY '
		 + @DeletedProductsQuery + '
		 WHERE A.IN$9CLGID = @CatalogId 
		 AND A.INUKID = @CatalogDetailId 								
		  AND (IM.IMSTKT = ''N'' OR (C.LFIVI<> ''Y'' AND C.LFIVI<> ''D''))'
		
		IF @SelectedProductsXML IS NOT NULL BEGIN
			SET	@SQL_DYNAMIC = @SQL_DYNAMIC +
			N' UNION 
				SELECT 
					IM.IMITM ItemNumber,
					IM.IMLITM LongItemNumber,
					IM.IMAITM AuxItemNumber, 
					IM.IMDSC1 AS Description1, /*Description 1*/
					IM.IMDSC2 AS Description2, /*Description 2*/
					IM.IMLITM + '' '' + IM.IMAITM + '' '' + IM.IMSRTX  AS SearchText,
					IM.IMTMPL AS Template,
					IM.IMSEG1 AS Segment1,
					IM.IMMIC  AS MatrixControlled
				FROM [SCDATA].F4101 IM '
				+ @SelectedProductsQuery ;
		END
	END
	
	SET @SQL_DYNAMIC = 'INSERT INTO #Items ( ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, SearchText, Template, Segment1, MatrixControlled)'+ @SQL_DYNAMIC 
 
	EXECUTE sp_executesql @SQL_DYNAMIC, N'@StoreId NVARCHAR(3), @CatalogId NVARCHAR(3), @CatalogDetailId FLOAT, @CatalogMCU NVARCHAR(12), @SelectedProductsXML XML,	@DeletedProductsXML XML ',
						  @StoreId = @StoreId, @CatalogId = @CatalogId, @CatalogDetailId = @CatalogDetailId, @CatalogMCU = @CatalogMCU, @SelectedProductsXML = @SelectedProductsXML, @DeletedProductsXML = @DeletedProductsXML



	SET @SQL_DYNAMIC = N'SELECT 
	A.ItemNumber AS ItemNumber,
	A.LongItemNumber AS LongItemNumber,
	A.AuxItemNumber AS AuxItemNumber,
	ISNULL (CONTENTINS.CHDSC1, ISNULL( CONTENTBASE.CHDSC1, A.Description1)) AS Description1, --Description 1                            
	ISNULL (CONTENTINS.CHDSC2, ISNULL( CONTENTBASE.CHDSC2, A.Description2)) AS Description2,---Desciption 2
	ISNULL (ISNULL (CONTENTINS.CHDSC3, CONTENTBASE.CHDSC3),'''') + A.SearchText  AS SearchText,
	A.Template,
	A.Segment1,
	A.MatrixControlled
	FROM #Items A
	LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  --Contents by Installation
		ON CONTENTINS.CHITM = A.ItemNumber  
		AND CONTENTINS.CH$9INID = @StoreId     
		AND CONTENTINS.CH$9DS =0  
	LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  --Contents Base
		ON CONTENTBASE.CHITM = A.ItemNumber  
		AND CONTENTBASE.CH$9INID = ''***''
		AND CONTENTBASE.CH$9DS =0'
	
	/* Return second record:Item Attribute Values*/		
	EXECUTE sp_executesql @SQL_DYNAMIC, N'@StoreId NVARCHAR(3)', @StoreId = @StoreId							
	
	DROP TABLE #Items

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogNodeItems'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogNodeItems
	END

GO

-- #desc							Read Catalog Node Items by Installation
-- #bl_class						Premier.Inventory.CatalogNodeItems.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID.
-- #param @ItemNumber				Short Item Number
-- #param @Description				Description
-- #param @CatalodId				CatalogId
-- #param @CatalogDetailId			CatalogDetailId
-- #param @CatalogMCU				Catalog MCU
-- #param @RetrieveMatrixChildren	Retrieve Matrix children

CREATE Procedure [DBO].INV_GetCatalogNodeItems
(
	@InstallationID		NVARCHAR(3),
	@ItemNumber			FLOAT,	 --ShortItemNumber
	@Description		NVARCHAR(30),
	@CatalogId			NVARCHAR(3),
	@CatalogDetailId	FLOAT,
	@CatalogMCU			NVARCHAR(12),
	@RetrieveMatrixChildren		INT
)
AS
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------    
	DECLARE @FilterTable TABLE
	(
		CatalogId					NVARCHAR(3) collate DATABASE_DEFAULT,
		UniqueKeyID					FLOAT,
		ItemNumber					FLOAT, 
		LongItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		AuxItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		Description1				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description2				NVARCHAR(30) collate DATABASE_DEFAULT,
		SequenceNumber				FLOAT,
		InventoryFlag				NVARCHAR(1) collate DATABASE_DEFAULT,
		StockingType				NVARCHAR(2) collate DATABASE_DEFAULT,
		ScType						NVARCHAR(1) collate DATABASE_DEFAULT,
		Template					NVARCHAR(20) collate DATABASE_DEFAULT,
		Segment1					NVARCHAR(10) collate DATABASE_DEFAULT
	)

	INSERT INTO @FilterTable (CatalogId, UniqueKeyID, ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, SequenceNumber, InventoryFlag, StockingType, ScType, Template, Segment1)
	SELECT
		B.IN$9CLGID	AS CatalogId,
		B.INUKID	AS UniqueKeyID,
		A.IMITM		AS ItemNumber,
		A.IMLITM	AS LongItemNumber,
		A.IMAITM	AS AuxItemNumber,
		A.IMDSC1	AS Description1,
		A.IMDSC2	AS Description2,
		B.INSEQ		AS SequenceNumber,
		C.LFIVI		AS InventoryFlag,
		A.IMSTKT	AS StockingType,
		CASE 
			WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
			WHEN A.IMMIC = '1' AND A.IMTMPL <> '' THEN 'M'
			WHEN (A.IMSTKT <> N'N' AND (C.LFIVI = N'Y' OR C.LFIVI = N'D')) then N'S'
			ELSE 'N'
		END AS ScType,
		A.IMTMPL	AS Template,
		A.IMSEG1	AS Segment1
	FROM [SCDATA].FQ67413I B       --Catalog Node Items
	INNER JOIN [SCDATA].F4101 A						--Item Master
		ON B.INITM = A.IMITM
	INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
		ON C.LFLNTY = A.IMLNTY
	WHERE B.IN$9CLGID = @CatalogId
		AND B.INUKID = @CatalogDetailId
		AND (@ItemNumber IS NULL OR A.IMITM = @ItemNumber) -- Item Number filter
		AND (@Description = '*' OR A.IMDSC1 LIKE '%' + @Description + '%') -- Description filter 
	ORDER BY B.INSEQ ASC
	
	/* Get Matrix children based in the setting */
	IF (@RetrieveMatrixChildren = 1) BEGIN
		INSERT INTO @FilterTable (CatalogId, UniqueKeyID, ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, SequenceNumber, InventoryFlag, StockingType, ScType, Template, Segment1)
		SELECT 
			B.CatalogId	AS CatalogId,
			B.UniqueKeyID	AS UniqueKeyID,
			A.IMITM		AS ItemNumber,
			A.IMLITM	AS LongItemNumber,
			A.IMAITM	AS AuxItemNumber,
			A.IMDSC1	AS Description1,
			A.IMDSC2	AS Description2,
			B.SequenceNumber		AS SequenceNumber,
			C.LFIVI		AS InventoryFlag,
			A.IMSTKT	AS StockingType,
			'R'			AS ScType,
			A.IMTMPL	AS Template,
			A.IMSEG1	AS Segment1
		FROM [SCDATA].F4101 A						/* Item Master */
		INNER JOIN (SELECT DISTINCT FT.Template, FT.Segment1, CatalogId, UniqueKeyID, SequenceNumber FROM @FilterTable FT WHERE FT.Template <> '' AND FT.ScType = 'M') B
			ON A.IMTMPL = B.Template AND A.IMSEG1 = B.Segment1 AND A.IMMIC = '2'
		INNER JOIN [SCDATA].F40205 C			/* Line Type Control Table */
			ON C.LFLNTY = A.IMLNTY
		WHERE (@ItemNumber IS NULL OR A.IMITM = @ItemNumber) /* Item Number filter */
			AND (@Description = '*' OR A.IMDSC1 LIKE '%' + @Description + '%') /* Description filter */
			AND NOT EXISTS(SELECT * FROM @FilterTable I WHERE I.ItemNumber = A.IMITM);
	END

	SELECT DISTINCT
		A.CatalogId,
		A.UniqueKeyID,
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		A.SequenceNumber AS SequenceNumber,
		A.StockingType,
		A.InventoryFlag,
		A.ScType,
		A.Template AS Template
	FROM @FilterTable A
	INNER JOIN [SCDATA].FQ679910 E	--BranchPlant by Installation
		ON E.BI$9INID = @InstallationID 		
	INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
		ON B.IBITM = A.ItemNumber 
		AND B.IBMCU = E.BIMCU 
	WHERE 
		(A.StockingType <>'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D'))			--Inventory Interface
	UNION
	SELECT
		A.CatalogId,
		A.UniqueKeyID,
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1, 
		A.Description2,
		A.SequenceNumber AS SequenceNumber,
		A.StockingType,
		A.InventoryFlag,
		A.ScType,
		A.Template AS Template
	FROM
		@FilterTable A						
	WHERE 
		(A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D'))				--Inventory Interface
	ORDER BY A.SequenceNumber ASC
	
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatalogPublicList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCatalogPublicList
	END

GO 

-- #desc						Get Catalog Public List
-- #bl_class	 	 			Premier.Inventory.CatalogList.cs
-- #db_dependencies				N/A
-- #db_references				N/A					

-- #param @InstallationID		Installation ID
-- #param @LangPref				Language Pref

CREATE Procedure [DBO].INV_GetCatalogPublicList
(
	@InstallationID			NVARCHAR(3),
	@LangPref				NVARCHAR(2)
)	
AS
BEGIN
	
	SELECT  
		   A.CA$9CLGID  AS CatalogId,
		   A.CADSC1		AS CatalogName,
           A.CA$9EFM    AS EffectiveModeFlag,
           A.CAEFFF     AS EffectiveFromDate,
           A.CAEFFT	    AS EffectiveThruDate,
           ISNULL(B.CADSC1 ,A.CADSC1) AS Description,
           A.CASEQ		AS SequenceNumber,
           A.CA$9INID	AS InstallationID,
		   A.CAMCU		 AS MCU,
		   A.CA$9CCFU	 AS MCUBehavior   
	FROM [SCDATA].FQ67412 A
	LEFT JOIN [SCDATA].FQ67412L B 
			ON	A.CA$9CLGID = B.CA$9CLGID
			AND B.CALNGP = @LangPref	
	WHERE 
		(A.CA$9INID  = @InstallationID) AND 
		(A.CA$9EFM = 0 OR (DBO.CMM_GetCurrentJulianDate(GETDATE()) Between A.CAEFFF and A.CAEFFT))		
	ORDER BY 
		A.CASEQ
END	
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCatNodeItemsNotRel'))
	BEGIN
		DROP PROCEDURE [DBO].INV_GetCatNodeItemsNotRel
	END
GO

-- #desc						Read Catalog Node Items by Installation
-- #bl_class					Premier.Inventory.CatalogNodeItems.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId				Store ID.
-- #param @FilterTerm			Filter Term
-- #param @CatalogId			Catalog Id
-- #param @CatalogDetailId		Catalog Detail Id
-- #param @CatalogMCU			Catalog MCU
-- #param @RemovedProductsXML	Products removed from the Detail in memory
-- #param @DisplayItemSetting	Display Item Setting
-- #param @PageIndex			Page Index
-- #param @PageSize				Page Size
-- #param @TotalRowCount		Total Count of Rows

CREATE Procedure [DBO].INV_GetCatNodeItemsNotRel
(	
	@StoreId		NVARCHAR(3),
	@FilterTerm			NVARCHAR(50),
	@CatalogId			NVARCHAR(3),
	@CatalogDetailId	FLOAT,
	@CatalogMCU		    NVARCHAR(12),
	@RemovedProductsXML	XML,
	@DisplayItemSetting NVARCHAR(4),
	@PageIndex			INT,
    @PageSize			INT,
    @TotalRowCount		INT OUTPUT
)
AS
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------    
	CREATE TABLE #FilterTable  
	(		
		ItemNumber					FLOAT, 
		LongItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		AuxItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		Description1				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description2				NVARCHAR(30) collate DATABASE_DEFAULT,
		DisplayItemNumber			NVARCHAR(25) collate DATABASE_DEFAULT, 
		InventoryFlag				NVARCHAR(1) collate DATABASE_DEFAULT,
		StockingType				NVARCHAR(2) collate DATABASE_DEFAULT,
		DesignStatus				FLOAT,
		ScType						NVARCHAR(1) collate DATABASE_DEFAULT,
		Template					NVARCHAR(20) collate DATABASE_DEFAULT,
	)
	-----------------------------------------------------
	 --Define the table to do the paging
	-----------------------------------------------------    
	CREATE TABLE #PagingTable  
	(
		nID  						INT IDENTITY,
		ItemNumber					FLOAT, 
		LongItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		AuxItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		Description1				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description2				NVARCHAR(30) collate DATABASE_DEFAULT,
		DisplayItemNumber			NVARCHAR(25) collate DATABASE_DEFAULT,
		InventoryFlag				NVARCHAR(1) collate DATABASE_DEFAULT,
		StockingType				NVARCHAR(2) collate DATABASE_DEFAULT,
		ScType						NVARCHAR(1) collate DATABASE_DEFAULT,
		Template					NVARCHAR(20) collate DATABASE_DEFAULT
	)

	DECLARE @RowStart INT
	DECLARE @RowEnd INT	
	DECLARE @ShortItemNumber FLOAT;

	-- Dynamic
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @DISPLAYITEM_DYNAMIC NVARCHAR(100);

	DECLARE @RemoveItemsSql NVARCHAR(MAX) = ''
	DECLARE @ItemNumberCondition NVARCHAR(50) = ''

	IF (@DisplayItemSetting = 'LITM') BEGIN
		SET @DISPLAYITEM_DYNAMIC = ' A.IMLITM AS DisplayItemNumber, ';
	END
	ELSE IF (@DisplayItemSetting = 'AITM') BEGIN
		SET @DISPLAYITEM_DYNAMIC = ' A.IMAITM AS DisplayItemNumber, ';
	END
	ELSE BEGIN
		SET @DISPLAYITEM_DYNAMIC = ' STR(A.IMITM) AS DisplayItemNumber, ';
	END

	IF(ISNUMERIC(@FilterTerm) = 1) BEGIN
		SET @ItemNumberCondition = ' (A.IMITM = @ShortItemNumber) OR '
		SET @ShortItemNumber = @FilterTerm;
	END

	--Add the removed Items
	IF @RemovedProductsXML IS NOT NULL 
		BEGIN
			SET @RemoveItemsSql = N' OR A.IMITM IN (SELECT items.item.value(''.'',''FLOAT'') FROM @RemovedProductsXML.nodes(''/items/item'') AS items(item)';
	END

	SET @SQL_DYNAMIC ='
		INSERT INTO #FilterTable 
		(
			ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, DisplayItemNumber, InventoryFlag, StockingType, DesignStatus, ScType, Template
		)
		SELECT DISTINCT
			A.IMITM		AS ItemNumber,
			A.IMLITM	AS LongItemNumber,
			A.IMAITM	AS AuxItemNumber,
			ISNULL(B.CHDSC1, ISNULL(D.CHDSC1,A.IMDSC1))	AS Description1,		
			ISNULL(B.CHDSC2, ISNULL(D.CHDSC2,A.IMDSC2))	AS Description2,
			'+ @DISPLAYITEM_DYNAMIC +'
			C.LFIVI		AS InventoryFlag,
			A.IMSTKT	AS StockingType,
			COALESCE(B.CH$9DS, D.CH$9DS)	AS DesigStatus,
			CASE 
				WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
				WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN N''M''
				WHEN (A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'')) then N''S''
				ELSE N''N''
			END AS ScType,
			A.IMTMPL	AS Template
		FROM
			[SCDATA].F4101 A						--Item Master
		INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
			ON C.LFLNTY = A.IMLNTY
		LEFT OUTER JOIN [SCDATA].FQ67410 AS B
			ON B.CH$9INID = @StoreId
			AND B.CHITM = A.IMITM
		LEFT OUTER JOIN [SCDATA].FQ67410 AS D
			ON D.CH$9INID = ''***''
			AND D.CHITM = A.IMITM
		WHERE
			(' + @ItemNumberCondition + ' 
				A.IMLITM LIKE ''%'' + @FilterTerm + ''%''
				OR	A.IMAITM LIKE ''%'' + @FilterTerm + ''%''
				OR  ISNULL(B.CHDSC1, ISNULL(D.CHDSC1,A.IMDSC1)) LIKE ''%'' + @FilterTerm + ''%''
				OR  ISNULL(B.CHDSC2, ISNULL(D.CHDSC2,A.IMDSC2)) LIKE ''%'' + @FilterTerm + ''%''
				OR  ISNULL(B.CHDSC3, ISNULL(D.CHDSC3,'''')) LIKE ''%'' + @FilterTerm + ''%''
				OR  A.IMSRTX LIKE ''%'' + @FilterTerm + ''%''
			)
			AND	
			( A.IMITM NOT IN (SELECT B.INITM FROM [SCDATA].FQ67413I AS B WHERE B.IN$9CLGID = @CatalogId AND B.INUKID = @CatalogDetailId) 
				'+ @RemoveItemsSql +'
			)';

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@StoreId NVARCHAR(3), @CatalogId NVARCHAR(3), @CatalogDetailId FLOAT, @ShortItemNumber FLOAT, @FilterTerm NVARCHAR(50), @RemovedProductsXML XML ', 
	@StoreId = @StoreId, @CatalogId = @CatalogId, @CatalogDetailId = @CatalogDetailId, @ShortItemNumber = @ShortItemNumber, @FilterTerm = @FilterTerm, @RemovedProductsXML= @RemovedProductsXML;

	/* Removes the Draft version when item has both versions from #FilterTable */
	;WITH ITEMS (ItemNumber) AS(
		SELECT I.ItemNumber 
			FROM (SELECT ItemNumber, COUNT(ItemNumber) CNT 
					FROM #FilterTable GROUP BY (ItemNumber)) I WHERE I.CNT > 1
	)
	DELETE FROM #FilterTable 
		WHERE 
			ItemNumber IN (SELECT ItemNumber FROM ITEMS) AND DesignStatus = 1
	

	
	INSERT INTO #PagingTable (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, DisplayItemNumber, InventoryFlag, StockingType, ScType, Template)
	SELECT DISTINCT
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		A.DisplayItemNumber,
		A.InventoryFlag,
		A.StockingType,
		A.ScType,
		A.Template
	FROM
		#FilterTable A
		INNER JOIN [SCDATA].FQ679910 E	--BranchPlant by Installation
		ON E.BI$9INID = @StoreId
		INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
		ON B.IBITM = A.ItemNumber
		AND B.IBMCU = E.BIMCU
	WHERE
		A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')					--Inventory Interface
	UNION
	SELECT
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		A.DisplayItemNumber,
		A.InventoryFlag,
		A.StockingType,
		A.ScType,
		A.Template
	FROM
		#FilterTable A						
	WHERE 
		A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')			--Inventory Interface

	------------------------------------------------------
	-- Gets the total count of the result
	------------------------------------------------------
	SET @TotalRowCount = @@ROWCOUNT

	-------------------------------------------------------
	-- Paging Calculation
	-------------------------------------------------------
	-- Set the first row to be selected
	SET @RowStart = (@PageSize * @PageIndex) - @PageSize + 1
	-- Set the last row to be selected
	SET @rowEnd = @PageIndex * @PageSize
	
	;WITH PAGING AS
	(
		SELECT 	
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.Description1 AS Description1,
			A.Description2 AS Description2,
			0 AS SequenceNumber,
			A.StockingType,
			A.InventoryFlag,
			A.ScType,
			A.Template,
			ROW_NUMBER() OVER (ORDER BY DisplayItemNumber DESC) AS RNUM	
		FROM #PagingTable A
	)
	SELECT 	
		@CatalogId AS CatalogId,
		0  AS UniqueKeyID,
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1 AS Description1,
		A.Description2 AS Description2,
		0 AS SequenceNumber,
		A.StockingType,
		A.InventoryFlag,
		A.ScType,
		A.Template	
	FROM PAGING A
	WHERE
		((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN @ROWSTART AND @ROWEND))

	DROP TABLE #FilterTable
	DROP TABLE #PagingTable
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCookieCrumb'))
 BEGIN
  DROP  Procedure  [DBO].INV_GetCookieCrumb
 END

GO

-- #desc						Get Cookie Crumb
-- #bl_class					Premier.Inventory.CookieCrumbList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogID			Catalog ID
-- #param @CatalodDetailId		Catalod Detail Id
-- #param @LangPref				Language Preference

CREATE Procedure [DBO].INV_GetCookieCrumb
(
	@CatalogId			NVARCHAR(3),
	@CatalodDetailId	FLOAT,
	@LangPref			NVARCHAR(2)
)
AS
 DECLARE @CookieCrumb TABLE
 (
	  CatalogID			NVARCHAR(3) collate DATABASE_DEFAULT,
	  CatalogDetailId   FLOAT,
	  ParentKeyID		FLOAT,
	  Description		NVARCHAR(30) collate DATABASE_DEFAULT,
	  IncludeInSearch	FLOAT,
	  DataItem			NVARCHAR(10) collate DATABASE_DEFAULT,
	  UserDefinedCode	NVARCHAR(10) collate DATABASE_DEFAULT,
	  TemplateID		NVARCHAR(10) collate DATABASE_DEFAULT
 )

declare @Exist FLOAT; 
declare @ParentTmp FLOAT;
declare @CatalodDetailIdTmp FLOAT;

WHILE(@CatalodDetailId <> 0 AND @CatalodDetailId IS NOT NULL) BEGIN
	SELECT @Exist = COUNT(*), @CatalodDetailIdTmp = CD$9PKID
	FROM [SCDATA].FQ67413 
	WHERE CD$9CLGID = @CatalogId 
	AND CDUKID = @CatalodDetailId
	GROUP BY CD$9PKID
  
	IF(@Exist > 0) BEGIN
	
		INSERT INTO @CookieCrumb (CatalogId, CatalogDetailId, ParentKeyID, Description, IncludeInSearch, DataItem,UserDefinedCode,TemplateID)		    
		SELECT A.CD$9CLGID, A.CDUKID, A.CD$9PKID, A.CDDL01, A.CD$9IIS, A.CDDTAI, A.CDKY, A.CDTMPI
		FROM [SCDATA].FQ67413 A		
		WHERE A.CD$9CLGID = @CatalogId 
		AND A.CDUKID = @CatalodDetailId;
		
		Set @ParentTmp = @CatalodDetailId;
		set @CatalodDetailId = @CatalodDetailIdTmp;		
		
		if (@ParentTmp = @CatalodDetailId) BEGIN
			SET @CatalodDetailId = NULL;
			DELETE FROM @CookieCrumb;
		END 		
	END
	ELSE BEGIN
		SET @CatalodDetailId = NULL
	    DELETE FROM @CookieCrumb
	END  
	--si un padre tiene template obtener los attributtes
	
END

SELECT
	CatalogID,
	CatalogDetailId,
	ParentKeyID,
	ISNULL(B.CDDL01 ,A.Description) AS Description,
	IncludeInSearch,
	DataItem,
	UserDefinedCode,
	TemplateID	
 FROM @CookieCrumb A
	LEFT JOIN [SCDATA].FQ67413L B
	ON	B.CD$9CLGID = A.CatalogID
	AND	A.CatalogDetailId = B.CDUKID
	AND B.CDLNGP = @LangPref
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetCustCrossReferenceLst'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetCustCrossReferenceLst
	END

GO

-- #desc							Get Customer Cross Ref List
-- #bl_class						Premier.Inventory.ItemCrossReferenceList.cs	
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation Id
-- #param @AddressNumber			Address Number
-- #param @ShortProductNumbersXML	ShortItemNumber List

SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [DBO].INV_GetCustCrossReferenceLst
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@ShortProductNumbersXML		XML
AS
BEGIN
	
	DECLARE @CurrentJulianDate NUMERIC
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())

	-- Gets Cust Cross Type
	DECLARE @CustCrossRefType	NVARCHAR(2)
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @InstallationID, @CustCrossRefType out

	
	;WITH CTE AS 
		(
			SELECT items.item.value('.','FLOAT') AS ShortProductNumber
			FROM @ShortProductNumbersXML.nodes('/items/item') AS items(item)
		)
		SELECT 
			X.ShortProductNumber		AS ShortProductNumber,
			ISNULL(I.IVCITM, '')	AS RefProductNumber
		FROM CTE X
		LEFT OUTER JOIN [SCDATA].F4104 I
			ON  I.IVITM = X.ShortProductNumber
			AND I.IVAN8 = @AddressNumber 
				AND I.IVXRT = @CustCrossRefType 
				AND @CurrentJulianDate BETWEEN I.IVEFTJ AND I.IVEXDJ
		OPTION ( OPTIMIZE FOR ( @ShortProductNumbersXML = NULL ));
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemAssociatedList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemAssociatedList
	END

GO 

-- #desc						Get Item Replacement Items
-- #bl_class					Premier.Inventory.ItemAssociatedList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @AddressNumber		Address Number  --It will be 0 when is called from POS or when the AN8 is a Consumer not has to return Cross-References items
-- #param @ShortItemNumber		Short Item Number
-- #param @RefProductNumber		Reference Product Number

CREATE Procedure [DBO].INV_GetItemAssociatedList
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@ShortItemNumber	FLOAT,
	@RefType			NVARCHAR(256),
	@LangPref			NVARCHAR(2),
	@RetrieveWebContentInfo	FLOAT,
	@PageIndex			FLOAT,
    @PageSize			FLOAT,    
    @TotalRowCount		int OUTPUT    
)
AS

	DECLARE @ITEMTEMPFilter TABLE
	(
		ItemNumber 	FLOAT,
		LongItemNumber 	NVARCHAR(25) collate DATABASE_DEFAULT,
		AuxItemNumber	NVARCHAR(25) collate DATABASE_DEFAULT,
		RefProductNumber NVARCHAR(25) collate DATABASE_DEFAULT,
		Description1	NVARCHAR(30) collate DATABASE_DEFAULT,
		Description2	NVARCHAR(30) collate DATABASE_DEFAULT,
		PrimaryUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		SecondaryUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		PricingUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		StockingType NVARCHAR(1) collate DATABASE_DEFAULT,
		LineType NVARCHAR(2) collate DATABASE_DEFAULT,
		InventoryFlag NVARCHAR(1) collate DATABASE_DEFAULT
	)
	
	DECLARE @ITEMTEMPPaging TABLE 
	(
		nID  		INT IDENTITY,
		ItemNumber 	FLOAT,
		LongItemNumber 	NVARCHAR(25) collate DATABASE_DEFAULT,
		AuxItemNumber	NVARCHAR(25) collate DATABASE_DEFAULT,
		RefProductNumber NVARCHAR(25) collate DATABASE_DEFAULT,
		Description1	NVARCHAR(30) collate DATABASE_DEFAULT,
		Description2	NVARCHAR(30) collate DATABASE_DEFAULT,		
		PrimaryUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		SecondaryUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		PricingUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		StockingType NVARCHAR(1) collate DATABASE_DEFAULT,
		LineType NVARCHAR(2) collate DATABASE_DEFAULT,
		InventoryFlag NVARCHAR(1) collate DATABASE_DEFAULT
	)
	
	DECLARE @ROWSTART int
	DECLARE @ROWEND int
    
     -- Gets Cust Cross Document Restrictions
	DECLARE @CustCrossRefType  NVARCHAR(256)
	DECLARE @CustCrossINID     NVARCHAR(3)

    DECLARE @CurrentJulianDate INTEGER
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
    
     /* @AddressNumbCustomerCrossRef is for read customer references information */
    DECLARE @AddressNumbCustomerCrossRef FLOAT
    SET @AddressNumbCustomerCrossRef = @AddressNumber  
    
    -- Get the Default Customer value constant
	DECLARE @DEFCUSTOMERCONSTANT NVARCHAR(256)
	DECLARE @ConstantINID NVARCHAR(3)
	SET @ConstantINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'DEFCUSTOM', @ConstantINID, @DEFCUSTOMERCONSTANT OUT
	
	/* if addressNumber is equal to DefaultCustomer the user 
	    is consumer so does not read customer references information*/
	IF(@AddressNumbCustomerCrossRef = @DEFCUSTOMERCONSTANT)
	BEGIN
	  SET @AddressNumber = 0
    END
    
	/*
		IF AddressNumber equal 0 does not read customer references 
		information (AN8 will be zero when the Stored Procedure 
		is called from POS or is an SmarterPages consumer)
	*/
	IF(@AddressNumber <> 0) 
	BEGIN--BEGIN IF 1		
		SET @CustCrossINID = @InstallationID
		EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossINID out, @CustCrossRefType out
		    
		INSERT INTO @ITEMTEMPFilter
		SELECT 
			IM2.IMITM AS ShortItemNumber,
			IM2.IMLITM AS LongItemNumber,
			IM2.IMAITM AS AuxItemNumber,		
			B.IVCITM AS RefProductNumber,
			IM2.IMDSC1 AS Description1,
			IM2.IMDSC2 AS Description2,		
			IM2.IMUOM1 AS PrimaryUnitOfMeasure,
			IM2.IMUOM2 AS SecondaryUnitOfMeasure,
			IM2.IMUOM4 AS PricingUnitOfMeasure,
			IM2.IMSTKT AS StockingType,
			IM2.IMLNTY AS LineType,
			C.LFIVI AS InventoryFlag
		FROM 
			[SCDATA].F4104 A						--CROSS REFERENCE
			INNER JOIN [SCDATA].F4101 IM1		--ITEM MASTER JOIN
			ON IM1.IMITM = A.IVITM
			INNER JOIN [SCDATA].F4101 IM2		--ITEM MASTER JOIN
			ON IM2.IMLITM = A.IVCITM
			INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
			ON C.LFLNTY = IM2.IMLNTY
			LEFT OUTER JOIN [SCDATA].F4104 B		--Customer/Item Cross Ref Table
			ON B.IVAN8 = @AddressNumbCustomerCrossRef
			AND B.IVITM = IM2.IMITM
			AND B.IVXRT = @CustCrossRefType
			AND @CurrentJulianDate >= B.IVEFTJ AND @CurrentJulianDate <= B.IVEXDJ
		WHERE 
			A.IVITM = @ShortItemNumber
			AND A.IVXRT = @RefType
			AND ((@CurrentJulianDate >=A.IVEFTJ AND @CurrentJulianDate <= A.IVEXDJ) OR
				 (@CurrentJulianDate >=A.IVEFTJ AND A.IVEXDJ = 0))
			AND  (A.IVAN8 = @AddressNumber OR A.IVAN8 = 0)
		ORDER BY IM2.IMLITM ASC
	END --END IF 1	
	ELSE --The Stored procedure is called from SmarterPages and AN8 is a Consumer or is Called from POS	
	BEGIN --Begin Else 1
		INSERT INTO @ITEMTEMPFilter
		SELECT 
			IM2.IMITM AS ShortItemNumber,
			IM2.IMLITM AS LongItemNumber,
			IM2.IMAITM AS AuxItemNumber,		
			0 AS RefProductNumber,
			IM2.IMDSC1 AS Description1,
			IM2.IMDSC2 AS Description2,		
			IM2.IMUOM1 AS PrimaryUnitOfMeasure,
			IM2.IMUOM2 AS SecondaryUnitOfMeasure,
			IM2.IMUOM4 AS PricingUnitOfMeasure,
			IM2.IMSTKT AS StockingType,
			IM2.IMLNTY AS LineType,
			C.LFIVI AS InventoryFlag
		FROM 
			[SCDATA].F4104 A						--CROSS REFERENCE
			INNER JOIN [SCDATA].F4101 IM1		--ITEM MASTER JOIN
			ON IM1.IMITM = A.IVITM
			INNER JOIN [SCDATA].F4101 IM2		--ITEM MASTER JOIN
			ON IM2.IMLITM = A.IVCITM
			INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
			ON C.LFLNTY = IM2.IMLNTY			
		WHERE 
			A.IVITM = @ShortItemNumber
			AND A.IVXRT = @RefType
			AND ((@CurrentJulianDate >=A.IVEFTJ AND @CurrentJulianDate <= A.IVEXDJ) OR
				 (@CurrentJulianDate >=A.IVEFTJ AND A.IVEXDJ = 0))
		ORDER BY IM2.IMLITM ASC		
	 END --END ELSE 1	
	
	INSERT INTO @ITEMTEMPPaging (ItemNumber, LongItemNumber, AuxItemNumber, RefProductNumber, Description1, Description2,
	PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, StockingType, LineType, InventoryFlag )
	SELECT 
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.RefProductNumber,
		A.Description1,
		A.Description2,
		A.PrimaryUnitOfMeasure,
		A.SecondaryUnitOfMeasure,
		A.PricingUnitOfMeasure,
		A.StockingType,
		A.LineType,
		A.InventoryFlag 
	FROM @ITEMTEMPFilter A
		INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
		ON B.IBITM = A.ItemNumber 
		INNER JOIN [SCDATA].FQ679910 E	--BrachPlant by Installation
		ON E.BI$9INID = @InstallationID
		AND E.BIMCU = B.IBMCU
	WHERE 
		A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')			--Inventory Interface
	UNION
	SELECT 
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.RefProductNumber,
		A.Description1,
		A.Description2,
		A.PrimaryUnitOfMeasure,
		A.SecondaryUnitOfMeasure,
		A.PricingUnitOfMeasure,
		A.StockingType,
		A.LineType,
		A.InventoryFlag 
	FROM @ITEMTEMPFilter A
	WHERE 
		A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')			--Inventory Interface
	ORDER BY LongItemNumber ASC
	
	-------------------------------------------------------
	-- Obtain the total count of the result
	-------------------------------------------------------
	SELECT @TotalRowCount = COUNT(*)
	  FROM @ITEMTEMPPaging

	-------------------------------------------------------
	-- Validate if paging is not required	
	IF(@PageIndex = 0 OR @PageSize = 0)
	BEGIN
		-- Set the first row to be selected
		SET @ROWSTART = 1
		-- Set the last row to be selected
		SET @ROWEND = @TotalRowCount
	END
	ELSE
	BEGIN		
		-- Set the first row to be selected
		SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
		-- Set the last row to be selected
		SET @ROWEND = @PageIndex * @PageSize	
	END
	-- Select the rows from temporary table between the
	-- range of @ROWSTART ans @ROWEND
	-------------------------------------------------------
	IF (@RetrieveWebContentInfo = 1) BEGIN
		SELECT 	
			ItemNumber,
			LongItemNumber,
			AuxItemNumber,	
			RefProductNumber,
			ISNULL(ContenDesc.DESC1,Description1)	AS Description1,
			ISNULL(ContenDesc.DESC2,Description2)	AS Description2,
			ContenDesc.URL	AS URL,	
			PrimaryUnitOfMeasure,
			SecondaryUnitOfMeasure,
			PricingUnitOfMeasure,
			StockingType,
			LineType,
			InventoryFlag 
		FROM @ITEMTEMPPaging A
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.ItemNumber,@LangPref,0) ContenDesc 
		WHERE nID >=  @ROWSTART AND nID <= @ROWEND			
	END
	ELSE BEGIN
		SELECT 	
			ItemNumber,
			LongItemNumber,
			AuxItemNumber,	
			RefProductNumber,
			Description1 AS Description1, /* Retrieve Description 1 for Tracking lines */
			N'' AS Description2,
			N'' AS URL,	
			PrimaryUnitOfMeasure,
			SecondaryUnitOfMeasure,
			PricingUnitOfMeasure,
			StockingType,
			LineType,
			InventoryFlag 
		FROM @ITEMTEMPPaging A
		WHERE nID >=  @ROWSTART AND nID <= @ROWEND
	END
GO 
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemCrossRefCodes'))
	BEGIN
		DROP  PROCEDURE  [DBO].INV_GetItemCrossRefCodes
	END
GO
-- #desc						Returns the value of the cross reference
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @ItemNumber		    Item Number
-- #param Type			        Cross reference Type

CREATE Procedure [DBO].INV_GetItemCrossRefCodes

	@ItemNumber	 FLOAT,
	@Type        NVARCHAR(2)
AS
SET NOCOUNT ON

SELECT IVCITM as Code FROM [SCDATA].F4104 WHERE IVITM=@ItemNumber AND IVXRT=@Type

GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemCrossReferenceList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemCrossReferenceList
	END

GO 

-- #desc						Get Item Cross Ref List
-- #bl_class					Premier.Inventory.ItemCrossReferenceList.cs	
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @AddressNumber		Address Number
-- #param @DisplayItemNumber	Display Item Number
-- #param @RefProductNumber		Reference Product Number
-- #param @Description			Description
-- #param @DataFilterMode		Data Filter Mode
-- #param @PageIndex			Page Index
-- #param @PageSize				Page Size
-- #param @SortBy				Column to filter by ItemNumber, YourProductNumber, Description, DateFrom, DateTo
-- #param @SortDir				Direction to filter (A = Ascendent, D = Descendent) 

CREATE Procedure [DBO].INV_GetItemCrossReferenceList
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@DisplayItemNumber	NVARCHAR(25),
	@RefProductNumber	NVARCHAR(25), 
	@Description		NVARCHAR(60),
	@DataFilterMode		NVARCHAR(2),
	@DisplayItemSetting NVARCHAR(4),
	@PageIndex			FLOAT,
    @PageSize			FLOAT,
	@SortBy				NVARCHAR(40),
	@SortDir			NVARCHAR(3)
AS
BEGIN
	
	DECLARE @today INTEGER
	SET @today = [DBO].CMM_GetCurrentJulianDate (GETDATE())
	
	DECLARE @SHORTITEMNUMBER FLOAT
	SET @SHORTITEMNUMBER = NULL
	
	-- Gets Cust Cross Type
	DECLARE @CustCrossRefType	NVARCHAR(256)
	DECLARE @CustCrossConstantINID NVARCHAR(3)
	SET @CustCrossConstantINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossConstantINID, @CustCrossRefType out
	
	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @SORT_DYNAMIC			NVARCHAR(40)
	DECLARE @SORTDIR_DYNAMIC		NVARCHAR(5)
	DECLARE @DISPLAYITEM_DYNAMIC	NVARCHAR(20)

	/* Resolve order by Item number dynamic */
	SET @DISPLAYITEM_DYNAMIC = CASE @DisplayItemSetting 
		WHEN 'LITM' THEN ' LongItemNumber ' 
		WHEN 'AITM' THEN ' AuxItemNumber ' 
		ELSE ' ShortItemNumber ' 
	END;

	/* Dynamic sort direction statement */
    SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

    /* Dynamic sort statement */
    SET @SORT_DYNAMIC = CASE @SortBy 
        WHEN 'ProductNumber' THEN @DISPLAYITEM_DYNAMIC + @SORTDIR_DYNAMIC
        WHEN 'YourProductNumber' THEN 'RefProductNumber' + @SORTDIR_DYNAMIC 
        WHEN 'Description' THEN 'Description1' + @SORTDIR_DYNAMIC 
        WHEN 'DateFrom' THEN 'EffectiveDate' + @SORTDIR_DYNAMIC
        WHEN 'DateTo' THEN 'ExpirationDate' + @SORTDIR_DYNAMIC
        ELSE @DISPLAYITEM_DYNAMIC + ' ASC'
    END

	IF(@DisplayItemNumber <> '*') BEGIN 
		IF (@DisplayItemSetting = 'ITM') BEGIN
				IF (ISNUMERIC(@DisplayItemNumber) = 1) BEGIN
					SET @SHORTITEMNUMBER = CAST(ISNULL(@DisplayItemNumber, '0') AS FLOAT)
				END
			END
		ELSE
			IF @DisplayItemSetting = 'LITM' BEGIN
				SET @SHORTITEMNUMBER = ISNULL((SELECT IMITM FROM [SCDATA].F4101 WHERE IMLITM = @DisplayItemNumber), 0)
			END
			ELSE
				BEGIN
					SET @SHORTITEMNUMBER = ISNULL((SELECT IMITM FROM [SCDATA].F4101 WHERE IMAITM = @DisplayItemNumber), 0)
				END
	END
		
	IF (@DisplayItemNumber = '*' OR @SHORTITEMNUMBER <> 0)
	BEGIN
		
		/* Dynamic query conditions */
		IF (@SHORTITEMNUMBER IS NOT NULL) BEGIN
			SET @WHERE_DYNAMIC += N' AND IVITM = @SHORTITEMNUMBER'
		END

		IF (@RefProductNumber <> '*') BEGIN
			SET @WHERE_DYNAMIC += N' AND IVCITM LIKE ''%'' + @RefProductNumber + ''%'''
		END

		IF (@Description <> '*') BEGIN
			SET @WHERE_DYNAMIC += N' AND (RTRIM(IVDSC1) + '' '' + LTRIM(IVDSC2) LIKE ''%'' + @Description + ''%'')'
		END

		IF (@DataFilterMode <> '*') BEGIN
			SET @WHERE_DYNAMIC += CASE @DataFilterMode
									WHEN 'E' THEN N' AND IVEXDJ < @today'
									WHEN 'A' THEN N' AND @today >= IVEFTJ AND @today <= IVEXDJ'
									WHEN 'F' THEN N' AND IVEFTJ > @today' END
		END

		/* Dynamic query */
		SET @SQL_DYNAMIC = N'							
		SELECT 
			ShortItemNumber,
			LongItemNumber,
			AuxItemNumber,
			RefProductNumber,
			CrossReferenceType,
			Description1,
			Description2,
			EffectiveDate,
			ExpirationDate,
			TotalRowCount
		FROM
			(SELECT 
				CrossReference.*,
				ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM,
				COUNT(*) OVER () AS TotalRowCount 
			FROM
			(SELECT
				IVITM AS ShortItemNumber,
				IVLITM AS LongItemNumber,
				IVAITM AS AuxItemNumber,
				IVCITM AS RefProductNumber,
				IVXRT  AS CrossReferenceType,
				IVDSC1 AS Description1,
				IVDSC2 AS Description2,
				IVEFTJ AS EffectiveDate,
				IVEXDJ AS ExpirationDate
			FROM 
				[SCDATA].F4104 						/*CROSS REFERENCE*/
			WHERE 
				IVAN8 = @AddressNumber AND IVXRT = @CustCrossRefType ' + @WHERE_DYNAMIC + ' ) CrossReference) CrossReference2
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) ';
	END
	
	EXECUTE sp_executesql @SQL_DYNAMIC, N'
	@SHORTITEMNUMBER	FLOAT,
	@AddressNumber		FLOAT,
	@RefProductNumber	NVARCHAR(25), 
	@Description		NVARCHAR(30),
	@PageIndex			FLOAT,
    @PageSize			FLOAT,
	@today				INTEGER,
	@CustCrossRefType	NVARCHAR(256)',
	@SHORTITEMNUMBER = @SHORTITEMNUMBER,
	@AddressNumber = @AddressNumber,
	@RefProductNumber = @RefProductNumber,
	@Description = @Description,	
	@PageIndex = @PageIndex,		
	@PageSize = @PageSize,		
	@today = @today,
	@CustCrossRefType = @CustCrossRefType
	
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemCrossRefInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemCrossRefInfo
	END

GO 

-- #desc						Get Item Cross Ref Info
-- #bl_class					Premier.Inventory.ItemCrossRefInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @AddressNumber		Address Number
-- #param @ShortItemNumber		Short Item Number
-- #param @RefProductNumber		Reference Product Number
-- #param @EffectiveOnly		Effective Only 


						
CREATE Procedure [DBO].INV_GetItemCrossRefInfo
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@ShortItemNumber	FLOAT,
	@RefProductNumber	NVARCHAR(25),
	@EffectiveOnly		FLOAT
AS
	
	-- Gets Cust Cross Type
	DECLARE @CustCrossRefType	NVARCHAR(256)
	DECLARE @CustCrossConstantINID NVARCHAR(3)
	SET @CustCrossConstantINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossConstantINID, @CustCrossRefType out
    
    DECLARE @CurrentJulianDate NUMERIC(18, 0)
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
	IF (@ShortItemNumber IS NOT NULL) BEGIN
		SELECT 
			IVITM AS ShortItemNumber,
			IVLITM AS LongItemNumber,
			IVAITM AS AuxItemNumber,
			IVCITM AS RefProductNumber,
			IVXRT  AS CrossReferenceType,
			IVDSC1 AS Description1,
			IVDSC2 AS Description2,
			IVEFTJ AS EffectiveDate,
			IVEXDJ AS ExpirationDate
		FROM 
			[SCDATA].F4104 						--CROSS REFERENCE
		WHERE  
			(IVITM = @ShortItemNumber)
			AND IVAN8 = @AddressNumber
			AND IVXRT = @CustCrossRefType
			AND (@EffectiveOnly = 0 OR (@CurrentJulianDate>= IVEFTJ AND @CurrentJulianDate <= IVEXDJ))
	END
	ELSE BEGIN
		SELECT 
			IVITM AS ShortItemNumber,
			IVLITM AS LongItemNumber,
			IVAITM AS AuxItemNumber,
			IVCITM AS RefProductNumber,
			IVXRT  AS CrossReferenceType,
			IVDSC1 AS Description1,
			IVDSC2 AS Description2,
			IVEFTJ AS EffectiveDate,
			IVEXDJ AS ExpirationDate
		FROM 
			[SCDATA].F4104 						--CROSS REFERENCE
		WHERE 
			IVAN8 = @AddressNumber
			AND IVXRT = @CustCrossRefType
			AND (IVCITM = @RefProductNumber)
			AND (@EffectiveOnly = 0 OR (@CurrentJulianDate>= IVEFTJ AND @CurrentJulianDate <= IVEXDJ))
	END


GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemKitChildren'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemKitChildren
	END

GO

SET QUOTED_IDENTIFIER ON
GO

-- #bl_class					Premier.Inventory.GetItemPublishCommand.cs
-- #desc						Returns kit components
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @ItemNumbersXML		Item Numbers XML


CREATE Procedure [DBO].INV_GetItemKitChildren
(
	@ItemNumbersXML	XML
)
AS
	
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		KT.IXITM	AS ComponentItemNumber
	FROM 
		[SCDATA].F3002 KT 
	INNER JOIN @ItemNumbersXML.nodes('/items/item') AS items(item)
		ON IXKIT = items.item.value('.','FLOAT')  
	WHERE
		IXTBM = 'M'
		AND IXOPTK <> 'F'
	UNION
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		KT.IXITM	AS ComponentItemNumber
	FROM 
		[SCDATA].F3002 KT
	WHERE KT.IXKIT in (SELECT IXITM FROM [SCDATA].F3002 A 
						INNER JOIN @ItemNumbersXML.nodes('/items/item') AS items(item)
										ON IXKIT = items.item.value('.','FLOAT')  
						WHERE IXOPTK ='F'
							AND IXTBM = 'M')
							
	ORDER BY ParentItemNumber;
GO
SET QUOTED_IDENTIFIER OFF 
GO
    IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemLotList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemLotList
	END

GO

-- #desc				
-- #bl_class				Premier.Inventory.ItemLotList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ItemNumber		Item Number
-- #param @BranchPlant		Branch Plant
-- #param @LotNumber		Lot/Serial Number

CREATE PROCEDURE [DBO].INV_GetItemLotList
(
    @ItemNumber			FLOAT,
    @BranchPlant		NVARCHAR(12),
    @LotNumber			NVARCHAR(60)    
)
AS
	SELECT 
		LIITM	AS	ItemNumber,
		LIMCU	AS	BranchPlant,
		LILOCN	AS	Location,
		LILOTN	AS	LotNumber,
		LILOTS	AS	LotStatus
	FROM [SCDATA].F41021
	WHERE LIITM = @ItemNumber 
		AND (@BranchPlant = '*' OR LIMCU = @BranchPlant)
		AND (@LotNumber = '*' OR LILOTN LIKE '%' + @LotNumber  + '%')
	


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemLotRequiredFlag'))
BEGIN
	DROP  Procedure  [DBO].INV_GetItemLotRequiredFlag
END

GO

-- #desc					Return Lot Required Flag from F4201.IMSRCE
-- #bl_class				Premier.Inventory.GetItemLotRequiredCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ItemNumber		Item Number
-- #param @BranchPlant		Branch Plant

CREATE PROCEDURE [DBO].INV_GetItemLotRequiredFlag
(
    @ItemNumber		FLOAT,
    @BranchPlant	NVARCHAR(12)
)
AS
	SELECT 
		IBSRCE AS LotRequiredFlag
	FROM [SCDATA].F4102
	WHERE IBITM = @ItemNumber
		AND	LTRIM(RTRIM(IBMCU)) = LTRIM(RTRIM(@BranchPlant))
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemMasterBasicInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemMasterBasicInfo
	END
GO 

-- #desc							Gets item info by item number
-- #bl_class						Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A				

-- #param @InstallationID			Installation Id
-- #param @ShortItemNumber			Short Item Number to Search For
-- #param @LongItemNumber			Long Item Number to Search For
-- #param @AuxItemNumber			Aux Item Number to Search For

CREATE Procedure [DBO].INV_GetItemMasterBasicInfo
	@InstallationID			NVARCHAR(3) ,
	@ShortItemNumber		FLOAT = NULL,
	@LongItemNumber			NVARCHAR(25), 
	@AuxItemNumber			NVARCHAR(25)
AS

BEGIN
	DECLARE @InventoryFlag			NVARCHAR(1)
	 
	IF (@ShortItemNumber IS NULL OR @ShortItemNumber = 0 )
	 BEGIN 
		IF (@LongItemNumber <> '*' )
			BEGIN 
			SELECT @ShortItemNumber = A.IMITM 	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMLITM = @LongItemNumber
		
		END
	
	ELSE IF (@AuxItemNumber <> '*')
		BEGIN 
			SELECT @ShortItemNumber = A.IMITM	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMAITM = @AuxItemNumber 
 
		END 
	END
	
	
	--First Resolve the inventory flag of the item.
	SET @InventoryFlag = 
	(SELECT TOP 1 B.LFIVI				/*Inventory Interface*/
	FROM [SCDATA].F4101 A			 /*Item Master*/
	INNER JOIN [SCDATA].F40205 B			/*Line Type Control Table*/
	ON B.LFLNTY = A.IMLNTY
	WHERE 
	(A.IMITM = @ShortItemNumber))

	BEGIN
		SELECT TOP 1
			@InstallationID InstallationID,
			'' BranchPlant, 
			'' BranchPlantDesc, 
			A.IMITM ItemNumber, 
			A.IMLITM LongItemNumber, 
			A.IMAITM AuxItemNumber,
			A.IMDSC1 Description1,
			A.IMDSC2 Description2,
			'' URL,
			A.IMUOM1 PrimaryUnitOfMeasure,
			A.IMUOM2 SecondaryUnitOfMeasure,
			A.IMUOM4 PricingUnitOfMeasure,
			A.IMSRTX SearchItemText,
			A.IMSTKT StockingType ,
			A.IMLNTY LineType ,
			@InventoryFlag AS InventoryFlag,
			A.IMIFLA AS ItemFlashMessage,
			A.IMTMPL AS MatrixTemplate,
			A.IMMIC AS MatrixControlled,
			0 AS MatrixParentItemNumber,
			0    AS AddressNumber,
			''	AS	AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A					/*Item Master*/
		WHERE 
			(A.IMITM = @ShortItemNumber)
	END
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemMasterBranchList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemMasterBranchList
	END
GO

-- #desc							Read Item Master list with branchplant information
-- #bl_class						Premier.Inventory.ItemMasterBranchList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID.
-- #param @BranchPlant				Branch Plant (mcu)
-- #param @ItemNumber				Short Item Number
-- #param @LongItemNumber			Long Item Number
-- #param @AuxItemNumber			Aux Item Number
-- #param @RetrieveWebContentInfo	Retrieve Web Content Info

CREATE Procedure [DBO].INV_GetItemMasterBranchList
	@InstallationID NVARCHAR(3) ,
	@BranchPlant    NVARCHAR(12) = NULL,
	@ItemNumber		FLOAT		= NULL,
	@LongItemNumber NVARCHAR(25) = NULL,
	@AuxItemNumber	NVARCHAR(25) = NULL,
	@RetrieveWebContentInfo	INT,
	@LangPref		NVARCHAR(2)

   AS
	
    SET NOCOUNT ON
	
		IF (@ItemNumber IS NULL OR @ItemNumber = 0 )
	 BEGIN 
		IF (@LongItemNumber <> '*' )
			BEGIN 
			SELECT @ItemNumber = A.IMITM 	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMLITM = @LongItemNumber
		
		END
	
	ELSE IF (@AuxItemNumber <> '*')
		BEGIN 
			SELECT @ItemNumber = A.IMITM	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMAITM = @AuxItemNumber 
 
		END 
	END
	
	IF (@RetrieveWebContentInfo = 1) BEGIN
		SELECT 
			E.BI$9INID InstallationID, 
			B.IBMCU BranchPlant, 
			C.MCDL01 BranchPlantDesc, 
			A.IMITM ItemNumber, 
			A.IMLITM LongItemNumber, 
			A.IMAITM AuxItemNumber,
			ISNULL(ContenDesc.DESC1,A.IMDSC1) AS Description1,
			ISNULL(ContenDesc.DESC2,A.IMDSC2) AS Description2,
			ContenDesc.URL,
			A.IMUOM1 PrimaryUnitOfMeasure,
			A.IMUOM2 SecondaryUnitOfMeasure,
			A.IMUOM4 PricingUnitOfMeasure,
			A.IMSRTX SearchItemText,
			A.IMSTKT StockingType ,
			A.IMLNTY LineType ,
			D.LFIVI	InventoryFlag,
			A.IMIFLA ItemFlashMessage,
			A.IMTMPL MatrixTemplate,
			A.IMMIC  MatrixControlled,
			0 AS MatrixParentItemNumber,
		   C.MCAN8	AddressNumber,
		   E.BILCNF	AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A						/*Item Master*/
			OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.IMITM,@LangPref,0) ContenDesc
			INNER JOIN [SCDATA].F4102 B			/*Item Master by BranchPlant*/
			ON B.IBITM = A.IMITM
			INNER JOIN [SCDATA].F0006 C			/*Branch Master*/
			ON C.MCMCU = B.IBMCU
			INNER JOIN [SCDATA].FQ679910 E		/* BrachPlant by Installation*/
			ON E.BI$9INID = @InstallationID
			AND E.BIMCU = B.IBMCU
			INNER JOIN [SCDATA].F40205 D			/*Line Type Control Table*/
			ON D.LFLNTY = A.IMLNTY
		WHERE 
			(@BranchPlant = '*' OR B.IBMCU = @BranchPlant) AND 
			(A.IMITM = @ItemNumber) 
	END
	ELSE BEGIN
		SELECT 
			E.BI$9INID InstallationID, 
			B.IBMCU BranchPlant, 
			C.MCDL01 BranchPlantDesc, 
			A.IMITM ItemNumber, 
			A.IMLITM LongItemNumber, 
			A.IMAITM AuxItemNumber,
			A.IMDSC1 AS Description1,   /* Retrieve Description 1 for Tracking lines */
			N'' AS Description2,
			N''	AS URL,
			A.IMUOM1 PrimaryUnitOfMeasure,
			A.IMUOM2 SecondaryUnitOfMeasure,
			A.IMUOM4 PricingUnitOfMeasure,
			A.IMSRTX SearchItemText,
			A.IMSTKT StockingType ,
			A.IMLNTY LineType ,
			D.LFIVI	InventoryFlag,
			A.IMIFLA ItemFlashMessage,
			A.IMTMPL MatrixTemplate,
			A.IMMIC  MatrixControlled,
			0 AS MatrixParentItemNumber,
		   C.MCAN8	AddressNumber,
		   E.BILCNF	AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A						/*Item Master*/
		INNER JOIN [SCDATA].F4102 B			/*Item Master by BranchPlant*/
			ON B.IBITM = A.IMITM
		INNER JOIN [SCDATA].F0006 C			/*Branch Master*/
			ON C.MCMCU = B.IBMCU
		INNER JOIN [SCDATA].FQ679910 E		/* BrachPlant by Installation*/
			ON E.BI$9INID = @InstallationID
			AND E.BIMCU = B.IBMCU
		INNER JOIN [SCDATA].F40205 D			/*Line Type Control Table*/
			ON D.LFLNTY = A.IMLNTY
		WHERE 
			(@BranchPlant = '*' OR B.IBMCU = @BranchPlant) AND 
			(A.IMITM = @ItemNumber);
	END
GO
               
   
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemMasterContentList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemMasterContentList
	END
GO

-- #desc							Read Item Master Table with content information by Installation, read only info
-- #bl_class						Premier.Inventory.ItemMasterContentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID.
-- #param @FilterTerm				Free Form Search Text
-- #param @DesignStatus 			FLOAT, -- Null = ALL, 0 = Design , 1 = Live
-- #param @WithContent				NVARCHAR(2), -- * = Any, Y = Yes, N = No.
-- #param @PageIndex				Paging - Current page
-- #param @PageSize					Paging - Items to be shown
-- #param @TotalRowCount			Paging - Quantity of rows, result of search filter.

CREATE Procedure [DBO].INV_GetItemMasterContentList
(	
	@InstallationID		NVARCHAR(3),
	@FilterTerm			NVARCHAR(30),
	@DesignStatus 		FLOAT, -- Null = ALL, 0 = Design , 1 = Live
	@WithContent		NVARCHAR(2), -- * = Any, Y = Yes, N = No.
	@PageIndex			FLOAT,
    @PageSize			FLOAT,
    @TotalRowCount		int OUTPUT
)
AS
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------    
	DECLARE @FilterTable TABLE
	(		
		ItemNumber					FLOAT, 
		LongItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		AuxItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		Description1				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description2				NVARCHAR(30) collate DATABASE_DEFAULT,
		Description3				NVARCHAR(30) collate DATABASE_DEFAULT,
		PrimaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SecondaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		PricingUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SearchItemText				NVARCHAR(30) collate DATABASE_DEFAULT, 
		StockingType				NVARCHAR(1) collate DATABASE_DEFAULT, 
		LineType					NVARCHAR(2) collate DATABASE_DEFAULT, 
		InventoryFlag				NVARCHAR(1) collate DATABASE_DEFAULT,
		ItemFlashMessage			NVARCHAR(2) collate DATABASE_DEFAULT,
		ContentInstallationID 		NVARCHAR(3) collate DATABASE_DEFAULT,
		DesignStatus				FLOAT,
		ContainsContent				NVARCHAR(2) collate DATABASE_DEFAULT
	)
	-------------------------------------------------------
	-- Define the table to do the paging
	-------------------------------------------------------    
	DECLARE @PagingTable TABLE
	(
		nID  						INT IDENTITY,
		ItemNumber					FLOAT, 
		LongItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		AuxItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		Description1				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description2				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description3				NVARCHAR(30) collate DATABASE_DEFAULT,
		PrimaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SecondaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		PricingUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SearchItemText				NVARCHAR(30) collate DATABASE_DEFAULT, 
		StockingType				NVARCHAR(1) collate DATABASE_DEFAULT, 
		LineType					NVARCHAR(2) collate DATABASE_DEFAULT, 
		InventoryFlag				NVARCHAR(1) collate DATABASE_DEFAULT,
		ItemFlashMessage			NVARCHAR(2) collate DATABASE_DEFAULT,
		ContentInstallationID 		NVARCHAR(3) collate DATABASE_DEFAULT,
		DesignStatus				FLOAT,
		ContainsContent				NVARCHAR(2) collate DATABASE_DEFAULT
	)
	DECLARE @ROWSTART INT
	DECLARE @ROWEND INT
	DECLARE @ItemNumber INT = NULL

	IF( ISNUMERIC(@FilterTerm) = 1 )
	BEGIN
		SET @ItemNumber = CAST ( @FilterTerm AS INT  )
	END
	
	INSERT INTO @FilterTable (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, Description3, PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, ContentInstallationID, DesignStatus, ContainsContent)
	SELECT
		A.IMITM		AS ItemNumber,
		A.IMLITM	AS LongItemNumber,
		A.IMAITM	AS AuxItemNumber,
		ISNULL(B.CHDSC1, ISNULL(D.CHDSC1,A.IMDSC1))	AS Description1,		
		ISNULL(B.CHDSC2, ISNULL(D.CHDSC2,A.IMDSC2))	AS Description2,		
		ISNULL(B.CHDSC3, ISNULL(D.CHDSC3,''))	AS Description3,		
		A.IMUOM1	AS PrimaryUnitOfMeasure,
		A.IMUOM2	AS SecondaryUnitOfMeasure,
		A.IMUOM4	AS PricingUnitOfMeasure,
		A.IMSRTX	AS SearchItemText,
		A.IMSTKT	AS StockingType,
		A.IMLNTY	AS LineType,
		C.LFIVI		AS InventoryFlag,
		A.IMIFLA	AS ItemFlashMessage,
		ISNULL(B.CH$9INID,'***') AS ContentInstallationID,
		ISNULL(B.CH$9DS,ISNULL(D.CH$9DS, 0))	AS DesignStatus, --2 = Undefined 
		CASE WHEN (B.CHITM IS NOT NULL OR D.CHITM IS NOT NULL) THEN 'Y' ELSE 'N' END AS ContainsContent
	FROM
		[SCDATA].F4101 A						--Item Master
		INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
		ON C.LFLNTY = A.IMLNTY		
		LEFT OUTER JOIN [SCDATA].FQ67410 AS B
		ON B.CH$9INID = @InstallationID
		AND B.CHITM = A.IMITM
		LEFT OUTER JOIN [SCDATA].FQ67410 AS D
		ON D.CH$9INID = '***'
		AND D.CHITM = A.IMITM
	WHERE 
		(@ItemNumber IS NOT NULL AND A.IMITM = @ItemNumber)-- Item Number filter
		OR (@FilterTerm = '*'						  -- DB engine do not short-circuiting so it includes more posible matches here
			OR A.IMLITM LIKE '%' + @FilterTerm + '%'  -- Second Item Number filter
			OR A.IMAITM LIKE '%' + @FilterTerm + '%'  -- Third Item Number filter
			OR ISNULL(B.CHDSC1, ISNULL(D.CHDSC1,A.IMDSC1)) LIKE '%' + @FilterTerm + '%'  -- Description filter
			OR ISNULL(B.CHDSC2, ISNULL(D.CHDSC2,A.IMDSC2)) LIKE '%' + @FilterTerm + '%'  -- Description filter
			OR ISNULL(B.CHDSC3, ISNULL(D.CHDSC3,'')) LIKE '%' + @FilterTerm + '%'  -- Description filter
			OR A.IMSRTX LIKE '%' + @FilterTerm + '%' )-- Search Text filter
		
	ORDER BY A.IMLITM ASC

	--If DesignStatus is not specified we prefer Design over Live.
    IF @DesignStatus IS NULL BEGIN 
            DELETE FROM @FilterTable
            WHERE ItemNumber IN (SELECT ItemNumber 
										FROM @FilterTable  S
										GROUP BY ItemNumber 
										HAVING COUNT(ItemNumber) > 1)
            AND DesignStatus = 0 --live records
    END

	INSERT INTO @PagingTable (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2,Description3,PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, ContentInstallationID, DesignStatus, ContainsContent)
	SELECT DISTINCT 
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,		
		A.Description3,	
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.ContentInstallationID,
		A.DesignStatus,
		A.ContainsContent
	FROM
		@FilterTable A							
		INNER JOIN [SCDATA].FQ679910 E		--BranchPlant by Installation
		ON E.BI$9INID = @InstallationID 		
		INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
		ON B.IBITM = A.ItemNumber 
		AND B.IBMCU = E.BIMCU 
	WHERE 
		(A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')			--Inventory Interface
		AND (@DesignStatus IS NULL OR A.DesignStatus = @DesignStatus)
		AND (@WithContent = '*' OR A.ContainsContent = @WithContent)
	UNION ALL
	SELECT  
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,
		A.Description3,	
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.ContentInstallationID,
		A.DesignStatus,
		A.ContainsContent
	FROM
		@FilterTable A						
	WHERE 
		(A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')				--Inventory Interface
		AND (@DesignStatus IS NULL OR A.DesignStatus = @DesignStatus)
		AND (@WithContent = '*' OR A.ContainsContent = @WithContent)
	
	-------------------------------------------------------
	-- Obtain the total count of the result
	-------------------------------------------------------
	SELECT @TotalRowCount = COUNT(*)
	FROM @PagingTable

	-------------------------------------------------------
	-- Validate if paging is not required
	IF(@PageIndex = 0 OR @PageSize = 0)
	BEGIN
		-- Set the first row to be selected
		SET @ROWSTART = 1
		-- Set the last row to be selected
		SET @ROWEND = @TotalRowCount
	END
	ELSE
	BEGIN		
		-- Set the first row to be selected		
		SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
		-- Set the last row to be selected
		SET @ROWEND = @PageIndex * @PageSize	
	END

	-------------------------------------------------------
	-- Select the rows from temporary table between the
	-- range of @ROWSTART and @ROWEND
	-------------------------------------------------------
	SELECT 	
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,
		A.Description3,
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag,
		A.ItemFlashMessage,
		A.ContentInstallationID,
		A.DesignStatus,
		A.ContainsContent
	FROM @PagingTable A
	WHERE A.nID >= @ROWSTART AND A.nID  <= @ROWEND	
	
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemMasterInfoUnknown'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemMasterInfoUnknown
	END

GO 

-- #desc									Gets item info by item number
-- #bl_class								Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies							INV_GetItemMasterInfo
-- #db_references							N/A

-- #param @InstallationID					Installation Id
-- #param @BranchPlant						Specific Branch Plant (mcu)
-- #param @UnknownItemNumber				Item Number to Search For
-- #param @FirstSearchCriteria				First Search Criteria
-- #param @SecondSearchCriteria				Second Search Criteria
-- #param @ThirdSearchCriteria				Third Search Criteria
-- #param @RetrieveWebContentInfo			if value=1 then return values of web content item, value =0 return the information from Item master

CREATE Procedure [DBO].INV_GetItemMasterInfoUnknown
	@InstallationID				NVARCHAR(3) ,
	@BranchPlant				NVARCHAR(12),
	@UnknownItemNumber			NVARCHAR(25),
	@FirstSearchCriteria		FLOAT,
	@SecondSearchCriteria		FLOAT, 
	@ThirdSearchCriteria		FLOAT,
	@RetrieveWebContentInfo		FLOAT,
	@LangPref					NVARCHAR(2)
AS

BEGIN

	CREATE TABLE #ITEMTEMP (
		InstallationID NVARCHAR(3) collate DATABASE_DEFAULT,
		BranchPlant NVARCHAR(12) collate DATABASE_DEFAULT,
		BranchPlantDesc NVARCHAR(30) collate DATABASE_DEFAULT, 
		ItemNumber 	FLOAT,
		LongItemNumber 	NVARCHAR(25) collate DATABASE_DEFAULT,
		AuxItemNumber	NVARCHAR(25) collate DATABASE_DEFAULT,
		Description1	NVARCHAR(30) collate DATABASE_DEFAULT,
		Description2	NVARCHAR(30) collate DATABASE_DEFAULT,
		URL				NVARCHAR(256) collate DATABASE_DEFAULT,
		PrimaryUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		SecondaryUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		PricingUnitOfMeasure NVARCHAR(2) collate DATABASE_DEFAULT,
		SearchItemText NVARCHAR(30) collate DATABASE_DEFAULT,
		StockingType NVARCHAR(1) collate DATABASE_DEFAULT,
		LineType NVARCHAR(2) collate DATABASE_DEFAULT,
		InventoryFlag NVARCHAR(1) collate DATABASE_DEFAULT,
		ItemFlashMessage NVARCHAR(2) collate DATABASE_DEFAULT,
		MatrixTemplate NVARCHAR(20) collate DATABASE_DEFAULT,
		MatrixControlled NVARCHAR(1) collate DATABASE_DEFAULT,
		MatrixParentItemNumber 	FLOAT,
		AddressNumber FLOAT,
		AllowPickup NVARCHAR(1) collate DATABASE_DEFAULT,
		CYCL NVARCHAR(3) collate DATABASE_DEFAULT,
		PRP0 NVARCHAR(6) collate DATABASE_DEFAULT,
		PRP1 NVARCHAR(3) collate DATABASE_DEFAULT,
		PRP2 NVARCHAR(3) collate DATABASE_DEFAULT,
		PRP3 NVARCHAR(3) collate DATABASE_DEFAULT,
		PRP4 NVARCHAR(3) collate DATABASE_DEFAULT,
		PRP5 NVARCHAR(3) collate DATABASE_DEFAULT,
		PRP6 NVARCHAR(6) collate DATABASE_DEFAULT,
		PRP7 NVARCHAR(6) collate DATABASE_DEFAULT,
		PRP8 NVARCHAR(6) collate DATABASE_DEFAULT,
		PRP9 NVARCHAR(6) collate DATABASE_DEFAULT,
		SHCM NVARCHAR(3) collate DATABASE_DEFAULT,
		SHCN NVARCHAR(3) collate DATABASE_DEFAULT,
		SRP0 NVARCHAR(6) collate DATABASE_DEFAULT,
		SRP1 NVARCHAR(3) collate DATABASE_DEFAULT,
		SRP2 NVARCHAR(3) collate DATABASE_DEFAULT,
		SRP3 NVARCHAR(3) collate DATABASE_DEFAULT,
		SRP4 NVARCHAR(3) collate DATABASE_DEFAULT,
		SRP5 NVARCHAR(3) collate DATABASE_DEFAULT,
		SRP6 NVARCHAR(6) collate DATABASE_DEFAULT,
		SRP7 NVARCHAR(6) collate DATABASE_DEFAULT,
		SRP8 NVARCHAR(6) collate DATABASE_DEFAULT,
		SRP9 NVARCHAR(6) collate DATABASE_DEFAULT
	)
	
	
	SET NOCOUNT ON
	
	-- Get the ITEMNUMBER value constant
	DECLARE @ShortItemNumber FLOAT
	DECLARE @ITEMCONSTANT NVARCHAR(256)
	DECLARE @ItemConstantINID     NVARCHAR(3)
	DECLARE @ShortINCrossRef FLOAT
	DECLARE @ShortInUPC FLOAT
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());
	SET @ItemConstantINID = @InstallationID

	-- *********** FIRST Search Criteria Resolution ************
	IF (@FirstSearchCriteria = 5) -- Search by Universal Product Code 
	BEGIN
		SET @ShortInUPC = (SELECT TOP 1 IMITM AS ShortItemNumber FROM [SCDATA].F4101 WHERE IMUPCN = @UnknownItemNumber)

		INSERT INTO #ITEMTEMP
		EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortInUPC, '*', '*',@RetrieveWebContentInfo,@LangPref
	END
	ELSE IF (@FirstSearchCriteria = 3) -- Search by Cross Reference 
	BEGIN
		EXEC [DBO].CMM_GetConstantValue 'ITM1STXREF', @ItemConstantINID, @ITEMCONSTANT OUT

		SET @ShortINCrossRef = (SELECT TOP 1 IVITM AS ShortItemNumber FROM [SCDATA].F4104 WHERE IVCITM = @UnknownItemNumber AND IVXRT = @ITEMCONSTANT AND @CurrentJulianDate >= IVEFTJ AND @CurrentJulianDate <= IVEXDJ)

		INSERT INTO #ITEMTEMP
		EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortINCrossRef, '*', '*',@RetrieveWebContentInfo,@LangPref
	END
	ELSE IF(@FirstSearchCriteria = 2) -- Search by Third Item Number
	BEGIN
		INSERT INTO #ITEMTEMP
		EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, NULL, '*', @UnknownItemNumber,@RetrieveWebContentInfo,@LangPref
	END
	ELSE IF(@FirstSearchCriteria = 1)-- Search by Second Item Number
	BEGIN
		INSERT INTO #ITEMTEMP
		EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, NULL, @UnknownItemNumber, '*',@RetrieveWebContentInfo,@LangPref
	END
	ELSE -- Search by First Item Number
	BEGIN
		IF (ISNUMERIC(@UnknownItemNumber) = 1)
		BEGIN
			SET @ShortItemNumber = CAST(@UnknownItemNumber as FLOAT)
		 
			INSERT INTO #ITEMTEMP
			EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortItemNumber, '*', '*',@RetrieveWebContentInfo,@LangPref
		END
	END

	-- *********** SECOND Search Criteria Resolution ************
	IF (@@ROWCOUNT = 0)
	 BEGIN
		IF (@SecondSearchCriteria IS NOT NULL)
		BEGIN
			IF (@SecondSearchCriteria = 5) -- Search by Universal Product Code 
			BEGIN
				SET @ShortInUPC = (SELECT TOP 1 IMITM AS ShortItemNumber FROM [SCDATA].F4101 WHERE IMUPCN = @UnknownItemNumber)

				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortInUPC, '*', '*',@RetrieveWebContentInfo,@LangPref
			END
			ELSE IF (@SecondSearchCriteria = 3) -- Search by Cross Reference 
			BEGIN
				EXEC [DBO].CMM_GetConstantValue 'ITM2NTXREF', @ItemConstantINID, @ITEMCONSTANT OUT
				
				SET @ShortINCrossRef = (SELECT TOP 1 IVITM AS ShortItemNumber FROM [SCDATA].F4104 WHERE IVCITM = @UnknownItemNumber AND IVXRT = @ITEMCONSTANT AND @CurrentJulianDate >= IVEFTJ AND @CurrentJulianDate <= IVEXDJ)

				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortINCrossRef, '*', '*',@RetrieveWebContentInfo,@LangPref
			END
			ELSE IF(@SecondSearchCriteria = 2) -- Search by Third Item Number
			BEGIN
				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, NULL, '*', @UnknownItemNumber,@RetrieveWebContentInfo,@LangPref
			END
			ELSE IF(@SecondSearchCriteria = 1)-- Search by Second Item Number
			BEGIN
				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, NULL, @UnknownItemNumber, '*',@RetrieveWebContentInfo,@LangPref
			END
			ELSE -- Search by First Item Number
			BEGIN
				IF (ISNUMERIC(@UnknownItemNumber) = 1)
				 BEGIN
					SET @ShortItemNumber = CAST(@UnknownItemNumber as FLOAT)
				 
					INSERT INTO #ITEMTEMP
					EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortItemNumber, '*', '*',@RetrieveWebContentInfo,@LangPref
				END
			END
		END 
	END	
	ELSE
	BEGIN
		SELECT	*
		FROM	#ITEMTEMP
		
		DROP TABLE #ITEMTEMP

		RETURN
	END
	
	-- *********** THIRD Search Criteria Resolution ************
	IF (@@ROWCOUNT = 0)
	 BEGIN
		IF (@ThirdSearchCriteria IS NOT NULL)
		BEGIN
			IF (@ThirdSearchCriteria = 5) -- Search by Universal Product Code 
			BEGIN
				SET @ShortInUPC = (SELECT TOP 1 IMITM AS ShortItemNumber FROM [SCDATA].F4101 WHERE IMUPCN = @UnknownItemNumber)

				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortInUPC, '*', '*',@RetrieveWebContentInfo,@LangPref
			END
			ELSE IF (@ThirdSearchCriteria = 3) -- Search by Cross Reference 
			BEGIN
				EXEC [DBO].CMM_GetConstantValue 'ITM3RTXREF', @ItemConstantINID, @ITEMCONSTANT OUT
				
				SET @ShortINCrossRef = (SELECT TOP 1 IVITM AS ShortItemNumber FROM [SCDATA].F4104 WHERE IVCITM = @UnknownItemNumber AND IVXRT = @ITEMCONSTANT AND @CurrentJulianDate >= IVEFTJ AND @CurrentJulianDate <= IVEXDJ)

				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortINCrossRef, '*', '*',@RetrieveWebContentInfo,@LangPref
			END
			ELSE IF(@ThirdSearchCriteria = 2) -- Search by Third Item Number
			BEGIN
				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, NULL, '*', @UnknownItemNumber,@RetrieveWebContentInfo,@LangPref
			END
			ELSE IF(@ThirdSearchCriteria = 1)-- Search by Second Item Number
			BEGIN
				INSERT INTO #ITEMTEMP
				EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, NULL, @UnknownItemNumber, '*',@RetrieveWebContentInfo,@LangPref
			END
			ELSE -- Search by First Item Number
			BEGIN
				IF (ISNUMERIC(@UnknownItemNumber) = 1)
				 BEGIN
					SET @ShortItemNumber = CAST(@UnknownItemNumber as FLOAT)
				 
					INSERT INTO #ITEMTEMP
					EXEC [DBO].INV_GetItemMasterInfo @InstallationID, @BranchPlant, @ShortItemNumber, '*', '*',@RetrieveWebContentInfo,@LangPref
				END
			END
			
			SELECT	* FROM	#ITEMTEMP
		
			DROP TABLE #ITEMTEMP

			RETURN
		END 
	END	
	ELSE
	BEGIN
		SELECT	*
		FROM	#ITEMTEMP
		
		DROP TABLE #ITEMTEMP

		RETURN
	END
	
	
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemMasterList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemMasterList
	END
GO
-- #desc							Read Item Master Table by Installation, read only info
-- #bl_class						Premier.Inventory.ItemMasterList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			Installation ID.
-- #param @FilterTerm				Free Form Search Text
-- #param @PageIndex				Paging - Current page
-- #param @PageSize					Paging - Items to be shown
-- #param @TotalRowCount			Paging - Quantity of rows, result of search filter.
-- #param @RetrieveWebContentInfo	if value=1 then return values of web content item, value =0 return the information from Item master

CREATE Procedure [DBO].INV_GetItemMasterList
(	
	@InstallationID		NVARCHAR(3),
	@FilterTerm			NVARCHAR(30),
	@RetrieveWebContentInfo	FLOAT,
	@BranchPlant		NVARCHAR(12),
    @LangPref			NVARCHAR(2),	
	@PageIndex			FLOAT,
    @PageSize			FLOAT,
    @TotalRowCount		int OUTPUT
)
AS
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------    
	DECLARE @FilterTable TABLE
	(		
		ItemNumber					FLOAT,
		LongItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		AuxItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		Description1				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description2				NVARCHAR(30) collate DATABASE_DEFAULT,
		PrimaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SecondaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		PricingUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SearchItemText				NVARCHAR(30) collate DATABASE_DEFAULT, 
		StockingType				NVARCHAR(1) collate DATABASE_DEFAULT, 
		LineType					NVARCHAR(2) collate DATABASE_DEFAULT, 
		InventoryFlag				NVARCHAR(1) collate DATABASE_DEFAULT,
		ItemFlashMessage			NVARCHAR(2) collate DATABASE_DEFAULT,
		MatrixTemplate				NVARCHAR(20) collate DATABASE_DEFAULT,
		MatrixControlled			NVARCHAR(1) collate DATABASE_DEFAULT
	)
	-------------------------------------------------------
	-- Define the table to do the paging
	-------------------------------------------------------    
	DECLARE @PagingTable TABLE
	(
		nID  						INT IDENTITY,
		ItemNumber					FLOAT, 
		LongItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		AuxItemNumber				NVARCHAR(25) collate DATABASE_DEFAULT, 
		Description1				NVARCHAR(30) collate DATABASE_DEFAULT, 
		Description2				NVARCHAR(30) collate DATABASE_DEFAULT, 
		PrimaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SecondaryUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		PricingUnitOfMeasure		NVARCHAR(2) collate DATABASE_DEFAULT, 
		SearchItemText				NVARCHAR(30) collate DATABASE_DEFAULT, 
		StockingType				NVARCHAR(1) collate DATABASE_DEFAULT, 
		LineType					NVARCHAR(2) collate DATABASE_DEFAULT, 
		InventoryFlag				NVARCHAR(1) collate DATABASE_DEFAULT,
		ItemFlashMessage			NVARCHAR(2) collate DATABASE_DEFAULT,
		MatrixTemplate				NVARCHAR(20) collate DATABASE_DEFAULT,
		MatrixControlled			NVARCHAR(1) collate DATABASE_DEFAULT
	)
	DECLARE @ROWSTART INT
	DECLARE @ROWEND INT
	DECLARE @ItemNumber FLOAT

	IF( ISNUMERIC(@FilterTerm) = 1 )
	BEGIN
		SET @ItemNumber = CAST ( @FilterTerm AS FLOAT  )
	END
	
	INSERT INTO @FilterTable (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2,PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, MatrixTemplate, MatrixControlled)
	SELECT
		A.IMITM		AS ItemNumber,
		A.IMLITM	AS LongItemNumber,
		A.IMAITM	AS AuxItemNumber,
		A.IMDSC1	AS Description1,		
		A.IMDSC2	AS Description2,		
		A.IMUOM1	AS PrimaryUnitOfMeasure,
		A.IMUOM2	AS SecondaryUnitOfMeasure,
		A.IMUOM4	AS PricingUnitOfMeasure,
		A.IMSRTX	AS SearchItemText,
		A.IMSTKT	AS StockingType,
		A.IMLNTY	AS LineType,
		C.LFIVI		AS InventoryFlag,
		A.IMIFLA	AS ItemFlashMessage,
		A.IMTMPL	AS MatrixTemplate,
		A.IMMIC		AS MatrixControlled
	FROM
		[SCDATA].F4101 A						--Item Master
		INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
		ON C.LFLNTY = A.IMLNTY		
	WHERE 
		(@ItemNumber IS NOT NULL AND A.IMITM = @ItemNumber)-- Item Number filter
		OR (@FilterTerm = '*'						  -- DB engine do not short-circuiting so it includes more posible matches here
			OR A.IMLITM LIKE '%' + @FilterTerm + '%'  -- Second Item Number filter
			OR A.IMAITM LIKE '%' + @FilterTerm + '%'  -- Third Item Number filter
			OR A.IMDSC1 LIKE '%' + @FilterTerm + '%'  -- Description filter
			OR A.IMDSC2 LIKE '%' + @FilterTerm + '%'  -- Description filter
			OR A.IMSRTX LIKE '%' + @FilterTerm + '%' )-- Search Text filter
	ORDER BY A.IMLITM ASC

	INSERT INTO @PagingTable (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2,PrimaryUnitOfMeasure,
							  SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, 
							  InventoryFlag, ItemFlashMessage, MatrixTemplate, MatrixControlled)
	SELECT DISTINCT 
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,		
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.MatrixTemplate,
		A.MatrixControlled
	FROM
		@FilterTable A							
		INNER JOIN [SCDATA].FQ679910 E	--BranchPlant by Installation
			ON E.BI$9INID = @InstallationID 		
		INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
			ON B.IBITM = A.ItemNumber 
			AND B.IBMCU = E.BIMCU 
	WHERE 
		A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')		/*Inventory Interface -- Stock Items*/
		AND (@BranchPlant = '*' OR E.BIMCU = @BranchPlant)
	UNION ALL
	SELECT  
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.MatrixTemplate,
		A.MatrixControlled
	FROM
		@FilterTable A						
	WHERE 
		A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')				/*Inventory Interface-- Non stock*/
	
	-------------------------------------------------------
	-- Obtain the total count of the result
	-------------------------------------------------------
	SELECT @TotalRowCount = COUNT(*)
	FROM @PagingTable

	-------------------------------------------------------
	-- Validate if paging is not required
	IF(@PageIndex = 0 OR @PageSize = 0)
	BEGIN		
		SET @ROWSTART = 1		
		SET @ROWEND = @TotalRowCount
	END
	ELSE
	BEGIN				
		SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1		
		SET @ROWEND = @PageIndex * @PageSize	
	END

	-------------------------------------------------------
	-- Select the rows from temporary table between the
	-- range of @ROWSTART and @ROWEND
	-------------------------------------------------------
	SELECT 	
		@InstallationID AS InstallationID, 
		'' AS BranchPlant, 
		'' AS BranchPlantDesc, 
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		CASE @RetrieveWebContentInfo
			WHEN 0 THEN A.Description1
			ELSE ISNULL(ContenDesc.DESC1,A.Description1) END
			AS Description1,
		CASE @RetrieveWebContentInfo
			WHEN 0 THEN A.Description2
			ELSE ISNULL(ContenDesc.DESC2,A.Description2) END
			AS Description2,
		CASE @RetrieveWebContentInfo
			WHEN 0 THEN ''
			ELSE ContenDesc.URL END
			AS URL,	
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag,
		A.ItemFlashMessage, 
		A.MatrixTemplate,
		A.MatrixControlled,
		0 AS MatrixParentItemNumber,
		0   AS AddressNumber,
		''	AS AllowPickup,
		''  AS CYCL,
		''  AS PRP0,
		''  AS PRP1,
		''  AS PRP2,
		''  AS PRP3,
		''  AS PRP4,
		''  AS PRP5,
		''  AS PRP6,
		''  AS PRP7,
		''  AS PRP8,
		''  AS PRP9,
		''  AS SHCM,
		''  AS SHCN,
		''  AS SRP0,
		''  AS SRP1,
		''  AS SRP2,
		''  AS SRP3,
		''  AS SRP4,
		''  AS SRP5,
		''  AS SRP6,
		''  AS SRP7,
		''  AS SRP8,
		''  AS SRP9		
				
	FROM @PagingTable A
	OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.ItemNumber,@LangPref,0) ContenDesc 
	WHERE A.nID >= @ROWSTART AND A.nID  <= @ROWEND	
GO
	

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemMatrixChildren'))
BEGIN
	DROP  PROCEDURE  [DBO].INV_GetItemMatrixChildren
END
GO

SET QUOTED_IDENTIFIER ON
GO

-- #bl_class					Premier.Inventory.GetItemPublishCommand.cs
-- #desc						Returns Matrix Children information
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @ItemNumbersXML		Item Numbers XML

CREATE PROCEDURE [DBO].INV_GetItemMatrixChildren
(
	 @ItemNumbersXML	XML
)
AS
BEGIN
	BEGIN --Region Data of Items		

		DECLARE @MatrixItemsTable TABLE (
			itemNumber FLOAT,
			parentItemNumber FLOAT
		)

		/* Gets matrix children and Inserts into @MatrixItemsTable */
		INSERT INTO @MatrixItemsTable (itemNumber, parentItemNumber)
		SELECT 
			A.IMITM, items.item.value('itemNumber[1]','FLOAT')
		FROM @ItemNumbersXML.nodes('/items/item') AS items(item)
		INNER JOIN [SCDATA].F4101 A 
			ON A.IMTMPL = items.item.value('template[1]','NVARCHAR(20)') AND A.IMSEG1 = items.item.value('segment1[1]','NVARCHAR(10)') AND A.IMMIC = '2';

		/* Gets matrix items children */
		SELECT  
			A.itemNumber, 
			A.parentItemNumber,
			B.IMLITM AS LongItemNumber 
		FROM @MatrixItemsTable A
		INNER JOIN [SCDATA].F4101 B
			ON B.IMITM = A.itemNumber

		SELECT 
			NM.parentItemNumber AS MatrixParentItem,
			S0.S0ITM	AS ShortItemNumber,
			S0.S0MRNO	AS RowNumber,
			S0.S0MCNO	AS ColumnNumber,
			S0.S0TMPL	AS Template,
			S0.S0SEG1   AS Segment1,
			S0.S0SGD1   AS Segment1Desc,
			S0.S0SEG2	AS Segment2,
			S0.S0SGD2	AS Segment2Desc,
			S0.S0SEG3	AS Segment3,
			S0.S0SGD3	AS Segment3Desc,
			S0.S0SEG4	AS Segment4,
			S0.S0SGD4	AS Segment4Desc,
			S0.S0SEG5	AS Segment5,
			S0.S0SGD5	AS Segment5Desc,
			S0.S0SEG6	AS Segment6,
			S0.S0SGD6	AS Segment6Desc,
			S0.S0SEG7	AS Segment7,
			S0.S0SGD7	AS Segment7Desc,
			S0.S0SEG8	AS Segment8,
			S0.S0SGD8	AS Segment8Desc,
			S0.S0SEG9	AS Segment9,
			S0.S0SGD9	AS Segment9Desc,
			S0.S0SEG0	AS Segment0,
			S0.S0SGD0	AS Segment0Desc
		FROM [SCDATA].F41008 S0
		INNER JOIN (SELECT DISTINCT itemNumber, parentItemNumber FROM @MatrixItemsTable) NM
			ON NM.itemNumber= S0.S0ITM

		/*Gets Matrix Template Master*/
		;WITH CTE AS (
			SELECT
				MTM.T7TMPL AS Template,
				NM.parentItemNumber AS MatrixParentItem,
				MTM.T7MCU  AS BusinessUnit,
				MTM.T7HSEG AS HorizontalSegment,
				MTM.T7NSEG AS NumberofSegments,
				MTM.T7VSEG AS VerticalSegment,
				MTM.T7TDES AS TemplateDesc,
				MTM.T7SGD0 AS Segment0Desc,
				MTM.T7SGD1 AS Segment1Desc,
				MTM.T7SGD2 AS Segment2Desc,
				MTM.T7SGD3 AS Segment3Desc,
				MTM.T7SGD4 AS Segment4Desc,
				MTM.T7SGD5 AS Segment5Desc,
				MTM.T7SGD6 AS Segment6Desc,
				MTM.T7SGD7 AS Segment7Desc,
				MTM.T7SGD8 AS Segment8Desc,
				MTM.T7SGD9 AS Segment9Desc,
				ROW_NUMBER() OVER(PARTITION BY MTM.T7TMPL, NM.parentItemNumber ORDER BY MTM.T7MCU) AS RNUM
			FROM [SCDATA].F410014 AS MTM
			INNER JOIN [SCDATA].F41008 S0
				ON S0.S0TMPL = MTM.T7TMPL
			INNER JOIN @MatrixItemsTable NM
				ON NM.itemNumber= S0.S0ITM
		)
		SELECT
			A.Template,
			A.MatrixParentItem,
			A.BusinessUnit,
			A.HorizontalSegment,
			A.NumberofSegments,
			A.VerticalSegment,
			A.TemplateDesc,
			A.Segment0Desc,
			A.Segment1Desc,
			A.Segment2Desc,
			A.Segment3Desc,
			A.Segment4Desc,
			A.Segment5Desc,
			A.Segment6Desc,
			A.Segment7Desc,
			A.Segment8Desc,
			A.Segment9Desc
		FROM CTE A
		WHERE RNUM = 1; /* Avoid duplicated records */

	END --End region of Data of Items
	
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemUnitOfMeasureList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemUnitOfMeasureList
	END

GO


-- #desc					Read UOM list by Item
-- #bl_class				Premier.Inventory.ItemUnitOfMeasureList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID		
-- #param @ItemNumber		Short Item Number

CREATE Procedure [DBO].INV_GetItemUnitOfMeasureList
(
	@InstallationID NVARCHAR(3) = null,
	@ItemNumber		FLOAT,
	@LangPref		NVARCHAR(2)		
)
AS

	DECLARE @ItemFlag		AS NVARCHAR(2)
	DECLARE @ItemPrimaryUOM AS NVARCHAR(3)
	DECLARE @ItemPricingUOM AS NVARCHAR(3)
	
	--Read the Item Using the short Item Number
	SELECT TOP 1 
		@ItemFlag = A.IMTFLA , 
		@ItemPrimaryUOM = A.IMUOM1, 
		@ItemPricingUOM = A.IMUOM4
	FROM [SCDATA].F4101 A	--Item Master
	WHERE A.IMITM = @ItemNumber
	
	--If the item F4101.IMTFLA = 1 
	IF(RTRIM(@ItemFlag) = '1')
	BEGIN
		--Basic UOM table
		SELECT DISTINCT UOM.UnitOfMeasure AS UnitOfMeasure, ISNULL(UOMLang.UMDSC1, UOMByInstallation.UMDSC1) AS Description
		FROM(
			SELECT A.UCUM AS UnitOfMeasure FROM [SCDATA].F41003 A WHERE A.UCRUM = @ItemPrimaryUOM OR A.UCRUM = @ItemPricingUOM
			UNION
			SELECT A.UCRUM AS UnitOfMeasure FROM [SCDATA].F41003 A WHERE A.UCUM = @ItemPrimaryUOM OR A.UCUM = @ItemPricingUOM
			UNION
			SELECT @ItemPrimaryUOM AS UnitOfMeasure
			UNION
			SELECT @ItemPricingUOM AS UnitOfMeasure) AS UOM
		INNER JOIN [SCDATA].FQ67415 AS UOMByInstallation
		ON  UOMByInstallation.UMUOM = UOM.UnitOfMeasure
		AND UOMByInstallation.UM$9INID = @InstallationID
		LEFT OUTER JOIN [SCDATA].FQ67415L AS UOMLang
		ON  UOMLang.UMUOM = UOMByInstallation.UMUOM
        AND UOMLang.UMLNGP = @LangPref
		ORDER BY UOM.UnitOfMeasure
	END
	ELSE
	BEGIN
		--Item specific UOM Table
		SELECT DISTINCT UOM.UnitOfMeasure AS UnitOfMeasure, ISNULL(UOMLang.UMDSC1, UOMByInstallation.UMDSC1) AS Description
		FROM (SELECT A.UMUM AS UnitOfMeasure FROM [SCDATA].F41002 AS A WHERE A.UMITM = @ItemNumber
			  UNION
			  SELECT A.UMRUM AS UnitOfMeasure FROM [SCDATA].F41002 AS A WHERE A.UMITM = @ItemNumber
			  UNION
			  SELECT @ItemPrimaryUOM AS UnitOfMeasure 
			  UNION
			  SELECT @ItemPricingUOM AS UnitOfMeasure ) AS UOM
		INNER JOIN [SCDATA].FQ67415 AS UOMByInstallation
		ON  UOMByInstallation.UMUOM = UOM.UnitOfMeasure
		AND UOMByInstallation.UM$9INID = @InstallationID
		LEFT OUTER JOIN [SCDATA].FQ67415L AS UOMLang
		ON  UOMLang.UMUOM = UOMByInstallation.UMUOM
        AND UOMLang.UMLNGP = @LangPref
		ORDER BY UOM.UnitOfMeasure
	END


GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContentDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContentDetail
	END

GO

-- #desc				    Get Web Content Detail
-- #bl_class			    Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies		    [DBO].INV_GetItemWebContentDetLangs
-- #db_references		    N/A

-- #param @ItemNumber	    Item Number.
-- #param @InstallationID   Installation ID.
-- #param @DesignStatus     Desing Status.
-- #param @UniqueKeyID      Unique Key ID.

CREATE PROCEDURE [DBO].INV_GetItemWebContentDetail
@InstallationID NVARCHAR(3),
@ItemNumber FLOAT,
@DesignStatus FLOAT,
@UniqueKeyID FLOAT

AS
	SET NOCOUNT ON
	
	SELECT CDITM AS ItemNumber
      ,CDUKID AS UniqueKeyID
      ,CD$9INID AS InstallationID
      ,CD$9DS AS DesignStatus
      ,CDSEQ AS SequenceNumber
      ,CD$9PTL AS ParagraphTitle
      ,CD$9HTML AS HtmlContent
      ,CDASAI AS ActiveInactive
      ,CDEFFF AS EffectiveFromDate
      ,CDEFFT AS EffectiveThruDate
      ,CDURDT AS UserReservedDate
      ,CDURAT AS UserReservedAmount
      ,CDURAB AS UserReservedNumber
      ,CDURRF AS UserReservedReference
      ,CDUSER AS UserId
      ,CDPID AS ProgramId
      ,CDJOBN AS WorkStationId
      ,CDUPMJ AS DateUpdated
      ,CDTDAY AS TimeOfDay
  FROM [SCDATA].FQ67411
WHERE (CDITM = @ItemNumber) AND
	  (CD$9INID = @InstallationID) AND
      (@DesignStatus IS NULL OR CD$9DS = @DesignStatus) AND 
      (CDUKID = @UniqueKeyID)
      
   EXEC [DBO].INV_GetItemWebContentDetLangs @InstallationID,@ItemNumber,@DesignStatus,@UniqueKeyID,'*'

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContentDetList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContentDetList
	END

GO

-- #desc					Get list of Details for Item number 
-- #bl_class				Premier.Inventory.ItemWebContentDetailList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ItemNumber		Item Number.
-- #param @InstallationID	Installation ID.	
-- #param @DesignStatus		Design Status. (Live Status = 0, Design Status = 1)
-- #param @LangPref			Language Preference
-- #param @Status			Active and Inactive, (Both = '*', Active= 'A', Inactive = 'I')
-- #param @EffectiveOnly	retrieve only the effective paragraphs for today or retrieve all paragraphs (0 = Off, 1 = ON)

CREATE Procedure [DBO].INV_GetItemWebContentDetList
		@InstallationID NVARCHAR(3),
		@ItemNumber FLOAT,
		@DesignStatus FLOAT,
		@LangPref NVARCHAR(2),
		@Status NVARCHAR(1),
		@EffectiveOnly FLOAT

AS
	DECLARE @CurrentJulianDate NUMERIC
		SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate(GETDATE())
		
	IF(@InstallationID <> '***')
		BEGIN
			IF NOT EXISTS(SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE (CH$9INID=@InstallationID AND CHITM=@ItemNumber AND CH$9DS=@DesignStatus))
				BEGIN
					set @InstallationID='***';
				END
		END
	
	SELECT
		A.CD$9INID AS InstallationID,
		A.CDITM AS ItemNumber,
		A.CDASAI AS ActiveInactive,
		A.CD$9DS AS DesignStatus,
		A.CDUKID   AS UniqueKeyID,
		A.CDSEQ AS SequenceNumber,
		isnull(B.CL$9PTL,A.CD$9PTL) AS ParagraphTitle,
		isnull(B.CL$9HTML,A.CD$9HTML) AS HtmlContent,
		A.CDEFFF AS EffectiveFromDate,
		A.CDEFFT AS EffectiveThruDate
	FROM
		[SCDATA].FQ67411 A
		left join  [SCDATA].FQ67411L B ON 
			A.CD$9INID = B.CL$9INID AND
			B.CLLNGP = @LangPref AND
			A.CDITM = B.CLITM AND
			A.CD$9DS = B.CL$9DS AND
			A.CDUKID = B.CLUKID
	WHERE 
		@ItemNumber=CDITM 
		and CD$9INID=@InstallationID
		and CD$9DS = @DesignStatus	
		AND (@Status = 'X' or CDASAI = @Status)		
		and (@EffectiveOnly=0 OR(@CurrentJulianDate >= A.CDEFFF AND @CurrentJulianDate <= A.CDEFFT))  	
	ORDER BY SequenceNumber ASC
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContentHeader'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContentHeader
	END

GO

-- #desc				    Get Web Content Header
-- #bl_class			    Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies		    INV_GetItemWebContentHeadLangs
-- #db_references           N/A

-- #param @ItemNumber	    Item Number.
-- #param @InstallationID   Installation ID.
-- #param @DesignStatus     Desing Status.

CREATE PROCEDURE [DBO].INV_GetItemWebContentHeader
	  
	  @InstallationID NVARCHAR(3),
	  @ItemNumber	FLOAT,
      @DesignStatus FLOAT

AS
	SET NOCOUNT ON

SELECT  CHITM AS ItemNumber
      , CH$9INID AS InstallationID
      , CH$9DS AS DesignStatus
      , CHDSC1 AS Description1
      , CHDSC2 AS Description2
      , CHDSC3 AS Description3
      , CH$9PRI AS MessagePriority
      , CH$9HTML AS HtmlContent
      , CHPTURL AS PortalUrl
      , CHURCD AS UserReservedCode
      , CHURDT AS UserReservedDate
      , CHURAT AS UserReservedAmount
      , CHURAB AS UserReservedNumber
      , CHURRF AS UserReservedReference
      , CHUSER AS UserId
      , CHPID AS ProgramId
      , CHJOBN AS WorkStationId
      , CHUPMJ AS DateUpdated
      , CHTDAY AS TimeOfDay
 FROM  [SCDATA].FQ67410
 WHERE  (CHITM = @ItemNumber)AND
		(CH$9INID  =  @InstallationID)AND
		(@DesignStatus IS NULL OR CH$9DS = @DesignStatus)		
		
EXEC [DBO].INV_GetItemWebContentHeadLangs @InstallationID,@ItemNumber,@DesignStatus,'*'

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContentHeadInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContentHeadInfo
	END

GO

-- #desc						Get Item Web Content Header Info Read Only
-- #bl_class					Premier.Inventory.ItemWebContentHeaderInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID.
-- #param @ItemNumber			Item Number.
-- #param @LangPref				Language Preference.
-- #param @DesignStatus			Design Status

CREATE Procedure [DBO].INV_GetItemWebContentHeadInfo
		@InstallationID NVARCHAR(3),
		@ItemNumber FLOAT,
		@LangPref NVARCHAR(2),
		@DesignStatus  FLOAT
AS

BEGIN
	
IF NOT EXISTS(SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE (CH$9INID=@InstallationID AND CHITM=@ItemNumber AND CH$9DS=@DesignStatus))
	BEGIN
		set @InstallationID='***';
	END

		select 
		IMITM AS ItemNumber,
		IMLITM AS LongItemNumber,
		IMAITM AS AuxItemNumber,
		CH$9INID AS InstallationID,
		CH$9DS AS DesignStatus,
		ISNULL(CLDSC1,CHDSC1) AS Description1,
		ISNULL(CLDSC2,CHDSC2) AS Description2,
		ISNULL(CLDSC3,CHDSC3) AS Description3,
		CHUPMJ  AS PublishedSince,
		0 AS DraftAndPublished,
		ISNULL(CL$9HTML,CH$9HTML) AS HTML
        
		FROM  [SCDATA].FQ67410
		inner join [SCDATA].F4101 
			on CHITM=IMITM
		left join [SCDATA].FQ67410L 
			on CLLNGP=@LangPref and (CL$9INID=CH$9INID and CLITM=CHITM and CL$9DS=CH$9DS)
		WHERE (CH$9INID=@InstallationID and CHITM=@ItemNumber AND CH$9DS=@DesignStatus)
END



GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContentHeadList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContentHeadList
	END

GO

-- #desc					Get Web Content Header List
-- #bl_class				Premier.Inventory.ItemWebContentHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID Installation ID.
-- #param @DesignStatus	  Design Status.
-- #param @FilterTerm	  Free Form Search Text.

CREATE PROCEDURE [DBO].INV_GetItemWebContentHeadList
      @InstallationID	NVARCHAR(3),
      @DesignStatus		NUMERIC(18,0),
      @ItemNumber		FLOAT,
      @FilterTerm		NVARCHAR(30),
	  @ContentStatus	INT,
	  @PageIndex		INT,
	  @PageSize			INT,
	  @TotalRowCount	INT OUTPUT
AS
	DECLARE @ROWSTART INT;
	DECLARE @ROWEND INT;
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX);
	DECLARE @WHERE_DYNAMIC NVARCHAR(1000) = N'';

	
	CREATE TABLE #TempTable 
	(
		ItemNumber			FLOAT,
		InstallationID		NVARCHAR(3) collate DATABASE_DEFAULT,
		DesignStatus		NUMERIC(18,0),
		LongItemNumber		NVARCHAR(25) collate DATABASE_DEFAULT,
		AuxItemNumber		NVARCHAR(25) collate DATABASE_DEFAULT,
		Description1		NVARCHAR(30) collate DATABASE_DEFAULT,
		Description2		NVARCHAR(30) collate DATABASE_DEFAULT,
		Description3		NVARCHAR(30) collate DATABASE_DEFAULT,
		PublishedSince		NUMERIC(18,0),
		DraftAndPublished	INT
	)

	IF (@FilterTerm <> '*' OR @ItemNumber IS NOT NULL) BEGIN
		IF (@ItemNumber IS NOT NULL) BEGIN 		
			SET @WHERE_DYNAMIC += N' (A.CHITM = @ItemNumber 
			OR (A.Description1 + '' '' + A.Description2  + '' '' + A.Description3 + '' '' + MAS.IMLITM + '' '' + MAS.IMAITM LIKE ''%'' + @FilterTerm  + ''%'')) ';
		END;
		ELSE BEGIN
			SET @WHERE_DYNAMIC += N' (A.Description1 + '' '' + A.Description2  + '' '' + A.Description3 + '' '' + MAS.IMLITM + '' '' + MAS.IMAITM LIKE ''%'' + @FilterTerm  + ''%'') ';
		END;
	END;
	IF (@ContentStatus = 0) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND ';
		END;
		SET @WHERE_DYNAMIC += N' (A.InstallationID = @InstallationID) ';
	END;
	IF (@ContentStatus = 1) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND ';
		END;
		SET @WHERE_DYNAMIC += N' (A.InstallationID = ''***'') ';
	END;
	
	/*If the filter is ALL then delete Published version when the item has a draft copy*/
	IF @DesignStatus IS NULL OR @DesignStatus = 2 BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND ';
		END;
		SET @WHERE_DYNAMIC += N' (A.DesignStatus = 1 OR (A.DesignStatus = 0 AND A.DraftAndPublished = 0)) ';
	END
	/*If the filter is Design then delete Published records and viceversa*/
	ELSE BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND ';
		END;
		SET @WHERE_DYNAMIC += N' (A.DesignStatus = @DesignStatus) ';
	END

	SET @SQL_DYNAMIC = N'
	;WITH CTE AS (
	SELECT  
		ITEMS.CHITM, 
		';

		IF(@DesignStatus IS NULL) BEGIN
			SET @SQL_DYNAMIC += N'
			ISNULL(DRAFT_INS.CH$9INID, ISNULL(LIVE_INS.CH$9INID, ISNULL(DRAFT_BASE.CH$9INID, LIVE_BASE.CH$9INID)))	InstallationID,
			ISNULL(DRAFT_INS.CH$9DS, ISNULL(LIVE_INS.CH$9DS, ISNULL(DRAFT_BASE.CH$9DS, LIVE_BASE.CH$9DS)))			DesignStatus,
			COALESCE(DRAFT_INS.CHDSC1, LIVE_INS.CHDSC1, DRAFT_BASE.CHDSC1, LIVE_BASE.CHDSC1, '''')					Description1,
			COALESCE(DRAFT_INS.CHDSC2, LIVE_INS.CHDSC2, DRAFT_BASE.CHDSC2, LIVE_BASE.CHDSC2, '''')					Description2,
			COALESCE(DRAFT_INS.CHDSC3, LIVE_INS.CHDSC3, DRAFT_BASE.CHDSC3, LIVE_BASE.CHDSC3, '''')					Description3,
			';
		END;
		ELSE IF(@DesignStatus = 1) BEGIN
			SET @SQL_DYNAMIC += N' 
			CASE WHEN (DRAFT_INS.CH$9DS IS NOT NULL) THEN DRAFT_INS.CH$9INID ELSE DRAFT_BASE.CH$9INID END	InstallationID,
			CASE WHEN (DRAFT_INS.CH$9DS IS NOT NULL) OR (DRAFT_BASE.CH$9DS IS NOT NULL AND LIVE_INS.CH$9DS IS NULL) THEN 1 ELSE 0 END	DesignStatus,
			COALESCE(DRAFT_INS.CHDSC1, DRAFT_BASE.CHDSC1, '''')			Description1,
			COALESCE(DRAFT_INS.CHDSC2, DRAFT_BASE.CHDSC2, '''')			Description2,
			COALESCE(DRAFT_INS.CHDSC3, DRAFT_BASE.CHDSC3, '''')			Description3,
			';
		END;
		ELSE IF(@DesignStatus = 0) BEGIN
			SET @SQL_DYNAMIC += N'
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) THEN LIVE_INS.CH$9INID ELSE LIVE_BASE.CH$9INID END		InstallationID,
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) OR  (LIVE_BASE.CH$9DS IS NOT NULL) THEN 0 ELSE 1 END	DesignStatus,
			COALESCE(LIVE_INS.CHDSC1, LIVE_BASE.CHDSC1, '''')			Description1,
			COALESCE(LIVE_INS.CHDSC2, LIVE_BASE.CHDSC2, '''')			Description2,
			COALESCE(LIVE_INS.CHDSC3, LIVE_BASE.CHDSC3, '''')			Description3,
			';
		END;
		ELSE BEGIN
			SET @SQL_DYNAMIC += N'
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) THEN LIVE_INS.CH$9INID ELSE LIVE_BASE.CH$9INID END		InstallationID,
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) OR  (LIVE_BASE.CH$9DS IS NOT NULL) THEN 0 ELSE 1 END	DesignStatus,
			COALESCE(DRAFT_INS.CHDSC1, LIVE_INS.CHDSC1, DRAFT_BASE.CHDSC1, LIVE_BASE.CHDSC1, '''')			Description1,
			COALESCE(DRAFT_INS.CHDSC2, LIVE_INS.CHDSC2, DRAFT_BASE.CHDSC2, LIVE_BASE.CHDSC2, '''')			Description2,
			COALESCE(DRAFT_INS.CHDSC3, LIVE_INS.CHDSC3, DRAFT_BASE.CHDSC3, LIVE_BASE.CHDSC3, '''')			Description3,
			';
		END;

		SET @SQL_DYNAMIC += N'
        CASE 
			WHEN (DRAFT_INS.CHITM IS NOT NULL OR LIVE_INS.CHITM IS NOT NULL) THEN ISNULL(LIVE_INS.CHUPMJ,0) 
			ELSE ISNULL(LIVE_BASE.CHUPMJ,0) 
		END  AS PublishedSince,
		CASE 
			WHEN (DRAFT_INS.CHITM IS NOT NULL AND LIVE_INS.CHITM IS NOT NULL)THEN 1 
			WHEN (DRAFT_INS.CHITM IS NULL AND LIVE_INS.CHITM IS NULL AND DRAFT_BASE.CHITM IS NOT NULL AND LIVE_BASE.CHITM IS NOT NULL)THEN 1 
			WHEN (DRAFT_INS.CHITM IS NOT NULL AND LIVE_INS.CHITM IS NULL AND LIVE_BASE.CHITM IS NOT NULL) THEN 1
			ELSE 0
		END AS DraftAndPublished		 
	FROM 
		(SELECT DISTINCT CHITM
		FROM [SCDATA].FQ67410 
		WHERE CH$9INID IN (@InstallationID, ''***'') 
		';
		IF(@DesignStatus IS NOT NULL) BEGIN
			SET @SQL_DYNAMIC += N' AND (CH$9DS = @DesignStatus) ';
		END;
		SET @SQL_DYNAMIC += N'
		) AS ITEMS          
				
		LEFT OUTER JOIN [SCDATA].FQ67410 LIVE_INS 
			ON LIVE_INS.CHITM = ITEMS.CHITM
			AND LIVE_INS.CH$9INID = @InstallationID
			AND LIVE_INS.CH$9DS = 0
         
        LEFT OUTER JOIN [SCDATA].FQ67410 DRAFT_INS 
			ON DRAFT_INS.CHITM = ITEMS.CHITM 
			AND DRAFT_INS.CH$9INID = @InstallationID 
			AND DRAFT_INS.CH$9DS = 1
          
        LEFT OUTER JOIN [SCDATA].FQ67410 LIVE_BASE
			ON LIVE_BASE.CHITM = ITEMS.CHITM 
			AND LIVE_BASE.CH$9INID = ''***'' 
			AND LIVE_BASE.CH$9DS = 0
          
        LEFT OUTER JOIN [SCDATA].FQ67410 DRAFT_BASE 
			ON DRAFT_BASE.CHITM = ITEMS.CHITM
			AND DRAFT_BASE.CH$9INID = ''***'' 
			AND DRAFT_BASE.CH$9DS = 1 
	)
	INSERT INTO #TempTable (ItemNumber, InstallationID, DesignStatus, LongItemNumber, AuxItemNumber, Description1,	Description2, Description3, PublishedSince, DraftAndPublished) 
	SELECT
		A.CHITM,
		A.InstallationID,
		A.DesignStatus,/*Design Status*/
		MAS.IMLITM,
		MAS.IMAITM,
		A.Description1,
		A.Description2,
		A.Description3,	
		A.PublishedSince,
		A.DraftAndPublished
	FROM CTE A
	INNER JOIN [SCDATA].F4101 MAS
		ON MAS.IMITM = A.CHITM
	WHERE ' + @WHERE_DYNAMIC;
	
	EXECUTE sp_executesql @SQL_DYNAMIC, N' @ItemNumber FLOAT, @FilterTerm NVARCHAR(30), @InstallationID NVARCHAR(3), @DesignStatus NUMERIC(18,0) ',
										@ItemNumber = @ItemNumber, @FilterTerm = @FilterTerm, @InstallationID = @InstallationID, @DesignStatus = @DesignStatus;
	
	/* Obtain the total count of the result */
	SELECT @TotalRowCount = COUNT(1) FROM #TempTable; 

	/* Validate if paging is not required */
	IF(@PageIndex = 0 OR @PageSize = 0)	BEGIN		
		SET @ROWSTART = 1;
		SET @ROWEND = @TotalRowCount;
	END
	ELSE BEGIN		
		SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1;
		SET @ROWEND = @PageIndex * @PageSize;
	END
	
	--Select From Temporary Table
	;WITH CTE AS 
	(
		SELECT
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.InstallationID,
			A.DesignStatus,
			A.Description1,
			A.Description2,
			A.Description3, 
			A.PublishedSince,
			A.DraftAndPublished,
			ROW_NUMBER() OVER(ORDER BY A.ItemNumber) AS RNUM
		FROM #TempTable A
	)
	SELECT
		B.ItemNumber,
		B.LongItemNumber,
		B.AuxItemNumber,
		B.InstallationID,
		B.DesignStatus,
		B.Description1,
		B.Description2,
		B.Description3, 
		B.PublishedSince,
		B.DraftAndPublished,
		'' AS HTML	
	FROM CTE B
	WHERE B.RNUM >= @ROWSTART AND B.RNUM <= @ROWEND;
	
	DROP TABLE #TempTable;
GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetItemWebContSharedInst'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetItemWebContSharedInst
	END

GO

-- #desc				Reads installations that share the content
-- #bl_class			Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @ItemNumber	Item Number

CREATE PROCEDURE [DBO].INV_GetItemWebContSharedInst(
	@ItemNumber		FLOAT
)
AS
	SELECT
		IN$9INID AS InstallationId,
		INDSC1 AS Description,
		IN$9APFL AS ApplicationUseFlag
	FROM 
		[SCDATA].FQ670001
	WHERE 
		IN$9INID NOT IN (SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE CHITM = @ItemNumber)
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetKitComponentsList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetKitComponentsList
	END

GO

-- #bl_class								Premier.Inventory.KitComponentList.cs
-- #db_dependencies							N/A
-- #db_references							N/A

-- #param @InstallationID					InstallationID
-- #param @AddressNumber					Address Number
-- #param @ItemNumber						Parent (short) Item Number
-- #param @BranchPlant						BranchPlant
-- #param @Company							Company
-- #param @RetrieveWebContentInfo			RetrieveWeb Content Info
-- #param @LangPref							Language Preference


CREATE Procedure [DBO].INV_GetKitComponentsList
(
	@InstallationID	NVARCHAR(3),
	@AddressNumber	FLOAT,
	@ItemNumber		FLOAT,
	@BranchPlant	NVARCHAR(12),
	@Company		NVARCHAR(5),
	@RetrieveWebContentInfo	INT,
	@LangPref		NVARCHAR(2)
)
AS
	DECLARE @ItemRestrictionsCode	NVARCHAR(2)
	SET @ItemRestrictionsCode = NULL;
	
	-- Get ItemRestrictionsCode
	SET @ItemRestrictionsCode = (SELECT AIEDF2 FROM [SCDATA].F03012 WHERE AICO = @Company AND AIAN8 = @AddressNumber);
						
	IF(@ItemRestrictionsCode IS NULL)BEGIN
		SET @ItemRestrictionsCode = (SELECT AIEDF2 FROM [SCDATA].F03012 WHERE AICO = '00000' AND AIAN8 = @AddressNumber);
	END
	
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		0			AS FeatureParentItem,
		KT.IXITM	AS ComponentItemNumber,
		KT.IXCPNB	AS ComponentLineNumber,
		KT.IXOPTK	AS ComponentType,
		KT.IXFTRC	AS Required,
		KT.IXQNTY	AS Quantity,
		KT.IXUOM	AS UnitOfMeasure
	INTO	#TMP_KITCOMP
	FROM 
		[SCDATA].F3002 KT
	WHERE
		KT.IXKIT = @ItemNumber 
		AND IXMMCU = @BranchPlant
		AND IXTBM = 'M'
	UNION
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		@ItemNumber	AS FeatureParentItem,
		KT.IXITM	AS ComponentItemNumber,
		KT.IXCPNB	AS ComponentLineNumber,
		KT.IXOPTK	AS ComponentType,
		KT.IXFTRC	AS Required,
		KT.IXQNTY	AS Quantity,
		KT.IXUOM	AS UnitOfMeasure
	FROM 
		[SCDATA].F3002 KT
	WHERE KT.IXKIT in (SELECT IXITM FROM [SCDATA].F3002 WHERE
						IXKIT = @ItemNumber
						AND IXMMCU = @BranchPlant
						AND IXOPTK ='F'
						AND IXTBM = 'M')
						
	IF(@ItemRestrictionsCode = 'E') --Exclude
	BEGIN
		DELETE A FROM #TMP_KITCOMP A
		WHERE A.ComponentType = 'O' AND
		EXISTS(SELECT SXXRVF FROM [SCDATA].F4013 R
							WHERE R.SXXRVF = @AddressNumber 
							AND R.SXXRVT = A.ComponentItemNumber
							AND R.SXEDF1 = 'S' AND R.SXXRTC = 'IR');
	END
	ELSE IF (@ItemRestrictionsCode = 'I')--Include
	BEGIN
		DELETE A FROM #TMP_KITCOMP A
		WHERE 
			A.ComponentType = 'O' AND
			A.ComponentItemNumber NOT IN (SELECT SXXRVT FROM [SCDATA].F4013 WHERE SXXRVF = @AddressNumber AND SXEDF1 = 'S' AND SXXRTC = 'IR');
	END
	
	IF(@RetrieveWebContentInfo = 1)	BEGIN
		
		SELECT
			KT.ParentItemNumber		AS ParentItemNumber,
			KT.FeatureParentItem	AS FeatureParentItem,
			KT.ComponentItemNumber			AS ComponentItemNumber,
			IM.IMLITM AS LongItemNumber,
			IM.IMAITM AS AuxItemNumber,
			KT.ComponentLineNumber	AS ComponentLineNumber,
			KT.ComponentType		AS ComponentType,
			KT.Required				AS Required,
			KT.Quantity				AS Quantity,
			KT.UnitOfMeasure		AS UnitOfMeasure,
			ISNULL(ISNULL(UOMLNG.UMDSC1, UOM.UMDSC1), KT.UnitOfMeasure)	AS UnitOfMeasureDesc,
			ISNULL(ContenDesc.DESC1,IM.IMDSC1)	AS ItemDescription1,
			ISNULL(ContenDesc.DESC2,IM.IMDSC2)	AS ItemDescription2,
			ISNULL(ContenDesc.URL,'')	AS URL
		FROM 
			#TMP_KITCOMP KT
		INNER JOIN [SCDATA].F4101 IM	--ITEM MASTER
			ON IM.IMITM = KT.ComponentItemNumber 
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,IM.IMITM,@LangPref,0) ContenDesc 
		LEFT JOIN [SCDATA].FQ67415 UOM
			ON UOM.UMUOM = KT.UnitOfMeasure
			AND UOM.UM$9INID = @InstallationID
		LEFT JOIN [SCDATA].FQ67415L UOMLNG
			ON UOMLNG.UMUOM = UOM.UMUOM
			AND UOMLNG.UMLNGP = @LangPref
		ORDER BY KT.ParentItemNumber,KT.ComponentLineNumber;

	END
	
	ELSE BEGIN

		SELECT
			KT.ParentItemNumber		AS ParentItemNumber,
			KT.FeatureParentItem	AS FeatureParentItem,
			KT.ComponentItemNumber			AS ComponentItemNumber,
			IM.IMLITM AS LongItemNumber,
			IM.IMAITM AS AuxItemNumber,
			KT.ComponentLineNumber	AS ComponentLineNumber,
			KT.ComponentType		AS ComponentType,
			KT.Required				AS Required,
			KT.Quantity				AS Quantity,
			KT.UnitOfMeasure		AS UnitOfMeasure,
			ISNULL(ISNULL(UOMLNG.UMDSC1, UOM.UMDSC1), KT.UnitOfMeasure)	AS UnitOfMeasureDesc,
			IM.IMDSC1				AS ItemDescription1, /* Retrieve Description 1 for Tracking lines */
			N''						AS ItemDescription2,
			N''						AS URL
		FROM 
			#TMP_KITCOMP KT
		INNER JOIN [SCDATA].F4101 IM	--ITEM MASTER
			ON IM.IMITM = KT.ComponentItemNumber 
		LEFT JOIN [SCDATA].FQ67415 UOM
			ON UOM.UMUOM = KT.UnitOfMeasure
			AND UOM.UM$9INID = @InstallationID
		LEFT JOIN [SCDATA].FQ67415L UOMLNG
			ON UOMLNG.UMUOM = UOM.UMUOM
			AND UOMLNG.UMLNGP = @LangPref
		ORDER BY KT.ParentItemNumber,KT.ComponentLineNumber;
	
	END

	
	DROP TABLE #TMP_KITCOMP	
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetLineTypeInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetLineTypeInfo
	END
GO

-- #desc				Get LineType Item info
-- #bl_class			Premier.Inventory.LineTypeInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @LineType		Line Type Id

CREATE Procedure [DBO].INV_GetLineTypeInfo
	@LineType	NVARCHAR(3)	

   AS
	
    SET NOCOUNT ON
	
	SELECT
		A.LFLNTY LineType, 
		A.LFLNDS Description1, 
		A.LFLND2 Description2,
		A.LFTX01 IsTaxable
	FROM 
		[SCDATA].F40205 A 
	WHERE 
		A.LFLNTY = @LineType
GO
                 
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetLineTypeList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetLineTypeList
	END
GO

-- #desc					Gets itemNumber List
-- #bl_class				Premier.Inventory.LineTypeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ItemNumber		Short Item Number
-- #param @Description1		Description1
-- #param @Description2		Description2

CREATE Procedure [DBO].INV_GetLineTypeList
	@LineType	NVARCHAR(3),
	@Description1	NVARCHAR(30),
	@Description2	NVARCHAR(30)	

   AS
	
    SET NOCOUNT ON
	
	SELECT
		A.LFLNTY LineType, 
		A.LFLNDS Description1, 
		A.LFLND2 Description2,
		A.LFTX01 IsTaxable
	FROM 
		[SCDATA].F40205 A 
	WHERE 
		(@LineType = '*' OR A.LFLNTY = @LineType) 
		AND (LTRIM(RTRIM(@Description1)) = '*' OR A.LFLNDS LIKE '%' + LTRIM(RTRIM(@Description1)) + '%') 
		AND (LTRIM(RTRIM(@Description2)) = '*' OR A.LFLND2 LIKE '%' + LTRIM(RTRIM(@Description2)) + '%') 

GO
               
   
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetMatrixAttrValueList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetMatrixAttrValueList
	END
GO

-- #desc				Gets list of Matrix segment values for an specific segment
-- #bl_class			Premier.Inventory.MatrixAttributeValueList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].INV_GetMatrixAttrValueList
(
	@Template		NCHAR(20),
	@Style			NCHAR(10),
	@SegmentNumber	INT
)
AS
BEGIN

	DECLARE @VerticalSegment AS INT;
	DECLARE @HorizontalSegment AS INT;

	SET @VerticalSegment = 0;
	SET @HorizontalSegment = 0;

	/* Retrieve horizontal and vertical segment numbers */
	SELECT @HorizontalSegment = MTM.T7HSEG,			
		   @VerticalSegment= (CASE 
								WHEN MTM.T7HSEG =  MTM.T7NSEG THEN MTM.T7NSEG - 1 
								ELSE MTM.T7NSEG 
							 END)   			
		FROM [SCDATA].F410014 MTM
		WHERE MTM.T7TMPL= @Template;

	IF(@Style = '*')
	BEGIN
		;WITH CTE AS (
			SELECT
				S0TMPL AS Template,
				CASE @SegmentNumber
					WHEN 2 THEN S0SEG2
					WHEN 3 THEN S0SEG3
					WHEN 4 THEN S0SEG4
					WHEN 5 THEN S0SEG5
					WHEN 6 THEN S0SEG6
					WHEN 7 THEN S0SEG7
					WHEN 8 THEN S0SEG8
					WHEN 9 THEN S0SEG9
					WHEN 0 THEN S0SEG0
					END AS SegmentValue,
				CASE @SegmentNumber
					WHEN 2 THEN S0SGD2
					WHEN 3 THEN S0SGD3
					WHEN 4 THEN S0SGD4
					WHEN 5 THEN S0SGD5
					WHEN 6 THEN S0SGD6
					WHEN 7 THEN S0SGD7
					WHEN 8 THEN S0SGD8
					WHEN 9 THEN S0SGD9
					WHEN 0 THEN S0SGD0
					END AS SegmentDescription,
				CASE 
					WHEN @SegmentNumber = @VerticalSegment THEN S0MRNO
					WHEN @SegmentNumber = @HorizontalSegment THEN S0MCNO
					ELSE 0
					END AS SegmentSequence
			FROM [SCDATA].F41008
			WHERE  S0TMPL = @Template
		)
		/* Distinct without SegmentDescription to avoid same code with different description */
		SELECT Template,
				@Style	AS Style,
				@SegmentNumber AS SegmentNumber, 
				SegmentValue, 
				MAX(B.SegmentDescription) AS SegmentDescription,
				MIN(B.SegmentSequence) AS SegmentSequence
		FROM CTE B
		WHERE SegmentValue <> ''
		GROUP BY B.Template, B.SegmentValue;
	END
	ELSE
	BEGIN
		;WITH CTE AS (
			SELECT
				S0TMPL AS Template,
				CASE @SegmentNumber
					WHEN 2 THEN S0SEG2
					WHEN 3 THEN S0SEG3
					WHEN 4 THEN S0SEG4
					WHEN 5 THEN S0SEG5
					WHEN 6 THEN S0SEG6
					WHEN 7 THEN S0SEG7
					WHEN 8 THEN S0SEG8
					WHEN 9 THEN S0SEG9
					WHEN 0 THEN S0SEG0
					END AS SegmentValue,
				CASE @SegmentNumber
					WHEN 2 THEN S0SGD2
					WHEN 3 THEN S0SGD3
					WHEN 4 THEN S0SGD4
					WHEN 5 THEN S0SGD5
					WHEN 6 THEN S0SGD6
					WHEN 7 THEN S0SGD7
					WHEN 8 THEN S0SGD8
					WHEN 9 THEN S0SGD9
					WHEN 0 THEN S0SGD0
					END AS SegmentDescription,
				CASE 
					WHEN @SegmentNumber = @VerticalSegment THEN S0MRNO 
					WHEN @SegmentNumber = @HorizontalSegment THEN S0MCNO
					ELSE 0
					END AS SegmentSequence
			FROM [SCDATA].F41008
			WHERE  S0TMPL = @Template AND S0SEG1 = @Style
		)/* Distinct without Description to avoid same code with different description */
		SELECT Template,
				@Style	AS Style,
				@SegmentNumber AS SegmentNumber, 
				SegmentValue, 
				MAX(B.SegmentDescription) AS SegmentDescription,
				MIN(B.SegmentSequence) AS SegmentSequence
		FROM CTE B
		WHERE SegmentValue <> ''
		GROUP BY B.Template, B.SegmentValue;
	END
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetMatrixItemList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetMatrixItemList
	END
GO 

-- #desc							
-- #bl_class							Premier.Inventory.MatrixItemList.cs
-- #db_dependencies						N/A
-- #db_references						N/A					

-- #param @InstallationID				Installation Id
-- #param @Template						Matrix Template

CREATE Procedure [DBO].INV_GetMatrixItemList
	@InstallationID			NVARCHAR(3),
	@ItemNumber				FLOAT,
	@Template				NVARCHAR(20)
AS

BEGIN
	DECLARE @Segment1		NVARCHAR(10)

	/*Get Segment 1*/
	SET @Segment1 = (SELECT IMSEG1 FROM [SCDATA].F4101 WHERE IMITM = @ItemNumber AND IMTMPL = @Template AND IMMIC = '1'); -- IMMIC = 1 Parent Matrix Item
	
	BEGIN
		SELECT 
		@InstallationID		AS InstallationID,
		''					AS BranchPlant, 
		''					AS BranchPlantDesc, 
		A.IMITM				AS ItemNumber, 
		A.IMLITM			AS LongItemNumber, 
		A.IMAITM			AS AuxItemNumber,
		ISNULL(ContenDesc.DESC1,IMDSC1)	AS Description1,
		ISNULL(ContenDesc.DESC2,IMDSC2)	AS Description2,
		''					AS URL,
		A.IMUOM1			AS PrimaryUnitOfMeasure,
		A.IMUOM2			AS SecondaryUnitOfMeasure,
		A.IMUOM4			AS PricingUnitOfMeasure,
		A.IMSRTX			AS SearchItemText,
		A.IMSTKT			AS StockingType ,
		A.IMLNTY			AS LineType ,
		''					AS InventoryFlag,
		A.IMIFLA			AS ItemFlashMessage,
		A.IMTMPL			AS MatrixTemplate,
		A.IMMIC				AS MatrixControlled,
		0					AS MatrixParentItemNumber,
		0					AS AddressNumber,
		''					AS AllowPickup,
		IMCYCL AS CYCL,
		IMPRP0 AS PRP0,
		IMPRP1 AS PRP1,
		IMPRP2 AS PRP2,
		IMPRP3 AS PRP3,
		IMPRP4 AS PRP4,
		IMPRP5 AS PRP5,
		IMPRP6 AS PRP6,
		IMPRP7 AS PRP7,
		IMPRP8 AS PRP8,
		IMPRP9 AS PRP9,
		IMSHCM AS SHCM,
		IMSHCN AS SHCN,
		IMSRP0 AS SRP0,
		IMSRP1 AS SRP1,
		IMSRP2 AS SRP2,
		IMSRP3 AS SRP3,
		IMSRP4 AS SRP4,
		IMSRP5 AS SRP5,
		IMSRP6 AS SRP6,
		IMSRP7 AS SRP7,
		IMSRP8 AS SRP8,
		IMSRP9 AS SRP9
	FROM 
		[SCDATA].F4101 A					/*Item Master*/
	OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.IMITM,'',0) ContenDesc 
	WHERE 
		A.IMTMPL= @Template AND A.IMSEG1 = @Segment1 AND A.IMMIC = '2'
	END
END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetMatrixTemplateItemList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetMatrixTemplateItemList
	END
GO

-- #bl_class								Premier.Inventory.MatrixTemplateItemList.cs
-- #db_dependencies							N/A
-- #db_references							N/A

-- #param @StoreId							Store Id
-- #param @Template							Template
-- #param @Style							Style=  Segment 1
-- #param @ChildItemNumber					Optional Short Item Number
-- #param @BranchPlant						Optional Branch Plant (MCU)
-- #param @SearchValue						Optional Search Value
-- #param @SearchCriteria					Optional Search Criteria
-- #param @PageIndex						Optional Page Index
-- #param @PageSize							Optional Page Size

CREATE Procedure [DBO].INV_GetMatrixTemplateItemList
(
	@StoreId			NVARCHAR(3), 
	@Template			NVARCHAR(20),
	@Style				NVARCHAR(10),
	@ChildItemNumber	FLOAT,
	@BranchPlant		NVARCHAR(12),
	@SearchValue		NVARCHAR(200),
	@SearchCriteria		NVARCHAR(5),
	@PageIndex			INT,
	@PageSize			INT
)
AS
	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX);
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';		

	/* Paging */
    DECLARE @RowStart INT = ((@PageSize * @PageIndex) - @PageSize + 1);
    DECLARE @RowEnd INT = (@PageIndex * @PageSize);

	/*Child Item Number condition*/
	IF(@ChildItemNumber IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC = N' AND M.S0ITM = @ChildItemNumber';
	END

	/*Branch Plant condition*/
	IF(@BranchPlant <> '*') BEGIN 
		SET @WHERE_DYNAMIC += N' AND BIMCU = @BranchPlant';
	END

	/* Dynamic Query Conditions */
	IF (@SearchValue <> N'*') BEGIN
		IF(@SearchCriteria = N'0') BEGIN /*Product Number*/
			SET @WHERE_DYNAMIC += N' AND IMLITM LIKE ''%'' + @SearchValue + ''%'' ';		
		END
		ELSE IF (@SearchCriteria = N'1') BEGIN /*Description*/
			SET @WHERE_DYNAMIC += N' AND LTRIM(RTRIM(IMDSC1)) + '' '' + IMDSC2 LIKE ''%'' + @SearchValue + ''%'' ';
		END
		ELSE BEGIN /*Product Number and Description*/
			SET @WHERE_DYNAMIC += N' AND LTRIM(RTRIM(IMLITM)) + '' '' + LTRIM(RTRIM(IMDSC1)) + '' '' + IMDSC2 LIKE ''%'' + @SearchValue + ''%'' ';
		END
	END	

	SET @SQL_DYNAMIC = N'
	;WITH CTE AS (
		SELECT
			M.S0ITM		AS ItemNumber,
			IMLITM	    AS LongItemNumber,
			IMAITM	    AS AuxItemNumber,
			IMDSC1      AS Description1,
			IMDSC2      AS Description2,
			M.S0MRNO	AS RowNumber,
			M.S0MCNO	AS ColumnNumber,
			M.S0SEG1	AS Segment1,
			M.S0SGD1	AS Segment1Desc,
			M.S0SEG2	AS Segment2,
			M.S0SGD2	AS Segment2Desc,
			M.S0SEG3	AS Segment3,
			M.S0SGD3	AS Segment3Desc,
			M.S0SEG4	AS Segment4,
			M.S0SGD4	AS Segment4Desc,
			M.S0SEG5	AS Segment5,
			M.S0SGD5	AS Segment5Desc,
			M.S0SEG6	AS Segment6,
			M.S0SGD6	AS Segment6Desc,
			M.S0SEG7	AS Segment7,
			M.S0SGD7	AS Segment7Desc,
			M.S0SEG8	AS Segment8,
			M.S0SGD8	AS Segment8Desc,
			M.S0SEG9	AS Segment9,
			M.S0SGD9	AS Segment9Desc,
			M.S0SEG0	AS Segment10,
			M.S0SGD0	AS Segment10Desc,
			ROW_NUMBER() OVER(PARTITION BY M.S0ITM ORDER BY M.S0ITM) AS RNUM /* Top 1 */
		FROM [SCDATA].F41008 M
		INNER JOIN [SCDATA].F4102 
			ON ibitm= S0ITM
		INNER JOIN [SCDATA].F4101 
			ON imitm= S0ITM
		INNER JOIN [SCDATA].FQ679910	
			ON BI$9INID = @StoreId
			AND BIMCU = IBMCU
		WHERE
			M.S0SEG1 = @Style 
			AND M.S0TMPL = @Template
			AND IMSTKT <> N''N'' AND 
				 (IMTMPL = N'' '' OR (IMTMPL <> N'' '' AND IMMIC IN (N''1'', N''2'', N'' '')))
			'+ @WHERE_DYNAMIC +'
	UNION
		SELECT
			M.S0ITM		AS ItemNumber,
			IMLITM	    AS LongItemNumber,
			IMAITM	    AS AuxItemNumber,
			IMDSC1      AS Description1,
			IMDSC2      AS Description2,
			M.S0MRNO	AS RowNumber,
			M.S0MCNO	AS ColumnNumber,
			M.S0SEG1	AS Segment1,
			M.S0SGD1	AS Segment1Desc,
			M.S0SEG2	AS Segment2,
			M.S0SGD2	AS Segment2Desc,
			M.S0SEG3	AS Segment3,
			M.S0SGD3	AS Segment3Desc,
			M.S0SEG4	AS Segment4,
			M.S0SGD4	AS Segment4Desc,
			M.S0SEG5	AS Segment5,
			M.S0SGD5	AS Segment5Desc,
			M.S0SEG6	AS Segment6,
			M.S0SGD6	AS Segment6Desc,
			M.S0SEG7	AS Segment7,
			M.S0SGD7	AS Segment7Desc,
			M.S0SEG8	AS Segment8,
			M.S0SGD8	AS Segment8Desc,
			M.S0SEG9	AS Segment9,
			M.S0SGD9	AS Segment9Desc,
			M.S0SEG0	AS Segment10,
			M.S0SGD0	AS Segment10Desc,
			ROW_NUMBER() OVER(PARTITION BY M.S0ITM ORDER BY M.S0ITM) AS RNUM /* Top 1 */
		FROM [SCDATA].F41008 M
		INNER JOIN [SCDATA].F4101 
			ON imitm= S0ITM
		WHERE
			M.S0SEG1 = @Style 
			AND M.S0TMPL = @Template
			AND IMSTKT = N''N'' AND 
				 (IMTMPL = N'' '' OR (IMTMPL <> N'' '' AND IMMIC IN (N''1'', N''2'', N'' '')))
			'+ @WHERE_DYNAMIC +'	
	), PAGING AS (
		SELECT 
			ItemNumber,
			LongItemNumber,
			AuxItemNumber,
			Description1,
			Description2,
			RowNumber,
			ColumnNumber,
			Segment1,
			Segment1Desc,
			Segment2,
			Segment2Desc,
			Segment3,
			Segment3Desc,
			Segment4,
			Segment4Desc,
			Segment5,
			Segment5Desc,
			Segment6,
			Segment6Desc,
			Segment7,
			Segment7Desc,
			Segment8,
			Segment8Desc,
			Segment9,
			Segment9Desc,
			Segment10,
			Segment10Desc,
			ROW_NUMBER() OVER(ORDER BY ItemNumber) AS PAGINATION
		FROM 
			CTE
		WHERE RNUM = 1
	)
	SELECT 
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		A.RowNumber,
		A.ColumnNumber,
		A.Segment1,
		A.Segment1Desc,
		A.Segment2,
		A.Segment2Desc,
		A.Segment3,
		A.Segment3Desc,
		A.Segment4,
		A.Segment4Desc,
		A.Segment5,
		A.Segment5Desc,
		A.Segment6,
		A.Segment6Desc,
		A.Segment7,
		A.Segment7Desc,
		A.Segment8,
		A.Segment8Desc,
		A.Segment9,
		A.Segment9Desc,
		A.Segment10,
		A.Segment10Desc,
		TotalRowCount = (SELECT COUNT(1) FROM PAGING)
	FROM 
		PAGING A
	WHERE ((@PageIndex  = 0 OR @PageSize = 0) OR (PAGINATION BETWEEN @RowStart AND @RowEnd)) ';

	EXECUTE sp_executesql @SQL_DYNAMIC, N' @StoreId NVARCHAR(3), @Template NVARCHAR(20), @Style NVARCHAR(10), @ChildItemNumber FLOAT,
										@BranchPlant NVARCHAR(12), @SearchValue NVARCHAR(200), @RowStart INT, @RowEnd INT, @PageIndex INT, @PageSize INT ',
										@StoreId = @StoreId, @Template = @Template, @Style = @Style,
										@ChildItemNumber = @ChildItemNumber, @BranchPlant = @BranchPlant, @SearchValue = @SearchValue,
										@RowStart = @RowStart, @RowEnd = @RowEnd, @PageIndex = @PageIndex, @PageSize = @PageSize
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetProdCrossRefCodeLst'))
BEGIN
	DROP Procedure  [DBO].INV_GetProdCrossRefCodeLst
END
GO

SET QUOTED_IDENTIFIER ON
GO

-- #bl_class							Premier.Inventory.ProductCrossRefCodeList.cs
-- #desc								Returns Product list with the associated cross-reference
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param @CrossReferenceTypesXML		Cross Reference Types (XRT) XML: <products><product>60011</product><product>60020</product></products>
-- #param @ProductNumbersXML			Product Numbers (ITM) XML: <codes><code>C</code><code>R</code></codes>

CREATE Procedure [DBO].INV_GetProdCrossRefCodeLst
(
	@ProductNumbersXML	XML,
	@CrossReferenceTypesXML	XML
)
AS
	SELECT
		A.IVITM		AS ShortProductNumber,
		A.IVCITM	AS CrossReference,
		A.IVXRT		AS CrossReferenceType
	FROM 
		[SCDATA].F4104 A
	INNER JOIN @ProductNumbersXML.nodes('/products/product') AS products(product)
		ON A.IVITM = products.product.value('.','FLOAT')
	INNER JOIN @CrossReferenceTypesXML.nodes('/codes/code') AS codes(code)
		ON A.IVXRT = codes.code.value('.','NCHAR(2)')  
							
	ORDER BY A.IVITM ASC;
GO
SET QUOTED_IDENTIFIER OFF 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetProdPublishBasicDetail'))
BEGIN
	DROP  PROCEDURE  [DBO].INV_GetProdPublishBasicDetail 
END
GO

SET QUOTED_IDENTIFIER ON
GO

-- #bl_class							Premier.Inventory.GetProdPublishBasicDetailCommand.cs
-- #desc								Returns the basic detail of all the products
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param @StoreId						Store Id
-- #param @WhereCondition				Where Condition
-- #param @RetrieveNonStockProducts		Retrieve Non Stock Products
-- #param @SortBy						Sort By Colum name
-- #param @SortDir						Sort Dir ASC / DESC
-- #param @PageIndex					Paging - Current page
-- #param @PageSize						Paging - Products to be shown

CREATE PROCEDURE [DBO].INV_GetProdPublishBasicDetail
(
	 @StoreId					NVARCHAR(3),
	 @WhereCondition			NVARCHAR(MAX),
	 @RetrieveNonStockProducts	INT,
	 @SortBy					NVARCHAR(20),
	 @SortDir					NVARCHAR(1),
	 @PageIndex					INT,
	 @PageSize					INT
)
AS
BEGIN
	-- Get item master data
	BEGIN --Region Items Data
		DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = '';
		DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';
		DECLARE @INSERT_DYNAMIC NVARCHAR(1000) = N'INSERT INTO #PRODUCTMASTERBASICDETAILTABLE (ShortProductNumber, LongProductNumber, AuxiliaryProductNumber, Description1, Description2, StockingType, InventoryFlag, LineType, PrimaryUom, PricingUom, ShippingUom, AbcCodeSales, AbcCodeMargin, AbcCodeInvestment, UpcNumber, SCType, MatrixTemplate, MatrixControlled, Segment1, CycleCountCategory, CategoryCode10, CategoryCode1, CategoryCode2, CategoryCode3, CategoryCode4, CategoryCode5, CategoryCode6, CategoryCode7, CategoryCode8, CategoryCode9, ShippingCommodityClass, ShippingConditionsCode, SalesCode10, SalesCode1, SalesCode2, SalesCode3, SalesCode4, SalesCode5, SalesCode6, SalesCode7, SalesCode8, SalesCode9, SearchText, StandardUnitOfMeasure, TotalRowCount)';
		DECLARE @SORT_DYNAMIC	NVARCHAR(36);
		DECLARE @SORTDIR_DYNAMIC NVARCHAR(5);
		DECLARE @RowStart INT;
		DECLARE @RowEnd INT;
		
		SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
		SET @ROWEND = @PageIndex * @PageSize	

		--Temporary table
		CREATE TABLE #PRODUCTMASTERBASICDETAILTABLE (
			ShortProductNumber			FLOAT,
			LongProductNumber			NVARCHAR(25)	collate DATABASE_DEFAULT,
			AuxiliaryProductNumber		NVARCHAR(25)	collate DATABASE_DEFAULT,
			Description1			NVARCHAR(30)	collate DATABASE_DEFAULT,
			Description2			NVARCHAR(30)	collate DATABASE_DEFAULT,
			StockingType			NVARCHAR(1)		collate DATABASE_DEFAULT,
			InventoryFlag			NVARCHAR(1)		collate DATABASE_DEFAULT,
			LineType				NVARCHAR(2)		collate DATABASE_DEFAULT,
			PrimaryUom				NCHAR(2)		collate DATABASE_DEFAULT,
			PricingUom				NCHAR(2)		collate DATABASE_DEFAULT,
			ShippingUom				NVARCHAR(2)		collate DATABASE_DEFAULT,
			AbcCodeSales			NVARCHAR(1)		collate DATABASE_DEFAULT,
			AbcCodeMargin			NVARCHAR(1)		collate DATABASE_DEFAULT,
			AbcCodeInvestment		NVARCHAR(1)		collate DATABASE_DEFAULT,
			UpcNumber				NVARCHAR(13)	collate DATABASE_DEFAULT,
			SCType					NVARCHAR(1)		collate DATABASE_DEFAULT,
			MatrixTemplate			NVARCHAR(20)	collate DATABASE_DEFAULT,
			MatrixControlled		NVARCHAR(1)		collate DATABASE_DEFAULT,
			Segment1				NVARCHAR(10)	collate DATABASE_DEFAULT,
			CycleCountCategory		NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode10			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode1			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode2			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode3			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode4			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode5			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode6			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode7			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode8			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode9			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			ShippingCommodityClass	NVARCHAR(3)		collate DATABASE_DEFAULT, 
			ShippingConditionsCode	NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode10				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode1				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode2				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode3				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode4				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode5				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode6				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode7				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode8				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode9				NVARCHAR(6)		collate DATABASE_DEFAULT,
			SearchText				NVARCHAR(30)	collate DATABASE_DEFAULT,
			StandardUnitOfMeasure	NVARCHAR(2)		collate DATABASE_DEFAULT,
			TotalRowCount			INT
		)

			/* Dynamic sort direction statement */
		SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

				/* Dynamic sort statement */
		SET @SORT_DYNAMIC = CASE @SortBy 
			WHEN 'ShortProductNumber' 		THEN 'A.IMITM'
			WHEN 'LongProductNumber' 		THEN 'A.IMLITM'
			WHEN 'AuxiliaryProductNumber' 	THEN 'A.IMAITM'
			WHEN 'Description1'  		THEN 'A.IMDSC1'
			WHEN 'Description2' 		THEN 'A.IMDSC2'
			WHEN 'StockingType'  		THEN 'A.IMSTKT'
			WHEN 'InventoryFlag' 		THEN 'A.LFIVI'
			WHEN 'LineType'				THEN 'A.IMLNTY'
			WHEN 'PrimaryUom' 			THEN 'A.IMUOM1'
			WHEN 'PricingUom'			THEN 'A.IMUOM4'
			WHEN 'ShippingUom' 			THEN 'A.IMUOM6'	
			WHEN 'AbcCodeSales' 		THEN 'A.IMABCS'
			WHEN 'AbcCodeMargin' 		THEN 'A.IMABCM'
			WHEN 'AbcCodeInvestment' 	THEN 'A.IMABCI'
			WHEN 'UpcNumber' 			THEN 'A.IMUPCN'
			WHEN 'MatrixTemplate' 		THEN 'A.IMTMPL'
			WHEN 'MatrixControlled' 	THEN 'A.IMMIC'
			WHEN 'Segment1' 			THEN 'A.IMSEG1'
			WHEN 'CycleCountCategory' 	THEN 'A.IMCYCL'
			WHEN 'CategoryCode10' 		THEN 'A.IMPRP0' 
			WHEN 'CategoryCode1' 		THEN 'A.IMPRP1'
			WHEN 'CategoryCode2' 		THEN 'A.IMPRP2'
			WHEN 'CategoryCode3' 		THEN 'A.IMPRP3'
			WHEN 'CategoryCode4' 		THEN 'A.IMPRP4'
			WHEN 'CategoryCode5' 		THEN 'A.IMPRP5'
			WHEN 'CategoryCode6' 		THEN 'A.IMPRP6'
			WHEN 'CategoryCode7' 		THEN 'A.IMPRP7'
			WHEN 'CategoryCode8' 		THEN 'A.IMPRP8'
			WHEN 'CategoryCode9' 		THEN 'A.IMPRP9'
			WHEN 'ShippingCommodityClWHENs' THEN 'A.IMSHCM'
			WHEN 'ShippingConditionsCode' THEN 'A.IMSHCN'
			WHEN 'SalesCode10' 			THEN 'A.IMSRP0'
			WHEN 'SalesCode1' 			THEN 'A.IMSRP1'
			WHEN 'SalesCode2' 			THEN 'A.IMSRP2'
			WHEN 'SalesCode3' 			THEN 'A.IMSRP3'
			WHEN 'SalesCode4' 			THEN 'A.IMSRP4'
			WHEN 'SalesCode5' 			THEN 'A.IMSRP5'
			WHEN 'SalesCode6' 			THEN 'A.IMSRP6'
			WHEN 'SalesCode7' 			THEN 'A.IMSRP7'
			WHEN 'SalesCode8' 			THEN 'A.IMSRP8'
			WHEN 'SalesCode9' 			THEN 'A.IMSRP9'
			WHEN 'SearchText'			THEN 'A.IMSRTX'
			WHEN 'StandardUnitOfMeWHENure' THEN 'A.IMTFLA'
			WHEN 'BranchPlantList'		THEN 'B.IBMCU'
			ELSE 'A.IMITM'
		END
		SET @SORT_DYNAMIC += @SORTDIR_DYNAMIC
		
		IF(@WhereCondition IS NOT NULL AND @WhereCondition <> '*')
		BEGIN				
			SET @WHERE_DYNAMIC = N' AND ' + @WhereCondition;
		END

		SET @SQL_DYNAMIC = N'
		WITH CTE AS (
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				(CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M'' 
					ELSE ''S''	/* Stock */
				END) AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
			INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
			INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = @StoreId
			INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE (A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'') AND 
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' '')))) ' + @WHERE_DYNAMIC;  
			
			/* UNION to retrieve NonStock products */
		IF (@RetrieveNonStockProducts = 1) BEGIN
				SET @SQL_DYNAMIC += N'
			UNION
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				(CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M'' 
					ELSE ''N''	/* NonStock */
				END) AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
				INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = @StoreId
				INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE (A.IMSTKT = N''N'' OR (C.LFIVI <> N''Y'' AND C.LFIVI <> N''D'') AND
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' '')))) ' + @WHERE_DYNAMIC + ' )'; 
			END
			/* Group by to avoid duplicated products */
			ELSE BEGIN
			SET @SQL_DYNAMIC += '
				GROUP BY	A.IMITM	 ,
							A.IMLITM ,
							A.IMAITM ,
							A.IMDSC1 ,
							A.IMDSC2 ,
							A.IMSTKT ,
							C.LFIVI	 ,
							A.IMLNTY ,
							A.IMUOM1 ,
							A.IMUOM4 ,
							A.IMUOM6 ,
							A.IMABCS ,
							A.IMABCM ,
							A.IMABCI ,
							A.IMUPCN ,
							A.IMTMPL ,
							A.IMMIC	,
							A.IMSEG1 ,
							A.IMCYCL , 
							A.IMPRP0 , 
							A.IMPRP1 , 
							A.IMPRP2 , 
							A.IMPRP3 , 
							A.IMPRP4 , 
							A.IMPRP5 , 
							A.IMPRP6 , 
							A.IMPRP7 , 
							A.IMPRP8 , 
							A.IMPRP9 , 
							A.IMSHCM , 
							A.IMSHCN , 
							A.IMSRP0 , 
							A.IMSRP1 , 
							A.IMSRP2 , 
							A.IMSRP3 , 
							A.IMSRP4 , 
							A.IMSRP5 , 
							A.IMSRP6 , 
							A.IMSRP7 , 
							A.IMSRP8 , 
							A.IMSRP9,
							A.IMSRTX,
							A.IMTFLA
			) ';
			END

		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N', PAGING AS (SELECT 
				A.IMITM		AS ShortProductNumber,
				A.IMLITM	AS LongProductNumber,
				A.IMAITM	AS AuxiliaryProductNumber,
				A.IMDSC1	AS Description1,
				A.IMDSC2	AS Description2,
				A.IMSTKT	AS StockingType,
				A.LFIVI		AS InventoryFlag,
				A.IMLNTY	AS LineType,
				A.IMUOM1	AS PrimaryUom,
				A.IMUOM4	AS PricingUom,
				A.IMUOM6	AS ShippingUom,
				A.IMABCS	AS AbcCodeSales,
				A.IMABCM	AS AbcCodeMargin,
				A.IMABCI	AS AbcCodeInvestment,
				A.IMUPCN	AS UpcNumber,
				A.ScType,
				A.IMTMPL	AS MatrixTemplate,
				A.IMMIC		AS MatrixControlled,
				A.IMSEG1	AS Segment1,
				A.IMCYCL	AS CycleCountCategory, 
				A.IMPRP0	AS CategoryCode10, 
				A.IMPRP1	AS CategoryCode1, 
				A.IMPRP2	AS CategoryCode2, 
				A.IMPRP3	AS CategoryCode3, 
				A.IMPRP4	AS CategoryCode4, 
				A.IMPRP5	AS CategoryCode5, 
				A.IMPRP6	AS CategoryCode6, 
				A.IMPRP7	AS CategoryCode7, 
				A.IMPRP8	AS CategoryCode8, 
				A.IMPRP9	AS CategoryCode9, 
				A.IMSHCM	AS ShippingCommodityClass, 
				A.IMSHCN	AS ShippingConditionsCode, 
				A.IMSRP0	AS SalesCode10, 
				A.IMSRP1	AS SalesCode1, 
				A.IMSRP2	AS SalesCode2, 
				A.IMSRP3	AS SalesCode3, 
				A.IMSRP4	AS SalesCode4, 
				A.IMSRP5	AS SalesCode5, 
				A.IMSRP6	AS SalesCode6, 
				A.IMSRP7	AS SalesCode7, 
				A.IMSRP8	AS SalesCode8, 
				A.IMSRP9	AS SalesCode9,
				A.IMSRTX    As SearchText,
				A.IMTFLA	AS StandardUnitOfMeasure,
				ROW_NUMBER() over( ORDER BY ' + @SORT_DYNAMIC + ')	AS RowNumber  
			FROM CTE A ) 
			'+ @INSERT_DYNAMIC +'
			SELECT 
				A.ShortProductNumber,
				A.LongProductNumber,
				A.AuxiliaryProductNumber,
				A.Description1,
				A.Description2,
				A.StockingType,
				A.InventoryFlag,
				A.LineType,
				A.PrimaryUom,
				A.PricingUom,
				A.ShippingUom,
				A.AbcCodeSales,
				A.AbcCodeMargin,
				A.AbcCodeInvestment,
				A.UpcNumber,
				A.ScType,
				A.MatrixTemplate,
				A.MatrixControlled,
				A.Segment1,
				A.CycleCountCategory, 
				A.CategoryCode10, 
				A.CategoryCode1, 
				A.CategoryCode2, 
				A.CategoryCode3, 
				A.CategoryCode4, 
				A.CategoryCode5, 
				A.CategoryCode6, 
				A.CategoryCode7, 
				A.CategoryCode8, 
				A.CategoryCode9, 
				A.ShippingCommodityClass, 
				A.ShippingConditionsCode, 
				A.SalesCode10, 
				A.SalesCode1, 
				A.SalesCode2, 
				A.SalesCode3, 
				A.SalesCode4, 
				A.SalesCode5, 
				A.SalesCode6, 
				A.SalesCode7, 
				A.SalesCode8, 
				A.SalesCode9,
				A.SearchText,
				A.StandardUnitOfMeasure,
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
			FROM PAGING A
			WHERE (A.RowNumber BETWEEN @RowStart AND @RowEnd)
			';

		--Execute the query to fill the items	
	EXECUTE sp_executesql @SQL_DYNAMIC,	N'@StoreId NVARCHAR(3), @ROWSTART INT, @ROWEND INT', @StoreId = @StoreId, @ROWSTART = @ROWSTART, @ROWEND = @ROWEND

	END --End region of Items Data

	-- Get the item information detail from the temporary table
	SELECT 
		ShortProductNumber		AS ShortProductNumber, 
		LongProductNumber		AS LongProductNumber, 
		AuxiliaryProductNumber	AS AuxiliaryProductNumber, 
		B.IMITM					AS ParentProductNumber,
		Description1			AS Description1, 
		Description2			AS Description2, 
		StockingType			AS StockingType, 
		InventoryFlag			AS InventoryFlag, 
		LineType				AS LineType, 
		PrimaryUom				AS PrimaryUom, 
		PricingUom				AS PricingUom, 
		ShippingUom				AS ShippingUom, 
		AbcCodeSales			AS AbcCodeSales, 
		AbcCodeMargin			AS AbcCodeMargin, 
		AbcCodeInvestment		AS AbcCodeInvestment, 
		UpcNumber				AS UpcNumber, 
		SCType					AS SCType, 
		MatrixTemplate			AS MatrixTemplate, 
		MatrixControlled		AS MatrixControlled, 
		Segment1				AS Segment1, 
		CycleCountCategory		AS CycleCountCategory, 
		CategoryCode10			AS CategoryCode10, 
		CategoryCode1			AS CategoryCode1, 
		CategoryCode2			AS CategoryCode2, 
		CategoryCode3			AS CategoryCode3, 
		CategoryCode4			AS CategoryCode4, 
		CategoryCode5			AS CategoryCode5, 
		CategoryCode6			AS CategoryCode6, 
		CategoryCode7			AS CategoryCode7, 
		CategoryCode8			AS CategoryCode8, 
		CategoryCode9			AS CategoryCode9, 
		ShippingCommodityClass	AS ShippingCommodityClass, 
		ShippingConditionsCode	AS ShippingConditionsCode, 
		SalesCode10				AS SalesCode10, 
		SalesCode1				AS SalesCode1, 
		SalesCode2				AS SalesCode2, 
		SalesCode3				AS SalesCode3, 
		SalesCode4				AS SalesCode4, 
		SalesCode5				AS SalesCode5, 
		SalesCode6				AS SalesCode6, 
		SalesCode7				AS SalesCode7, 
		SalesCode8				AS SalesCode8, 
		SalesCode9				AS SalesCode9,
		SearchText				AS SearchText,
		StandardUnitOfMeasure	AS StandardUnitOfMeasure, 
		TotalRowCount			AS TotalRowCount
	FROM #PRODUCTMASTERBASICDETAILTABLE A
	LEFT OUTER JOIN [SCDATA].F4101 B	/* Resolve parent Product Number */	
	ON B.IMTMPL = A.MatrixTemplate 	
	AND B.IMSEG1 = A.Segment1 	
	AND B.IMMIC = '1'	
	AND A.matrixControlled = '2';

	/* Products MCUs */
	SELECT
			D.shortProductNumber	AS ShortProductNumber,
			A.MCMCU					AS BranchPlant
		FROM
			#PRODUCTMASTERBASICDETAILTABLE D 
		INNER JOIN [SCDATA].F4102 C ON
			C.IBITM = D.shortProductNumber
		INNER JOIN [SCDATA].F0006 A ON
			C.IBMCU = A.MCMCU;


	DROP TABLE #PRODUCTMASTERBASICDETAILTABLE
END
GO
SET QUOTED_IDENTIFIER OFF 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetProdPublishDetail'))
BEGIN
	DROP  PROCEDURE  [DBO].INV_GetProdPublishDetail
END
GO

SET QUOTED_IDENTIFIER ON
GO

-- #bl_class							Premier.Inventory.GetItemPublishDetailCommand.cs
-- #desc								Returns the detail of all the items
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param @StoreId						Store Id
-- #param @LongProductNumbersXML		Long Product Numbers XML
-- #param @WhereCondition				Where Condition
-- #param @RetrieveNonStockProducts		Retrieve Non Stock Products
-- #param @IsPreviewMode				Is Preview mode: only return two result sets: Products and ProductsMCUs.
-- #param @SortBy						Sort By Colum name
-- #param @SortDir						Sort Dir ASC / DESC
-- #param @PageIndex					Paging - Current page
-- #param @PageSize						Paging - Products to be shown

CREATE PROCEDURE [DBO].INV_GetProdPublishDetail
(
	 @StoreId					NVARCHAR(3),
	 @LongProductNumbersXML		XML,
	 @WhereCondition			NVARCHAR(MAX),
	 @RetrieveNonStockProducts	INT,
	 @IsPreviewMode				INT=0,
	 @SortBy					NVARCHAR(20)='',
	 @SortDir					NVARCHAR(1)='A',
	 @PageIndex					INT,
	 @PageSize					INT
)
AS
BEGIN
	-- Get item master data
	BEGIN --Region Products Data
		DECLARE @SQL_DYNAMIC     NVARCHAR(MAX) = '';
		DECLARE @WHERE_DYNAMIC   NVARCHAR(MAX) = '';
		DECLARE @INSERT_DYNAMIC  NVARCHAR(1000) = N'INSERT INTO #PRODMASTERDETAILTABLE (ShortProductNumber, LongProductNumber, AuxiliaryProductNumber, Description1, Description2, StockingType, InventoryFlag, LineType, PrimaryUom, PricingUom, ShippingUom, AbcCodeSales, AbcCodeMargin, AbcCodeInvestment, UpcNumber, SCType, MatrixTemplate, MatrixControlled, Segment1, CycleCountCategory, CategoryCode10, CategoryCode1, CategoryCode2, CategoryCode3, CategoryCode4, CategoryCode5, CategoryCode6, CategoryCode7, CategoryCode8, CategoryCode9, ShippingCommodityClass, ShippingConditionsCode, SalesCode10, SalesCode1, SalesCode2, SalesCode3, SalesCode4, SalesCode5, SalesCode6, SalesCode7, SalesCode8, SalesCode9, SearchText, StandardUnitOfMeasure, TotalRowCount)';
		DECLARE @SORT_DYNAMIC	 NVARCHAR(36);
		DECLARE @SORTDIR_DYNAMIC NVARCHAR(5);
		DECLARE @RowStart INT;
		DECLARE @RowEnd INT;
		
		--Temporary table
		CREATE TABLE #PRODMASTERDETAILTABLE (
			ShortProductNumber			FLOAT,
			LongProductNumber			NVARCHAR(25)	collate DATABASE_DEFAULT,
			AuxiliaryProductNumber		NVARCHAR(25)	collate DATABASE_DEFAULT,
			Description1			NVARCHAR(30)	collate DATABASE_DEFAULT,
			Description2			NVARCHAR(30)	collate DATABASE_DEFAULT,
			StockingType			NVARCHAR(1)		collate DATABASE_DEFAULT,
			InventoryFlag			NVARCHAR(1)		collate DATABASE_DEFAULT,
			LineType				NVARCHAR(2)		collate DATABASE_DEFAULT,
			PrimaryUom				NCHAR(2)		collate DATABASE_DEFAULT,
			PricingUom				NCHAR(2)		collate DATABASE_DEFAULT,
			ShippingUom				NVARCHAR(2)		collate DATABASE_DEFAULT,
			AbcCodeSales			NVARCHAR(1)		collate DATABASE_DEFAULT,
			AbcCodeMargin			NVARCHAR(1)		collate DATABASE_DEFAULT,
			AbcCodeInvestment		NVARCHAR(1)		collate DATABASE_DEFAULT,
			UpcNumber				NVARCHAR(13)	collate DATABASE_DEFAULT,
			SCType					NVARCHAR(1)		collate DATABASE_DEFAULT,
			MatrixTemplate			NVARCHAR(20)	collate DATABASE_DEFAULT,
			MatrixControlled		NVARCHAR(1)		collate DATABASE_DEFAULT,
			Segment1				NVARCHAR(10)	collate DATABASE_DEFAULT,
			CycleCountCategory		NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode10			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode1			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode2			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode3			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode4			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode5			NVARCHAR(3)		collate DATABASE_DEFAULT, 
			CategoryCode6			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode7			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode8			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			CategoryCode9			NVARCHAR(6)		collate DATABASE_DEFAULT, 
			ShippingCommodityClass	NVARCHAR(3)		collate DATABASE_DEFAULT, 
			ShippingConditionsCode	NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode10				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode1				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode2				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode3				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode4				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode5				NVARCHAR(3)		collate DATABASE_DEFAULT, 
			SalesCode6				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode7				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode8				NVARCHAR(6)		collate DATABASE_DEFAULT, 
			SalesCode9				NVARCHAR(6)		collate DATABASE_DEFAULT,
			SearchText				NVARCHAR(30)	collate DATABASE_DEFAULT,
			StandardUnitOfMeasure	NVARCHAR(2)		collate DATABASE_DEFAULT,
			TotalRowCount			INT
		)

		/* Dynamic sort direction statement */
		SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

		/* Dynamic sort statement */
		SET @SORT_DYNAMIC = CASE @SortBy 
			WHEN 'ShortProductNumber' 		THEN 'A.IMITM'
			WHEN 'LongProductNumber' 		THEN 'A.IMLITM'
			WHEN 'AuxiliaryProductNumber' 	THEN 'A.IMAITM'
			WHEN 'Description1'  			THEN 'A.IMDSC1'
			WHEN 'Description2' 			THEN 'A.IMDSC2'
			WHEN 'StockingType'  			THEN 'A.IMSTKT'
			WHEN 'InventoryFlag' 			THEN 'A.LFIVI'
			WHEN 'LineType'					THEN 'A.IMLNTY'
			WHEN 'PrimaryUom' 				THEN 'A.IMUOM1'
			WHEN 'PricingUom'				THEN 'A.IMUOM4'
			WHEN 'ShippingUom' 				THEN 'A.IMUOM6'	
			WHEN 'AbcCodeSales' 			THEN 'A.IMABCS'
			WHEN 'AbcCodeMargin' 			THEN 'A.IMABCM'
			WHEN 'AbcCodeInvestment' 		THEN 'A.IMABCI'
			WHEN 'UpcNumber' 				THEN 'A.IMUPCN'
			WHEN 'MatrixTemplate' 			THEN 'A.IMTMPL'
			WHEN 'MatrixControlled' 		THEN 'A.IMMIC'
			WHEN 'Segment1' 				THEN 'A.IMSEG1'
			WHEN 'CycleCountCategory' 		THEN 'A.IMCYCL'
			WHEN 'CategoryCode10' 			THEN 'A.IMPRP0' 
			WHEN 'CategoryCode1' 			THEN 'A.IMPRP1'
			WHEN 'CategoryCode2' 			THEN 'A.IMPRP2'
			WHEN 'CategoryCode3' 			THEN 'A.IMPRP3'
			WHEN 'CategoryCode4' 			THEN 'A.IMPRP4'
			WHEN 'CategoryCode5' 			THEN 'A.IMPRP5'
			WHEN 'CategoryCode6' 			THEN 'A.IMPRP6'
			WHEN 'CategoryCode7' 			THEN 'A.IMPRP7'
			WHEN 'CategoryCode8' 			THEN 'A.IMPRP8'
			WHEN 'CategoryCode9' 			THEN 'A.IMPRP9'
			WHEN 'ShippingCommodityClWHENs' THEN 'A.IMSHCM'
			WHEN 'ShippingConditionsCode'	THEN 'A.IMSHCN'
			WHEN 'SalesCode10' 				THEN 'A.IMSRP0'
			WHEN 'SalesCode1' 				THEN 'A.IMSRP1'
			WHEN 'SalesCode2' 				THEN 'A.IMSRP2'
			WHEN 'SalesCode3' 				THEN 'A.IMSRP3'
			WHEN 'SalesCode4' 				THEN 'A.IMSRP4'
			WHEN 'SalesCode5' 				THEN 'A.IMSRP5'
			WHEN 'SalesCode6' 				THEN 'A.IMSRP6'
			WHEN 'SalesCode7' 				THEN 'A.IMSRP7'
			WHEN 'SalesCode8' 				THEN 'A.IMSRP8'
			WHEN 'SalesCode9' 				THEN 'A.IMSRP9'
			WHEN 'SearchText'				THEN 'A.IMSRTX'
			WHEN 'StandardUnitOfMeWHENure'	THEN 'A.IMTFLA'
			WHEN 'BranchPlantList'			THEN 'B.IBMCU'
			ELSE 'A.IMITM'
		END
		SET @SORT_DYNAMIC += @SORTDIR_DYNAMIC

		SET @SQL_DYNAMIC = N'
		;WITH CTE AS (
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M'' 
					ELSE ''S''	/* Stock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
			INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
			INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = @StoreId
			INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'') AND 
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' '')))'; 
		
		/* UNION to retrieve NonStock products */
		IF (@RetrieveNonStockProducts = 1) BEGIN
			SET @SQL_DYNAMIC += N'
			UNION
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M'' 
					ELSE ''N''	/* NonStock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
			WHERE A.IMSTKT = N''N'' OR (C.LFIVI <> N''Y'' AND C.LFIVI <> N''D'') AND
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' ''))) ) '; 
		END;
		/* Group by to avoid duplicated products */
		ELSE BEGIN
			SET @SQL_DYNAMIC += '
				GROUP BY	A.IMITM	 ,
							A.IMLITM ,
							A.IMAITM ,
							A.IMDSC1 ,
							A.IMDSC2 ,
							A.IMSTKT ,
							C.LFIVI	 ,
							A.IMLNTY ,
							A.IMUOM1 ,
							A.IMUOM4 ,
							A.IMUOM6 ,
							A.IMABCS ,
							A.IMABCM ,
							A.IMABCI ,
							A.IMUPCN ,
							A.IMTMPL ,
							A.IMMIC	,
							A.IMSEG1 ,
							A.IMCYCL , 
							A.IMPRP0 , 
							A.IMPRP1 , 
							A.IMPRP2 , 
							A.IMPRP3 , 
							A.IMPRP4 , 
							A.IMPRP5 , 
							A.IMPRP6 , 
							A.IMPRP7 , 
							A.IMPRP8 , 
							A.IMPRP9 , 
							A.IMSHCM , 
							A.IMSHCN , 
							A.IMSRP0 , 
							A.IMSRP1 , 
							A.IMSRP2 , 
							A.IMSRP3 , 
							A.IMSRP4 , 
							A.IMSRP5 , 
							A.IMSRP6 , 
							A.IMSRP7 , 
							A.IMSRP8 , 
							A.IMSRP9,
							A.IMSRTX,
							A.IMTFLA
			) ';
		END;

		IF(@WhereCondition IS NOT NULL AND @WhereCondition <> '*')
			BEGIN				
				SET @WHERE_DYNAMIC = N' WHERE ' + @WhereCondition;
			END

		IF(@LongProductNumbersXML IS NOT NULL)
			BEGIN				
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + @INSERT_DYNAMIC + N'
					SELECT 
						A.IMITM		AS ShortProductNumber,
						A.IMLITM	AS LongProductNumber,
						A.IMAITM	AS AuxiliaryProductNumber,
						A.IMDSC1	AS Description1,
						A.IMDSC2	AS Description2,
						A.IMSTKT	AS StockingType,
						A.LFIVI		AS InventoryFlag,
						A.IMLNTY	AS LineType,
						A.IMUOM1	AS PrimaryUom,
						A.IMUOM4	AS PricingUom,
						A.IMUOM6	AS ShippingUom,
						A.IMABCS	AS AbcCodeSales,
						A.IMABCM	AS AbcCodeMargin,
						A.IMABCI	AS AbcCodeInvestment,
						A.IMUPCN	AS UpcNumber,
						A.ScType,
						A.IMTMPL	AS MatrixTemplate,
						A.IMMIC		AS MatrixControlled,
						A.IMSEG1	AS Segment1,
						A.IMCYCL	AS CycleCountCategory, 
						A.IMPRP0	AS CategoryCode10, 
						A.IMPRP1	AS CategoryCode1, 
						A.IMPRP2	AS CategoryCode2, 
						A.IMPRP3	AS CategoryCode3, 
						A.IMPRP4	AS CategoryCode4, 
						A.IMPRP5	AS CategoryCode5, 
						A.IMPRP6	AS CategoryCode6, 
						A.IMPRP7	AS CategoryCode7, 
						A.IMPRP8	AS CategoryCode8, 
						A.IMPRP9	AS CategoryCode9, 
						A.IMSHCM	AS ShippingCommodityClass, 
						A.IMSHCN	AS ShippingConditionsCode, 
						A.IMSRP0	AS SalesCode10, 
						A.IMSRP1	AS SalesCode1, 
						A.IMSRP2	AS SalesCode2, 
						A.IMSRP3	AS SalesCode3, 
						A.IMSRP4	AS SalesCode4, 
						A.IMSRP5	AS SalesCode5, 
						A.IMSRP6	AS SalesCode6, 
						A.IMSRP7	AS SalesCode7, 
						A.IMSRP8	AS SalesCode8, 
						A.IMSRP9	AS SalesCode9,
						A.IMSRTX    As SearchText,
						A.IMTFLA	AS StandardUnitOfMeasure,
						0 AS TotalRowCount
					FROM CTE A
					INNER JOIN @LongProductNumbersXML.nodes(''/items/item'') AS items(item)
						ON items.item.value(''.'',''NVARCHAR(25)'') = A.IMLITM 
					' + @WHERE_DYNAMIC;
			END
		ELSE
			BEGIN
			SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
			SET @ROWEND = @PageIndex * @PageSize	
			--Concat Row Count for paging scenario only
			SET @SQL_DYNAMIC = @SQL_DYNAMIC + N', PAGING AS (SELECT 
				A.IMITM		AS ShortProductNumber,
				A.IMLITM	AS LongProductNumber,
				A.IMAITM	AS AuxiliaryProductNumber,
				A.IMDSC1	AS Description1,
				A.IMDSC2	AS Description2,
				A.IMSTKT	AS StockingType,
				A.LFIVI		AS InventoryFlag,
				A.IMLNTY	AS LineType,
				A.IMUOM1	AS PrimaryUom,
				A.IMUOM4	AS PricingUom,
				A.IMUOM6	AS ShippingUom,
				A.IMABCS	AS AbcCodeSales,
				A.IMABCM	AS AbcCodeMargin,
				A.IMABCI	AS AbcCodeInvestment,
				A.IMUPCN	AS UpcNumber,
				A.ScType,
				A.IMTMPL	AS MatrixTemplate,
				A.IMMIC		AS MatrixControlled,
				A.IMSEG1	AS Segment1,
				A.IMCYCL	AS CycleCountCategory, 
				A.IMPRP0	AS CategoryCode10, 
				A.IMPRP1	AS CategoryCode1, 
				A.IMPRP2	AS CategoryCode2, 
				A.IMPRP3	AS CategoryCode3, 
				A.IMPRP4	AS CategoryCode4, 
				A.IMPRP5	AS CategoryCode5, 
				A.IMPRP6	AS CategoryCode6, 
				A.IMPRP7	AS CategoryCode7, 
				A.IMPRP8	AS CategoryCode8, 
				A.IMPRP9	AS CategoryCode9, 
				A.IMSHCM	AS ShippingCommodityClass, 
				A.IMSHCN	AS ShippingConditionsCode, 
				A.IMSRP0	AS SalesCode10, 
				A.IMSRP1	AS SalesCode1, 
				A.IMSRP2	AS SalesCode2, 
				A.IMSRP3	AS SalesCode3, 
				A.IMSRP4	AS SalesCode4, 
				A.IMSRP5	AS SalesCode5, 
				A.IMSRP6	AS SalesCode6, 
				A.IMSRP7	AS SalesCode7, 
				A.IMSRP8	AS SalesCode8, 
				A.IMSRP9	AS SalesCode9,
				A.IMSRTX    As SearchText,
				A.IMTFLA	AS StandardUnitOfMeasure,
				ROW_NUMBER() over(ORDER BY ' + @SORT_DYNAMIC + ' )	AS RowNumber 
			FROM CTE A 
			' + @WHERE_DYNAMIC +' ) 
			'+ @INSERT_DYNAMIC +'
			SELECT 
				A.ShortProductNumber,
				A.LongProductNumber,
				A.AuxiliaryProductNumber,
				A.Description1,
				A.Description2,
				A.StockingType,
				A.InventoryFlag,
				A.LineType,
				A.PrimaryUom,
				A.PricingUom,
				A.ShippingUom,
				A.AbcCodeSales,
				A.AbcCodeMargin,
				A.AbcCodeInvestment,
				A.UpcNumber,
				A.ScType,
				A.MatrixTemplate,
				A.MatrixControlled,
				A.Segment1,
				A.CycleCountCategory, 
				A.CategoryCode10, 
				A.CategoryCode1, 
				A.CategoryCode2, 
				A.CategoryCode3, 
				A.CategoryCode4, 
				A.CategoryCode5, 
				A.CategoryCode6, 
				A.CategoryCode7, 
				A.CategoryCode8, 
				A.CategoryCode9, 
				A.ShippingCommodityClass, 
				A.ShippingConditionsCode, 
				A.SalesCode10, 
				A.SalesCode1, 
				A.SalesCode2, 
				A.SalesCode3, 
				A.SalesCode4, 
				A.SalesCode5, 
				A.SalesCode6, 
				A.SalesCode7, 
				A.SalesCode8, 
				A.SalesCode9,
				A.SearchText,
				A.StandardUnitOfMeasure,
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
			FROM PAGING A
			WHERE (A.RowNumber BETWEEN @RowStart AND @RowEnd)
			';
			END
		--Execute the query to fill the items	
		EXECUTE sp_executesql @SQL_DYNAMIC,	N'@StoreId NVARCHAR(3), @LongProductNumbersXML XML, @ROWSTART INT, @ROWEND INT', @StoreId = @StoreId, @LongProductNumbersXML = @LongProductNumbersXML, @ROWSTART = @ROWSTART, @ROWEND = @ROWEND

	END --End region of Products Data

	-- Get the item information detail from the temporary table
	SELECT 
		ShortProductNumber			AS ShortProductNumber, 
		LongProductNumber			AS LongProductNumber, 
		AuxiliaryProductNumber		AS AuxiliaryProductNumber, 
		B.IMITM					AS ParentProductNumber,
		Description1			AS Description1, 
		Description2			AS Description2, 
		StockingType			AS StockingType, 
		InventoryFlag			AS InventoryFlag, 
		LineType				AS LineType, 
		PrimaryUom				AS PrimaryUom, 
		PricingUom				AS PricingUom, 
		ShippingUom				AS ShippingUom, 
		AbcCodeSales			AS AbcCodeSales, 
		AbcCodeMargin			AS AbcCodeMargin, 
		AbcCodeInvestment		AS AbcCodeInvestment, 
		UpcNumber				AS UpcNumber, 
		SCType					AS SCType, 
		MatrixTemplate			AS MatrixTemplate, 
		MatrixControlled		AS MatrixControlled, 
		Segment1				AS Segment1, 
		CycleCountCategory		AS CycleCountCategory, 
		CategoryCode10			AS CategoryCode10, 
		CategoryCode1			AS CategoryCode1, 
		CategoryCode2			AS CategoryCode2, 
		CategoryCode3			AS CategoryCode3, 
		CategoryCode4			AS CategoryCode4, 
		CategoryCode5			AS CategoryCode5, 
		CategoryCode6			AS CategoryCode6, 
		CategoryCode7			AS CategoryCode7, 
		CategoryCode8			AS CategoryCode8, 
		CategoryCode9			AS CategoryCode9, 
		ShippingCommodityClass	AS ShippingCommodityClass, 
		ShippingConditionsCode	AS ShippingConditionsCode, 
		SalesCode10				AS SalesCode10, 
		SalesCode1				AS SalesCode1, 
		SalesCode2				AS SalesCode2, 
		SalesCode3				AS SalesCode3, 
		SalesCode4				AS SalesCode4, 
		SalesCode5				AS SalesCode5, 
		SalesCode6				AS SalesCode6, 
		SalesCode7				AS SalesCode7, 
		SalesCode8				AS SalesCode8, 
		SalesCode9				AS SalesCode9,
		SearchText				AS SearchText,
		TotalRowCount			AS TotalRowCount
	FROM #PRODMASTERDETAILTABLE A
	LEFT OUTER JOIN [SCDATA].F4101 B	/* Resolve parent Product Number */	
	ON B.IMTMPL = A.MatrixTemplate 	
	AND B.IMSEG1 = A.Segment1 	
	AND B.IMMIC = '1'	
	AND A.matrixControlled = '2';

	/* Products MCUs */
	SELECT
			D.ShortProductNumber	AS ShortProductNumber,
			A.MCMCU					AS BranchPlant
		FROM
			#PRODMASTERDETAILTABLE D 
		INNER JOIN [SCDATA].F4102 C ON
			C.IBITM = D.shortProductNumber
		INNER JOIN [SCDATA].F0006 A ON
			C.IBMCU = A.MCMCU;

	IF (@IsPreviewMode = 0) 
		BEGIN --Region Unit Of Measure
	--Temporary table
			CREATE TABLE #PRODUNITOFMEASURETABLE (
			shortProductNumber			FLOAT,
			unitOfMeasure			NVARCHAR(3)		collate DATABASE_DEFAULT
		)

			/* Specific UOMs */
			INSERT INTO #PRODUNITOFMEASURETABLE (shortProductNumber, unitOfMeasure)
		SELECT DISTINCT ShortProductNumber, UOM
		FROM 
		(
			SELECT 
				PrimaryUom,
				PricingUom,
				UMRUM,
				UMUM,
				ShortProductNumber
			FROM #PRODMASTERDETAILTABLE A
			LEFT OUTER JOIN [SCDATA].F41002 B
				ON B.UMITM = A.shortProductNumber
			WHERE A.StandardUnitOfMeasure = N''
		) U
		UNPIVOT (UOM FOR UM IN
				(PrimaryUom, PricingUom, UMRUM, UMUM)) AS O

			/* Global UOMs */
			INSERT INTO #PRODUNITOFMEASURETABLE (shortProductNumber, unitOfMeasure)
		SELECT DISTINCT ShortProductNumber, UOM
		FROM 
		(
			SELECT 
				PrimaryUom,
				PricingUom,
				UCRUM,
				UCUM,
				ShortProductNumber
			FROM #PRODMASTERDETAILTABLE A
			LEFT OUTER JOIN [SCDATA].F41003 B
				ON B.UCRUM IN (A.PrimaryUom, A.PricingUom)
				OR B.UCUM IN (A.PrimaryUom, A.PricingUom)
			WHERE A.StandardUnitOfMeasure = N'1'
		) U
		UNPIVOT (UOM FOR UM IN
				(PrimaryUom, PricingUom, UCRUM, UCUM)) AS O

			/* Unit of measure List */
			SELECT A.ShortProductNumber, A.UnitOfMeasure
			FROM #PRODUNITOFMEASURETABLE A
			
			/* Global UOMs */
			SELECT
			A.UCUM	AS UnitOfMeasure,
			A.UCRUM AS UnitOfMeasureTo, 
			A.UCCONV AS ConversionFactor
		FROM
			[SCDATA].F41003 A;

			/* Unit of measure conversion Factory */
			SELECT 
			A.shortProductNumber AS ShortProductNumber, 
			B.UMMCU AS BranchPlant,
			B.UMUM	AS UnitOfMeasure,
			B.UMRUM AS UnitOfMeasureTo, 
			B.UMCONV AS ConversionFactor
		FROM
			#PRODMASTERDETAILTABLE A
		INNER JOIN [SCDATA].F41002 B
			ON B.UMITM = A.shortProductNumber
			AND (A.primaryUom IN (B.UMUM, B.UMRUM))
		WHERE A.StandardUnitOfMeasure = N'';

			DROP TABLE #PRODUNITOFMEASURETABLE
		END ----Region Unit Of Measure

	DROP TABLE #PRODMASTERDETAILTABLE
END
GO
SET QUOTED_IDENTIFIER OFF 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetPunchOutProductList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetPunchOutProductList
	END

GO

-- #desc							Get PunchOut Product Info List
-- #bl_class						Premier.Inventory.PunchOutProductList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param ShortProductNumbersXML	Short Product Numbers XML	<punchOutProducts><punchOutProduct><![CDATA[60020]]></punchOutProduct></punchOutProducts>


CREATE PROCEDURE [DBO].INV_GetPunchOutProductList

	@ShortProductNumbersXML	XML 

AS	
BEGIN

	DECLARE @CurrentJulianDate NUMERIC
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())

	;WITH CTE AS 
		(
			SELECT punchOutProducts.punchOutProduct.value('.','NVARCHAR(25)') AS ShortProductNumber
			FROM @ShortProductNumbersXML.nodes('/punchOutProducts/punchOutProduct') AS punchOutProducts(punchOutProduct)
		)
		SELECT 
			IM.IMITM  AS ProductNumber,		
			CF.IVCITM AS ManufacturerId,
			DR.DRDL01 AS ManufacturerName	
		FROM CTE X
		INNER JOIN [SCDATA].F4101 IM
			ON IM.IMITM = X.ShortProductNumber
		LEFT JOIN [SCCTL].F0005 DR
			ON LTRIM(RTRIM(DR.DRKY)) = LTRIM(RTRIM(IM.IMSRP9))
			AND DRSY = '41' AND DRRT = '09'		
		LEFT OUTER JOIN [SCDATA].F4104 CF
            ON CF.IVXRT = 'M'
            AND CF.IVITM = IM.IMITM
			AND @CurrentJulianDate BETWEEN CF.IVEFTJ AND CF.IVEXDJ
		OPTION ( OPTIMIZE FOR ( @ShortProductNumbersXML = NULL )); 
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetSupplierAddressBookInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetSupplierAddressBookInfo
	END

GO

-- #desc				Get Supplier Address Book Info
-- #bl_class			Premier.Inventory.SupplierAddressBookInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param AddressNumber	Address Number
-- #param ContactID		ContactID

CREATE Procedure [DBO].INV_GetSupplierAddressBookInfo
(
    @AddressNumber	FLOAT,
    @ContactID		FLOAT
)
AS
	SELECT
		WWAN8	AS AddressNumber,
		WWIDLN	AS ContactId,
		WWMLNM	AS MailingName		  
	FROM 
		[SCDATA].F0111
	WHERE
		WWAN8 = @AddressNumber 
		AND WWIDLN = @ContactID;
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetTemplateAndSegmentList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetTemplateAndSegmentList
	END

GO

-- #desc				Gets list of Matrix Extended segments
-- #bl_class			Premier.Inventory.TemplateAndSegmentList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].INV_GetTemplateAndSegmentList
AS
BEGIN 
	;WITH CTE AS (
		SELECT
			S0TMPL		AS TEMPLATE,
			S0SEG1		AS SEGMENT1,
			T7SGD1		AS Segment1Description,
			T7SGD2		AS Segment2Description,
			T7SGD3		AS Segment3Description,
			T7SGD4		AS Segment4Description,
			T7SGD5		AS Segment5Description,
			T7SGD6		AS Segment6Description,
			T7SGD7		AS Segment7Description,
			T7SGD8		AS Segment8Description,
			T7SGD9		AS Segment9Description,
			T7SGD0		AS Segment0Description,
			ROW_NUMBER() OVER(PARTITION BY A.S0TMPL, A.S0SEG1 ORDER BY B.T7MCU) AS RNUM
		FROM [SCDATA].F41008 A
		INNER JOIN  [SCDATA].F410014 B
			ON A.S0TMPL = B.T7TMPL
	)
	SELECT 
		A.TEMPLATE,
		A.SEGMENT1,
		A.Segment1Description,
		A.Segment2Description,
		A.Segment3Description,
		A.Segment4Description,
		A.Segment5Description,
		A.Segment6Description,
		A.Segment7Description,
		A.Segment8Description,
		A.Segment9Description,
		A.Segment0Description
	FROM CTE A
	WHERE RNUM = 1;
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetTemplateCatalogNodeList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetTemplateCatalogNodeList
	END
GO

-- #desc					Get Template Catalog Node List
-- #bl_class				Premier.Inventory.TemplateCatalogNodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @TemplateID		Template ID

CREATE Procedure [DBO].INV_GetTemplateCatalogNodeList
	@TemplateID NVARCHAR(10)
AS

BEGIN
	SELECT
		A.CD$9CLGID			AS	CatalogID,
		A.CDUKID			AS	UniqueKeyID,
		B.CADSC1			AS	CatalogDescription,
		A.CDDL01			AS	NodeDescription,
		B.CA$9INID			AS  InstallationID
	FROM
		[SCDATA].FQ67413 A
		INNER JOIN [SCDATA].FQ67412 B 
		ON B.CA$9CLGID = A.CD$9CLGID
	WHERE
		A.CDTMPI = @TemplateID
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetUnitOfMeasure'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetUnitOfMeasure
	END

GO

-- #desc					Read UOM
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @UnitOfMeasure	Unit of measure
-- #param @InstallationID	Installation ID.

CREATE Procedure [DBO].INV_GetUnitOfMeasure
	@InstallationID NVARCHAR(3),
	@UnitOfMeasure  NVARCHAR(2)

AS
	SET NOCOUNT ON

	SELECT 
		A.UM$9INID	InstallationID, 
		A.UMUOM		UnitOfMeasure,
		A.UMDSC1		Description
	FROM 
	 	-- Sales Unit of Measure Master
		[SCDATA].FQ67415 A
	WHERE 
		-- Installation Id filter
		A.UM$9INID = @InstallationID AND 
		-- Unit of Measure filter
		A.UMUOM = @UnitOfMeasure
		
EXEC [DBO].INV_GetUnitOfMeasureLangs @InstallationID, @UnitOfMeasure, null

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetUnitOfMeasureInfo'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetUnitOfMeasureInfo
	END

GO

-- #desc					Read UOM info
-- #bl_class				Premier.Inventory.UnitOfMeasureInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @UnitOfMeasure	Unit of Measure
-- #param @LangPref			Language preference

CREATE Procedure [DBO].INV_GetUnitOfMeasureInfo
	@InstallationID NVARCHAR(3),
	@UnitOfMeasure NVARCHAR(2),
	@LangPref	NVARCHAR(2)		
AS
	SET NOCOUNT ON

	DECLARE @CodeLength  INT

	IF @InstallationID = '***'
	BEGIN
	
		-- Get Code Length
		SET @CodeLength = 0
		SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
			  WHERE DTSY = '00' AND DTRT = 'UM')

		SELECT 
			@InstallationID AS	InstallationID, 
			A.DRKY			AS	UnitOfMeasure,
			A.DRDL01		AS Description
		FROM [SCCTL].F0005 A --- UDC table			
		WHERE 
			A.DRSY = '00'
			AND A.DRRT = 'UM'
			AND SUBSTRING(A.DRKY, 10 - @CodeLength + 1, @CodeLength) = @UnitOfMeasure
	END
	ELSE
	BEGIN
		SELECT 
			A.UM$9INID AS	InstallationID, 
			A.UMUOM	 AS		UnitOfMeasure,
			ISNULL(B.UMDSC1, A.UMDSC1) AS Description
		FROM 
	 		-- Sales Unit of Measure Master
			[SCDATA].FQ67415 A 
			LEFT OUTER JOIN [SCDATA].FQ67415L B
				ON B.UMUOM = A.UMUOM
				AND B.UMLNGP = @LangPref
		WHERE 
			-- Installation Id filter
			A.UM$9INID = @InstallationID
			-- Unit of Measure filter
			AND A.UMUOM = @UnitOfMeasure
	END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetUnitOfMeasureList'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetUnitOfMeasureList
	END

GO


-- #desc					Read UOM list
-- #bl_class				Premier.Inventory.UnitOfMeasureList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @UnitOfMeasure	Unit of Measure
-- #param @Description		Description


CREATE Procedure [DBO].INV_GetUnitOfMeasureList
	@InstallationID NVARCHAR(3) = NULL,
	@UnitOfMeasure NVARCHAR(2),
	@Description NVARCHAR(30),
	@LangPref	NVARCHAR(2)		
AS
	SET NOCOUNT ON

	SELECT 
		A.UM$9INID AS	InstallationID, 
		A.UMUOM	 AS		UnitOfMeasure,
		ISNULL(B.UMDSC1, A.UMDSC1) AS Description
	FROM 
	 	-- Sales Unit of Measure Master
		[SCDATA].FQ67415 A 
		LEFT OUTER JOIN [SCDATA].FQ67415L B
		ON B.UMUOM = A.UMUOM
        AND B.UMLNGP = @LangPref
	WHERE 
		-- Installation Id filter
		A.UM$9INID = @InstallationID
		-- Unit of Measure filter
		AND (@UnitOfMeasure = '*' OR A.UMUOM = @UnitOfMeasure)
		-- Description filter
		AND (@Description = '*' OR
		(B.UMDSC1 IS NULL AND A.UMDSC1  LIKE '%' + @Description + '%' ) OR
		(B.UMDSC1 IS NOT NULL AND B.UMDSC1 LIKE '%' + @Description + '%'))
	ORDER BY 
		A.UMUOM

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_GetUOMListNotRel'))
	BEGIN
		DROP  Procedure  [DBO].INV_GetUOMListNotRel
	END

GO

-- #desc						Get the UOM list of the not related
-- #bl_class					Premier.Inventory.UnitOfMeasureList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Installation			Installation Id
-- #param @UnitOfMeasure		Unit Of Measure
-- #param @Description			Description

CREATE PROCEDURE [DBO].INV_GetUOMListNotRel  
(
    @InstallationID		NVARCHAR(3),
    @UnitOfMeasure		NVARCHAR(2),
    @Description		NVARCHAR(30)
)
AS
SET NOCOUNT ON
	DECLARE	@CODELENGTH INTEGER;
	SET @CODELENGTH = 0;
	SET @CODELENGTH = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'UM');

	SELECT				
		SUBSTRING (A.DRKY,10-@CODELENGTH+1 ,@CODELENGTH)  AS UnitOfMeasure, 
		A.DRDL01 AS Description		
	FROM	[SCCTL].F0005 A
	WHERE	A.DRSY = '00'
	AND	A.DRRT = 'UM'
	AND	SUBSTRING(A.DRKY, 10 - @CodeLength + 1, @CodeLength) NOT IN (SELECT ISNULL(B.UMUOM,'')
							  FROM	 [SCDATA].FQ67415 B
							  WHERE  B.UM$9INID = @InstallationID)
	AND (@UnitOfMeasure = '*' OR SUBSTRING (A.DRKY,10-@CODELENGTH+1 ,@CODELENGTH) = @UnitOfMeasure) 
	AND	(@Description = '*' OR A.DRDL01 LIKE '%' + @Description + '%') 					
	ORDER BY A.DRKY;

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdCatalog'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdCatalog
	END

GO

-- #desc						Update Catalog.
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @EffectiveModeFlag	Effective Mode Flag.		
-- #param @EffectiveFromDate	Effective From Date.
-- #param @EffectiveThruDate	Effective Thru Date.
-- #param @Description			Description.
-- #param @SequenceNumber		SequenceNumber.
-- #param @InstallationID	    InstallationID.
-- #param @MCU					MCU					
-- #param @MCUBehavior			MCU Behavior
-- #param @UserID				User Id
-- #param @ProgramID			Program Id
-- #param @WorkStationID		WorkStation ID		
-- #param @DateUpdated			Date Updated			
-- #param @TimeLastUpdated		Time Last Updated

CREATE PROCEDURE [DBO].INV_UpdCatalog  
	
	@InstallationID			NVARCHAR(3),
	@CatalogId				NVARCHAR(3),
	@EffectiveModeFlag 		FLOAT,	
	@EffectiveFromDate		NUMERIC,
	@EffectiveThruDate		NUMERIC,
	@Description			NVARCHAR(30),
	@SequenceNumber			FLOAT,
	@MCU					NVARCHAR(12),	
	@MCUBehavior			NVARCHAR(1),	
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@WorkStationID			NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC
	
AS

UPDATE [SCDATA].FQ67412
        SET 
			CA$9EFM = @EffectiveModeFlag,
            CAEFFF  = @EffectiveFromDate,
            CAEFFT  = @EffectiveThruDate,
            CADSC1  = @Description,
            CASEQ   = @SequenceNumber,
			CAMCU	= @MCU,
			CA$9CCFU = @MCUBehavior,
			CAUSER  = @UserID,
			CAPID   = @ProgramID,
			CAUPMJ  = @DateUpdated,
			CAUPMT  = @TimeLastUpdated,
			CAJOBN  = @WorkStationID   
     WHERE
           (CA$9CLGID = @CatalogID AND
			CA$9INID = @InstallationID)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdCatalogDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdCatalogDetail
	END

GO


-- #desc						Update Catalog Detail
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID			UniqueKeyID
-- #param @ParentKeyID    	    ParentKeyID.
-- #param @IncludeInSearch		Include In Search.
-- #param @DataItem				Data Item.
-- #param @UserDefinedCode	    User Defined Code.
-- #param @Description			Description.
-- #param @EffectiveModeFlag	Effective Mode Flag.		
-- #param @EffectiveFromDate	Effective From Date.
-- #param @EffectiveThruDate	Effective Thru Date.
-- #param @SequenceNumber		SequenceNumber.
-- #param @ImageName			Image Name.
-- #param @TemplateID			TemplateID.

CREATE PROCEDURE [DBO].INV_UpdCatalogDetail  
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID        FLOAT,
	@ParentKeyID    	FLOAT,	
	@IncludeInSearch	FLOAT,
	@DataItem			NVARCHAR(10),
	@UserDefinedCode	NVARCHAR(10),
	@Description	    NVARCHAR(30),
    @EffectiveModeFlag 	FLOAT,	
	@EffectiveFromDate	NUMERIC,
	@EffectiveThruDate	NUMERIC,
	@SequenceNumber		FLOAT,
	@ImageName			NVARCHAR(256),
	@TemplateID			NVARCHAR(10)
	
AS
	SET NOCOUNT ON
	
UPDATE [SCDATA].FQ67413
     SET
           CD$9PKID =	@ParentKeyID,
           CD$9IIS	=	@IncludeInSearch,
           CDDTAI	=	@DataItem,
           CDKY		=	@UserDefinedCode,
           CDDL01	=	@Description ,
           CD$9EFM	=	@EffectiveModeFlag,
           CDEFFF	=	@EffectiveFromDate,
           CDEFFT	=	@EffectiveThruDate,   
           CDSEQ	=	@SequenceNumber,
           CDIMGURL	=	@ImageName,
           CDTMPI   =	@TemplateID

WHERE
           (CD$9CLGID = @CatalogID AND
			CDUKID    = @UniqueKeyID)  
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdCatalogDetailLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdCatalogDetailLang
	END

GO


-- #desc						Update Catalog Detail Language
-- #bl_class					Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @UniqueKeyID			UniqueKeyID.
-- #param @LangPref	    	    Language Preference.
-- #param @Description			Description.

CREATE PROCEDURE [DBO].INV_UpdCatalogDetailLang  
	
	@CatalogId		    NVARCHAR(3),
	@UniqueKeyID        FLOAT,	
	@LangPref			NVARCHAR(2),
	@Description	    NVARCHAR(30)
	
AS
	SET NOCOUNT ON
	
UPDATE [SCDATA].FQ67413L
     SET
          CDDL01 = @Description

WHERE
           (CD$9CLGID = @CatalogID    AND
			CDUKID    = @UniqueKeyID  AND
			CDLNGP    = @LangPref)   
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdCatalogImages'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdCatalogImages
	END
GO

-- #desc					Update the image reference of the nodes of catalog copied.
-- #bl_class				Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @NewCatalogID		Catalog id to update
-- #param @NodeImagesTrio	String of Trios with node id ~ the related old image id ~ new image id after copy

CREATE PROCEDURE [DBO].INV_UpdCatalogImages
	@NewCatalogID NVARCHAR(3),
	@NodeImagesTrios NVARCHAR(MAX)
	
AS
BEGIN
	DECLARE @Pos INT
	DECLARE @NextString NVARCHAR(20)

	DECLARE @InnerPos INT
	DECLARE @NodeID NVARCHAR(3) = ''
	DECLARE @Old_NewImagesStr NVARCHAR(50) = ''
	DECLARE @OldImageID NVARCHAR(50) = ''
	DECLARE @NewImageID NVARCHAR(50) = ''

    IF (@NodeImagesTrios <> '')
	BEGIN
		SET @Pos = CHARINDEX('|@', @NodeImagesTrios)
		WHILE (@Pos <> 0)
			BEGIN
				SET @NextString = SUBSTRING(@NodeImagesTrios, 1, @Pos - 1)
				SET @NodeImagesTrios = SUBSTRING(@NodeImagesTrios,@Pos + 2,LEN(@NodeImagesTrios))
				SET @Pos = CHARINDEX('|@', @NodeImagesTrios)

				SET @InnerPos = CHARINDEX('~', @NextString)
				SET @NodeID = SUBSTRING(@NextString, 1, @InnerPos - 1)
				
				SET @Old_NewImagesStr = SUBSTRING(@NextString, @InnerPos + 1, LEN(@NextString))
				SET @InnerPos = CHARINDEX('~', @Old_NewImagesStr)

				SET @OldImageID = SUBSTRING(@Old_NewImagesStr, 1, @InnerPos - 1)
				SET @NewImageID = SUBSTRING(@Old_NewImagesStr, @InnerPos + 1, LEN(@Old_NewImagesStr))

				UPDATE [SCDATA].FQ67413 SET CDIMGURL = @NewImageID
					WHERE CD$9CLGID = @NewCatalogID
						AND CDUKID = @NodeID
				
			END --WHILE
	END --IF 
END

GO

  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdCatalogLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdCatalogLang
	END

GO


-- #desc						Update Catalog Language
-- #bl_class					Premier.Inventory.CatalogLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CatalogId			Catalog Id.
-- #param @LangPref	    	    Language Preference.
-- #param @Description			Description.

CREATE PROCEDURE [DBO].INV_UpdCatalogLang  
	
	@CatalogId		    NVARCHAR(3),
	@LangPref			NVARCHAR(2),
	@Description		NVARCHAR(30)
AS

UPDATE [SCDATA].FQ67412L
        SET 
		   CADSC1 = @Description
     WHERE
           (CA$9CLGID = @CatalogID AND
			CALNGP	= @LangPref)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdCatalogNodeItem'))
BEGIN
	DROP  Procedure  [DBO].INV_UpdCatalogNodeItem
END

GO
-- #desc							Update Catalog Node Item
-- #bl_class						Premier.Inventory.CatalogNodeItem.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @CatalogId				Catalog Id
-- #param @UniqueKeyID				UniqueKey ID
-- #param @ItemNumber				Item Number
-- #param @SequenceNumber			Sequence Number

CREATE Procedure [DBO].INV_UpdCatalogNodeItem
	@CatalogId				NVARCHAR(3),
	@UniqueKeyID			FLOAT,
	@ItemNumber				FLOAT,
	@SequenceNumber			FLOAT,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC,
	@WorkStationID			NVARCHAR(10)
AS

	SET NOCOUNT ON

	UPDATE
		[SCDATA].FQ67413I
	SET
		INSEQ	=	@SequenceNumber,
		INURAB	=	@UserReservedNumber,
		INURAT	=	@UserReservedAmount,
		INURCD	=	@UserReservedCode,
		INURDT	=	@UserReservedDate,
		INURRF	=	@UserReservedReference,
		INUSER	=	@UserID,
		INPID	=	@ProgramID,
		INUPMJ	=	@DateUpdated,
		INUPMT	=	@TimeLastUpdated,
		INJOBN	=	@WorkStationID
	WHERE
		IN$9CLGID =	@CatalogId AND
	    INUKID = @UniqueKeyID AND
	    INITM  = @ItemNumber
	    
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdItemWebContentDetail'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdItemWebContentDetail
	END

GO
-- #desc						Update the Item Web Content Detail Information (Paragraphs)
-- #bl_class					Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID	    InstallationID.
-- #param @ItemNumber			ItemNumber.
-- #param @DesignStatus			DesignStatus.
-- #param @UniqueKeyID			Unique Key ID.
-- #param @SequenceNumber		SequenceNumber.
-- #param @ParagraphTitle		ParagraphTitle.
-- #param @HtmlContent			HtmlContent.
-- #param @ActiveInactive		Active-Inactive.

CREATE Procedure [DBO].INV_UpdItemWebContentDetail 
(
	@InstallationID NVARCHAR(3),
	@ItemNumber FLOAT,
	@DesignStatus FLOAT,
	@UniqueKeyID FLOAT,
	@SequenceNumber FLOAT,
	@ParagraphTitle NVARCHAR(30),
	@HtmlContent NTEXT,
	@ActiveInactive NVARCHAR(1),
	@EffectiveFromDate NUMERIC,
	@EffectiveThruDate NUMERIC,
	@UserReservedDate NUMERIC,
	@UserReservedAmount FLOAT,
	@UserReservedNumber FLOAT,
	@UserReservedReference NVARCHAR(15),
	@UserId NVARCHAR(10),
	@ProgramId NVARCHAR(10),
	@WorkStationId NVARCHAR(10),
	@DateUpdated NUMERIC,
	@TimeOfDay NUMERIC

)
AS

	SET NOCOUNT ON
	
UPDATE [SCDATA].FQ67411
SET 
	  CDSEQ = @SequenceNumber,     
      CD$9PTL = @ParagraphTitle,
      CD$9HTML = @HtmlContent, 
      CDASAI = @ActiveInactive,
      CDEFFF = @EffectiveFromDate,
      CDEFFT = @EffectiveThruDate,
      CDURDT = @UserReservedDate,
      CDURAT = @UserReservedAmount,
      CDURAB = @UserReservedNumber,
      CDURRF = @UserReservedReference,
      CDUSER = @UserId,
      CDPID = @ProgramId,
      CDJOBN = @WorkStationId,
      CDUPMJ = @DateUpdated,
      CDTDAY = @TimeOfDay
WHERE CDITM = @ItemNumber
AND	CD$9INID = @InstallationID
AND	CD$9DS = @DesignStatus 
AND	CDUKID = @UniqueKeyID


GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdItemWebContentDetLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdItemWebContentDetLang
	END

GO
-- #desc					Updates Item Web Content Detail/ Language (Paragraphs)
-- #bl_class				Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param @ItemNumber		Item number
-- #param @UniqueKeyID		Unique Key Id
-- #param @InstallationID	Drawer Number.

CREATE Procedure [DBO].INV_UpdItemWebContentDetLang
(
	@InstallationID NVARCHAR(3),
    @ItemNumber FLOAT,
	@UniqueKeyID FLOAT,
	@DesignStatus FLOAT,
	@LangPref NVARCHAR(2),
	@ParagraphTitle NVARCHAR(30),
	@HtmlContent NTEXT,
	@UserReservedCode NVARCHAR(2),
	@UserReservedDate NUMERIC,
	@UserReservedAmount FLOAT,
	@UserReservedNumber FLOAT,
	@UserReservedReference NVARCHAR(15),
	@UserId NVARCHAR(10),
	@ProgramId NVARCHAR(10),
	@WorkStationId NVARCHAR(10),
	@DateUpdated NUMERIC,
	@TimeOfDay NUMERIC
)
AS

SET NOCOUNT ON

UPDATE [SCDATA].FQ67411L
   SET  CL$9PTL = @ParagraphTitle,
		CL$9HTML = @HtmlContent,
	    CLURCD = @UserReservedCode,
        CLURDT = @UserReservedDate,
        CLURAT = @UserReservedAmount,
        CLURAB = @UserReservedNumber,
        CLURRF = @UserReservedReference,
        CLUSER = @UserId,
        CLPID = @ProgramId,
        CLJOBN = @DateUpdated,
        CLUPMJ = @DateUpdated,
        CLTDAY = @TimeOfDay
 WHERE CLITM = @ItemNumber
 AND CL$9INID = @InstallationID
 AND CLUKID = @UniqueKeyID
 AND CLLNGP = @LangPref 
 AND CL$9DS = @DesignStatus

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdItemWebContentHeader'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdItemWebContentHeader
	END

GO
-- #desc					Updates Item Web Content Information
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ItemNumber		Item number
-- #param @InstallationID	Installation ID		
-- #param @DesignStatus		Item Content Design status

CREATE Procedure [DBO].INV_UpdItemWebContentHeader 
(
		@InstallationID NVARCHAR(3),	
        @ItemNumber FLOAT,
		@DesignStatus FLOAT,
		@Description1 NVARCHAR(30),
		@Description2 NVARCHAR(30),
		@Description3 NVARCHAR(30),
		@MessagePriority FLOAT,
		@HtmlContent NTEXT,
		@PortalUrl NVARCHAR(256),
		@UserReservedCode NVARCHAR(2),
		@UserReservedDate NUMERIC,
		@UserReservedAmount FLOAT,
		@UserReservedNumber FLOAT,
		@UserReservedReference NVARCHAR(15),
		@UserId NVARCHAR(10),
		@ProgramId NVARCHAR(10),
		@WorkStationId NVARCHAR(10),
		@DateUpdated NUMERIC,
		@TimeOfDay NUMERIC
)
AS

	SET NOCOUNT ON
	
	UPDATE [SCDATA].FQ67410
   SET CHDSC1 = @Description1
      ,CHDSC2 = @Description2
      ,CHDSC3 = @Description3
      ,CH$9HTML = @HtmlContent
      ,CH$9PRI = @MessagePriority
      ,CHPTURL = @PortalUrl
      ,CHURCD = @UserReservedCode
      ,CHURDT = @UserReservedDate
      ,CHURAT = @UserReservedAmount
      ,CHURAB = @UserReservedNumber
      ,CHURRF = @UserReservedReference
      ,CHUSER = @UserId
      ,CHPID =  @ProgramId
      ,CHJOBN = @WorkStationId
      ,CHUPMJ = @DateUpdated
      ,CHTDAY = @TimeOfDay
 WHERE  CHITM = @ItemNumber AND
         CH$9INID = @InstallationID  AND
         CH$9DS = @DesignStatus
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdItemWebContentHeadLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdItemWebContentHeadLang
	END

GO
-- #desc					Updates Item Content - Language
-- #bl_class				Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ItemNumber		Item Number
-- #param @InstallationID	Installation ID		
-- #param @DesignStatus		Item Design Status

CREATE Procedure [DBO].INV_UpdItemWebContentHeadLang
(
		@InstallationID NVARCHAR(3),	
        @ItemNumber FLOAT,
		@DesignStatus FLOAT,	
		@LangPref NVARCHAR(2),
		@Description1 NVARCHAR(30),
		@Description2 NVARCHAR(30),
		@Description3 NVARCHAR(30),
		@HtmlContent NTEXT,
		@UserReservedCode NVARCHAR(2),
		@UserReservedDate NUMERIC,
		@UserReservedAmount FLOAT,
		@UserReservedNumber FLOAT,
		@UserReservedReference NVARCHAR(15),
		@UserId NVARCHAR(10),
		@ProgramId NVARCHAR(10),
		@WorkStationId NVARCHAR(10),
		@DateUpdated NUMERIC,
		@TimeOfDay NUMERIC
)
AS

	SET NOCOUNT ON
	
	UPDATE [SCDATA].FQ67410L
	SET CLDSC1 = @Description1
      ,CLDSC2 = @Description2
      ,CLDSC3 = @Description3 
      ,CL$9HTML = @HtmlContent
      ,CLURCD = @UserReservedCode
      ,CLURDT = @UserReservedDate
      ,CLURAT = @UserReservedAmount
      ,CLURAB = @UserReservedNumber
      ,CLURRF = @UserReservedReference
      ,CLUSER = @UserId
      ,CLPID =  @ProgramId
      ,CLJOBN = @WorkStationId
      ,CLUPMJ = @DateUpdated
      ,CLTDAY = @TimeOfDay
 WHERE  CLITM = @ItemNumber 
 AND CL$9INID = @InstallationID 
 AND CLLNGP = @LangPref  
 AND CL$9DS = @DesignStatus
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdUnitOfMeasure'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdUnitOfMeasure
	END

GO
-- #desc					Update UOM 
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @UnitOfMeasure	Unit of Measure
-- #param @InstallationID	Installation ID		
-- #param @Description		Drawer Number.

CREATE Procedure [DBO].INV_UpdUnitOfMeasure
	@InstallationID NVARCHAR(3), 
	@UnitOfMeasure NVARCHAR(10),
	@Description NVARCHAR(30)
AS

	SET NOCOUNT ON
	
	UPDATE 
		[SCDATA].FQ67415
	SET  
		UMDSC1 = @Description
	WHERE 
		UM$9INID = @InstallationID
	    AND UMUOM = @UnitOfMeasure




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].INV_UpdUnitOfMeasureLang'))
	BEGIN
		DROP  Procedure  [DBO].INV_UpdUnitOfMeasureLang
	END

GO
-- #desc						Update UOM Lang
-- #bl_class					Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @UnitOfMeasure		Unit of Measure	
-- #param @LangPref				Language Preference
-- #param @Description			Description

CREATE PROCEDURE [DBO].INV_UpdUnitOfMeasureLang 
	@UnitOfMeasure		NVARCHAR(10),
	@Description		NVARCHAR(30),
	@LangPref			NVARCHAR(2)
AS

	UPDATE [SCDATA].FQ67415L
	  SET  UMDSC1 =	 @Description
	WHERE UMUOM =	 @UnitOfMeasure
	  AND UMLNGP =	 @LangPref


  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_AddAboutUs'))
	BEGIN
		DROP  Procedure  [DBO].PRO_AddAboutUs
	END

GO

-- #desc				Creates "How you heard about us" options
-- #bl_class			Premier.Profile.AboutUs.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param @HH$9HHA		How you heard about us id
-- #param @HHDSC1		How you heard about description
-- #param @HH$9ESOM		N/A
-- #param @HH$9POSA		N/A
-- #param @HH$9WEBA		N/A
-- #param @HHPID		N/A
-- #param @HHJOBN		N/A
-- #param @HHUSER		N/A
-- #param @HHUPMJ		N/A
-- #param @HHUPMT		N/A

CREATE  PROCEDURE [DBO].PRO_AddAboutUs 
  @AboutUsID  NVARCHAR(3),
  @Description    NVARCHAR(30),
  @AllowedOnESOM FLOAT,
  @AllowedOnPOS  FLOAT,
  @AllowedOnWEB  FLOAT,
  @ProgramID    NVARCHAR(10),
  @WorkStationID    NVARCHAR(10),
  @UserID    NVARCHAR(10),
  @DateUpdated    NUMERIC,
  @TimeLastUpdated    NUMERIC
AS

  INSERT INTO [SCDATA].FQ67102
  (
   HH$9HHA,  HHDSC1,  HH$9ESOM, HH$9POSA, HH$9WEBA,
   HHPID,    HHJOBN,  HHUSER,   HHUPMJ,   HHUPMT
  )
  VALUES
  (
   @AboutUsID, @Description, @AllowedOnESOM, @AllowedOnPOS, @AllowedOnWEB, 
   @ProgramID,   @WorkStationID, @UserID,   @DateUpdated,   @TimeLastUpdated
  )


GO

   IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_AddAboutUsLang'))
	BEGIN
		DROP  Procedure  [DBO].PRO_AddAboutUsLang
	END

GO

-- #desc					Create AboutUs language.
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AboutUsID		AboutUs ID
-- #param @LangPref			Language Preference
-- #param @Description		Description

CREATE Procedure [DBO].PRO_AddAboutUsLang
(
	@AboutUsID		NVARCHAR(3),
	@LangPref		NVARCHAR(2),
	@Description	NVARCHAR(30)
)

AS
SET NOCOUNT ON

INSERT INTO [SCDATA].FQ67102L
	(
	 HH$9HHA,  
	 HHLNGP,  
	 HHDSC1
	)
	VALUES
	(
	 @AboutUsID,
	 @LangPref,
	 @Description 
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_AddLineOfBusiness'))
	BEGIN
		DROP  Procedure  [DBO].PRO_AddLineOfBusiness
	END

GO

-- #desc							Create line of business.
-- #bl_class						Premier.Profile.LineOfBusiness.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @LineOfBusinessID			Line of business 
-- #param @Description				Description
-- #param @BranchPlant				Branch Plant
-- #param @AddressBookType			Address type
-- #param @PersonCorporationCode	Person Code
-- #param @AdjustmentSchedule		Adjustment Schedule
-- #param @PriceGroup				Price Group
-- #param @SequenceNumber			Sequence Number
-- #param @CategoryCode01			N/A
-- #param @CategoryCode02			N/A
-- #param @CategoryCode03			N/A
-- #param @CategoryCode04			N/A
-- #param @CategoryCode05			N/A
-- #param @CategoryCode06			N/A
-- #param @CategoryCode07			N/A
-- #param @CategoryCode08			N/A
-- #param @CategoryCode09			N/A
-- #param @CategoryCode10			N/A
-- #param @CategoryCode11			N/A
-- #param @CategoryCode12			N/A
-- #param @CategoryCode13			N/A
-- #param @CategoryCode14			N/A
-- #param @CategoryCode15			N/A
-- #param @CategoryCode16			N/A
-- #param @CategoryCode17			N/A
-- #param @CategoryCode18			N/A
-- #param @CategoryCode19			N/A
-- #param @CategoryCode20			N/A
-- #param @CategoryCode21			N/A
-- #param @CategoryCode22			N/A
-- #param @CategoryCode23			N/A
-- #param @CategoryCode24			N/A
-- #param @CategoryCode25			N/A	
-- #param @CategoryCode26			N/A
-- #param @CategoryCode27			N/A
-- #param @CategoryCode28			N/A
-- #param @CategoryCode29			N/A
-- #param @CategoryCode30			N/A
-- #param @ProgramID				Program ID
-- #param @WorkStationID			WorkStation ID
-- #param @UserID					User ID
-- #param @DateUpdated				Last Date Update
-- #param @TimeLastUpdated			Last Updated time

CREATE Procedure [DBO].PRO_AddLineOfBusiness

		@LineOfBusinessID NVARCHAR(3),
		@Description NVARCHAR(30),
		@BranchPlant NVARCHAR(12),
		@AddressBookType FLOAT,
		@PersonCorporationCode NVARCHAR(1),
		@AdjustmentSchedule NVARCHAR(8),
		@PriceGroup NVARCHAR(8),
		@SequenceNumber FLOAT,
		@CategoryCode01 NVARCHAR(3),
		@CategoryCode02 NVARCHAR(3),
		@CategoryCode03 NVARCHAR(3),
		@CategoryCode04 NVARCHAR(3),
		@CategoryCode05 NVARCHAR(3),
		@CategoryCode06 NVARCHAR(3),
		@CategoryCode07 NVARCHAR(3),
		@CategoryCode08 NVARCHAR(3),
		@CategoryCode09 NVARCHAR(3),
		@CategoryCode10 NVARCHAR(3),
		@CategoryCode11 NVARCHAR(3),
		@CategoryCode12 NVARCHAR(3),
		@CategoryCode13 NVARCHAR(3),
		@CategoryCode14 NVARCHAR(3),
		@CategoryCode15 NVARCHAR(3),
		@CategoryCode16 NVARCHAR(3),
		@CategoryCode17 NVARCHAR(3),
		@CategoryCode18 NVARCHAR(3),
		@CategoryCode19 NVARCHAR(3),
		@CategoryCode20 NVARCHAR(3),
		@CategoryCode21 NVARCHAR(3),
		@CategoryCode22 NVARCHAR(3),
		@CategoryCode23 NVARCHAR(3),
		@CategoryCode24 NVARCHAR(3),
		@CategoryCode25 NVARCHAR(3),
		@CategoryCode26 NVARCHAR(3),
		@CategoryCode27 NVARCHAR(3),
		@CategoryCode28 NVARCHAR(3),
		@CategoryCode29 NVARCHAR(3),
		@CategoryCode30 NVARCHAR(3),
		@UserID NVARCHAR(10),
		@ProgramID NVARCHAR(10),
		@DateUpdated NUMERIC,
		@WorkStationID NVARCHAR(10),
		@TimeLastUpdated NUMERIC
AS

set nocount on

INSERT INTO [SCDATA].FQ67103
	(
	 LB$9LOB,  LBDSC1,  LBMCU,    LB$9TYP,
	 LBTAXC,   LBASN,   LBCPGP,   LBSEQ, 
	 LBAC01,   LBAC02,  LBAC03,   LBAC04, 
	 LBAC05,   LBAC06,  LBAC07,   LBAC08, 
	 LBAC09,   LBAC10,  LBAC11,   LBAC12, 
	 LBAC13,   LBAC14,  LBAC15,   LBAC16, 
	 LBAC17,   LBAC18,  LBAC19,   LBAC20, 
	 LBAC21,   LBAC22,  LBAC23,   LBAC24, 
	 LBAC25,   LBAC26,  LBAC27,   LBAC28, 
	 LBAC29,   LBAC30,  LBPID,    LBJOBN,
	 LBUSER,   LBUPMJ,  LBUPMT
	)
	VALUES
	(
	 @LineOfBusinessID, @Description, @BranchPlant,   @AddressBookType, 
	 @PersonCorporationCode,  @AdjustmentSchedule,  @PriceGroup,  @SequenceNumber, 
	 @CategoryCode01,  @CategoryCode02, @CategoryCode03,  @CategoryCode04, 
	 @CategoryCode05,  @CategoryCode06, @CategoryCode07,  @CategoryCode08, 
	 @CategoryCode09,  @CategoryCode10, @CategoryCode11,  @CategoryCode12, 
	 @CategoryCode13,  @CategoryCode14, @CategoryCode15,  @CategoryCode16, 
	 @CategoryCode17,  @CategoryCode18, @CategoryCode19,  @CategoryCode20, 
	 @CategoryCode21,  @CategoryCode22, @CategoryCode23,  @CategoryCode24, 
	 @CategoryCode25,  @CategoryCode26, @CategoryCode27,  @CategoryCode28, 
	 @CategoryCode29,  @CategoryCode30, @ProgramID,   @WorkStationID,
	 @UserID,  @DateUpdated, @TimeLastUpdated
	)





GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_AddLineOfBusinessLang'))
	BEGIN
		DROP  Procedure  [DBO].PRO_AddLineOfBusinessLang
	END

GO

-- #desc					Create line of business language.
-- #bl_class				Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @LineOfBusinessID	Line of business 
-- #param @LangPref			Language Preference
-- #param @Description		Description

CREATE Procedure [DBO].PRO_AddLineOfBusinessLang
(
	@LineOfBusinessID	NVARCHAR(3),
	@LangPref			NVARCHAR(30),
	@Description		NVARCHAR(30)
)

AS
SET NOCOUNT ON

INSERT INTO [SCDATA].FQ67103L
	(
	 LB$9LOB,  
	 LBLNGP,  
	 LBDSC1
	)
	VALUES
	(
	 @LineOfBusinessID,
	 @LangPref,
	 @Description 
	)





GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_DelAboutUs'))
	BEGIN
		DROP  Procedure  [DBO].PRO_DelAboutUs
	END

GO

-- #desc				Delete AboutUs.
-- #bl_class			Premier.Profile.AboutUs.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @AboutUsID	AboutUsID 

CREATE Procedure [DBO].PRO_DelAboutUs
   @AboutUsID		 NVARCHAR(3)
   
AS
	DELETE 
			[SCDATA].FQ67102 
	WHERE 
			HH$9HHA = @AboutUsID
	
	EXEC [DBO].PRO_DelAboutUsLang @AboutUsID,null

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_DelBankAccountDefault'))
	BEGIN
		DROP  Procedure  [DBO].PRO_DelBankAccountDefault
	END

GO

-- #desc						Delete Default Bank Account.
-- #bl_class					Premier.Profile.BankAccount
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		AddressNumber
-- #param @UniqueId				Unique Id

CREATE Procedure [DBO].PRO_DelBankAccountDefault
(
	@AddressNumber	 FLOAT,
	@UniqueId		 FLOAT
)
AS
	SET NOCOUNT ON
	UPDATE 
		[SCDATA].FQ670030
	SET  
	    BA$9BADEF = '0'
	FROM [SCDATA].FQ670030
	INNER JOIN [SCDATA].F0030
	ON AYUKID = BAUKID
	WHERE 
		AYAN8 = @AddressNumber AND AYUKID = @UniqueId


		 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_DelLineOfBusiness'))
	BEGIN
		DROP  Procedure  [DBO].PRO_DelLineOfBusiness
	END

GO

-- #desc					Delete line of business.
-- #bl_class				Premier.Profile.LineOfBusiness.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @LineOfBusinessID	Line of business 

CREATE Procedure [DBO].PRO_DelLineOfBusiness

	@LineOfBusinessID NVARCHAR(3)
		
	AS

	DELETE 
			[SCDATA].FQ67103 
	WHERE 
			LB$9LOB  = @LineOfBusinessID
			
	EXEC [DBO].PRO_DelLineOfBusinessLang @LineOfBusinessID,null

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_ExcAddLineOfBusinessByInst'))
	BEGIN
		DROP  Procedure  [DBO].PRO_ExcAddLineOfBusinessByInst
	END

GO

-- #desc					Create a join between LOB and Installation
-- #bl_class				Premier.Profile.LineOfBusiness.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @LineOfBusinessID	Line of business 
-- #param @ProgramID		Program ID
-- #param @WorkStationID	WorkStation ID
-- #param @UserID			User ID
-- #param @DateUpdated		Lasr Date Update
-- #param @TimeLastUpdated	Last Updated time

CREATE Procedure [DBO].PRO_ExcAddLineOfBusinessByInst
	@InstallationID NVARCHAR(3),
	@LineOfBusinessID NVARCHAR(3),
	@ProgramID NVARCHAR(10),
	@WorkStationID NVARCHAR(10),
	@UserID NVARCHAR(10),
	@DateUpdated NUMERIC,
	@TimeLastUpdated NUMERIC
AS

	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ671031
	(
		LI$9LOB,  LI$9INID,  LIPID, 
		LIJOBN,   LIUSER,    LIUPMJ,  
		LIUPMT
	)
	VALUES
	(
		@LineOfBusinessID, @InstallationID, @ProgramID, 
		@WorkStationID,  @UserID,   @DateUpdated, 
		@TimeLastUpdated
	)
	
	RETURN
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_ExcGetShipToCount'))
	BEGIN
		DROP  Procedure  [DBO].PRO_ExcGetShipToCount
	END

GO

-- #desc							Get ship tos count by address number AND status
-- #bl_class						Premier.Profile.GetShipToCountCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A
		
--�#param�@StoreId					StoreId
-- #param @Company					Company
-- #param @AddressBookType			AddressBook Type 
-- #param @ParentAddressNumber		Parent Address Number
-- #param @Status					Status Active = 0 (AICUSTS <> 1), Inactive = 1, Any = 2

CREATE PROCEDURE [DBO].PRO_ExcGetShipToCount
    @StoreId		NCHAR(3),
	@Company				NVARCHAR(5),
	@AddressBookType		FLOAT,    
    @ParentAddressNumber	FLOAT,
    @Status					FLOAT,
	@ShipTosCount			INT OUTPUT
AS
  SET NOCOUNT ON
  
  --------------------------Gets the Organization Structure Type
	DECLARE @OrgStrType	NCHAR(3)
	DECLARE @OrgStrTypeINID	NCHAR(3)
	SET @OrgStrTypeINID = @StoreId	

	IF (@AddressBookType = 0) BEGIN
		EXEC [DBO].CMM_GetConstantValue 'ORGSTRTYPE', @OrgStrTypeINID, @OrgStrType OUT

		;WITH SHIPTOS AS 
		(
			SELECT MAAN8 FROM [SCDATA].F0150 WHERE MAPA8 = @ParentAddressNumber AND MAOSTP = @OrgStrType
			UNION ALL 
			SELECT @ParentAddressNumber MAAN8 
		),
		CUSTOMERS AS (
			SELECT ISNULL(B.AIBADT, A.AIBADT) BADT, ISNULL(B.AICUSTS,A.AICUSTS) CUSTS 
			FROM SHIPTOS
			INNER JOIN [SCDATA].F03012 A
				ON MAAN8 = A.AIAN8
			LEFT OUTER JOIN [SCDATA].F03012 B
				ON MAAN8 = B.AIAN8
				AND B.AICO = @Company
			WHERE A.AICO = '00000'
		)
		SELECT @ShipTosCount = COUNT(1)
		FROM CUSTOMERS
		WHERE BADT IN ('S', 'X')
		AND (@Status = 2 OR (@Status= 1 AND CUSTS ='1') OR (@Status = 0 AND CUSTS <> '1'));
	END
	ELSE BEGIN			
		SELECT @ShipTosCount = COUNT(1)
		FROM [SCDATA].FQ670302
		WHERE (PR$9PA8 = @ParentAddressNumber OR  PR$9AN8 = @ParentAddressNumber)
		AND PRBADT IN ('S', 'X')
		AND (@Status = 2 
			OR (@Status= 1 AND PR$9STS  ='1') 
			OR (@Status = 0 AND PR$9STS  <> '1')
			);
	END
	
	SET NOCOUNT OFF

	RETURN @ShipTosCount
 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_ExcLookUp'))
	BEGIN
		DROP  Procedure  [DBO].PRO_ExcLookUp
	END
GO

-- #desc						Gets Customer/Consumer look up information
-- #bl_class					Premier.Profile.LookUpCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @State 				state to search for
-- #param @ZipCode 				zipCode number to search for
-- #param @CompressedName 		Compress name to search for
-- #param @CompressedAddress1 	Compress Address 1 to search for
-- #param @CompressedAddress2 	Compress Address 2 to search for

CREATE Procedure [DBO].PRO_ExcLookUp
(
	@State 		NVARCHAR(3) ,
	@ZipCode	NVARCHAR(12) ,
	@CompressedName NVARCHAR(40) ,
	@CompressedAddress1 NVARCHAR(40) ,
	@CompressedAddress2 NVARCHAR(40) ,
	@AddressType FLOAT
)
AS
SET NOCOUNT ON

 DECLARE @Counter INT
 
 IF(@AddressType = 0) --Customer
 BEGIN
 	
		SELECT 
			CC$9AN8 AS AddressNumber, 
			CC$9TYP AS AddressType,  
			CC$9PA8 AS ParentNumber,
			ISNULL(PS$9ICF,-1) AS IndividualCompanyFlag,
			ABTAXC AS PersonCorporateCode
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].F03012 T0				--Join Customer Master
		ON AICO  = '00000'
		AND	AIAN8 = CC$9AN8
		AND (T0.AIBADT = 'B' OR T0.AIBADT = 'X')	--Billing Type Filter
		LEFT OUTER JOIN  [SCDATA].FQ67107
		ON PS$9AN8 = CC$9AN8
		AND PS$9TYP = 0
		INNER JOIN [SCDATA].F0101
		ON ABAN8 = CC$9AN8
		WHERE 
		CC$9TYP = 0 AND -- Customers Only
		CCADDS = @State AND 
		CCADDZ = @ZipCode  AND 
		CC$9ADCN = @CompressedName AND
		CC$9ADC1 = @CompressedAddress1 AND
		CC$9ADC2 = @CompressedAddress2 
	
 END
 ELSE IF(@AddressType = 1) --Consumer
 BEGIN
 
	SELECT @Counter = COUNT(*) 
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].FQ670302 T0
		ON CC$9AN8 = T0.PR$9AN8
		AND (T0.PRBADT = 'B' OR T0.PRBADT = 'X')	--Billing Type Filter
		WHERE 
		CC$9TYP = 1 AND -- Consumers Only
		CCADDS = @State AND 
		CCADDZ = @ZipCode  AND 
		CC$9ADCN = @CompressedName AND
		CC$9ADC1 = @CompressedAddress1 AND
		CC$9ADC2 = @CompressedAddress2 AND
		T0.PR$9AN8 <> T0.PR$9PA8					--Exclude Parents
		
	IF(@Counter > 0)
	BEGIN
		SELECT 
			CC$9AN8 AS AddressNumber, 
			CC$9TYP AS AddressType,  
			CC$9PA8 AS ParentNumber,
			ISNULL(PS$9ICF,-1) AS IndividualCompanyFlag,
			PRTAXC AS PersonCorporateCode
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].FQ670302 T0				--Join Consumer Master
		ON CC$9AN8 = T0.PR$9AN8
		AND (T0.PRBADT = 'B' OR T0.PRBADT = 'X')	--Billing Type Filter
		LEFT OUTER JOIN  [SCDATA].FQ67107
		ON PS$9AN8 = CC$9AN8
		AND PS$9TYP = 1
		WHERE 
		CC$9TYP = 1 AND -- Consumers Only
		CCADDS = @State AND 
		CCADDZ = @ZipCode  AND 
		CC$9ADCN = @CompressedName AND
		CC$9ADC1 = @CompressedAddress1 AND
		CC$9ADC2 = @CompressedAddress2 AND
		T0.PR$9AN8 <> T0.PR$9PA8					--Exclude Parents
	END
	ELSE
	BEGIN
		SELECT 
			CC$9AN8 AS AddressNumber, 
			CC$9TYP AS AddressType,  
			CC$9PA8 AS ParentNumber,
			ISNULL(PS$9ICF,-1) AS IndividualCompanyFlag,
			PRTAXC AS PersonCorporateCode
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].FQ670302 T0				--Join Consumer Master
		ON CC$9AN8 = T0.PR$9AN8
		AND (T0.PRBADT = 'B' OR T0.PRBADT = 'X')	--Billing Type Filter
		LEFT OUTER JOIN  [SCDATA].FQ67107
		ON PS$9AN8 = CC$9AN8
		AND PS$9TYP = 1
		WHERE 
		CC$9TYP = 1 AND -- Consumers Only
		CCADDS = @State AND 
		CCADDZ = @ZipCode  AND 
		CC$9ADCN = @CompressedName AND
		CC$9ADC1 = @CompressedAddress1 AND
		CC$9ADC2 = @CompressedAddress2 
	END
	
 END

RETURN



 
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_ExcRemLineOfBusinessByInst'))
	BEGIN
		DROP  Procedure  [DBO].PRO_ExcRemLineOfBusinessByInst
	END

GO

-- #desc					Remove a join between LOB and Installation
-- #bl_class				Premier.Profile.LineOfBusiness.cs
-- #db_dependencies			N/A
-- #db_references			N/A 

-- #param @InstallationID	Installation ID
-- #param @LineOfBusinessID	Line of business 

CREATE Procedure [DBO].PRO_ExcRemLineOfBusinessByInst
	@InstallationID NVARCHAR(3),
	@LineOfBusinessID NVARCHAR(3)

AS

	SET NOCOUNT ON

	DELETE 
	
	FROM  
		[SCDATA].FQ671031  
	WHERE 
		LI$9LOB = @LineOfBusinessID AND 
		LI$9INID = @InstallationID  
     
	
	RETURN
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_ExcResolP4210VerRule'))
	BEGIN
		DROP  Procedure  [DBO].PRO_ExcResolP4210VerRule
	END
GO

-- #desc						Resolve P4210 Version Rule
-- #bl_class					Premier.Profile.ResolveP4210VersRuleCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @AddressBookType		Address Book Type
-- #param @AddressNumber		Address Number

CREATE Procedure [DBO].PRO_ExcResolP4210VerRule
	@InstallationID		NVARCHAR(3),
	@AddressBookType	FLOAT,
	@AddressNumber		FLOAT
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

BEGIN
	DECLARE @P4210Version		NVARCHAR(10)
	DECLARE @RuleTypeHierarchy	NVARCHAR(2)
	DECLARE @RuleUniqueId		FLOAT
	DECLARE @CompareValue		NVARCHAR(12)
	DECLARE @RuleCategoryCode	NVARCHAR(2)
	/* Variable Customer/Consumer information */
	DECLARE @PricingGroup		NVARCHAR(8)
	DECLARE @AdjustmentSchedule	NVARCHAR(8)
	DECLARE @State				NVARCHAR(3)
	DECLARE @Country			NVARCHAR(3)
	DECLARE @BusinessUnit		NVARCHAR(12)
	DECLARE @CategoryCode01		NVARCHAR(3)
	DECLARE @CategoryCode02		NVARCHAR(3)
	DECLARE @CategoryCode03		NVARCHAR(3)
	DECLARE @CategoryCode04		NVARCHAR(3)
	DECLARE @CategoryCode05		NVARCHAR(3)
	DECLARE @CategoryCode06		NVARCHAR(3)
	DECLARE @CategoryCode07		NVARCHAR(3)
	DECLARE @CategoryCode08		NVARCHAR(3)
	DECLARE @CategoryCode09		NVARCHAR(3)
	DECLARE @CategoryCode10		NVARCHAR(3)
	DECLARE @CategoryCode11		NVARCHAR(3)
	DECLARE @CategoryCode12		NVARCHAR(3)
	DECLARE @CategoryCode13		NVARCHAR(3)
	DECLARE @CategoryCode14		NVARCHAR(3)
	DECLARE @CategoryCode15		NVARCHAR(3)
	DECLARE @CategoryCode16		NVARCHAR(3)
	DECLARE @CategoryCode17		NVARCHAR(3)
	DECLARE @CategoryCode18		NVARCHAR(3)
	DECLARE @CategoryCode19		NVARCHAR(3)
	DECLARE @CategoryCode20		NVARCHAR(3)
	DECLARE @CategoryCode21		NVARCHAR(3)
	DECLARE @CategoryCode22		NVARCHAR(3)
	DECLARE @CategoryCode23		NVARCHAR(3)
	DECLARE @CategoryCode24		NVARCHAR(3)
	DECLARE @CategoryCode25		NVARCHAR(3)
	DECLARE @CategoryCode26		NVARCHAR(3)
	DECLARE @CategoryCode27		NVARCHAR(3)
	DECLARE @CategoryCode28		NVARCHAR(3)
	DECLARE @CategoryCode29		NVARCHAR(3)
	DECLARE @CategoryCode30		NVARCHAR(3)
	
	/* RuleValues temporary table */
	CREATE TABLE #TMP_TABLE
	(
		UniqueId        FLOAT,
		Hierarchy		FLOAT,
		RuleType		NVARCHAR(2) collate DATABASE_DEFAULT
	)

	/* Cursor to SELECT the hierarchy of the P4210VersRule */
	DECLARE RuleCursor CURSOR FOR
	SELECT UniqueId, RuleType FROM #TMP_TABLE ORDER BY Hierarchy
	
	/* Fill the tmp table with the rule type */
	INSERT INTO #TMP_TABLE
	SELECT
		RHUKID	    UniqueId,
		RHSEQ		Hierarchy,
		RHRUDTP		RuleType
	FROM
		[SCDATA].FQ674230
	WHERE
		RH$9INID =  @InstallationID
	ORDER BY RHSEQ

	/* Get rule values from base installation */
	IF((SELECT COUNT(1) FROM #TMP_TABLE) = 0)	
		BEGIN
			SET @InstallationID = '***'
			INSERT INTO #TMP_TABLE
			SELECT
				RHUKID	    UniqueId,
				RHSEQ		Hierarchy,
				RHRUDTP		RuleType
			FROM
				[SCDATA].FQ674230
			WHERE
				RH$9INID = @InstallationID
			ORDER BY RHSEQ
		END
	
	SET @P4210Version=''
	
	/* Insert into variables (PricingGroup -  AdjustmentSchedule - State - Country - BusinessUnit - CategoryCode) */
	IF((SELECT COUNT(1) FROM #TMP_TABLE) > 0)
	BEGIN
		IF(@AddressBookType = 0) /* CUSTOMER */
		BEGIN
			SELECT
				@PricingGroup = B.AICPGP,
				@AdjustmentSchedule = B.AIASN,
				@State = C.ALADDS,
				@Country = C.ALCTR,
				@BusinessUnit = A.ABMCU,
				@CategoryCode01 = A.ABAC01,
				@CategoryCode02 = A.ABAC02,
				@CategoryCode03 = A.ABAC03,
				@CategoryCode04 = A.ABAC04,
				@CategoryCode05 = A.ABAC05,
				@CategoryCode06 = A.ABAC06,
				@CategoryCode07 = A.ABAC07,
				@CategoryCode08 = A.ABAC08,
				@CategoryCode09 = A.ABAC09,
				@CategoryCode10 = A.ABAC10,
				@CategoryCode11 = A.ABAC11,
				@CategoryCode12 = A.ABAC12,
				@CategoryCode13 = A.ABAC13,
				@CategoryCode14 = A.ABAC14,
				@CategoryCode15 = A.ABAC15,
				@CategoryCode16 = A.ABAC16,
				@CategoryCode17 = A.ABAC17,
				@CategoryCode18 = A.ABAC18,
				@CategoryCode19 = A.ABAC19,
				@CategoryCode20 = A.ABAC20,
				@CategoryCode21 = A.ABAC21,
				@CategoryCode22 = A.ABAC22,
				@CategoryCode23 = A.ABAC23,
				@CategoryCode24 = A.ABAC24,
				@CategoryCode25 = A.ABAC25,
				@CategoryCode26 = A.ABAC26,
				@CategoryCode27 = A.ABAC27,
				@CategoryCode28 = A.ABAC28,
				@CategoryCode29 = A.ABAC29,
				@CategoryCode30 = A.ABAC30
			FROM  [SCDATA].F0101 A
			LEFT OUTER JOIN [SCDATA].F03012 B
				ON B.AIAN8 = A.ABAN8
				AND B.AICO = '00000'
			OUTER APPLY [DBO].CMM_GetEffectiveAddressFnc(A.ABAN8, @CurrentJulianDate) C
			WHERE
				ABAN8 = @AddressNumber
		END
		ELSE IF (@AddressBookType = 1) /* CONSUMER */
		BEGIN
			SELECT
				@PricingGroup = PRCPGP,
				@AdjustmentSchedule = PRASN,
				@State = PRADDS,
				@Country = PRCTR,
				@BusinessUnit = PRMCU,
				@CategoryCode01 = PR$9AC01,
				@CategoryCode02 = PR$9AC02,
				@CategoryCode03 = PR$9AC03,
				@CategoryCode04 = PR$9AC04,
				@CategoryCode05 = PR$9AC05,
				@CategoryCode06 = PR$9AC06,
				@CategoryCode07 = PR$9AC07,
				@CategoryCode08 = PR$9AC08,
				@CategoryCode09 = PR$9AC09,
				@CategoryCode10 = PR$9AC10,
				@CategoryCode11 = PR$9AC11,
				@CategoryCode12 = PR$9AC12,
				@CategoryCode13 = PR$9AC13,
				@CategoryCode14 = PR$9AC14,
				@CategoryCode15 = PR$9AC15,
				@CategoryCode16 = PR$9AC16,
				@CategoryCode17 = PR$9AC17,
				@CategoryCode18 = PR$9AC18,
				@CategoryCode19 = PR$9AC19,
				@CategoryCode20 = PR$9AC20,
				@CategoryCode21 = PR$9AC21,
				@CategoryCode22 = PR$9AC22,
				@CategoryCode23 = PR$9AC23,
				@CategoryCode24 = PR$9AC24,
				@CategoryCode25 = PR$9AC25,
				@CategoryCode26 = PR$9AC26,
				@CategoryCode27 = PR$9AC27,
				@CategoryCode28 = PR$9AC28,
				@CategoryCode29 = PR$9AC29,
				@CategoryCode30 = PR$9AC30
			FROM  [SCDATA].FQ670302
			WHERE
				PR$9AN8 = @AddressNumber
		END

		OPEN RuleCursor
		FETCH NEXT FROM RuleCursor into @RuleUniqueId, @RuleTypeHierarchy
		WHILE @@fetch_status = 0
		BEGIN
			IF @RuleUniqueId > 0
			BEGIN
				/* ----------------------------------------------------------------------------
				 * pricing group, adjustment schedule, state, country, or category codes according to rule type */
				IF @RuleTypeHierarchy IN('PG','AS','ST','CN','AC','CC')
				BEGIN
					IF (@RuleTypeHierarchy = 'PG') BEGIN
						SET @CompareValue = @PricingGroup;END
					ELSE IF (@RuleTypeHierarchy = 'AS') BEGIN
						SET @CompareValue = @AdjustmentSchedule;END
					ELSE IF (@RuleTypeHierarchy = 'ST') BEGIN
						SET @CompareValue = @State;END
					ELSE IF (@RuleTypeHierarchy = 'CN') BEGIN
						SET @CompareValue = @Country;END
					ELSE IF (@RuleTypeHierarchy = 'AC' OR @RuleTypeHierarchy = 'CC')
					BEGIN
						SELECT @RuleCategoryCode = RHRT FROM [SCDATA].FQ674230 WHERE RH$9INID = @InstallationID AND RHUKID = @RuleUniqueId;
						SET @CompareValue =
							CASE @RuleCategoryCode
								WHEN '01' THEN @CategoryCode01
								WHEN '02' THEN @CategoryCode02
								WHEN '03' THEN @CategoryCode03
								WHEN '04' THEN @CategoryCode04
								WHEN '05' THEN @CategoryCode05
								WHEN '06' THEN @CategoryCode06
								WHEN '07' THEN @CategoryCode07
								WHEN '08' THEN @CategoryCode08
								WHEN '09' THEN @CategoryCode09
								WHEN '10' THEN @CategoryCode10
								WHEN '11' THEN @CategoryCode11
								WHEN '12' THEN @CategoryCode12
								WHEN '13' THEN @CategoryCode13
								WHEN '14' THEN @CategoryCode14
								WHEN '15' THEN @CategoryCode15
								WHEN '16' THEN @CategoryCode16
								WHEN '17' THEN @CategoryCode17
								WHEN '18' THEN @CategoryCode18
								WHEN '19' THEN @CategoryCode19
								WHEN '20' THEN @CategoryCode20
								WHEN '21' THEN @CategoryCode21
								WHEN '22' THEN @CategoryCode22
								WHEN '23' THEN @CategoryCode23
								WHEN '24' THEN @CategoryCode24
								WHEN '25' THEN @CategoryCode25
								WHEN '26' THEN @CategoryCode26
								WHEN '27' THEN @CategoryCode27
								WHEN '28' THEN @CategoryCode28
								WHEN '29' THEN @CategoryCode29
								WHEN '30' THEN @CategoryCode30
							END;
					END
					
					
					IF (@RuleTypeHierarchy = 'AC' AND @AddressBookType = 0) OR(@RuleTypeHierarchy = 'CC' AND @AddressBookType = 1) OR (@RuleTypeHierarchy <> 'AC' AND @RuleTypeHierarchy <>'CC')                           
					BEGIN                      
		
						SELECT @P4210Version = RHVER 
						FROM [SCDATA].FQ674230
						INNER JOIN [SCDATA].FQ674231
							ON RD$9INID = RH$9INID 
							AND	RDUKID = RHUKID
							AND RDKY = @CompareValue
						WHERE
							RH$9INID = @InstallationID AND					
							RHUKID = @RuleUniqueId
					END
				END /* END IF */
				
				/* ----------------------------------------------------------------------------
				 * Business Unit */
				IF @RuleTypeHierarchy IN('BU')
				BEGIN
					SET @CompareValue = @BusinessUnit
					
					SELECT @P4210Version = RHVER
					FROM [SCDATA].FQ674230
					INNER JOIN [SCDATA].FQ674231
						ON RD$9INID = RH$9INID 
						AND	RDUKID = RHUKID
						AND RDMCU = @CompareValue
					WHERE 
						RH$9INID = @InstallationID AND
						RHUKID = @RuleUniqueId
				END/* END IF */
				
				/* ----------------------------------------------------------------------------
				 * Address Number */
				IF @RuleTypeHierarchy IN('AB','CS')
				BEGIN
					/* ----------------AddressBookType---------------- */
					IF (@AddressBookType = 0) BEGIN
						SET @CompareValue = 'AB';END
					ELSE IF (@AddressBookType = 1) BEGIN
						SET @CompareValue = 'CS';END
					/* ---------------------------------------------- */
					
					SELECT @P4210Version = RHVER 
					FROM [SCDATA].FQ674230 
					INNER JOIN [SCDATA].FQ674231
						ON RD$9INID = RH$9INID 
						AND	RDUKID = RHUKID
						AND RD$9AN8 = @AddressNumber
					WHERE RHRUDTP = @CompareValue AND
						  RH$9INID = @InstallationID AND
						  RHUKID = @RuleUniqueId
				END/* END IF */
				
			END
		
			IF (@P4210Version <> '')
			BEGIN
				/* Return the P4210 Version */
				BREAK
			END
			FETCH NEXT FROM RuleCursor into @RuleUniqueId, @RuleTypeHierarchy
		END/* WHILE */
	
	CLOSE RuleCursor
	DEALLOCATE RuleCursor
	
	END/* IF */
	
	SELECT @P4210Version AS P4210Version
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_ExcSetBankAccountDefault'))
	BEGIN
		DROP  Procedure  [DBO].PRO_ExcSetBankAccountDefault
	END

GO

-- #desc						Set Default Bank Account.
-- #bl_class					Premier.Profile.BankAccount
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		AddressNumber
-- #param @UniqueId				Unique Id

CREATE Procedure [DBO].PRO_ExcSetBankAccountDefault
(
	@AddressNumber	 FLOAT,
	@UniqueId		 FLOAT
)
AS
	SET NOCOUNT ON
	UPDATE 
		[SCDATA].FQ670030
	SET  
	    BA$9BADEF = '0'
	FROM [SCDATA].FQ670030
	INNER JOIN [SCDATA].F0030
	ON AYUKID = BAUKID
	WHERE 
		AYAN8 = @AddressNumber

	UPDATE 
		[SCDATA].FQ670030
	SET  
	    BA$9BADEF = '1'
	FROM [SCDATA].FQ670030
	INNER JOIN [SCDATA].F0030
	ON AYUKID = BAUKID
	WHERE 
		AYAN8 = @AddressNumber AND AYUKID = @UniqueId


		 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_ExcUpdLOBSequence'))
	BEGIN
		DROP  Procedure  [DBO].PRO_ExcUpdLOBSequence
	END
GO

-- #desc							Update Line Of Business Sequence
-- #bl_class						Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @LineOfBusinessIDs 		Line Of Business IDs

CREATE Procedure [DBO].PRO_ExcUpdLOBSequence
(
	@LineOfBusinessIDs 	 NVARCHAR(MAX)
)
AS

BEGIN
	DECLARE @Pos INT
	DECLARE @SequenceNumb FLOAT = 0
	DECLARE @NextString NVARCHAR(6)

	IF (@LineOfBusinessIDs <> '')
	BEGIN
		SET @Pos = CHARINDEX('|@', @LineOfBusinessIDs)
		WHILE (@Pos <> 0)
		BEGIN
			SET @NextString = substring(@LineOfBusinessIDs, 1, @Pos - 1)
			SET @LineOfBusinessIDs = substring(@LineOfBusinessIDs,@Pos + 2,LEN(@LineOfBusinessIDs))
			SET @Pos = CHARINDEX('|@', @LineOfBusinessIDs)
			SET @SequenceNumb = @SequenceNumb + 1

			UPDATE 
				[SCDATA].FQ67103
			SET
				LBSEQ   = @SequenceNumb
			WHERE 
				LB$9LOB = @NextString
		END
	END
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetAboutUs'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetAboutUs
	END

GO

-- #desc				    Reads "How you heard about us" options.
-- #bl_class				Premier.Profile.AboutUs
-- #db_dependencies			N/A
-- #db_references			N/A			

-- #param @AboutUsID		How you heard about us id


CREATE PROCEDURE [DBO].PRO_GetAboutUs
  @AboutUsID		NVARCHAR(3)

AS
     SELECT A.HH$9HHA AS AboutUsID,
            A.HHDSC1 AS Description,
            A.HH$9ESOM AS AllowedOnESOM, 
            A.HH$9POSA AS AllowedOnPOS, 
            A.HH$9WEBA AS AllowedOnWEB, 
            A.HHPID AS ProgramID,    
            A.HHJOBN AS WorkStationID,   
            A.HHUSER AS UserID,   
   			A.HHUPMJ AS DateUpdated,   
   			A.HHUPMT AS TimeLastUpdated
    FROM [SCDATA].FQ67102 A
    WHERE A.HH$9HHA = @AboutUsID

EXEC [DBO].PRO_GetAboutUsLangs @AboutUsID, null 

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetAboutUsList'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetAboutUsList
	END

GO

-- #desc				    Reads "How you heard about us" options.
-- #bl_class			    Premier.Profile.AboutUsList.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param @AboutUsID		How you heard about us id
-- #param @Description		How you heard about description
-- #param @AllowedOnESOM	N/A
-- #param @AllowedOnPOS		N/A
-- #param @AllowedOnWEB		N/A
-- #param @LangPref			N/A


CREATE PROCEDURE [DBO].PRO_GetAboutUsList
  @AboutUsID		NVARCHAR(3),
  @Description		NVARCHAR(30),
  @AllowedOnESOM	FLOAT,
  @AllowedOnPOS		FLOAT,
  @AllowedOnWEB		FLOAT,
  @LangPref			NVARCHAR(2)
AS
     SELECT HHHED.HH$9HHA AS AboutUsID,
            ISNULL(HHLNGHED.HHDSC1,HHHED.HHDSC1) AS Description,
            HHHED.HH$9ESOM AS AllowedOnESOM, 
            HHHED.HH$9POSA AS AllowedOnPOS, 
            HHHED.HH$9WEBA AS AllowedOnWEB, 
            HHHED.HHPID AS ProgramID,    
            HHHED.HHJOBN AS WorkStationID,   
            HHHED.HHUSER AS UserID,   
   			HHHED.HHUPMJ AS DateUpdated,   
   			HHHED.HHUPMT AS TimeLastUpdated
    FROM [SCDATA].FQ67102 HHHED
	LEFT JOIN [SCDATA].FQ67102L HHLNGHED
         ON HHLNGHED.HH$9HHA = HHHED.HH$9HHA
         AND HHLNGHED.HHLNGP = @LangPref
    WHERE (@AboutUsID = '*' OR HHHED.HH$9HHA LIKE '%' +  @AboutUsID + '%')
    AND (LTRIM(RTRIM(@Description)) = '*' OR
		(HHLNGHED.HHDSC1 IS NULL AND HHHED.HHDSC1 LIKE '%' +  LTRIM(RTRIM(@Description)) + '%') OR
		(HHLNGHED.HHDSC1 IS NOT NULL AND HHLNGHED.HHDSC1 LIKE '%' +  LTRIM(RTRIM(@Description)) + '%'))
	AND (@AllowedOnESOM = 2 OR HHHED.HH$9ESOM = @AllowedOnESOM)
	AND (@AllowedOnPOS = 2 OR HHHED.HH$9POSA = @AllowedOnPOS)
	AND (@AllowedOnWEB = 2 OR HHHED.HH$9WEBA = @AllowedOnWEB)
    ORDER BY HHHED.HH$9HHA, Description

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetAddressBookCatCodeList'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetAddressBookCatCodeList
	END

GO

-- #desc					Get Category Code value list for Customer/Consumer by Address number.
-- #bl_class				Premier.Profile.AddressBookCategoryCodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber	Address Number
-- #param @AddressBookType	Address Book Type

CREATE PROCEDURE [DBO].PRO_GetAddressBookCatCodeList  
(
	@AddressNumber			FLOAT,
	@AddressBookType		FLOAT
)
AS
	IF(@AddressBookType = 1) --CONSUMER
	BEGIN
		SELECT PRDTAI as Code,PRKY as Value
			FROM 
				(
				SELECT 
					PR$9AC01 AC01,PR$9AC02 AC02,PR$9AC03 AC03,PR$9AC04 AC04,PR$9AC05 AC05,PR$9AC06 AC06,PR$9AC07 AC07,PR$9AC08 AC08,PR$9AC09 AC09,PR$9AC10 AC10,
		               PR$9AC11 AC11,PR$9AC12 AC12,PR$9AC13 AC13,PR$9AC14 AC14,PR$9AC15 AC15,PR$9AC16 AC16,PR$9AC17 AC17,PR$9AC18 AC18,PR$9AC19 AC19,PR$9AC20 AC20,
		               PR$9AC21 AC21,PR$9AC22 AC22,PR$9AC23 AC23,PR$9AC24 AC24,PR$9AC25 AC25,PR$9AC26 AC26,PR$9AC27 AC27,PR$9AC28 AC28,PR$9AC29 AC29,PR$9AC30 AC30
				FROM [SCDATA].FQ670302 
				WHERE PR$9AN8 = @AddressNumber
				) CATCODES
				UNPIVOT (PRKY FOR PRDTAI IN
					(AC01, AC02, AC03, AC04, AC05, AC06, AC07, AC08, AC09, AC10, AC11, AC12, AC13, AC14, AC15, 
					 AC16, AC17, AC18, AC19, AC20, AC21, AC22, AC23, AC24, AC25, AC26, AC27, AC28, AC29, AC30)) AS CATCODES;
	END  
	ELSE IF(@AddressBookType = 0 OR @AddressBookType = 2) --CUSTOMER
	BEGIN
		SELECT ABDTAI as Code, ABKY as Value
			FROM 
				(
				SELECT 
					ABAC01 AC01, ABAC02 AC02,ABAC03 AC03,ABAC04 AC04, ABAC05 AC05, ABAC06 AC06,ABAC07 AC07,ABAC08 AC08,ABAC09 AC09,ABAC10 AC10,
				    ABAC11 AC11,ABAC12 AC12,ABAC13 AC13,ABAC14 AC14,ABAC15 AC15,ABAC16 AC16,ABAC17 AC17,ABAC18 AC18, ABAC19 AC19, ABAC20 AC20,
					ABAC21 AC21,ABAC22 AC22,ABAC23 AC23, ABAC24 AC24,ABAC25 AC25,ABAC26 AC26,ABAC27 AC27,ABAC28 AC28,ABAC29 AC29,ABAC30 AC30
				FROM [SCDATA].F0101 
				WHERE ABAN8 = @AddressNumber
				) CATCODES
				UNPIVOT (ABKY FOR ABDTAI IN
						(AC01, AC02, AC03, AC04, AC05, AC06, AC07, AC08, AC09, AC10, AC11, AC12, AC13, AC14, AC15, 
						AC16, AC17, AC18, AC19, AC20, AC21, AC22, AC23, AC24, AC25,AC26,AC27,AC28,AC29,AC30)) AS CATCODES
	END
GO


  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetAddressBookInfo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetAddressBookInfo
	END

GO

-- #desc					Read Address Book record, read only info
-- #bl_class				Premier.Common.AddressBookInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber	AddressNumber

CREATE Procedure [DBO].PRO_GetAddressBookInfo
(
	@AddressNumber	FLOAT
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	SELECT
		A.ABAN8	 AS AddressNumber,
		A.ABALPH AS AlphaName,
		A.ABAT1  AS SearchType,
		A.ABMCU AS BranchPlant,
		A.ABTAXC AS PersonCorporateCode,
		B.ALADD1 AS AddressLine1, 
		B.ALADD2 AS AddressLine2, 
		B.ALCTY1 AS City,
		B.ALADDS AS State,
		B.ALADDZ AS ZipCode,
		B.ALCTR  AS Country
	FROM
		[SCDATA].F0101 A				-- Address Book Master
	CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(A.ABAN8, @CurrentJulianDate) B		-- Address Book Detail
	WHERE 
		A.ABAN8 = @AddressNumber -- AddressNumber filter	

GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetAddressBookList'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetAddressBookList
	END

GO

-- #desc						Read Address Book, read only info
-- #bl_class					Premier.Common.AddressBookList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @AddressNumber		AddressNumber
-- #param @AlphaName			Alpha Name.
-- #param @SearchType			Search Type
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown

CREATE Procedure [DBO].PRO_GetAddressBookList
(
	@InstallationID NVARCHAR(3),
	@AddressNumber	FLOAT,
	@AlphaName 		NVARCHAR(40),
	@SearchType		NVARCHAR(3),
	@PageIndex		INT,
    @PageSize		INT
)
AS
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	;WITH CTE AS (
		SELECT
			A.ABAN8		AS AddressNumber,
			A.ABALPH	AS AlphaName,
			A.ABAT1		AS SearchType,
			A.ABMCU		AS BranchPlant,
			A.ABTAXC	AS PersonCorporateCode,
			B.ALADD1	AS AddressLine1, 
			B.ALADD2	AS AddressLine2, 
			B.ALCTY1	AS City,
			B.ALADDS	AS State,
			B.ALADDZ	AS ZipCode,
			B.ALCTR		AS Country,
			ROW_NUMBER() OVER (ORDER BY A.ABAN8) AS RNUM
		FROM
			[SCDATA].F0101 A				-- Address Book Master
		CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(A.ABAN8, @CurrentJulianDate) B		-- Address Book Detail
		WHERE 
			(@AddressNumber = 0 OR A.ABAN8 = @AddressNumber)-- AddressNumber filter
			AND	(@AlphaName = '*' OR A.ABALPH LIKE '%' + @AlphaName + '%')	 -- AlphaName filter
			AND (@SearchType = '*' OR A.ABAT1 = @SearchType) -- Search Type filter
	)
	SELECT 
		A.AddressNumber,
		A.AlphaName,
		A.SearchType, 
		A.BranchPlant,
		A.PersonCorporateCode,
		A.AddressLine1, 
		A.AddressLine2, 
		A.City, 
		A.State, 
		A.ZipCode, 
		A.Country,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A 
	WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetBankAccountInfo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetBankAccountInfo
	END

GO

-- #desc						Get Bank Account Info
-- #bl_class					Premier.Profile.BankAccountInfo
-- #db_dependencies				N/A
-- #db_references				N/A 

-- #param @SequenceNumber		SequenceNumber

CREATE PROCEDURE [DBO].PRO_GetBankAccountInfo
(
  @SequenceNumber		FLOAT
)
AS
	SELECT 
		AY.AYUKID		AS UniqueId,
		AY.AYAN8		AS AddressNumber,
		AY.AYTNST		AS MaskedBankRouting,
		AY.AYCBNK		AS MaskedBankAccount,
		AY.AYBKTP		AS AccountType,
		AY.AYAID		AS AccountId,
		BA.BAADD1		AS AddressLine1, 
		BA.BAADD2		AS AddressLine2,
		BA.BACTY1		AS City,
		BA.BACTR		AS Country,
		BA.BAADDS		AS State,
		BA.BAADDZ		AS ZipCode,
		BA.BA$9COMMT	AS Comment,
		BA.BA$9RTENC	AS EncryptedBankRouting,
		BA.BA$9BAENC	AS EncryptedBankAccount,
		AY.AYCKSV		AS CheckType,
		BA.BAGNNM		AS FirstName,
		BA.BASRNM		AS LastName,
		BA.BAALPH		AS CompanyName,
		CASE WHEN BA.BAALPH = N'' THEN '0' ELSE '1' END AS	ACHCheckType,
		BA.BA$9BADEF	AS IsDefault,
		AY.AYDL01		AS BankName
	FROM [SCDATA].F0030 AY
	INNER JOIN [SCDATA].FQ670030 BA
	ON BAUKID = AYUKID
	WHERE AYUKID= @SequenceNumber

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetBankAccounts'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetBankAccounts
	END

GO

-- #desc						Get Bank Accounts
-- #bl_class					Premier.Profile.BankAccounts.cs/BankAccountList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId				StoreId
-- #param @AddressNumber		AddressNumber
-- #param @Type					Account Type
-- #param @BankAccount			Bank Account
-- #param @BankName				Bank Name
-- #param @SortBy				Column to filter by
-- #param @SortDir				Direction to filter (A = Ascendent, D = Descendent)
-- #param @PageIndex			Page Index 
-- #param @PageSize				Page Size 

CREATE PROCEDURE [DBO].PRO_GetBankAccounts
(
	@StoreId			NVARCHAR(3),
	@AddressNumber		FLOAT,
	@Type				NVARCHAR(1),
	@BankAccount		NVARCHAR(20),
	@BankName			NVARCHAR(30),
	@SortBy				NVARCHAR(30),
	@SortDir			NVARCHAR(1),
	@PageIndex			INT,
    @PageSize			INT
)
AS

	DECLARE	@BA_Type					NCHAR(1)
	DECLARE @BAINID						NVARCHAR(3)
	DECLARE @BankAccountTypeConstant	NVARCHAR(10)
	SET @BankAccountTypeConstant = N'BA_TYPE'
	SET @BAINID = @StoreId
	EXEC [DBO].CMM_GetConstantValue @BankAccountTypeConstant, @BAINID, @BA_Type OUT

	DECLARE @Sort_Condition NVARCHAR(30)
	DECLARE @SQL_DYNAMIC	NVARCHAR(MAX)

	/* Resolve Sort Condition */

	IF (@SortBy = 'BankAccount') BEGIN
		IF(@SortDir = 'A')
			SET @Sort_Condition = 'AY.AYCBNK ASC'
		IF(@SortDir = 'D')
			SET @Sort_Condition = 'AY.AYCBNK DESC'
	END
	ELSE IF (@SortBy = 'BankTransit') BEGIN
		IF(@SortDir = 'A')
			SET @Sort_Condition = 'AY.AYTNST ASC'
		IF(@SortDir = 'D')
			SET @Sort_Condition = 'AY.AYTNST DESC'
	END
	ELSE IF (@SortBy = 'BankName') BEGIN
		IF(@SortDir = 'A')
			SET @Sort_Condition = 'AY.AYDL01 ASC'
		IF(@SortDir = 'D')
			SET @Sort_Condition = 'AY.AYDL01 DESC'
	END
	ELSE 
		SET @Sort_Condition = 'AY.AYCBNK ASC'
	
	SET @SQL_DYNAMIC =' 
	;WITH BANKACCOUNTS  AS 
	(SELECT 
		AY.AYUKID		AS UniqueId,
		AY.AYAN8		AS AddressNumber,
		AY.AYTNST		AS MaskedBankRouting,
		AY.AYCBNK		AS MaskedBankAccount,
		AY.AYBKTP		AS AccountType,
		AY.AYAID		AS AccountId,
		BA.BAADD1		AS AddressLine1,
		BA.BAADD2		AS AddressLine2,
		BA.BACTY1		AS City,
		BA.BACTR		AS Country,
		BA.BAADDS		AS State,
		BA.BAADDZ		AS ZipCode,
		BA.BA$9COMMT	AS Comment,
		BA.BA$9RTENC	AS EncryptedBankRouting,
		BA.BA$9BAENC	AS EncryptedBankAccount,
		AY.AYCKSV		AS CheckType,
		BA.BAGNNM		AS FirstName,
		BA.BASRNM		AS LastName,
		BA.BA$9BADEF	AS IsDefault,
		AY.AYDL01		AS BankName,
		BA.BA$9DPT		AS Department,
		BA.BAALPH		AS CompanyName,
		CASE WHEN BA.BAALPH = N'''' THEN ''0'' ELSE ''1'' END AS	ACHCheckType,
		ROW_NUMBER() OVER (ORDER BY '+ @Sort_Condition +') AS RNUM,  
		COUNT(*) OVER () AS TotalRowCount 
		FROM [SCDATA].F0030 AY
		INNER JOIN [SCDATA].FQ670030 BA
		ON BAUKID = AYUKID 
		WHERE AYAN8 = @AddressNumber 
			AND AYBKTP = @BA_Type '

	IF (@BankAccount <> '*')
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		AND AY.AYCBNK LIKE ''%'' + @BankAccount + ''%'' '
			
	IF (@BankName <> '*')
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		AND AY.AYDL01 LIKE ''%'' + @BankName + ''%'' '		

	IF (@Type = 'S')
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		AND AY.AYCKSV = 1 '				

	IF (@Type = 'C')
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		AND AY.AYCKSV = 0 '
		
	SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		) 
		SELECT UniqueId, AddressNumber, MaskedBankRouting, MaskedBankAccount, AccountType, AccountId, AddressLine1, AddressLine2, 
			City, Country, State, ZipCode, Comment, EncryptedBankRouting, EncryptedBankAccount, CheckType, FirstName, LastName, 
			CompanyName, ACHCheckType, IsDefault, BankName, Department, TotalRowCount
		FROM BANKACCOUNTS
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))';

	EXECUTE sp_executesql @SQL_DYNAMIC, N'	
	@StoreId			NVARCHAR(3),
	@AddressNumber		FLOAT,
	@Type				NVARCHAR(1),
	@BankAccount		NVARCHAR(20),
	@BankName			NVARCHAR(30),
	@SortBy				NVARCHAR(30),
	@SortDir			NVARCHAR(1),
	@PageIndex			INT,
    @PageSize			INT,
	@BA_Type			NCHAR(1)',
	@StoreId			=@StoreId,
	@AddressNumber		=@AddressNumber,	
	@Type				=@Type,
	@BankAccount		=@BankAccount,
	@BankName			=@BankName,
	@SortBy				=@SortBy,
	@SortDir			=@SortDir,
	@PageIndex			=@PageIndex,
	@PageSize			=@PageSize,
	@BA_Type			=@BA_Type

SET NOCOUNT OFF

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetBankAccountsSummary'))
	BEGIN
		DROP PROCEDURE [DBO].PRO_GetBankAccountsSummary
	END
GO

-- #desc						Get Bank Accounts Summary
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId				StoreId
-- #param @AddressNumber		AddressNumber

CREATE PROCEDURE [DBO].PRO_GetBankAccountsSummary
(
	@StoreId			NVARCHAR(3),
	@AddressNumber		FLOAT
)
AS
SET NOCOUNT ON
	DECLARE @BankAccountsCount INTEGER;
	DECLARE @DefaultBankAccount INTEGER;

	DECLARE	@BA_Type					NCHAR(1)
	DECLARE @BAINID						NVARCHAR(3)
	DECLARE @BankAccountTypeConstant	NVARCHAR(10)
	SET @BankAccountTypeConstant = N'BA_TYPE'
	SET @BAINID = @StoreId
	EXEC [DBO].CMM_GetConstantValue @BankAccountTypeConstant, @BAINID, @BA_Type OUT
	
	SELECT @BankAccountsCount = COUNT(1) FROM [SCDATA].F0030
	INNER JOIN [SCDATA].FQ670030
	ON AYUKID = BAUKID 
	WHERE AYAN8 = @AddressNumber AND AYBKTP = @BA_Type;

	SELECT @DefaultBankAccount = AYUKID FROM [SCDATA].F0030
	INNER JOIN [SCDATA].FQ670030
	ON AYUKID = BAUKID 
	WHERE AYAN8 = @AddressNumber and BA$9BADEF = '1';

	SELECT 
		@BankAccountsCount AS BankAccountCount,
		@DefaultBankAccount AS DefaultBankAccount

SET NOCOUNT OFF
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetCompanyPolicyList'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetCompanyPolicyList
	END

GO

-- #desc				Read specific Policy or all the table
-- #bl_class			Premier.Profile.CompanyPolicyList.cs / CompanyPolicyInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @PolicyId		ID for specific. * to retrieve all the table info.

CREATE PROCEDURE [DBO].PRO_GetCompanyPolicyList
	@PolicyId FLOAT = null

AS
	SET NOCOUNT ON
	
	SELECT 
		P.RFPLY as PolicyId,
		P.RFCO as PolicyCompany,
		P.RFPLYN as PolicyName,
		P.RFPLYD as PolicyDescription
	FROM 
		[SCDATA].F03B25 P
	WHERE 
		@PolicyId IS NULL OR P.RFPLY = @PolicyId
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetConsumerContactInfo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetConsumerContactInfo
	END

GO

-- #desc						Get Contact and Ext Information
-- #bl_class	 	 			Premier.Profile.ContactInfo
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param @AddressNumber		Address Number
-- #param @ContactID			Contact ID

CREATE Procedure [DBO].PRO_GetConsumerContactInfo
(
	@AddressNumber FLOAT,	
	@ContactID FLOAT
)
AS
SET NOCOUNT ON

SELECT 
		PC$9AN8 AS AddressNumber,   
		PCIDLN AS ContactID,    
		PCMLNM AS MailingName,
		PCEMAL AS EmailAddress,
		ISNULL(AB$9CRS,0) AS IsCrossRefOn,--Default Off
		ISNULL(ABAURCH1,'') AS UserReservedChar, --Display Images
		AB$9EMYN AS EmailPreference
FROM [SCDATA].FQ67303	
LEFT OUTER JOIN [SCDATA].FQ67104 --Extended Information
ON 
	PC$9AN8 = AB$9AN8 AND 
	PCIDLN = ABIDLN AND 
	AB$9TYP = 1
WHERE	PC$9AN8 = @AddressNumber AND 
		PCIDLN = @ContactID


SET NOCOUNT OFF
RETURN
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetCustomerContactInfo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetCustomerContactInfo
	END

GO

-- #desc						Get Contact and Ext Information
-- #bl_class	 	 			Premier.Profile.ContactInfo
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @AddressNumber		Address Number
-- #param @ContactID			Contact ID

CREATE Procedure [DBO].PRO_GetCustomerContactInfo
(
	@AddressNumber FLOAT,	
	@ContactID FLOAT
)
AS
SET NOCOUNT ON

	DECLARE @Email			NVARCHAR(256)
	
	SELECT	TOP 1
			@Email = EAEMAL
	FROM	[SCDATA].F01151
	WHERE	EAAN8 = @AddressNumber
	AND		EAIDLN = @ContactID
	AND		EAETP = 'E'
	ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC

	SELECT 
			WWAN8 AS AddressNumber, 
			WWIDLN AS ContactID,
			WWMLNM AS MailingName,
			ISNULL(@Email,'') AS EmailAddress,
			ISNULL(AB$9CRS,0) AS IsCrossRefOn,--Default Off
			ISNULL(ABAURCH1,'') AS UserReservedChar, --Display Images
			ISNULL(AB$9EMYN,1) AS EmailPreference
	FROM [SCDATA].F0111	
	LEFT OUTER JOIN [SCDATA].FQ67104 --Extended Information
	ON 		
		WWAN8 = AB$9AN8 AND 
		WWIDLN = ABIDLN AND 
		AB$9TYP = 0
	WHERE	
		WWAN8 = @AddressNumber AND 
		WWIDLN = @ContactID


SET NOCOUNT OFF
RETURN
GO
 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetLineOfBusiness'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetLineOfBusiness
	END

GO

-- #desc					Create line of business.
-- #bl_class				Premier.Profile.LineOfBusiness.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @LineOfBusinessID	Line of business 
 
CREATE Procedure [DBO].PRO_GetLineOfBusiness
	@LineOfBusinessID NVARCHAR(3)

AS

SELECT 
			A.LB$9LOB 	LineOfBusinessID,
			A.LBDSC1	Description,	
			A.LBMCU		BranchPlant,	
			A.LB$9TYP	AddressBookType,  
			A.LBTAXC	PersonCorporationCode,    
			A.LBASN		AdjustmentSchedule,  
			A.LBCPGP	PriceGroup	,
			A.LBSEQ		SequenceNumber,   
			A.LBAC01	CategoryCode01,   
			A.LBAC02	CategoryCode02, 
			A.LBAC03	CategoryCode03,	
			A.LBAC04	CategoryCode04,	   
			A.LBAC05	CategoryCode05,	    
			A.LBAC06	CategoryCode06,	  
			A.LBAC07	CategoryCode07,	
			A.LBAC08	CategoryCode08,	   
			A.LBAC09	CategoryCode09,	    
			A.LBAC10	CategoryCode10,	  
			A.LBAC11	CategoryCode11,	
			A.LBAC12	CategoryCode12,	   
			A.LBAC13	CategoryCode13,	    
			A.LBAC14	CategoryCode14,	  
			A.LBAC15	CategoryCode15,	
			A.LBAC16	CategoryCode16,	   
			A.LBAC17	CategoryCode17,	    
			A.LBAC18	CategoryCode18,	  
			A.LBAC19	CategoryCode19,	
			A.LBAC20	CategoryCode20,	   
			A.LBAC21	CategoryCode21,	    
			A.LBAC22	CategoryCode22,	  
			A.LBAC23	CategoryCode23,	
			A.LBAC24	CategoryCode24,	   
			A.LBAC25	CategoryCode25,	    
			A.LBAC26	CategoryCode26,	  
			A.LBAC27	CategoryCode27,	
  			A.LBAC28	CategoryCode28,	   
  			A.LBAC29	CategoryCode29,	    
  			A.LBAC30	CategoryCode30,	  
  			A.LBPID		ProgramID,	
			A.LBJOBN	WorkStationID,	   
			A.LBUSER	UserID,	    
			A.LBUPMJ	DateUpdated	,	  
			A.LBUPMT	TimeLastUpdated	
	FROM 
			[SCDATA].FQ67103 A
	WHERE 
			A.LB$9LOB  = @LineOfBusinessID 
			
EXEC [DBO].PRO_GetLineOfBusinessLangs @LineOfBusinessID, null 

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetLineOfBusinessInfo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetLineOfBusinessInfo
	END

GO

-- #desc					Read one line of business by installation.
-- #bl_class				Premier.Profile.LineOfBusinessInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation Id
-- #param @LineOfBusinessID	Line of business 

CREATE Procedure [DBO].PRO_GetLineOfBusinessInfo
	@InstallationID NVARCHAR(3),
	@LineOfBusinessID NVARCHAR(3),
	@LangPref	NVARCHAR(2)			
AS

SET NOCOUNT ON

 SELECT 
	A.LB$9LOB as LineOfBusinessID,    
	ISNULL(C.LBDSC1,A.LBDSC1) AS Description,
	A.LBMCU as BranchPlant,
	A.LB$9TYP as AddressBookType
	
 FROM 
	[SCDATA].FQ671031 B --By Installation
    INNER JOIN [SCDATA].FQ67103 A --Master
		ON A.LB$9LOB  = B.LI$9LOB 
	LEFT JOIN [SCDATA].FQ67103L C --Language
         ON A.LB$9LOB = C.LB$9LOB
         AND C.LBLNGP = @LangPref
WHERE 
	 (B.LI$9INID = @InstallationID AND 
	  A.LB$9LOB = @LineOfBusinessID)
	 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetLineOfBusinessList'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetLineOfBusinessList
	END

GO

-- #desc					Read line of business
-- #bl_class				Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @LineOfBusinessID	Line of business 
-- #param @Description		Description

CREATE Procedure [DBO].PRO_GetLineOfBusinessList
	@LineOfBusinessID NVARCHAR(3),
	@Description NVARCHAR(30),
	@LangPref	NVARCHAR(2)	
AS

SET NOCOUNT ON


	SELECT 
		A.LB$9LOB as LineOfBusinessID,    
		ISNULL(B.LBDSC1,A.LBDSC1) AS Description,
		A.LBMCU as BranchPlant,
		A.LB$9TYP as AddressBookType	
	FROM 
		[SCDATA].FQ67103 A
	LEFT JOIN [SCDATA].FQ67103L B
         ON A.LB$9LOB = B.LB$9LOB
         AND B.LBLNGP = @LangPref		
	WHERE 
		(@LineOfBusinessID = '*' OR A.LB$9LOB =  @LineOfBusinessID) AND
		(@Description = '*' OR
		(B.LBDSC1 IS NULL AND A.LBDSC1  LIKE '%' + @Description + '%' ) OR
		(B.LBDSC1 IS NOT NULL AND B.LBDSC1 LIKE '%' + @Description + '%'))



	
	

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetLOBListByInst'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetLOBListByInst
	END

GO

-- #desc					Read line of business by installation.
-- #bl_class				Premier.Profile.LineOfBusinessValueListByInst.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation Id
-- #param @LineOfBusinessID	Line of business 
-- #param @Description		Description

CREATE Procedure [DBO].PRO_GetLOBListByInst
	@InstallationID NVARCHAR(3),
	@LineOfBusinessID NVARCHAR(3),
	@Description NVARCHAR(30),
	@LangPref	NVARCHAR(2)			
AS

SET NOCOUNT ON

 SELECT 
	A.LB$9LOB as LineOfBusinessID,    
	ISNULL(C.LBDSC1,A.LBDSC1) AS Description,
	A.LBMCU as BranchPlant,
	A.LB$9TYP as AddressBookType
	
 FROM 
	[SCDATA].FQ671031 B --By Installation
    INNER JOIN [SCDATA].FQ67103 A --Master
		ON A.LB$9LOB  = B.LI$9LOB 
	LEFT JOIN [SCDATA].FQ67103L C --Language
         ON A.LB$9LOB = C.LB$9LOB
         AND C.LBLNGP = @LangPref
WHERE 
	 B.LI$9INID = @InstallationID AND 
	(@LineOfBusinessID = '*' OR A.LB$9LOB LIKE '%' +  @LineOfBusinessID + '%') AND
	(@Description = '*' OR
	(C.LBDSC1 IS NULL AND A.LBDSC1  LIKE '%' + @Description + '%' ) OR
	(C.LBDSC1 IS NOT NULL AND C.LBDSC1 LIKE '%' + @Description + '%'))
ORDER BY LBSEQ
	
	

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetLOBListNotRel'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetLOBListNotRel
	END

GO


-- #desc					Read line of business list not related.
-- #bl_class				Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation Id
-- #param @LineOfBusinessID	Line of business 
-- #param @Description		Description

CREATE Procedure [DBO].PRO_GetLOBListNotRel
	@InstallationID NVARCHAR(3),
	@LineOfBusinessID NVARCHAR(3),
	@Description NVARCHAR(30),
	@LangPref	NVARCHAR(2)
AS

SET NOCOUNT ON
SELECT 
 	A.LB$9LOB as LineOfBusinessID,    
	ISNULL(B.LBDSC1,A.LBDSC1) AS Description,
	A.LBMCU as BranchPlant,
	A.LB$9TYP as AddressBookType
FROM 
	[SCDATA].FQ67103 A 
	LEFT JOIN [SCDATA].FQ67103L B
         ON A.LB$9LOB = B.LB$9LOB
         AND B.LBLNGP = @LangPref
WHERE 
	A.LB$9LOB NOT IN (SELECT LI$9LOB FROM [SCDATA].FQ671031 Z WHERE Z.LI$9INID = @InstallationID) AND
	(@LineOfBusinessID = '*' OR A.LB$9LOB LIKE '%' +  @LineOfBusinessID + '%') AND
	(@Description = '*' OR
	(B.LBDSC1 IS NULL AND A.LBDSC1  LIKE '%' + @Description + '%' ) OR
	(B.LBDSC1 IS NOT NULL AND B.LBDSC1 LIKE '%' + @Description + '%'))


	
	

  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetPersonalizationInfo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetPersonalizationInfo
	END
GO

-- #desc						Get Personalization Info
-- #bl_class					Premier.Profile.ProfilePersonalizationInformation.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Company				Company ID
-- #param @AddressBookType		Address Book Type
-- #param @AddressNumber		Address Number
-- #param @ContactId			ContactId

CREATE Procedure [DBO].PRO_GetPersonalizationInfo
	@Company			NVARCHAR(5), 
	@AddressBookType	FLOAT,
	@AddressNumber		FLOAT,
	@ContactId          FLOAT
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

BEGIN
	IF(@AddressBookType = 0) /*CUSTOMER*/
		BEGIN
		IF(@ContactId = 0)
		 BEGIN
			SELECT
				AB.ABAT1 AS SearchType,
				AB.ABMCU AS BusinessUnit,
				AB.ABSIC AS Industry,
				AB.ABTAXC AS PersonCorpCode,
				AB.ABAC01 AS CategoryCode01,	AB.ABAC02 AS CategoryCode02,	AB.ABAC03 AS CategoryCode03,	AB.ABAC04 AS CategoryCode04,	AB.ABAC05 AS CategoryCode05,
				AB.ABAC06 AS CategoryCode06,	AB.ABAC07 AS CategoryCode07,	AB.ABAC08 AS CategoryCode08,	AB.ABAC09 AS CategoryCode09,	AB.ABAC10 AS CategoryCode10,
				AB.ABAC11 AS CategoryCode11,	AB.ABAC12 AS CategoryCode12,	AB.ABAC13 AS CategoryCode13,	AB.ABAC14 AS CategoryCode14,	AB.ABAC15 AS CategoryCode15,
				AB.ABAC16 AS CategoryCode16,	AB.ABAC17 AS CategoryCode17,	AB.ABAC18 AS CategoryCode18,	AB.ABAC19 AS CategoryCode19,	AB.ABAC20 AS CategoryCode20,
				AB.ABAC21 AS CategoryCode21,	AB.ABAC22 AS CategoryCode22,	AB.ABAC23 AS CategoryCode23,	AB.ABAC24 AS CategoryCode24,	AB.ABAC25 AS CategoryCode25,
				AB.ABAC26 AS CategoryCode26,	AB.ABAC27 AS CategoryCode27,	AB.ABAC28 AS CategoryCode28,	AB.ABAC29 AS CategoryCode29,	AB.ABAC30 AS CategoryCode30,
				AL.ALCTY1 AS City,
				AL.ALADDS AS State,
				AL.ALCTR AS Country,
				AL.ALCOUN AS County,
				MN.WWMLNM AS CompanyName,
				MN.WWMLNM AS MailingName,
				ISNULL(OVERRIDECOMPANY.AIASN, DEFAULTCOMPANY.AIASN) AS Adjustment,
				ISNULL(OVERRIDECOMPANY.AICPGP, DEFAULTCOMPANY.AICPGP) AS PriceGroup,
				ISNULL(OVERRIDECOMPANY.AIABC1, DEFAULTCOMPANY.AIABC1) AS ABCCodes1,
				ISNULL(OVERRIDECOMPANY.AIABC2, DEFAULTCOMPANY.AIABC2) AS ABCCodes2,
				ISNULL(OVERRIDECOMPANY.AIABC3, DEFAULTCOMPANY.AIABC3) AS ABCCodes3
			FROM [SCDATA].F0101 AB	/*Address Book Master*/
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AB.ABAN8, @CurrentJulianDate) AL	/*Address Book Join*/
			LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY  /*Address Book Join Customer Master */                                                                                 
				ON	OVERRIDECOMPANY.AIAN8 = AB.ABAN8                                                                               
				AND OVERRIDECOMPANY.AICO = @Company                                                                         				
			INNER JOIN [SCDATA].F03012 AS DEFAULTCOMPANY       /*Address Book Join Customer Master */
				ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
				AND DEFAULTCOMPANY.AICO = '00000'
			INNER JOIN [SCDATA].F0111 AS MN       /*Mailing Name */
				ON	MN.WWAN8 = AB.ABAN8                                                                                
				AND MN.WWIDLN = @ContactId
			WHERE 
				AB.ABAN8 = @AddressNumber
				
			END
			ELSE
			BEGIN
			SELECT
				AB.ABAT1 AS SearchType,
				AB.ABMCU AS BusinessUnit,
				AB.ABSIC AS Industry,
				AB.ABTAXC AS PersonCorpCode,
				AB.ABAC01 AS CategoryCode01,	AB.ABAC02 AS CategoryCode02,	AB.ABAC03 AS CategoryCode03,	AB.ABAC04 AS CategoryCode04,	AB.ABAC05 AS CategoryCode05,
				AB.ABAC06 AS CategoryCode06,	AB.ABAC07 AS CategoryCode07,	AB.ABAC08 AS CategoryCode08,	AB.ABAC09 AS CategoryCode09,	AB.ABAC10 AS CategoryCode10,
				AB.ABAC11 AS CategoryCode11,	AB.ABAC12 AS CategoryCode12,	AB.ABAC13 AS CategoryCode13,	AB.ABAC14 AS CategoryCode14,	AB.ABAC15 AS CategoryCode15,
				AB.ABAC16 AS CategoryCode16,	AB.ABAC17 AS CategoryCode17,	AB.ABAC18 AS CategoryCode18,	AB.ABAC19 AS CategoryCode19,	AB.ABAC20 AS CategoryCode20,
				AB.ABAC21 AS CategoryCode21,	AB.ABAC22 AS CategoryCode22,	AB.ABAC23 AS CategoryCode23,	AB.ABAC24 AS CategoryCode24,	AB.ABAC25 AS CategoryCode25,
				AB.ABAC26 AS CategoryCode26,	AB.ABAC27 AS CategoryCode27,	AB.ABAC28 AS CategoryCode28,	AB.ABAC29 AS CategoryCode29,	AB.ABAC30 AS CategoryCode30,
				AL.ALCTY1 AS City,
				AL.ALADDS AS State,
				AL.ALCTR AS Country,
				AL.ALCOUN AS County,
				CN.WWMLNM AS CompanyName,
				MN.WWMLNM AS MailingName,
				ISNULL(OVERRIDECOMPANY.AIASN, DEFAULTCOMPANY.AIASN) AS Adjustment,
				ISNULL(OVERRIDECOMPANY.AICPGP, DEFAULTCOMPANY.AICPGP) AS PriceGroup,
				ISNULL(OVERRIDECOMPANY.AIABC1, DEFAULTCOMPANY.AIABC1) AS ABCCodes1,
				ISNULL(OVERRIDECOMPANY.AIABC2, DEFAULTCOMPANY.AIABC2) AS ABCCodes2,
				ISNULL(OVERRIDECOMPANY.AIABC3, DEFAULTCOMPANY.AIABC3) AS ABCCodes3
			FROM [SCDATA].F0101 AB	/*Address Book Master*/
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AB.ABAN8, @CurrentJulianDate) AL	/*Address Book Join*/
			LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY  /*Address Book Join Customer Master */                                                                                 
				ON	OVERRIDECOMPANY.AIAN8 = AB.ABAN8                                                                               
				AND OVERRIDECOMPANY.AICO = @Company                                                                         				
			INNER JOIN [SCDATA].F03012 AS DEFAULTCOMPANY       /*Address Book Join Customer Master */
				ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
				AND DEFAULTCOMPANY.AICO = '00000'
			INNER JOIN [SCDATA].F0111 AS CN       /*Company Name */
				ON	CN.WWAN8 = AB.ABAN8                                                                                
				AND CN.WWIDLN = 0
			INNER JOIN [SCDATA].F0111 AS MN       /*Mailing Name */
				ON	MN.WWAN8 = AB.ABAN8                                                                                
				AND MN.WWIDLN = @ContactId
			WHERE 
				AB.ABAN8 = @AddressNumber
			END
		END
	ELSE IF (@AddressBookType = 1) /*CONSUMER*/
		BEGIN
		IF(@ContactId = 0)
		BEGIN
			SELECT
				CM.PR$9AT1 AS SearchType,
				CM.PRMCU AS BusinessUnit ,
				' ' AS Industry,
				CM.PRTAXC AS PersonCorpCode,
				CM.PR$9AC01 AS CategoryCode01,	CM.PR$9AC02 AS CategoryCode02,	CM.PR$9AC03 AS CategoryCode03,	CM.PR$9AC04 AS CategoryCode04,	CM.PR$9AC05 AS CategoryCode05,
				CM.PR$9AC06 AS CategoryCode06,	CM.PR$9AC07 AS CategoryCode07,	CM.PR$9AC08 AS CategoryCode08,	CM.PR$9AC09 AS CategoryCode09,	CM.PR$9AC10 AS CategoryCode10,
				CM.PR$9AC11 AS CategoryCode11,	CM.PR$9AC12 AS CategoryCode12,	CM.PR$9AC13 AS CategoryCode13,	CM.PR$9AC14 AS CategoryCode14,	CM.PR$9AC15 AS CategoryCode15,
				CM.PR$9AC16 AS CategoryCode16,	CM.PR$9AC17 AS CategoryCode17,	CM.PR$9AC18 AS CategoryCode18,	CM.PR$9AC19 AS CategoryCode19,	CM.PR$9AC20 AS CategoryCode20,
				CM.PR$9AC21 AS CategoryCode21,	CM.PR$9AC22 AS CategoryCode22,	CM.PR$9AC23 AS CategoryCode23,	CM.PR$9AC24 AS CategoryCode24,	CM.PR$9AC25 AS CategoryCode25,
				CM.PR$9AC26 AS CategoryCode26,	CM.PR$9AC27 AS CategoryCode27,	CM.PR$9AC28 AS CategoryCode28,	CM.PR$9AC29 AS CategoryCode29,	CM.PR$9AC30 AS CategoryCode30,
				CM.PRCTY1 AS City,
				CM.PRADDS AS State,
				CM.PRCTR AS Country,
				CM.PRCOUN AS County,
				CM.PRASN AS Adjustment,
				CM.PRCPGP AS PriceGroup,
				' ' AS ABCCodes1,
				' ' AS ABCCodes2,
				' ' AS ABCCodes3,
				MNC.PCMLNM AS CompanyName,
				MNC.PCMLNM AS MailingName
			FROM [SCDATA].FQ670302 CM			
			INNER JOIN [SCDATA].FQ67303 AS MNC      /*Mailing Name */
				ON	MNC.PC$9AN8 = CM.PR$9AN8                                                                                
				AND MNC.PCIDLN = @ContactId
			WHERE 
				CM.PR$9AN8 = @AddressNumber
				
			END
			ELSE
			BEGIN
			SELECT
				CM.PR$9AT1 AS SearchType,
				CM.PRMCU AS BusinessUnit ,
				' ' AS Industry,
				CM.PRTAXC AS PersonCorpCode,
				CM.PR$9AC01 AS CategoryCode01,	CM.PR$9AC02 AS CategoryCode02,	CM.PR$9AC03 AS CategoryCode03,	CM.PR$9AC04 AS CategoryCode04,	CM.PR$9AC05 AS CategoryCode05,
				CM.PR$9AC06 AS CategoryCode06,	CM.PR$9AC07 AS CategoryCode07,	CM.PR$9AC08 AS CategoryCode08,	CM.PR$9AC09 AS CategoryCode09,	CM.PR$9AC10 AS CategoryCode10,
				CM.PR$9AC11 AS CategoryCode11,	CM.PR$9AC12 AS CategoryCode12,	CM.PR$9AC13 AS CategoryCode13,	CM.PR$9AC14 AS CategoryCode14,	CM.PR$9AC15 AS CategoryCode15,
				CM.PR$9AC16 AS CategoryCode16,	CM.PR$9AC17 AS CategoryCode17,	CM.PR$9AC18 AS CategoryCode18,	CM.PR$9AC19 AS CategoryCode19,	CM.PR$9AC20 AS CategoryCode20,
				CM.PR$9AC21 AS CategoryCode21,	CM.PR$9AC22 AS CategoryCode22,	CM.PR$9AC23 AS CategoryCode23,	CM.PR$9AC24 AS CategoryCode24,	CM.PR$9AC25 AS CategoryCode25,
				CM.PR$9AC26 AS CategoryCode26,	CM.PR$9AC27 AS CategoryCode27,	CM.PR$9AC28 AS CategoryCode28,	CM.PR$9AC29 AS CategoryCode29,	CM.PR$9AC30 AS CategoryCode30,
				CM.PRCTY1 AS City,
				CM.PRADDS AS State,
				CM.PRCTR AS Country,
				CM.PRCOUN AS County,
				CM.PRASN AS Adjustment,
				CM.PRCPGP AS PriceGroup,
				' ' AS ABCCodes1,
				' ' AS ABCCodes2,
				' ' AS ABCCodes3,
				CNC.PCMLNM AS CompanyName,
				MNC.PCMLNM AS MailingName
			FROM [SCDATA].FQ670302 CM
			INNER JOIN [SCDATA].FQ67303 AS CNC      /*Company Name */
				ON	CNC.PC$9AN8 = CM.PR$9AN8                                                                                
				AND CNC.PCIDLN = 0
			INNER JOIN [SCDATA].FQ67303 AS MNC      /*Mailing Name */
				ON	MNC.PC$9AN8 = CM.PR$9AN8                                                                                
				AND MNC.PCIDLN = @ContactId
			WHERE 
				CM.PR$9AN8 = @AddressNumber
			END
		END
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetProfileListByAddressNo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetProfileListByAddressNo
	END

GO

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber 		Address number to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index


CREATE Procedure [DBO].PRO_GetProfileListByAddressNo
(
	@AddressNumber 			FLOAT,
	@AddressBookType		INT,
	@PageIndex				INT,
    @PageSize				INT
)
AS

	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);


	IF (@AddressBookType = 9) /* NotUsed */
	BEGIN
		;WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber, 
				A.CC$9TYP	AS AddressType, 
				A.CCLNID	AS ContactID, 
				A.CC$9PA8	AS ParentAddressNumber, 
				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName, 
				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City, 
				A.CCADDS	AS State, 
				A.CCADDZ	AS ZipCode, 
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312
				WHERE CC$9AN8 = @AddressNumber 
				GROUP BY CC$9AN8, CC$9TYP, CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 0 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI /*INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT
				A.CC$9AN8	AS AddressNumber, 
				A.CC$9TYP	AS AddressType, 
				A.CCLNID	AS ContactID, 
				A.CC$9PA8	AS ParentAddressNumber, 
				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,
				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City, 
				A.CCADDS	AS State, 
				A.CCADDZ	AS ZipCode, 
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 
				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312
				WHERE CC$9AN8 = @AddressNumber 
				GROUP BY CC$9AN8, CC$9TYP, CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 1 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	 /*CONSUMER MASTER */
				ON C.PR$9AN8 = A.CC$9AN8	
		), PAGING AS (
			SELECT 		
				A.AddressNumber,
				A.AddressType,
				A.ContactID,
				A.ParentAddressNumber,
				A.AlphaName,
				A.MailingName,
				A.AddressLine1,
				A.City,
				A.State,
				A.ZipCode, 
				A.AreaCode,
				A.PhoneNumber,
				A.Email,
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 		
			A.AddressNumber,
			A.AddressType,
			A.ContactID,
			A.ParentAddressNumber,
			A.AlphaName,
			A.MailingName,
			A.AddressLine1,
			A.City,
			A.State,
			A.ZipCode, 
			A.AreaCode,
			A.PhoneNumber,
			A.Email,
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 0) /* CUSTOMER */
	BEGIN
		;WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
				A.CC$9PA8	AS ParentAddressNumber, 
				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName, 
				A.CCADD1	AS AddressLine1,  
				A.CCCTY1	AS City,  
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode, 
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312
				WHERE CC$9AN8 = @AddressNumber 
				GROUP BY CC$9AN8, CC$9TYP, CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 0 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI /*INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 		
			A.AddressNumber,
			A.AddressType,
			A.ContactID,
			A.ParentAddressNumber,
			A.AlphaName,
			A.MailingName,
			A.AddressLine1,
			A.City,
			A.State,
			A.ZipCode, 
			A.AreaCode,
			A.PhoneNumber,
			A.Email,
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 1) /* CONSUMER */
	BEGIN	
		;WITH CTE AS (
			SELECT
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
				A.CC$9PA8	AS ParentAddressNumber, 
				A.CCALPH	AS AlphaName,   
				A.CCMLNM	AS MailingName, 
				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,   
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode, 
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 			 
				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312
				WHERE CC$9AN8 = @AddressNumber 
				GROUP BY CC$9AN8, CC$9TYP, CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 1 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	 /*CONSUMER MASTER */
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 		
			A.AddressNumber,
			A.AddressType,
			A.ContactID,
			A.ParentAddressNumber,
			A.AlphaName,
			A.MailingName,
			A.AddressLine1,
			A.City,
			A.State,
			A.ZipCode, 
			A.AreaCode,
			A.PhoneNumber,
			A.Email,
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END
	
GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetProfileListByAltAddKey'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetProfileListByAltAddKey
	END

GO

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AlternateAddressKey	N/A
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index


CREATE Procedure [DBO].PRO_GetProfileListByAltAddKey
(
	@AlternateAddressKey	NVARCHAR(20),
	@AddressBookType		INT,
	@PageIndex				INT,
    @PageSize				INT
)
AS
	
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	IF (@AddressBookType = 9) /* NotUsed */
	BEGIN
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,    
				A.CC$9TYP	AS AddressType,    
				A.CCLNID	AS ContactID,    
  				A.CC$9PA8	AS ParentAddressNumber,
  				A.CCALPH	AS AlphaName,      
				A.CCMLNM	AS MailingName,   		   		
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,        
				A.CCADDS	AS State,    
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALKY LIKE '%' + @AlternateAddressKey + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	 -- INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER 
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,    
				A.CC$9TYP	AS AddressType,    
				A.CCLNID	AS ContactID,    
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,      
				A.CCMLNM	AS MailingName,   		
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,        
				A.CCADDS	AS State,    
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALKY LIKE '%' + @AlternateAddressKey + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,   
				A.MailingName,
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd))
	END
	ELSE IF (@AddressBookType = 0) /* CUSTOMER */
	BEGIN
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber,
  				A.CCALPH	AS AlphaName,     
				A.CCMLNM	AS MailingName,   		
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALKY LIKE '%' + @AlternateAddressKey + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	 -- INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER 
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd))
	END
	ELSE IF (@AddressBookType = 1) /* CONSUMER */
	BEGIN	
		;WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALKY LIKE '%' + @AlternateAddressKey + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd))

	END

GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetProfileListByEmail'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetProfileListByEmail
	END

GO

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Email					Email to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index


CREATE Procedure [DBO].PRO_GetProfileListByEmail
(
	@Email					NVARCHAR(256),
	@AddressBookType		INT,
	@PageIndex				INT,
    @PageSize				INT
)
AS
	
	DECLARE @Rowstart INT;
	DECLARE @Rowend INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	IF (@AddressBookType = 9) --NotUsed
	BEGIN
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCEMAL LIKE '%' + @Email + '%' 
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCEMAL LIKE '%' + @Email + '%' 
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,   
				A.MailingName,
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END
	ELSE IF (@AddressBookType = 0) -- CUSTOMER
	BEGIN
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCEMAL LIKE '%' + @Email + '%' 
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber,
			A.AddressType,
			A.ContactID,
			A.ParentAddressNumber,
			A.AlphaName,
			A.MailingName,
			A.AddressLine1,
			A.City,
			A.State,
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END
	ELSE IF (@AddressBookType = 1) -- CONSUMER
	BEGIN	
		;WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber, 
				A.CC$9TYP	AS AddressType, 
				A.CCLNID	AS ContactID, 
  				A.CC$9PA8	AS ParentAddressNumber,
  				A.CCALPH	AS AlphaName,   
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,  
				A.CCADDS	AS State, 
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCEMAL LIKE '%' + @Email + '%' 
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END

	
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetProfileListByName'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetProfileListByName
	END

GO

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AlphaName				Alpha name to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE Procedure [DBO].PRO_GetProfileListByName
(
	@AlphaName				NVARCHAR(40),
	@AddressBookType		INT,
	@PageIndex				INT,
    @PageSize				INT
)
AS
	
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	
	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);


	IF (@AddressBookType = 9) /* NotUsed */
	BEGIN

		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALPH LIKE '%' + @AlphaName + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,     
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALPH LIKE '%' + @AlphaName + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,   
				A.MailingName,
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 0) /* CUSTOMER */
	BEGIN
		
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALPH LIKE '%' + @AlphaName + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 1) /* CONSUMER */
	BEGIN	
		
		;WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCALPH LIKE '%' + @AlphaName + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	

GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetProfileListByPhoneNo'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetProfileListByPhoneNo
	END

GO

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param PhoneNumber			Phone Number to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE Procedure [DBO].PRO_GetProfileListByPhoneNo
(
	@PhoneNumber			NVARCHAR(20),
	@AddressBookType		INT,
	@PageIndex				INT,
    @PageSize				INT
)
AS
	
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	
	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	IF (@AddressBookType = 9) /* NotUsed */
	BEGIN
		
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCPH1 LIKE '%' + @PhoneNumber + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCPH1 LIKE '%' + @PhoneNumber + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,   
				A.MailingName,
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 0) /* CUSTOMER */
	BEGIN
		
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCPH1 LIKE '%' + @PhoneNumber + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 1) /* CONSUMER */
	BEGIN	
		
		;WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,     
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCPH1 LIKE '%' + @PhoneNumber + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END

GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetProfileListByZipCode'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetProfileListByZipCode
	END

GO

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ZipCode				Zip Code to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE Procedure [DBO].PRO_GetProfileListByZipCode
(
	@ZipCode				NVARCHAR(12),
	@AddressBookType		INT,
	@PageIndex				INT,
    @PageSize				INT
)
AS
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	IF (@AddressBookType = 9) /* NotUsed */
	BEGIN
		
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCADDZ LIKE '%' + @ZipCode + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCADDZ LIKE '%' + @ZipCode + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,   
				A.MailingName,
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 0) /* CUSTOMER */
	BEGIN
		
		;WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCADDZ LIKE '%' + @ZipCode + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE IF (@AddressBookType = 1) /* CONSUMER */
	BEGIN	
		
		;WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT CC$9AN8, CC$9TYP, CCLNID, MIN(CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312
					WHERE CCADDZ LIKE '%' + @ZipCode + '%'
					GROUP BY CC$9AN8, CC$9TYP, CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,   
			A.MailingName,
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A 
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetSalesPersnLstByClient'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetSalesPersnLstByClient
	END

GO

-- #desc						Get Sales Person List by Client
-- #bl_class	 	 			Premier.Profile.SalesPersonList
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @AddressNumber		Address Number
-- #param @ContactID     		Contact ID

CREATE Procedure [DBO].PRO_GetSalesPersnLstByClient
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@ContactID			FLOAT	
)
AS
SELECT 
	B.WA$9AN8 AS AddressNumber,
	B.WAIDLN AS ContactID,
	(CASE WHEN C.UP$9ALLOW IS NULL OR C.UP$9ALLOW = 1 THEN 'N' ELSE 'Y' END) AS Notify,
	(SELECT TOP 1 emails.EAEMAL
						FROM [SCDATA].F01151 emails
						WHERE emails.EAAN8 = B.WA$9AN8 
						 AND emails.EAIDLN = B.WAIDLN AND emails.EAETP = 'E'
						ORDER BY emails.EAEHIER DESC, emails.EARCK7 DESC) AS EmailAddress
	FROM [SCDATA].FQ67125 A 
	INNER JOIN [SCDATA].FQ67101 B
		 ON B.WA$9WAN8= A.SP$9WAN8 AND B.WA$9INID = A.SP$9INID
	 LEFT OUTER JOIN [SCDATA].FQ67997 C 
		 ON C.UP$9USER = B.WA$9USER AND UP$9PCD='ESPRE'
	 WHERE A.SP$9AN8=@AddressNumber AND A.SP$9INID=@InstallationID AND A.SPIDLN=@ContactID;
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_GetTaxRateAreaList'))
	BEGIN
		DROP  Procedure  [DBO].PRO_GetTaxRateAreaList
	END

GO

CREATE Procedure [DBO].PRO_GetTaxRateAreaList
	@TaxRateAreaCode NVARCHAR(10) = null


-- #desc					Read Tax Rate Area.
-- #bl_class				Premier.Profile.TaxRateAreaList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @TaxRateAreaCode	Tax Area Code.


AS
	SET NOCOUNT ON

	SELECT 
		RTRIM(TATXA1) as TaxRateAreaCode ,  
		TATAXA as Description 
	FROM 
		[SCDATA].F4008  
	WHERE 
		(@TaxRateAreaCode IS NULL OR TATXA1 = @TaxRateAreaCode OR @TaxRateAreaCode = '*')
	ORDER BY TATXA1 ASC

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_RequestAccessEmail'))
	BEGIN
		DROP  Procedure  [DBO].PRO_RequestAccessEmail
	END
GO

-- #desc					Search existing web account
-- #bl_class				Premier.Profile.RequestAccessValidationCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber 	Address number to search for
-- #param @Email			Email Address	


CREATE Procedure [DBO].PRO_RequestAccessEmail
	@AddressNumber		FLOAT,
	@Email				NVARCHAR(256)
AS

SET NOCOUNT ON

SELECT	
	EAAN8 AddressNumber,
	EAIDLN ContactId,
	EAEMAL Address
	
FROM	
	[SCDATA].F01151
WHERE
	EAAN8 = @AddressNumber AND EAEMAL = @Email AND 	EAETP = 'E'
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_RequestAccessValidation'))
	BEGIN
		DROP  Procedure  [DBO].PRO_RequestAccessValidation
	END
GO

-- #desc					Search existing web account
-- #bl_class				Premier.Profile.RequestAccessValidationCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber 	Address number to search for
-- #param @InvoiceNumber    Invoice Number	


CREATE Procedure [DBO].PRO_RequestAccessValidation
	@AddressNumber		FLOAT,
	@InvoiceNumber		FLOAT
AS

SET NOCOUNT ON

SELECT
	AIAN8		AS CustomerNumber
FROM 
	[SCDATA].F03012 AI
	INNER JOIN [SCDATA].F03B11 
	ON AIAN8 = RPAN8
WHERE AIAN8 = @AddressNumber AND RPDOC = @InvoiceNumber AND  AI.AICUSTS <> '1' AND AICO = '00000' 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_SearchWebAccount'))
	BEGIN
		DROP  Procedure  [DBO].PRO_SearchWebAccount
	END

GO

-- #desc					Search existing web account
-- #bl_class				Premier.Profile.SearchWebAccountCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param@InstallationID	Installation id
-- #param @AddressNumber 	Address number to search for
-- #param @AddressType		Address Type 		
-- #param @ContactId 		Contact Id

CREATE Procedure [DBO].PRO_SearchWebAccount
(
	@InstallationID NVARCHAR(3),
	@AddressNumber	FLOAT,
	@AddressType	FLOAT,
	@ContactId		FLOAT
)
AS
SET NOCOUNT ON 

SELECT COUNT(*)
	
FROM 
	[SCDATA].FQ67101 AS A
INNER JOIN [SCDATA].FQ67996 B	--Installation By User
	ON A.WA$9USER = B.UI$9USER
	AND B.UI$9INID=@InstallationID
WHERE 
	A.WA$9AN8 = @AddressNumber AND
    A.WA$9TYP = @AddressType AND 
    A.WAIDLN = @ContactId 

return 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_UpdAboutUs'))
	BEGIN
		DROP  Procedure  [DBO].PRO_UpdAboutUs
	END

GO

-- #desc				Update AboutUs.
-- #bl_class			Premier.Profile.AboutUs.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @AboutUsID	AboutUsID

CREATE Procedure [DBO].PRO_UpdAboutUs
		@AboutUsID		 NVARCHAR(3),
		@Description	 NVARCHAR(30),
		@AllowedOnESOM	 FLOAT,
		@AllowedOnPOS	 FLOAT,
		@AllowedOnWEB	 FLOAT,
		@ProgramID		 NVARCHAR(10),
		@WorkStationID	 NVARCHAR(10),
		@UserID			 NVARCHAR(10),
		@DateUpdated	 NUMERIC,
		@TimeLastUpdated NUMERIC
AS
	set nocount on
	UPDATE 
		[SCDATA].FQ67102
	SET  
	    HHDSC1 		= @Description,
        HH$9ESOM	= @AllowedOnESOM, 
        HH$9POSA	= @AllowedOnPOS, 
        HH$9WEBA	= @AllowedOnWEB, 
		HHPID		= @ProgramID,    
        HHJOBN		= @WorkStationID,   
        HHUSER		= @UserID,   
		HHUPMJ		= @DateUpdated,   
		HHUPMT		= @TimeLastUpdated
	WHERE 
		HH$9HHA = @AboutUsID
		 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_UpdAboutUsLang'))
	BEGIN
		DROP  Procedure  [DBO].PRO_UpdAboutUsLang
	END

GO
-- #desc					Update line of business Lang
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AboutUsID		AboutUsLangID
-- #param @LangPref			Language Preference
-- #param @Description		Description

CREATE PROCEDURE [DBO].PRO_UpdAboutUsLang
	@AboutUsID	NVARCHAR(3),
	@LangPref		NVARCHAR(2),
	@Description	NVARCHAR(30)
AS
	UPDATE 
		  [SCDATA].FQ67102L
	  SET HHDSC1  =	 @Description
	WHERE 
		  HH$9HHA  =  @AboutUsID AND
	      HHLNGP   =  @LangPref
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_UpdAllowedShipto'))
	BEGIN
		DROP  Procedure  [DBO].PRO_UpdAllowedShipto
	END

GO

SET QUOTED_IDENTIFIER ON
GO

-- #desc							Update Allowed Ship To's For a Web Account
-- #bl_class						Premier.Profile.UpdateAllowedShiptoCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A			

-- #param @StoreId					Store Id	
-- #param @WebAccountId				Web Account Id	
-- #param @AddressType				Address Book Type	
-- #param @SelectedShipTosXML		XML with Selected Ship To's List
-- #param @DeselectedShipTosXML		XML with Deselected Ship To's List

-- #param @UserReservedNumber		UserReservedNumber			
-- #param @UserReservedAmount		UserReservedAmount	
-- #param @UserReservedCode			UserReservedCode	
-- #param @UserReservedDate			UserReservedDate
-- #param @UserReservedReference	UserReservedReference		
-- #param @UserId					UserId					
-- #param @ProgramId				ProgramId					
-- #param @DateUpdated				DateUpdated				
-- #param @TimeLastUpdated			TimeLastUpdated			
-- #param @WorkStationId			WorkStationId

CREATE PROCEDURE [DBO].PRO_UpdAllowedShipto(
		@StoreId				NVARCHAR(3),
		@WebAccountId			DECIMAL,
		@AddressNumber			DECIMAL,
		@AddressType			FLOAT,
		@SelectedShipTosXML		XML,
		@DeselectedShipTosXML	XML,		
		@UserReservedNumber		FLOAT,
		@UserReservedAmount		FLOAT,
		@UserReservedCode		NVARCHAR(2),
		@UserReservedDate		NUMERIC,
		@UserReservedReference	NVARCHAR(15),
		@UserId					NVARCHAR(10),
		@ProgramId				NVARCHAR(10),
		@WorkStationID			NVARCHAR(10),
		@DateUpdated			NUMERIC,	
		@TimeLastUpdated		FLOAT
	)
	AS
	BEGIN	
		BEGIN TRANSACTION
		BEGIN TRY
			IF @DeselectedShipTosXML IS NOT NULL 
			BEGIN
				DELETE [SCDATA].FQ67101S 
				FROM [SCDATA].FQ67101S S
				INNER JOIN @DeselectedShipTosXML.nodes('/items/item') AS items(item)
					ON S.WS$9SHAN = items.item.value('.','FLOAT') 
			END

			IF @SelectedShipTosXML IS NOT NULL 
			BEGIN
				INSERT INTO [SCDATA].FQ67101S
						           (WS$9WAN8	--WebAccount
								   ,WS$9AN8		--AddressNumber
								   ,WS$9TYP		--AddressType
						           ,WS$9SHAN	--ShiptoNumber
						           ,WS$9INID	--StoreId
								   ,WSURAB		--UserReservedNumber
								   ,WSURAT		--UserReservedAmount
							       ,WSURCD		--UserReservedCode
								   ,WSURDT		--UserReservedDate
							       ,WSURRF		--UserReservedReference
								   ,WSUSER		--UserID
								   ,WSPID		--ProgramID
								   ,WSUPMJ		--DateUpdated
								   ,WSUPMT		--TimeLastUpdated
								   ,WSJOBN		--WorkStationID
								   )
						     SELECT
									@WebAccountId,
									@AddressNumber,
									@AddressType,
									items.item.value('.','FLOAT'),
									@StoreId,
									@UserReservedNumber,
									@UserReservedAmount,
									@UserReservedCode,
									@UserReservedDate,
									@UserReservedReference,
									@UserID,
									@ProgramID,
									@DateUpdated,
									@TimeLastUpdated,
									@WorkStationID
							FROM @SelectedShipTosXML.nodes('/items/item') AS items(item) 
							WHERE NOT EXISTS (SELECT 1 FROM [SCDATA].FQ67101S S WHERE S.WS$9WAN8 = @WebAccountId AND S.WS$9INID = @StoreId AND S.WS$9AN8 = @AddressNumber AND S.WS$9SHAN = items.item.value('.','FLOAT'))

			END

			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			DECLARE @ErrorMessage NVARCHAR(4000);
			DECLARE @ErrorSeverity INT;
			DECLARE @ErrorState INT;

			SELECT 
				@ErrorMessage = ERROR_MESSAGE(),
				@ErrorSeverity = ERROR_SEVERITY(),
				@ErrorState = ERROR_STATE();

			-- Use RAISERROR inside the CATCH block to return error
			-- information about the original error that caused
			-- execution to jump to the CATCH block.
			RAISERROR (@ErrorMessage, -- Message text.
					   @ErrorSeverity, -- Severity.
					   @ErrorState -- State.
					   );
		END CATCH
	END
GO
SET QUOTED_IDENTIFIER OFF 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_UpdLineOfBusiness'))
	BEGIN
		DROP  Procedure  [DBO].PRO_UpdLineOfBusiness
	END

GO

-- #desc							Update line of business.
-- #bl_class						Premier.Profile.LineOfBusiness.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @LineOfBusinessID			Line of business 
-- #param @Description				Description
-- #param @BranchPlant				Branch Plant
-- #param @AddressBookType			Address type
-- #param @PersonCorporationCode	Person Code
-- #param @AdjustmentSchedule		Adjustment Schedule
-- #param @PriceGroup				Price Group
-- #param @SequenceNumber			Sequence Number
-- #param @CategoryCode01			N/A
-- #param @CategoryCode02			N/A
-- #param @CategoryCode03			N/A
-- #param @CategoryCode04			N/A
-- #param @CategoryCode05			N/A
-- #param @CategoryCode06			N/A
-- #param @CategoryCode07			N/A
-- #param @CategoryCode08			N/A
-- #param @CategoryCode09			N/A
-- #param @CategoryCode10			N/A
-- #param @CategoryCode11			N/A
-- #param @CategoryCode12			N/A
-- #param @CategoryCode13			N/A
-- #param @CategoryCode14			N/A
-- #param @CategoryCode15			N/A
-- #param @CategoryCode16			N/A
-- #param @CategoryCode17			N/A
-- #param @CategoryCode18			N/A
-- #param @CategoryCode19			N/A
-- #param @CategoryCode20			N/A
-- #param @CategoryCode21			N/A
-- #param @CategoryCode22			N/A
-- #param @CategoryCode23			N/A
-- #param @CategoryCode24			N/A
-- #param @CategoryCode25			N/A	
-- #param @CategoryCode26			N/A
-- #param @CategoryCode27			N/A
-- #param @CategoryCode28			N/A
-- #param @CategoryCode29			N/A
-- #param @CategoryCode30			N/A
-- #param @ProgramID				Program ID
-- #param @WorkStationID			WorkStation ID
-- #param @UserID					User ID
-- #param @DateUpdated				Last Date Update
-- #param @TimeLastUpdated			Last Updated time

CREATE Procedure [DBO].PRO_UpdLineOfBusiness

		@LineOfBusinessID NVARCHAR(3),
		@Description NVARCHAR(30),
		@BranchPlant NVARCHAR(12),
		@AddressBookType FLOAT,
		@PersonCorporationCode NVARCHAR(1),
		@AdjustmentSchedule NVARCHAR(8),
		@PriceGroup NVARCHAR(8),
		@SequenceNumber FLOAT,
		@CategoryCode01 NVARCHAR(3),
		@CategoryCode02 NVARCHAR(3),
		@CategoryCode03 NVARCHAR(3),
		@CategoryCode04 NVARCHAR(3),
		@CategoryCode05 NVARCHAR(3),
		@CategoryCode06 NVARCHAR(3),
		@CategoryCode07 NVARCHAR(3),
		@CategoryCode08 NVARCHAR(3),
		@CategoryCode09 NVARCHAR(3),
		@CategoryCode10 NVARCHAR(3),
		@CategoryCode11 NVARCHAR(3),
		@CategoryCode12 NVARCHAR(3),
		@CategoryCode13 NVARCHAR(3),
		@CategoryCode14 NVARCHAR(3),
		@CategoryCode15 NVARCHAR(3),
		@CategoryCode16 NVARCHAR(3),
		@CategoryCode17 NVARCHAR(3),
		@CategoryCode18 NVARCHAR(3),
		@CategoryCode19 NVARCHAR(3),
		@CategoryCode20 NVARCHAR(3),
		@CategoryCode21 NVARCHAR(3),
		@CategoryCode22 NVARCHAR(3),
		@CategoryCode23 NVARCHAR(3),
		@CategoryCode24 NVARCHAR(3),
		@CategoryCode25 NVARCHAR(3),
		@CategoryCode26 NVARCHAR(3),
		@CategoryCode27 NVARCHAR(3),
		@CategoryCode28 NVARCHAR(3),
		@CategoryCode29 NVARCHAR(3),
		@CategoryCode30 NVARCHAR(3),
		@ProgramID NVARCHAR(10),
		@WorkStationID NVARCHAR(10),
		@UserID NVARCHAR(10),
		@DateUpdated NUMERIC,
		@TimeLastUpdated NUMERIC
AS

	set nocount on

	UPDATE 
		[SCDATA].FQ67103
	SET  
		LBDSC1  = @Description,
	    LBMCU   = @BranchPlant,
	    LB$9TYP = @AddressBookType,
	    LBTAXC  = @PersonCorporationCode,
	    LBASN   = @AdjustmentSchedule,
	    LBCPGP  = @PriceGroup,
	    LBSEQ   = @SequenceNumber,
	    LBAC01  = @CategoryCode01,
	    LBAC02  = @CategoryCode02,
	    LBAC03  = @CategoryCode03,
	    LBAC04  = @CategoryCode04,
	    LBAC05  = @CategoryCode05,
	    LBAC06  = @CategoryCode06,
	    LBAC07  = @CategoryCode07,
	    LBAC08  = @CategoryCode08,
	    LBAC09  = @CategoryCode09,
	    LBAC10  = @CategoryCode10,
	    LBAC11  = @CategoryCode11,
	    LBAC12  = @CategoryCode12,
	    LBAC13  = @CategoryCode13,
	    LBAC14  = @CategoryCode14,
	    LBAC15  = @CategoryCode15,
	    LBAC16  = @CategoryCode16,
	    LBAC17  = @CategoryCode17,
	    LBAC18  = @CategoryCode18,
	    LBAC19  = @CategoryCode19,
	    LBAC20  = @CategoryCode20,
	    LBAC21  = @CategoryCode21,
	    LBAC22  = @CategoryCode22,
	    LBAC23  = @CategoryCode23,
	    LBAC24  = @CategoryCode24,
	    LBAC25  = @CategoryCode25,
	    LBAC26  = @CategoryCode26,
	    LBAC27  = @CategoryCode27,
	    LBAC28  = @CategoryCode28,
	    LBAC29  = @CategoryCode29,
	    LBAC30  = @CategoryCode30,
	    LBPID   = @ProgramID,
	    LBJOBN  = @WorkStationID,
	    LBUSER  = @UserID,
	    LBUPMJ  = @DateUpdated,
	    LBUPMT  = @TimeLastUpdated
	WHERE 
		LB$9LOB = @LineOfBusinessID
		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].PRO_UpdLineOfBusinessLang'))
	BEGIN
		DROP  Procedure  [DBO].PRO_UpdLineOfBusinessLang
	END

GO

-- #desc						Update line of business Lang
-- #bl_class					Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @LineOfBusinessID		LineOfBusinessID
-- #param @LangPref				Language Preference
-- #param @Description			Description

CREATE PROCEDURE [DBO].PRO_UpdLineOfBusinessLang
	@LineOfBusinessID	NVARCHAR(3),
	@LangPref			NVARCHAR(2),
	@Description		NVARCHAR(30)
AS
	UPDATE 
		  [SCDATA].FQ67103L
	  SET LBDSC1  =	 @Description
	WHERE 
		  LB$9LOB  =  @LineOfBusinessID AND
	      LBLNGP   =  @LangPref


    
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_AddPasswordHistory'))
	BEGIN
		DROP  Procedure  [DBO].SEC_AddPasswordHistory
	END

GO

-- #desc							Add a entry for the User Password History.
-- #bl_class						Premier.Security.UserPasswordHistory.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param UserID					User ID
-- #param Password					Password
-- #param LastDatePwdChanged		Last Date Password Changed
-- #param LastTimePwdChanged		Last Time Password Changed

CREATE Procedure [DBO].SEC_AddPasswordHistory
(
	@UserID FLOAT,
	@Password NVARCHAR(256),
	@LastDatePwdChanged  NUMERIC,
	@LastTimePwdChanged NUMERIC
)
AS

SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ679911
	(
	 PH$9USER, PH$9PWD, 
	 PH$9LDPC, PH$9LTPC
	)
	VALUES
	(
	 @UserID, @Password, 
	 @LastDatePwdChanged, 
	 @LastTimePwdChanged
	)

SET NOCOUNT OFF
RETURN
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_AddUserByInst'))
	BEGIN
		DROP  Procedure  [DBO].SEC_AddUserByInst
	END

GO

-- #desc					Add User by Installation Table 
-- #bl_class				Premier.Security.StoreByUserList.cs/UserStore.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param UserID			User ID number.
-- #param InstallationID	Installation ID

CREATE Procedure [DBO].SEC_AddUserByInst
	@UserID	FLOAT,
	@InstallationID	NVARCHAR(3)
AS

SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ67996
	(
		UI$9USER,  
		UI$9INID   
	)
	VALUES
	(
		 @UserID, 
		 @InstallationID 
	)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_AddUserPermission'))
	BEGIN
		DROP  Procedure  [DBO].SEC_AddUserPermission
	END

GO

-- #desc					Creates a User Permission.
-- #bl_class				Premier.Security.UserPermission.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param userID			User ID number.
-- #param PermissionCode	Permission Code.
-- #param ActionAllowed	Allow to do action.

CREATE Procedure [DBO].SEC_AddUserPermission
	@UserID	FLOAT,
	@PermissionCode	NVARCHAR(5),
	@ActionAllowed	FLOAT
AS

SET NOCOUNT ON

INSERT INTO 
	[SCDATA].FQ67997
	(
	 UP$9USER,  
	 UP$9PCD,  
	 UP$9ALLOW
	)
	VALUES
	(
	 @UserID, 
	 @PermissionCode, 
	 @ActionAllowed
	)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_DelUser'))
	BEGIN
		DROP  Procedure  [DBO].SEC_DelUser
	END

GO

-- #desc				Delete an User. Uses procedures: .
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_DelUserPermission, SEC_DelPasswordHistory and SEC_DelUserByInst
-- #db_references		N/A

-- #param UserID		User ID number.

CREATE Procedure [DBO].SEC_DelUser
	@UserID	FLOAT
AS

SET NOCOUNT ON

--Delete children
EXEC [DBO].SEC_DelUserPermission @UserID,null
EXEC [DBO].SEC_DelPasswordHistory @UserID
EXEC [DBO].SEC_DelUserByInst @UserID,'*'--All related Installations

DELETE  

FROM  
	[SCDATA].FQ67991
WHERE 
	US$9USER = @UserID




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_ExcChangeAccountDisable'))
	BEGIN
		DROP  Procedure  [DBO].SEC_ExcChangeAccountDisable
	END

GO
-- #desc					Update the Account disable status.
-- #bl_class				Premier.Security.User.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserID			User id number.
-- #param AccountDisable	Enable o disable account.

CREATE Procedure [DBO].SEC_ExcChangeAccountDisable
(
	@UserID						FLOAT,	
	@AccountDisable				FLOAT	
)	
AS

SET NOCOUNT ON
	
UPDATE 
	[SCDATA].FQ67991
SET 		 
    US$9SFAD = @AccountDisable
WHERE 
	US$9USER = @UserID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_ExcChangeUserPassword'))
	BEGIN
		DROP  Procedure  [DBO].SEC_ExcChangeUserPassword
	END

GO

-- #desc								Change User Password
-- #bl_class							Premier.Security.User.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param UserID						User ID
-- #param Password						Password
-- #param LastDatePasswordChanged		Last Date Password Changed

CREATE Procedure [DBO].SEC_ExcChangeUserPassword
(
	@UserID FLOAT,
	@Password NVARCHAR(100),
	@LastDatePasswordChanged  NUMERIC
)	
AS

SET NOCOUNT ON
	
UPDATE 
	[SCDATA].FQ67991
SET
	US$9PWD	 = @Password,
    US$9LDPC = @LastDatePasswordChanged, 
    US$9SFCP = 1
WHERE 
	US$9USER = @UserID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_ExcCheckPasswordHistory'))
	BEGIN
		DROP  Procedure  [DBO].SEC_ExcCheckPasswordHistory
	END

GO

-- #desc					Search a password in the password history.
-- #bl_class				Premier.Security.UserPasswordHistory.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserID			User ID number.
-- #param Password			New password to validate.
-- #param Reviews			Number of old passwords in with look for.

CREATE Procedure [DBO].SEC_ExcCheckPasswordHistory
	@UserID FLOAT,
	@Reviews int
AS

SET ROWCOUNT @Reviews 

SELECT 
	PH$9PWD AS UserPassword
FROM [SCDATA].FQ679911
WHERE  PH$9USER = @UserID 
ORDER BY PH$9LDPC DESC, PH$9LTPC DESC


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_ExcCopyDefaultPrivileges'))
	BEGIN
		DROP  Procedure  [DBO].SEC_ExcCopyDefaultPrivileges
	END

GO

-- #desc				Copy all the e-Commerce Default Privileges from an Intallation to another.
-- #bl_class			Premier.Security.DefaultPrivileges.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param sourceInstallationID 
-- #param destinationInstallationID 

CREATE Procedure [DBO].SEC_ExcCopyDefaultPrivileges
(
	@sourceInstallationID NVARCHAR(3),
	@destinationInstallationID NVARCHAR(3)
)
AS

	SET NOCOUNT ON
	
	DELETE FROM [SCDATA].FQ67994E WHERE PE$9INID = @destinationInstallationID
	
	INSERT INTO [SCDATA].FQ67994E
	(
		PE$9INID,
		PE$9PCD,
		PE$9ICF,
		PE$9ALLOW,
		PE$9WEBA
	)
	SELECT 
		@destinationInstallationID,
		PE$9PCD,
		PE$9ICF,
		PE$9ALLOW,
		PE$9WEBA
	FROM [SCDATA].FQ67994E
	WHERE PE$9INID = @sourceInstallationID
	
GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_ExcDeleteDefaultPrivileges'))
	BEGIN
		DROP  Procedure  [DBO].SEC_ExcDeleteDefaultPrivileges
	END

GO

-- #desc					Delete a Default Privileges.
-- #bl_class				Premier.Security.DefaultPrivileges.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE Procedure [DBO].SEC_ExcDeleteDefaultPrivileges
	@InstallationID	NVARCHAR(3)
AS

SET NOCOUNT ON

	DELETE  
	FROM  
		[SCDATA].FQ67994E
	WHERE 
		PE$9INID = @InstallationID



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_ExcSyncWebAcctPassword'))
	BEGIN
		DROP  Procedure  [DBO].SEC_ExcSyncWebAcctPassword
	END

GO

SET QUOTED_IDENTIFIER ON
GO

-- #desc								Change Web Users Password
-- #bl_class							Premier.Security.WebAccountSyncPasswordCommand.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param WebUserName					Web UserName
-- #param StoreListXML					Store ID List in XML Format
-- #param Password						Password
-- #param LastDatePasswordChanged		Last Date Password Changed

CREATE Procedure [DBO].SEC_ExcSyncWebAcctPassword
(
	@WebUserName		NVARCHAR(256),
	@StoreListXML		XML,
	@Password NVARCHAR(256),
	@LastDatePasswordChanged  NUMERIC
)	
AS

SET NOCOUNT ON
UPDATE 
	SQ
SET
	US$9PWD	 = @Password,
    US$9LDPC = @LastDatePasswordChanged, 
    US$9SFCP = 1
FROM 
	[SCDATA].FQ67991 SQ
	INNER JOIN [SCDATA].FQ67101 WUSR /*Web Account User*/
		ON WUSR.WA$9USER = SQ.US$9USER
	INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
		ON INBU.UI$9USER = WUSR.WA$9USER
	INNER JOIN @StoreListXML.nodes('/stores/storeID') AS stores(storeID)
				ON stores.storeID.value('.','NVARCHAR(3)') = INBU.UI$9INID
WHERE
	WUSR.WAEMAL = @WebUserName;
GO
SET QUOTED_IDENTIFIER OFF 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetDefaultPrivileges'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetDefaultPrivileges
	END

GO

-- #desc				Get the Individual or Company e-Commerce Default Privileges List.
-- #bl_class			Premier.Security.DefaultPrivileges.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param InstallationID 
-- #param IndividualCompanyFlag 

CREATE Procedure [DBO].SEC_GetDefaultPrivileges
(
	@InstallationID NVARCHAR(3),
	@IndividualCompanyFlag FLOAT
)
AS
	SET NOCOUNT ON

	SELECT   
              A.PE$9PCD AS PermissionCode,
              isnull(B.PE$9ALLOW, 1) AS ActionAllowed,--0 is True, 1 is False
              isnull(B.PE$9WEBA, 0)  AS WebAllowed,--0 is True, 1 is False
			  Case when B.PE$9PCD IS NULL then 'N' else 'Y' end AS Exist
       FROM  [SCDATA].FQ67994 A
       LEFT OUTER JOIN 
              [SCDATA].FQ67994E B
              ON A.PE$9PCD = B.PE$9PCD 
              and B.PE$9INID = @InstallationID
              and (@IndividualCompanyFlag IS NULL OR B.PE$9ICF = @IndividualCompanyFlag)
       WHERE 
			PECLS='ECOM'  
GO




IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetInstByUserListNotRel'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetInstByUserListNotRel
	END

GO

-- #desc						Read not related Installation list by UserID and Installation type.
-- #bl_class					Premier.Security.StoreByUserList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UserID				User ID
-- #param ApplicationUseFlag	Installation type

CREATE Procedure [DBO].SEC_GetInstByUserListNotRel
	@UserID				FLOAT,
	@ApplicationUseFlag NVARCHAR(4)
AS

SET NOCOUNT ON

SELECT 
	DISTINCT A.IN$9INID as InstallationID,
	@UserID as UserID, 
	INDSC1 as Description,
	IN$9APFL as ApplicationUseFlag
FROM  	
	[SCDATA].FQ670001 A
LEFT JOIN [SCDATA].FQ67996 B --User by Installation
	ON A.IN$9INID = B.UI$9INID
WHERE 	
	(@ApplicationUseFlag = '*' OR IN$9APFL = @ApplicationUseFlag)
	AND 	 	
	A.IN$9INID NOT IN (SELECT UI$9INID FROM [SCDATA].FQ67996 WHERE UI$9USER = @UserID)
	ORDER BY  IN$9APFL ASC,
	INDSC1 ASC
					
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetPermissionList'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetPermissionList
	END

GO

-- #desc					Read permission list filtered by permission id or description.
-- #bl_class				Premier.Security.PermisionList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param PermissionID		Permission ID number.
-- #param Description		Permission Description.

CREATE Procedure [DBO].SEC_GetPermissionList
	@PermissionID NVARCHAR(10),
	@Description NVARCHAR(60),
	@ApplicationUseFlag NVARCHAR(4)
AS

SET NOCOUNT ON

SELECT  
	A.PE$9PCD as PermissionID, 
	A.PEDSC1 as Description, 
	A.PESYS as InstallationType
FROM  
	[SCDATA].FQ67994 A
WHERE 
	(@PermissionID = '*' OR A.PE$9PCD LIKE '%' + @PermissionID + '%') and
	(@Description = '*' OR A.PEDSC1 LIKE '%' + @Description + '%') and
	(@ApplicationUseFlag = '*' OR A.PECLS = @ApplicationUseFlag)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetUserByName'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetUserByName
	END

GO

-- #desc				Read all user information.  Uses procedures:  
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_GetUser
-- #db_references		N/A

-- #param UserName		User Name number.

CREATE Procedure [DBO].SEC_GetUserByName
 -- User Name search criteria
  @InstallationID	NVARCHAR(3),
  @UserName			NVARCHAR(80)
AS

SET NOCOUNT ON

DECLARE @UserId as FLOAT

SELECT 
	@UserId = US$9USER 

FROM 
	[SCDATA].FQ67991 A
INNER JOIN	[SCDATA].FQ67996 B -- User by Installation Table
	ON A.US$9USER = B.UI$9USER
	AND B.UI$9INID = @InstallationID	
WHERE 
	-- User Name filter	
    US$9USRN = @UserName

--call main SP
IF @UserId IS NOT NULL
BEGIN
	EXEC [DBO].SEC_GetUser @UserId
END

SET NOCOUNT OFF

RETURN

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetUserInfo'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetUserInfo
	END

GO

-- #desc					Read user information by UserId.
-- #bl_class				Premier.Security.UserInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserID			User ID number.

CREATE Procedure [DBO].SEC_GetUserInfo
 -- User Id search criteria
  @UserID  FLOAT
  
AS

SET NOCOUNT ON

SELECT 
	US$9USER	as UserID , 
	US$9USRN	as UserName ,   
	USLNGP		as LanguagePreference ,
	[DBO].CMM_GetUserDefinedCodeFnc('01','LP',USLNGP,'*')		as LanguagePrefDesc ,       
    US$9LDPC	as LastDatePasswordChanged,  
    US$9SFAD	as AccountDisable , 
    US$9SFAL	as AccountLockout
FROM 
	[SCDATA].FQ67991
WHERE 
	-- User Id filter	
    US$9USER = @UserID  
    
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetUserInfoByName'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetUserInfoByName
	END

GO

-- #desc					Read user information by UserName.
-- #bl_class				Premier.Security.UserInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserName			User Name.

CREATE Procedure [DBO].SEC_GetUserInfoByName
 -- User Id search criteria
  @UserName			NVARCHAR(100)
  
AS

SET NOCOUNT ON

SELECT 
	US$9USER	as UserID , 
	US$9USRN	as UserName ,   
	USLNGP		as LanguagePreference ,
	[DBO].CMM_GetUserDefinedCodeFnc('01','LP',USLNGP,'*')		as LanguagePrefDesc ,
    US$9LDPC	as LastDatePasswordChanged,  
    US$9SFAD	as AccountDisable , 
    US$9SFAL	as AccountLockout
FROM 
	[SCDATA].FQ67991
WHERE 
	-- User Name filter	
    US$9USRN = @UserName  
    
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetUserPermissionList'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetUserPermissionList
	END

GO


-- #desc						Read user permissions(FQ67997,FQ67994). 
-- #bl_class					Premier.Security.UserPermissionList.cs
-- #db_dependencies				N/A
-- #db_references				N/A		


-- #param UserID				User ID number.
-- #param PermissionCode		Permission code.

CREATE Procedure [DBO].SEC_GetUserPermissionList
	@UserID	FLOAT
AS

SET NOCOUNT ON

	SELECT   
		A.UP$9PCD as PermissionCode, 
		B.PEDSC1 as Description
	FROM  
		[SCDATA].FQ67997 A
		INNER JOIN [SCDATA].FQ67994 B
		ON A.UP$9PCD = B.PE$9PCD
	WHERE 
		A.UP$9USER = @UserID 
		AND A.UP$9ALLOW = 0 -- ALLOWED = YES


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_GetUserPermissListNotRel'))
	BEGIN
		DROP  Procedure  [DBO].SEC_GetUserPermissListNotRel
	END

GO

-- #desc						Read not related Installation list by UserID and Installation type.
-- #bl_class					Premier.Security.UserPermissionList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UserID				User ID
-- #param ApplicationUseFlag	Installation type

CREATE Procedure [DBO].SEC_GetUserPermissListNotRel
	@UserID				FLOAT,
	@ApplicationUseFlag NVARCHAR(4)
AS

SET NOCOUNT ON

SELECT 
	PE$9PCD as PermissionCode,
	PEDSC1 as Description
FROM  	
	[SCDATA].FQ67994 A
WHERE 	
	(@ApplicationUseFlag = '*' OR PECLS = @ApplicationUseFlag) AND
	A.PE$9PCD NOT IN (SELECT UP$9PCD FROM [SCDATA].FQ67997 WHERE UP$9USER=@UserID)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_UpdDefaultPrivilege'))
	BEGIN
		DROP  Procedure  [DBO].SEC_UpdDefaultPrivilege
	END

GO

-- #desc					Update e-Commerce Default Privileges.
-- #bl_class				Premier.Security.DefaultPrivilege.cs

-- #param InstallationID 
-- #param PermissionCode 
-- #param IndividualCompanyFlag 
-- #param ActionAllowed		
-- #param WebAllowed

CREATE Procedure [DBO].SEC_UpdDefaultPrivilege
(
	@InstallationID NVARCHAR(3),
	@PermissionCode NVARCHAR(5),
	@IndividualCompanyFlag FLOAT,	
	@ActionAllowed	FLOAT,	
	@WebAllowed		FLOAT
)
AS
	SET NOCOUNT ON

	UPDATE [SCDATA].FQ67994E
		SET 
			PE$9ALLOW = @ActionAllowed,
			PE$9WEBA = @WebAllowed	
	WHERE 
		PE$9INID = @InstallationID AND 
		PE$9PCD = @PermissionCode AND
		PE$9ICF = @IndividualCompanyFlag

GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].SEC_UpdUser'))
	BEGIN
		DROP  Procedure  [DBO].SEC_UpdUser
	END

GO

-- #desc							Updates an User.
-- #bl_class						Premier.Security.User.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param userID					User id number.
-- #param userName					User name.
-- #param languagePreference		Language preference.
-- #param secretQuestion			Encrypted Question.
-- #param secretAnswer				Encrypetd Answer.
-- #param changePassword			Change password indicator.
-- #param noPasswordChange			No change password.
-- #param PasswordExpires			Indicate when password expire.
-- #param accountDisable			Enable o disable account.
-- #param accountLockout			Lock account when is necesary.
-- #param lastDateAccountLocked	Last date when account was locked.
-- #param lastTimeAccountLocked	Last time when account was locked.

CREATE Procedure [DBO].SEC_UpdUser
	@userID						FLOAT,
	@userName					NVARCHAR(100),
	@languagePreference			NVARCHAR(2),
	@secretQuestion				NVARCHAR(150),
	@secretAnswer				NVARCHAR(150),
	@changePassword				FLOAT,
	@noPasswordChange			FLOAT,
	@PasswordExpires			FLOAT,
	@accountDisable				FLOAT,
	@accountLockout				FLOAT,
	@lastDateAccountLocked			NUMERIC,
	@lastTimeAccountLocked		NUMERIC
	
AS

SET NOCOUNT ON
	
UPDATE 
	[SCDATA].FQ67991
SET 	
	US$9USRN	= @userName , 
	USLNGP		= @languagePreference , 
    US$9SQ		= @secretQuestion ,   
    US$9ANS		= @secretAnswer ,  
    US$9SFCP	= @changePassword ,  
    US$9SFNP	= @noPasswordChange , 
    US$9SFNE	= @PasswordExpires,
    US$9SFAD	= @accountDisable , 
    US$9SFAL	= @accountLockout ,
	US$9LDAL	= @lastDateAccountLocked, 
	US$9LTAL	= @lastTimeAccountLocked
WHERE 
	US$9USER = @userID



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_AddBrandMailSubscription'))
	BEGIN
		DROP  Procedure  [DBO].CSM_AddBrandMailSubscription
	END
GO
-- #desc						Add Brand Mailing
-- #bl_class	 	 			Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		AddressNumber
-- #param @AddressBookType		AddressBookType
-- #param @ContactID			ContactID
-- #param @Brand				Brand

CREATE Procedure [DBO].CSM_AddBrandMailSubscription
(
	@AddressNumber				FLOAT,
	@AddressBookType			FLOAT,
	@ContactID					FLOAT,
	@Brand						NVARCHAR(3),
	@MailPreference				NVARCHAR(1),
	@EmailPreference			FLOAT,
	@EmailFormat				FLOAT,
	@MailContentPreference		NVARCHAR(3),
	@PartnerMail  				NVARCHAR(1),
	@ShareEmail					NVARCHAR(1),

	@MailingFlag1				NVARCHAR(1),
	@MailingFlag2				NVARCHAR(1),
	@MailingFlag3				NVARCHAR(1),
	@MailingFlag4				NVARCHAR(1),
	@MailingFlag5				NVARCHAR(1),
	@MailingFlag6				NVARCHAR(1),
	@MailingFlag7				NVARCHAR(1),
	@MailingFlag8				NVARCHAR(1),
	@MailingFlag9				NVARCHAR(1),
	@MailingFlag10				NVARCHAR(1),
	@MailingCatCode1			NVARCHAR(3),
	@MailingCatCode2			NVARCHAR(3),
	@MailingCatCode3			NVARCHAR(3),
	@MailingCatCode4			NVARCHAR(3),
	@MailingCatCode5			NVARCHAR(3),
	@MailingCatCode6			NVARCHAR(10),
	@MailingCatCode7			NVARCHAR(10),
	@MailingCatCode8			NVARCHAR(10),
	@MailingCatCode9			NVARCHAR(10),
	@MailingCatCode10			NVARCHAR(10),

	@UserReserveCode1			NVARCHAR(3),
	@UserReserveCode2			NVARCHAR(10),
	@UserReservedReference		NVARCHAR(15),
	@UserReservedNumber			FLOAT,
	@UserReservedDate			NUMERIC,
	@UserReservedAmount			FLOAT,
	@UserReservedChar			NVARCHAR(1),
	@UserId						NVARCHAR(10),
	@ProgramId					NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@WorkStationId				NVARCHAR(10),
	@TimeLastUpdated			NUMERIC
)
AS
	SET NOCOUNT ON

INSERT INTO 
	[SCDATA].FQ671041
	(
	 PR$9AN8,    PR$9TYP,   PRIDLN,
	 PR$9SRP1,   PR$9MAIL,  PR$9EMYN,   PR$9EMFP,
	 PR$9MLCP,   PR$9MLP,   PR$9EMALS,  PR$9MLF1,
	 PR$9MLF2,   PR$9MLF3,  PR$9MLF4,   PR$9MLF5,
	 PR$9MLF6,   PR$9MLF7,  PR$9MLF8,   PR$9MLF9,
	 PR$9MLF10,  PR$9MLC1,  PR$9MLC2,   PR$9MLC3,
	 PR$9MLC4,   PR$9MLC5,  PR$9MLC6,   PR$9MLC7,
	 PR$9MLC8,   PR$9MLC9,  PR$9MLC10,  PRURC1,
	 PRURC2,     PRURRF,    PRURAB,     PRURDT,
	 PRURAT,     PRAURCH1,  PRUSER,     PRPID,
	 PRUPMJ,     PRJOBN,    PRUPMT
	)
	VALUES
	(
	 @AddressNumber,		@AddressBookType,			@ContactID,
	 @Brand,				@MailPreference,			@EmailPreference,
	 @EmailFormat,			@MailContentPreference ,	@PartnerMail,
	 @ShareEmail ,			@MailingFlag1,				@MailingFlag2,
	 @MailingFlag3,			@MailingFlag4,				@MailingFlag5,
	 @MailingFlag6,			@MailingFlag7,				@MailingFlag8,
	 @MailingFlag9, 		@MailingFlag10,				@MailingCatCode1,
	 @MailingCatCode2,		@MailingCatCode3,			@MailingCatCode4,
	 @MailingCatCode5,		@MailingCatCode6,			@MailingCatCode7,
	 @MailingCatCode8,		@MailingCatCode9,			@MailingCatCode10,
	 @UserReserveCode1,		@UserReserveCode2,			@UserReservedReference,
	 @UserReservedNumber,	@UserReservedDate,			@UserReservedAmount,
	 @UserReservedChar,		@UserId,					@ProgramId,
	 @DateUpdated,			@WorkStationId,				@TimeLastUpdated
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_ConsumerMasterList'))
	BEGIN
		DROP  Procedure  [DBO].CSM_ConsumerMasterList
	END

GO

-- #desc						Read Master info from Consumer
-- #bl_class					Premier.Consumer.ConsumerMasterList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @AddressNumber		Address Number
-- #param @AlphaName			AlphaName
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown

CREATE Procedure [DBO].CSM_ConsumerMasterList
(
	@AddressNumber	FLOAT,
	@AlphaName   	NVARCHAR(40),
	@PageIndex		INT,
    @PageSize		INT
)
AS

	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	;WITH CTE AS ( 
		SELECT							  
			PR$9AN8,
			PRALPH,
			PRADD1,
			ROW_NUMBER() OVER(ORDER BY PR$9AN8) AS RNUM
		FROM [SCDATA].FQ670302	-- Consumer Master
		WHERE 
			(@AddressNumber = 0 OR PR$9AN8 = @AddressNumber)-- AddressNumber filter
			AND (PR$9AN8 <> PR$9PA8) /* Exclude Parents */
			AND	(@AlphaName = '*' OR PRALPH LIKE '%' + @AlphaName + '%')	 -- AlphaName filter
	)
	SELECT 
		PR$9AN8 AS AddressNumber,
		PRALPH	AS AlphaName,
		PRADD1 AS AddressLine1,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE
	WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd))
		
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_DelBrandMailSubscription'))
	BEGIN
		DROP  Procedure  [DBO].CSM_DelBrandMailSubscription
	END

GO

-- #desc						Delete Brand Mailing
-- #bl_class	 	 			Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		AddressNumber
-- #param @AddressBookType		AddressBookType
-- #param @ContactID			ContactID
-- #param @Brand				Brand

CREATE Procedure [DBO].CSM_DelBrandMailSubscription
(
	@AddressNumber				FLOAT,
	@AddressBookType			FLOAT,
	@ContactID					FLOAT,
	@Brand						NVARCHAR(3)
)

AS
SET NOCOUNT ON

DELETE FROM
		[SCDATA].FQ671041
WHERE 
		PR$9AN8  = @AddressNumber
	AND PR$9TYP  = @AddressBookType
	AND PRIDLN   = @ContactID
	AND PR$9SRP1 = @Brand
 
 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_ExcCheckConsumerStatus'))
	BEGIN
		DROP  Procedure  [DBO].CSM_ExcCheckConsumerStatus
	END

GO

-- #desc						Check Consumer Status
-- #bl_class					Premier.Consumer.Consumer.cs
-- #db_dependencies				N/A
-- #db_references				N/A			

-- #param @AddressNumber		 Address Number (consumer)

CREATE Procedure [DBO].CSM_ExcCheckConsumerStatus
(
	@AddressNumber FLOAT
)
AS

SELECT
	PR$9STS AS Status
FROM
	[SCDATA].FQ670302
WHERE
	PR$9AN8 = @AddressNumber
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_ExcRelateShipTo'))
	BEGIN
		DROP  Procedure  [DBO].CSM_ExcRelateShipTo
	END

GO

-- #desc					Add ShipTo relation
-- #bl_class	 	 		Premier.Consumer.ShipToList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ParentAddress	Parent Address Number
-- #param @ShipToID			Address number
-- #param @User				User who perform action



CREATE Procedure [DBO].CSM_ExcRelateShipTo
	@ParentAddress FLOAT,
	@ShipToID FLOAT
	

AS

SET NOCOUNT ON

	UPDATE
		[SCDATA].FQ670302
	SET
		PR$9PA8 = @ParentAddress
	WHERE
		PR$9AN8 = @ShipToID
	
	
	RETURN

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_ExcValidateConsumerInfo'))
	BEGIN
		DROP  Procedure  [DBO].CSM_ExcValidateConsumerInfo
	END

GO

-- #desc					Validate if consumer/contact exists.
-- #bl_class				Premier.Consumer.ConsumerInfo (ValidateConsumerInfoCommand)
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID  

CREATE Procedure [DBO].CSM_ExcValidateConsumerInfo
(
	@AddressNumber FLOAT,
	@ContactID FLOAT
)

AS
SET NOCOUNT ON

--Read Consumer Information
SELECT 
	PCMLNM AS MailingName,
	PCEMAL AS EmailAddress
FROM [SCDATA].FQ670302
INNER JOIN [SCDATA].FQ67303
	ON PC$9AN8 = PR$9AN8 AND
		PCIDLN = @ContactID
WHERE 
	PR$9AN8 = @AddressNumber
	
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_ExcValidateConsumerRecord'))
	BEGIN
		DROP  Procedure  [DBO].CSM_ExcValidateConsumerRecord
	END

GO

-- #desc							Read if address Number is valid
-- #bl_class						Premier.Consumer.ValidateConsumerRecordCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param @AddressNumber			AddressNumber
-- #param @IsBillTo 				specific Is Bill To  /*1 when is Billto, 0 when is Shipto*/
-- #param @ValidAddressNumber		When is B is valid Billto, S is valid Shipto when is * is invalid address number

CREATE Procedure [DBO].CSM_ExcValidateConsumerRecord
(
	@AddressNumber FLOAT,
	@IsBillTo FLOAT, /*1 when is Billto, 0 when is Shipto*/
	@ValidAddressNumber NVARCHAR(3) OUTPUT	
)
AS
BEGIN
	DECLARE @BillToType NVARCHAR(2)
	
	SELECT DISTINCT @BillToType = PRBADT
	FROM
		[SCDATA].FQ670302
	WHERE
		PR$9AN8 = @AddressNumber
		AND PR$9STS <> '1' /* is active*/ 
	
	IF(@IsBillTo = 1 AND @BillToType IN ('B','X')) /* Is BillTo Only and Billto-Shipto(X)*/
		BEGIN	
			SET @ValidAddressNumber = 'B' /*Valid Bill to*/
		END
	ELSE IF(@IsBillTo = 0 AND @BillToType IN ('S','X')) /* Is Shito Only and Shipto-Billto(X)*/
		BEGIN
			SET @ValidAddressNumber = 'S' /*Valid Ship to*/
		END
	ELSE
	    SET @ValidAddressNumber = '*' /*Not valid AddressNumber*/
END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetConsumerChildren'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetConsumerChildren
	END

GO

-- #desc						Fetch Consumer Additional and Children information
-- #bl_class					N/A
-- #db_dependencies				PRO_GetProfileExtInformation, CSM_GetContacts
-- #db_references				CSM_GetConsumer

-- #param @AddressNumber		Customer Number
-- #param @ContactID			First ContactID 


CREATE Procedure [DBO].CSM_GetConsumerChildren
(
	@AddressNumber FLOAT,
	@ContactID FLOAT
)
AS
SET NOCOUNT ON

DECLARE @AddressType AS FLOAT
SET @AddressType = 1 -- CONSUMER

SET @ContactID = ISNULL(@ContactID,0)

--Get Consumer Contact List excluding main @ContactId
EXEC [DBO].CSM_GetConsumerContacts @AddressNumber , @ContactID


SET NOCOUNT OFF
RETURN
GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetConsumerInfo'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetConsumerInfo
	END

GO

-- #desc						Fetch Consumer minimal information
-- #bl_class					Premier.Consumer.ConsumerInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @AddressNumber		Cunsumer Number
-- #param @ContactID			First ContactID 

CREATE Procedure [DBO].CSM_GetConsumerInfo
(
	@AddressNumber FLOAT,
	@ContactID FLOAT,
	@LangPref NVARCHAR(2)
)

AS
SET NOCOUNT ON

--Read Consumer Information
SELECT 
	PR$9AN8 AS AddressNumber,
	PCIDLN AS ContactID,
	PCGNNM AS FirstName, 
	PCMDNM AS MiddleName, 
	PCSRNM AS LastName,
	PCMLNM AS MailingName,
	PRBADT AS BillingAddressType,
	PRADD1 AS AddressLine1,
	PRADD2 AS AddressLine2,
	PRADD3 AS AddressLine3,
	PRADD4 AS AddressLine4,
	PRCTY1 AS City,
	PRCOUN AS County,
	PRADDS AS State,
	PRADDZ AS ZipCode,
	PRCTR AS Country,
	PCEMAL AS EmailAddress,
	PREXR1 AS TaxExplanationCode,
	PRTXA1 AS TaxArea,
	PS$9ICF AS IndividualCompanyFlag,
	PR$9STS AS Status,
	PRMCU AS BranchPlant
FROM [SCDATA].FQ670302
	INNER JOIN [SCDATA].FQ67303
		ON PR$9AN8 = PC$9AN8
	LEFT OUTER JOIN  [SCDATA].FQ67107
		ON PS$9AN8 = PR$9AN8
		AND PS$9TYP = 1
WHERE 
	PR$9AN8 = @AddressNumber AND
	PCIDLN = @ContactID
  
--Get Customer Phone List
EXEC [DBO].CSM_GetPhones @AddressNumber, @ContactID, null,@LangPref
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetConsumerList'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetConsumerList
	END

GO

-- #desc						Read Customer read only info
-- #bl_class					Premier.Consumer.ConsumerList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @AddressNumber		Address Number
-- #param @MailingName			AlphaName
-- #param @SearchType			Search Type
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown
-- #param @TotalRowCount		Paging - Quantity of rows, result of search filter.

CREATE Procedure [DBO].CSM_GetConsumerList
(
	@AddressNumber	FLOAT,
	@MailingName 	NVARCHAR(40),
	@PageIndex		INT,
    @PageSize		INT
)
AS

	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	;WITH CTE AS ( 
		SELECT							  
			PR$9AN8,
			PCIDLN,
			PCGNNM, 
			PCMDNM, 
			PCSRNM,
			PCMLNM,
			PRBADT, 		
			PRADD1, 
			PRADD2, 
			PRADD3,
			PRADD4,
			PRCTY1,
			PRCOUN,
			PRADDS,
			PRADDZ,
			PRCTR,
			PCEMAL,
			PREXR1,
			PRTXA1,
			PR$9STS,
			PRMCU,
			ROW_NUMBER() OVER(ORDER BY PR$9AN8) AS RNUM
		FROM [SCDATA].FQ670302	-- Consumer Master
		INNER JOIN [SCDATA].FQ67303 --Contact Master
			ON PC$9AN8 = PR$9AN8
		WHERE 
			(@AddressNumber = 0 OR PR$9AN8 = @AddressNumber)-- AddressNumber filter
			AND (PR$9AN8 <> PR$9PA8)
			AND	(@MailingName = '*' OR PCMLNM LIKE '%' + @MailingName + '%')	 -- AlphaName filter
	)
	SELECT 
		PR$9AN8 AS AddressNumber,
		PCIDLN	AS ContactID,
		PCGNNM	AS FirstName, 
		PCMDNM	AS MiddleName, 
		PCSRNM	AS LastName,
		PCMLNM	AS MailingName,
		PRBADT	AS BillingAddressType,
		PRADD1	AS AddressLine1,
		PRADD2	AS AddressLine2,
		PRADD3	AS AddressLine3,
		PRADD4	AS AddressLine4,
		PRCTY1	AS City,
		PRCOUN	AS County,
		PRADDS	AS State,
		PRADDZ	AS ZipCode,
		PRCTR	AS Country,
		PCEMAL	AS emailAddress,
		PREXR1	AS TaxExplanationCode,
		PRTXA1	AS TaxArea,
		PR$9STS AS Status,
		-1 AS IndividualCompanyFlag,
		PRMCU	AS BranchPlant,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE
	WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd))
		
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetContactChildren'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetContactChildren
	END

GO

-- #desc						Fetch Contact Additional and Children Information
-- #bl_class	 	 			Premier.Customer.Contact.cs
-- #db_dependencies				PRO_GetContactExtInformation, CSM_GetPhones, PRO_GetCreditCards
-- #db_references				N/A

-- #param @AddressNumber		Address Number
-- #param @ContactID			Contact ID
-- #param @LangPref				Language Pref
-- #param @IsShipTo				Is ShipTo Y/N, N to retrieve additional information 

CREATE Procedure [DBO].CSM_GetContactChildren
(
	@AddressNumber FLOAT,
	@ContactID FLOAT,
	@LangPref NVARCHAR(2),
	@IsShipTo NVARCHAR(1)
)
AS
	SET NOCOUNT ON

	DECLARE @AddressType AS FLOAT
	SET @AddressType = 1 /* CONSUMER */

	/* Get Contact Extended Information */
	IF(@IsShipTo = 'N') BEGIN
		EXEC [DBO].PRO_GetContactExtInformation @AddressNumber, @AddressType , @ContactID;
	END

	/* Get Contact Phone List */
	EXEC [DBO].CSM_GetPhones @AddressNumber, @ContactID, null, @LangPref;

	/* Get CreditCard List */
	IF(@IsShipTo = 'N') BEGIN
		EXEC [DBO].PRO_GetCreditCards @AddressNumber, @AddressType , null, null, '*', '*', '*', '*', '*', 'ExpDate', 'A', 0, 0, @LangPref;
	END

	/* Get BrandMailing List */
	IF(@IsShipTo = 'N') BEGIN
		EXEC [DBO].CSM_GetBrandMailSubscriptions @AddressNumber, @AddressType, @ContactID;
	END

	SET NOCOUNT OFF
	RETURN
	GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetNonRelatedShipToList'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetNonRelatedShipToList
	END
GO

-- #desc						Get Non related consumer Shiptos 
-- #bl_class	 	 			Premier.Consumer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		Address Number
-- #param @MailingName			Mailing Name
-- #param @EmailUrl				Email Url
-- #param @ZipCode				Zip Code
-- #param @PhoneNumber			Phone Number
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown
-- #param @TotalRowCount		Paging - Quantity of rows, result of search filter.

CREATE Procedure [DBO].CSM_GetNonRelatedShipToList
	@AddressNumber		FLOAT = null,
	@MailingName		NVARCHAR(40),
	@EmailUrl			NVARCHAR(40),
	@ZipCode			NVARCHAR(12),
	@PhoneNumber		NVARCHAR(20),
	@PageIndex			INT,
    @PageSize			INT
AS
	
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	;WITH CTE AS (
		SELECT
			PR$9AN8		AddressNumber,
			PCMLNM		MailingName,
			PCEMAL		EmailUrl,
			PRADD1		AddressLine1,
			PRADD2		AddressLine2,
			PRCTY1		City,
			PRADDS		State,
			PRADDZ		ZipCodePostal,
			PRMCU		BranchPlant,
			PRASN		AdjustmentSchedule,
			PR$9STS		Status,
			ROW_NUMBER() OVER(ORDER BY PCMLNM) AS RNUM
		FROM
			[SCDATA].FQ670302 T0		
			INNER JOIN [SCDATA].FQ67303 T1
				ON	T0.PR$9AN8 = T1.PC$9AN8
				AND T0.PR$9PA8 = 0
				AND T0.PRBADT IN ('S', 'X')
			LEFT OUTER JOIN [SCDATA].FQ67304	T2
				ON PP$9AN8 = PR$9AN8
				AND PPIDLN = 0
				AND PPRCK7 = 1	/* Get only First Record by sequence number */
		WHERE
			(@AddressNumber IS NULL OR T0.PR$9AN8 = @AddressNumber)
			AND	(@MailingName = '*' OR T1.PCMLNM LIKE '%' + @MailingName + '%')
			AND (@EmailUrl = '*' OR PCEMAL LIKE '%' + @EmailUrl + '%')
			AND	(@ZipCode = '*' OR PRADDZ LIKE  '%' + @ZipCode + '%')
			AND	(@PhoneNumber = '*' OR PPPH1 LIKE '%' + @PhoneNumber + '%')
	)
	SELECT
		AddressNumber,		
		MailingName,			
		EmailUrl,			
		AddressLine1,		
		AddressLine2,		
		City,				
		State,				
		ZipCodePostal,	
		BranchPlant,			
		AdjustmentSchedule,
		Status,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A
	WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetNonRelatedShipToSrchLst'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetNonRelatedShipToSrchLst
	END
GO

-- #desc						Get Non related consumer Shiptos 
-- #bl_class	 	 			Premier.Consumer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @FilterTerm			Free Form Search Text
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown



CREATE Procedure [DBO].CSM_GetNonRelatedShipToSrchLst
	@FilterTerm			NVARCHAR(40),
	@PageIndex			INT,
    @PageSize			INT
AS
	
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	DECLARE @AddressNumber FLOAT;
	
	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	IF( ISNUMERIC(@FilterTerm) = 1 )
	BEGIN
		SET @AddressNumber = CAST ( @FilterTerm AS FLOAT  )
	END

	IF(@FilterTerm = '*') BEGIN
		;WITH CTE AS (
			SELECT
				PR$9AN8		AddressNumber,
				PCMLNM		MailingName,
				PCEMAL		EmailUrl,
				PRADD1		AddressLine1,
				PRADD2		AddressLine2,
				PRCTY1		City,
				PRADDS		State,
				PRADDZ		ZipCodePostal,
				PRMCU		BranchPlant,
				PRASN		AdjustmentSchedule,
				PR$9STS		Status,
				ROW_NUMBER() OVER(ORDER BY PCMLNM) AS RNUM
			FROM
				[SCDATA].FQ670302 T0		
				INNER JOIN [SCDATA].FQ67303 T1
					ON	T1.PC$9AN8 = T0.PR$9AN8
				LEFT OUTER JOIN [SCDATA].FQ67304	T2
					ON PP$9AN8 = PR$9AN8
					AND PPIDLN = 0
					AND PPRCK7 = 1					-- Get only First Record by sequence number		
			WHERE
				T0.PR$9PA8 = 0
				AND T0.PRBADT IN ('S', 'X')
		)
		SELECT
			AddressNumber,		
			MailingName,			
			EmailUrl,			
			AddressLine1,		
			AddressLine2,		
			City,				
			State,				
			ZipCodePostal,	
			BranchPlant,			
			AdjustmentSchedule,
			Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END
	ELSE
	BEGIN
		;WITH CTE AS (
			SELECT
				PR$9AN8		AddressNumber,
				PCMLNM		MailingName,
				PCEMAL		EmailUrl,
				PRADD1		AddressLine1,
				PRADD2		AddressLine2,
				PRCTY1		City,
				PRADDS		State,
				PRADDZ		ZipCodePostal,
				PRMCU		BranchPlant,
				PRASN		AdjustmentSchedule,
				PR$9STS		Status,
				ROW_NUMBER() OVER(ORDER BY PCMLNM) AS RNUM
			FROM
				[SCDATA].FQ670302 T0		
				INNER JOIN [SCDATA].FQ67303 T1
					ON	T0.PR$9AN8 = T1.PC$9AN8
					AND T0.PR$9PA8 = 0
					AND T0.PRBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].FQ67304	T2
					ON PP$9AN8 = PR$9AN8
					AND PPIDLN = 0
					AND PPRCK7 = 1					-- Get only First Record by sequence number		
			WHERE
				(@AddressNumber IS NOT NULL AND T0.PR$9AN8 = @AddressNumber)-- Address Number filter
				OR ((T1.PCMLNM LIKE '%' + @FilterTerm + '%')-- Contact Name filter
					OR (PCEMAL LIKE '%' + @FilterTerm + '%')-- Email Address filter
					OR (PRADDZ LIKE '%' + @FilterTerm + '%')-- Zip Code filter
					OR (PPPH1 LIKE '%' + @FilterTerm + '%'))-- Phone filter
		)
		SELECT
			AddressNumber,		
			MailingName,			
			EmailUrl,			
			AddressLine1,		
			AddressLine2,		
			City,				
			State,				
			ZipCodePostal,	
			BranchPlant,			
			AdjustmentSchedule,
			Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END;
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_GetShipToInfo'))
	BEGIN
		DROP  Procedure  [DBO].CSM_GetShipToInfo
	END

-- #desc						Read ShipTo info
-- #bl_class					Premier.Consumer.ShipToInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @StoreId				StoreId
-- #param @AddressNumber		AddressNumber
-- #param @ContactID			Specific contact ID

go

CREATE Procedure [DBO].CSM_GetShipToInfo
(	
	@StoreId NVARCHAR(3),
	@AddressNumber	FLOAT,
	@ContactID	FLOAT	
)
AS
	/* Get the PhoneType value constant */
	DECLARE @PHONECONSTANTCMP NVARCHAR(256)
	DECLARE @PHONECONSTANTIND NVARCHAR(256)
	
	DECLARE @PHONECMPINSTA     NVARCHAR(3)
	DECLARE @PHONEINDINSTA     NVARCHAR(3)
	
	SET @PHONECMPINSTA = @StoreId
	SET @PHONEINDINSTA = @StoreId
	
	EXEC [DBO].CMM_GetConstantValue 'CMP_PHTY01', @PHONECMPINSTA, @PHONECONSTANTCMP OUT
	EXEC [DBO].CMM_GetConstantValue 'IND_PHTY01', @PHONEINDINSTA, @PHONECONSTANTIND OUT
	
	SELECT 	
		PR$9AN8		AS AddressNumber,		-- Address Number 
		PR$9PA8		AS ParentAddressNumber,	-- Parent Address 
		PRALPH		AS AlphaName,			-- Alpha Name 
		PCMLNM		AS MailingName,			-- Mailing Name 
		PRADD1		AS AddressLine1,		-- Address Line 1 
		PRADD2		AS AddressLine2,		-- Address Line 2 
		PRADD3		AS AddressLine3,		-- Address Line 3 
		PRADD4		AS AddressLine4,		-- Address Line 4 
		PRCTY1		AS City,				-- City 
		PRADDS		AS State, 				-- State 
		PRADDZ		AS ZipCode, 			-- Zip Code 
		PRCTR		AS Country,				-- Country 
		PCIDLN		AS ContactID,		    -- Contact ID 
		PCGNNM		AS Firstname,			-- First Name 
		PCMDNM		AS Middlename,			-- Middle Name 
		PCSRNM		AS Lastname,			-- Last Name 
		PRURRF		AS Nickname,			-- Nick Name 
		PS$9POBX	AS PoBoxFlag,			-- PoBoxFlag 
		PRDEL1		AS DeliveryInstructions1,--DeliveryInstructions1 
		PRDEL2		AS DeliveryInstructions2,--DeliveryInstructions2 
		PR$9STS		AS Status,				-- Status 
		PH.Phone,							-- Phone
		0 as Selected						-- Selected		
	FROM 
		[SCDATA].FQ670302 T0
		INNER JOIN [SCDATA].FQ67303 T1
			ON T0.PR$9AN8 = T1.PC$9AN8
		INNER JOIN [SCDATA].FQ67107					/* Profile Extended Information */
			ON PS$9AN8 = T1.PC$9AN8
			AND PS$9TYP = 1 /* CONSUMER */
		OUTER APPLY (SELECT TOP 1 CASE WHEN ISNULL(PPAR1, '') ='' THEN PPPH1 ELSE '(' + RTRIM(LTRIM(PPAR1)) + ') ' + PPPH1 END AS Phone
					FROM [SCDATA].FQ67304 P
					WHERE P.PP$9AN8 = PR$9AN8 
						AND P.PPIDLN = 0 
						AND P.PPPHTP = CASE PS$9ICF WHEN 0 THEN @PHONECONSTANTIND ELSE @PHONECONSTANTCMP END) PH
	WHERE
		PS$9AN8 = @AddressNumber AND
		PCIDLN = @ContactID;

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CSM_UpdBrandMailSubscription'))
	BEGIN
		DROP  Procedure  [DBO].CSM_UpdBrandMailSubscription
	END
GO
-- #desc						Update Brand Mailing
-- #bl_class	 				Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		AddressNumber
-- #param @AddressBookType		AddressBookType
-- #param @ContactID			ContactID
-- #param @Brand				Brand

CREATE Procedure [DBO].CSM_UpdBrandMailSubscription
(
	@AddressNumber				FLOAT,
	@AddressBookType			FLOAT,
	@ContactID					FLOAT,
	@Brand						NVARCHAR(3),
	@MailPreference				NVARCHAR(1),
	@EmailPreference			FLOAT,
	@EmailFormat				FLOAT,
	@MailContentPreference		NVARCHAR(3),
	@PartnerMail  				NVARCHAR(1),
	@ShareEmail					NVARCHAR(1),

	@MailingFlag1				NVARCHAR(1),
	@MailingFlag2				NVARCHAR(1),
	@MailingFlag3				NVARCHAR(1),
	@MailingFlag4				NVARCHAR(1),
	@MailingFlag5				NVARCHAR(1),
	@MailingFlag6				NVARCHAR(1),
	@MailingFlag7				NVARCHAR(1),
	@MailingFlag8				NVARCHAR(1),
	@MailingFlag9				NVARCHAR(1),
	@MailingFlag10				NVARCHAR(1),
	@MailingCatCode1			NVARCHAR(3),
	@MailingCatCode2			NVARCHAR(3),
	@MailingCatCode3			NVARCHAR(3),
	@MailingCatCode4			NVARCHAR(3),
	@MailingCatCode5			NVARCHAR(3),
	@MailingCatCode6			NVARCHAR(10),
	@MailingCatCode7			NVARCHAR(10),
	@MailingCatCode8			NVARCHAR(10),
	@MailingCatCode9			NVARCHAR(10),
	@MailingCatCode10			NVARCHAR(10),

	@UserReserveCode1			NVARCHAR(3),
	@UserReserveCode2			NVARCHAR(10),
	@UserReservedReference		NVARCHAR(15),
	@UserReservedNumber			FLOAT,
	@UserReservedDate			NUMERIC,
	@UserReservedAmount			FLOAT,
	@UserReservedChar			NVARCHAR(1),
	@UserId						NVARCHAR(10),
	@ProgramId					NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@WorkStationId				NVARCHAR(10),
	@TimeLastUpdated			NUMERIC
)
AS

SET NOCOUNT ON

UPDATE 
	[SCDATA].FQ671041
SET
	 PR$9MAIL	=	@MailPreference,
	 PR$9EMYN	=	@EmailPreference,
	 PR$9EMFP	=	@EmailFormat,
	 PR$9MLCP	=	@MailContentPreference,
	 PR$9MLP	=	@PartnerMail,
	 PR$9EMALS	=	@ShareEmail,
	 PR$9MLF1	=	@MailingFlag1,
	 PR$9MLF2	=	@MailingFlag2,
	 PR$9MLF3	=	@MailingFlag3,
	 PR$9MLF4	=	@MailingFlag4,
	 PR$9MLF5	=	@MailingFlag5,
	 PR$9MLF6	=	@MailingFlag6,
	 PR$9MLF7	=	@MailingFlag7,
	 PR$9MLF8	=	@MailingFlag8,
	 PR$9MLF9	=	@MailingFlag9,
	 PR$9MLF10	=	@MailingFlag10,
	 PR$9MLC1	=	@MailingCatCode1,
	 PR$9MLC2	=	@MailingCatCode2,
	 PR$9MLC3	=	@MailingCatCode3,
	 PR$9MLC4	=	@MailingCatCode4,
	 PR$9MLC5	=	@MailingCatCode5,
	 PR$9MLC6	=	@MailingCatCode6,
	 PR$9MLC7	=	@MailingCatCode7,
	 PR$9MLC8	=	@MailingCatCode8,
	 PR$9MLC9	=	@MailingCatCode9,
	 PR$9MLC10	=	@MailingCatCode10,
	 PRURC1		=	@UserReserveCode1,
	 PRURC2		=	@UserReserveCode2,
	 PRURRF		=	@UserReservedReference,
	 PRURAB		=	@UserReservedNumber,
	 PRURDT		=	@UserReservedDate,
	 PRURAT		=	@UserReservedAmount,
	 PRAURCH1	=	@UserReservedChar,
	 PRUSER		=	@UserId,
	 PRPID		=	@ProgramId,
	 PRUPMJ		=	@DateUpdated,
	 PRJOBN		=	@WorkStationId,
	 PRUPMT		=	@TimeLastUpdated
	
WHERE 
		PR$9AN8  = @AddressNumber
    AND PR$9TYP  = @AddressBookType
    AND PRIDLN	 = @ContactID
    AND PR$9SRP1 = @Brand
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_ExcCheckCustomerStatus'))
	BEGIN
		DROP  Procedure  [DBO].CST_ExcCheckCustomerStatus
	END

GO
-- #desc				GET COSTUMER STATUS
-- #bl_class	 	 	Premier.Customer.Customer.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param AddressNumber	Address number
CREATE Procedure [DBO].CST_ExcCheckCustomerStatus
(
	@AddressNumber FLOAT
)
AS

SELECT
	AICUSTS AS Status
FROM
	[SCDATA].F03012
WHERE
	AIAN8 = @AddressNumber
	AND	AICO = '00000'
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_ExcValidateCustomerInfo'))
	BEGIN
		DROP  Procedure  [DBO].CST_ExcValidateCustomerInfo
	END

GO

-- #desc						Validate if Customer/Contact Exist.
-- #bl_class					Premier.Customer.CustomerInfo.cs(ValidateCustomerInfoCommand)
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @AddressNumber		AddressNumber
-- #param @ContactID			specific contact ID

CREATE Procedure [DBO].CST_ExcValidateCustomerInfo
(	
	@AddressNumber	FLOAT,
	@ContactID		FLOAT
)
AS
SET NOCOUNT ON

	SELECT 
		WWMLNM AS MailingName,
		ISNULL((SELECT TOP 1 EAEMAL
			FROM	[SCDATA].F01151
			WHERE	EAAN8 = WW.WWAN8
			AND		EAIDLN = WW.WWIDLN
			AND		EAETP = 'E'
			ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'') AS EmailAddress
	FROM [SCDATA].F0101 AB	    /* Address Book Master*/
	INNER JOIN [SCDATA].F0111 WW	/*Contact Information PS$9ICF*/
		ON WWAN8 = ABAN8
		AND WWIDLN = @ContactID	
	WHERE 
		ABAN8 = @AddressNumber
		
GO




   IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_ExcValidateCustomerRecord'))
	BEGIN
		DROP  Procedure  [DBO].CST_ExcValidateCustomerRecord
	END

GO

-- #desc						Validate if address Number is Active customer
-- #bl_class					Premier.Customer.ValidateCustomerRecordCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @AddressNumber		AddressNumber
-- #param @IsBillTo 			specific Is Bill To  /*1 when is Billto, 0 when is Shipto*/
-- #param @ValidAddressNumber   Output validation result. B = Valid Billto, S = Valid Shipto, * = Invalid Address Number

CREATE Procedure [DBO].CST_ExcValidateCustomerRecord
(
	@AddressNumber FLOAT,
	@IsBillTo FLOAT, /*1 when is Billto, 0 when is Shipto*/
	@ValidAddressNumber NVARCHAR(3) OUTPUT
)
AS
BEGIN
	DECLARE @BillToType NVARCHAR(2)
	
	SELECT DISTINCT @BillToType = AIBADT
	FROM
		[SCDATA].F03012
	WHERE
		AIAN8 = @AddressNumber
		AND AICUSTS <> '1'		/* is active */
		AND AICO = '00000' 
		
	IF(@IsBillTo = 1 AND @BillToType IN ('B','X'))	 /* Is BillTo Only and Billto-Shipto(X)*/
		BEGIN	
			SET @ValidAddressNumber = 'B'		/*Valid Bill to*/
		END
	ELSE IF(@IsBillTo = 0 AND @BillToType IN ('S','X'))	 /* Is Shito Only and Shipto-Billto(X)*/
		BEGIN
			SET @ValidAddressNumber = 'S'		/*Valid Ship to*/
		END
	ELSE
	    SET @ValidAddressNumber = '*'			/*Not valid AddressNumber*/
END

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'FN' AND id = OBJECT_ID(N'[DBO].CST_GetAllowedShiptoStatusFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].CST_GetAllowedShiptoStatusFnc
	END
GO

CREATE FUNCTION [DBO].CST_GetAllowedShiptoStatusFnc
(
	@StoreId		NVARCHAR(3),
	@OrderNumber		FLOAT,
	@OrderCompany		NVARCHAR(5),
	@OrderType			NVARCHAR(2),
	@Webaccount			FLOAT
)
RETURNS INT
AS
BEGIN
	DECLARE @ShiptoAllowed INT;
	DECLARE @ShiptoCount INT;

	SET @ShiptoCount = (SELECT count(*) FROM [SCDATA].FQ67101S WHERE WS$9INID = @StoreId AND WS$9WAN8 = @WebAccount)
	IF(@ShiptoCount > 0) BEGIN
		SET @ShiptoAllowed = ( SELECT count(*) FROM 
		[SCDATA].F4201 
		INNER JOIN [SCDATA].FQ67101S 
		ON WS$9INID = @StoreId 
		AND WS$9WAN8 = @WebAccount
		AND WS$9SHAN = SHSHAN
		WHERE SHDOCO = @OrderNumber AND SHKCOO = @OrderCompany AND SHDCTO = @OrderType)
	END
	ELSE BEGIN
	SET @ShiptoAllowed = 1;
	END

	RETURN @ShiptoAllowed
END

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetBillToList'))
       BEGIN
              DROP  Procedure  [DBO].CST_GetBillToList
       END
GO
-- #desc					Return the "Billto(B) and Shillto/Shipto(X)" actives
-- #bl_class				Premier.Customer.CustomerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID    Installation ID
-- #param AddressNumber		AddressNumber
-- #param MailingName       Mailing Name
-- #param State             State
-- #param ZipCode           Zip Code
-- #param Country           Country
-- #param AddressLine1      Address Line 1
-- #param City				City
-- #param SortBy			Sort By Colum name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageIndex			Page Index
-- #param PageSize			Page Size

CREATE PROCEDURE [DBO].CST_GetBillToList
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@MailingName		NVARCHAR(40),
	@State				NVARCHAR(3),
	@ZipCode			NVARCHAR(12),
	@Country			NVARCHAR(3),
	@AddressLine1		NVARCHAR(40),
    @City				NVARCHAR(25),
	@SortBy				NVARCHAR(20),
	@SortDir			NVARCHAR(1),
	@PageIndex			FLOAT,
    @PageSize			FLOAT
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @SORT_DYNAMIC     NVARCHAR(30)
	DECLARE @INNER_DYNAMIC NVARCHAR(300) = ''

	/* Gets the Document Restrictions Parameters */
	DECLARE @CtRestric  NVARCHAR(256)
	DECLARE @CtINID     NVARCHAR(3)
       
	SET @CtINID = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue 'CT_RESTRIC', @CtINID OUT, @CtRestric OUT

	/* Dynamic sort statement */
	SET @SORT_DYNAMIC = CASE @SortBy 
							WHEN 'AddressNumber' THEN 'AddressNumber' 
							WHEN 'State' THEN 'State' 
							WHEN 'ZipCode' THEN 'ZipCode' 
							WHEN 'AddressLine1' THEN 'AddressLine1' 
							WHEN 'City' THEN 'City' 
							ELSE 'MailingName' END

	/* Dynamic sort direction statement */
	SET @SORT_DYNAMIC = @SORT_DYNAMIC + ' ' + CASE @SortDir WHEN 'A' THEN 'ASC' WHEN 'D' THEN 'DESC' ELSE '' END

	/* Dynamic query condition */
	IF (@MailingName <> N'*') BEGIN
		SET @WHERE_DYNAMIC = N' AND WW.WWMLNM LIKE N''%'' + @MailingName + N''%'''
		SET @MailingName = @MailingName
	END

	IF (@ZipCode<> N'*') BEGIN
		SET @WHERE_DYNAMIC += N' AND AL.ALADDZ LIKE N''%'' + @ZipCode + N''%'''
		SET @ZipCode = @ZipCode
	END

	IF (@State <> N'*') BEGIN
		SET @WHERE_DYNAMIC += N' AND AL.ALADDS = @State'
	END

	IF (@Country <> N'*') BEGIN
		SET @WHERE_DYNAMIC += N' AND AL.ALCTR = @Country'
	END

	IF (@AddressNumber <> 0) BEGIN
		SET @WHERE_DYNAMIC += N' AND A.AIAN8 = @AddressNumber'
	END    

	IF (@AddressLine1 <> N'*') BEGIN
		SET @WHERE_DYNAMIC += N' AND AL.ALADD1 LIKE N''%'' + @AddressLine1 + N''%'''

	END

	IF (@City <> N'*') BEGIN
		SET @WHERE_DYNAMIC += N' AND AL.ALCTY1 LIKE N''%'' + @City + N''%'''
	END

	IF (@CtRestric = '1') BEGIN
		SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ67008 SOR
									ON SOR.DR$9INID = @CtINID 
									AND SOR.DR$9CNST = ''CT_RESTRIC''
									AND SOR.DRKY = WWTYC '

	END    

	SET @WHERE_DYNAMIC = N' WHERE A.AICO = ''00000'' AND A.AIBADT IN (''X'',''B'') AND A.AICUSTS <> ''1''' + @WHERE_DYNAMIC

	/* Dynamic query */

	SET @SQL_DYNAMIC =
	N' WITH CTE AS
	(
		SELECT
			A.AICO      AS Company,
			A.AIAN8     AS AddressNumber,
			WW.WWTYC    AS WWTYC,            
			WW.WWIDLN   AS ContactID,
			WW.WWGNNM   AS FirstName,
			WW.WWMDNM   AS MiddleName,
			WW.WWSRNM   AS LastName,
			WW.WWMLNM   AS MailingName,          
			AL.ALADD1   AS AddressLine1, 
			AL.ALADD2   AS AddressLine2, 
			AL.ALADD3   AS AddressLine3,
			AL.ALADD4   AS AddressLine4,
			AL.ALADDZ   AS ZipCode,
			AL.ALCTY1   AS City,
			AL.ALADDS   AS State,
			AL.ALCOUN   AS County,
			AL.ALCTR    AS Country,
			A.AITXA1    AS TaxAreaCode,
			A.AIEXR1    AS TaxExplanationCode,
			AB.ABTXCT   AS Certificate,
			AB.ABCM		AS CreditMessage,                 
			A.AIEDF2    AS ItemRestrictionsCode,
			AB.ABMCU    AS BranchPlant
		FROM [SCDATA].F03012 A
		INNER JOIN [SCDATA].F0111 WW
			ON A.AIAN8 = WW.WWAN8    
			INNER JOIN [SCDATA].F0101 AB      /*Address Book*/
			ON A.AIAN8 = AB.ABAN8
		CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(A.AIAN8, @CurrentJulianDate) AL      /*Address*/  
		'+ @WHERE_DYNAMIC + 
	'),
	PAGING AS
	(
		SELECT CTE.*, ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM, COUNT(*) OVER () AS TotalRowCount
		FROM CTE '
		+ @INNER_DYNAMIC + '
	)
	SELECT Company, AddressNumber, ContactID, FirstName, MiddleName, LastName, MailingName, '''' AS BillingAddressType, AddressLine1, 
		AddressLine2, AddressLine3, AddressLine4, ZipCode, City, State, County, Country, '''' AS AccountRepresentative, 0 AS Carrier, 
		TaxAreaCode, TaxExplanationCode, Certificate, CreditMessage, '''' AS Email, '''' AS Url, -1 AS IndividualCompanyFlag, 
		'''' AS modeOfTransport, '''' AS CustomerPORequired, ItemRestrictionsCode, BranchPlant, 
		0 AS MinimumOrderAmount, 0 AS MaximumOrderAmount, TotalRowCount
	FROM 
		PAGING
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) '

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@AddressNumber FLOAT, @MailingName NVARCHAR(40), @State NVARCHAR(3), @Country NVARCHAR(3), @ZipCode NVARCHAR(12), 
										@CurrentJulianDate NUMERIC, @AddressLine1 NVARCHAR(40), @City NVARCHAR(25), @CtINID NVARCHAR(3), @PageIndex FLOAT, @PageSize FLOAT',
										@AddressNumber = @AddressNumber, @MailingName = @MailingName, @State = @State, @Country = @Country, @ZipCode = @ZipCode, @AddressLine1 = @AddressLine1, 
										@CurrentJulianDate = @CurrentJulianDate, @City = @City, @CtINID = @CtINID, @PageIndex	= @PageIndex, @PageSize	= @PageSize

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetContactChildren'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetContactChildren
	END

GO

-- #desc					Fetch Contact Additional and Children Information
-- #bl_class	 	 		Premier.Customer.Contact.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param @AddressNumber	Address Number
-- #param @ContactID		Contact ID
-- #param @LangPref			Language Pref
-- #param @IsShipTo			Is ShipTo Y/N, N to retrieve additional information 

CREATE Procedure [DBO].CST_GetContactChildren
(
	@AddressNumber FLOAT,
	@ContactID FLOAT,
	@LangPref NVARCHAR(2),
	@IsShipTo NVARCHAR(1)
)
AS
	SET NOCOUNT ON

	DECLARE @AddressType AS FLOAT
	SET @AddressType = 0 -- CUSTOMER

	/* Get Contact Extended Information */
	IF(@IsShipTo = 'N') BEGIN
		EXEC [DBO].PRO_GetContactExtInformation @AddressNumber, @AddressType, @ContactID;
	END

	/* Get Contact Phone List */
	EXEC [DBO].CST_GetPhones @AddressNumber, @ContactID, null, @LangPref;

	/* Get CreditCard List */
	IF(@IsShipTo = 'N') BEGIN
		EXEC [DBO].PRO_GetCreditCards @AddressNumber, @AddressType, null, null, '*', '*', '*', '*', '*', 'ExpDate', 'A', 0, 0, @LangPref;
	END

	/* Get Electronic Address */
	IF(@IsShipTo = 'N') BEGIN
		EXEC [DBO].CST_GetElectronicAddress @AddressNumber, @ContactID;
	END

	SET NOCOUNT OFF
	RETURN
	GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetCustomerChildren'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetCustomerchildren
	END

GO

-- #desc						Fetch Customer Additional and Children information
-- #bl_class	 	 			Premier.Customer.Customer.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @AddressNumber		Customer Number
-- #param @ContactID			First ContactID

CREATE Procedure [DBO].CST_GetCustomerChildren
(
	@AddressNumber FLOAT,
	@ContactID FLOAT
)
AS
SET NOCOUNT ON

DECLARE @AddressType AS FLOAT
SET @AddressType = 0 -- CUSTOMER

SET @ContactID = ISNULL(@ContactID,0)

--Get Customer Contact List excluding main @ContactId
EXEC [DBO].CST_GetCustomerContacts @AddressNumber , @ContactID

SET NOCOUNT OFF
RETURN
GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetCustomerCompanyByInst'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetCustomerCompanyByInst
	END

GO

-- #desc						Get the companies for the AN8. These are the companies where the Address exists (F03012)
-- #bl_class	 				Premier.Customer.Customer.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		Address Number
-- #param StoreId			    Store Id

CREATE Procedure [DBO].CST_GetCustomerCompanyByInst
	@AddressNumber	FLOAT,
	@StoreId		NVARCHAR(3)
AS
BEGIN
	DECLARE @SINID                  NVARCHAR(3) 
	DECLARE @CompanyConstant		NVARCHAR(256)

	SET @SINID = @StoreId
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @SINID OUT, @CompanyConstant OUT

	if (@CompanyConstant = 'L')
	  BEGIN
			SELECT 
				AICO AS CompanyID,
				CCNAME AS Description
			FROM
				[SCDATA].F03012
			INNER JOIN [SCDATA].F0010
				ON CCCO = AICO 
			WHERE
				AIAN8 = @AddressNumber
				AND ( AICO IN (select CICO FROM [SCDATA].FQ679912 where CI$9INID = @SINID ) OR AICO = '00000')
	 END
    ELSE
    BEGIN
		SELECT 
				AICO AS CompanyID,
				CCNAME AS Description
			FROM
				[SCDATA].F03012			
			INNER JOIN [SCDATA].F0010
				ON CCCO = AICO 
			WHERE
				AIAN8 = @AddressNumber
    END
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetCustomerInfo'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetCustomerInfo
	END

GO

-- #desc					Read Customer read only info
-- #bl_class				Premier.Customer.CustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber	AddressNumber
-- #param @Company			Company number.
-- #param @ContactID		Specific contact ID

CREATE Procedure [DBO].CST_GetCustomerInfo
(
	@Company		NVARCHAR(5) = null,
	@AddressNumber	FLOAT,
	@ContactID		FLOAT,	
	@LangPref		NVARCHAR(2)
)
AS

SET NOCOUNT ON
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	DECLARE @Email as NVARCHAR(256)
	DECLARE @Url as NVARCHAR(256)

	SELECT	TOP 1
			@Email = EAEMAL
	FROM	[SCDATA].F01151 WITH (NOLOCK)
	WHERE	EAAN8 = @AddressNumber
	AND		EAIDLN = @ContactID
	AND		EAETP = 'E'
	ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC

	SELECT	TOP 1
			@Url = EAEMAL
	FROM	[SCDATA].F01151 WITH (NOLOCK)
	WHERE	EAAN8 = @AddressNumber
	AND		EAIDLN = @ContactID
	AND		EAETP = 'I'
	ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC

	SELECT 
		AI.AICO		AS Company,
		AI.AIAN8	AS AddressNumber,
		WW.WWIDLN	AS ContactID,
		WW.WWGNNM	AS FirstName,
		WW.WWMDNM	AS MiddleName,
		WW.WWSRNM	AS LastName,
		WW.WWMLNM	AS MailingName,
		AI.AIBADT	AS BillingAddressType,
		AL.ALADD1	AS AddressLine1, 
		AL.ALADD2	AS AddressLine2, 
		AL.ALADD3	AS AddressLine3,
		AL.ALADD4	AS AddressLine4,
		AL.ALADDZ	AS ZipCode,
		AL.ALCTY1	AS City,
		AL.ALADDS	AS State,
		AL.ALCOUN	AS County,
		AL.ALCTR	AS Country,
		--AS BusinessPhone,
		--AS FaxPhone,
		--AS HomePhone,
		AI.AICMGR	AS AccountRepresentative,
		AI.AICARS	AS Carrier,
		AI.AITXA1	AS TaxAreaCode,
		AI.AIEXR1	AS TaxExplanationCode,
		AB.ABTXCT	AS Certificate,
		AB.ABCM		AS CreditMessage,	
		@Email		AS Email,
		@Url		AS Url,
		PS.PS$9ICF	AS IndividualCompanyFlag,
		''			AS modeOfTransport,
		AI.AIPORQ	AS CustomerPORequired,
		AI.AIEDF2	AS ItemRestrictionsCode,
		AB.ABMCU	AS BranchPlant,
		AI.AIMINO	AS MinimumOrderAmount,
		AI.AIMAXO	AS MaximumOrderAmount
	FROM [SCDATA].F0101 AB	WITH (NOLOCK) -- Address Book Master
		INNER JOIN [DBO].CST_GetCustomerInfoFnc(@Company, @AddressNumber) AI -- Customer Master
			ON AI.AIAN8 = AB.ABAN8
		INNER JOIN [SCDATA].F0111 WW	WITH (NOLOCK)--Contact Information PS$9ICF
			ON WW.WWAN8 = AB.ABAN8
			AND WW.WWIDLN = @ContactID
		CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AB.ABAN8, @CurrentJulianDate) AL -- Address Book Join
		LEFT OUTER JOIN  [SCDATA].FQ67107 PS WITH (NOLOCK)
			ON PS.PS$9AN8 = AB.ABAN8
			AND PS.PS$9TYP= 0
	WHERE 
		AB.ABAN8 = @AddressNumber
	
	--Get Customer Phone List
	EXEC [DBO].CST_GetPhones @AddressNumber, @ContactID, null,@LangPref
	
GO



 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetCustomerList'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetCustomerList
	END

GO 

-- #desc						Read Customer read only list
-- #bl_class					Premier.Customer.CustomerList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		Address Number
-- #param @MailingName			MailingName
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown
-- #param @InstallationID		Installation Id.

CREATE Procedure [DBO].CST_GetCustomerList
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@MailingName 		NVARCHAR(40),
	@PageIndex			INT,
    @PageSize			INT
)
AS
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());
	
	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);
	
	IF(@AddressNumber > 0) BEGIN
		;WITH CTE AS (
			SELECT 
				AB.ABAN8	AS AddressNumber,
				WW.WWIDLN	AS ContactID,
				WW.WWGNNM	AS FirstName,
				WW.WWMDNM	AS MiddleName,
				WW.WWSRNM	AS LastName,
				WW.WWMLNM	AS MailingName,
				AL.ALADD1	AS AddressLine1, 
				AL.ALADD2	AS AddressLine2, 
				AL.ALADD3	AS AddressLine3,
				AL.ALADD4	AS AddressLine4,
				AL.ALADDZ	AS ZipCode,
				AL.ALCTY1	AS City,
				AL.ALADDS	AS State,
				AL.ALCOUN	AS County,
				AL.ALCTR	AS Country,
				AB.ABTXCT	AS Certificate,
				AB.ABCM		AS CreditMessage,
				AB.ABMCU	AS BranchPlant,
				ROW_NUMBER() OVER(ORDER BY ABAN8) AS RNUM
			FROM [SCDATA].F0101 AB	/* Address Book Master*/
			INNER JOIN [SCDATA].F0111 WW	/*Contact Information PS$9ICF*/
				ON WWAN8 = ABAN8
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AB.ABAN8, @CurrentJulianDate) AL	/* Address Book Join*/
			WHERE
				ABAN8 = @AddressNumber
		)
		SELECT
			'00000' AS Company,
			A.AddressNumber,
			A.ContactID,
			A.FirstName,
			A.MiddleName,
			A.LastName,
			A.MailingName,
			'' AS BillingAddressType,
			A.AddressLine1, 
			A.AddressLine2, 
			A.AddressLine3,
			A.AddressLine4,
			A.ZipCode,
			A.City,
			A.State,
			A.County,
			A.Country,
			'' AS AccountRepresentative,
			0 AS Carrier,
			'' AS TaxAreaCode,
			'' AS TaxExplanationCode,
			A.Certificate,
			A.CreditMessage,
			ISNULL((SELECT TOP 1 EAEMAL
						FROM	[SCDATA].F01151
						WHERE	EAAN8 = A.AddressNumber
						AND		EAIDLN = A.ContactID
						AND		EAETP = 'E'
						ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'') AS Email,
			ISNULL((SELECT TOP 1 EAEMAL
						FROM	[SCDATA].F01151
						WHERE	EAAN8 = A.AddressNumber
						AND		EAIDLN = A.ContactID
						AND		EAETP = 'I'
						ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'') AS Url,
			-1 AS IndividualCompanyFlag,
			'' AS modeOfTransport,
			'' AS CustomerPORequired,
			'' AS ItemRestrictionsCode,
			A.BranchPlant,
			0 AS MinimumOrderAmount,
			0 AS MaximumOrderAmount,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END;
	ELSE BEGIN
		;WITH CTE AS (
			SELECT 
				AB.ABAN8	AS AddressNumber,
				WW.WWIDLN	AS ContactID,
				WW.WWGNNM	AS FirstName,
				WW.WWMDNM	AS MiddleName,
				WW.WWSRNM	AS LastName,
				WW.WWMLNM	AS MailingName,
				AL.ALADD1	AS AddressLine1, 
				AL.ALADD2	AS AddressLine2, 
				AL.ALADD3	AS AddressLine3,
				AL.ALADD4	AS AddressLine4,
				AL.ALADDZ	AS ZipCode,
				AL.ALCTY1	AS City,
				AL.ALADDS	AS State,
				AL.ALCOUN	AS County,
				AL.ALCTR	AS Country,
				AB.ABTXCT	AS Certificate,
				AB.ABCM		AS CreditMessage,
				AB.ABMCU	AS BranchPlant,
				ROW_NUMBER() OVER(ORDER BY ABAN8) AS RNUM
			FROM [SCDATA].F0101 AB	-- Address Book Master
			INNER JOIN [SCDATA].F0111 WW	--Contact Information PS$9ICF
				ON WWAN8 = ABAN8	
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AB.ABAN8, @CurrentJulianDate) AL	/* Address Book Join*/
			WHERE
				WW.WWMLNM LIKE N'%' + @MailingName + N'%'
		)
		SELECT
			'00000' AS Company,
			A.AddressNumber,
			A.ContactID,
			A.FirstName,
			A.MiddleName,
			A.LastName,
			A.MailingName,
			'' AS BillingAddressType,
			A.AddressLine1, 
			A.AddressLine2, 
			A.AddressLine3,
			A.AddressLine4,
			A.ZipCode,
			A.City,
			A.State,
			A.County,
			A.Country,
			'' AS AccountRepresentative,
			0 AS Carrier,
			'' AS TaxAreaCode,
			'' AS TaxExplanationCode,
			A.Certificate,
			A.CreditMessage,
			ISNULL((SELECT TOP 1 EAEMAL
						FROM	[SCDATA].F01151
						WHERE	EAAN8 = A.AddressNumber
						AND		EAIDLN = A.ContactID
						AND		EAETP = 'E'
						ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'') AS Email,
			ISNULL((SELECT TOP 1 EAEMAL
						FROM	[SCDATA].F01151
						WHERE	EAAN8 = A.AddressNumber
						AND		EAIDLN = A.ContactID
						AND		EAETP = 'I'
						ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'') AS Url,
			-1 AS IndividualCompanyFlag,
			'' AS modeOfTransport,
			'' AS CustomerPORequired,
			'' AS ItemRestrictionsCode,
			A.BranchPlant,
			0 AS MinimumOrderAmount,
			0 AS MaximumOrderAmount,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END;
GO
	
	
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetCustomerParentName'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetCustomerParentName
	END

GO

-- #desc					Read Customer Parent Name
-- #bl_class				Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber	AddressNumber

CREATE Procedure [DBO].CST_GetCustomerParentName
	@AddressNumber	FLOAT
AS

SET NOCOUNT ON


	SELECT 
		ABALPH  ParentName
	FROM 
		[SCDATA].F0101
	WHERE
		ABAN8 = @AddressNumber

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetCustomerStatInfo'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetCustomerStatInfo
	END

GO

-- #desc					Read Customer Stadistical Information
-- #bl_class				Premier.Customer.CustomerStatInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

--�#param�@StoreId			StoreId
-- #param @AddressNumber	AddressNumber
-- #param @Company			Company number.

CREATE Procedure [DBO].CST_GetCustomerStatInfo
	@StoreId		NCHAR(3),
	@AddressNumber	FLOAT,
	@Company		NVARCHAR(5)	
AS

	DECLARE @CreditCheckLevel  NVARCHAR(2)
	DECLARE	@SeparatorFlex  NVARCHAR(1)
	DECLARE @EXIST FLOAT
	DECLARE @CustomerCompany NVARCHAR(5)
	DECLARE @OrganizationStructureType NCHAR(3)

	--------------------------Gets the Organization Structure Type
	DECLARE @OrgStrType	NCHAR(3)
	DECLARE @OrgStrTypeINID	NCHAR(3)
	SET @OrgStrTypeINID = @StoreId
	/* Credit cart level */
	DECLARE @CreditCheckLevelVal  NCHAR(1);

	SET @SeparatorFlex = 
	(SELECT TOP 1 GCSEPF 
	 FROM [SCDATA].F0009)
	 
	--If Separator Flex is equal to 2
	IF(@SeparatorFlex = '2') BEGIN
		SET @CustomerCompany = @Company
		
		SELECT @EXIST = count(*)
		FROM [SCDATA].F03012 
		WHERE AIAN8 = @AddressNumber
		AND AICO = @CustomerCompany
		
		IF (@EXIST=0) BEGIN
			SET @CustomerCompany = '00000'
		END	
	END
	ELSE BEGIN
		SET @CustomerCompany = '00000'
	END
	
	SET @CreditCheckLevel = (SELECT AIARTO FROM [SCDATA].F03012 WHERE AIAN8=@AddressNumber AND AICO = @CustomerCompany)
	
	--P   Credit check based on the customer's parent number (P for Parent)
	IF(@CreditCheckLevel = 'P')
	BEGIN
		EXEC [DBO].CMM_GetConstantValue 'ORGSTRTYPE', @OrgStrTypeINID, @OrgStrType OUT
		--Set Parent AN8 from F0150
		SELECT TOP 1 @AddressNumber = MAPA8 FROM [SCDATA].F0150 WHERE MAAN8 = @AddressNumber AND MAOSTP = @OrgStrType;
		/* Credit cart level */
		SET @CreditCheckLevelVal = 'P';
	END;
	ELSE BEGIN
		/* Credit cart level */
		SET @CreditCheckLevelVal = 'C';
	END;
	
	
	SELECT
		@AddressNumber AS AddressNumber,
		@CustomerCompany AS Company,
		ISNULL(A.RTDAG,0) AS DateAgeAsOf , -- or cutoff date
		ISNULL(A.RTAAP,0) AS AccountBalanceDue,
		ISNULL(A.RTPDA,0)  AS AccountBalancePastDue,
		B.AIEXHD AS ExemptCreditHold,
		B.AIAPRC AS OpenOrders, 
		B.AIACL AS CreditLimit,
		B.AIDAOJ AS DateAccountOpened,
		B.AITRAR AS PaymentTermsCode,
		C.PNPTD AS PaymentsTermsDesc,
		B.AIASTY AS InvoicedYTD,
		B.AISPYE AS InvoicedPriorYear,
		ISNULL(A.RTCRCD,'') AS CurrencyCode,
		D.CVDL01 AS CurrencyDesc,
		ISNULL(A.RTDAG,0) AS DateLastUpdated,
		ISNULL(E.RSALP,0) AS LastPaymentApplied,
		ISNULL(E.RSDLP,0) AS DateOfLastPayment,
		ISNULL(A.RTFTR,0) AS AgingFuture,
		ISNULL(A.RTCURR,0) AS AgingCurrent,
		ISNULL(A.RTAG1,0) AS AgingCategory1,
		ISNULL(A.RTAG2,0) AS AgingCategory2,
		ISNULL(A.RTAG3,0) AS AgingCategory3,
		ISNULL(A.RTAG4,0) AS AgingCategory4,
		ISNULL(A.RTAG5,0) AS AgingCategory5,
		ISNULL(A.RTAG6,0) AS AgingCategory6,
		ISNULL(A.RTAG7,0) AS AgingCategory7
	FROM [SCDATA].F03012 B		    
	LEFT OUTER JOIN [SCDATA].F03B15 A				--Credit and Cash Management
		ON A.RTAN8 = B.AIAN8 
		AND A.RTCO = @Company 
		AND A.RTPART = @CreditCheckLevelVal
	INNER JOIN [SCDATA].F0014 C		--Payment Terms
		ON  B.AITRAR= C.PNPTC 
	LEFT OUTER JOIN [SCDATA].F0013 D
		ON	D.CVCRCD = A.RTCRCD
	LEFT OUTER JOIN [SCDATA].F03B16S E --A/R Statistical Summary file 
		ON E.RSAN8 = A.RTAN8
		AND E.RSCO = A.RTCO
		AND E.RSPART = @CreditCheckLevelVal
	WHERE
		B.AIAN8 = @AddressNumber 
		AND B.AICO = @CustomerCompany
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetDefaultCustomerInfo'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetDefaultCustomerInfo
	END

GO

-- #desc					Read Customer Info by AddressNumber
-- #bl_class				Premier.Customer.DefaultCustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber	AddressNumber

CREATE Procedure [DBO].CST_GetDefaultCustomerInfo
(
	@AddressNumber	FLOAT
)
AS

SET NOCOUNT ON
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	SELECT 
		AI.AIAN8  AS AddressNumber,
		AB.ABALPH AS AlphaName, 
		AB.ABAT1  AS SearchType,
		AL.ALADD1 AS AddressLine1, 
		AL.ALADD2 AS AddressLine2, 
		AL.ALCTY1 AS City,
		AL.ALADDS AS State,
		AL.ALADDZ AS ZipCode,
		AL.ALCTR  AS Country
	
	FROM [SCDATA].F03012 AI-- Customer Master
	INNER JOIN [SCDATA].F0101 AB	-- Address Book Master
		ON ABAN8 = AIAN8
	CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AI.AIAN8, @CurrentJulianDate) AL	/* Address Book Join */
	WHERE 
		(AIAN8 = @AddressNumber)-- AddressNumber filter	
		AND AI.AIBADT IN ('B','X')
		AND AI.AICO = '00000' -- Company
		
GO




IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetDefaultCustomerList'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetDefaultCustomerList
	END

GO

-- #desc						Read Customer read only info
-- #bl_class					Premier.Customer.DefaultCustomerList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		Address Number
-- #param @AlphaName			AlphaName
-- #param @SearchType			Search Type
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown

CREATE Procedure [DBO].CST_GetDefaultCustomerList
(
	@AddressNumber	FLOAT,
	@AlphaName 		NVARCHAR(40),
	@SearchType		NVARCHAR(3),
	@PageIndex		INT,
    @PageSize		INT
)
AS
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());
	
	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX);
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';

	/* Set the first row to be selected*/
	SET @RowStart = (@PageSize * @PageIndex) - @PageSize + 1;
	/* Set the last row to be selected */
	SET @RowEnd = @PageIndex * @PageSize;	

	IF (@AddressNumber > 0) BEGIN
		SET @WHERE_DYNAMIC = N' AI.AIAN8 = @AddressNumber ';
	END
	
	IF (@AlphaName <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND ';
		SET @WHERE_DYNAMIC += N' AB.ABALPH LIKE N''%'' + @AlphaName + N''%'' ';
	END
	
	IF (@SearchType <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND ';
		SET @WHERE_DYNAMIC += N' AB.ABAT1 = @SearchType ';
	END

	IF (@WHERE_DYNAMIC <> N'') BEGIN
		SET @WHERE_DYNAMIC += N' AND ';
	END

	SET @SQL_DYNAMIC = N'
	WITH CTE AS (
		SELECT 
			AI.AIAN8,
			AB.ABALPH, 
			AB.ABAT1,
			AL.ALADD1, 
			AL.ALADD2, 
			AL.ALCTY1,
			AL.ALADDS,
			AL.ALADDZ,
			AL.ALCTR,
			ROW_NUMBER() OVER(ORDER BY AI.AIAN8) RNUM
		FROM [SCDATA].F03012 AI /* Customer Master */
		CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AI.AIAN8, @CurrentJulianDate) AL	/* Address Book Join */
		INNER JOIN [SCDATA].F0101 AB	/* Address Book Master */
			ON ABAN8 = AIAN8
		WHERE 
			'+ @WHERE_DYNAMIC +N'
			AI.AIBADT IN (N''B'',N''X'')
			AND AI.AICO = N''00000'' /* Company */
	)
	SELECT 
		AIAN8  AS AddressNumber,
		ABALPH AS AlphaName, 
		ABAT1  AS SearchType,
		ALADD1 AS AddressLine1, 
		ALADD2 AS AddressLine2, 
		ALCTY1 AS City,
		ALADDS AS State,
		ALADDZ AS ZipCode,
		ALCTR  AS Country,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A
	WHERE 
		((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN @RowStart AND @rowEnd)) ';

	EXECUTE sp_executesql @SQL_DYNAMIC, N' @AddressNumber FLOAT, @AlphaName NVARCHAR(40), @SearchType NVARCHAR(3), 
										@CurrentJulianDate NUMERIC, @PageIndex INT, @PageSize INT, @RowStart INT, @RowEnd INT ',
										@AddressNumber = @AddressNumber, @AlphaName = @AlphaName, @SearchType = @SearchType,
										@CurrentJulianDate = @CurrentJulianDate, @PageIndex = @PageIndex, @PageSize = @PageSize, 
										@RowStart = @RowStart, @RowEnd = @RowEnd;
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetNonRelatedShipToList'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetNonRelatedShipToList
	END
GO

-- #desc						Get Non related customer Shiptos 
-- #bl_class	 	 			Premier.Customer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @AddressNumber		Address Number
-- #param @MailingName			Mailing Name
-- #param @EmailUrl				Email Url
-- #param @ZipCode				Zip Code
-- #param @PhoneNumber			Phone Number
-- #param @FilterTerm			Free Form Search Text
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown

CREATE Procedure [DBO].CST_GetNonRelatedShipToList
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT = null,
	@MailingName		NVARCHAR(40),
	@EmailUrl			NVARCHAR(40),
	@ZipCode			NVARCHAR(12),
	@PhoneNumber		NVARCHAR(20),
	@PageIndex			INT,
    @PageSize			INT
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	DECLARE @SQL_DYNAMIC NVARCHAR(MAX);
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @LEFT_PHONE NVARCHAR(MAX) = '';

	--------------------------Gets the Organization Structure Type
	DECLARE @OrgStrType	NCHAR(3)
	DECLARE @OrgStrTypeINID	NCHAR(3)
	SET @OrgStrTypeINID = @InstallationID

	EXEC [DBO].CMM_GetConstantValue 'ORGSTRTYPE', @OrgStrTypeINID, @OrgStrType OUT

	IF(@AddressNumber IS NOT NULL)BEGIN
		SET @WHERE_DYNAMIC = N'ABAN8 = @AddressNumber';
	END

	IF(@MailingName <> '*')BEGIN 
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' WWMLNM LIKE ''%'' + @MailingName + ''%'' ';
	END

	IF(@EmailUrl <> '*')BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' EAEMAL LIKE ''%'' + @EmailUrl + ''%'' ';
	END

	IF(@ZipCode <> '*')BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' ALADDZ LIKE ''%'' + @ZipCode + ''%'' ';
	END

	IF(@PhoneNumber <> '*')BEGIN 
		SET @LEFT_PHONE = N' 
		LEFT OUTER JOIN [SCDATA].F0115 /* Phone */
				ON  WPAN8 = ABAN8
				AND WPIDLN = 0 ';
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' WPPH1 LIKE ''%'' + @PhoneNumber + ''%'' ';
	END

	IF (@WHERE_DYNAMIC <> N'')
		SET @WHERE_DYNAMIC += N' AND ';
	SET @WHERE_DYNAMIC += N' MAAN8 IS NULL ';


	SET @SQL_DYNAMIC = 
	N' WITH CTE AS (
		SELECT DISTINCT
			ABAN8  AS AddressNumber,
			WWMLNM AS MailingName,
			ISNULL(EAEMAL, '''') AS EmailUrl,
			ALADD1 AS AddressLine1,
			ALADD2 AS AddressLine2,
			ALCTY1 AS City,
			ALADDS AS State,
			ALADDZ AS ZipCodePostal,
			ABMCU AS BranchPlant,
			AIASN AS AdjustmentSchedule,
			AICUSTS AS Status
		FROM    
			[SCDATA].F0101
			LEFT OUTER JOIN [SCDATA].F0150 /*Address Book Join Address Organization Structure*/
				ON  MAAN8 = ABAN8
				AND MAOSTP = @OrgStrType 
			INNER JOIN [SCDATA].F0111 /* Address Book Join Whos Who (Contacts)*/
				ON  WWAN8 = ABAN8
				AND WWIDLN = 0		   
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(ABAN8, @CurrentJulianDate)	/*Address Book Join Address File*/		   
			INNER JOIN [SCDATA].F03012 /*Address Book Join Customer Master*/
				ON  AIAN8 = ABAN8
				AND AICO = ''00000''
				AND AIBADT IN (''S'', ''X'')
			LEFT OUTER JOIN [SCDATA].F01151
				ON EAAN8 = ABAN8
				AND EAIDLN = 0
				AND EAETP = ''E''
			' + @LEFT_PHONE + N'
		WHERE	
			' + @WHERE_DYNAMIC + N'
	),
	PAGING AS(
		SELECT
			A.AddressNumber,
			A.MailingName,
			A.EmailUrl,
			A.AddressLine1,
			A.AddressLine2,
			A.City,
			A.State,
			A.ZipCodePostal,
			A.BranchPlant,
			A.AdjustmentSchedule,
			A.Status,
			ROW_NUMBER() OVER (ORDER BY A.AddressNumber) AS RNUM
		FROM
			CTE A
	)
	SELECT
		A.AddressNumber,
		A.MailingName,
		A.EmailUrl,
		A.AddressLine1,
		A.AddressLine2,
		A.City,
		A.State,
		A.ZipCodePostal,
		A.BranchPlant,
		A.AdjustmentSchedule,
		A.Status,
		TotalRowCount = (SELECT COUNT(1) FROM PAGING )
	FROM PAGING A
	WHERE
		((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))';

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@AddressNumber FLOAT, @MailingName NVARCHAR(40), @EmailUrl NVARCHAR(40), @ZipCode NVARCHAR(12),
										@CurrentJulianDate NUMERIC, @PhoneNumber NVARCHAR(20),@OrgStrType NCHAR(3), @PageIndex INT, @PageSize INT',
										@AddressNumber = @AddressNumber, @MailingName = @MailingName, @EmailUrl = @EmailUrl, @ZipCode = @ZipCode,
										@CurrentJulianDate = @CurrentJulianDate, @PhoneNumber = @PhoneNumber, @OrgStrType = @OrgStrType, @PageIndex = @PageIndex, @PageSize = @PageSize

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetNonRelatedShipToSrchLst'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetNonRelatedShipToSrchLst
	END
GO

-- #desc						Get Non related customer Shiptos 
-- #bl_class	 	 			Premier.Customer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @FilterTerm			Free Form Search Text
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown

CREATE Procedure [DBO].CST_GetNonRelatedShipToSrchLst
	@InstallationID		NVARCHAR(3),
	@FilterTerm			NVARCHAR(40),
	@PageIndex			INT,
    @PageSize			INT
AS
	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	DECLARE @AddressNumber FLOAT
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	--------------------------Gets the Organization Structure Type
	DECLARE @OrgStrType	NCHAR(3)
	DECLARE @OrgStrTypeINID	NCHAR(3)
	SET @OrgStrTypeINID = @InstallationID

	EXEC [DBO].CMM_GetConstantValue 'ORGSTRTYPE', @OrgStrTypeINID, @OrgStrType OUT

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	IF( ISNUMERIC(@FilterTerm) = 1 )
	BEGIN
		SET @AddressNumber = CAST ( @FilterTerm AS FLOAT  )
	END

	IF (@FilterTerm <> '*') BEGIN

		;WITH CTE AS (
			SELECT 
				ABAN8  AS AddressNumber,        	-- Address Number
				WWMLNM AS MailingName,				-- Mailing Name
				ALADD1 AS AddressLine1,            	-- Address Line 1
				ALADD2 AS AddressLine2,             -- Address Line 2
				ALCTY1 AS City,                     -- City
				ALADDS AS State,                    -- State
				ALADDZ AS ZipCodePostal,            -- Zip Code
				ABMCU AS BranchPlant,				-- Branch plant
				AIASN AS AdjustmentSchedule,		-- Adjustment Schedule
				AICUSTS AS Status,					-- Status
				ROW_NUMBER() OVER(ORDER BY WWMLNM) AS RNUM
			FROM    
				[SCDATA].F0101
				LEFT OUTER JOIN [SCDATA].F0150 						-- Address Book Join Address Organization Structure
					ON  ABAN8 = MAAN8
					AND MAOSTP = @OrgStrType
				INNER JOIN [SCDATA].F0111 							-- Address Book Join Who's Who (Contacts)
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0
				INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
					ON  AIAN8 = ABAN8
					AND AICO = '00000'
					AND AIBADT IN ('S', 'X')
				CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AIAN8, @CurrentJulianDate)	-- Address Book Join Address File
				LEFT OUTER JOIN [SCDATA].F01151
					ON EAAN8 = ABAN8
					AND EAIDLN = 0
					AND EAETP = 'E'
				LEFT OUTER JOIN [SCDATA].F0115				-- Phone
					ON  WPAN8 = ABAN8
					AND WPIDLN = 0
			WHERE	
				((@AddressNumber IS NOT NULL AND ABAN8 = @AddressNumber)-- Address Number filter
				OR ((WWMLNM LIKE '%' + @FilterTerm + '%')-- Contact Name filter
					OR (EAEMAL LIKE '%' + @FilterTerm + '%')-- Email Address filter	
					OR (ALADDZ LIKE '%' + @FilterTerm + '%')-- Zip Code filter
					OR (WPPH1 LIKE '%' + @FilterTerm + '%'))-- Phone filter
				)
				AND MAAN8 IS NULL-- Complements the join.  No registers in F0150
			GROUP BY ABAN8, WWMLNM, ALADD1, ALADD2, ALCTY1, ALADDS, ALADDZ, ABMCU, AIASN, AICUSTS
		)
		SELECT
			AddressNumber,		
			MailingName,
			AddressLine1,		
			AddressLine2,		
			City,				
			State,				
			ZipCodePostal,	
			BranchPlant,			
			AdjustmentSchedule,
			Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END;
	ELSE BEGIN

		;WITH CTE AS (
			SELECT 
				ABAN8  AS AddressNumber,        	-- Address Number
				WWMLNM AS MailingName,				-- Mailing Name
				ALADD1 AS AddressLine1,            	-- Address Line 1
				ALADD2 AS AddressLine2,             -- Address Line 2
				ALCTY1 AS City,                     -- City
				ALADDS AS State,                    -- State
				ALADDZ AS ZipCodePostal,            -- Zip Code
				ABMCU AS BranchPlant,				-- Branch plant
				AIASN AS AdjustmentSchedule,		-- Adjustment Schedule
				AICUSTS AS Status,					-- Status
				ROW_NUMBER() OVER(ORDER BY WWMLNM) AS RNUM
			FROM    
				[SCDATA].F0101
				LEFT OUTER JOIN [SCDATA].F0150 						-- Address Book Join Address Organization Structure
					ON  ABAN8 = MAAN8
					AND MAOSTP = @OrgStrType
				INNER JOIN [SCDATA].F0111 							-- Address Book Join Who's Who (Contacts)
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0		    
				INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
					ON  AIAN8 = ABAN8
					AND AICO = '00000'
					AND AIBADT IN ('S', 'X')
				CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(AIAN8, @CurrentJulianDate)							-- Address Book Join Address File	  
				LEFT OUTER JOIN [SCDATA].F01151
					ON EAAN8 = ABAN8
					AND EAIDLN = 0
					AND EAETP = 'E'
			WHERE	
				MAAN8 IS NULL-- Complements the join.  No registers in F0150
			GROUP BY ABAN8, WWMLNM, ALADD1, ALADD2, ALCTY1, ALADDS, ALADDZ, ABMCU, AIASN, AICUSTS
		)
		SELECT
			AddressNumber,		
			MailingName,
			AddressLine1,		
			AddressLine2,		
			City,				
			State,				
			ZipCodePostal,	
			BranchPlant,			
			AdjustmentSchedule,
			Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

	END;

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetPunchOutCustomerInfo'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetPunchOutCustomerInfo
	END

GO

-- #desc					Read Punchout Customer read only info
-- #bl_class				Premier.Customer.PunchOutCustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			Store Id
-- #param AddressNumber		Address Number
-- #param DunsNumber		Duns Number

CREATE Procedure [DBO].CST_GetPunchOutCustomerInfo
(	
	@StoreId		NVARCHAR(3),
	@AddressNumber	FLOAT,
	@DunsNumber		NVARCHAR(9) = null
)
AS
	-- Get the PhoneType value constant
	DECLARE @PHONECONSTANTCMP NVARCHAR(256)
	
	DECLARE @PHONECMPINSTA     NVARCHAR(3)
	
	SET @PHONECMPINSTA = @StoreId
		
	EXEC [DBO].CMM_GetConstantValue 'CMP_PHTY01', @PHONECMPINSTA, @PHONECONSTANTCMP OUT

	DECLARE @CurrentJulianDate NUMERIC
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())

	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';
	
	IF (@AddressNumber > 0) BEGIN
		SET @WHERE_DYNAMIC += N' A.ABAN8 = @AddressNumber';		
	END
	ELSE BEGIN
		SET @WHERE_DYNAMIC += N' A.ABDUNS = @DunsNumber';
	END

	
	

	SET @SQL_DYNAMIC = N'
		SELECT
	        A.ABAN8	 AS AddressNumber,
			A.ABDUNS AS DunsNumber,
			A.ABAN82 AS RelationShipManagerNumber,
			(SELECT ABALPH FROM [SCDATA].F0101 WHERE ABAN8 = A.ABAN82) AS RelationShipManager,
	        A.ABALPH AS AlphaName,
	        (LTRIM(RTRIM(ISNULL(B.ALADD1,''''))) + '' '' + LTRIM(RTRIM(ISNULL(B.ALADD2,''''))) + '' '' + LTRIM(RTRIM(ISNULL(B.ALADD3,''''))) + '' '' + LTRIM(RTRIM(ISNULL(B.ALADD4,'''')))) AS AddressLines, 
	        B.ALCTY1 AS City,
	        B.ALADDS AS State,
	        B.ALADDZ AS ZipCode,
	        B.ALCTR  AS Country,  			
            PH.Phone AS Phone			
        FROM
	        [SCDATA].F0101 A				/* Address Book Master */
		INNER JOIN [SCDATA].F0111 WW --Contact Information
			ON WW.WWAN8 = A.ABAN8		
        CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(A.ABAN8, @CurrentJulianDate) B		/* Address Book Detail */			
        OUTER APPLY (SELECT TOP 1 CASE WHEN ISNULL(WPAR1,'''') = '''' THEN WPPH1 ELSE ''('' + LTRIM(RTRIM(WPAR1)) + '') '' + WPPH1 END AS Phone
			FROM [SCDATA].F0115 P
			WHERE P.WPAN8 = A.ABAN8 AND P.WPIDLN = 0 
			AND P.WPPHTP = ''' + @PHONECONSTANTCMP + ''') PH 
        WHERE ' + @WHERE_DYNAMIC + ' AND WW.WWIDLN = 0';

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@AddressNumber FLOAT, @DunsNumber NVARCHAR(9), @CurrentJulianDate INTEGER', 
	@AddressNumber = @AddressNumber, @DunsNumber = @DunsNumber, @CurrentJulianDate = @CurrentJulianDate;

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CST_GetShipToInfo'))
	BEGIN
		DROP  Procedure  [DBO].CST_GetShipToInfo
	END

GO

-- #desc					Read ShipTo info
-- #bl_class				Premier.ShipTo.ShipToInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @StoreId			StoreId
-- #param @AddressNumber	AddressNumber
-- #param @Company			Company number.
-- #param @ContactID		specific contact ID

CREATE Procedure [DBO].CST_GetShipToInfo
(
	@StoreId NVARCHAR(3),
	@Company		NVARCHAR(5),
	@AddressNumber	FLOAT,
	@ContactID		FLOAT
)
AS
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

	/* Get the PhoneType value constant */
	DECLARE @PHONECONSTANTCMP NVARCHAR(256)
	DECLARE @PHONECONSTANTIND NVARCHAR(256)
	
	DECLARE @PHONECMPINSTA     NVARCHAR(3)
	DECLARE @PHONEINDINSTA     NVARCHAR(3)

	--------------------------Organization Structure Type
	DECLARE @OrgStrType	NCHAR(3)
	DECLARE @OrgStrTypeINID	NCHAR(3)
	SET @OrgStrTypeINID = @StoreId
	
	SET @PHONECMPINSTA = @StoreId
	SET @PHONEINDINSTA = @StoreId
	
	/* Get Code Length */
	DECLARE @CodeLength INT
	SET @CodeLength = 0;
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
	WHERE DTSY = 'H00' AND DTRT = 'TA');
	
	EXEC [DBO].CMM_GetConstantValue 'CMP_PHTY01', @PHONECMPINSTA, @PHONECONSTANTCMP OUT
	EXEC [DBO].CMM_GetConstantValue 'IND_PHTY01', @PHONEINDINSTA, @PHONECONSTANTIND OUT
	--------------------------Gets the Organization Structure Type
	EXEC [DBO].CMM_GetConstantValue 'ORGSTRTYPE', @OrgStrTypeINID, @OrgStrType OUT
	
	SELECT	
			ABAN8  AS AddressNumber,		-- Address Number
			ISNULL(MAPA8,ABAN8) AS ParentAddressNumber,	-- Parent Address Number
			WWALPH AS AlphaName,			-- Alpha Name
			WWMLNM AS MailingName,			-- Mailing Name
			ALADD1 AS AddressLine1,			-- Address Line 1
			ALADD2 AS AddressLine2,			-- Address Line 2
			ALADD3 AS AddressLine3,			-- Address Line 3
			ALADD4 AS AddressLine4,			-- Address Line 4
			ALCTY1 AS City,					-- City
			ALADDS AS State,				-- State
			ALADDZ AS ZipCode,				-- Zip Code
			ALCTR  AS Country,				-- Country
			WWIDLN AS ContactId,			-- Contact ID
			WWGNNM AS Firstname,			-- First Name
			WWMDNM AS Middlename,			-- Middle Name
			WWSRNM AS Lastname,				-- Last Name
			WWNICK AS Nickname,				-- Nick Name
			ISNULL(PS$9POBX,0) AS PoBoxFlag,-- PoBoxFlag
			AIDEL1 AS DeliveryInstructions1,--DeliveryInstructions1
			AIDEL2 AS DeliveryInstructions2,--DeliveryInstructions2
			AICUSTS AS Status,				-- Status
			MainPhone.Phone,
			0 as Selected,
			ABALKY AS AlternateAddressKey
	FROM	
			[DBO].CST_GetCustomerInfoFnc(@Company, @AddressNumber) 		/* Address Book Join Customer Master */
			INNER JOIN [SCDATA].F0101 
				ON ABAN8 = AIAN8
			LEFT OUTER JOIN [SCDATA].F0150 		/* Address Book Join Address Organization Structure */
				ON  MAAN8 = AIAN8 
				AND MAOSTP = @OrgStrType		
			INNER JOIN [SCDATA].F0111					/* Address Book Join Who's Who (Contacts) */
				ON  WWAN8 = AIAN8
				AND WWIDLN = @ContactID		
			CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(@AddressNumber, @CurrentJulianDate)	/* Address Book Join Address File */	
			LEFT OUTER JOIN [SCDATA].FQ67107		/* Profile Extended Information */
				ON PS$9AN8 = AIAN8
				AND PS$9TYP = 0 /* CUSTOMER */
			LEFT OUTER JOIN [SCCTL].F0005
				ON PS$9AN8 IS NULL
				AND DRSY = 'H00'
				AND DRRT = 'TA' 
				AND SUBSTRING(DRKY, 10 - @CodeLength + 1, @CodeLength) = ABTAXC
			OUTER APPLY (SELECT TOP 1 CASE WHEN ISNULL(WPAR1, '') = '' THEN WPPH1 ELSE '(' + RTRIM(WPAR1) + ') ' + WPPH1 END AS Phone
						FROM [SCDATA].F0115 P
						WHERE P.WPAN8 = ABAN8 AND P.WPIDLN = 0 
							AND P.WPPHTP = CASE (ISNULL(PS$9ICF, (CASE WHEN DRSPHD = '0' THEN 0 ELSE 1 END))) WHEN 0 THEN @PHONECONSTANTIND ELSE @PHONECONSTANTCMP END) MainPhone
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_AddMembershipAltKitItem'))
	BEGIN
		DROP  Procedure  [DBO].CLB_AddMembershipAltKitItem
	END

GO

-- #desc						Add a membership alternative kit item
-- #bl_class					Premier.Club.MembershipAltKitItem.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @MembershipID			MembershipID

CREATE Procedure [DBO].CLB_AddMembershipAltKitItem
(	
	@ItemNumberShortKit		FLOAT,
	@BranchPlant			NVARCHAR(12),
	@AddressNumber			FLOAT,
	@MembershipID			FLOAT,
	@ItemNumber				FLOAT,
	@ComponentLineNumber	FLOAT,
	@QtyRequiredStandard	FLOAT,
	@ChangeQuantity			NVARCHAR(1),
	@UnitOfMeasure			NVARCHAR(2),
	@EffectiveFromDate		NUMERIC,
	@EffectiveThruDate		NUMERIC,
	@OptionaItemKit			NVARCHAR(1),
	@LineType				NVARCHAR(2),
	@UnitPrice				FLOAT,
	@ChangePrice			NVARCHAR(1),
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedAmount		FLOAT,
	@UserReservedNumber		FLOAT,
	@UserReservedReference	NVARCHAR(15),
	@UserId					NVARCHAR(10),
	@ProgramId				NVARCHAR(10),
	@WorkstationId			NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeOfDay				NUMERIC
)
AS

	INSERT INTO [SCDATA].FQ67302
	(
		 IXKIT, IXMMCU, IX$9AN8, 
		 IX$9MMID, IXITM, IXCPNT, IXQNTY, 
		 IX$9MQTY, IXUM, IXEFFF, IXEFFT, 
		 IX$9OPTK, IXLNTY, IXPRIC, IX$9MPRC, 
		 IXURCD, IXURDT, IXURAT, IXURRF, 
		 IXURAB, IXUSER, IXPID, IXJOBN, 
		 IXUPMJ, IXTDAY
	)
	VALUES
	(
		 @ItemNumberShortKit, @BranchPlant, @AddressNumber, 
		 @MembershipID, @ItemNumber, @ComponentLineNumber, @QtyRequiredStandard, 
		 @ChangeQuantity, @UnitOfMeasure, @EffectiveFromDate, @EffectiveThruDate, 
		 @OptionaItemKit, @LineType, @UnitPrice, @ChangePrice, 
		 @UserReservedCode, @UserReservedDate, @UserReservedAmount, @UserReservedReference, 
		 @UserReservedNumber, @UserId, @ProgramId, @WorkstationId, 
		 @DateUpdated, @TimeOfDay
	)



GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_ExcCheckShipToForJoinClubs'))
	BEGIN
		DROP  Procedure  [DBO].CLB_ExcCheckShipToForJoinClubs
	END

GO

-- #desc					Checks whether a ship to's state is allowed for join clubs.
-- #bl_class				Premier.Club.BillToMembership.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param ShipToId			Ship To number id
-- #param AddressType		AddressType 0 = CUSTOMER, 1 = CONSUMER

CREATE  PROCEDURE [DBO].CLB_ExcCheckShipToForJoinClubs
	@InstallationID NVARCHAR(3),
	@ShipToId		FLOAT, 
	@AddressType	FLOAT
	
AS	
	DECLARE @State  NVARCHAR(10)	
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());
	
	if (@AddressType = 0)		-- CUSTOMER
	begin
		SELECT	@STATE = A.ALADDS
		FROM [SCDATA].F0101 B 
		CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(B.ABAN8, @CurrentJulianDate) A
		WHERE ABAN8 = @ShipToId
	end
	ELSE--Consumer
	BEGIN
		SELECT	@STATE = PRADDS
		FROM	[SCDATA].FQ670302
		WHERE	PR$9AN8 = @ShipToId						 
	 END
	
	SELECT	COUNT( * )
	FROM	[SCDATA].FQ675520					
	WHERE  	SCADDS = @State	
	AND		SC$9CP1 = '1'


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetClubAttributeList'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetClubAttributeList
	END

GO

-- #desc								Reads the Club Attibutes
-- #bl_class							Premier.Club.ClubAttributeList.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param @ClubId						ClubId to search for

CREATE Procedure [DBO].CLB_GetClubAttributeList
	@ClubId			NVARCHAR(10)
AS

		SELECT	A.CASEQ			AS SequenceNo,
				A.CA$9AID		AS AttributeId,
				B.AMDSC1		AS Description1,
				B.AMDSC2		AS Description2,
				A.CA$9DASN		AS AttributeSelection, -- Default Value
				A.CA$9FASN		AS SelectionCriteria, --0 = Default or 1 = Force Selection
				A.CA$9ADRV		AS AttributeDriver,
				B.AM$9DTY		AS AttributeType,
				B.AMSY			AS ProductCode,
				B.AMRT			AS UserDefinedCodes
		FROM	[SCDATA].FQ675911 A 
				INNER JOIN [SCDATA].FQ675950 B 
				ON A.CA$9AID = B.AM$9AID
		WHERE	A.CA$9CLUB = @ClubId 
		AND	   (A.CADISPO <> '1') -- 1 = Do not display
		ORDER BY A.CASEQ ASC

GO



 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetClubList'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetClubList
	END

GO

-- #desc						Gets the club list
-- #bl_class					Premier.Club.ClubList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressType			Address book type
-- #param @AddressNumber		Address Number
-- #param @ClubId				ClubId
-- #param @LangPref				Language preference

CREATE Procedure [DBO].CLB_GetClubList
(	
	@AddressType	FLOAT,
	@AddressNumber	FLOAT,
	@ClubId			NVARCHAR(10),
	@LangPref		NVARCHAR(2)
)

AS

	DECLARE @PRICINGGROUP NVARCHAR(8);
	
	SET @PRICINGGROUP = '';
	
	DECLARE @CurrentJulianDate INTEGER;
	
	SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
	
	IF @AddressType = 0 
	BEGIN
		--CUSTOMER
		SELECT @PRICINGGROUP = AICPGP FROM [SCDATA].F03012 WHERE  AIAN8 = @AddressNumber AND AICO = '00000'		
	END
	ELSE
	BEGIN
		--CONSUMER
		SELECT @PRICINGGROUP = PRCPGP FROM [SCDATA].FQ670302 WHERE PR$9AN8 = @AddressNumber	
	END
	
			
	SELECT	A.CM$9CLUB		AS ClubId, 
			A.CMDSC1		AS Description1, 
			A.CMDSC2		AS Description2,
			ISNULL(B.ST$9STAS, '') AS StatusId,
			[DBO].CMM_GetUserDefinedCodeFnc('59','ST',B.ST$9STAS,@LangPref) AS StatusDescription
	FROM	
		[SCDATA].FQ675910 A 
		LEFT JOIN [SCDATA].FQ675980 B 
		ON A.CM$9CLUB = B.ST$9CLUB		
	WHERE	
		(CMASAI <> '1') AND -- 1 = Inactive	
		(CM$9APTO = '0' OR CM$9APTO = '' OR CM$9APTO IS NULL) OR         -- (0,'' = everyone) 
		(CM$9APTO = '1' AND CMCPGP = @PRICINGGROUP) OR				     -- (1 = CustomerPricingGroup)
		(CM$9APTO = '2' AND CM$9AN8 = @AddressNumber)					 -- (2 = Specific Customer)

	AND		A.CMEFTB <= @CurrentJulianDate
	AND		(@ClubId = '*'  OR A.CM$9CLUB = @ClubId)
	ORDER BY CMEFTB DESC
GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembership'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembership
	END

GO

-- #desc						Gets Consumer/Costumer Membership
-- #bl_class					Premier.Club.Membership.cs
-- #db_dependencies				N/A
-- #db_references				CLB_GetMembershipAttributes

-- #param @AddressNumber		Address Number
-- #param @MembershipUniqueId	MembershipUniqueId

CREATE Procedure [DBO].CLB_GetMembership
(
	@AddressNumber			FLOAT,
	@MembershipUniqueID		FLOAT
)

AS

	SELECT 
		A.MM$9AN8	AddressNumber, 
		A.MMUKID	MembershipUniqueId,   
		A.MM$9MMID	MembershipId, 
		A.MM$9CLUB	ClubId, 
		A.MM$9STAS	ClubStatusId,
		A.MMDAOJ	DateAccountOpened,  
		A.MMEFTJ	DateEffective,   
		A.MMEXDJ	DateExpired,   
		A.MMEFTE	DateEndingEffective,   
		A.MM$9ARNW	AutoRenewYN,
		A.MMASN		PriceAdjustmentSchedule,   
		A.MMCPGP	GroupCustomerPriceGroup,   
		A.MMDTYS	DutyStatus,   
		A.MMEUSE	EndUse,   
		A.MMLOB		LineOfBusiness,
		A.MMMOT		ModeOfTransportation,   
		A.MMPTC		PaymentTermsCode,    
		A.MMUPC1	PriceCode1,   
		A.MMUPC2	PriceCode2,   
		A.MMUPC3	PriceCode3,
		A.MMDMCT	ContractNumberDistribution,  
		A.MM$9CKIT	ItemNumber, 
		A.MM$9CMCU	BranchPlant, 
		A.MM$9SHAN	ShipToNumber, 
		A.MMIDLN	ShipToContactId,
		A.MMSHPJ	DateShipped,  
		A.MMPDDJ	PromiseDeliveryDate,   
		A.MMDRQJ	DateRequested,   
		A.MMRHLD	DateReleaseHold,   
		A.MM$9RCD	HoldReasonCode,
		A.MMASAI	ActiveInactive,  
		A.MM$9MSDJ	DateMemberSince, 
		A.MM$9HSOT	HighestStatus, 
		A.MMURCD	UserReservedCode,   
		A.MMURDT	UserReservedDate,
		A.MMURAT	UserReservedAmount,  
		A.MMURAB	UserReservedNumber,   
		A.MMURRF	UserReservedReference,   
		A.MMUSER	UserId,   
		A.MMPID		ProgramId,
		A.MMJOBN	WorkstationId,  
		A.MMUPMJ	DateUpdated,   
		A.MMTDAY	TimeOfDay,   
		A.MMAN80	PickUpAddressNumber,   
		A.MM$9PUWC	PickUpFlag, 
		(SELECT 
			IMDSC1
		 FROM 
			[SCDATA].F4101
		 WHERE IMITM = A.MM$9CKIT) as ItemNumberDescription,
		 (SELECT 
			MCDL01
		  FROM 
			[SCDATA].F0006
		  WHERE 
			MCMCU = A.MM$9CMCU) as BranchPlantDescription,
		 (SELECT 
			LTRIM(RTRIM(CNGNNM)) + ' ' + LTRIM(RTRIM(CNSRNM))
		  FROM 
			[SCDATA].FQ6755B0
		  WHERE 
			CN$9SHAN = A.MM$9SHAN 
			AND CNIDLN = A.MMIDLN) as ShipToName,
		B.MSDSC1 MembershipDescription1,  
		B.MSDSC2 MembershipDescription2
	FROM 
		[SCDATA].FQ6759B0 A
		INNER JOIN [SCDATA].FQ6759A0 B
		ON A.MM$9MMID = B.MS$9MMID
	WHERE 
		(@AddressNumber IS NULL OR A.MM$9AN8 = @AddressNumber)
		AND (@MembershipUniqueID IS NULL OR MMUKID = @MembershipUniqueID)
		 
		
		

--Get Membership Attributes
exec [DBO].CLB_GetMembershipAttributes @AddressNumber,@MembershipUniqueID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembershipAltKitList'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembershipAltKitList
	END

GO

-- #desc						Get the alternative kit selection list
-- #bl_class					Premier.Club.MembershipAltKitList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @MembershipID			Membership ID

CREATE PROCEDURE [DBO].CLB_GetMembershipAltKitList    
(
  @MembershipID	FLOAT
)
AS
	
	DECLARE @CurrentJulianDate INTEGER;
	SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE());

	SELECT	
		IX.IXKIT	AS ItemNumberShortKit, 
		IX.IXMMCU	AS BranchPlant,
		IX.IXITM	AS ItemNumber,
		IX.IXCPNT	AS ComponentLineNumber,
		IX.IXQNTY	AS QtyRequiredStandard,
		IX.IX$9MQTY	AS ChangeQuantity,
		IX.IXUM		AS UnitOfMeasure,
		IX.IXEFFF	AS EffectiveFromDate,
		IX.IXEFFT	AS EffectiveThruDate,
		IX.IX$9OPTK	AS OptionaItemKit,
		IX.IXLNTY	AS LineType,
		IX.IXPRIC	AS UnitPrice,
		IX.IX$9MPRC	AS ChangePrice
	FROM [SCDATA].FQ67302 IX 
	INNER JOIN [SCDATA].FQ6759A0 MS
		ON  MS.MS$9MMID = @MembershipID
		AND MS.MS$9CKIT = IX.IXKIT
		AND MS.MS$9CMCU = IX.IXMMCU
	WHERE	IX.IX$9AN8 = 0
	AND		IX.IXEFFF <= @CurrentJulianDate
	AND		IX.IXEFFT >= @CurrentJulianDate;


GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembershipEmailInfo'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembershipEmailInfo
	END

GO

-- #desc							Gets the membership information to send email
-- #bl_class						Premier.Club.MembershipEmailInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @AddressNumber			Bill to number to search for
-- #param @MembershipUniqueID		Unique ID for membership by AN8

CREATE Procedure [DBO].CLB_GetMembershipEmailInfo
(
	@AddressNumber		FLOAT,
	@MembershipUniqueID	FLOAT
)

AS	 
	 
	SELECT	A.MM$9AN8		AS AddressNumber,  
			A.MMUKID		AS MembershipUniqueId,  
			A.MM$9MMID		AS MembershipId, 
			A.MM$9CLUB		AS ClubId, 
			A.MM$9SHAN		AS ShipToNumber,
			A.MMEXDJ		AS ExpirationDate,
			A.MMEFTJ		AS EffectiveDate,
			B.MSDSC1		AS Description1,
			B.MSDSC2		AS Description2,
			CLB.CMDSC1		AS ClubDescription1,
			CLB.CMDSC2		AS ClubDescription2
    FROM	[SCDATA].FQ6759B0 A 
			INNER JOIN [SCDATA].FQ6759A0 B 
				ON  A.MM$9MMID = B.MS$9MMID
			INNER JOIN [SCDATA].FQ675910 CLB
				ON A.MM$9CLUB = CLB.CM$9CLUB
	WHERE	A.MM$9AN8 = @AddressNumber
	AND		MMUKID = @MembershipUniqueID


GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembershipInfo'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembershipInfo
	END

GO

-- #desc						Gets the membership info for a given address number
-- #bl_class					Premier.Club.MembershipInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		Address Number
-- #param @MembershipUniqueId	MembershipUniqueId

CREATE Procedure [DBO].CLB_GetMembershipInfo
(
	@AddressNumber			FLOAT,
	@MembershipUniqueID		FLOAT
)

AS

	SELECT	
			A.MM$9AN8		AS BillToNumber,  
			A.MMUKID		AS MembershipUniqueId,  
			A.MM$9MMID		AS MembershipId, 
			A.MM$9CLUB		AS ClubId, 
			A.MM$9STAS		AS ClubStatusId,
			A.MM$9SHAN		AS ShipToNumber,
			A.MMEXDJ		AS ExpirationDate,
			A.MMEFTJ		AS EffectiveDate,
			A.MM$9MSDJ		AS DateMemberSince,
			A.MMSHPJ		AS DateShipped,  
			A.MMPDDJ		AS PromiseDeliveryDate,
			A.MMASAI		AS ActiveStatus,
			''				AS ClubStatusDescription,
			B.MSDSC1		AS Description,
			B.MSDSC2		AS Description2,
			''				AS MailingName,
			CLB.CMDSC1		AS ClubDescription1,
			CLB.CMDSC2		AS ClubDescription2
    FROM	[SCDATA].FQ6759B0 A 
			INNER JOIN [SCDATA].FQ6759A0 B 
				ON  A.MM$9MMID = B.MS$9MMID
			INNER JOIN [SCDATA].FQ675910 CLB
				ON A.MM$9CLUB = CLB.CM$9CLUB
	WHERE	A.MM$9AN8 = @AddressNumber
	AND		MMUKID = @MembershipUniqueID	 


GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembershipList'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembershipList
	END

GO

-- #desc						Gets the membership list for a given address numebr
-- #bl_class					Premier.Club.MembershipList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @BillToNumber			Bill to number to search for
-- #param @AddressType			Address Type to search for
-- #param @ActiveStatus			Status
-- #param @ExpirationStatus		Expiration Status
								-- '*'	Any
								-- '0'	Valid	(ExpirationDate = 0 OR CurrentJulianDate >= EffectiveDate and CurrentJulianDate < ExpirationDate)
								-- '1'	Expired	(ActiveStatus = 0 and ExpirationDate > 0 and CurrentJulianDate >= ExpirationDate)
-- #param @LangPref				Language preference


/* This Procedure depend from CST_GetShipToList, CSM_GetShipToList */

CREATE Procedure [DBO].CLB_GetMembershipList
(
	@InstallationID NVARCHAR(3),
	@BillToNumber FLOAT,
	@AddressType FLOAT,
	@ActiveStatus  NVARCHAR(1),
	@ExpirationStatus NVARCHAR(1),
	@LangPref NVARCHAR(2)
)

AS
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = '';
	
	DECLARE @CurrentJulianDate INTEGER;
	SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE());
	
	-- TEMPORARY TABLE FOR SHIPTOS
		CREATE TABLE #SHIPINFO
		(
			AddressNumber		FLOAT,
			ParentAddressNumber FLOAT,
			AlphaName			NVARCHAR(100) collate DATABASE_DEFAULT,
			MLNAM				NVARCHAR(100) collate DATABASE_DEFAULT,
			ADDL1				NVARCHAR(100) collate DATABASE_DEFAULT,
			ADDL2				NVARCHAR(100) collate DATABASE_DEFAULT,
			ADDL3				NVARCHAR(100) collate DATABASE_DEFAULT,
			ADDL4				NVARCHAR(100) collate DATABASE_DEFAULT,
			CITY				NVARCHAR(100) collate DATABASE_DEFAULT,
			STATE				NVARCHAR(100) collate DATABASE_DEFAULT,
			ZIPCD				NVARCHAR(100) collate DATABASE_DEFAULT,
			CNTRY				NVARCHAR(100) collate DATABASE_DEFAULT,
			SHICTCTID			FLOAT,
			FIRSTNAME			NVARCHAR(100) collate DATABASE_DEFAULT,
			MDLNAME				NVARCHAR(100) collate DATABASE_DEFAULT,
			LSTNAME				NVARCHAR(100) collate DATABASE_DEFAULT,
			NKNAME				NVARCHAR(100) collate DATABASE_DEFAULT,
			ADRSFLAG			NVARCHAR(100) collate DATABASE_DEFAULT,
			AIDEL1				NVARCHAR(30) collate DATABASE_DEFAULT,
			AIDEL2				NVARCHAR(30) collate DATABASE_DEFAULT,
			Status				NVARCHAR(2) collate DATABASE_DEFAULT,
			Selected			NVARCHAR(2) collate DATABASE_DEFAULT,
			Phone				NVARCHAR(50) collate DATABASE_DEFAULT
		);
		CREATE NONCLUSTERED INDEX MLNAM_#SHIPINFO ON #SHIPINFO (MLNAM);
		CREATE NONCLUSTERED INDEX AddressNumber_#SHIPINFO ON #SHIPINFO (AddressNumber);
	
	--Customer Record
	IF @AddressType = 0
	 BEGIN	
	 
	 -- ALTER TEMPORARY TABLE FOR CUSTOMER SHIPTOS
		ALTER TABLE #SHIPINFO
		ADD
			AlternateAddressKey	NVARCHAR(20) collate DATABASE_DEFAULT,
			TotalRowCount FLOAT
		;
		
		INSERT INTO #SHIPINFO
		EXEC [DBO].CST_GetShipToList @InstallationID, '00000', @BillToNumber, 0, 0, '*', '*', '*', '*', '*', '*', '*', '*', '*', 0, 0, 0;
	 END
	--Consumer Record 
	ELSE
	 BEGIN
		-- ALTER TEMPORARY TABLE FOR CONSUMER SHIPTOS
		ALTER TABLE #SHIPINFO
		ADD
			TotalRowCount FLOAT
		;
		
		INSERT	INTO #SHIPINFO
		EXEC	[DBO].CSM_GetShipToList @InstallationID, @BillToNumber, 0, 0, '*', '*', '*', '*', '*', '*', '*', '*', '*', 0, 0, 0;
	END
	 
	IF (@BillToNumber IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC = N' A.MM$9AN8 = @BillToNumber ';
	END
	IF (@ActiveStatus <> '*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' A.MMASAI = @ActiveStatus '
	END
	IF (@ExpirationStatus <> '*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND ';

		IF (@ExpirationStatus = '0') BEGIN
			SET @WHERE_DYNAMIC += N' (A.MMEXDJ = 0 OR (@CurrentJulianDate >= A.MMEFTJ AND @CurrentJulianDate < A.MMEXDJ)) ';
		END
		ELSE IF (@ExpirationStatus = '1') BEGIN
			SET @WHERE_DYNAMIC += N' (A.MMASAI = 0 AND A.MMEXDJ > 0 AND @CurrentJulianDate >= A.MMEXDJ) ';
		END
	END

	/* Add where clause */
	IF (@WHERE_DYNAMIC <> '') BEGIN
		SET @WHERE_DYNAMIC = N' WHERE ' + @WHERE_DYNAMIC;
	END
	
	SET @SQL_DYNAMIC = N'
	SELECT	A.MM$9AN8		AS BillToNumber,  
			A.MMUKID		AS MembershipUniqueId,  
			A.MM$9MMID		AS MembershipId, 
			A.MM$9CLUB		AS ClubId, 
			A.MM$9STAS		AS ClubStatusId,
			A.MM$9SHAN		AS ShipToNumber,
			A.MMEXDJ		AS ExpirationDate,
			A.MMEFTJ		AS EffectiveDate,
			A.MM$9MSDJ		AS DateMemberSince,
			A.MMSHPJ		AS DateShipped,  
			A.MMPDDJ		AS PromiseDeliveryDate,
			A.MMASAI		AS ActiveStatus,
			[DBO].CMM_GetUserDefinedCodeFnc(''59'',''ST'',A.MM$9STAS,@LangPref) AS ClubStatusDescription,
			B.MSDSC1		AS Description,
			B.MSDSC2		AS Description2,
			S.MLNAM			AS MailingName,
			CLB.CMDSC1		AS ClubDescription1,
			CLB.CMDSC2		AS ClubDescription2,
			S.Selected		AS Selected
    FROM	[SCDATA].FQ6759B0 A 
			INNER JOIN [SCDATA].FQ6759A0 B 
				ON  A.MM$9MMID = B.MS$9MMID
			INNER JOIN [SCDATA].FQ67104 X 
				ON  A.MM$9AN8 = X.AB$9AN8
				AND ABIDLN = 0
			INNER JOIN [SCDATA].FQ675910 CLB
				ON A.MM$9CLUB = CLB.CM$9CLUB
			INNER JOIN #SHIPINFO S /*GET MAILING NAME FROM MEMBERSHIP SHIPTO*/
				ON  S.AddressNumber = CASE	WHEN A.MM$9SHAN = 0.0 
											THEN X.AB$9SHAN 
											ELSE A.MM$9SHAN 
									  END
	'+ @WHERE_DYNAMIC +'
   	ORDER BY A.MMUKID';
   	
	EXECUTE sp_executesql @SQL_DYNAMIC, N' @BillToNumber FLOAT, @ActiveStatus  NVARCHAR(1), @CurrentJulianDate INTEGER, @LangPref NVARCHAR(2)',
										@BillToNumber = @BillToNumber, @ActiveStatus = @ActiveStatus, @CurrentJulianDate = @CurrentJulianDate, @LangPref = @LangPref

   	DROP TABLE #SHIPINFO

GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembershipMasterInfo'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembershipMasterInfo
	END

GO

-- #desc						Gets the membership information
-- #bl_class					Premier.Club.MembershipMasterInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @MembershipID			MembershipID

CREATE Procedure [DBO].CLB_GetMembershipMasterInfo
(
	@MembershipID FLOAT
)

AS	 
	 
	SELECT	A.MS$9MMID		AS MembershipId, 
			A.MSDSC1		AS Description1,
			A.MSDSC2		AS Description2,
			A.MS$9CLUB		AS ClubId, 
			B.CMDSC1		AS ClubDescription1,
			B.CMDSC2		AS ClubDescription2,
			A.MS$9CKIT		AS ClubKitItemNumber,
			A.MS$9ADV1		AS AttributeDriver1,
			A.MS$9ADV2		AS AttributeDriver2,
			A.MS$9ADV3		AS AttributeDriver3,
			A.MS$9ADV4		AS AttributeDriver4,
			A.MS$9ADV5		AS AttributeDriver5,
			A.MS$9ADV6		AS AttributeDriver6,
			A.MS$9ADV7		AS AttributeDriver7,
			A.MS$9ADV8		AS AttributeDriver8,
			A.MS$9ADV9		AS AttributeDriver9,
			A.MSAC30		AS CategoryCode30, 
			A.MS$9CKOF		AS ClubKitOverrideFlag
    FROM	[SCDATA].FQ6759A0 A 
	INNER JOIN [SCDATA].FQ675910 B
		ON A.MS$9CLUB = B.CM$9CLUB
	WHERE MS$9MMID = @MembershipID


GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetMembershipPriceKeysInfo'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetMembershipPriceKeysInfo
	END

GO

-- #desc					Read Customer/Consumer MemberShip Pricing Keys
-- #bl_class				Premier.Club.MembershipPricingKeysInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @AddressNumber	AddressNumber Code  search criteria
-- #param @UniqueID			Unique Key search criteria

CREATE Procedure [DBO].CLB_GetMembershipPriceKeysInfo
(
	@AddressNumber	FLOAT,
	@UniqueKeyID	FLOAT 
)
AS

SELECT 
	MM$9AN8 AS AddressNumber,
	MMUKID AS UniqueKeyID,
	MMASN AS PriceAdjustmentScheduleN,
	MMCPGP AS PricingGroup,
	MMDTYS AS DutyStatus,
	MMEUSE AS EndUse,
	MMLOB AS LineOfBusiness,
	MMMOT AS ModeOfTransport,
	MMPTC AS PaymentTerms,
	MMDMCT AS AgreementNumber,
	MMUPC1 AS priceCode1,
	MMUPC2 AS priceCode2,
	MMUPC3 AS priceCode3
FROM [SCDATA].FQ6759B0
WHERE 
	MM$9AN8 = @AddressNumber AND
	MMUKID = @UniqueKeyID

GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_GetWineClubKitStateList'))
	BEGIN
		DROP  Procedure  [DBO].CLB_GetWineClubKitStateList
	END

GO

-- #desc							Loads allowed states for a given membershipid
-- #bl_class						Premier.Club.WineClubStateList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @ClubKitItemNumber		Item number

CREATE PROCEDURE [DBO].CLB_GetWineClubKitStateList 
(
	@ClubKitItemNumber	FLOAT
)
AS
		DECLARE	@LICENSE NVARCHAR(3);
		DECLARE @CodeLength  INT
	
		-- Get Code Length
		SET @CodeLength = 0
		SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
			  WHERE DTSY = '00' AND DTRT = 'S')
			  
		SELECT	@LICENSE = IMSRP1 FROM [SCDATA].F4101 WHERE IMITM = @ClubKitItemNumber;
					
		IF (@LICENSE IS NULL) OR (RTRIM(@LICENSE) = '')
		 BEGIN
			SELECT	SUBSTRING(DRKY, 10 - @CodeLength + 1, @CodeLength) AS State,
					DRDL01 AS StateDescription
			FROM	[SCDATA].FQ675520 
			INNER JOIN [SCCTL].F0005
					ON DRSY = '00'
					AND	DRRT = 'S'					
			WHERE  SC$9CP1 = '1'
			AND SUBSTRING(DRKY, 10 - @CodeLength + 1, @CodeLength) = SCADDS
			ORDER BY DRDL01;
		 END
		ELSE
		 BEGIN
			SELECT	SUBSTRING(DRKY, 10 - @CodeLength + 1, @CodeLength) AS State ,  				-- STATE CODE
					DRDL01 AS StateDescription 				-- STATE DESCRIPTION
			FROM	[SCDATA].FQ675511		
			INNER JOIN [SCDATA].F4101			-- GET LICENSE STATES ALLOWED FOR THE KIT LICENSE TYPE 
					ON  IMITM = @ClubKitItemNumber
					AND IMSRP1= LD$9SRP1
			INNER JOIN [SCDATA].FQ675520		-- SELECT STATES ALLOWED JOIN CLUB 
					ON	SCADDS 	= LDADDS 
					AND SC$9CP1 = '1'  			--HARDCODE VALUE
			INNER JOIN [SCCTL].F0005 		-- GET STATES DESCRIPTION
					ON  DRSY = '00' 
					AND DRRT = 'S'
			WHERE SUBSTRING(DRKY, 10 - @CodeLength + 1, @CodeLength) 	= LDADDS	
			ORDER BY DRDL01 ASC;
		 END



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].CLB_UpdMembership'))
	BEGIN
		DROP  Procedure  [DBO].CLB_UpdMembership
	END

GO

-- #desc						Update the membership
-- #bl_class					Premier.Club.Membership.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressNumber		Address Number
-- #param @UniqueD				Unique ID

CREATE Procedure [DBO].CLB_UpdMembership
(
	@AddressNumber			FLOAT, 
	@MembershipUniqueId				FLOAT,   
	@MembershipId			FLOAT, 
	@ClubId					NVARCHAR(10), 
	@ClubStatusId			NVARCHAR(3),
	@DateAccountOpened			NUMERIC,  
	@DateEffective				NUMERIC,   
	@DateExpired				NUMERIC,   
	@DateEndingEffective		NUMERIC,   
	@AutoRenewYN			NVARCHAR(1),
	@PriceAdjustmentSchedule	NVARCHAR(8),   
	@GroupCustomerPriceGroup	NVARCHAR(8),   
	@DutyStatus				NVARCHAR(2),   
	@EndUse					NVARCHAR(3),	
	@LineOfBusiness			NVARCHAR(3),
	@ModeOfTransportation	NVARCHAR(3),   
	@PaymentTermsCode		NVARCHAR(3),    
	@PriceCode1				NVARCHAR(3),   
	@PriceCode2				NVARCHAR(3),   
	@PriceCode3				NVARCHAR(3),
	@ContractNumberDistribution	NVARCHAR(12),  
	@ItemNumber				FLOAT, 
	@BranchPlant			NVARCHAR(12), 
	@ShipToNumber			FLOAT, 
	@ShipToContactId		FLOAT,
	@DateShipped				NUMERIC,  
	@PromiseDeliveryDate	NUMERIC,   
	@DateRequested				NUMERIC,   
	@DateReleaseHold			NUMERIC,   
	@HoldReasonCode			NVARCHAR(2),
	@ActiveInactive			NVARCHAR(1),  
	@DateMemberSince			NUMERIC, 
	@HighestStatus			FLOAT, 
	@UserReservedCode		NVARCHAR(2),   
	@UserReservedDate		NUMERIC,
	@UserReservedAmount		FLOAT,  
	@UserReservedNumber		FLOAT,   
	@UserReservedReference	NVARCHAR(15),   
	@UserId					NVARCHAR(10),   
	@ProgramId				NVARCHAR(10),
	@WorkstationId			NVARCHAR(10),  
	@DateUpdated			NUMERIC,   
	@TimeOfDay				NUMERIC,   
	@PickUpAddressNumber	FLOAT,   
	@PickUpFlag				FLOAT
	)

AS 

		UPDATE 
			[SCDATA].FQ6759B0
		SET 
		   MM$9MMID =	@MembershipId,			
	       MM$9CLUB =	@ClubId	,				
	       MM$9STAS =	@ClubStatusId	,		
       	   MMDAOJ =		@DateAccountOpened	,	
	       MMEFTJ =		@DateEffective	,		
	       MMEXDJ =		@DateExpired	,		
	       MMEFTE =		@DateEndingEffective,	
	       MM$9ARNW =	@AutoRenewYN,			
	       MMASN =		@PriceAdjustmentSchedule,
	       MMCPGP =		@GroupCustomerPriceGroup,
	       MMDTYS =		@DutyStatus	,			
	       MMEUSE =		@EndUse	,				
	       MMLOB =		@LineOfBusiness,			
	       MMMOT =		@ModeOfTransportation,	
	       MMPTC =		@PaymentTermsCode,		
	       MMUPC1 =		@PriceCode1,				
	       MMUPC2 =		@PriceCode2,				
	       MMUPC3 =		@PriceCode3	,			
	       MMDMCT =		@ContractNumberDistribution,
	       MM$9CKIT =	@ItemNumber,				
	       MM$9CMCU =	@BranchPlant,			
	       MM$9SHAN =	@ShipToNumber	,		
	       MMIDLN =		@ShipToContactId,		
	       MMSHPJ =		@DateShipped,			
	       MMPDDJ =		@PromiseDeliveryDate,	
	       MMDRQJ =		@DateRequested	,		
	       MMRHLD =		@DateReleaseHold,		
	       MM$9RCD =	@HoldReasonCode	,		
	       MMASAI =		@ActiveInactive,			
	       MM$9MSDJ =	@DateMemberSince,		
	       MM$9HSOT =	@HighestStatus	,		
	       MMURCD =		@UserReservedCode	,	
	       MMURDT =		@UserReservedDate,		
	       MMURAT =		@UserReservedAmount	,	
	       MMURAB =		@UserReservedNumber	,	
	       MMURRF =		@UserReservedReference,	
	       MMUSER =		@UserId	,				
	       MMPID =		@ProgramId	,			
	       MMJOBN =		@WorkstationId,			
	       MMUPMJ =		@DateUpdated,			
	       MMTDAY =		@TimeOfDay,				
	       MM$9PUWC =	@PickUpAddressNumber,	
	       MMAN80 =		@PickUpFlag				
 WHERE 
 		MM$9AN8 =	@AddressNumber  AND 
 		MMUKID =	@MembershipUniqueId
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddAllMarketingCodeRestric'))
	BEGIN
		DROP  Procedure  [DBO].COM_AddAllMarketingCodeRestric
	END

GO

-- #desc					Creates marketing code Restric
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Installation		Installation Id
-- #param @OrderType		Order Type

CREATE PROCEDURE [DBO].COM_AddAllMarketingCodeRestric
(
    @MarketingCode			    NVARCHAR(30),
    @UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedAmount			FLOAT, 
	@UserReservedNumber			FLOAT, 
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeOfDay					NUMERIC
)
AS
	SET NOCOUNT ON
	
	DECLARE	@CodeLength INT
	SET @CodeLength = 0
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'DT')

	DELETE  FROM [SCDATA].FQ674210 WHERE MR$9MKT = @MarketingCode;
	
	INSERT INTO [SCDATA].FQ674210
	(	
		MR$9MKT,--MarketingCode
		MRDCTO, --DocumentType
		MRURCD, --UserReservedCode
		MRURDT, --UserReservedDate
		MRURAT, --UserReservedAmount
		MRURAB, --UserReservedNumber 
		MRURRF, --UserReservedReference
		MRUSER, --UserId
		MRPID,	--ProgramId
		MRJOBN,	--WorkstationId
		MRUPMJ, --DateUpdated
		MRTDAY --TimeOfDay

	)
	SELECT	
			@MarketingCode,
			SUBSTRING(A.DRKY , 10 - @CodeLength + 1 , @CodeLength),
			@UserReservedCode,
			@UserReservedDate,
			@UserReservedAmount,
			@UserReservedNumber,
			@UserReservedReference,
			@UserID,
			@ProgramID,
			@WorkStationID,
			@DateUpdated,
			@TimeOfDay
			FROM	[SCCTL].F0005 A
			WHERE	A.DRSY = '00' 
			AND		A.DRRT = 'DT'
	ORDER BY DRKY;


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddCarrierTracking'))
	BEGIN
		DROP  Procedure  [DBO].COM_AddCarrierTracking
	END

GO

-- #desc					Creates Carrier Tracking 
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CarrierID		Carrier ID
-- #param @TrackingURL		Tracking URL
-- #param @ProgramID		Program ID
-- #param @WorkStationID	WorkStation ID
-- #param @UserID			User ID
-- #param @DateUpdated		Last Date Update
-- #param @TimeLastUpdated	Last Updated time

CREATE Procedure [DBO].COM_AddCarrierTracking
(
	@CarrierID FLOAT,
	@TrackingURL NVARCHAR(256),
	@UserID NVARCHAR(10),
	@ProgramID NVARCHAR(10),
	@WorkStationID NVARCHAR(10),	
	@DateUpdated NUMERIC,
	@TimeLastUpdated NUMERIC
)
AS

	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ67CARS
	(
		CRAN8,  CREMAL,   CRUSER, 
		CRPID,  CRJOBN,   CRUPMJ, 
		CRUPMT
	)
	VALUES
	(
		@CarrierID, @TrackingURL,  @UserID,
		@ProgramID, @WorkStationID, @DateUpdated, 
		@TimeLastUpdated
	) 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddMarketingCode'))
	BEGIN
		DROP  Procedure  [DBO].COM_AddMarketingCode
	END

GO

-- #desc					Creates marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Constant ID
-- #param @BranchPlant		Branch plant
-- #param @Description1		Description 1
-- #param @Description2		Description 2
-- #param @EffectiveDate	Effective date
-- #param @ExpirationDate	Expiration date
-- #param @UsageMode		Usage Mode flag

CREATE Procedure [DBO].COM_AddMarketingCode
	@MarketingCode NVARCHAR(30),
	@BranchPlant NVARCHAR(12),
	@Description1 NVARCHAR(30),
	@Description2 NVARCHAR(30),
	@EffectiveDate NUMERIC,
	@ExpirationDate NUMERIC,
	@UsageMode NVARCHAR(1)

AS

	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ674204
	(
	 MK$9MKT,  MKMCU,   MKDSC1, 
	 MKDSC2,   MKEFTJ,  MKEXDJ, 
	 MK$9WEB
	)
	VALUES
	(
	 @MarketingCode, @BranchPlant,  @Description1, 
	 @Description2,  @EffectiveDate, @ExpirationDate, 
	 @UsageMode
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddMarketingCodeRestric'))
	BEGIN
		DROP  Procedure  [DBO].COM_AddMarketingCodeRestric
	END

GO

-- #desc						Creates marketing code Restric
-- #bl_class					Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @MarketingCode		Marketing Code

CREATE PROCEDURE [DBO].COM_AddMarketingCodeRestric
(
    @MarketingCode			    NVARCHAR(30),
    @DocumentType				NVARCHAR(2),
    @UserReservedCode			NVARCHAR(15),
	@UserReservedDate			NUMERIC,
	@UserReservedAmount			FLOAT, 
	@UserReservedNumber			FLOAT, 
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@WorkStationID				NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeOfDay					NUMERIC
)
AS
	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ674210
	(
		MR$9MKT,--MarketingCode
		MRDCTO, --DocumentType
		MRURCD, --UserReservedCode
		MRURDT, --UserReservedDate
		MRURAT, --UserReservedAmount
		MRURAB, --UserReservedNumber 
		MRURRF, --UserReservedReference
		MRUSER, --UserId
		MRPID,	--ProgramId
		MRJOBN,	--WorkstationId
		MRUPMJ, --DateUpdated
		MRTDAY --TimeOfDay 
	)
	VALUES
	(
			@MarketingCode,
			@DocumentType,
			@UserReservedCode,
			@UserReservedDate,
			@UserReservedAmount,
			@UserReservedNumber,
			@UserReservedReference,
			@UserID,
			@ProgramID,
			@WorkStationID,
			@DateUpdated,
			@TimeOfDay
	) 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddMarketingCodeValue'))
	BEGIN
		DROP  Procedure  [DBO].COM_AddMarketingCodeValue
	END

GO

-- #desc					Creates marketing code 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Marketing Code
-- #param @PriceKey			Price Key
-- #param @PriceKeyValue	Price Key Value

CREATE Procedure [DBO].COM_AddMarketingCodeValue
	@MarketingCode NVARCHAR(30),
	@PriceKey NVARCHAR(10),
	@PriceKeyValue NVARCHAR(12)

AS

	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ674205
	(
	 MK$9MKT,  MK$9MCOL,   MK$9MVAL 
	)
	VALUES
	(
	 @MarketingCode, @PriceKey,  @PriceKeyValue
	)
	
GO


  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddOrderExtendedInfo'))
	BEGIN
		DROP  Procedure [DBO].COM_AddOrderExtendedInfo
	END

GO

-- #desc					Add extended information to regular order.
-- #bl_class				Premier.Commerce.SalesOrderAddExtendedInfoCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A
-- #param @OrderNumber		Order Number
-- #param @OrderCompany		Order Company
-- #param @OrderType		Order Type

CREATE PROCEDURE [DBO].COM_AddOrderExtendedInfo
(
    @OrderNumber		FLOAT,
    @OrderCompany		NVARCHAR(5),
	@OrderType			NVARCHAR(2)
)
AS
	DECLARE @IsFreight INT
	
	SELECT @IsFreight = COUNT(*) FROM [SCDATA].FQ67496 WHERE FRKCOO = @OrderCompany AND FRDOCO = @OrderNumber AND FRDCTO = @OrderType 
	
	IF(@IsFreight = 0) /* Freight OFF */
	BEGIN
		/*HEADER*/
		IF(NOT EXISTS (SELECT * FROM [SCDATA].FQ674201 WHERE SHKCOO = @OrderCompany AND SHDOCO = @OrderNumber AND SHDCTO = @OrderType))
		BEGIN
			INSERT INTO [SCDATA].FQ674201
			(
				SHKCOO,
				SHDOCO,
				SHDCTO,
				SH$9AN8,
				SHIDLN,
				SH$9TYP,
				SH$9SHAN,
				SHRCK7,
				SH$9WHI,
				SH$9MKT,
				SH$9MMID,
				SH$9PD,
				SH$9DT,
				SHPID,
				SHJOBN,
				SHUSER,
				SHUPMJ,
				SHUPMT
			)
			SELECT      
				SHKCOO	AS SHKCOO,
				SHDOCO	AS SHDOCO,
				SHDCTO	AS SHDCTO,
				SHAN8	AS SH$9AN8,
				0		AS SHIDLN,
				0		AS SH$9TYP,
				SHSHAN	AS SH$9SHAN,
				0		AS SHRCK7,
				' '		AS SH$9WHI,
				' '		AS SH$9MKT,
				0		AS SH$9MMID,
				0		AS SH$9PD,
				0		AS SH$9DT,
				SHPID	AS SHPID,
				SHJOBN	AS SHJOBN,
				SHUSER	AS SHUSER,
				SHUPMJ	AS SHUPMJ,
				SHTDAY	AS SHUPMT
			FROM [SCDATA].F4201
			WHERE SHDOCO = @OrderNumber AND 
				  SHKCOO = @OrderCompany AND 
				  SHDCTO = @OrderType
		END		  

		/*DETAIL*/
		INSERT INTO [SCDATA].FQ674211
		(
			SDKCOO,
			SDDOCO,
			SDDCTO,
			SDLNID,
			SD$9AN8,
			SDIDLN,
			SD$9TYP,
			SD$9SHAN,
			SDRCK7,
			SD$9MKTG,
			SD$9IGPR,
			SDKIT,
			SDMMCU,
			SDCPNT,
			SDKTLN,
			SD$9SLN,
			SD$9FQTY,
			SD$9IID,
			SD$9STS,
			SDQNTY,
			SD$9UOM,
			SDPID,
			SDJOBN,
			SDUSER,
			SDUPMJ,
			SDUPMT
		)
		SELECT
			A.SDKCOO AS SDKCOO,
			A.SDDOCO AS SDDOCO,
			A.SDDCTO AS SDDCTO,
			A.SDLNID AS SDLNID,
			A.SDAN8  AS SD$9AN8,
			0		 AS SDIDLN,
			0		 AS SD$9TYP,
			A.SDSHAN AS SD$9SHAN,
			0		 AS SDRCK7,
			' '		 AS SD$9MKTG,
			0		 AS SD$9IGPR,
			0		 AS SDKIT,
			' '		 AS SDMMCU,
			0		 AS SDCPNT,
			0		 AS SDKTLN,
			0		 AS SD$9SLN,
			0		 AS SD$9FQTY,
			0		 AS SD$9IID,
			'A'		 AS SD$9STS,
			0		 AS SDQNTY,
			' '		 AS SD$9UOM,
			A.SDPID  AS SDPID,
			A.SDJOBN AS SDJOBN,
			A.SDUSER AS SDUSER,
			A.SDUPMJ AS SDUPMJ,
			A.SDTDAY AS SDUPMT
		FROM [SCDATA].F4211 A
		WHERE A.SDDOCO = @OrderNumber AND 
			   A.SDKCOO = @OrderCompany AND 
			   A.SDDCTO = @OrderType AND 
			   NOT EXISTS (SELECT * FROM [SCDATA].FQ674211 B WHERE B.SDKCOO = @OrderCompany AND B.SDDOCO = @OrderNumber AND B.SDDCTO = @OrderType AND B.SDLNID = A.SDLNID)
	END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddP4210VersRuleDetail'))
	BEGIN
		DROP  Procedure  [DBO].COM_AddP4210VersRuleDetail
	END
GO

-- #desc						Creates P4210 Version Rule Detail
-- #bl_class					Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID	    InstallationID.
-- #param @RuleUniqueID			Rule Unique ID
-- #param @LineID				Line ID
-- #param @UserDefinedKey		User Defined Key
-- #param @BranchPlant			Branch Plant
-- #param @AddressNumber		Address Number

CREATE Procedure [DBO].COM_AddP4210VersRuleDetail
	@InstallationID			NVARCHAR(3),
	@RuleUniqueID			FLOAT,
	@LineID					FLOAT OUTPUT,
	@UserDefinedKey			NVARCHAR(10),
	@BranchPlant			NVARCHAR(12),
	@AddressNumber			FLOAT,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC,
	@WorkStationID			NVARCHAR(10)
AS

	--Get max sequence number
	SET @LineID = (ISNULL((SELECT MAX (RDLNID) FROM [SCDATA].FQ674231 WHERE RDUKID = @RuleUniqueID AND RD$9INID = @InstallationID),0) + 1)

	INSERT INTO [SCDATA].FQ674231
	(
		RD$9INID,
		RDUKID,
		RDLNID,
		RDKY,
		RDMCU,
		RD$9AN8,
		RDURAB,
		RDURAT,
		RDURCD,
		RDURDT,
		RDURRF,
		RDUSER,
		RDPID,
		RDUPMJ,
		RDUPMT,
		RDJOBN
	)
	VALUES
	(
		@InstallationID,
		@RuleUniqueID,
		@LineID,
		@UserDefinedKey,
		@BranchPlant,
		@AddressNumber,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedReference,
		@UserID,
		@ProgramID,
		@DateUpdated,
		@TimeLastUpdated,
		@WorkStationID
	)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_AddP4210VersRuleHeader'))
	BEGIN
		DROP  Procedure  [DBO].COM_AddP4210VersRuleHeader
	END
GO

-- #desc					Creates P4210 Version Rule Header
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleUniqueID		Rule Unique ID
-- #param @Description		Description
-- #param @P4210Version		P4210 Version
-- #param @Hierarchy		Hierarchy
-- #param @RuleType			Rule Type
-- #param @CategoryCode		Category Code

CREATE Procedure [DBO].COM_AddP4210VersRuleHeader
	@InstallationID			NVARCHAR(3),
	@RuleUniqueID			FLOAT OUTPUT,
	@Description			NVARCHAR(30),
	@P4210Version			NVARCHAR(10),
	@Hierarchy				FLOAT,
	@RuleType				NVARCHAR(2),
	@CategoryCode			NVARCHAR(2),
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC,
	@WorkStationID			NVARCHAR(10)
AS

	--Get max sequence number
	SET @RuleUniqueID = (ISNULL((SELECT MAX (RHUKID) FROM [SCDATA].FQ674230),0) + 1)
	
	INSERT INTO [SCDATA].FQ674230
	(
		RH$9INID,
		RHUKID,
		RHDSC1,
		RHVER,
		RHSEQ,
		RHRUDTP,
		RHRT,
		RHURAB,
		RHURAT,
		RHURCD,
		RHURDT,
		RHURRF,
		RHUSER,
		RHPID,
		RHUPMJ,
		RHUPMT,
		RHJOBN
	)
	VALUES
	(
		@InstallationID,
		@RuleUniqueID,
		@Description,
		@P4210Version,
		@Hierarchy,
		@RuleType,
		@CategoryCode,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedReference,
		@UserID,
		@ProgramID,
		@DateUpdated,
		@TimeLastUpdated,
		@WorkStationID
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_CheckOrderCustomerRef'))
	BEGIN
		DROP  Procedure  [DBO].COM_CheckOrderCustomerRef
	END

GO
-- #desc						Validate if PO Customer Reference is already used.
-- #bl_class					Premier.Commerce.CheckOrderCustomerRefCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param LangPref				LangPref
-- #param Description			Desc

CREATE Procedure [DBO].COM_CheckOrderCustomerRef
	(
		@AddressNumber		FLOAT,
		@CustReference		NVARCHAR(25),
		@OrderCompany		NVARCHAR(5),
		@OrderType			NVARCHAR(2),
		@OrderNumber		FLOAT
	)
AS
	;WITH CTE AS (
		SELECT SHDOCO FROM [SCDATA].F4201
		WHERE SHAN8 = @AddressNumber AND SHVR01 = @CustReference
			AND (@OrderCompany = '*' OR SHKCOO <> @OrderCompany) 
			AND (@OrderType = '*' OR SHDCTO <> @OrderType) 
			AND (@OrderNumber IS NULL OR SHDOCO <> @OrderNumber)
		UNION ALL
		SELECT SHDOCO FROM [SCDATA].F42019
		WHERE SHAN8 = @AddressNumber AND SHVR01 = @CustReference
			AND (@OrderCompany = '*' OR SHKCOO <> @OrderCompany) 
			AND (@OrderType = '*' OR SHDCTO <> @OrderType) 
			AND (@OrderNumber IS NULL OR SHDOCO <> @OrderNumber)
	)
	SELECT COUNT(1) AS RefUsed FROM CTE;
GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelAllMarketingCodeRestric'))
	BEGIN
		DROP  Procedure [DBO].COM_DelAllMarketingCodeRestric		
	END

GO

-- #desc						Delete marketing code restric
-- #bl_class					Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @MarketingCode		Marketing Code
-- #param @DocumentType			Document Type

CREATE Procedure [DBO].COM_DelAllMarketingCodeRestric 
  @MarketingCode	NVARCHAR(30)
AS
SET NOCOUNT ON
	DELETE 	FROM [SCDATA].FQ674210
	WHERE	MR$9MKT = @MarketingCode
	
  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelCarrierTracking'))
	BEGIN
		DROP  Procedure  [DBO].COM_DelCarrierTracking
	END

GO

-- #desc					Deletes Carrier Tracking 
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CarrierID		Carrier ID

CREATE Procedure [DBO].COM_DelCarrierTracking
(
	@CarrierID FLOAT
)		
	AS

	DELETE FROM
			[SCDATA].FQ67CARS
	WHERE 
			CRAN8 = @CarrierID 
 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelMarketingCode'))
	BEGIN
		DROP  Procedure  [DBO].COM_DelMarketingCode
	END

GO


-- #desc					Delete marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Constant ID

CREATE Procedure [DBO].COM_DelMarketingCode
	@MarketingCode  NVARCHAR(30)
AS

SET NOCOUNT ON

--Delete from FQ674204

DELETE  FROM  
	[SCDATA].FQ674204
WHERE 
	MK$9MKT = @MarketingCode

--Delete from FQ674205

DELETE  FROM  
	[SCDATA].FQ674205
WHERE 
	MK$9MKT = @MarketingCode

--Delete from FQ674210
DELETE  FROM  
	[SCDATA].FQ674210
WHERE 
	MR$9MKT = @MarketingCode

--Delete from FQ674240
EXEC [DBO].COM_DelMarketingCodeTracking @MarketingCode

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelMarketingCodeRestric'))
	BEGIN
		DROP  Procedure [DBO].COM_DelMarketingCodeRestric		
	END

GO

-- #desc						Delete marketing code restric
-- #bl_class					Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @MarketingCode		Marketing Code
-- #param @DocumentType			Document Type

CREATE Procedure [DBO].COM_DelMarketingCodeRestric 
  @MarketingCode	NVARCHAR(30),
  @DocumentType 	NVARCHAR(30)
AS
SET NOCOUNT ON
	DELETE 	FROM [SCDATA].FQ674210
	WHERE	MR$9MKT = @MarketingCode
	AND		MRDCTO = @DocumentType
	
 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelMarketingCodeValue'))
	BEGIN
		DROP  Procedure [DBO].COM_DelMarketingCodeValue		
	END

GO

-- #desc					Delete marketing code value 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Marketing Code
-- #param @PriceKey			Price Key

CREATE Procedure [DBO].COM_DelMarketingCodeValue
	@MarketingCode  NVARCHAR(30),
	@PriceKey NVARCHAR(10)
AS

SET NOCOUNT ON

DELETE  FROM  
	[SCDATA].FQ674205
WHERE 
	MK$9MKT = @MarketingCode AND
	MK$9MCOL = @PriceKey

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelP4210VersRuleDetail'))
	BEGIN
		DROP  Procedure  [DBO].COM_DelP4210VersRuleDetail
	END

GO
-- #desc					Delete P4210 Version Rule Detail 
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleUniqueID		Rule Unique ID
-- #param @LineID			Line ID

CREATE Procedure [DBO].COM_DelP4210VersRuleDetail
	@InstallationID		NVARCHAR(3),
	@RuleUniqueID		FLOAT,
	@LineID				FLOAT
AS

SET NOCOUNT ON

DELETE  FROM
	[SCDATA].FQ674231
WHERE 
	RD$9INID = @InstallationID AND 
	RDUKID = @RuleUniqueID AND
	RDLNID = @LineID
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_DelP4210VersRuleHeader'))
	BEGIN
		DROP  Procedure  [DBO].COM_DelP4210VersRuleHeader
	END

GO
-- #desc					Delete P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleUniqueID		RuleUnique ID

CREATE Procedure [DBO].COM_DelP4210VersRuleHeader
	@InstallationID NVARCHAR(3),
	@RuleUniqueID	FLOAT
AS

SET NOCOUNT ON

DELETE  FROM
	[SCDATA].FQ674230
WHERE 
	RH$9INID = @InstallationID AND
	RHUKID = @RuleUniqueID

DELETE  FROM
	[SCDATA].FQ674231
WHERE 
	RD$9INID = @InstallationID AND
	RDUKID = @RuleUniqueID
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_ExcGetLineBasePriceInf'))
	BEGIN
		DROP  Procedure  [DBO].COM_ExcGetLineBasePriceInf
	END

GO

-- #desc						Load line base price information
-- #bl_class					Premier.Commerce.GetLineBasePriceInfCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @OrderCompany			Company ID
-- #param @OrderType			Document Type
-- #param @OrderNumber			OrderNumber
-- #param @LineNumberID			Line Number

CREATE PROCEDURE [DBO].COM_ExcGetLineBasePriceInf
(
	@OrderCompany		NVARCHAR(5),
	@OrderType			NVARCHAR(2),
	@OrderNumber		FLOAT,
	@LineNumberID		FLOAT
)

AS  

	SELECT 
		ALUPRC AS BasePrice
	FROM [SCDATA].F4074
	WHERE 
		ALKCOO = @OrderCompany
		AND ALDCTO = @OrderType
		AND ALDOCO = @OrderNumber
		AND ALLNID = @LineNumberID
		AND ALOSEQ = 100

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_ExcMKTCodeRedemption'))
	BEGIN
		DROP  Procedure  [DBO].COM_ExcMKTCodeRedemption
	END

GO

-- #desc							Insert marketing code tracking 
-- #bl_class						Premier.Commerce.MarketingCodeRedemptionCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @MarketingCode			Marketing Code
-- #param @InstallationID			Installation ID
-- #param @AddressBookType			Address Book Type
-- #param @AddressNumber			Address Number
-- #param @ContactID				Contact ID
-- #param @WebAccountID				WebAccount ID
-- #param @TransactionDate			Transaction Date
-- #param @OrderCompany				Order Company
-- #param @DocumentType				Document Type 
-- #param @DocumentNumber			Document Number
-- #param @UserReservedNumber		User Reserved Number
-- #param @UserReservedAmount		User Reserved Amount
-- #param @UserReservedCode			User Reserved Code
-- #param @UserReservedDate			User Reserved Date
-- #param @UserReservedReference	User Reserved Reference
-- #param @UserID					User ID
-- #param @ProgramID				Program ID
-- #param @WorkStationID			WorkStation ID
-- #param @DateUpdated				Date Updated 
-- #param @TimeLastUpdated			Time Last Updated

CREATE Procedure [DBO].COM_ExcMKTCodeRedemption
	@MarketingCode			NVARCHAR(30),
	@InstallationID			NVARCHAR(3),
	@AddressBookType		FLOAT,
	@AddressNumber			FLOAT,
	@ContactID				FLOAT,
	@WebAccountID			FLOAT,
	@TransactionDate		NUMERIC,
	@OrderCompany			NVARCHAR(5),
	@DocumentType			NVARCHAR(2),
	@DocumentNumber			FLOAT,
	@UserReservedNumber		FLOAT, 
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),	
	@WorkStationID			NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC

AS

	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ674240
	(
	 MK$9MKT, MK$9INID, MK$9TYP, MK$9AN8,
	 MKIDLN, MK$9WAN8, MKTRDJ, MKKCOO,
	 MKDCTO, MKDOCO, MKURAB, MKURAT,
	 MKURCD, MKURDT, MKURRF, MKUSER,
	 MKPID, MKJOBN, MKUPMJ, MKUPMT
	)
	VALUES
	(
	 @MarketingCode, @InstallationID, @AddressBookType, @AddressNumber,
	 @ContactID, @WebAccountID, @TransactionDate, @OrderCompany,
	 @DocumentType, @DocumentNumber, @UserReservedNumber, @UserReservedAmount,
	 @UserReservedCode, @UserReservedDate, @UserReservedReference, @UserID,
	 @ProgramID, @WorkStationID, @DateUpdated, @TimeLastUpdated
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_ExcUpdPunchInvoiceStatus'))
	BEGIN
		DROP  Procedure  [DBO].COM_ExcUpdPunchInvoiceStatus
	END

GO

-- #desc						Execute Update EDI Invoice status
-- #bl_class					Premier.Commerce.PunchOutUpdateInvoiceStatusCommand.cs

-- param @EDICompany			EDI Document Company
-- param @EDINumber				EDI Document Number
-- param @EDIType				EDI Document Type

CREATE PROCEDURE [DBO].COM_ExcUpdPunchInvoiceStatus
(
	@EDIType			NVARCHAR(2),
	@EDINumber			FLOAT,
	@EDICompany			NVARCHAR(5)
)
AS

	/*EDI Invoice Header (Sales) - Outbound*/
	UPDATE [SCDATA].F47046 
	SET SYEDSP = 'Y'
    WHERE SYEDOC = @EDINumber AND SYEDCT = @EDIType AND SYEKCO = @EDICompany;
	
	/*EDI Invoice Additional Header - Outbound*/
	UPDATE [SCDATA].F470461
	SET S3EDSP = 'Y'
    WHERE S3EDOC = @EDINumber AND S3EDCT = @EDIType AND S3EKCO = @EDICompany;

	/*EDI Invoice Expanded Header (Sales)*/
	UPDATE [SCDATA].F470462
	SET S5EDSP = 'Y'
    WHERE S5EDOC = @EDINumber AND S5EDCT = @EDIType AND S5EKCO = @EDICompany;

	/*EDI Invoice Detail (Sales) - Outbound*/
	UPDATE [SCDATA].F47047
	SET SZEDSP = 'Y'
    WHERE SZEDOC = @EDINumber AND SZEDCT = @EDIType AND SZEKCO = @EDICompany;

	/*EDI Invoice Additional Detail - Outbound*/
	UPDATE [SCDATA].F470471
	SET S4EDSP = 'Y'
    WHERE S4EDOC = @EDINumber AND S4EDCT = @EDIType AND S4EKCO = @EDICompany;

	/*EDI Invoice Expanded Detail (Sales)*/
	UPDATE [SCDATA].F470472
	SET S6EDSP = 'Y'
    WHERE S6EDOC = @EDINumber AND S6EDCT = @EDIType AND S6EKCO = @EDICompany;

	/*EDI Invoice Detail Charges*/
	UPDATE [SCDATA].F470473
	SET S7EDSP = 'Y'
    WHERE S7EDOC = @EDINumber AND S7EDCT = @EDIType AND S7EKCO = @EDICompany;

	/*EDI Order Address Information*/
	UPDATE [SCDATA].F4706
	SET ZAEDSP = 'Y'
    WHERE ZAEDOC = @EDINumber AND ZAEDCT = @EDIType AND ZAEKCO = @EDICompany;

	/*EDI Order Text Lines - Header*/
	UPDATE [SCDATA].F4714
	SET ZTEDSP = 'Y'
    WHERE ZTEDOC = @EDINumber AND ZTEDCT = @EDIType AND ZTEKCO = @EDICompany;

	/*EDI Order Text Lines - Detail*/
	UPDATE [SCDATA].F4715
	SET ZDEDSP = 'Y'
    WHERE ZDEDOC = @EDINumber AND ZDEDCT = @EDIType AND ZDEKCO = @EDICompany;

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_ExcValidateMKTCodeInfo'))
	BEGIN
		DROP  Procedure  [DBO].COM_ExcValidateMKTCodeInfo
	END

GO
-- #desc					Validate Marketing Code
-- #bl_class				Premier.Commerce.MarketingCodeInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @MarketingCode	Marketing Code
-- #param @DocumentType		Document Types
-- #param @WebEnabledOnly	if On return only webEnabled Marketing Codes
-- #param @AddressBookType	Address Book Type
-- #param @AddressNumber	Address Number
-- #param @WebAccountID		Web Account ID

CREATE Procedure [DBO].COM_ExcValidateMKTCodeInfo
	@InstallationID		NVARCHAR(3),
	@MarketingCode		NVARCHAR(30),
	@DocumentType		NVARCHAR(3),
	@WebEnabledOnly		NVARCHAR(1),
	@AddressBookType	FLOAT,
	@AddressNumber		FLOAT,
	@WebAccountID		FLOAT
AS

SET NOCOUNT ON

-- 1 Yes , 0 No
DECLARE @isRestricted NVARCHAR(1)
-- 0 No, > 0 Yes
DECLARE @Redeemed FLOAT
-- N WebDisabledMultiUse, S WebDisabledSingleAN8, Y WebEnabledMultiUse, A WebEnabledSingleAN8, W WebEnabledSingleWebAcct
DECLARE @MKTUsageMode NVARCHAR(1)

--Validate if Marketing Code has restricted
SET @isRestricted = 'N'
IF((SELECT COUNT(*) FROM [SCDATA].FQ674210 WHERE MR$9MKT = @MarketingCode) >0 )
	BEGIN
		IF((SELECT COUNT(*) FROM [SCDATA].FQ674210 WHERE MR$9MKT = @MarketingCode AND MRDCTO = @DocumentType) >0 )
			BEGIN
				SET @isRestricted = 'N'
			END
		ELSE
			BEGIN
				SET @isRestricted = 'Y'
			END
	END
ELSE
	BEGIN
		SET @isRestricted = 'N'
	END

--Validate if Marketing Code was redeemed
SET @Redeemed = 0
SET @MKTUsageMode = (SELECT A.MK$9WEB FROM [SCDATA].FQ674204 A
					 INNER JOIN [SCDATA].FQ679910 B 
					 ON A.MKMCU = B.BIMCU
					 WHERE A.MK$9MKT = @MarketingCode AND B.BI$9INID = @InstallationID)

IF(@MKTUsageMode = 'S')
BEGIN
	SET @Redeemed = (SELECT COUNT(*) FROM [SCDATA].FQ674240
					 WHERE MK$9MKT = @MarketingCode AND MK$9INID = @InstallationID
					 AND MK$9TYP = @AddressBookType AND MK$9AN8 = @AddressNumber)
END
ELSE IF(@MKTUsageMode = 'A')
BEGIN
	SET @Redeemed = (SELECT COUNT(*) FROM [SCDATA].FQ674240
					 WHERE MK$9MKT = @MarketingCode AND MK$9INID = @InstallationID
					 AND MK$9TYP = @AddressBookType AND MK$9AN8 = @AddressNumber)
END
ELSE IF(@MKTUsageMode = 'W')
BEGIN
	SET @Redeemed = (SELECT COUNT(*) FROM [SCDATA].FQ674240
					 WHERE MK$9MKT = @MarketingCode AND MK$9INID = @InstallationID
					 AND MK$9WAN8 = @WebAccountID)
END

SELECT
	A.MK$9MKT		AS MarketingCode,
	A.MKDSC1		AS Description1,
	A.MKDSC2		AS Description2,
	A.MKEFTJ		AS EffectiveDate,
	A.MKEXDJ		AS ExpirationDate,
	A.MK$9WEB		AS UsageMode,
	@isRestricted	AS IsRestricted,
	@Redeemed		AS Redeemed 
FROM
	[SCDATA].FQ674204 A
	INNER JOIN [SCDATA].FQ679910 B
    ON A.MKMCU = B.BIMCU
WHERE
	MK$9MKT =  @MarketingCode
	AND B.BI$9INID = @InstallationID
	AND (@WebEnabledOnly = '*' OR A.MK$9WEB  <> 'N' OR A.MK$9WEB <> 'S')

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_ExcValidateOrderByAddrNo'))
	BEGIN
		DROP  Procedure  [DBO].COM_ExcValidateOrderByAddrNo
	END

GO
-- #desc						Validate if the order belongs to the address number 
-- #bl_class					Premier.Commerce.ValidateOrderByAddressNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @OrderCompany			Order Company
-- #param @OrderType			Document type to search for.
-- #param @OrderNumber			Order Number
-- #param @AddressNumber		Address Number
-- #param @AddressBookType		Address Book Type

CREATE Procedure [DBO].COM_ExcValidateOrderByAddrNo
	@InstallationID			NVARCHAR(3),
	@OrderCompany			NVARCHAR(5),
	@OrderType				NVARCHAR(2),
	@OrderNumber			FLOAT,
	@AddressNumber			FLOAT,
	@AddressBookType		FLOAT,
	@ValidOrder				INT OUTPUT	
AS

	/* Gets the Sales Order Document Restrictions */
	DECLARE @SOrderRestric	NVARCHAR(1);
	DECLARE @SOrderConstant NVARCHAR(10);
	DECLARE @SOrderINID     NVARCHAR(3);
	SET @SOrderINID = @InstallationID
	SET @SOrderConstant = N'SO_RESTRIC'
	EXEC [DBO].CMM_GetConstantValue  @SOrderConstant, @SOrderINID OUT, @SOrderRestric OUT;
	
	/* Gets Account Receivable Installation Companies setting */
	DECLARE @CompanyRestric	NVARCHAR(1);
	DECLARE @CompanyINID	NVARCHAR(3);
	SET @CompanyINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue N'INSCOMPANY', @CompanyINID OUT, @CompanyRestric OUT;

	/* Customer */
	IF (@AddressBookType = 0) BEGIN
		WITH CTE AS ( 
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				SHCO 
			FROM [SCDATA].F4201 A		/* Sales Order Header */
			WHERE A.SHDOCO = @OrderNumber
				AND A.SHDCTO = @OrderType
				AND A.SHKCOO = @OrderCompany
				AND A.SHAN8 = @AddressNumber
			UNION ALL
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				SHCO 
			FROM [SCDATA].F42019 A	/* Historical Sales Order Header */
			WHERE A.SHDOCO = @OrderNumber
				AND A.SHDCTO = @OrderType
				AND A.SHKCOO = @OrderCompany
				AND A.SHAN8 = @AddressNumber
		) 
		SELECT 
			@ValidOrder = COUNT(1)
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DR$9INID = @SOrderINID
			AND SOR.DR$9CNST = @SOrderConstant
			AND SOR.DRKY = A.SHDCTO 
		LEFT OUTER JOIN [SCDATA].FQ679912 CR /* Extended Sales Order Header */
			ON CR.CI$9INID = @CompanyINID
			AND CR.CICO = A.SHCO
		WHERE (@SOrderRestric = N'0' OR SOR.DRKY IS NOT NULL)
			AND (@CompanyRestric = N'A' OR CR.CICO IS NOT NULL);
	END
	ELSE BEGIN
		WITH CTE AS ( 
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				SHCO 
			FROM [SCDATA].F4201 A		/* Sales Order Header */
			INNER JOIN [SCDATA].FQ674201 B	/* Extended Sales Order Header */
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO
			WHERE A.SHDOCO = @OrderNumber
				AND A.SHDCTO = @OrderType
				AND A.SHKCOO = @OrderCompany
				AND B.SH$9AN8 = @AddressNumber
				AND B.SH$9TYP = @AddressBookType 
			UNION ALL
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				SHCO 
			FROM [SCDATA].F42019 A	/* Historical Sales Order Header */
			INNER JOIN [SCDATA].FQ674201 B	/* Extended Sales Order Header */
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO
			WHERE A.SHDOCO = @OrderNumber
				AND A.SHDCTO = @OrderType
				AND A.SHKCOO = @OrderCompany
				AND B.SH$9AN8 = @AddressNumber
				AND B.SH$9TYP = @AddressBookType 
		) 
		SELECT 
			@ValidOrder = COUNT(1)
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DR$9INID = @SOrderINID
			AND SOR.DR$9CNST = @SOrderConstant
			AND SOR.DRKY = A.SHDCTO 
		LEFT OUTER JOIN [SCDATA].FQ679912 CR
			ON CR.CI$9INID = @CompanyINID
			AND CR.CICO = A.SHCO
		WHERE (@SOrderRestric = N'0' OR SOR.DRKY IS NOT NULL)
			AND (@CompanyRestric = N'A' OR CR.CICO IS NOT NULL);
	END

GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetBankAccountInfo'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetBankAccountInfo
	END
GO

-- #desc						Get Bank Account List
-- #bl_class					Premier.Commerce.BankAccountInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @BankAccountID		N/A

CREATE PROCEDURE [DBO].COM_GetBankAccountInfo
	 @BankAccountID	NVARCHAR(8)

AS

	SELECT  
		T1.GMAID	AS BankAccountID, 
		T1.GMCO		AS Company, 
		T1.GMMCU	AS BranchPlant, 
		T1.GMOBJ	AS ObjectAccount,
		T1.GMSUB	AS Subsidiary, 
		T1.GMDL01	AS Description
	FROM  
		[SCDATA].F0006 T0					-- Business Unit
		INNER JOIN [SCDATA].F0901 T1			-- Account Master
			ON T0.MCMCU = T1.GMMCU 
	WHERE  
		T1.GMAID = @BankAccountID
		ORDER BY T1.GMMCU ASC,T1.GMOBJ ASC,T1.GMSUB ASC,T1.GMAID,T1.GMDL01 ASC
	
	
GO
 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetBankAccountList'))
	BEGIN
		DROP  Procedure [DBO].COM_GetBankAccountList
	END
GO

-- #desc					Get Bank Account List
-- #bl_class				Premier.Commerce.BankAccountList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @Filter_Term		N/A


CREATE PROCEDURE [DBO].COM_GetBankAccountList
	 @FilterTerm	NVARCHAR(30) = '',
	 @PageIndex		FLOAT,
	 @PageSize		FLOAT
AS
	DECLARE @ROWSTART int
	DECLARE @ROWEND int

	/*Paging */ 
    SET @RowStart = ((@PageSize * @PageIndex ) - @PageSize + 1); 

    SET @RowEnd = (@PageIndex * @PageSize ); 

	IF (@FilterTerm = '*') BEGIN
		WITH PAGING AS (
			SELECT  
				T1.GMAID	AS BankAccountID, 
				T1.GMCO		AS Company, 
				T1.GMMCU	AS BranchPlant, 
				T1.GMOBJ	AS ObjectAccount,
				T1.GMSUB	AS Subsidiary, 
				T1.GMDL01	AS Description,
				ROW_NUMBER() OVER(ORDER BY T1.GMMCU ASC, T1.GMOBJ ASC, T1.GMSUB ASC, T1.GMAID, T1.GMDL01 ASC) AS RNUM 
			FROM  
				 [SCDATA].F0901 T1			/* Account Master */
			INNER JOIN [SCDATA].F0006 T0	/* Business Unit */
				ON T0.MCMCU = T1.GMMCU 
		)
		SELECT 
			BankAccountID, Company, BranchPlant, ObjectAccount, Subsidiary, Description, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING
			WHERE ((@PageIndex  = 0 OR @PageSize = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END
	ELSE BEGIN
		WITH PAGING AS (
			SELECT  
				T1.GMAID	AS BankAccountID, 
				T1.GMCO		AS Company, 
				T1.GMMCU	AS BranchPlant, 
				T1.GMOBJ	AS ObjectAccount,
				T1.GMSUB	AS Subsidiary, 
				T1.GMDL01	AS Description,
				ROW_NUMBER() OVER(ORDER BY T1.GMMCU ASC, T1.GMOBJ ASC, T1.GMSUB ASC, T1.GMAID, T1.GMDL01 ASC) AS RNUM 
			FROM  
				 [SCDATA].F0901 T1			/* Account Master */
			INNER JOIN [SCDATA].F0006 T0	/* Business Unit */
				ON T0.MCMCU = T1.GMMCU 
			WHERE  
				(T1.GMAID LIKE '%' + @FilterTerm + '%'
				OR T1.GMOBJ LIKE '%' + @FilterTerm + '%'
				OR T1.GMSUB LIKE '%' + @FilterTerm + '%'
				OR T1.GMDL01 LIKE '%' + @FilterTerm + '%')
		)
		SELECT 
			BankAccountID, Company, BranchPlant, ObjectAccount, Subsidiary, Description, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING
			WHERE ((@PageIndex  = 0 OR @PageSize = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));
	END

GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetCarrierFreightMethods'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetCarrierFreightMethods
	END

GO

-- #desc						Load Carrier Freight Method List
-- #bl_class					Premier.Commerce.FreightMethodList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @CostCenter			N/A
-- #param @ShipmentPriority		N/A
-- #param @CustomerGroupKeyID 	N/A
-- #param @CountryFreight 		N/A
-- #param @ZipCodePostal		N/A
-- #param @LangPref				N/A


CREATE  PROCEDURE [DBO].COM_GetCarrierFreightMethods
	@CostCenter	  			NVARCHAR(12),
	@ShipmentPriority 		FLOAT,
	@CustomerGroupKeyID		FLOAT,
	@CountryFreight 		NVARCHAR(3),
    @ZipCodePostal 			NVARCHAR(12),
    @LangPref				NVARCHAR(2)
AS
 
    SELECT
	   ZNMCU	AS CostCenter, 
	   ZNCARS	AS Carrier, 
	   ABALPH	AS CarrierAlphaName,
	   ZN$9CTR	AS CountryFreight, 
	   ZN$9ZTO	AS PostalCodeFrom, 
	   ZN$9ZTH	AS PostalCodeThru, 
	   ZNMOT	AS ModeOfTransport, 
	   ZN$9SHPR AS ShipmentPriority, 
	   ZN$9CID	AS CustomerGroupKeyID, 
	   ZN$9ZON	AS ShipToZone, 
	   ZN$9STAT AS Status, 
	   ZN$9DEF	AS DefaultMode, 
	   ZN$9FF	AS FixedFeeRate, 
	   ZN$9MIN	AS MinimunChargeRate, 
	   ZN$9SUR	AS Surcharge, 
	   ZN$9PBXA AS PostalBoxAllowed, 
	   ZN$9CODA AS CODAllowed, 
	   (CASE CA$9WEBA 
		WHEN 0 then ZN$9WEBA
		ELSE 	CA$9WEBA
		END
	   )		AS WebAllowed,
	   ZN$9COD	AS CODSurcharge, 
	   ZN$9WCFLG AS WeightControlFlag, 
	   ZN$9WLMT AS WeightLimit, 
	   ISNULL(IS$9CRESP,0) AS InsuranceResponsability,
	   ISNULL(IS$9DIV,0) AS InsuranceDivider,
	   ISNULL(IS$9IFACT,0) AS InsuranceFactor,
	   ZN$9CST	AS CostType, 
	   ZNURCD	AS UserReservedCode, 
	   ZNURDT	AS UserReservedDate, 
	   ZNURAT	AS UserReservedAmount, 
	   ZNURAB	AS UserReservedNumber, 
	   ZNURRF	AS UserReservedReference, 
	   ZNUSER	AS UserId, 
	   ZNJOBN	AS WorkStationId, 
	   ZNPID	AS ProgramId, 
	   ZNUPMJ	AS DateUpdated, 
	   ZNTDAY	AS TimeOfDay,
	   [DBO].CMM_GetUserDefinedCodeFnc('00','TM',ZNMOT,@LangPref) AS MOTDescription
    FROM [SCDATA].FQ67491 A 
		INNER JOIN [SCDATA].FQ67493 B
			ON A.CAMCU = B.ZNMCU 
			AND A.CACARS=B.ZNCARS
		INNER JOIN [SCDATA].F0101 C
			ON A.CACARS = C.ABAN8
		LEFT OUTER JOIN [SCDATA].FQ67492 D
			ON A.CACARS = D.ISCARS
	WHERE   (@CostCenter IS NULL OR B.ZNMCU = @CostCenter) 
       AND  (@ShipmentPriority IS NULL OR B.ZN$9SHPR = @ShipmentPriority)
       AND  (@ZipCodePostal IS NULL OR B.ZN$9ZTH >= @ZipCodePostal) 
       AND  (@ZipCodePostal IS NULL OR B.ZN$9ZTO <= @ZipCodePostal) 
       AND  (@CustomerGroupKeyID IS NULL OR B.ZN$9CID = @CustomerGroupKeyID)
       AND  (@CountryFreight IS NULL OR B.ZN$9CTR = @CountryFreight) 
       AND  B.ZN$9STAT = 0 
       AND  A.CA$9STAT = 0 
RETURN
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetCarrierList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetCarrierList
	END

GO

-- #desc						Load Carrier List
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @SearchType			N/A

CREATE Procedure [DBO].COM_GetCarrierList
(
	@SearchType NVARCHAR(3)
)

AS

SELECT	
	ABAN8 AS AddressNumber,
	ABALPH AS AlphaName
FROM 
	-- Address Book Master Table
	[SCDATA].F0101
WHERE          
	-- Search Type filter
    ABAT1 = @SearchType

GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetCarriers'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetCarriers
	END

GO

-- #desc						Load Carrier List
-- #bl_class					Premier.Commerce.CarrierList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @SearchType			Search Type for Carriers
-- #param @AddressNumber		Optional specific Carrier Number

CREATE Procedure [DBO].COM_GetCarriers
(
	@SearchType NVARCHAR(3),
	@AddressNumber FLOAT = null
)

AS

SELECT	
	ABAN8 AS AddressNumber,
	ABALPH AS AlphaName
FROM 
	-- Address Book Master Table
	[SCDATA].F0101
WHERE          
	-- Search Type filter
    ABAT1 = @SearchType
    -- Optional specific Carrier Number
    AND (@AddressNumber IS NULL OR ABAN8 = @AddressNumber)
    

GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetCarrierTracking'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetCarrierTracking
	END

GO

-- #desc				Get Carrier Tracking
-- #bl_class			Premier.Commerce.CarrierTracking.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @CarrierID   Carrier Id

CREATE Procedure [DBO].COM_GetCarrierTracking
(
	@CarrierID FLOAT
)
AS

	SELECT	
		A.CRAN8 AS CarrierID,
		ISNULL(B.ABALPH,' ') AS AlphaName,
		A.CREMAL AS TrackingURL
	FROM [SCDATA].FQ67CARS A
	LEFT OUTER JOIN [SCDATA].F0101 B ON-- Address Book Master Table
		A.CRAN8 = B.ABAN8
	WHERE
		A.CRAN8 = @CarrierID
GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetCarrierTrackingList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetCarrierTrackingList
	END

GO

-- #desc				Load Carrier Tracking List
-- #bl_class			Premier.Commerce.CarrierTrackingList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].COM_GetCarrierTrackingList

AS

SELECT	
	A.CRAN8 AS CarrierID,
	B.ABALPH AS AlphaName
FROM
	[SCDATA].FQ67CARS A
	INNER JOIN [SCDATA].F0101 B ON-- Address Book Master Table
	A.CRAN8 = B.ABAN8
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetConsumerRecentSOList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetConsumerRecentSOList
	END

GO

-- #desc							Returns the last @OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.SalesOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					COM_RecentOrderDetailExtVW

-- #param @InstallationID			Installation Id
-- #param @AddressNumber			Address Number
-- #param @OrdersToDisplay			Quantity of rows to be returned
-- #param @Company					Company if is 00000 is '*'
-- #param @LastDays					Filter orders in last N days

CREATE PROCEDURE [DBO].COM_GetConsumerRecentSOList
(
	@InstallationID				NVARCHAR(3),
	@AddressNumber				FLOAT,
	@OrdersToDisplay			INT,
	@Company					NVARCHAR(5),
	@LastDays					INT/* 0 or N days */
)
AS

	DECLARE @SOrderRestric		NVARCHAR(256)
	DECLARE @SOrderINID			NVARCHAR(3)
	DECLARE @SOrderConstant		NVARCHAR(10)
	 /* Gets the Sales Order Document Restrictions	*/
    SET @SOrderConstant = 'SO_RESTRIC'
    SET @SOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric out
    
	/* Gets the Freight Line Type */    
    DECLARE @FreightLineType	NVARCHAR(256)	 
    EXEC [DBO].CMM_GetConstantValue 'FREIGHTLN', @InstallationID, @FreightLineType out
    
	/* Gets the Discount Line Type */
    DECLARE @DiscountLineType	NVARCHAR(256)	
    EXEC [DBO].CMM_GetConstantValue 'DISCOUNTLN', @InstallationID, @DiscountLineType out
    
    /* Read Account Receivable company constant */
	DECLARE @CompanyConstant	NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	
	
	DECLARE @OpenLnStatus		NVARCHAR(256);
    EXEC [DBO].CMM_GetConstantValue 'ORD_SCHOPN', @InstallationID, @OpenLnStatus out

	/* Gets the Surcharge Line Type */    
    DECLARE @SurchargeLineType	NVARCHAR(256)	 
    EXEC [DBO].CMM_GetConstantValue 'SURCHARGLN', @InstallationID, @SurchargeLineType out

	IF (@Company = '00000')
	BEGIN
		SET @Company = '*'
	END

	/* Do not filter by N days */
	IF(@LastDays = 0) BEGIN 
		SELECT 
			SHDOCO			AS OrderNumber, 
			SHDCTO			AS OrderType,
			SHKCOO			AS OrderCompany, 
			SHTRDJ			AS OrderDate,
			SHCRCD			AS CurrencyCode,
			SHCRRM			AS CurrencyMode,
			SHOTOT			AS ProductTotal,
			SHHOLD			AS HoldCode,
			SHFAP			AS ProductTotalForeign,
			[DBO].COM_GetSalesOrderStatusFnc (SHDOCO, SHKCOO, SHDCTO, @OpenLnStatus, @FreightLineType, @DiscountLineType, @SurchargeLineType) as OrderStatus,
			TB.CCCRCD	    AS BaseCurrencyCode						
		FROM [DBO].COM_GetRecentDocExtendedFnc (@Company, @SOrderINID, @SOrderConstant, @ConstantInstallation, @CompanyConstant, @SOrderRestric, @AddressNumber) A
		INNER JOIN [SCDATA].F0010 TB
			ON TB.CCCO = SHKCOO
		WHERE
			(RNUM BETWEEN 1 AND @OrdersToDisplay)
	END
	ELSE BEGIN
		/* Filter last N days */
		DECLARE @DateFrom NUMERIC;
		DECLARE @DateTo NUMERIC;
		SET @DateFrom = [DBO].CMM_GetCurrentJulianDate (DATEADD(DAY, - @LastDays, GETDATE()));
		SET @DateTo = [DBO].CMM_GetCurrentJulianDate (GETDATE());

			;WITH CTE AS (
				SELECT 
					SHDOCO,
					SHDCTO,
					SHKCOO,
					SHTRDJ			AS OrderDate,
					SHCRCD			AS CurrencyCode,
					SHCRRM			AS CurrencyMode,
					SHOTOT			AS ProductTotal,
					SHHOLD			AS HoldCode,
					SHFAP			AS ProductTotalForeign,
					TB.CCCRCD	    AS BaseCurrencyCode,
					ROW_NUMBER() OVER (ORDER BY SHTRDJ DESC, SHDOCO DESC) AS RNUM
				FROM [DBO].COM_GetRecentDocExtendedFnc (@Company, @SOrderINID, @SOrderConstant, @ConstantInstallation, @CompanyConstant, @SOrderRestric, @AddressNumber) A
				INNER JOIN [SCDATA].F0010 TB
					ON TB.CCCO = SHKCOO
				WHERE A.SHTRDJ BETWEEN @DateFrom AND @DateTo /* Filter last N days */
			)
			SELECT 
					SHDOCO			AS OrderNumber, 
					SHDCTO			AS OrderType,
					SHKCOO			AS OrderCompany, 
					A.OrderDate,
					A.CurrencyCode,
					A.CurrencyMode,
					A.ProductTotal,
					A.HoldCode,
					A.ProductTotalForeign,
					[DBO].COM_GetSalesOrderStatusFnc (SHDOCO, SHKCOO, SHDCTO, @OpenLnStatus, @FreightLineType, @DiscountLineType, @SurchargeLineType) as OrderStatus,
					A.BaseCurrencyCode						
			FROM CTE A
			WHERE
				(RNUM BETWEEN 1 AND @OrdersToDisplay)
	END;
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetCrossSegmentRulesList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetCrossSegmentRulesList
	END

GO

-- #desc							Cross Segment Rules List
-- #bl_class						Premier.Commerce.CrossSegmentRulesList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @ItemNumberList			N/A
-- #param @BranchPlantList			N/A

CREATE Procedure [DBO].COM_GetCrossSegmentRulesList
(
	@ItemNumberList		NVARCHAR(100),
	@BranchPlantList	NVARCHAR(100)
)

AS

	DECLARE @CurrentJulianDate INTEGER;

	SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE());

WITH ALLRULES AS (
		SELECT 
			KUATO# AS RuleNumber,
			IT.BranchPlant AS ItemBranchPlant,
			KUKIT AS ItemNumber,
			KUATOS AS SequenceNumber,
			KUAO AS Operation,
			(CASE WHEN(KUAO5B = '(')
			THEN 1 ELSE 0 END) AS IsBeginBracket,
			KUPEL AS SegmentNumber,
			KUCEL AS RightSegmentNumber,
			KUVALR AS Relationship,
			(CASE KUATIV
				WHEN '' THEN 'SEGMENT'
				WHEN '*ALL' THEN 'ALL'
				WHEN '*VALUES' THEN 'VALUES'
				WHEN '*BLANK' THEN 'BLANK'
				WHEN '*RANGE' THEN 'RANGE'
				WHEN '*ZERO' THEN 'ZERO'
				WHEN '*REQ' THEN 'REQUIRED'
				WHEN '*OPT' THEN 'OPTIONAL'
				ELSE 'SIMPLE'
			END) AS ValueType,
			(CASE WHEN (KUATIV = '*VALUES')
			THEN(SELECT STUFF( 
				( 
					 SELECT DISTINCT ',' + LTRIM(RTRIM(RV.KXSGVL))
						 FROM [SCDATA].F32921 RV
						 WHERE R.KUKIT = RV.KXKIT
						 AND R.KUMCU = RV.KXMCU
						 AND R.KUATO# = RV.KXATO#
						 AND R.KUATOS = RV.KXATOS FOR XML PATH('') 
				), 1, 1, ''))
				WHEN (KUATIV = '*RANGE')
				THEN(SELECT RTRIM(RR.KVSRFV) +  '-' + RTRIM(RR.KVSRTV)
						 FROM [SCDATA].F32922 RR
						 WHERE R.KUKIT = RR.KVKIT
						 AND R.KUMCU = RR.KVMCU
						 AND R.KUATO# = RR.KVATO#
						 AND R.KUATOS = RR.KVATOS)
			ELSE
			R.KUATIV END) AS SegmentValues,
			(CASE WHEN(KUAO5E = ')')
			THEN 1 ELSE 0 END) AS IsEndBracket,
			KUPSIN AS LeftItemNumber,
			KUEMCU AS LeftBranchPlant,
			KUITMRIGHT AS RightItemNumber,
			KUMCURIGHT AS RightBranchPlant
		FROM [SCDATA].F3292 R
		INNER JOIN [DBO].CMM_AssocItemBranchPlantFnc(@ItemNumberList, @BranchPlantList, ',') IT
		ON ItemNumber = KUKIT
		AND BranchPlant = KUMCU
		AND ((@CurrentJulianDate BETWEEN KUEFFF AND KUEFFT) OR (KUEFFF = 0 AND KUEFFT = 0 AND KUAO IN ('I','A','O')))
	),

	RULESFILTERED AS
	(
		SELECT RuleNumber, ItemNumber FROM ALLRULES
		WHERE Operation IN ('*', 'E')
		GROUP BY RuleNumber,ItemNumber
	)

	SELECT CAST(Rules.RuleNumber AS NVARCHAR(5)) + CAST(Rules.ItemNumber AS NVARCHAR(25)) AS RuleID,
		   Rules.ItemNumber,
		   Rules.ItemBranchPlant,
		   Rules.SequenceNumber,
		   Rules.Operation,
		   Rules.IsBeginBracket,
		   Rules.SegmentNumber,
		   Rules.RightSegmentNumber,
		   Rules.Relationship,
		   Rules.ValueType,
		   Rules.SegmentValues,
		   Rules.IsEndBracket,
		   Rules.LeftItemNumber,
		   Rules.LeftBranchPlant,
		   Rules.RightItemNumber,
		   Rules.RightBranchPlant
	FROM ALLRULES Rules
	INNER JOIN RULESFILTERED Filtered
	ON Filtered.RuleNumber = Rules.RuleNumber
	AND Filtered.ItemNumber = Rules.ItemNumber
	ORDER BY RuleID, Rules.SequenceNumber;

GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetCustomerRecentSOList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetCustomerRecentSOList
	END

GO

-- #desc							Returns the last @OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.SalesOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					COM_RecentOrderDetailVW

-- #param @InstallationID			Installation Id
-- #param @AddressNumber			Address Number
-- #param @OrdersToDisplay			Quantity of rows to be returned
-- #param @Company					Company if is 00000 is '*'
-- #param @LastDays					Filter orders in last N days

CREATE PROCEDURE [DBO].COM_GetCustomerRecentSOList
(
	@InstallationID				NVARCHAR(3),
	@AddressNumber				FLOAT,
	@OrdersToDisplay			INT,
	@Company					NVARCHAR(5),
	@LastDays					INT/* 0 or N days */
)
AS

	DECLARE @SOrderRestric		NVARCHAR(256)
	DECLARE @SOrderINID			NVARCHAR(3)
	DECLARE @SOrderConstant		NVARCHAR(10)
	 /* Gets the Sales Order Document Restrictions	*/
    SET @SOrderConstant = 'SO_RESTRIC'
    SET @SOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric out
    
	/* Gets the Freight Line Type */    
    DECLARE @FreightLineType	NVARCHAR(256)	 
    EXEC [DBO].CMM_GetConstantValue 'FREIGHTLN', @InstallationID, @FreightLineType out
    
	/* Gets the Discount Line Type */
    DECLARE @DiscountLineType	NVARCHAR(256)	
    EXEC [DBO].CMM_GetConstantValue 'DISCOUNTLN', @InstallationID, @DiscountLineType out
    
    /* Read Account Receivable company constant */
	DECLARE @CompanyConstant	NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	
	
	DECLARE @OpenLnStatus		NVARCHAR(256);
    EXEC [DBO].CMM_GetConstantValue 'ORD_SCHOPN', @InstallationID, @OpenLnStatus out

    /* Gets the Surcharge Line Type */
    DECLARE @SurchargeLineType	NVARCHAR(256)	
    EXEC [DBO].CMM_GetConstantValue 'SURCHARGLN', @InstallationID, @SurchargeLineType out

	IF (@Company = '00000')
	BEGIN
		SET @Company = '*'
	END

	/* Do not filter by N days */
	IF(@LastDays = 0) BEGIN
			SELECT 
				SHDOCO			AS OrderNumber, 
				SHDCTO			AS OrderType,
				SHKCOO			AS OrderCompany, 
				SHTRDJ			AS OrderDate,
				SHCRCD			AS CurrencyCode,
				SHCRRM			AS CurrencyMode,
				SHHOLD			AS HoldCode,
				SHOTOT			AS ProductTotal,
				SHFAP			AS ProductTotalForeign,
				[DBO].COM_GetSalesOrderStatusFnc (SHDOCO, SHKCOO, SHDCTO, @OpenLnStatus, @FreightLineType, @DiscountLineType, @SurchargeLineType) as OrderStatus,
				TB.CCCRCD	    AS BaseCurrencyCode					
			FROM [DBO].COM_GetRecentDocsFnc (@Company, @SOrderINID, @SOrderConstant, @ConstantInstallation, @CompanyConstant, @SOrderRestric, @AddressNumber) A
			INNER JOIN [SCDATA].F0010 TB
				ON TB.CCCO = SHKCOO
			WHERE
				(RNUM BETWEEN 1 AND @OrdersToDisplay)
	END
	/* Filter last N days */
	ELSE BEGIN
		
		DECLARE @DateFrom NUMERIC;
		DECLARE @DateTo NUMERIC;
	
		SET @DateFrom = [DBO].CMM_GetCurrentJulianDate (DATEADD(DAY, - @LastDays, GETDATE()));
		SET @DateTo = [DBO].CMM_GetCurrentJulianDate (GETDATE());
			WITH CTE AS (
				SELECT 
					SHDOCO,
					SHDCTO,
					SHKCOO, 
					SHTRDJ			AS OrderDate,
					SHCRCD			AS CurrencyCode,
					SHCRRM			AS CurrencyMode,
					SHHOLD			AS HoldCode,
					SHOTOT			AS ProductTotal,
					SHFAP			AS ProductTotalForeign,
					TB.CCCRCD	    AS BaseCurrencyCode,
					ROW_NUMBER() OVER (ORDER BY SHTRDJ DESC, SHDOCO DESC) AS RNUM
				FROM [DBO].COM_GetRecentDocsFnc (@Company, @SOrderINID, @SOrderConstant, @ConstantInstallation, @CompanyConstant, @SOrderRestric, @AddressNumber) A
				INNER JOIN [SCDATA].F0010 TB
					ON TB.CCCO = SHKCOO
				WHERE A.SHTRDJ BETWEEN @DateFrom AND @DateTo /* Filter last N days */
			)
			SELECT 
				SHDOCO			AS OrderNumber, 
				SHDCTO			AS OrderType,
				SHKCOO			AS OrderCompany, 
				A.OrderDate,
				A.CurrencyCode,
				A.CurrencyMode,
				A.HoldCode,
				A.ProductTotal,
				A.ProductTotalForeign,
				[DBO].COM_GetSalesOrderStatusFnc (SHDOCO, SHKCOO, SHDCTO, @OpenLnStatus, @FreightLineType, @DiscountLineType, @SurchargeLineType) as OrderStatus,
				A.BaseCurrencyCode					
			FROM CTE A
			WHERE
				(RNUM BETWEEN 1 AND @OrdersToDisplay)
		
	END;

GO  
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvConfiguredLineList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvConfiguredLineList
	END

GO
-- #desc					Load the Configured Segments List for an Invoice related order items
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetInvoiceOrderDetail

-- #param @OrderCompany		Company id
-- #param @OrderType		Document type
-- #param @OrderNumber		Order number
-- #param @LangPref			Lang Pref

CREATE Procedure [DBO].COM_GetInvConfiguredLineList
(
	@InvoiceCompany  NVARCHAR(5),
	@InvoiceType     NVARCHAR(3),
	@InvoiceNumber	 FLOAT
	/* The parameter @LangPref was removed by performance improvements, 
	 * the descriptions of the configured segments will be returned in 
	 * the default JDE language */
)
AS
	;WITH TMP_ORDERS AS (
		SELECT 
			A.SDKCOO,
			A.SDDCTO,
			A.SDDOCO,		
			A.SDKCO,
			A.SDDOC,
			A.SDDCT
		FROM [SCDATA].F4211 A	
  		WHERE
			A.SDDOC		= @InvoiceNumber
			AND A.SDDCT = @InvoiceType
			AND A.SDKCO = @InvoiceCompany 
		UNION ALL 
		SELECT 
			A.SDKCOO,		
			A.SDDCTO,
			A.SDDOCO,
			A.SDKCO,
			A.SDDOC,
			A.SDDCT
		FROM [SCDATA].F42119 A	
  		WHERE
			A.SDDOC		= @InvoiceNumber
			AND A.SDDCT = @InvoiceType
			AND A.SDKCO = @InvoiceCompany 
	),
	/*Stores the history for the configured items of all the configurations ordered.*/
	ConfiguratorMaster AS (
		SELECT DISTINCT
			CT.CMCFGID	AS ConfiguratorID,
			CT.CMEMCU	AS BranchPlant,
			CT.CMLNID	AS LineNumber,
			CT.CMKCOO	AS OrderCompany,
			CT.CMDOCO	AS OrderNumber,
			CT.CMDCTO	AS OrderType
		FROM 
			[SCDATA].F3201 CT	 /*Configurator Master*/
		INNER JOIN TMP_ORDERS SO
			ON SO.SDKCOO = CT.CMKCOO AND 
			SO.SDDOCO = CT.CMDOCO AND
			SO.SDDCTO	= CT.CMDCTO
		WHERE		
			CT.CMCFGCID  = 1 /*assumption:1 is the parent number ID - CMLNID = 1*/
		UNION ALL
		SELECT DISTINCT
			CTH.CHCFGID	AS ConfiguratorID,
			CTH.CHEMCU	AS BranchPlant,
			CTH.CHLNID	AS LineNumber,
			CTH.CHKCOO	AS OrderCompany,
			CTH.CHDOCO	AS OrderNumber,
			CTH.CHDCTO	AS OrderType
		FROM 
			[SCDATA].F32019 CTH /*Configurator Master History*/
		INNER JOIN TMP_ORDERS SO
			ON SO.SDKCOO = CTH.CHKCOO AND 
			SO.SDDOCO = CTH.CHDOCO AND
			SO.SDDCTO = CTH.CHDCTO
		WHERE			
			CTH.CHCFGCID  = 1 /*assumption:1 is the parent number ID - CMLNID = 1*/
	)

	/*Stores segment information*/
	SELECT 
			OrderCompany,
			OrderType,
			OrderNumber,
			LineNumberID,
			ConfigurationIDNumber,
			ComponentIDNumber,
			SegmentNumber,
			SegmentValue,
			ParentItemNumber,
			ISNULL(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ) AS RequiredorOptional,
			ISNULL(CIS_MCU.KWDSC1, CIS_EMPTY_MCU.KWDSC1) AS Description,
			ISNULL(CIS_MCU.KWDTAS, CIS_EMPTY_MCU.KWDTAS) AS SegmentSequence,
			(CASE WHEN (ISNULL(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ)) = 'C' OR RTRIM(ISNULL(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY)) = '' OR RTRIM(ISNULL(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT)) = ''
				THEN ' ' 
				ELSE [DBO].CMM_GetUserDefinedCodeFnc(ISNULL(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY), ISNULL(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT), SegmentValue, '*')  
			END) AS SegmentDescription
	FROM
		(SELECT DISTINCT
			CM.OrderCompany	AS OrderCompany,
			CM.OrderType	AS OrderType,        
			CM.OrderNumber	AS OrderNumber,	 
			CM.LineNumber	AS LineNumberID,
			SD.KZCFGID		AS ConfigurationIDNumber,	
			SD.KZCFGCID		AS ComponentIDNumber,
			SD.KZPEL		AS SegmentNumber,
			SD.KZSGVL		AS SegmentValue,
			SD.KZKIT		AS ParentItemNumber,
			CM.BranchPlant  AS BranchPlant
		FROM
			[SCDATA].F3211 SD	  /*Configurator Segment Detail*/
		INNER JOIN ConfiguratorMaster CM
			ON CM.ConfiguratorID = SD.KZCFGID
		UNION ALL
		SELECT DISTINCT
			CM.OrderCompany	AS OrderCompany,
			CM.OrderType	AS OrderType,        
			CM.OrderNumber	AS OrderNumber,	 
			CM.LineNumber	AS LineNumberID,
			SDH.KSCFGID		AS ConfigurationIDNumber,	
			SDH.KSCFGCID	AS ComponentIDNumber,
			SDH.KSPEL		AS SegmentNumber,
			SDH.KSSGVL 		AS SegmentValue,
			SDH.KSKIT		AS ParentItemNumber,
			CM.BranchPlant AS  BranchPlant
		FROM 	
			[SCDATA].F32119 SDH /*Configurator Segment Detail History*/
		INNER JOIN ConfiguratorMaster CM
			ON CM.ConfiguratorID = SDH.KSCFGID) AS OrderConf
	LEFT JOIN [SCDATA].F3291 CIS_MCU /*Configured Item Segments*/
            ON CIS_MCU.KWKIT  = OrderConf.ParentItemNumber 
            AND CIS_MCU.KWMCU = OrderConf.BranchPlant
            AND CIS_MCU.KWPEL = OrderConf.SegmentNumber
	LEFT JOIN [SCDATA].F3291 CIS_EMPTY_MCU /*Configured Item Segments*/
        ON CIS_EMPTY_MCU.KWKIT  = OrderConf.ParentItemNumber 
        AND CIS_EMPTY_MCU.KWMCU = ''
        AND CIS_EMPTY_MCU.KWPEL = OrderConf.SegmentNumber
	ORDER BY ComponentIDNumber, SegmentSequence, SegmentNumber, Description

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoiceLineList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoiceLineList
	END
GO

-- #desc						Search for invoice line list
-- #bl_class					Premier.Commerce.InvoiceLineList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InvoiceNumber		Invoice Number			
-- #param @InvoiceCompany		Invoice Company
-- #param @InvoiceType			Invoice Type

/* Open Amount Calculation doesn't consider Allow Foreign OFF mode.
 * This means that Domestic Open Amount will reflect payments stored 
 * in F03B13Z1 that  are always in Foreign currency
 */

CREATE PROCEDURE [DBO].COM_GetInvoiceLineList
	@InvoiceNumber				FLOAT,
	@InvoiceCompany				NVARCHAR(5),
	@InvoiceType				NVARCHAR(2)
AS

BEGIN 
	SET NOCOUNT ON	

	SELECT	DISTINCT
		A.RPDIVJ	AS InvoiceDate,
		A.RPDDJ		AS DueDate,
		A.RPSFX		AS DocumentSuffix,
		A.RPAG		AS GrossAmount,
		(A.RPAAP - ISNULL(E.RUAG,0))		AS OpenAmount,
		A.RPACR		AS GrossAmountForeign,
		(A.RPFAP - ISNULL(E.RUAG,0))		AS OpenAmountForeign,
		A.RPVR01	AS YourReference,
		A.RPCRCD	AS CurrencyCode,
		C.CVDL01	AS CurrencyDesc,
		A.RPCRRM	AS CurrencyMode,
		A.RPBCRC	AS BaseCurrencyCode,
		D.CVDL01	AS BaseCurrencyDesc
	FROM 	[SCDATA].F03B11 	AS A			/* Invoice table */
		LEFT OUTER JOIN [SCDATA].F0013 AS C	/* Currency Master */
			ON A.RPCRCD = C.CVCRCD
		LEFT OUTER JOIN [SCDATA].F0013 D		/* Base currency */
			ON A.RPBCRC = D.CVCRCD
		LEFT JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('', 'E') GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT*/
			ON  A.RPAN8 = E.RUAN8				  
			AND A.RPDOC = E.RUDOC
			AND A.RPDCT = E.RUDCT
			AND A.RPKCO = E.RUKCO
			AND A.RPSFX = E.RUSFX
	WHERE A.RPDOC = @InvoiceNumber		/* INVOICE NUMBER */
		AND A.RPDCT = @InvoiceType 
		AND A.RPKCO = @InvoiceCompany
	ORDER BY A.RPDIVJ DESC
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoiceOpenSummary'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoiceOpenSummary
	END
GO

-- #desc						Get Open Invoices Summary 
-- #bl_class					Premier.Commerce.InvoiceOpenSummaryInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId				Store ID
-- #param @AddressNumber		Address Number
-- #param @Company				Company if 00000 then '*'
-- #param @CurrencyCode			Currency Code
-- #param @DueDateTo			Due Date

CREATE PROCEDURE [DBO].COM_GetInvoiceOpenSummary
	@StoreId				NVARCHAR(3),
	@AddressNumber			FLOAT,
	@Company				NVARCHAR(5),
	@CurrencyCode			NVARCHAR(3),
	@DueDateTo				NUMERIC
AS
	/* Counts variables */
	DECLARE @OpenInvoiceCount INTEGER;
	DECLARE @DueInvoiceCount INTEGER;

	--Gets the Account Receivable Document Restrictions
	DECLARE	@ArRestric	 NVARCHAR(256)
	DECLARE @ArINID		 NVARCHAR(3)
	DECLARE @ArConstant    NVARCHAR(10)

	SET @ArConstant = 'AR_RESTRIC';
	SET @ArINID = @StoreId;
	EXEC [DBO].CMM_GetConstantValue @ArConstant, @ArINID out, @ArRestric out

	DECLARE @SINID      NVARCHAR(3) 
	DECLARE @CompanyConstant		NVARCHAR(256)
	SET @SINID = @StoreId
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @SINID OUT, @CompanyConstant OUT

	IF (@Company = '00000')
	BEGIN
		SET @Company = '*'
	END
	
	SELECT
		COUNT(1)											AS OpenInvoiceCount,
		COUNT(CASE WHEN A.RPDDJ <= @DueDateTo THEN 1 END)	AS DueInvoiceCount
		FROM [SCDATA].F03B11 A /*INVOICE */
		LEFT OUTER JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8	/* ELECTRONIC RECEIPTS INPUT */
							FROM [SCDATA].F03B13Z1 
							WHERE  RUEUPS IN ('', 'E') 
							GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS C
			ON  RPAN8 = RUAN8				  
			AND RPDOC = RUDOC
			AND RPDCT = RUDCT
			AND RPKCO = RUKCO
			AND RPSFX = RUSFX
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR /* Document restrict */
			ON SOR.DRKY = A.RPDCT 
			AND SOR.DR$9INID = @ArINID
			AND SOR.DR$9CNST = 'AR_RESTRIC'
		LEFT OUTER JOIN [SCDATA].FQ679912 CR	/* Company Restrict */
			ON CICO = A.RPCO
			AND CI$9INID = @SINID
		WHERE	 
		A.RPAN8 = @AddressNumber
		AND	A.RPCRCD = @CurrencyCode 
		AND	(((A.RPCRRM = 'D' OR A.RPCRRM = '' OR A.RPCRRM IS NULL) AND (A.RPAAP - ISNULL(C.RUAG,0)) > 0.01) 
			OR (A.RPCRRM = 'F' AND (A.RPFAP - ISNULL(C.RUAG,0)) > 0.01)) /* Open Amount */
		AND (@ArRestric = '0' OR SOR.DRKY IS NOT NULL)  /*INVOICE NOT RESTRICTED*/
		AND	(A.RPCO = @Company OR (@Company = '*' AND ( @CompanyConstant = 'A' OR CICO IS NOT NULL )) )
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoiceOrderDetail'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoiceOrderDetail
	END
GO
-- #desc									Load a order Freight Discount lines to freight information Entity.
-- #bl_class								Premier.Commerce.InvoiceOrderDetailInfo.cs
-- #db_dependencies							COM_GetInvoiceOrderDetailFnc
-- #db_references							N/A

-- #param @InvoiceCompany					Company ID
-- #param @InvoiceNumber					Document Type
-- #param @InvoiceType						InvoiceNumber
-- #param @InstallationID					Installation ID
-- #param @RetrieveWebContentInfo			Retrieve Web Content Info
-- #param @LangPref							Lang Pref




CREATE PROCEDURE [DBO].COM_GetInvoiceOrderDetail
	@InstallationID NVARCHAR(3),
	@InvoiceCompany	NVARCHAR(5),
	@InvoiceType	NVARCHAR(2),
	@InvoiceNumber	FLOAT,
	@RetrieveWebContentInfo	INT,
	@LangPref		NVARCHAR(2)
AS
	-- Gets the Sales Order Document Restrictions
	DECLARE @SOrderRestric	NVARCHAR(256)
	DECLARE @SOrderINID     NVARCHAR(3) 
	DECLARE @SOrderConstant	NVARCHAR(10)	
    SET @SOrderConstant = 'SO_RESTRIC'
    SET @SOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric OUT
    
    -- Gets Customer Cross Reference Type Restrictions
	DECLARE @CustCrossRefType	NVARCHAR(256)
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @InstallationID, @CustCrossRefType OUT
    
    DECLARE @CurrentJulianDate NUMERIC
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())

	/********************************Bill*********************************/

	SELECT TOP 1
		  A.RPDIVJ		As InvoiceDate,
		  A.RPDDJ		As DueDate,
		  ''			AS DocumentSuffix,
		  0				AS GrossAmount,
		  0				AS OpenAmount,
		  0				AS GrossAmountForeign,
		  0				AS OpenAmountForeign,
		  A.RPVR01		AS YourReference,
		  B.CVCRCD		As CurrencyCode,
		  B.CVDL01		AS CurrencyDesc,
		  A.RPCRRM		AS CurrencyMode,
		  A.RPBCRC		AS BaseCurrencyCode,
		  C.CVDL01		AS BaseCurrencyDesc
	FROM
		[SCDATA].F03B11 A
		LEFT OUTER JOIN [SCDATA].F0013 B
			ON B.CVCRCD = A.RPCRCD
		LEFT OUTER JOIN [SCDATA].F0013 C
				ON A.RPBCRC = C.CVCRCD
	WHERE
		RPDOC =@InvoiceNumber  and RPDCT = @InvoiceType and RPKCO=@InvoiceCompany
		
	/********************************Detail*********************************/

	SELECT 
        A.SDKCOO				AS OrderCompany, 
		A.SDDCTO				AS OrderType,
		A.SDDOCO				AS OrderNumber,
		A.SDLNID				AS LineNumber,
		A.SDTRDJ				AS TransactionDate,
		A.SDDRQJ				AS RequestedDate,
		A.SDLNTY				AS LineType,
		A.SDNXTR				AS NextStatus,
		A.SDLTTR				AS LastStatus,
		A.SDTAX1				AS TaxableYN,
		A.SDTXA1				AS TaxArea,
		A.SDEXR1				AS TaxExplanationCode,
		A.SDIVD					AS DateInvoice,
		A.SDKCO					AS InvoiceCompany,
		A.SDDOC					AS InvoiceNumber,
		A.SDDCT					AS InvoiceType,
		A.SDSHAN				AS ShipToID,
		A.SDSHAN				AS SCShipToNumber,
		ISNULL(R.ABALPH,'')		AS ShipToName,
		A.SDMCU					AS CostCenter, 
		A.SDEMCU				AS CostCenterHeader,
		ISNULL(S.IVCITM,'')		AS ItemCrossRefNumber,
		A.SDDSC1	AS Description1,
		A.SDDSC2	AS Description2,
		A.SDUORG				AS ShippingQuantity,
		A.SDSOQS				AS ShippedQuantity,
		A.SDUOM					AS UnitOfMeasure,
		A.SDUOM4				AS PricingUnitOfMeasure,
		A.SDSOBK				AS BackorderedQuantity,
		A.SDSOCN				AS CanceledQuantity,
		A.SDUPRC				AS AmountUnitPrice,
		A.SDFUP					AS ForeignUnitPrice,
		A.SDAEXP				AS AmountExtPrice,
		A.SDFEA					AS ForeignExtPrice,
		ISNULL(T.LFIVI,' ')		AS InventoryInterface,
		A.SDCARS				AS CarrierID,
		A.SDMOT					AS ModeOfTransportation,
		A.SDITM					AS IdentifierShortItem,
		A.SDLITM				AS LongItemNumber,
		A.SDAITM				AS AuxItemNumber,
		'N'	AS IsInvoiceRestricted,
		0 AS	ShipLineNumber,
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDKTLN				AS KitMasterLineNo,
		A.SDPROV				AS OverridePrice,
		A.SDCPNT				AS ComponentLineNumber,
		ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
		ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
		ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
		ISNULL(ISNULL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
		ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
		ISNULL(ISNULL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
		ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
		ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
		CASE A.SDADDJ 
			WHEN 0 THEN A.SDTRDJ 
			ELSE A.SDADDJ END	AS ShippedDate,
		A.SDLOCN				AS Location,
		A.SDLOTN				AS LotNumber,
		CASE A.SDSO08 WHEN '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
    INTO #TMP_ORDERDETAIL
	FROM [DBO].COM_GetInvoiceOrderDetailFnc (@InvoiceCompany, @InvoiceNumber,@InvoiceType) A
	LEFT OUTER JOIN [SCDATA].F4104 S	--Customer/Item Cross Ref Table
		ON  S.IVITM = A.SDITM 
		AND S.IVAN8 = A.SDAN8
		AND S.IVXRT = @CustCrossRefType
		AND @CurrentJulianDate BETWEEN S.IVEFTJ AND S.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F40205 T	
		ON T.LFLNTY = A.SDLNTY
	LEFT OUTER JOIN [SCDATA].F0101 R
		ON R.ABAN8 = A.SDSHAN			--Address Book Master
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.SDDOCO 
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.SDDOCO 
		AND TxHistory.DTDCTO = A.SDDCTO
		AND TxHistory.DTKCOO = A.SDKCOO 
		AND TxHistory.DTLNID = A.SDLNID 


	/********************************
				Header
	*********************************/
    SELECT DISTINCT 
		BillToNumber		AS SCBillToNumber,
		ShipToNumber		AS SCShipToNumber,
		AddressBookType,
		A.SHDEL1 AS DeliveryInst1, 
		A.SHDEL2 AS DeliveryInst2,
		A.SHVR01 AS CustomerPO,
		A.SHKCOO AS OrderCompany,
		A.SHDCTO AS OrderType,
		A.SHDOCO AS OrderNumber,
		A.SHTRDJ AS OrderDate,
		A.SHDRQJ AS RequestedDate,
		' ' AS MarketingCode,
		A.SHHOLD AS HoldOrderCode,
		A.SHCRCD AS CurrencyCode,
		A.SHCRRM AS CurrencyMode,
		C.CVDL01 AS CurrencyDesc,
		(CASE WHEN @SOrderRestric = '1' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS ISORDERRESTRICTED,
		' ' AS IsFreightOn,
		B.CCCRCD AS BaseCurrencyCode,
		C.CVDL01 AS BaseCurrencyDesc,
		ISNULL(ISNULL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
	FROM [DBO].COM_InvoiceOrderHeaderVW A
	INNER JOIN #TMP_ORDERDETAIL T
		ON A.SHKCOO = T.OrderCompany
		AND A.SHDOCO = T.OrderNumber
		AND A.SHDCTO = T.OrderType
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	INNER JOIN [SCDATA].F0010 B
		ON B.CCCO = OrderCompany
	LEFT OUTER JOIN [SCDATA].F0013 D
		ON B.CCCRCD = D.CVCRCD
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STKCOO = A.SHKCOO
		AND Tax.STDOCO = A.SHDOCO 
		AND Tax.STDCTO = A.SHDCTO
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STKCOO = A.SHKCOO
		AND TxHistory.STDOCO = A.SHDOCO 
		AND TxHistory.STDCTO = A.SHDCTO
	LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
	ON SOR1.DRKY = OrderType
	AND SOR1.DR$9INID = @SOrderINID
	AND SOR1.DR$9CNST = @SOrderConstant
	ORDER BY A.SHTRDJ DESC


	IF(@RetrieveWebContentInfo = 1)	BEGIN

		SELECT  
			OrderCompany, 
			OrderType,
			OrderNumber,
			LineNumber,
			TransactionDate,
			RequestedDate,
			LineType,
			NextStatus,
			LastStatus,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			DateInvoice,
			InvoiceCompany,
			InvoiceNumber,
			InvoiceType,
			ShipToID,
			SCShipToNumber,
			ShipToName,
			CostCenter, 
			CostCenterHeader,
			ItemCrossRefNumber,
			ISNULL(ContenDesc.DESC1,Description1)	AS Description1,
			ISNULL(ContenDesc.DESC2,Description2)	AS Description2,
			ContenDesc.URL AS URL,
			ShippingQuantity,
			ShippedQuantity,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			BackorderedQuantity,
			CanceledQuantity,
			AmountUnitPrice,
			ForeignUnitPrice,
			AmountExtPrice,
			ForeignExtPrice,
			InventoryInterface,
			CarrierID,
			ModeOfTransportation,
			IdentifierShortItem,
			LongItemNumber,
			AuxItemNumber,
			IsInvoiceRestricted,
			ShipLineNumber,
			StockingType,
			RelatedKitItemNo,
			KitMasterLineNo,
			OverridePrice,
			ComponentLineNumber,
			TaxedUnitPrice,
			ForeignTaxedUnitPrice,
			TaxedExtendedPrice,
			 ForeignTaxedExtPrice,
			UnitTaxAmount,
			ForeignUnitTaxAmount,
			ExtendedTaxAmount,
			ForeignExtTaxAmount,
			ShippedDate,
			Location,
			LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			IsBasketRepricing,
			ISNULL(C.RFOGNO, 0 ) AS ParentLineNo
		FROM #TMP_ORDERDETAIL A
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.IdentifierShortItem,@LangPref,0) ContenDesc 
		LEFT OUTER JOIN [SCDATA].F4573 C  /* Free Goods lines */
			ON C.RFDOCO = A.OrderNumber 
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber
	END

	ELSE BEGIN

		SELECT  
			OrderCompany, 
			OrderType,
			OrderNumber,
			LineNumber,
			TransactionDate,
			RequestedDate,
			LineType,
			NextStatus,
			LastStatus,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			DateInvoice,
			InvoiceCompany,
			InvoiceNumber,
			InvoiceType,
			ShipToID,
			SCShipToNumber,
			ShipToName,
			CostCenter, 
			CostCenterHeader,
			ItemCrossRefNumber,
			Description1 AS Description1, /* Retrieve Description 1 for Tracking lines */
			Description2 AS Description2,
			N'' AS URL,
			ShippingQuantity,
			ShippedQuantity,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			BackorderedQuantity,
			CanceledQuantity,
			AmountUnitPrice,
			ForeignUnitPrice,
			AmountExtPrice,
			ForeignExtPrice,
			InventoryInterface,
			CarrierID,
			ModeOfTransportation,
			IdentifierShortItem,
			LongItemNumber,
			AuxItemNumber,
			IsInvoiceRestricted,
			ShipLineNumber,
			StockingType,
			RelatedKitItemNo,
			KitMasterLineNo,
			OverridePrice,
			ComponentLineNumber,
			TaxedUnitPrice,
			ForeignTaxedUnitPrice,
			TaxedExtendedPrice,
			 ForeignTaxedExtPrice,
			UnitTaxAmount,
			ForeignUnitTaxAmount,
			ExtendedTaxAmount,
			ForeignExtTaxAmount,
			ShippedDate,
			Location,
			LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			IsBasketRepricing,
			ISNULL(C.RFOGNO, 0) AS ParentLineNo
		FROM #TMP_ORDERDETAIL A 
		LEFT OUTER JOIN [SCDATA].F4573 C  /* Free Goods lines */
			ON C.RFDOCO = A.OrderNumber 
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber

	END


	/*Configured Items*/
	/* The parameter @LangPref was removed by performance improvements, the descriptions of the configured segments 
	 * will be returned in the default JDE language, avoid join with table F0005D */
	EXEC [DBO].COM_GetInvConfiguredLineList @InvoiceCompany, @InvoiceType, @InvoiceNumber
	
	DROP TABLE #TMP_ORDERDETAIL
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = N'IF' AND id = OBJECT_ID(N'[DBO].COM_GetInvoiceOrderDetailFnc'))
	BEGIN
		DROP FUNCTION [DBO].COM_GetInvoiceOrderDetailFnc
	END
GO
-- #desc						Gets Invoice Order Lines
-- #db_dependencies				N/A
-- #db_references				N/A							

-- #param @InvoiceCompany		Invoice Company
-- #param @InvoiceNumber		Invoice Number
-- #param @InvoiceType			Invoice Type

CREATE FUNCTION [DBO].COM_GetInvoiceOrderDetailFnc
(	
	@InvoiceCompany	NVARCHAR(5),
	@InvoiceNumber	FLOAT,
	@InvoiceType	NVARCHAR(2)
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		A.SDSHAN, 
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDTRDJ,
		A.SDDRQJ,
		A.SDTAX1,				
		A.SDTXA1,
		A.SDEXR1,
		A.SDIVD,
		A.SDKCO,
		A.SDDOC,
		A.SDDCT,
		A.SDMCU, 
		A.SDEMCU,
		A.SDUORG,
		A.SDSOQS,
		A.SDUOM	,
		A.SDUOM4,
		A.SDSOBK,
		A.SDSOCN,
		A.SDUPRC,
		A.SDFUP,
		A.SDAEXP,
		A.SDFEA,
		A.SDCARS,
		A.SDMOT,
		A.SDRLIT,
		A.SDKTLN,
		A.SDPROV,
		A.SDCPNT,
		A.SDLOCN,
		A.SDLOTN,
		A.SDAITM,
		A.SDAN8,
		A.SDDSC1,
		A.SDDSC2,
		A.SDLITM,
		A.SDADDJ,
		A.SDSO08
	FROM [SCDATA].F4211 A	
	WHERE
		A.SDDOC = @InvoiceNumber
		AND A.SDDCT = @InvoiceType
		AND A.SDKCO = @InvoiceCompany 

	UNION ALL

	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		A.SDSHAN,
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDTRDJ,
		A.SDDRQJ,
		A.SDTAX1,				
		A.SDTXA1,
		A.SDEXR1,
		A.SDIVD,
		A.SDKCO,
		A.SDDOC,
		A.SDDCT,
		A.SDMCU, 
		A.SDEMCU,
		A.SDUORG,
		A.SDSOQS,
		A.SDUOM	,
		A.SDUOM4,
		A.SDSOBK,
		A.SDSOCN,
		A.SDUPRC,
		A.SDFUP,
		A.SDAEXP,
		A.SDFEA,
		A.SDCARS,
		A.SDMOT,
		A.SDRLIT,
		A.SDKTLN,
		A.SDPROV,
		A.SDCPNT,
		A.SDLOCN,
		A.SDLOTN,
		A.SDAITM,
		A.SDAN8,
		A.SDDSC1,
		A.SDDSC2,
		A.SDLITM,
		A.SDADDJ,
		A.SDSO08
	FROM [SCDATA].F42119 A
	WHERE A.SDDOC = @InvoiceNumber
		AND A.SDDCT = @InvoiceType
		AND A.SDKCO = @InvoiceCompany 
) 

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoicePayDetailList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoicePayDetailList
	END
GO

-- #desc						Search for Invoice Payment detail List
-- #bl_class					Premier.Commerce.InvoicePaymentDetailList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @PaymentID			Payment ID
-- #param @AddressNumber		Address Number
-- #param @InvoiceCompany		Invoice Company
-- #param @InvoiceType			Invoice Type
-- #param @InvoiceNumber		Invoice Number			
-- #param @PaymentReference		Reference Number	
-- #param @PageSize				Page Size
-- #param @PageIndex			Page Index
-- #param @EdiUserId			Edi User ID
-- #param @EdiBatchNumber		Edi Batch Number
-- #param @EdiTransactionNumber Edi Transaction Number
-- #param @InTransit			In transit

/* Applied Amount Calculation doesn't consider Allow Foreign OFF mode.
 * This means that Domestic Open Amount will reflect payments stored 
 * in F03B13Z1 that are always in Foreign currency
 */

CREATE PROCEDURE [DBO].COM_GetInvoicePayDetailList
	@InstallationID			NVARCHAR(3),
	@PaymentID				FLOAT,
	@AddressNumber			FLOAT,
	@InvoiceCompany			NVARCHAR(5),
	@InvoiceType			NVARCHAR(2),
	@InvoiceNumber			FLOAT,
	@PaymentReference		NVARCHAR(50),
	@PageIndex				FLOAT,
    @PageSize				FLOAT,
	@EdiUserId				NVARCHAR(10),
	@EdiBatchNumber			NVARCHAR(15),
	@EdiTransactionNumber	NVARCHAR(22),
	@InTransit				FLOAT
AS

BEGIN
	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX) 
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @INNER_DYNAMIC NVARCHAR(MAX) = ''

	/* Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)	
	
	/* Gets the Invoice Document Restrictions Parameters*/
	DECLARE	@InvRestric		NVARCHAR(256)
	DECLARE @InvINID		NVARCHAR(3)
	DECLARE @InvConstant    NVARCHAR(10)
	SET @InvConstant = 'AR_RESTRIC';
	SET @InvINID = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue @InvConstant, @InvINID out, @InvRestric out

		/* Read Account Receivable company constant */
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	

	IF(@PaymentID IS NOT NULL) BEGIN
			IF (@WHERE_DYNAMIC <> N'')
				SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'RZICU = @PaymentID'
		END
	IF (@AddressNumber IS NOT NULL) BEGIN
			IF (@WHERE_DYNAMIC <> N'')
				SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'RZAN8 = @AddressNumber'
		END
	IF (@InvoiceNumber IS NOT NULL) BEGIN
			IF (@WHERE_DYNAMIC <> N'')
				SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'RZDOC = @InvoiceNumber'
		END
	IF (@PaymentReference <> '*') BEGIN
			IF (@WHERE_DYNAMIC <> N'')
				SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'LTRIM(RTRIM(RZCKNU)) LIKE ''%'' + @PaymentReference + ''%'''
		END
	IF (@InvoiceType <> '*') BEGIN
			IF (@WHERE_DYNAMIC <> N'')
				SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'RZDCT = @InvoiceType'
		END
	IF (@InvoiceCompany <> '*') BEGIN
			IF (@WHERE_DYNAMIC <> N'')
				SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'RZCO = @InvoiceCompany'
		END

	/* Dynamic query */
	SET @SQL_DYNAMIC = N'WITH CTE AS ( '
	IF(@InTransit = 0 OR @InTransit IS NULL) BEGIN 
		SET @SQL_DYNAMIC += N'  
		SELECT
				RZAN8	AS AddressNumber,
				RZKCO	AS InvoiceCompany,
				RZDCT	AS InvoiceDocumentType,
				RZDOC	AS InvoiceNumber,
				RZSFX	AS InvoiceSuffix,
				RZCKNU	AS PaymentReference,
				RZDMTJ	AS PaymentDate,
				RZPAAP	AS AppliedAmount,
				RZPFAP	AS AppliedAmountForeign,
				RZCRCD	AS CurrencyCode,
				RZCRRM	AS CurrencyMode,
				RZBCRC	AS BaseCurrencyCode
		FROM
				[SCDATA].F03B14	/* Receipts Detail */ '
			
			IF (@CompanyConstant = 'L') BEGIN
			SET @SQL_DYNAMIC += N' INNER JOIN [SCDATA].FQ679912 CR
							ON CICO = RZCO
							AND CI$9INID = @ConstantInstallation '
			END
			SET @SQL_DYNAMIC += N' WHERE ' 
			+ @WHERE_DYNAMIC  ;
			END
			
			IF(@InTransit IS NULL) BEGIN
				SET @SQL_DYNAMIC += N' UNION ALL '
			END

			IF(@InTransit = 1 OR @InTransit IS NULL) BEGIN

				SET @SQL_DYNAMIC += N' 		
				SELECT
					B.RUAN8		AS AddressNumber,
					B.RUKCO		AS InvoiceCompany,
					B.RUDCT		AS InvoiceDocumentType,
					B.RUDOC		AS InvoiceNumber,
					B.RUSFX		AS InvoiceSuffix,
					B.RUCKNU	AS PaymentReference,
					B.RUDMTJ	AS PaymentDate,
					B.RUAG		AS AppliedAmount,
					B.RUAG		AS AppliedAmountForeign,
					B.RUCRCD	AS CurrencyCode,
					B.RUCRRM	AS CurrencyMode,
					B.RUCRCD	AS BaseCurrencyCode			
				FROM
					[SCDATA].F03B13Z1 B '
				IF (@CompanyConstant = 'L') BEGIN
					SET @SQL_DYNAMIC += N' INNER JOIN [SCDATA].FQ679912 CR
								ON CICO = RUCO
								AND CI$9INID = @ConstantInstallation '
				END
					SET @SQL_DYNAMIC += N'  WHERE B.RUEUPS IN ('''', ''E'') ';

					IF (@EdiUserId <> '*' AND @EdiBatchNumber <> '*' AND @EdiTransactionNumber <> '*') BEGIN
						SET @SQL_DYNAMIC += N' AND B.RUEDUS = @EdiUserId AND B.RUEDBT = @EdiBatchNumber AND B.RUEDTN = @EdiTransactionNumber'
					END
					IF (@AddressNumber IS NOT NULL) BEGIN
						SET @SQL_DYNAMIC += N' AND B.RUAN8 = @AddressNumber'
					END
					IF (@InvoiceNumber IS NOT NULL) BEGIN
						SET @SQL_DYNAMIC += N' AND B.RUDOC = @InvoiceNumber'
					END
					IF (@PaymentReference <> '*') BEGIN
						SET @SQL_DYNAMIC += N' AND LTRIM(RTRIM(B.RUCKNU)) LIKE ''%'' + @PaymentReference + ''%'''
					END
					IF (@InvoiceType <> '*') BEGIN
						SET @SQL_DYNAMIC += N' AND B.RUDCT = @InvoiceType'
					END
					IF (@InvoiceCompany <> '*') BEGIN
						SET @SQL_DYNAMIC += N' AND RUKCO = @InvoiceCompany'
					END
				END

		SET @SQL_DYNAMIC += N' 
		), PAGING AS
		(SELECT 
				CTE.AddressNumber,  InvoiceCompany,  InvoiceDocumentType,  InvoiceNumber,  InvoiceSuffix, 
				PaymentReference,  PaymentDate,  AppliedAmount,  AppliedAmountForeign,  CurrencyCode, 
				CurrencyMode,  BaseCurrencyCode, ROW_NUMBER() OVER (ORDER BY PaymentDate DESC) AS RNUM
		 FROM CTE
		),
		TotalRows AS 
		(SELECT 
				COUNT(1) AS TotalRowCount
		 FROM CTE 
		)
	SELECT 
		 AddressNumber,  InvoiceCompany,  InvoiceDocumentType,  InvoiceNumber,  InvoiceSuffix, 
		 PaymentReference,  PaymentDate,  AppliedAmount,  AppliedAmountForeign,  CurrencyCode, 
		 CurrencyMode,  BaseCurrencyCode, TotalRowCount, (CASE WHEN @InvRestric = ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END
		 ELSE ''N'' END ) AS IsInvoiceRestricted
	FROM 
		TotalRows, PAGING 
	LEFT OUTER JOIN [SCDATA].FQ67008 DR
		ON  DR.DRKY = InvoiceDocumentType
		AND DR.DR$9INID = @InvINID
		AND DR.DR$9CNST = @InvConstant
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR ( RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))';

END

	EXECUTE sp_executesql @SQL_DYNAMIC, N'
	@PaymentID				FLOAT,
	@AddressNumber			FLOAT,
	@InvoiceCompany			NVARCHAR(5),
	@InvoiceType			NVARCHAR(2),
	@InvoiceNumber			FLOAT,
	@PaymentReference		NVARCHAR(50),
	@PageIndex				FLOAT,
    @PageSize				FLOAT,
	@EdiUserId				NVARCHAR(10),
	@EdiBatchNumber			NVARCHAR(15),
	@EdiTransactionNumber	NVARCHAR(22),
	@InTransit				FLOAT,
	@InvRestric				NVARCHAR(256),
	@InvINID				NVARCHAR(3),
	@InvConstant			NVARCHAR(10),
	@ConstantInstallation	NVARCHAR(3) ',
	@PaymentID = @PaymentID,			
	@AddressNumber = @AddressNumber,
	@InvoiceCompany = @InvoiceCompany,		
	@InvoiceType = @InvoiceType,		
	@InvoiceNumber = @InvoiceNumber,		
	@PaymentReference = @PaymentReference,	
	@PageIndex = @PageIndex,			
	@PageSize = @PageSize,			
	@EdiUserId = @EdiUserId,			
	@EdiBatchNumber = @EdiBatchNumber,		
	@EdiTransactionNumber = @EdiTransactionNumber,
	@InTransit = @InTransit,
	@InvRestric = @InvRestric,
	@InvINID = @InvINID,
	@InvConstant = @InvConstant,
	@ConstantInstallation = @ConstantInstallation


GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoicePayHeaderList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoicePayHeaderList
	END
GO

-- #desc					Search for Invoice Payment Header List
-- #bl_class				Premier.Commerce.InvoicePaymentHeaderList.cs

-- #param @PaymentID		Payment ID
-- #param @InstallationID	Installation ID
-- #param @InvoiceCompany	InvoiceCompany	
-- #param @InvoiceType		InvoiceType
-- #param @InvoiceNumber	InvoiceNumber
-- #param @InvoiceSuffix	InvoiceSuffix
-- #param @AddressNumber	Address Number
-- #param @PaymentReference Reference Number	
-- #param @JulianDateFrom	JulianDate From
-- #param @JulianDateTo		JulianDate To
-- #param @PageSize			Page Size
-- #param @PageIndex		Page Index
-- #param @SortBy			Sort By Column name
-- #param @SortDir			Sort Dir ASC / DESC

CREATE  PROCEDURE [DBO].COM_GetInvoicePayHeaderList
	@PaymentID			NUMERIC,
	@InstallationID		NVARCHAR(3),
	@InvoiceCompany		NVARCHAR(5),
	@InvoiceType		NVARCHAR(2),
	@InvoiceNumber		FLOAT,
	@InvoiceSuffix		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@PaymentReference	NVARCHAR(50),
	@JulianDateFrom		NUMERIC,
	@JulianDateTo		NUMERIC,
	@PageIndex			BIGINT,
	@PageSize			BIGINT,
	@SortBy				NVARCHAR(20),
	@SortDir			NVARCHAR(1)
AS

	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @SORT_DYNAMIC			NVARCHAR(40)
	DECLARE @SORTDIR_DYNAMIC		NVARCHAR(5)	

	DECLARE @INNER_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @INNER2_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @LEFT_DYNAMIC NVARCHAR(MAX) = '';
	
	/* Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	

	/* Company Restric */
	IF (@CompanyConstant = 'L')
	BEGIN
		SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 D
							 ON D.CICO = A.RYCO
							 AND D.CI$9INID = @ConstantInstallation '

		SET @INNER2_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 D
							 ON D.CICO = A.RUCO
							 AND D.CI$9INID = @ConstantInstallation '
	END

	/* Dynamic sort direction statement */
    SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

    /* Dynamic sort statement */
    SET @SORT_DYNAMIC = CASE @SortBy 
        WHEN 'PaymentID' THEN 'PaymentID' + @SORTDIR_DYNAMIC + ', PaymentDate DESC'
        WHEN 'PaymentReference' THEN 'PaymentReference' + @SORTDIR_DYNAMIC + ', PaymentDate DESC'
        WHEN 'PaymentDate' THEN 'PaymentDate' + @SORTDIR_DYNAMIC 
        WHEN 'PaymentTotal' THEN 'PaymentTotal' + @SORTDIR_DYNAMIC + ', PaymentDate DESC'
        ELSE 'PaymentDate DESC'
    END

	/* Join with F03B14 table when filter by InvoiceCompany, InvoiceType, InvoiceNumber or InvoiceSuffix */
	IF (@InvoiceCompany <> '*' OR @InvoiceType <> '*' OR @InvoiceNumber IS NOT NULL OR @InvoiceSuffix <> '*') BEGIN
		SET @LEFT_DYNAMIC = N' LEFT JOIN [SCDATA].F03B14 C					/* Receipts Detail */
				ON C.RZPYID = A.RYPYID ';
	END;

	/* Dynamic query */
	SET @SQL_DYNAMIC = N'
	WITH CTE AS
	(
		SELECT 
				A.RYICU		AS PaymentID,
				A.RYPYID	AS PaymentKey,
				A.RYAN8		AS AddressNumber,
				A.RYRYIN	AS PaymentInstrument,
				A.RYCKNU	AS PaymentReference,
				A.RYDMTJ	AS PaymentDate,
				A.RYCKAM	AS PaymentTotal,
				A.RYFCAM	AS PaymentTotalForeign,
				A.RYCRCD	AS CurrencyCode,
				A.RYCRRM	AS CurrencyMode,
				A.RYBCRC	AS BaseCurrencyCode,
				''''		AS EdiUserId,
				''''		AS EdiBatchNumber,
				''''		AS EdiTransactionNumber,
				0			AS InTransit
		FROM 
				[SCDATA].F03B13 A								/* Receipts Header */
				' + @LEFT_DYNAMIC 
				+ @INNER_DYNAMIC +
		' WHERE '
				IF (@InvoiceCompany <> '*') BEGIN
					SET @WHERE_DYNAMIC = N'C.RZKCO = @InvoiceCompany'
				END 
				IF (@InvoiceType <> '*') BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'C.RZDCT = @InvoiceType'
				END
				IF (@InvoiceNumber IS NOT NULL) BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'C.RZDOC = @InvoiceNumber'
				END
				IF (@InvoiceSuffix <> '*') BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'C.RZSFX = @InvoiceSuffix'
				END
				IF (@AddressNumber IS NOT NULL) BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'A.RYAN8 = @AddressNumber'
				END
				IF (@PaymentReference <> '*') BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'LTRIM(RTRIM(A.RYCKNU)) LIKE ''%'' + @PaymentReference +''%'''
				END
				IF (@JulianDateFrom <> 0) BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'A.RYDMTJ >= @JulianDateFrom'
				END
				IF (@JulianDateTo <> 0) BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'A.RYDMTJ <= @JulianDateTo'
				END
				IF (@PaymentID IS NOT NULL) BEGIN
					IF (@WHERE_DYNAMIC <> N'')
						SET @WHERE_DYNAMIC += N' AND '
					SET @WHERE_DYNAMIC += N'A.RYICU = @PaymentID'
				END

		SET @SQL_DYNAMIC = @SQL_DYNAMIC + @WHERE_DYNAMIC + N' 
		UNION
		SELECT 
			A.RUICU		AS PaymentID,
			A.RUPYID	AS PaymentKey,
			A.RUAN8		AS AddressNumber,
			A.RUPYIN	AS PaymentInstrument,
			A.RUCKNU	AS PaymentReference,
			A.RUDMTJ	AS PaymentDate,
			SUM(A.RUAG)	AS PaymentTotal,
			A.RUFAP		AS PaymentTotalForeign,
			A.RUCRCD	AS CurrencyCode,
			A.RUCRRM	AS CurrencyMode,
			B.CCCRCD	AS BaseCurrencyCode,
			A.RUEDUS	AS EdiUserId,
			A.RUEDBT	AS EdiBatchNumber,
			A.RUEDTN	AS EdiTransactionNumber,
			1			AS InTransit
		FROM 
			[SCDATA].F03B13Z1 A			/*  Electronic Receipts Input */
			INNER JOIN [SCDATA].F0010 B	/*  Company Constants */
			ON B.CCCO = A.RUKCO'		/*  Document Company*/
		+ @INNER2_DYNAMIC +
			' 
		WHERE 
			A.RUEUPS IN ('''', ''E'') '	/*  RUEUPS = Auto-Cash Upload Status */
			
			IF (@InvoiceCompany <> '*') BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND A.RUKCO = @InvoiceCompany'
			 END
			IF (@InvoiceType <> '*') BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND A.RUDCT = @InvoiceType'
			END
			IF (@InvoiceNumber IS NOT NULL) BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND A.RUDOC = @InvoiceNumber'
			END
			IF (@InvoiceSuffix <> '*') BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND A.RUSFX = @InvoiceSuffix'
			END
			IF (@AddressNumber IS NOT NULL) BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND A.RUAN8 = @AddressNumber'
			END
			IF (@PaymentReference <> '*') BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND LTRIM(RTRIM(A.RUCKNU)) LIKE ''%'' + @PaymentReference + ''%'''
			END
			IF (@JulianDateFrom <> 0) BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC +  N' AND A.RUDMTJ >= @JulianDateFrom'
			END
			IF (@JulianDateTo <> 0) BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND A.RUDMTJ <= @JulianDateTo'
			END
			IF (@PaymentID IS NOT NULL) BEGIN
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N' AND A.RUICU = @PaymentID '
			END
		SET @SQL_DYNAMIC = @SQL_DYNAMIC +  
		' GROUP BY A.RUICU, A.RUPYID, A.RUAN8, A.RUPYIN, A.RUCKNU, A.RUDMTJ, A.RUFAP, A.RUCRCD, A.RUCRRM, B.CCCRCD, A.RUEDUS, A.RUEDBT, A.RUEDTN
		), PAGING AS
		(
		SELECT
		PaymentID,
		PaymentKey,
		AddressNumber,
		PaymentInstrument,
		PaymentReference,
		PaymentDate,
		PaymentTotal,
		PaymentTotalForeign,
		CurrencyCode,
		CurrencyMode,
		BaseCurrencyCode,
		EdiUserId,
		EdiBatchNumber,
		EdiTransactionNumber,
		InTransit,
		ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM
		FROM CTE
		)
	SELECT
		PaymentID,
		PaymentKey,
		AddressNumber,
		PaymentInstrument,
		[DBO].CMM_GetUserDefinedCodeFnc(''00'', ''PY'', PaymentInstrument, ''*'') AS PaymentInstrumentDesc,
		PaymentReference,
		PaymentDate,
		PaymentTotal,
		PaymentTotalForeign,
		CurrencyCode,
		CurrencyMode,
		BaseCurrencyCode,
		EdiUserId,
		EdiBatchNumber,
		EdiTransactionNumber,
		InTransit,
		(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
	FROM
		PAGING
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))'

	EXECUTE sp_executesql @SQL_DYNAMIC, N'
	@PaymentID				NUMERIC,
	@InvoiceCompany			NVARCHAR(5),
	@InvoiceType			NVARCHAR(2),
	@InvoiceNumber			FLOAT,
	@InvoiceSuffix			NVARCHAR(3),
	@AddressNumber			FLOAT,
	@PaymentReference		NVARCHAR(50),
	@JulianDateFrom			NUMERIC,
	@JulianDateTo			NUMERIC,
	@PageIndex				BIGINT,
	@PageSize				BIGINT,
	@ConstantInstallation	NVARCHAR(3)',
	@PaymentID = @PaymentID,
	@InvoiceCompany = @InvoiceCompany,
	@InvoiceType = @InvoiceType,
	@InvoiceNumber = @InvoiceNumber,
	@InvoiceSuffix = @InvoiceSuffix,
	@AddressNumber = @AddressNumber,
	@PaymentReference = @PaymentReference,
	@JulianDateFrom = @JulianDateFrom,
	@JulianDateTo = @JulianDateTo,
	@PageIndex = @PageIndex,
	@PageSize = @PageSize,
	@ConstantInstallation = @ConstantInstallation

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = N'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoicePayHistList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoicePayHistList
	END
GO
-- #desc						Get the Invoices Payment History Search 
-- #bl_class					Premier.Commerce.InvoicePaymentHistoryList.cs
-- #db_dependencies				COM_InvoicePayHistListVW
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @AddressNumber		Address Number
-- #param @InvoiceNumber		Invoice Number
-- #param @PaymentReference		Payment Reference
-- #param @DueDateFrom			Due Date From
-- #param @DueDateTo			DueDateTo

CREATE PROCEDURE [DBO].COM_GetInvoicePayHistList
	@InstallationID				NVARCHAR(3),
	@InvoiceNumber				FLOAT,
	@AddressNumber				FLOAT,
	@PaymentReference			NVARCHAR(50),
	@DueDateFrom				NUMERIC,
	@DueDateTo					NUMERIC,
	@PageIndex					FLOAT,
    @PageSize					FLOAT
AS

	SET NOCOUNT ON	
	
	--Paging
	DECLARE @ROWSTART INT
	DECLARE @ROWEND INT

	--Dynamic
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @INNER_DYNAMIC NVARCHAR(MAX) = ''

	--Gets the Invoice Document Restrictions
	DECLARE	@InvRestric		NVARCHAR(256)
	DECLARE @InvINID		NVARCHAR(3)
	DECLARE @InvConstant	NVARCHAR(10)
	SET @InvConstant = N'AR_RESTRIC'
	SET @InvINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue @InvConstant, @InvINID OUT, @InvRestric OUT

	-- Gets Account Receivable Installation Companies setting
	DECLARE @CompanyRestric	NVARCHAR(256)
	DECLARE @CompanyINID	NVARCHAR(3)
	SET @CompanyINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue N'INSCOMPANY', @CompanyINID OUT, @CompanyRestric OUT

	CREATE TABLE #TMP_TABLE 
	(
		AddressNumber			FLOAT,
		AlphaName				NVARCHAR(40) collate DATABASE_DEFAULT,
		InvoiceCompany			NVARCHAR(5)  collate DATABASE_DEFAULT,
		InvoiceType				NVARCHAR(2)  collate DATABASE_DEFAULT,
		InvoiceNumber			FLOAT,
		InvoiceSuffix			NVARCHAR(3)  collate DATABASE_DEFAULT,
		InvoiceDate				NUMERIC,
		DueDate					NUMERIC,
		CurrencyCode			NVARCHAR(3)  collate DATABASE_DEFAULT,
		BaseCurrencyCode		NVARCHAR(3) collate DATABASE_DEFAULT,
		CurrencyMode			NVARCHAR(1)  collate DATABASE_DEFAULT,
		CurrencyDesc			NVARCHAR(30) collate DATABASE_DEFAULT,
		GrossAmount				FLOAT,
		OpenAmount				FLOAT,
		PaidAmount				FLOAT,
		InTransitAmount			FLOAT,
		GrossAmountForeign		FLOAT,
		OpenAmountForeign		FLOAT,
		PaidAmountForeign		FLOAT,
		InTransitAmountForeign	FLOAT
	)

	
	------------------------------------------------------
	-- Dynamic query condition
	------------------------------------------------------
	IF (@InvoiceNumber IS NOT NULL)BEGIN
		SET @WHERE_DYNAMIC = N'InvoiceNumber = @InvoiceNumber'
	END

	IF (@AddressNumber IS NOT NULL)	BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'AddressNumber = @AddressNumber'
	END

	IF (@PaymentReference <> N'*' ) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'PaymentReference LIKE ''%'' + @PaymentReference  + ''%'''
	END

	IF	(@DueDateFrom <> 0 ) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'DueDate BETWEEN @DueDateFrom AND @DueDateTo'
	END

	IF (@CompanyRestric = 'L')
	BEGIN
		SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 CR
								ON CICO = RPCO
								AND CI$9INID = @CompanyINID'
	END

	IF (@WHERE_DYNAMIC <> N'')
		SET @WHERE_DYNAMIC = N' WHERE ' + @WHERE_DYNAMIC


	------------------------------------------------------
	-- Dynamic query from
	------------------------------------------------------

	IF (@InvRestric = N'1') BEGIN
		SET @INNER_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 SOR 
									ON SOR.DRKY = InvoiceType
									AND SOR.DR$9INID = @InvINID
									AND SOR.DR$9CNST = @InvConstant'
	END

	------------------------------------------------------
	-- Dynamic query
	------------------------------------------------------

	SET @SQL_DYNAMIC = N'
	INSERT INTO #TMP_TABLE
	(
		AddressNumber,
		AlphaName,
		InvoiceCompany,
		InvoiceType,
		InvoiceNumber,
		InvoiceSuffix,
		InvoiceDate,
		DueDate,
		CurrencyCode,
		BaseCurrencyCode,
		CurrencyMode,
		CurrencyDesc,
		GrossAmount,
		OpenAmount,
		PaidAmount,
		InTransitAmount,
		GrossAmountForeign,
		OpenAmountForeign,
		PaidAmountForeign,
		InTransitAmountForeign
	)	
	SELECT  
		AddressNumber,
		AlphaName,
		InvoiceCompany,
		InvoiceType,
		InvoiceNumber,
		InvoiceSuffix,
		InvoiceDate,
		DueDate,
		CurrencyCode,
		BaseCurrencyCode,	
		CurrencyMode,
		CurrencyDesc,
		GrossAmount,
		OpenAmount,
		SUM(PaidAmount) AS PaidAmount ,
		SUM(InTransitAmount) AS InTransitAmount,
		GrossAmountForeign,
		OpenAmountForeign,
		SUM(PaidAmountForeign) AS PaidAmountForeign,
		SUM(InTransitAmountForeign) AS InTransitAmountForeign
	FROM [DBO].COM_InvoicePayHistListVW VW' +
	@INNER_DYNAMIC + 
	@WHERE_DYNAMIC + '
	GROUP BY AddressNumber, AlphaName, InvoiceCompany, InvoiceType, InvoiceNumber, InvoiceSuffix, InvoiceDate, DueDate, CurrencyCode, 
			BaseCurrencyCode, CurrencyMode, CurrencyDesc, GrossAmount, OpenAmount, GrossAmountForeign, OpenAmountForeign'
	
	EXECUTE sp_executesql @SQL_DYNAMIC, N'
	@InvoiceNumber		FLOAT,
	@AddressNumber		FLOAT,
	@PaymentReference	NVARCHAR(50),
	@DueDateFrom		NUMERIC,
	@DueDateTo			NUMERIC,
	@InvINID			NVARCHAR(3),
	@InvConstant		NVARCHAR(10),
	@CompanyINID	    NVARCHAR(3)',
	@InvoiceNumber = @InvoiceNumber,
	@AddressNumber = @AddressNumber,
	@PaymentReference = @PaymentReference,
	@DueDateFrom = @DueDateFrom,
	@DueDateTo = @DueDateTo,
	@InvINID = @InvINID,
	@InvConstant = @InvConstant,
	@CompanyINID = @CompanyINID

	-------------------------------------------------------
	-- Paging Calculation
	-------------------------------------------------------
	-- Set the first row to be selected
	SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
	-- Set the last row to be selected
	SET @ROWEND = @PageIndex * @PageSize

	;WITH PAGING AS
	(
		SELECT
			 AddressNumber,
			 AlphaName,
			 InvoiceCompany,
			 InvoiceType,
			 InvoiceNumber,
			 InvoiceSuffix,
			 InvoiceDate,
			 DueDate,
			 CurrencyCode,
			 BaseCurrencyCode,	
			 CurrencyMode,
			 CurrencyDesc,
			 GrossAmount,
			 OpenAmount,
			 PaidAmount ,
			 InTransitAmount,
			 GrossAmountForeign,
			 OpenAmountForeign,
			 PaidAmountForeign,
			 InTransitAmountForeign,
			 ROW_NUMBER() OVER (ORDER BY DueDate DESC, InvoiceNumber DESC) AS RNUM
		FROM #TMP_TABLE
	)
	SELECT 
		AddressNumber,
		AlphaName,
		InvoiceCompany,
		InvoiceType,
		InvoiceNumber,
		InvoiceSuffix,
		InvoiceDate,
		DueDate,
		CurrencyCode,
		BaseCurrencyCode,	
		CurrencyMode,
		CurrencyDesc,
		GrossAmount,
		OpenAmount,
		PaidAmount ,
		InTransitAmount,
		GrossAmountForeign,
		OpenAmountForeign,
		PaidAmountForeign,
		InTransitAmountForeign,
		TotalRowCount = (SELECT COUNT(1) FROM PAGING)
	FROM PAGING
	WHERE 
		((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN @ROWSTART AND @ROWEND))

	DROP TABLE #TMP_TABLE
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoicePaymentList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoicePaymentList
	END
GO

-- #desc					Get the Invoice total Open Amount 
-- #bl_class				Premier.Commerce.InvoicePaymentList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @AddressNumber	Address Number
-- #param @InvoiceNumber	Invoice Number
-- #param @OrderNumber		Order Number
-- #param @StatementNumber	Statement Number
-- #param @OpenAmount		Open Amount
-- #param @CurrencyCode		Currency Code
-- #param @InvoiceDateFrom	Invoice Date From
-- #param @InvoiceDateTo	Invoice Date To
-- #param @DueDateFrom		Due Date From
-- #param @DueDateTo		Due Date To
-- #param @Company			Company
-- #param @AllowCreditMemo  Allow Credit Memo
-- #param @SortBy			Sort By Column name
-- #param @SortDir			Sort Dir ASC / DESC
-- #param @PageIndex		Page Index
-- #param @PageSize			Page Size

CREATE PROCEDURE [DBO].COM_GetInvoicePaymentList

	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@InvoiceNumber		FLOAT,
	@OrderNumber		FLOAT,
	@StatementNumber	NVARCHAR(13),
	@OpenAmount			FLOAT,
	@CurrencyCode		NVARCHAR(3),
	@InvoiceDateFrom	NUMERIC,
	@InvoiceDateTo		NUMERIC,
	@DueDateFrom		NUMERIC,
	@DueDateTo			NUMERIC,
	@Company			NVARCHAR(5),
	@AllowCreditMemo	NVARCHAR(1),
	@SortBy				NVARCHAR(20),
	@SortDir			NVARCHAR(1),
	@PageIndex			FLOAT,
    @PageSize			FLOAT
AS
BEGIN	

	/* Dynamic */
	DECLARE @SQL_DYNAMIC 				NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC 				NVARCHAR(MAX) = ''
	DECLARE @WHERE_DYNAMIC_OPENAMOUNT 	NVARCHAR(MAX) = ''
	DECLARE @SORT_DYNAMIC				NVARCHAR(60)
	DECLARE @SORTDIR_DYNAMIC			NVARCHAR(5)
	DECLARE @INNER_DYNAMIC	 			NVARCHAR(MAX) = ''

	/* Gets the Account Receivable Document Restrictions */
	DECLARE	@ArRestric	 NVARCHAR(256)
	DECLARE @ArINID		 NVARCHAR(3)
	DECLARE @ArConstant    NVARCHAR(10)

	SET @ArConstant = 'AR_RESTRIC';
	SET @ArINID = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue @ArConstant, @ArINID out, @ArRestric out

	/* Gets the Sales Order Document Restrictions */
	DECLARE @SOrderRestric   NVARCHAR(256)   
	DECLARE @SOrderINID      NVARCHAR(3) 
	DECLARE @SOrderConstant  NVARCHAR(10) 

	SET @SOrderConstant = 'SO_RESTRIC' 
	SET @SOrderINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID out, @SOrderRestric out
	/*-----------------------------------------------------------------------------*/

	DECLARE @TODAY NUMERIC;
	
	DECLARE @EarlyPayValue 	NVARCHAR(1)   
	DECLARE @EarlyPayINID 	NVARCHAR(3) 
	set @EarlyPayINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INVEARLYPY', @EarlyPayINID, @EarlyPayValue out
	
	DECLARE @DFTLMCU   NVARCHAR(256)   
	DECLARE @SINID      NVARCHAR(3) 
	set @SINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'AR_DFTLMCU', @SINID, @DFTLMCU out
	
	DECLARE @CompanyConstant		NVARCHAR(256)

	DECLARE @MCMCU NVARCHAR(12) 

	SET @MCMCU  = @DFTLMCU;

	IF @CurrencyCode = ''
	BEGIN
		SET @CurrencyCode  = (SELECT TOP 1 A.CCCRCD FROM [SCDATA].F0010 A
								INNER JOIN [SCDATA].F0006 B
									ON B.MCMCU = @MCMCU
								WHERE A.CCCO = B.MCCO)
	END
	
	DECLARE @AccountingComp NVARCHAR(5)
	
	SET @AccountingComp = (SELECT TOP 1 MCCO FROM [SCDATA].F0006
							WHERE MCMCU = @MCMCU)
	
	/* Dynamic sort direction statement */
    SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

    /* Dynamic sort statement */
    SET @SORT_DYNAMIC = CASE @SortBy 
        WHEN 'Company' THEN 'Company' + @SORTDIR_DYNAMIC
        WHEN 'InvoiceNumber' THEN 'InvoiceNumber' + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN 'OrderNumber' THEN 'OrderNumber' + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN 'InvoiceDate' THEN 'InvoiceDate' + @SORTDIR_DYNAMIC + ', InvoiceNumber' + @SORTDIR_DYNAMIC
        WHEN 'DueDate' THEN 'DueDate' + @SORTDIR_DYNAMIC + ', InvoiceNumber' + @SORTDIR_DYNAMIC
        WHEN 'StatementNumber' THEN 'StatementNumber' + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN 'OpenAmount' THEN CASE @EarlyPayValue WHEN 'Y' THEN 'OpenAmountDiscounted' ELSE 'OpenAmount' END + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN 'GrossAmount' THEN 'GrossAmount' + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        ELSE 'DueDate ASC, InvoiceNumber ASC'
    END
	
				
	/* Dynamic query conditions */
	IF (@AddressNumber IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC = N'A.RPAN8 = @AddressNumber'
	END 
	IF (@InvoiceNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END
		SET @WHERE_DYNAMIC += N'A.RPDOC = @InvoiceNumber'
	END
	
	IF (@InvoiceDateFrom IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END
		SET @WHERE_DYNAMIC += N'A.RPDIVJ >= @InvoiceDateFrom'
	END
	
	IF (@InvoiceDateTo IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END
		SET @WHERE_DYNAMIC += N'A.RPDIVJ <= @InvoiceDateTo'
	END

	IF (@OrderNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END
		SET @WHERE_DYNAMIC += N'A.RPSDOC = @OrderNumber'
	END
	
	IF (@DueDateFrom IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END
		SET @WHERE_DYNAMIC += N'A.RPDDJ >= @DueDateFrom'
	END
	
	IF (@DueDateTo IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END
		SET @WHERE_DYNAMIC += N'A.RPDDJ <= @DueDateTo'
	END
	IF (@StatementNumber <> '*') BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END
		SET @WHERE_DYNAMIC += N'A.RPCTL LIKE ''%'' + @StatementNumber + ''%'''
	END

	IF (@Company <> N'*' AND @Company <> N'00000') BEGIN
		IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
		END 
		SET @WHERE_DYNAMIC += N' A.RPCO = @Company';
	END
	ELSE
	BEGIN
		SET @SINID = @InstallationID
		EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @SINID OUT, @CompanyConstant OUT
		IF (@CompanyConstant = 'L') BEGIN
			SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 CR
							 ON CR.CICO = Company
							 AND CR.CI$9INID = @SINID '
		END
	END

	IF (@WHERE_DYNAMIC <> N'') BEGIN
			SET @WHERE_DYNAMIC += N' AND '
	END
	SET @WHERE_DYNAMIC += N' A.RPCRCD = @CurrencyCode';

	IF (@ArRestric = N'1' ) BEGIN
		SET @INNER_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 DR
									ON DR.DR$9INID = @ArINID
									AND DR.DR$9CNST = @ArConstant
									AND DR.DRKY = InvoiceType '
	END

	/* Apply early payment discounts */
	IF (@EarlyPayValue = 'Y') BEGIN
		SET @Today = [DBO].CMM_GetCurrentJulianDate (GETDATE());

		/*Credit Memo*/
		IF (@AllowCreditMemo = 'Y') BEGIN
			SET @WHERE_DYNAMIC_OPENAMOUNT = N'((A.GrossAmount < 0 AND A.OpenAmount < 0 ) OR  A.OpenAmount > 0)';
		END
		ELSE BEGIN
			SET @WHERE_DYNAMIC_OPENAMOUNT = N' (A.OpenAmountDiscounted > 0.01) ';
		END

		IF (@OpenAmount IS NOT NULL) BEGIN
			SET @WHERE_DYNAMIC_OPENAMOUNT += N' AND A.OpenAmountDiscounted >= @OpenAmount';
		END

		SET @SQL_DYNAMIC = N'
		;WITH CTE AS (
			SELECT	
				A.RPKCO			AS	InvoiceCompany,
				A.RPDOC			AS	InvoiceNumber,
				A.RPDCT			AS	InvoiceType,
				A.RPDIVJ		AS	InvoiceDate,
				A.RPSKCO		AS  OrderCompany,
				A.RPSDOC		AS	OrderNumber,
				A.RPSDCT		AS	OrderType,
				A.RPDDJ			AS	DueDate,
				A.RPVR01		AS	ReferenceNumber,
				A.RPCTL			AS  StatementNumber,
				A.RPAG						 AS  GrossAmount,   
				(A.RPAAP - ISNULL(C.RUAG,0)) AS  OpenAmount,
				A.RPACR 					 AS  GrossAmountForeign,   
				(A.RPFAP - ISNULL(C.RUAG,0)) AS  OpenAmountForeign,
				(CASE WHEN A.RPDDNJ >= @Today THEN (A.RPAAP - ISNULL(C.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - ISNULL(C.RUAG,0)) END) AS OpenAmountDiscounted,
				(CASE WHEN A.RPDDNJ >= @Today THEN (A.RPFAP - ISNULL(C.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - ISNULL(C.RUAG,0)) END) AS OpenAmountDiscountedForeign, 
				A.RPDDNJ		AS DiscountDueDate,
				A.RPSFX			AS DocumentSuffix,
				A.RPCRCD		AS CurrencyCode, 
				D.CVDL01		AS CurrencyDesc,
				A.RPCRRM		AS CurrencyMode,
				A.RPCO			AS Company,
				A.RPAN8 AS AddressNumber,
				AB.ABALPH AS AlphaName,
				A.RPEXR1 AS TaxExplanationCode
			FROM 	[SCDATA].F03B11 A	 			/*INVOICE*/
			LEFT OUTER JOIN 
				(SELECT 
					RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
				 FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('''', ''E'') 
				 GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS C	/* ELECTRONIC RECEIPTS INPUT*/
						   ON  A.RPAN8 = RUAN8				  
						   AND A.RPDOC = RUDOC
						   AND A.RPDCT = RUDCT
						   AND A.RPKCO = RUKCO
						   AND A.RPSFX = RUSFX
			LEFT OUTER JOIN [SCDATA].F0013 D			/*CURRENCY CODES*/
				ON D.CVCRCD = A.RPCRCD
			INNER JOIN  [SCDATA].F0101 AB			/*Address Book Master Table*/
				ON AB.ABAN8 = A.RPAN8  
			WHERE ' + @WHERE_DYNAMIC + ' 
		)
		SELECT 
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.InvoiceDate,
			A.OrderCompany,
			A.OrderNumber,
			A.OrderType,
			A.DueDate,
			A.ReferenceNumber,
			A.StatementNumber,
			A.GrossAmount,   
			A.OpenAmount,
			A.GrossAmountForeign,   
			A.OpenAmountForeign,
			(CASE WHEN A.GrossAmount > 0 AND A.OpenAmountDiscounted > 0 THEN A.OpenAmountDiscounted ELSE 0 END) AS OpenAmountDiscounted,
			(CASE WHEN A.GrossAmountForeign > 0 AND A.OpenAmountDiscountedForeign > 0 THEN A.OpenAmountDiscountedForeign ELSE 0 END) AS OpenAmountDiscountedForeign,
			A.DiscountDueDate,
			A.DocumentSuffix,
			A.CurrencyCode, 
			A.CurrencyDesc,
			A.CurrencyMode,
			A.Company,
			E.CCNAME        AS CompanyName,
			A.AddressNumber,
			A.AlphaName, 
			@AccountingComp AS AccountingCompany,
			A.TaxExplanationCode
			INTO #TMP_TABLE
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].F0010 E			/*CompanyName*/
			ON E.CCCO = A.Company
		WHERE ' + @WHERE_DYNAMIC_OPENAMOUNT ;
	END
	/* Do not apply early payment discounts */
	ELSE BEGIN
		IF (@OpenAmount IS NOT NULL) BEGIN
			IF (@WHERE_DYNAMIC <> N'') BEGIN
				SET @WHERE_DYNAMIC += N' AND '
			END 
			SET @WHERE_DYNAMIC += N'(A.RPAAP - ISNULL(C.RUAG,0)) >= @OpenAmount';
		END

		/*Credit Memo*/
		IF (@AllowCreditMemo = 'Y') BEGIN
			SET @WHERE_DYNAMIC += N' AND ((A.RPAAP - ISNULL(C.RUAG,0)) <> 0) ';
		END
		ELSE BEGIN
			SET @WHERE_DYNAMIC += N' AND ((A.RPAAP - ISNULL(C.RUAG,0)) > 0.01) ';
		END

		SET @SQL_DYNAMIC = N'
		SELECT	
				A.RPKCO			AS	InvoiceCompany,
				A.RPDOC			AS	InvoiceNumber,
				A.RPDCT			AS	InvoiceType,
				A.RPDIVJ		AS	InvoiceDate,
				A.RPSKCO		AS  OrderCompany,
				A.RPSDOC		AS	OrderNumber,
				A.RPSDCT		AS	OrderType,
				A.RPDDJ			AS	DueDate,
				A.RPVR01		AS	ReferenceNumber,
				A.RPCTL			AS  StatementNumber,
				A.RPAG						 AS  GrossAmount,   
				(A.RPAAP - ISNULL(C.RUAG,0)) AS  OpenAmount,
				A.RPACR 					 AS  GrossAmountForeign,   
				(A.RPFAP - ISNULL(C.RUAG,0)) AS  OpenAmountForeign,
				0 AS OpenAmountDiscounted,
				0 AS OpenAmountDiscountedForeign,
				0 AS DiscountDueDate,
				A.RPSFX			AS DocumentSuffix,
				A.RPCRCD		AS CurrencyCode, 
				D.CVDL01		AS CurrencyDesc,
				A.RPCRRM		AS CurrencyMode,
				A.RPCO			AS Company,
				E.CCNAME        AS CompanyName,
				A.RPAN8 AS AddressNumber,
				AB.ABALPH AS AlphaName, 
				@AccountingComp AS AccountingCompany,
				A.RPEXR1 AS TaxExplanationCode
		INTO #TMP_TABLE
		FROM 	[SCDATA].F03B11 A	 			/*INVOICE*/
		LEFT OUTER JOIN 
				(SELECT 
					RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
				 FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('''', ''E'') 
				 GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS C	/* ELECTRONIC RECEIPTS INPUT*/
						   ON  A.RPAN8 = RUAN8				  
						   AND A.RPDOC = RUDOC
						   AND A.RPDCT = RUDCT
						   AND A.RPKCO = RUKCO
						   AND A.RPSFX = RUSFX
		LEFT OUTER JOIN [SCDATA].F0013 D			/*CURRENCY CODES*/
			ON D.CVCRCD = A.RPCRCD
		LEFT OUTER JOIN [SCDATA].F0010 E			/*CompanyName*/
			ON E.CCCO = A.RPCO
		INNER JOIN  [SCDATA].F0101 AB			/*Address Book Master Table*/
			ON AB.ABAN8 = A.RPAN8  
		WHERE ' + @WHERE_DYNAMIC;
	END
	/* Dynamic query */

	SET @SQL_DYNAMIC += N'
	
	;WITH PAGING AS
	(
	SELECT		
		InvoiceCompany,
		InvoiceNumber,
		InvoiceType,
		InvoiceDate,
		OrderCompany,
		OrderNumber,
		OrderType,
		DueDate,
		ReferenceNumber,
		StatementNumber,
		GrossAmount,
		OpenAmount,
		GrossAmountForeign,
		OpenAmountForeign,
		OpenAmountDiscounted,
		OpenAmountDiscountedForeign, 
		DiscountDueDate,
		DocumentSuffix,
		CurrencyCode,
		CurrencyDesc,
		CurrencyMode,
		Company,
		CompanyName,
		AddressNumber,
		AlphaName,
		AccountingCompany,
		TaxExplanationCode,
		ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM
	FROM #TMP_TABLE '
	+ @INNER_DYNAMIC + '
	)
	SELECT 
		InvoiceCompany,
		InvoiceNumber,
		InvoiceType,
		InvoiceDate,
		OrderCompany,
		OrderNumber,
		OrderType,
		DueDate,
		ReferenceNumber,
		StatementNumber,
		GrossAmount,
		OpenAmount,
		GrossAmountForeign,
		OpenAmountForeign,
		OpenAmountDiscounted,
		OpenAmountDiscountedForeign, 
		DiscountDueDate,
		DocumentSuffix,
		CurrencyCode,
		CurrencyDesc,
		CurrencyMode,
		Company,
		CompanyName,
		(CASE WHEN @SOrderRestric= ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS ISORDERRESTRICTED,
		AddressNumber,
		AlphaName,
		AccountingCompany,
		TaxExplanationCode,
		(SELECT COUNT(1) FROM [SCDATA].FQ670314 A WHERE A.PDDOC = InvoiceNumber AND A.PDDCT = InvoiceType AND A.PDKCO = InvoiceCompany AND A.PDSFX = DocumentSuffix) AS ScheduledPayment,
		TotalRowCount = (SELECT COUNT(1) FROM PAGING)
	FROM PAGING
	LEFT OUTER JOIN [SCDATA].FQ67008 DR
		ON DR.DRKY = OrderType
		AND DR.DR$9INID = @SOrderINID
		AND DR.DR$9CNST = @SOrderConstant
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR ( RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) ';

	EXECUTE sp_executesql @SQL_DYNAMIC, N'
	@AddressNumber		FLOAT,
	@InvoiceNumber		FLOAT,
	@InvoiceDateFrom	NUMERIC,
	@InvoiceDateTo		NUMERIC,
	@OrderNumber		FLOAT,
	@DueDateFrom		NUMERIC,
	@DueDateTo			NUMERIC,
	@StatementNumber	NVARCHAR(13),
	@CompanyConstant	NVARCHAR(256),
	@SINID				NVARCHAR(3),
	@OpenAmount			FLOAT,
	@CurrencyCode		NVARCHAR(3),
	@ArINID				NVARCHAR(3),
	@ArConstant			NVARCHAR(10),
	@ArRestric			NVARCHAR(256),
	@SOrderINID			NVARCHAR(3),
	@SOrderConstant		NVARCHAR(10),
	@SOrderRestric		NVARCHAR(256),
	@AccountingComp		NVARCHAR(5),
	@Company			NVARCHAR(5),
	@PageIndex			FLOAT, 
	@PageSize			FLOAT,
	@Today				NUMERIC',
	@AddressNumber = @AddressNumber,
	@InvoiceNumber = @InvoiceNumber,
	@InvoiceDateFrom = @InvoiceDateFrom, 
	@InvoiceDateTo = @InvoiceDateTo,	
	@OrderNumber = @OrderNumber,
	@DueDateFrom = @DueDateFrom, 
	@DueDateTo = @DueDateTo,
	@StatementNumber = @StatementNumber,
	@CompanyConstant = @CompanyConstant,
	@SINID = @SINID,
	@OpenAmount = @OpenAmount,
	@CurrencyCode = @CurrencyCode,
	@ArINID = @ArINID,
	@ArConstant = @ArConstant,
	@ArRestric = @ArRestric,
	@SOrderINID = @SOrderINID,
	@SOrderConstant = @SOrderConstant,
	@SOrderRestric = @SOrderRestric,
	@AccountingComp	= @AccountingComp,
	@Company = @Company,
	@PageIndex = @PageIndex, 
	@PageSize = @PageSize,
	@Today = @Today


END

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoiceRecentList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoiceRecentList
	END
GO

-- #desc						Returns the last @InvoicesToDisplay most recent invoices
-- #bl_class					Premier.Commerce.InvoiceRecentList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId				Store Id
-- #param @AddressNumber		Address Number
-- #param @Company				Company 
-- #param @InvoicesToDisplay	Quantity of rows to be returned
-- #param @LastDays				Filter orders in last 0 or N days

CREATE PROCEDURE [DBO].COM_GetInvoiceRecentList
	@StoreId					NVARCHAR(3),
	@AddressNumber				FLOAT,
	@Company					NVARCHAR(5),
	@InvoicesToDisplay			INT,
	@LastDays					INT	
AS

	/* Gets the Invoice Document Restrictions Parameters*/
	DECLARE	@InvRestric		NVARCHAR(1)
	DECLARE @InvINID		NVARCHAR(3)
	DECLARE @InvConstant    NVARCHAR(10)
	SET @InvConstant = 'AR_RESTRIC';
	SET @InvINID = @StoreId;
	EXEC [DBO].CMM_GetConstantValue @InvConstant, @InvINID out, @InvRestric out
	
	/* Read Account Receivable company constant */
	DECLARE @CompanyConstant	NVARCHAR(1)
	DECLARE @ConstantStore		NVARCHAR(3)

	SET @ConstantStore = @StoreId
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantStore OUT, @CompanyConstant OUT	

	DECLARE @EarlyPayValue 	NVARCHAR(1)   
	EXEC [DBO].CMM_GetConstantValue 'INVEARLYPY', @StoreId, @EarlyPayValue out


	/* Today */
	DECLARE @TODAY NUMERIC;
	SET @Today = [DBO].CMM_GetCurrentJulianDate (GETDATE());

	IF (@InvoicesToDisplay > 0)
	BEGIN
		SET ROWCOUNT @InvoicesToDisplay
	END

	IF (@Company = '00000')
	BEGIN
		SET @Company = '*'
	END


	/* Do not filter by N days */
	IF(@LastDays = 0) BEGIN 
		IF(@EarlyPayValue = 'Y') BEGIN 
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,	
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - ISNULL(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - ISNULL(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				A.RPDDNJ		                    AS DiscountDueDate,
				SUM((CASE WHEN A.RPDDNJ >= @Today THEN (A.RPAAP - ISNULL(E.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - ISNULL(E.RUAG,0)) END)) AS OpenAmountDiscounted,
				SUM((CASE WHEN A.RPDDNJ >= @Today THEN (A.RPFAP - ISNULL(E.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - ISNULL(E.RUAG,0)) END)) AS OpenAmountDiscountedForeign
			
			FROM [SCDATA].F03B11 A 						/*Invoice Table*/
			LEFT OUTER JOIN [SCDATA].F0013 AS C			/*Currency Master*/
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 D				/* Base Currency */
				ON D.CVCRCD = A.RPBCRC		
			LEFT OUTER JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
						FROM [SCDATA].F03B13Z1 
						WHERE RUEUPS IN ('', 'E') 
						GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT*/
				ON  A.RPAN8 = E.RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = @ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = @InvINID 
				AND DR.DR$9CNST = @InvConstant
				AND DR.DRKY = A.RPDCT
			WHERE A.RPAN8 = @AddressNumber	
				AND	(A.RPCO = @Company OR (@Company = '*' AND ( @CompanyConstant = 'A' OR CICO IS NOT NULL )) )
				AND (@InvRestric = '0' OR DR.DRKY IS NOT NULL)			/*INVOICE NOT RESTRICTED*/
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC, A.RPDDNJ 
			ORDER BY RPDIVJ DESC, RPDOC DESC
	
			SET ROWCOUNT 0
		END
		
		ELSE BEGIN
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,	
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - ISNULL(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - ISNULL(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				0									AS DiscountDueDate,
				0									AS OpenAmountDiscounted,
				0									AS OpenAmountDiscountedForeign
			
			FROM [SCDATA].F03B11 A 						/*Invoice Table*/
			LEFT OUTER JOIN [SCDATA].F0013 AS C			/*Currency Master*/
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 D				/* Base Currency */
				ON D.CVCRCD = A.RPBCRC		
			LEFT OUTER JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
						FROM [SCDATA].F03B13Z1 
						WHERE RUEUPS IN ('', 'E') 
						GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT*/
				ON  A.RPAN8 = E.RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = @ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = @InvINID 
				AND DR.DR$9CNST = @InvConstant
				AND DR.DRKY = A.RPDCT
			WHERE A.RPAN8 = @AddressNumber	
				AND	(A.RPCO = @Company OR (@Company = '*' AND ( @CompanyConstant = 'A' OR CICO IS NOT NULL )) )
				AND (@InvRestric = '0' OR DR.DRKY IS NOT NULL)			/*INVOICE NOT RESTRICTED*/
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC
			ORDER BY RPDIVJ DESC, RPDOC DESC
	
			SET ROWCOUNT 0
		END

	END
	/* Filter last N days */
	ELSE BEGIN
		DECLARE @DateFrom NUMERIC;
		DECLARE @DateTo NUMERIC;
		SET @DateFrom = [DBO].CMM_GetCurrentJulianDate (DATEADD(DAY, - @LastDays, GETDATE()));
		SET @DateTo = [DBO].CMM_GetCurrentJulianDate (GETDATE());
		IF(@EarlyPayValue = 'Y') BEGIN
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,	
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - ISNULL(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - ISNULL(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				A.RPDDNJ		                    AS DiscountDueDate,
				SUM((CASE WHEN A.RPDDNJ >= @Today THEN (A.RPAAP - ISNULL(E.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - ISNULL(E.RUAG,0)) END)) AS OpenAmountDiscounted,
				SUM((CASE WHEN A.RPDDNJ >= @Today THEN (A.RPFAP - ISNULL(E.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - ISNULL(E.RUAG,0)) END)) AS OpenAmountDiscountedForeign 
				
			FROM [SCDATA].F03B11 A 						/*Invoice table*/
			LEFT OUTER JOIN [SCDATA].F0013 AS C			/*Currency Master*/
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 D				/* Base currency */
				ON D.CVCRCD = A.RPBCRC		
			LEFT OUTER JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
						FROM [SCDATA].F03B13Z1 
						WHERE RUEUPS IN ('', 'E') 
						GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT*/
				ON  A.RPAN8 = E.RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = @ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = @InvINID 
				AND DR.DR$9CNST = @InvConstant
				AND DR.DRKY = A.RPDCT
			WHERE A.RPAN8 = @AddressNumber	
				AND	(A.RPCO = @Company OR (@Company = '*' AND ( @CompanyConstant = 'A' OR CICO IS NOT NULL )) )
				AND (@InvRestric = '0' OR DR.DRKY IS NOT NULL)			/*INVOICE NOT RESTRICTED*/
				AND A.RPDIVJ BETWEEN @DateFrom AND @DateTo				/* Filter last N days */
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC, A.RPDDNJ
			ORDER BY RPDIVJ DESC, RPDOC DESC
	
			SET ROWCOUNT 0
		END
		ELSE BEGIN 
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,	
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - ISNULL(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - ISNULL(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				0									AS DiscountDueDate,
				0									AS OpenAmountDiscounted,
				0									AS OpenAmountDiscountedForeign 
				
			FROM [SCDATA].F03B11 A 						/*Invoice table*/
			LEFT OUTER JOIN [SCDATA].F0013 AS C			/*Currency Master*/
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 D				/* Base currency */
				ON D.CVCRCD = A.RPBCRC		
			LEFT OUTER JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
						FROM [SCDATA].F03B13Z1 
						WHERE RUEUPS IN ('', 'E') 
						GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT*/
				ON  A.RPAN8 = E.RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = @ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = @InvINID 
				AND DR.DR$9CNST = @InvConstant
				AND DR.DRKY = A.RPDCT
			WHERE A.RPAN8 = @AddressNumber	
				AND	(A.RPCO = @Company OR (@Company = '*' AND ( @CompanyConstant = 'A' OR CICO IS NOT NULL )) )
				AND (@InvRestric = '0' OR DR.DRKY IS NOT NULL)			/*INVOICE NOT RESTRICTED*/
				AND A.RPDIVJ BETWEEN @DateFrom AND @DateTo				/* Filter last N days */
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC
			ORDER BY RPDIVJ DESC, RPDOC DESC
	
			SET ROWCOUNT 0
		END
	END;
GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetInvoiceSearchList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetInvoiceSearchList
	END
GO

-- #desc						Search for invoice summarized
-- #bl_class					Premier.Commerce.InvoiceSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @InvoiceNumber		Invoice Number			
-- #param @OrderNumber			OrderNumber	
-- #param @AddressNumber		Address Number
-- #param @ReferenceNumber		Reference Number	
-- #param @JulianDateFrom		JulianDate From
-- #param @JulianDateTo			JulianDate To
-- #param @AllOpenInvoice		All Open Invoice
-- #param @SortBy				Sort By Column name
-- #param @SortDir				Sort Dir ASC / DESC
-- #param @PageSize				Page Size
-- #param @PageIndex			Page Index

/* Open Amount Calculation doesn't consider Allow Foreign OFF mode.
 * This means that Domestic Open Amount will reflect payments stored 
 * in F03B13Z1 that  are always in Foreign currency
 */

CREATE PROCEDURE [DBO].COM_GetInvoiceSearchList
	@InstallationID				NVARCHAR(3),
	@AddressNumber				FLOAT,
	@InvoiceNumber				FLOAT,
	@OrderNumber				FLOAT,
	@ReferenceNumber			NVARCHAR(25),
	@JulianDateFrom				NUMERIC,
	@JulianDateTo				NUMERIC,
	@AllOpenInvoice				NVARCHAR(1),
	@SortBy						NVARCHAR(20),
	@SortDir					NVARCHAR(1),
	@PageIndex					FLOAT,
    @PageSize					FLOAT
AS

BEGIN
	/* Dynamic */
	DECLARE @SQL_DYNAMIC				NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC				NVARCHAR(MAX) = ''
	DECLARE @OPENINVOICES_WHERE_DYNAMIC	NVARCHAR(MAX) = ''
	DECLARE @SORT_DYNAMIC				NVARCHAR(130)
	DECLARE @SORTDIR_DYNAMIC			NVARCHAR(5)
	DECLARE @INNER_DYNAMIC NVARCHAR(MAX) = ''

	/* Gets the Invoice Document Restrictions Parameters*/
	DECLARE	@InvRestric		NVARCHAR(256)
	DECLARE @InvINID		NVARCHAR(3)
	DECLARE @InvConstant    NVARCHAR(10)
	SET @InvConstant = 'AR_RESTRIC';
	SET @InvINID = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue @InvConstant, @InvINID out, @InvRestric out

	/* Gets the Sales Order Document Restrictions Parameters */
	DECLARE @SORestric  NVARCHAR(256)   
	DECLARE @SOINID		NVARCHAR(3) 
	DECLARE @SOConstant	NVARCHAR(10)  
	SET @SOConstant = 'SO_RESTRIC' 
	SET @SOINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue @SOConstant, @SOINID out, @SORestric out
	
	/* Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	
	
	/* Read Foreign Setting */
	DECLARE @FRINID		NVARCHAR(3) 
	DECLARE @FRConstant	NVARCHAR(10)  
	SET @FRINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'FOREGCURYN', @FRINID, @FRConstant OUT

	/* Dynamic sort direction statement */
    SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

    /* Dynamic sort statement */
    SET @SORT_DYNAMIC = CASE 
        WHEN @SortBy = 'InvoiceNumber' THEN 'InvoiceNumber' +	@SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN @SortBy = 'InvoiceDate' THEN 'InvoiceDate' + @SORTDIR_DYNAMIC + ', InvoiceNumber' + @SORTDIR_DYNAMIC
        WHEN @SortBy = 'OrderNumber' THEN 'OrderNumber' +	@SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN @SortBy = 'CustomerReference' THEN 'YourReference' +	@SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN @SortBy = 'OpenAmount' THEN '(CASE WHEN (CurrencyMode = ''F'' AND @FRConstant = ''Y'') THEN OpenAmountForeign ELSE OpenAmount END)' + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN @SortBy = 'GrossAmount' THEN '(CASE WHEN (CurrencyMode = ''F'' AND @FRConstant = ''Y'') THEN GrossAmountForeign ELSE GrossAmount END)' + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        WHEN @SortBy = 'CurrencyCode' THEN 'CurrencyCode' + @SORTDIR_DYNAMIC + ', InvoiceDate DESC'
        ELSE 'InvoiceDate DESC, InvoiceNumber DESC'
    END

	IF (@InvoiceNumber IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC += N' AND A.RPDOC = @InvoiceNumber'
	END
	IF (@JulianDateFrom > 0 AND @JulianDateTo > 0) BEGIN
		SET @WHERE_DYNAMIC += N' AND (A.RPDIVJ >= @JulianDateFrom AND A.RPDIVJ <= @JulianDateTo ) '
	END
	IF (@OrderNumber IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC += N' AND A.RPSDOC = @OrderNumber'
	END
	IF (@ReferenceNumber <> '*') BEGIN
	  SET @WHERE_DYNAMIC += N' AND LTRIM(RTRIM(A.RPVR01)) like ''%'' + @ReferenceNumber+ ''%'''
	END
	
	IF (@CompanyConstant = 'L')
	BEGIN
		SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 CR
								ON CI$9INID = @ConstantInstallation
								AND CICO = RPCO '
	END

	IF (@InvRestric = N'1' ) BEGIN
		SET @INNER_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 DR
									ON DR.DR$9INID = @InvINID 
									AND DR.DR$9CNST = @InvConstant
									AND DR.DRKY = InvoiceType'
	END
	
	IF(@AllOpenInvoice IS NULL)
		SET @AllOpenInvoice = '0';
	/* Gets open invoices */	
	IF(@AllOpenInvoice = '1') BEGIN
		SET @OPENINVOICES_WHERE_DYNAMIC += N' WHERE ((CurrencyMode = ''D'' OR CurrencyMode = '''' OR CurrencyMode IS NULL) AND OpenAmount > 0) 
													OR (CurrencyMode = ''F'' AND OpenAmountForeign > 0) '
	END
	
	/* Dynamic query */
	SET @SQL_DYNAMIC = N'	
	WITH CTE AS
(
			SELECT 
				A.RPAN8			AS AddressNumber,	
				A.RPKCO			AS InvoiceCompany ,	
				A.RPDCT			AS InvoiceType ,	
				A.RPDOC			AS InvoiceNumber,	
				A.RPDIVJ		AS InvoiceDate,
				A.RPSKCO		AS OrderCompany,
				A.RPSDCT		AS OrderType ,
				A.RPSDOC		AS OrderNumber,
				A.RPVR01		AS YourReference,
				A.RPCRCD		AS CurrencyCode,
				A.RPCRRM		AS CurrencyMode,
				C.CVDL01		AS CurrencyDesc,
				SUM(A.RPAG)		AS GrossAmount,
				SUM(A.RPAAP - ISNULL(E.RUAG, 0))	AS OpenAmount ,
				SUM(A.RPACR)	AS GrossAmountForeign,
				SUM(A.RPFAP - ISNULL(E.RUAG, 0))	AS OpenAmountForeign,
				''''				AS DocumentSuffix,
		 		A.RPBCRC		AS BaseCurrencyCode,
				D.CVDL01		AS BaseCurrencyDesc,
				A.RPCO
			FROM 	[SCDATA].F03B11 A 					/*Invoice table*/
				LEFT OUTER JOIN [SCDATA].F0013 AS C			/*Currency Master*/
					ON A.RPCRCD = C.CVCRCD
				LEFT OUTER JOIN [SCDATA].F0013 D
					ON A.RPBCRC = D.CVCRCD
				LEFT JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('''', ''E'') GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT*/
					ON  A.RPAN8 = E.RUAN8				  
					AND A.RPDOC = E.RUDOC
					AND A.RPDCT = E.RUDCT
					AND A.RPKCO = E.RUKCO
					AND A.RPSFX = E.RUSFX
			 WHERE A.RPAN8 = @AddressNumber	
				' + @WHERE_DYNAMIC + '
			GROUP BY A.RPAN8, A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPSKCO, A.RPSDCT, A.RPSDOC, A.RPVR01,
				A.RPCRCD, A.RPCRRM, C.CVDL01, A.RPBCRC, D.CVDL01,RPCO
), PAGING AS
(
SELECT 		
		AddressNumber,	
		InvoiceCompany,	
		InvoiceType ,	
		InvoiceNumber,	
		InvoiceDate,
		OrderCompany,
		OrderType ,
		OrderNumber,
		YourReference,
		CurrencyCode,
		CurrencyMode,
		CurrencyDesc,
		GrossAmount,
		OpenAmount ,
		GrossAmountForeign,
		OpenAmountForeign,
		DocumentSuffix,
		BaseCurrencyCode,
		BaseCurrencyDesc,
		ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM
FROM 
	CTE '
+ @INNER_DYNAMIC + 
+ @OPENINVOICES_WHERE_DYNAMIC + '
	)			
	SELECT 
		 AddressNumber,	
		 InvoiceCompany,	
		 InvoiceType ,	
		 InvoiceNumber,	
		 InvoiceDate,
		 OrderCompany,
		 OrderType ,
		 OrderNumber,
		 YourReference,
		 CurrencyCode,
		 CurrencyMode,
		 CurrencyDesc,
		 GrossAmount,
		 OpenAmount ,
		 GrossAmountForeign,
		 OpenAmountForeign,
		 DocumentSuffix,
		 (CASE WHEN @SORestric= ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS ISORDERRESTRICTED,
		 BaseCurrencyCode,
		 BaseCurrencyDesc,
		 (SELECT COUNT(1) FROM [SCDATA].FQ670314 WHERE PDDOC = InvoiceNumber AND PDDCT = InvoiceType AND PDKCO = InvoiceCompany) AS ScheduledPayment,
		(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
	FROM 
		PAGING
	LEFT OUTER JOIN [SCDATA].FQ67008	DR
		ON DR.DR$9INID = @SOINID
		AND DR.DR$9CNST = @SOConstant
		AND DR.DRKY = OrderType 
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR ( RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))'


	EXECUTE sp_executesql @SQL_DYNAMIC, N'
	@AddressNumber		FLOAT,
	@InvoiceNumber		FLOAT,
	@JulianDateFrom		NUMERIC,
	@JulianDateTo		NUMERIC,
	@OrderNumber		FLOAT,
	@ReferenceNumber	NVARCHAR(25),
	@ConstantInstallation	NVARCHAR(3),
	@SOINID				NVARCHAR(3),
	@SOConstant			NVARCHAR(10),
	@SORestric			NVARCHAR(256),
	@InvINID			NVARCHAR(3),
	@InvConstant		NVARCHAR(10),
	@InvRestric			NVARCHAR(256),
	@FRConstant			NVARCHAR(10),
	@PageIndex			FLOAT, 
	@PageSize			FLOAT',
	@AddressNumber = @AddressNumber,
	@InvoiceNumber = @InvoiceNumber,
	@JulianDateFrom = @JulianDateFrom,
	@JulianDateTo = @JulianDateTo,
	@OrderNumber = @OrderNumber,
	@ReferenceNumber = @ReferenceNumber,
	@ConstantInstallation = @ConstantInstallation,
	@SOINID	= @SOINID,
	@SOConstant = @SOConstant,
	@SORestric = @SORestric,
	@InvINID = @InvINID,
	@InvConstant = @InvConstant,
	@InvRestric	= @InvRestric,
	@FRConstant = @FRConstant,
	@PageIndex = @PageIndex, 
	@PageSize = @PageSize
		
END

GO



IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetLinePriceHistoryList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetLinePriceHistoryList
	END

GO

-- #desc					Load the Line Price History from DB
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- param @ComputerID		Computer ID
-- param @JobNumber			Job Number
-- param @ProcessID			Process ID
-- param @TransactionID		Transaction ID
-- param @LineNumber		Line Number
-- param @PriceAdjRevLevel	Current PriceAdjRevLevel to search for(edit Line Value)

CREATE PROCEDURE [DBO].COM_GetLinePriceHistoryList
	@ComputerID	NVARCHAR(30),
	@JobNumber FLOAT,
	@ProcessID FLOAT,
	@TransactionID FLOAT,
	@LineNumber  FLOAT,
	@PriceAdjRevLevel FLOAT
AS

DECLARE	@MaxAdjRevLevel	FLOAT

SELECT @MaxAdjRevLevel = MAX ( AWAREV )
FROM [SCDATA].F40UI74
	WHERE 
		AWCTID = @ComputerID AND 
		AWJOBS = @JobNumber AND
		AWPEID = @ProcessID AND
		AWTCID = @TransactionID AND
		AWLNID = @LineNumber

SELECT 
		AWCTID ComputerID ,
		AWJOBS JobNumber ,
		AWPEID ProcessID,
		AWTCID TransactionID,
		AWXLIN LineNumber2,
		AWAREV AdjustmentRevisionLevel,
		AWDOCO OrderNumber,
		AWDCTO OrderType,
		AWKCOO OrderCompany,
		' ' AS OrderSuffix, --AWSFXO
		AWLNID LineNumber,
		--AWAKID PriceHistoryAltKey,
		--AWSRCFD PriceHistoryAltKeySource,
		AWOSEQ SequenceNumber,
		--AWSUBSEQ SubSequenceNum,
		--AWTIER Tier,
		AWASN PriceAdjustmentSchedule,
		AWAST PriceAdjustmentType,
		--(SELECT TOP 1 DRDL01 FROM [SCCTL].F0005 WHERE DRSY = '40' AND DRRT = 'TY' AND RTRIM(LTRIM(DRKY)) = RTRIM(LTRIM(AWAST))) AS PriceAdjustmentTypeDesc,
		' ' AS PriceAdjustmentTypeDesc,
		AWITM ShortItemNumber,
		AWAN8 AddressNumber,
		AWCRCD CurrencyCodeFrom,
		AWUOM UnitOfMeasure,
		AWMNQ QuantityMinimum,
		AWLEDG LedgType,
		AWFRMN PriceFormulaName,
		AWBSCD BasisCode,
		--(SELECT TOP 1 DRDL01 FROM [SCCTL].F0005 WHERE DRSY = '40' AND DRRT = 'BC' AND RTRIM(LTRIM(DRKY)) = RTRIM(LTRIM(AWBSCD))) AS BasisCodeDesc,
		' ' AS BasisCodeDesc,
		AWFVTR FactorValue,
		AWABAS AdjustmentBasedOn,
		AWUPRC UnitPrice,
		AWFUP ForeignUnitPrice,
		AWGLC GlClass,
		AWARSN AdjustmentReasonCode,
		--(SELECT TOP 1 DRDL01 FROM [SCCTL].F0005 WHERE DRSY = '40' AND DRRT = 'AR' AND RTRIM(LTRIM(DRKY)) = RTRIM(LTRIM(AWARSN))) AS AdjustmentReasonCodeDesc,
		' ' AS AdjustmentReasonCodeDesc,
		AWACNT AdjustmentControlCode,
		AWSBIF SubledgerInformation,
		AWMDED ManualDiscount,
		AWPROV PriceOverrideCode,
		AWATID PriceAdjustmentKeyID,
		AWLITM LongItemNumber,
		AWAITM AuxItemNumber,
		AWDSC1 ItemDescription1,
		AWLNTY LineType,
		AWUORG UnitsTransactionQty,
		AWFGY FreeGoodsYN,
		AWORPR OrderRepriceCategory,
		AWSO08 SalesOrderStatus,
		AWRPRC RepriceBasketPriceCat,
		AWOLVL OrderLevelAdjustmentYN
		/*AWCATLG FreeGoodCatalogName,
		AWIGID ItemGroupKeyID,
		AWCGID CustomerGroupKeyID,
		AWOGID OrderGroupKeyID,
		AWANPS AddressNumberPriceAdjust,
		AWBSDVAL BasedOnValue,
		AWSRFLAG SlidingRateFlag,
		AWADJCAL AdjustmentCalculation,
		AWNBRORD NumberofOrders,
		AWUOMVID UOMforVolueIncentives,
		AWACCAN8 AccumulateAtAddress,
		AWBNAD BeneficiaryAddress,
		AWADJGRP AdjustmentGroup,
		AWMEADJ MutuallyExclusiveAdjustment,
		AWADJSTS AdjustmentStatus,
		AWADJREF AdjustmentReference,
		AWFVUM FactorValueUM,
		AWPDCL PromotionDisplayControl,
		AWCFGID ConfigurationIDNumber,
		AWCFGCID 
		AWAPRP1 PricingReportCode1,
		AWAPRP2 PricingReportCode2,
		AWAPRP3 PricingReportCode3,
		AWAPRP4 PricingReportCode4,
		AWAPRP5 PricingReportCode5,
		AWAPRP6 PricingReportCode6,
		AWNDPI NetDownPriceIndicator,
		AWRULENAME RuleName,
		AWPA04
		AWPMTN*/
	FROM [SCDATA].F40UI74
	WHERE 
		AWCTID = @ComputerID AND 
		AWJOBS = @JobNumber AND
		AWPEID = @ProcessID AND
		AWTCID = @TransactionID AND
		AWLNID = @LineNumber AND
		AWAREV = @MaxAdjRevLevel
	ORDER BY AWOSEQ ASC

GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetLineSerialNumbers'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetLineSerialNumbers
	END

GO

-- #desc				
-- #bl_class				Premier.Commerce.LineSerialNumbers.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- param @ComputerID		Computer ID
-- param @JobNumber			Job Number
-- param @ProcessID			Process ID
-- param @TransactionID		Transaction ID
-- param @LineNumber		Line Number

CREATE PROCEDURE [DBO].COM_GetLineSerialNumbers
(
	@Company NVARCHAR(5),
	@OrderType NVARCHAR(3),
	@OrderNumber FLOAT,
	@LineNumber FLOAT
)
AS

 SELECT 
	SWITM IdentifierShortItem, 
	SWLITM Identifier2ndItem,
	SWAITM Identifier3rdItem,
	SWDSC1 DescriptionLine1,
	SWDSC2 DescriptionLine2,
	SWDSC3 DescriptionLine3,
	SWMCU  CostCenter,
	SWLOTN Lot,
	SWLOCN Location,
	SWAN8  AddressNumber,
	SWSHAN AddressNumberShipTo, 
	SWKCOO Company,
	SWDOCO OrderNumber,
	SWDCTO OrderType,
	SWSFXO OrderSuffix,
	SWLNID LineNumber,
	SWORDJ DateOrderedJulian,
	SWSHPJ DateShippedJulian,
	SWSRL1 SerialNumber1,
	SWSRL2 SerialNumber2,
	SWVEND PrimaryLastVendorNo, 
	SWWARR TypeWarranty,
	SWWARJ DateWarrantyExpiraJu,
	SWWRLF WarrantyLifeInDays,
	SWWEXP AmtWarrantyExpenditure,
	SWDOCE DocWarrantyExpense,
	SWDCTE OrderTypeWarExpense, 
	SWWREM AmtWarrantyReimbursemt,
	SWDOCW DocWarrantyReimburse,
	SWDCTR OrderTypeWarReimbur, 
	SWSNCD SerialNoStatusCode,
	SWAISL AisleLocation,
	SWBIN  BinLocation
FROM [SCDATA].F4220
WHERE 
	SWKCOO = @Company AND
	SWDOCO = @OrderNumber AND
	SWDCTO = @OrderType AND
	SWLNID = @LineNumber 
 
 
GO
 
 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetMarketingCode'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetMarketingCode
	END

GO

-- #desc					Read marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Constant ID

CREATE Procedure [DBO].COM_GetMarketingCode
	@MarketingCode  NVARCHAR(30)
AS


SET NOCOUNT ON

SELECT  
	MK$9MKT MarketingCode, 
	MKMCU  BranchPlant,
	MKDSC1 Description1, 
	MKDSC2 Description2, 
	MKEFTJ EffectiveDate ,  
	MKEXDJ ExpirationDate, 
	MK$9WEB UsageMode
FROM  	
	[SCDATA].FQ674204 
WHERE
	MK$9MKT =  @MarketingCode
	
exec [DBO].COM_GetMarketingCodeValues @MarketingCode

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetMarketingCodeInfo'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetMarketingCodeInfo
	END

GO

-- #desc					Read marketing code info
-- #bl_class				Premier.Commerce.MarketingCodeInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Constant ID




CREATE Procedure [DBO].COM_GetMarketingCodeInfo
	@MarketingCode  NVARCHAR(30)
AS


SET NOCOUNT ON

SELECT  
	A.MK$9MKT MarketingCode, 
	A.MKMCU  BranchPlant,
	A.MKDSC1 Description1, 
	A.MKDSC2 Description2, 
	A.MKEFTJ EffectiveDate ,  
	A.MKEXDJ ExpirationDate, 
	A.MK$9WEB UsageMode,
	(SELECT COUNT(*) FROM [SCDATA].FQ674209 B WHERE B.MK$9MKT = A.MK$9MKT) AS FreightDiscountEnabled
FROM  	
	[SCDATA].FQ674204 A
WHERE
	MK$9MKT =  @MarketingCode

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetMarketingCodeList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetMarketingCodeList
	END

GO
-- #desc					Read marketing code list with all filters
-- #bl_class				Premier.Commerce.MarketingCodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @MarketingCode	Marketing Code
-- #param @Description1		Description 1
-- #param @Description2		Description 2
-- #param @WebEnabledOnly	if On return only webEnabled Marketing Codes
-- #param @ValidateDate		if On Check Marketing Code Valid Dates

CREATE Procedure [DBO].COM_GetMarketingCodeList
	@InstallationID		NVARCHAR(3),
	@MarketingCode		NVARCHAR(30),
	@Description1		NVARCHAR(30),	
	@Description2		NVARCHAR(30),
	@WebEnabledOnly		NVARCHAR(1), 
	@ValidateDate		NVARCHAR(1)
AS

SET NOCOUNT ON

DECLARE @today Numeric

	--Today in julian format
	IF(@ValidateDate IS NOT NULL) 
	BEGIN
		SET @today = [DBO].CMM_GetCurrentJulianDate (GETDATE())
	END

	SELECT	
	MK$9MKT	AS	MarketingCode,
	MKMCU	AS	BranchPlant,
	MKDSC1	AS  Description1,
	MKDSC2	AS  Description2,
	MKEFTJ	AS	EffectiveDate,
	MKEXDJ	AS	ExpirationDate,
	MK$9WEB AS	UsageMode,
	0		AS FreightDiscountEnabled
		-- Marketing Code Header 	
	FROM  	
		[SCDATA].FQ674204 MKHED 
		INNER JOIN [SCDATA].FQ679910 BRANCHSEC
		ON MKHED.MKMCU = BRANCHSEC.BIMCU
	WHERE	
	-- Marketing Code filter	
		(@MarketingCode = '*' OR MKHED.MK$9MKT LIKE '%' + @MarketingCode + '%')
	    -- Description filter
        AND (@Description1 = '*' OR MKHED.MKDSC1 LIKE '%' + @Description1 + '%')
        AND (@Description2 = '*' OR MKHED.MKDSC2 LIKE '%' + @Description2 + '%')
	    -- Branch Plant filter
	    AND BRANCHSEC.BI$9INID = @InstallationID
		-- Effective and Expiration Date
	    AND (@ValidateDate = '*' OR (MKHED.MKEFTJ <= @today AND MKHED.MKEXDJ >= @today))
		-- only WebEnabled
		AND (@WebEnabledOnly = '*' OR MKHED.MK$9WEB <> 'N' OR MKHED.MK$9WEB <> 'S')
ORDER BY MKHED.MK$9MKT
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetMKTCodRestricListNotRel'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetMKTCodRestricListNotRel
	END

GO
-- #desc				Read marketing restric code list
-- #bl_class			Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @MR$9MKT		Marketing Code

CREATE PROCEDURE [DBO].COM_GetMKTCodRestricListNotRel   
    @MarketingCode	NVARCHAR(30)
AS
SET NOCOUNT ON
	
	DECLARE	@CodeLength		INT
	
	-- Get Code Length
	SET @CodeLength = 0
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'DT')

	SELECT	
			A.DRKY 		AS Code, 
			A.DRDL01 	AS Description
	FROM	[SCCTL].F0005 A
	WHERE	
		A.DRSY = '00' 
	AND	A.DRRT = 'DT'
	AND	ISNULL(SUBSTRING(A.DRKY, 10 - @CodeLength + 1, @CodeLength),'') NOT IN (SELECT	MRDCTO
			      	     FROM	[SCDATA].FQ674210 MKCR
			      	     WHERE 	MR$9MKT = @MarketingCode)
	ORDER BY DRKY;
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetMKTCodRestricListRel'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetMKTCodRestricListRel
	END

GO

-- #desc					Read marketing restric code list
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
-- #param @MarketingCode	Marketing Code
	
CREATE PROCEDURE [DBO].COM_GetMKTCodRestricListRel   
    @MarketingCode	NVARCHAR(30)

AS
SET NOCOUNT ON

	DECLARE	@CodeLength	INT
	
	-- Get Code Length
	SET @CodeLength = 0;
	SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'DT')

	SELECT	B.DRKY		as Code,
			B.DRDL01 	as Description
	FROM	[SCDATA].FQ674210 A
	INNER JOIN [SCCTL].F0005 B
	ON B.DRRT = 'DT'
	AND B.DRSY = '00'
	WHERE
		A.MR$9MKT	= @MarketingCode
		AND  SUBSTRING(B.DRKY, 10 - @CodeLength + 1, @CodeLength) = A.MRDCTO
	ORDER BY MRDCTO;
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetOrderShipConfInfo'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetOrderShipConfInfo
	END
GO

-- #desc									Load a order detail
-- #bl_class								Premier.Commerce.SalesOrderShipConfInfo.cs
-- #db_dependencies							COM_GetSalesOrderInfo_BillTo, COM_GetSalesOrderShipments
-- #db_dependencies							N/A
-- #db_references							N/A

-- #param @InstallationID					Installation ID
-- #param @OrderCompany						Company ID
-- #param @OrderType						Document Type
-- #param @OrderNumber						OrderNumber
-- #param @PickSlipNumber					Pick Slip Number
-- #param @ContainerID						Container ID
-- #param @NextStatus						Order Next Status
-- #param @RetrieveWebContentInfo			Retrieve Web Content Info
-- #param @LangPref							Language Preference

CREATE PROCEDURE [DBO].COM_GetOrderShipConfInfo
	@InstallationID NVARCHAR(3),
	@OrderCompany	NVARCHAR(5),
	@OrderType		NVARCHAR(2),
	@OrderNumber	FLOAT,
	@PickSlipNumber	FLOAT,
	@ContainerID	NVARCHAR(20),
	@NextStatus		NVARCHAR(3),
	@RetrieveWebContentInfo	INT,
	@LangPref		NVARCHAR(2)
AS

	DECLARE @ScBillTo		FLOAT
	DECLARE @ScShipTo		FLOAT
	DECLARE	@AddressType	FLOAT
	DECLARE	@ContactID		FLOAT	

	DECLARE @Freight INT
	DECLARE @IsOverrideShipTo INT
	DECLARE @TempInstallation NVARCHAR(3)

	DECLARE @CustCrossRefType	NVARCHAR(256)	
	set @TempInstallation = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @TempInstallation, @CustCrossRefType out
       
   	DECLARE @FreightLn NVARCHAR(256)
	set @TempInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'FREIGHTLN', @TempInstallation, @FreightLn out

	DECLARE @TrackingLn NVARCHAR(256)
	set @TempInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'TRACKINGLN', @TempInstallation, @TrackingLn out
	
	DECLARE @CurrentJulianDate INTEGER
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())  

    
	/*Load Address Book Type Variable From Order Header*/
	SELECT TOP 1
		@AddressType = ISNULL(B.SH$9TYP,0),
		@ContactID	 = ISNULL(B.SHIDLN,0)
	FROM	[SCDATA].FQ674201 B
	WHERE	B.SHDOCO = @OrderNumber
		AND	B.SHKCOO = @OrderCompany
		AND	B.SHDCTO = @OrderType

	IF @AddressType is null	BEGIN
		SET @AddressType =0
		SET @ContactID =0
	END  

    /*Get Shipto Number and Branch Plant from Sales Order Detail by Pickslip Number or Container ID*/
	DECLARE @SDSHAN AS FLOAT
	DECLARE @SDMCU AS NCHAR(12)

	SELECT TOP 1
            @SDSHAN = CASE @AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END,
            @SDMCU = A.SDMCU
	FROM [SCDATA].F4211 A
	LEFT OUTER JOIN [SCDATA].FQ674211 B
		ON 	B.SDKCOO = A.SDKCOO
		AND B.SDDOCO = A.SDDOCO
		AND B.SDDCTO = A.SDDCTO
		AND B.SDLNID = A.SDLNID
	WHERE A.SDDOCO = @OrderNumber
		AND	A.SDDCTO = @OrderType
		AND	A.SDKCOO = @OrderCompany
		AND A.SDCNDJ = 0 
		AND ((@PickSlipNumber IS NOT NULL AND A.SDPSN = @PickSlipNumber) OR (@ContainerID <> '*' AND A.SDCNID = @ContainerID))
		
	/*LOAD ORDER DETAIL TEMPORARY TABLE*/
	SELECT	DISTINCT			
		A.SDKCOO				AS OrderCompany,
		A.SDDCTO				AS OrderType,
		A.SDDOCO				AS OrderNumber,
		A.SDLNID				AS LineNumber,
		A.SDTRDJ				AS TransactionDate,
		A.SDDRQJ				AS RequestedDate,
		A.SDLNTY				AS LineType,
		A.SDNXTR				AS NextStatus,
		A.SDLTTR				AS LastStatus,
		A.SDTAX1				AS TaxableYN,
		A.SDTXA1				AS TaxArea,
		A.SDEXR1				AS TaxExplanationCode,
		A.SDKCO					AS InvoiceCompany,
		A.SDDOC					AS InvoiceNumber,
		A.SDDCT					AS InvoiceType,
		A.SDSHAN				AS ShipToID,
		CASE @AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
		A.SDMCU					AS CostCenter, 
		A.SDEMCU				AS CostCenterHeader,
		ISNULL(S.IVCITM,' ')	AS ItemCrossRefNumber,
		A.SDDSC1				AS Description1,
		A.SDDSC2				AS Description2,
		A.SDUORG				AS QuantityOrdered,
		A.SDSOQS				AS ShippedQuantity,
		A.SDUOM					AS UnitOfMeasure,
		A.SDUOM4				AS PricingUnitOfMeasure,
		A.SDSOBK				AS BackorderedQuantity,
		A.SDSOCN				AS CanceledQuantity,
		A.SDUPRC				AS AmountUnitPrice,
		A.SDFUP					AS ForeignUnitPrice,
		A.SDAEXP				AS AmountExtPrice,
		A.SDFEA					AS ForeignExtPrice,
		ISNULL(T.LFIVI,' ')		AS InventoryInterface,
		A.SDCARS				AS CarrierID,
		R.ABALPH				AS CarrierName,
		A.SDMOT					AS ModeOfTransportation,
		A.SDITM					AS IdentifierShortItem,			
		A.SDLITM				AS LongItemNumber,
		A.SDAITM				AS AuxItemNumber,			
		ISNULL(B.SD$9SLN,0)		AS ShipLineNumber,			
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDKTLN				AS KitMasterLineNo,
		A.SDCPNT				AS ComponentLineNumber,									
		A.SDSRP1				AS SalesReportingCode1,
		A.SDSRP2				AS SalesReportingCode2,
		A.SDSRP3				AS SalesReportingCode3,
		A.SDSRP4				AS SalesReportingCode4,
		A.SDSRP5				AS SalesReportingCode5,
		A.SDASN					AS PriceAdjustmentScheduleN,
		A.SDDMCT				AS ContractNumberDistributi,
		A.SDPTC					AS PaymentTermsCode,
		C.PNPTD					AS PaymentTermsCodeDesc,
		A.SDLOB					AS LineOfBusiness,
		A.SDEUSE				AS EndUse,
		A.SDDTYS				AS DutyStatus,			
		A.SDUPC1				AS PriceCode1,
		A.SDUPC2				AS PriceCode2,
		A.SDUPC3				AS PriceCode3
	INTO 	#TMP_ORDERDETAIL
	FROM	[SCDATA].F4211 A		/*Standard Sales  OrderDetail*/
	LEFT OUTER JOIN [SCDATA].FQ674211 B
		ON 	B.SDKCOO = A.SDKCOO
		AND B.SDDOCO = A.SDDOCO
		AND B.SDDCTO = A.SDDCTO
		AND B.SDLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F4104	S /*Item Cross Ref*/
		ON  @AddressType = 0		/*Not join if AdrressType = 1 - Consumer*/
		AND	S.IVAN8  = A.SDAN8
		AND S.IVITM  = A.SDITM
		AND S.IVXRT = @CustCrossRefType
		AND @CurrentJulianDate >= S.IVEFTJ AND @CurrentJulianDate <= S.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F0014 C /*Payment Terms Code Description*/
		ON C.PNPTC = A.SDPTC
	INNER JOIN [SCDATA].F40205	T /*Line Type*/
		ON T.LFLNTY = A.SDLNTY
	LEFT OUTER JOIN [SCDATA].F0101		R /*Carrier Name*/
		ON R.ABAN8 = A.SDCARS
	LEFT OUTER JOIN [SCDATA].F4101 IM /*Item Master*/
		ON IM.IMITM = A.SDITM
	WHERE	A.SDDOCO = @OrderNumber
	AND		A.SDDCTO = @OrderType
	AND		A.SDKCOO = @OrderCompany		
	AND A.SDCNDJ = 0 /*Discard canceled lines*/
	AND (
		(@PickSlipNumber IS NOT NULL AND A.SDPSN = @PickSlipNumber)
		OR (@ContainerID <> '*' AND A.SDCNID = @ContainerID)
		OR (A.SDPSN = 0 AND A.SDCNID = '' AND A.SDNXTR = @NextStatus AND A.SDLNTY IN (@FreightLn, @TrackingLn) AND (CASE @AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END) = @SDSHAN AND A.SDMCU = @SDMCU) 		
		)
	UNION ALL
	SELECT	DISTINCT
		A.SDKCOO				AS OrderCompany,
		A.SDDCTO				AS OrderType,
		A.SDDOCO				AS OrderNumber,
		A.SDLNID				AS LineNumber,
		A.SDTRDJ				AS TransactionDate,
		A.SDDRQJ				AS RequestedDate,
		A.SDLNTY				AS LineType,
		A.SDNXTR				AS NextStatus,
		A.SDLTTR				AS LastStatus,
		A.SDTAX1				AS TaxableYN,
		A.SDTXA1				AS TaxArea,
		A.SDEXR1				AS TaxExplanationCode,
		A.SDKCO					AS InvoiceCompany,
		A.SDDOC					AS InvoiceNumber,
		A.SDDCT					AS InvoiceType,
		A.SDSHAN				AS ShipToID,
		CASE @AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
		A.SDMCU					AS CostCenter, 
		A.SDEMCU				AS CostCenterHeader,
		ISNULL(S.IVCITM,' ')	AS ItemCrossRefNumber,
		A.SDDSC1				AS Description1,
		A.SDDSC2				AS Description2,
		A.SDUORG				AS QuantityOrdered,
		A.SDSOQS				AS ShippedQuantity,
		A.SDUOM					AS UnitOfMeasure,
		A.SDUOM4				AS PricingUnitOfMeasure,
		A.SDSOBK				AS BackorderedQuantity,
		A.SDSOCN				AS CanceledQuantity,
		A.SDUPRC				AS AmountUnitPrice,
		A.SDFUP					AS ForeignUnitPrice,
		A.SDAEXP				AS AmountExtPrice,
		A.SDFEA					AS ForeignExtPrice,
		ISNULL(T.LFIVI,' ')		AS InventoryInterface,
		A.SDCARS				AS CarrierID,
		R.ABALPH				AS CarrierName,
		A.SDMOT					AS ModeOfTransportation,
		A.SDITM					AS IdentifierShortItem,			
		A.SDLITM				AS LongItemNumber,
		A.SDAITM				AS AuxItemNumber,			
		ISNULL(B.SD$9SLN,0)		AS ShipLineNumber,			
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDKTLN				AS KitMasterLineNo,
		A.SDCPNT				AS ComponentLineNumber,									
		A.SDSRP1				AS SalesReportingCode1,
		A.SDSRP2				AS SalesReportingCode2,
		A.SDSRP3				AS SalesReportingCode3,
		A.SDSRP4				AS SalesReportingCode4,
		A.SDSRP5				AS SalesReportingCode5,
		A.SDASN					AS PriceAdjustmentScheduleN,
		A.SDDMCT				AS ContractNumberDistributi,
		A.SDPTC					AS PaymentTermsCode,
		C.PNPTD					AS PaymentTermsCodeDesc,
		A.SDLOB					AS LineOfBusiness,
		A.SDEUSE				AS EndUse,
		A.SDDTYS				AS DutyStatus,			
		A.SDUPC1				AS PriceCode1,
		A.SDUPC2				AS PriceCode2,
		A.SDUPC3				AS PriceCode3
	FROM [SCDATA].F42119 A    	
	LEFT OUTER JOIN [SCDATA].FQ674211 B 
		ON 	A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO
		AND A.SDKCOO = B.SDKCOO
		AND A.SDLNID = B.SDLNID
	LEFT OUTER JOIN [SCDATA].F4104	S /*Item Cross Ref*/
		ON  S.IVAN8  = A.SDAN8
		AND S.IVITM  = A.SDITM
		AND @AddressType = 0		/*Not join if AdrressType = 1 - Consumer  */
		AND S.IVXRT = @CustCrossRefType
		AND @CurrentJulianDate >= S.IVEFTJ AND @CurrentJulianDate <= S.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F0014 C /*Payment Terms Code Description*/
		ON C.PNPTC = A.SDPTC
	LEFT OUTER JOIN [SCDATA].F40205	T /*Line Type*/
		ON T.LFLNTY = A.SDLNTY
	LEFT OUTER JOIN [SCDATA].F0101		R /*Carrier Name*/
		ON R.ABAN8 = A.SDCARS
	LEFT OUTER JOIN [SCDATA].F4101 IM /*Item Master*/
		ON IM.IMITM = A.SDITM
	WHERE	A.SDDOCO = @OrderNumber
	AND		A.SDDCTO = @OrderType
	AND		A.SDKCOO = @OrderCompany			
	AND A.SDCNDJ = 0 
	AND	(
		(@PickSlipNumber IS NOT NULL AND A.SDPSN = @PickSlipNumber)
		OR (@ContainerID <> '*' AND A.SDCNID = @ContainerID)
		OR (A.SDPSN = 0 AND A.SDCNID = '' AND A.SDNXTR = @NextStatus AND A.SDLNTY IN (@FreightLn, @TrackingLn) AND (CASE @AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END) = @SDSHAN AND A.SDMCU = @SDMCU) 		
		)	
	ORDER BY A.SDLNID ASC
	
	/*LOAD ORDER HEADER TEMPORARY TABLE*/
	SELECT	DISTINCT
			CASE @AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
			CASE @AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
			ISNULL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			'Y'		 AS IsFreightOn,
			A.SHCO	 AS	OrderHeaderCompany
	INTO	#TMP_ORDERHEADER
	FROM	[SCDATA].F4201 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO 
	LEFT OUTER JOIN  [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = @OrderNumber
	AND		A.SHDCTO = @OrderType
	AND		A.SHKCOO = @OrderCompany
	UNION ALL
	SELECT	DISTINCT
			CASE @AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
			CASE @AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
			ISNULL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			'Y'      AS IsFreightOn,
			A.SHCO	 AS	OrderHeaderCompany
	FROM 	[SCDATA].F42019 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = @OrderNumber
	AND		A.SHKCOO = @OrderCompany	
	AND		A.SHDCTO = @OrderType
	

	/* Update the field IsFreightOn  when is FREIGHT OFF*/	
	SELECT @Freight = COUNT(*) FROM [SCDATA].FQ67496 WHERE FRKCOO = @OrderCompany AND FRDCTO = @OrderType AND FRDOCO = @OrderNumber
	IF(@Freight = 0) BEGIN /* When the ship line Number is 0 the order is freight OFF*/	
	    UPDATE #TMP_ORDERHEADER SET IsFreightOn = 'N' 
	END
	
    /*Load BillTo Variables From Order Header*/
	SELECT TOP 1 
		@ScBillTo = SCBillToNumber,
		@ScShipTo = SCShipToNumber,
		@AddressType = AddressBookType		
	FROM #TMP_ORDERHEADER
	
	
	SELECT 		
		A.SCBillToNumber,
		A.SCShipToNumber,
		A.AddressBookType,
		A.DeliveryInst1, 
		A.DeliveryInst2,
		A.CustomerPO,
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.OrderDate,
		A.RequestedDate,
		A.MarketingCode,
		A.HoldOrderCode,
		A.CurrencyCode,
		A.CurrencyMode,
		A.CurrencyDesc,
		A.IsFreightOn,
		ISNULL(ISNULL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
	FROM #TMP_ORDERHEADER A
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.OrderNumber 
		AND Tax.STDCTO = A.OrderType
		AND Tax.STKCOO = A.OrderCompany 
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.OrderNumber 
		AND TxHistory.STDCTO = A.OrderType
		AND TxHistory.STKCOO = A.OrderCompany
	
	EXEC [DBO].COM_GetSalesOrderInfo_BillTo @OrderCompany,@OrderType,@OrderNumber,@ScBillTo,@AddressType,@ContactID
	
	SELECT @IsOverrideShipTo = COUNT(*)   
	FROM [SCDATA].F4006
	WHERE OADOCO = @OrderNumber			
		AND OADCTO = @OrderType
		AND OAKCOO = @OrderCompany
		AND OAANTY = 2 
		
	IF (@IsOverrideShipTo > 0) BEGIN
		UPDATE #TMP_ORDERDETAIL 
		SET SCShipToNumber = @ScShipTo, ShipLineNumber =1;
	END
	
	SELECT DISTINCT
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.CostCenter, 
		A.ShipLineNumber,
		A.SCShipToNumber,
		A.LineType
	INTO #COM_GetSalesOrderShipments_A	
	FROM #TMP_ORDERDETAIL A
	EXEC [DBO].COM_GetSalesOrderShipments @InstallationID, @OrderCompany, @OrderType, @OrderNumber, @ScShipTo, @AddressType, @Freight, @IsOverrideShipTo	


	IF(@RetrieveWebContentInfo = 1)	BEGIN

		SELECT
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.NextStatus,
			A.LastStatus,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.ShipToID,
			A.SCShipToNumber,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			ISNULL(ContenDesc.DESC1,A.Description1)	AS Description1,
			ISNULL(ContenDesc.DESC2,A.Description2)	AS Description2,		
			A.QuantityOrdered,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.CarrierID,
			A.CarrierName,
			A.ModeOfTransportation,
			A.IdentifierShortItem,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.ShipLineNumber,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,								
			A.SalesReportingCode1,
			A.SalesReportingCode2,
			A.SalesReportingCode3,
			A.SalesReportingCode4,
			A.SalesReportingCode5,
			A.PriceAdjustmentScheduleN,
			A.ContractNumberDistributi,
			A.PaymentTermsCode,
			A.PaymentTermsCodeDesc,
			A.LineOfBusiness,
			A.EndUse,
			A.DutyStatus,		
			A.PriceCode1,
			A.PriceCode2,
			A.PriceCode3,			
			ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			ISNULL(ISNULL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			ISNULL(ISNULL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount
		FROM #TMP_ORDERDETAIL A
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.OrderNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber 
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.OrderNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber 
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,A.IdentifierShortItem,@LangPref,0) ContenDesc 

	END

	ELSE BEGIN
		
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.NextStatus,
			A.LastStatus,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.ShipToID,
			A.SCShipToNumber,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			A.Description1 AS Description1, /* Retrieve Description 1 for Tracking lines */
			A.Description2	AS Description2,		
			A.QuantityOrdered,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.CarrierID,
			A.CarrierName,
			A.ModeOfTransportation,
			A.IdentifierShortItem,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.ShipLineNumber,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,								
			A.SalesReportingCode1,
			A.SalesReportingCode2,
			A.SalesReportingCode3,
			A.SalesReportingCode4,
			A.SalesReportingCode5,
			A.PriceAdjustmentScheduleN,
			A.ContractNumberDistributi,
			A.PaymentTermsCode,
			A.PaymentTermsCodeDesc,
			A.LineOfBusiness,
			A.EndUse,
			A.DutyStatus,		
			A.PriceCode1,
			A.PriceCode2,
			A.PriceCode3,			
			ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			ISNULL(ISNULL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			ISNULL(ISNULL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount
		FROM #TMP_ORDERDETAIL A
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.OrderNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber 
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.OrderNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber 
	END


	DROP TABLE #TMP_ORDERDETAIL
	DROP TABLE #TMP_ORDERHEADER
	DROP TABLE #COM_GetSalesOrderShipments_A

	/*Configured Items*/
	EXEC [DBO].COM_GetSOConfiguredLineList @OrderCompany, @OrderType, @OrderNumber, @LangPref

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type IN('IF') AND id = OBJECT_ID(N'[DBO].COM_GetOriginalOrderInfoFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].COM_GetOriginalOrderInfoFnc
	END
GO

-- #desc						Get the Return Order Original Information
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @ReturnNumber			Return Number
-- #param @ReturnType			Return Type
-- #param @ReturnCompany		Return Company

CREATE FUNCTION [DBO].COM_GetOriginalOrderInfoFnc
(
	@ReturnNumber		FLOAT,
	@ReturnType			NVARCHAR(2),
	@ReturnCompany		NVARCHAR(5)
)
RETURNS TABLE 
AS
RETURN 
(
	WITH CTE AS (
		SELECT 
			A.SDOKCO,
			A.SDOORN,
			A.SDOCTO
		FROM [SCDATA].F4211 A
		WHERE A.SDDOCO = @ReturnNumber
			AND A.SDDCTO = @ReturnType
			AND A.SDKCOO = @ReturnCompany
		UNION ALL
		SELECT 
			A.SDOKCO,
			A.SDOORN,
			A.SDOCTO
		FROM [SCDATA].F42119 A
		WHERE A.SDDOCO = @ReturnNumber
			AND A.SDDCTO = @ReturnType
			AND A.SDKCOO = @ReturnCompany
	)
	SELECT TOP 1
		A.SDOKCO,
		A.SDOORN,
		A.SDOCTO
	FROM CTE A
)
GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetP4210VerRulDtMCUNotRel'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetP4210VerRulDtMCUNotRel
	END

GO

-- #desc					Read P4210 Version Rule Det MCU Not Related
-- #bl_class				Premier.Commerce.P4210VersRuleDetMCUNotRel.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleID			Rule ID

CREATE Procedure [DBO].COM_GetP4210VerRulDtMCUNotRel
	@InstallationID		NVARCHAR(3),
	@RuleID				FLOAT
AS

SET NOCOUNT ON

SELECT DISTINCT
	A.ABMCU		BranchPlant,
	B.MCDL01	Description	
FROM [SCDATA].F0101 A
INNER JOIN [SCDATA].F0006 B
	ON B.MCMCU = A.ABMCU
WHERE
	A.ABMCU NOT IN (SELECT DISTINCT RDMCU FROM [SCDATA].FQ674231 WHERE RD$9INID = @InstallationID AND RDUKID = @RuleID)
UNION
SELECT DISTINCT
	A.PRMCU		BranchPlant,
	B.MCDL01	Description	
FROM [SCDATA].FQ670302 A
INNER JOIN [SCDATA].F0006 B
	ON B.MCMCU = A.PRMCU
WHERE
	A.PRMCU NOT IN (SELECT DISTINCT RDMCU FROM [SCDATA].FQ674231 WHERE RD$9INID = @InstallationID AND RDUKID = @RuleID)

GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetP4210VerRulDtUDCNotRel'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetP4210VerRulDtUDCNotRel
	END

GO

-- #desc						Read P4210 Version Det UDC Not Related
-- #bl_class					Premier.Commerce.P4210VersRuleDetUDCNotRel.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @RuleID				Rule ID
-- #param @ProductCode			Product Code
-- #param @UserDefinedCode		User Defined Code

CREATE Procedure [DBO].COM_GetP4210VerRulDtUDCNotRel
	@InstallationID		NVARCHAR(3),
	@RuleID				FLOAT,
	@ProductCode		NVARCHAR(4),
	@UserDefinedCode	NVARCHAR(2)
AS

SET NOCOUNT ON

DECLARE @CodeLength  INT

-- Get Code Length
SET @CodeLength = 0
SET @CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
	  WHERE DTSY = @ProductCode AND DTRT = @UserDefinedCode)
							
SELECT
	SUBSTRING (A.DRKY,10 - @CodeLength + 1 ,@CodeLength) AS UserDefinedKey,
	A.DRDL01	AS Description
FROM
	[SCCTL].F0005 A
WHERE
	LTRIM(RTRIM(A.DRSY)) <> '*' AND
	A.DRSY = @ProductCode AND
	A.DRRT = @UserDefinedCode AND
	SUBSTRING(A.DRKY, 10 - @CodeLength + 1, @CodeLength) NOT IN (SELECT DISTINCT ISNULL(RDKY,'')
					  FROM	 [SCDATA].FQ674231
					  WHERE
							RD$9INID = @InstallationID AND
							RDUKID = @RuleID)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetP4210VersRuleHeader'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetP4210VersRuleHeader
	END

GO

-- #desc					Read P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleUniqueID		Rule Unique ID
-- #param @RuleType			Rule Type
-- #param @CategoryCode		Category Code


CREATE Procedure [DBO].COM_GetP4210VersRuleHeader
	@InstallationID		NVARCHAR(3),
	@RuleUniqueID		FLOAT,
	@RuleType			NVARCHAR(2),
	@CategoryCode		NVARCHAR(3)
AS

DECLARE @ProductCode		NVARCHAR(4);
DECLARE @UserDefinedCode	NVARCHAR(2);
IF (@RuleType = 'PG')
BEGIN
	SET @ProductCode = '40';
	SET @UserDefinedCode = 'PC';
END
ELSE IF (@RuleType = 'AS')
BEGIN
	SET @ProductCode = '40';
	SET @UserDefinedCode = 'AS';
END
ELSE IF (@RuleType = 'ST')
BEGIN
	SET @ProductCode = '00';
	SET @UserDefinedCode = 'S';
END
ELSE IF (@RuleType = 'CN')
BEGIN
	SET @ProductCode = '00';
	SET @UserDefinedCode = 'CN';
END
ELSE IF (@RuleType = 'AC')
BEGIN
	SET @ProductCode = '01';
	SET @UserDefinedCode = @CategoryCode;
END
ELSE IF (@RuleType = 'CC')
BEGIN
	SET @ProductCode = '59';
	SET @UserDefinedCode = @CategoryCode;
END

SELECT
	RH$9INID	InstallationID,
	RHUKID		RuleUniqueID,
	RHDSC1		Description,
	RHVER		P4210Version,
	RHSEQ		Hierarchy,
	RHRUDTP		RuleType,
	RHRT		CategoryCode
FROM
	[SCDATA].FQ674230
WHERE
	RH$9INID =  @InstallationID AND
	RHUKID	=  @RuleUniqueID

exec [DBO].COM_GetP4210VersRuleDetails @InstallationID, @RuleUniqueID, @ProductCode, @UserDefinedCode

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetP4210VersRuleHeaderList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetP4210VersRuleHeaderList
	END

GO

-- #desc					Read P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID

CREATE Procedure [DBO].COM_GetP4210VersRuleHeaderList
	@InstallationID  NVARCHAR(3)
AS

SET NOCOUNT ON

SELECT
	RH$9INID	InstallationID,
	RHUKID		RuleUniqueID,
	RHDSC1		Description,
	RHVER		P4210Version,
	RHSEQ		Hierarchy,
	RHRUDTP		RuleType,
	RHRT		CategoryCode
FROM
	[SCDATA].FQ674230
WHERE
	RH$9INID =  @InstallationID
ORDER BY RHSEQ
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetPaymentInstrumentList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetPaymentInstrumentList
	END

GO

-- #desc				Read Payment Instrument
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].COM_GetPaymentInstrumentList

AS

SET NOCOUNT ON

SELECT 
	A.RYRYIN AS PaymentInstrument,
	[DBO].CMM_GetUserDefinedCodeFnc('00','PY',A.RYRYIN,'*') AS Description
FROM
	[SCDATA].FQ67RYIN A
ORDER BY RYRYIN DESC

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetProfilePurchaseList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetProfilePurchaseList
	END

GO

-- #desc						N/A
-- #bl_class					Premier.Commerce.ProfilePurchaseList.cs
-- #db_dependencies				N/A
-- #db_references				N/A
	
-- #param @Company				Company
-- #param @InstallationID		Installation Id
-- #param @AddressBookType		Address Book Type
-- #param @AddressNumber		Address Number
-- #param @LastDays				Last Days filter

CREATE PROCEDURE [DBO].COM_GetProfilePurchaseList
(
	@Company				NVARCHAR(5),
	@InstallationID			NVARCHAR(3),
	@AddressBookType		FLOAT,
	@AddressNumber			FLOAT,
	@LastDays				FLOAT
)
AS
	
	DECLARE @SOrderRestric		NVARCHAR(256)
	DECLARE @SOrderINID			NVARCHAR(3)
	DECLARE @SOrderConstant		NVARCHAR(10)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ForeignInstallation	NVARCHAR(3)
	DECLARE @ForeignConstant	NVARCHAR(5)
	 /* Gets the Sales Order Document Restrictions	*/
    SET @SOrderConstant = 'SO_RESTRIC'
    SET @SOrderINID = @InstallationID
	SET @ConstantInstallation = @InstallationID
	SET @ForeignInstallation = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric OUT
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT
	EXEC [DBO].CMM_GetConstantValue 'FOREGCURYN', @ForeignInstallation, @ForeignConstant OUT

	DECLARE @ToDate NUMERIC
	DECLARE @FromDate NUMERIC 

	SET @ToDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
	SET @FromDate = [DBO].CMM_GetCurrentJulianDate (DATEADD(DAY, - (@LastDays - 1), GETDATE()))

	IF(@Company = '00000') 
	BEGIN
		SET @Company = '*'
	END

	IF(@AddressBookType = 0) --CUSTOMER
	BEGIN
		;WITH CTE_F4201 AS
			(
			SELECT 
				A.SHTRDJ AS OrderDate,
				(CASE WHEN A.SHCRRM = 'D' OR @ForeignConstant = 'N' THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
				 END ) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' THEN B.CCCRCD
					ELSE A.SHCRCD
				  END ) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO
			FROM [SCDATA].F4201 A	  /* Sales Order Header */
			INNER JOIN [SCDATA].F0010 B
			  ON B.CCCO = A.SHKCOO	
			WHERE A.SHAN8 = @AddressNumber
				AND (@Company = '*' OR A.SHCO = @Company)
				AND	(A.SHTRDJ >= @FromDate)		
				AND	(A.SHTRDJ <= @ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' THEN B.CCCRCD
					ELSE A.SHCRCD
				  END), A.SHCO, A.SHDCTO
			UNION ALL
			SELECT 
				A.SHTRDJ AS OrderDate,
				(CASE WHEN A.SHCRRM = 'D' OR @ForeignConstant = 'N' THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
				  END) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' THEN B.CCCRCD
					ELSE A.SHCRCD
				  END) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO
			FROM [SCDATA].F42019 A	  /* Sales Order Header */
			INNER JOIN [SCDATA].F0010 B
			  ON B.CCCO = A.SHKCOO	
			WHERE A.SHAN8 = @AddressNumber
				AND (@Company = '*' OR A.SHCO = @Company)
				AND	(A.SHTRDJ >= @FromDate)		
				AND	(A.SHTRDJ <= @ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' 
					THEN B.CCCRCD
					ELSE A.SHCRCD
					END), A.SHCO, A.SHDCTO	
			)
		SELECT
			OrderDate,
			SUM(ProductTotal) AS ProductTotal,
			CurrencyCode
		FROM CTE_F4201 A
		LEFT OUTER JOIN [SCDATA].FQ679912 CR --Extended Sales Order Header
			ON CR.CICO = A.SHCO
			AND CR.CI$9INID = @ConstantInstallation
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DRKY = A.SHDCTO
			AND DR$9INID = @SOrderINID 
			AND DR$9CNST = @SOrderConstant
		WHERE (@SOrderRestric = '0' OR SOR.DRKY IS NOT NULL)
			AND (@CompanyConstant = 'A' OR CR.CICO IS NOT NULL)
		GROUP BY OrderDate, CurrencyCode
	END
	ELSE IF (@AddressBookType = 1) -- CONSUMER
	BEGIN
		;WITH CTE_F4201 AS 
			(
			SELECT SHTRDJ AS OrderDate, 
				(CASE WHEN A.SHCRRM = 'D' OR @ForeignConstant = 'N' THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
					END ) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' THEN C.CCCRCD
					ELSE A.SHCRCD
					END ) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO
			FROM [SCDATA].F4201 A			--Sales Order Header
			INNER JOIN [SCDATA].F0010 C
			  ON C.CCCO = A.SHKCOO	
			LEFT OUTER JOIN [SCDATA].FQ674201 AS B	--Extended Sales Order Header
				ON B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO
			WHERE B.SH$9AN8 = @AddressNumber
				AND B.SH$9TYP = @AddressBookType		
				AND	(A.SHTRDJ >= @FromDate)		
				AND	(A.SHTRDJ <= @ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' 
					THEN C.CCCRCD
					ELSE A.SHCRCD
					END), A.SHCO, A.SHDCTO
			UNION ALL
			SELECT
				SHTRDJ AS OrderDate,
				(CASE WHEN A.SHCRRM = 'D' OR @ForeignConstant = 'N'
					THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
					END
				) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' 
					THEN C.CCCRCD
					ELSE A.SHCRCD
					END
				) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO
			FROM [SCDATA].F42019 A
			INNER JOIN [SCDATA].F0010 C
			  ON C.CCCO = A.SHKCOO	
			LEFT OUTER JOIN [SCDATA].FQ674201 AS B	--Extended Sales Order Header
				ON B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO
			WHERE B.SH$9AN8 = @AddressNumber
				AND B.SH$9TYP = @AddressBookType		
				AND	(A.SHTRDJ >= @FromDate)		
				AND	(A.SHTRDJ <= @ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND @ForeignConstant = 'N' 
					THEN C.CCCRCD
					ELSE A.SHCRCD
					END), A.SHCO, A.SHDCTO
			)
		SELECT
			OrderDate,
			SUM(ProductTotal) AS ProductTotal,
			CurrencyCode
		FROM CTE_F4201 A
		LEFT OUTER JOIN [SCDATA].FQ679912 CR
			ON CR.CICO = A.SHCO
			AND CR.CI$9INID = @ConstantInstallation
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DRKY = A.SHDCTO
			AND DR$9INID = @SOrderINID 
			AND DR$9CNST = @SOrderConstant
		WHERE (@SOrderRestric = '0' OR SOR.DRKY IS NOT NULL)
			AND (@CompanyConstant = 'A' OR CR.CICO IS NOT NULL)
		GROUP BY OrderDate, CurrencyCode 
	END

GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetPunchInvoicePresentList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetPunchInvoicePresentList
	END
GO

-- #desc								Load EDI invoice information
-- #bl_class							Premier.Commerce.PunchOutInvoicePresentmentList.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param @OrderCompany					Company ID
-- #param @OrderType					Document Type
-- #param @OrderNumber					Order Number

CREATE PROCEDURE [DBO].COM_GetPunchInvoicePresentList	
	@OrderCompany		NVARCHAR(5),
	@OrderType			NVARCHAR(2),
	@OrderNumber		FLOAT
AS
	/*Retrieve Invoice Header Information*/
	SELECT 
	SY.SYEDOC	AS EDINumber,
	SY.SYEDCT	AS EDIType,
	SY.SYEKCO	AS EDICompany,
	SY.SYDOCO   AS OrderNumber,
	SY.SYKCOO	AS OrderCompany,
	SY.SYDCTO	AS OrderType,
	SY.SYVR01   AS CustomerPO,
	S3.S3DOC	AS InvoiceNumber,
	S3.S3DCT	AS InvoiceType,
	S3.S3KCO	AS InvoiceCompany,
	S3.S3DDU	AS DueDate,
	S3.S3IVD	AS InvoiceDate,
	S3.S3NDTP	AS DaysToPay,
	S3.S3AG		AS GrossAmount,
	S3.S3ATXA	AS TaxableAmount,
	S3.S3STAM	AS TaxAmount,
	S3.S3CTAM	AS ForeignTaxAmount,
	S3.S3DSCT	AS DiscountAmount,	
	SY.SYCRRM	AS CurrencyMode,
	ZAB.ZAAN8	AS BillAddressNumber,
	ZAB.ZAMLNM	AS BillMailingName,
	ZAB.ZAADD1	AS BillAddressLine1,
	ZAB.ZAADD2	AS BillAddressLine2,
	ZAB.ZAADD3	AS BillAddressLine3,
	ZAB.ZAADD4	AS BillAddressLine4,
	ZAB.ZAADDZ	AS BillPostalCode,
	ZAB.ZACTY1	AS BillCity,
	ZAB.ZAADDS	AS BillState,
	ZAB.ZACOUN	AS BillCountry,
	ZAS.ZAAN8	AS ShipAddressNumber,
	ZAS.ZAMLNM	AS ShipMailingName,
	ZAS.ZAADD1	AS ShipAddressLine1,
	ZAS.ZAADD2	AS ShipAddressLine2,
	ZAS.ZAADD3	AS ShipAddressLine3,
	ZAS.ZAADD4	AS ShipAddressLine4,
	ZAS.ZAADDZ	AS ShipPostalCode,
	ZAS.ZACTY1	AS ShipCity,
	ZAS.ZAADDS	AS ShipState,
	ZAS.ZACOUN	AS ShipCountry,
	SY.SYCO		AS Company,
	CC.CCAN8	AS CompanyAddressNumber	
	FROM [SCDATA].F47046 SY
	INNER JOIN [SCDATA].F470461 S3 --Extended info
	ON S3.S3EDOC = SY.SYEDOC
	AND S3.S3EKCO = SY.SYEKCO
	AND S3.S3EDCT = SY.SYEDCT
	INNER JOIN [SCDATA].F4706 ZAB -- Bill To Address Information
	ON ZAB.ZAEDOC = SY.SYEDOC
	AND ZAB.ZAEKCO = SY.SYEKCO
	AND ZAB.ZAEDCT = SY.SYEDCT
	AND ZAB.ZAANTY = 1
	INNER JOIN [SCDATA].F4706 ZAS --Ship to Address Information
	ON ZAS.ZAEDOC = SY.SYEDOC
	AND ZAS.ZAEKCO = SY.SYEKCO
	AND ZAS.ZAEDCT = SY.SYEDCT
	AND ZAS.ZAANTY = 2
	INNER JOIN [SCDATA].F0010 CC -- Company information
	ON CC.CCCO = SY.SYCO
	WHERE SY.SYDOCO = @OrderNumber AND SY.SYKCOO = @OrderCompany AND SY.SYDCTO = @OrderType AND SY.SYEDSP <> 'Y'
	

	/*Retrieve Invoice Lines Information*/
	SELECT 
	SZDOCO			AS OrderNumber,
	SZDCTO			AS OrderType,
	SZKCOO			AS OrderCompany,
	SZDOC			AS InvoiceNumber,
	SZDCT			AS InvoiceType,
	SZKCO			AS InvoiceCompany,
	SZLNID			AS LineNumber,
	SZITM			AS ShortProductNumber,
	SZLITM			AS LongProductNumber,
	SZAITM			AS AuxProductNumber,
	SZDSC1			AS Description1,
	SZDSC2			AS Description2,
	SZLNTY			AS LineType,
	SZUOM			AS UnitOfMeasure,
	SZUPRC			AS AmountUnitPrice,
	SZAEXP			AS AmountExtPrice,
	SZECST			AS AmountExtCost,
	SZFUP			AS ForeignUnitPrice,
	SZFEA			AS ForeignExtPrice,
	SZPROV			AS OverridePriceCode,
	SZUORG			AS ShippingQuantity,
	SZSOQS			AS ShippedQuantity,
	SZRLIT			AS RelatedKitItemNo,
	SZKTLN			AS KitMasterLineNo,
	SZCPNT			AS ComponentLineNumber
	FROM [SCDATA].F47047	
	WHERE SZDOCO = @OrderNumber AND SZKCOO = @OrderCompany AND SZDCTO = @OrderType AND SZEDSP <> 'Y'

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetReturnOrderInfo'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetReturnOrderInfo
	END
GO

-- #desc						Load a return detail
-- #bl_class					Premier.Commerce.ReturnOrderInfo.cs
-- #db_dependencies				COM_GetSalesOrderBillToInfo.sql, COM_GetSalesOrderInfo_Payments.sql
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @ReturnCompany		Company ID
-- #param @ReturnType			Document Type
-- #param @ReturnNumber			ReturnNumber

CREATE PROCEDURE [DBO].COM_GetReturnOrderInfo
	@InstallationID NVARCHAR(3),
	@ReturnCompany	NVARCHAR(5),
	@ReturnType	NVARCHAR(2),
	@ReturnNumber	FLOAT
AS

	/* STORE PROCEDURE VARIABLES */
	DECLARE @ScBillTo		FLOAT
	DECLARE @ScShipTo		FLOAT
	DECLARE	@AddressType	FLOAT
	DECLARE	@ContactID		FLOAT
	DECLARE @Freight INT

	-- Gets Cust Cross Document Restrictions
	DECLARE @CustCrossRefType	NVARCHAR(256)
	DECLARE @CustCrossINID		NVARCHAR(3)
	set @CustCrossINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossINID, @CustCrossRefType out

  DECLARE @CurrentJulianDate NUMERIC
	DECLARE @currentDate DATETIME = GETDATE()
	SELECT @CurrentJulianDate = CONVERT( numeric , CONVERT(NVARCHAR, DATEPART(yy, @currentDate)-1900) + RIGHT('000' + CONVERT(NVARCHAR,DATEPART(dy, @currentDate)),3))

    DECLARE @CurrencyMode		 NVARCHAR(1)
    DECLARE @BaseCurrencyCode        NVARCHAR(3)
    DECLARE @BaseCurrencyDesc    NVARCHAR(30)

    -- Foreign Constant
    DECLARE @Foreign     NVARCHAR(256)
    DECLARE @ForeignINID        NVARCHAR(3)
	DECLARE @ForeignConstant     NVARCHAR(10)
	SET @ForeignINID = @InstallationID
	SET @ForeignConstant = 'FOREGCURYN'

	--Gets the Order Document Restrictions
	DECLARE @SOrderRestric     NVARCHAR(256)
    DECLARE @SOrderINID        NVARCHAR(3)
	DECLARE @SOrderConstant     NVARCHAR(10)
	set @SOrderINID = @InstallationID
	set @SOrderConstant = 'SO_RESTRIC'
	EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID out, @SOrderRestric OUT

    --Load Address Book Type Variable From Order Header
	SELECT TOP 1
		@AddressType = ISNULL(B.SH$9TYP,0),
		@ContactID	 = ISNULL(B.SHIDLN,0)
	FROM	[SCDATA].FQ674201 B
	WHERE	B.SHDOCO = @ReturnNumber
		AND	B.SHKCOO = @ReturnCompany
		AND	B.SHDCTO = @ReturnType

	IF @AddressType is null
	BEGIN
		SET @AddressType =0
		SET @ContactID =0
	END

	-- LOAD ORDER DETAIL TEMPORARY TABLE
	SELECT	DISTINCT
			A.SDKCOO				AS ReturnCompany,
			A.SDDCTO				AS ReturnType,
			A.SDDOCO				AS ReturnNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDOKCO				AS OriginalOrderCompany,
			A.SDOORN				AS OriginalOrderNumber,
			A.SDOCTO				AS OriginalOrderType,
			A.SDSHAN				AS ShipToID,
			A.SDMCU					AS CostCenter,
			A.SDEMCU				AS CostCenterHeader,
			ISNULL(S.IVCITM,'')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			ISNULL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			' '						AS IsOrderRestricted,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber
		INTO 	#TMP_ORDERDETAIL
		FROM	[SCDATA].F4211 A
		LEFT OUTER JOIN [SCDATA].F4104 S --Item Cross Ref
			ON S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND @CurrentJulianDate BETWEEN S.IVEFTJ AND S.IVEXDJ
			AND S.IVXRT = @CustCrossRefType
			AND @AddressType = 0		--Not join if AdrressType = 1 - Consumer
		INNER JOIN [SCDATA].F40205	T --Line Type
			ON T.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE	A.SDDOCO = @ReturnNumber
			AND	A.SDDCTO = @ReturnType
			AND	A.SDKCOO = @ReturnCompany
	UNION ALL
	SELECT	DISTINCT
			A.SDKCOO				AS ReturnCompany,
			A.SDDCTO				AS ReturnType,
			A.SDDOCO				AS ReturnNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDOKCO				AS OriginalOrderCompany,
			A.SDOORN				AS OriginalOrderNumber,
			A.SDOCTO				AS OriginalOrderType,
			A.SDSHAN				AS ShipToID,
			A.SDMCU					AS CostCenter,
			A.SDEMCU				AS CostCenterHeader,
			ISNULL(S.IVCITM,' ')	AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			ISNULL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A. SDLITM				AS LongItemNumber,
			A. SDAITM				AS AuxItemNumber,
			' '						AS IsOrderRestricted,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber
	FROM [SCDATA].F42119 A
		LEFT OUTER JOIN [SCDATA].F4104 S --Item Cross Ref
			ON  S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND S.IVXRT = @CustCrossRefType
			AND @CurrentJulianDate >= S.IVEFTJ AND @CurrentJulianDate <= S.IVEXDJ
			AND @AddressType = 0		--Not join if AdrressType = 1 - Consumer
		LEFT OUTER JOIN [SCDATA].F40205	T --Line Type
			ON T.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE A.SDDOCO = @ReturnNumber
			AND A.SDDCTO = @ReturnType
			AND	A.SDKCOO = @ReturnCompany
	ORDER BY A.SDLNID ASC

	-- LOAD ORDER HEADER TEMPORARY TABLE
	SELECT DISTINCT
		CASE @AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
		CASE @AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
		ISNULL(B.SH$9TYP,0)			AS AddressBookType,
		A.SHVR01					AS CustomerPO,
		A.SHKCOO					AS ReturnCompany,
		A.SHDCTO					AS ReturnType,
		A.SHDOCO					AS ReturnNumber,
		A.SHTRDJ					AS TransactionDate,
		A.SHCRCD					AS CurrencyCode,
		A.SHCRRM					AS CurrencyMode,
		C.CVDL01					AS CurrencyDesc,
		' '							AS  BaseCurrency,
		' '							AS BaseCurrencyDesc,
		A.SHRYIN					AS PaymentInstrument,
		A.SHHOLD					AS HoldOrderCode,
		A.SHRCD						AS ReasonCode
	INTO	#TMP_ORDERHEADER
	FROM	[SCDATA].F4201 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
		ON	A.SHDOCO = B.SHDOCO
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	WHERE A.SHDOCO = @ReturnNumber
		AND	A.SHDCTO = @ReturnType
		AND A.SHKCOO = @ReturnCompany
	UNION ALL
	SELECT DISTINCT
		CASE @AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
		CASE @AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
		ISNULL(B.SH$9TYP,0)			AS AddressBookType,
		A.SHVR01					AS CustomerPO,
		A.SHKCOO					AS ReturnCompany,
		A.SHDCTO					AS ReturnType,
		A.SHDOCO					AS ReturnNumber,
		A.SHTRDJ					AS TransactionDate,
		A.SHCRCD					AS CurrencyCode,
		A.SHCRRM					AS CurrencyMode,
		C.CVDL01					AS CurrencyDesc,
		' '							AS  BaseCurrency,
		' '							AS BaseCurrencyDesc,
		A.SHRYIN					AS PaymentInstrument,
		A.SHHOLD					AS HoldOrderCode,
		A.SHRCD						AS ReasonCode
	FROM [SCDATA].F42019 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
		ON A.SHDOCO = B.SHDOCO
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = @ReturnNumber
		AND	A.SHKCOO = @ReturnCompany
		AND	A.SHDCTO = @ReturnType


	--Load BillTo Variables From Order Header
	SELECT TOP 1
		@ScBillTo = SCBillToNumber,
		@ScShipTo = SCShipToNumber,
		@AddressType = AddressBookType,
		@CurrencyMode = CurrencyMode
	FROM #TMP_ORDERHEADER

	IF (@CurrencyMode = 'F')
	BEGIN
		EXEC [DBO].CMM_GetConstantValue @ForeignConstant, @ForeignINID, @Foreign out
		IF(@Foreign = 'N')    /*Foreign is OFF*/
		BEGIN
			SELECT
				@BaseCurrencyCode =	B.CCCRCD,
				@BaseCurrencyDesc = C.CVDL01
			FROM #TMP_ORDERHEADER A
			INNER JOIN [SCDATA].F0010 B
				ON B.CCCO = A.ReturnCompany
			LEFT OUTER JOIN [SCDATA].F0013 C
				ON B.CCCRCD = C.CVCRCD
		END
	END

	SELECT
		A.SCBillToNumber,
		A.SCShipToNumber,
		A.AddressBookType,
		A.CustomerPO,
		A.ReturnCompany,
		A.ReturnType,
		A.ReturnNumber,
		A.TransactionDate,
		A.CurrencyCode,
		A.CurrencyMode,
		A.CurrencyDesc,
		ISNULL(@BaseCurrencyCode,' ') AS BaseCurrencyCode,
		ISNULL(@BaseCurrencyDesc, ' ') AS BaseCurrencyDesc,
		A.PaymentInstrument,
		A.HoldOrderCode,
		ISNULL(ISNULL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices,
		A.ReasonCode
	FROM #TMP_ORDERHEADER A
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.ReturnNumber
		AND Tax.STDCTO = A.ReturnType
		AND Tax.STKCOO = A.ReturnCompany
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.ReturnNumber
		AND TxHistory.STDCTO = A.ReturnType
		AND TxHistory.STKCOO = A.ReturnCompany

	EXEC [DBO].COM_GetSalesOrderInfo_BillTo @ReturnCompany,@ReturnType,@ReturnNumber,@ScBillTo,@AddressType,@ContactID

	SELECT
		A.ReturnCompany,
		A.ReturnType,
		A.ReturnNumber,
		A.LineNumber,
		A.TransactionDate,
		A.LineType,
		A.NextStatus,
		A.LastStatus,
		A.TaxableYN,
		A.TaxArea,
		A.TaxExplanationCode,
		A.OriginalOrderCompany,
        A.OriginalOrderNumber,
        A.OriginalOrderType,
		A.ShipToID,
		A.CostCenter,
		A.CostCenterHeader,
		A.ItemCrossRefNumber,
	    A.Description1,
		A.Description2,
		A.ShippingQuantity,
		A.ShippedQuantity,
		A.UnitOfMeasure,
		A.PricingUnitOfMeasure,
		A.BackorderedQuantity,
		A.CanceledQuantity,
		A.AmountUnitPrice,
		A.ForeignUnitPrice,
		A.AmountExtPrice,
		A.ForeignExtPrice,
		A.InventoryInterface,
		A.CarrierID,
		A.ModeOfTransportation,
		A.IdentifierShortItem,
		A.LongItemNumber,
		A.AuxItemNumber,
		(CASE WHEN @SOrderRestric = 1 THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END
			ELSE 'N' END ) AS IsOrderRestricted,
		A.OverridePrice,
		A.StockingType,
		A.RelatedKitItemNo,
		A.KitMasterLineNo,
		A.ComponentLineNumber,
		ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
		ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
		ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
		ISNULL(ISNULL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
		ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
		ISNULL(ISNULL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
		ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
		ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		ISNULL(C.RFOGNO, 0 ) AS ParentLineNo
	FROM #TMP_ORDERDETAIL A
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.ReturnNumber
		AND Tax.DTDCTO = A.ReturnType
		AND Tax.DTKCOO = A.ReturnCompany
		AND Tax.DTLNID = A.LineNumber
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.ReturnNumber
		AND TxHistory.DTDCTO = A.ReturnType
		AND TxHistory.DTKCOO = A.ReturnCompany
		AND TxHistory.DTLNID = A.LineNumber
	LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
		ON SOR1.DRKY = OriginalOrderType
		AND SOR1.DR$9INID = @SOrderINID
		AND SOR1.DR$9CNST = @SOrderConstant
	LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON C.RFDOCO = A.ReturnNumber 
		AND C.RFDCTO = A.ReturnType
		AND C.RFKCOO = A.ReturnCompany
		AND C.RFLNID = A.LineNumber


	EXEC [DBO].COM_GetSalesOrderInfo_Payments @ReturnCompany,@ReturnType,@ReturnNumber

	DROP TABLE #TMP_ORDERDETAIL
	DROP TABLE #TMP_ORDERHEADER

GO


  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetReturnOrderRecentList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetReturnOrderRecentList
	END

GO

-- #desc							Returns the last @OrdersToDisplay most recent returns
-- #bl_class						Premier.Commerce.ReturnOrderRecentList.cs
-- #db_dependencies					COM_GetRecentDocsFnc, COM_GetRecentDocExtendedFnc
-- #db_references					N/A

-- #param @Company					Company if is 00000 is '*'
-- #param @InstallationID			Installation Id
-- #param @AddressBookType			Address Book Type
-- #param @AddressNumber			Address Number
-- #param @OrderssToDisplay			Quantity of rows to be returned

CREATE PROCEDURE [DBO].COM_GetReturnOrderRecentList
(
	@Company					NVARCHAR(5),
	@InstallationID				NVARCHAR(3),
	@AddressBookType			FLOAT,
	@AddressNumber				FLOAT,
	@OrdersToDisplay			INT
	
)
AS
	/*Gets the Sales Order Document Restrictions	*/
	DECLARE @ROrderRestric	NVARCHAR(256)
	DECLARE @ROrderINID     NVARCHAR(3)
	DECLARE @ROrderConstant	NVARCHAR(10)
    SET @ROrderConstant = 'CO_RESTRIC'
    SET @ROrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @ROrderConstant, @ROrderINID OUT, @ROrderRestric OUT
    
    /*Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	
	

	IF (@Company = '00000')
	BEGIN
		SET @Company = '*'
	END
	
	IF(@AddressBookType = 0) /* CUSTOMER */
	BEGIN
		SELECT 
				SHDOCO			AS OrderNumber, 
				SHDCTO			AS OrderType,
				SHKCOO			AS OrderCompany, 
				SHVR01		    AS CustomerRef,
				SHTRDJ			AS OrderDate										
		FROM [DBO].COM_GetRecentDocsFnc (@Company, @ROrderINID, @ROrderConstant, @ConstantInstallation, @CompanyConstant, @ROrderRestric, @AddressNumber)
		WHERE
			(RNUM BETWEEN 1 AND @OrdersToDisplay)
		ORDER BY RNUM

	END
	ELSE IF (@AddressBookType = 1) /* CONSUMER */
	BEGIN
		SELECT 
				SHDOCO			AS OrderNumber, 
				SHDCTO			AS OrderType,
				SHKCOO			AS OrderCompany, 
				SHVR01		    AS CustomerRef,
				SHTRDJ			AS OrderDate										
		FROM [DBO].COM_GetRecentDocExtendedFnc (@Company, @ROrderINID, @ROrderConstant, @ConstantInstallation, @CompanyConstant, @ROrderRestric, @AddressNumber) 
		WHERE
			(RNUM BETWEEN 1 AND @OrdersToDisplay)
		ORDER BY RNUM

	END

GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetReturnOrdHeadSrchList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetReturnOrdHeadSrchList
	END

GO

-- #desc						N/A
-- #bl_class					Premier.Commerce.ReturnOrderHeaderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param @InstallationID		Installation Id
-- #param @Company				Company
-- #param @ReturnType			Document type to search for.
-- #param @ReturnNumber			Order Number
-- #param @AddressNumber		Address Number
-- #param @AddressBookType		Address Book Type
-- #param @ReturnDateFrom		Date Range
-- #param @ReturnDateTo			Date Range
-- #param @ReferenceNumber		Reference Number
-- #param @PageIndex			Page Index
-- #param @PageSize				Page Size
-- #param @SortBy				Column to filter by Return Number, Order Number, Customer Reference, Transaction Date
-- #param @SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value

CREATE PROCEDURE [DBO].COM_GetReturnOrdHeadSrchList
(
	@InstallationID			NVARCHAR(3),
	@Company				NVARCHAR(5),
	@ReturnType				NVARCHAR(2),
	@AddressNumber			FLOAT,
	@ReturnNumber			FLOAT,
	@AddressBookType		FLOAT,
	@ReturnDateFrom			NUMERIC,
	@ReturnDateTo			NUMERIC,
	@ReferenceNumber		NVARCHAR(25),
	@PageIndex				FLOAT,
    @PageSize				FLOAT,
	@SortBy					NVARCHAR(40),
	@SortDir				NVARCHAR(3)
)
AS		
	SET NOCOUNT ON	

	--Dynamic
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @SQL_DYNAMICSELECT NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @INNER_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @INNER2_DYNAMIC NVARCHAR(MAX) = ''

	--Dynamic Sort
	DECLARE @SORT_DYNAMIC NVARCHAR(120)
	DECLARE @SORTDIR_DYNAMIC NVARCHAR(5)
	
	/*Gets the Sales Order Document Restrictions	*/
	DECLARE @ROrderRestric	NVARCHAR(256)
	DECLARE @ROrderINID     NVARCHAR(3)
	DECLARE @ROrderConstant	NVARCHAR(10)
    SET @ROrderConstant = 'CO_RESTRIC'
    SET @ROrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @ROrderConstant, @ROrderINID OUT, @ROrderRestric out
    
    /*Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	

	/* Gets the Sales Order Document Restrictions Parameters*/
	DECLARE @SORestric  NVARCHAR(256)   
	DECLARE @SOINID		NVARCHAR(3) 
	DECLARE @SOConstant	NVARCHAR(10)  
	SET @SOConstant = 'SO_RESTRIC' 
	SET @SOINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue @SOConstant, @SOINID out, @SORestric out

	------------------------------------------------------
	-- Dynamic query conditions
	------------------------------------------------------

	/* Dynamic sort direction statement */
	SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

	SET @SORT_DYNAMIC = CASE
		WHEN @SortBy = 'ReturnNumber' THEN 'A.SHDOCO ' + @SORTDIR_DYNAMIC + ', A.SHTRDJ DESC'
		WHEN @SortBy = 'OrderNumber' THEN '(CASE A.SHOORN WHEN '''' THEN 0 END), A.SHOORN ' + @SORTDIR_DYNAMIC + ', A.SHTRDJ DESC'
		WHEN @SortBy = 'CustomerReference' THEN 'A.SHVR01 ' + @SORTDIR_DYNAMIC + ', A.SHTRDJ DESC'
		WHEN @SortBy = 'TransactionDate' THEN 'A.SHTRDJ ' + @SORTDIR_DYNAMIC + ', A.SHDOCO DESC'
		ELSE 'A.SHTRDJ DESC, A.SHDOCO DESC'
	END

	IF (@AddressNumber IS NOT NULL) BEGIN
		IF (@AddressBookType = 0) BEGIN
			SET @WHERE_DYNAMIC += N' A.SHAN8 = @AddressNumber';
		END
		ELSE BEGIN
			SET @WHERE_DYNAMIC += N' B.SH$9AN8 = @AddressNumber';
		END
	END

	IF (@ReturnNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'A.SHDOCO = @ReturnNumber'
	END

	IF (@ReturnDateFrom IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'A.SHTRDJ >= @ReturnDateFrom'
	END

	IF (@ReturnDateTo IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'A.SHTRDJ <= @ReturnDateTo'
	END

	IF (@ReferenceNumber <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' A.SHVR01 LIKE ''%'' + @ReferenceNumber + ''%'''
	END

	IF (@ReturnType <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'A.SHDCTO = @ReturnType'
	END

	IF (@Company <> N'*' AND @Company <> N'00000') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'A.SHKCOO = @Company'
	END

	IF (@CompanyConstant = 'L')BEGIN
			SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 D
								 ON D.CICO = SHCO --Company
									AND CI$9INID = @ConstantInstallation '
		END

	IF (@ROrderRestric = N'1' ) BEGIN
		SET @INNER_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 SOR
									ON SOR.DRKY = A.SHDCTO
									AND SOR.DR$9INID = @ROrderINID
									AND SOR.DR$9CNST = @ROrderConstant '
	END

	IF (@WHERE_DYNAMIC <> N'')
		SET @WHERE_DYNAMIC = N' WHERE ' + @WHERE_DYNAMIC

	------------------------------------------------------
	-- Dynamic query
	------------------------------------------------------

	IF (@AddressBookType = 0) BEGIN
		SET @SQL_DYNAMIC = N'
		;WITH CTE AS (
			SELECT 
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ, 
				A.SHOORN		
			FROM [SCDATA].F4201 A	
			'+ @INNER_DYNAMIC
			+ @WHERE_DYNAMIC + N' 
			UNION ALL	
			SELECT 
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ, 
				A.SHOORN			
			FROM [SCDATA].F42019 A
			'+ @INNER_DYNAMIC
			+ @WHERE_DYNAMIC + N' 
		), PAGING AS (
			SELECT 
				SHDOCO		AS ReturnNumber, 
				SHDCTO		AS ReturnType,
				SHKCOO		AS ReturnCompany, 
				SHVR01		AS CustomerReference, 
				SHTRDJ		AS TransactionDate,
				COUNT (DISTINCT SDOORN) AS ReturnedOrders,
				ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM
			FROM
				CTE A
			INNER JOIN [SCDATA].F0010 TB
				ON TB.CCCO = SHKCOO  
			LEFT OUTER JOIN [SCDATA].F4211 
				ON  SDDOCO = A.SHDOCO
				AND SDDCTO = A.SHDCTO
				AND SDKCOO = A.SHKCOO
				AND SDOORN <> ''''
			GROUP BY A.SHDOCO, A.SHDCTO, A.SHKCOO, A.SHVR01, A.SHTRDJ, A.SHOORN
		)
		SELECT 
			ReturnNumber, ReturnType, ReturnCompany, CustomerReference, TransactionDate, 
			O.SDOKCO OriginalOrderCompany, O.SDOORN OriginalOrderNumber, O.SDOCTO OriginalOrderType, ReturnedOrders,
			(CASE WHEN @SORestric = ''1'' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS ISORDERRESTRICTED, 
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM 
			PAGING A
		OUTER APPLY [DBO].COM_GetOriginalOrderInfoFnc (A.ReturnNumber, A.ReturnType, A.ReturnCompany) O
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
			ON SOR1.DRKY = O.SDOCTO
			AND SOR1.DR$9INID = @SOINID
			AND SOR1.DR$9CNST = @SOConstant
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) ';
	END
	ELSE BEGIN	/* Consumer type */
		SET @SQL_DYNAMIC = N'
		;WITH CTE AS (
			SELECT 
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ, 
				A.SHOORN
			FROM [SCDATA].F4201 A					/*Sales Order Header*/
			INNER JOIN [SCDATA].FQ674201 B	/*Extended Sales Order Header*/
				ON B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO 
				AND B.SH$9TYP = 1
			'+ @INNER_DYNAMIC
			+ @WHERE_DYNAMIC + N' 
			UNION ALL	
			SELECT 
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ, 
				A.SHOORN
			FROM [SCDATA].F42019 A	
			INNER JOIN [SCDATA].FQ674201 B	/*Extended Sales Order Header*/
				ON B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO 
				AND B.SH$9TYP = 1
			'+ @INNER_DYNAMIC
			+ @WHERE_DYNAMIC + N' 
		), PAGING AS (
			SELECT 
				SHDOCO		AS ReturnNumber, 
				SHDCTO		AS ReturnType,
				SHKCOO		AS ReturnCompany, 
				SHVR01		AS CustomerReference, 
				SHTRDJ		AS TransactionDate,
				COUNT (DISTINCT SDOORN) AS ReturnedOrders,
				ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM
			FROM
				CTE A
			INNER JOIN [SCDATA].F0010 TB
				ON TB.CCCO = SHKCOO  
			LEFT OUTER JOIN [SCDATA].F4211 
				ON  SDDOCO = A.SHDOCO
				AND SDDCTO = A.SHDCTO
				AND SDKCOO = A.SHKCOO
				AND SDOORN <> ''''
			GROUP BY A.SHDOCO, A.SHDCTO, A.SHKCOO, A.SHVR01, A.SHTRDJ, A.SHOORN
		)
		SELECT 
			ReturnNumber, ReturnType, ReturnCompany, CustomerReference, TransactionDate, 
			O.SDOKCO OriginalOrderCompany, O.SDOORN OriginalOrderNumber, O.SDOCTO OriginalOrderType, ReturnedOrders,
			(CASE WHEN @SORestric = ''1'' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS ISORDERRESTRICTED, 
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM 
			PAGING A
		OUTER APPLY [DBO].COM_GetOriginalOrderInfoFnc (A.ReturnNumber, A.ReturnType, A.ReturnCompany) O
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
			ON SOR1.DRKY = O.SDOCTO
			AND SOR1.DR$9INID = @SOINID
			AND SOR1.DR$9CNST = @SOConstant
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) ';
	END

EXECUTE sp_executesql @SQL_DYNAMIC, N'
	@AddressNumber		FLOAT,
	@ReturnNumber		FLOAT,
	@ReturnDateFrom		NUMERIC,
	@ReturnDateTo		NUMERIC,
	@ReferenceNumber	NVARCHAR(25),
	@ReturnType			NVARCHAR(2),
	@Company			NVARCHAR(5),
	@ConstantInstallation	NVARCHAR(3),
	@SORestric			NVARCHAR(256),
	@SOINID				NVARCHAR(3), 
	@SOConstant			NVARCHAR(10), 
	@ROrderINID			NVARCHAR(3),
	@ROrderConstant		NVARCHAR(10),
	@PageIndex			FLOAT, 
	@PageSize			FLOAT',
	@AddressNumber = @AddressNumber,
	@ReturnNumber = @ReturnNumber,
	@ReturnDateFrom = @ReturnDateFrom,
	@ReturnDateTo = @ReturnDateTo,
	@ReferenceNumber = @ReferenceNumber,
	@ReturnType = @ReturnType,
	@Company = @Company,
	@ConstantInstallation = @ConstantInstallation,
	@SORestric = @SORestric,
	@SOINID	 = @SOINID, 
	@SOConstant	= @SOConstant,
	@ROrderINID = @ROrderINID,
	@ROrderConstant	= @ROrderConstant,
	@PageIndex = @PageIndex, 
	@PageSize = @PageSize
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrder'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrder
	END

GO

-- #desc							N/A
-- #bl_class						Premier.Commerce.SalesOrderWeb.cs
-- #db_dependencies					COM_GetSalesOrderHeader,COM_GetSalesOrderDetail
-- #db_references					N/A

-- #param @Company					Company Number to search for.
-- #param @OrderType				Order number to search for.
-- #param @OrderNumber				Order type to search for.
-- #param @RetrieveWebContentInfo	Condition to validate if Retrieve Web Content Info or no.
-- #param @InstallationID			Installation Id

CREATE Procedure [DBO].COM_GetSalesOrder
(
	@Company					NVARCHAR(5),
	@OrderType					NVARCHAR(3),
	@OrderNumber				FLOAT,
	@InstallationID				NVARCHAR(3),
    @RetrieveWebContentInfo		INT,
	@LangPref					NVARCHAR(2)
)
AS

--Read Header information
EXEC [DBO].COM_GetSalesOrderHeader @Company, @OrderType, @OrderNumber , @InstallationID

--Read Line Detail information
EXEC [DBO].COM_GetSalesOrderDetail @Company, @OrderType, @OrderNumber , @InstallationID, @RetrieveWebContentInfo, @LangPref

--Read All Payments Information
EXEC [DBO].COM_GetSalesOrderPayments @Company, @OrderType, @OrderNumber 

/*Configured Items*/
EXEC [DBO].COM_GetSOConfiguredLineList @Company, @OrderType, @OrderNumber, @LangPref

RETURN 

GO






   IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderHeadShipInfo'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderHeadShipInfo
	END
GO

-- #desc					Get Sales Order Head Ship Info
-- #bl_class				Premier.Commerce.GetSalesOrderHeadShipInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A
-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber

CREATE PROCEDURE [DBO].COM_GetSalesOrderHeadShipInfo
	@OrderCompany NVARCHAR(5),
	@OrderType NVARCHAR(3),
	@OrderNumber FLOAT,
	@ShipToNumber FLOAT OUTPUT
AS	
	SELECT @ShipToNumber = SHSHAN
				  FROM [SCDATA].F4201 
				  WHERE SHKCOO = @OrderCompany 					
					AND SHDCTO = @OrderType
					AND SHDOCO = @OrderNumber 
		
	IF (@ShipToNumber IS NULL) OR (@ShipToNumber = 0)
	BEGIN
		SELECT @ShipToNumber = SHSHAN
						FROM [SCDATA].F42019 
						WHERE SHKCOO = @OrderCompany
							AND SHDCTO = @OrderType
							AND SHDOCO = @OrderNumber
	END
	
	IF (@ShipToNumber IS NULL)
	BEGIN
		SET @ShipToNumber = 0
	END
	
GO
  
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderHeadSrchList'))
	BEGIN
		DROP PROCEDURE [DBO].COM_GetSalesOrderHeadSrchList
	END
GO
-- #desc						N/A
-- #bl_class					Premier.Commerce.SalesOrderHeaderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @Company				Company
-- #param @OrderType			Document type to search for.
-- #param @OrderNumber			Order Number
-- #param @AddressNumber		Address Number
-- #param @AddressBookType		Address Book Type
-- #param @OrderDateFrom		Date Range
-- #param @OrderDateTo			Date Range
-- #param @ReferenceNumber		Reference Number
-- #param @AllOpenOrders		AllOpenOrders
-- #param @ItemNumber			Specific item to search for
-- #param @SortBy				Column to filter by OrderType, OrderNumber, CustomerReference,
--								OrderDate(Default Value), ProductTotal */
-- #param @SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value
-- #param @PageIndex			Page Index
-- #param @PageSize				Page Size

CREATE PROCEDURE [DBO].COM_GetSalesOrderHeadSrchList
(
	@InstallationID			NVARCHAR(3),
	@Company				NVARCHAR(5),
	@OrderType				NVARCHAR(2),
	@AddressNumber			FLOAT,
	@OrderNumber			FLOAT,
	@ShipToNumber			FLOAT,
	@AddressBookType		FLOAT,
	@OrderDateFrom			NUMERIC,
	@OrderDateTo			NUMERIC,
	@ReferenceNumber		NVARCHAR(25),
	@AllOpenOrders			NVARCHAR(3),
	@ItemNumber				FLOAT,
	@SortBy					NVARCHAR(40),
	@SortDir				NVARCHAR(3),
	@PageIndex				FLOAT,
	@PageSize				FLOAT
)
AS
	SET NOCOUNT ON

	--Dynamic
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @SQL_DYNAMICSELECT NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @FROM_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @INNER_COMPANY NVARCHAR(MAX) = ''
	DECLARE @INNER_DOCUMENT NVARCHAR(MAX) = ''
	DECLARE @STATUS_DYNAMIC NVARCHAR(MAX) = ''

	--Dynamic Sort
	DECLARE @SORT_DYNAMIC NVARCHAR(60)
	DECLARE @SORTDIR_DYNAMIC NVARCHAR(5)


	-- Gets the Sales Order Document Restrictions
	DECLARE @SOrderRestric	NVARCHAR(256)
	DECLARE @SOrderConstant NVARCHAR(10)
	DECLARE @SOrderINID     NVARCHAR(3)
	SET @SOrderINID = @InstallationID
	SET @SOrderConstant = N'SO_RESTRIC'
	EXEC [DBO].CMM_GetConstantValue  @SOrderConstant, @SOrderINID OUT, @SOrderRestric OUT

	-- Gets the Freight Line Type
	DECLARE @FreightLineType	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'FREIGHTLN', @InstallationID, @FreightLineType OUT

	-- Gets the Discount Line Type
	DECLARE @DiscountLineType	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'DISCOUNTLN', @InstallationID, @DiscountLineType OUT

	-- Gets the Order History Status
	DECLARE @OrderHistoryStatus	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'ORD_SCHOPN', @InstallationID, @OrderHistoryStatus OUT

	-- Gets Account Receivable Installation Companies setting
	DECLARE @CompanyRestric	NVARCHAR(256)
	DECLARE @CompanyINID	NVARCHAR(3)
	SET @CompanyINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue N'INSCOMPANY', @CompanyINID OUT, @CompanyRestric OUT

	--Gets Foreign Constant
	DECLARE @ForeignConstant	NVARCHAR(10)
	EXEC [DBO].CMM_GetConstantValue N'FOREGCURYN', @InstallationID, @ForeignConstant OUT

	-- Gets the Surcharge Line Type
	DECLARE @SurchargeLineType	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'SURCHARGLN', @InstallationID, @SurchargeLineType OUT
	------------------------------------------------------
	-- Dynamic query conditions
	------------------------------------------------------

	/* Dynamic sort direction statement */
	SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

	SET @SORT_DYNAMIC = CASE
		WHEN @SortBy = 'OrderDate' THEN 'OrderDate ' + @SORTDIR_DYNAMIC + ', OrderNumber DESC'
		WHEN @SortBy = 'OrderType' THEN 'OrderType ' + @SORTDIR_DYNAMIC + ', OrderDate DESC'
		WHEN @SortBy = 'OrderNumber' THEN 'OrderNumber ' + @SORTDIR_DYNAMIC + ', OrderDate DESC'
		WHEN @SortBy = 'CustomerReference' THEN 'CustomerReference ' + @SORTDIR_DYNAMIC + ', OrderDate DESC'
		WHEN @SortBy = 'ProductTotal' THEN 'OrderTotal ' + @SORTDIR_DYNAMIC + ', OrderDate DESC'
		ELSE 'OrderDate DESC, OrderNumber DESC'
	END

	IF (@AddressNumber IS NOT NULL) 
		SET @WHERE_DYNAMIC = N'BillToNumber = @AddressNumber'


	IF (@OrderDateFrom IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'SHTRDJ BETWEEN @OrderDateFrom AND @OrderDateTo'
	END

	IF (@OrderNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'SHDOCO = @OrderNumber'
	END

	IF (@ShipToNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'SDLNTY <> @FreightLineType AND SDLNTY <> @DiscountLineType AND SDLNTY <> @SurchargeLineType AND SHAN = @ShipToNumber'
	END

	IF (@ItemNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
			SET @WHERE_DYNAMIC += N'SDLNTY <> @FreightLineType AND SDLNTY <> @DiscountLineType AND SDLNTY <> @SurchargeLineType AND SDITM = @ItemNumber'
	END

	IF (@OrderType <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'SHDCTO = @OrderType'
	END

	IF (@AllOpenOrders = N'1') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET	@WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'SDNXTR <= @OrderHistoryStatus '
		SET @STATUS_DYNAMIC = N' ''OPEN'' as OrderStatus'
	END
	ELSE
		SET @STATUS_DYNAMIC = N'DBO.COM_GetSalesOrderStatusFnc (OrderNumber, OrderCompany, OrderType, @OrderHistoryStatus, @FreightLineType, @DiscountLineType, @SurchargeLineType) as OrderStatus'

	IF (@Company <> N'*' AND @Company <> N'00000') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'SHKCOO = @Company'
	END

	IF (@ReferenceNumber <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N'SHVR01 LIKE ''%'' + @ReferenceNumber + ''%'''
		SET @ReferenceNumber = @ReferenceNumber
	END


	IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC = N' WHERE ' + @WHERE_DYNAMIC

	------------------------------------------------------
	-- Dynamic query from
	------------------------------------------------------

	IF (@ShipToNumber IS NOT NULL) OR (@ItemNumber IS NOT NULL) OR (@AllOpenOrders = '1') BEGIN
		IF (@AddressBookType = 0) BEGIN
			SET @FROM_DYNAMIC = N' FROM [DBO].COM_CustomerSOHeadSrchVW VW ' ;
		END
		ELSE IF (@AddressBookType = 1) BEGIN
			SET @FROM_DYNAMIC = N' FROM [DBO].COM_ConsumerSOHeadSrchVW VW ' ;
		END
		ELSE BEGIN
			SET @FROM_DYNAMIC = N' FROM [DBO].COM_SalesOrderHeadSrchVW VW ' ;
		END
	END
	ELSE BEGIN
		IF (@AddressBookType = 0) BEGIN
			SET @FROM_DYNAMIC = N' FROM [DBO].COM_CustomerOrderHeaderVW VW ' ;
		END
		ELSE IF (@AddressBookType = 1) BEGIN
			SET @FROM_DYNAMIC = N' FROM [DBO].COM_ConsumerOrderHeaderVW VW ' ;
		END
		ELSE BEGIN
			SET @FROM_DYNAMIC = N' FROM [DBO].COM_SalesOrderHeadVW VW ' ;
		END
	END

	IF (@SOrderRestric = N'1') BEGIN
		SET @INNER_DOCUMENT += N' INNER JOIN [SCDATA].FQ67008 DR
									ON DR.DR$9INID = @SOrderINID
									AND DR.DR$9CNST = @SOrderConstant
									AND DR.DRKY = OrderType'
	END
	IF (@CompanyRestric = 'L')
		BEGIN
			SET @INNER_COMPANY += N' INNER JOIN [SCDATA].FQ679912 CR
								 ON CR.CICO = SHCO
								 AND CR.CI$9INID = @CompanyINID '
		END

	------------------------------------------------------
	-- Dynamic query
	------------------------------------------------------

	SET @SQL_DYNAMIC = N'
	SELECT DISTINCT
		SHDOCO AS OrderNumber,
		SHDCTO AS OrderType,
		SHKCOO AS OrderCompany,
		SHVR01 AS CustomerReference,
		SHTRDJ AS OrderDate,
		SHDRQJ AS RequestedDate,
		SHOTOT AS ProductTotal,
		SHFAP AS ProductTotalForeign,
		CASE WHEN @ForeignConstant = ''Y'' AND SHCRRM = ''F'' THEN SHFAP ELSE SHOTOT END AS OrderTotal,
		SHCRCD AS CurrencyCode,
		SHCRRM AS CurrencyMode,
		SHHOLD AS HoldCode,
		SHRORN AS RelatedOrderNumber,
		SHRCTO AS RelatedOrderType,
		SHDEL1 AS DeliveryInst1,
		SHDEL2 AS DeliveryInst2,
		BaseCurrencyCode,
		AddressBookType,
		BillToNumber,
		ShipToNumber
		INTO #TMP_TABLE ' 
		+ @FROM_DYNAMIC 
		+ @INNER_COMPANY  
		+ @WHERE_DYNAMIC 
		+'
		; WITH PAGING AS
		(
			SELECT
				OrderNumber,
				OrderType,
				OrderCompany,
				CustomerReference,
				OrderDate,
				RequestedDate,
				ProductTotal,
				ProductTotalForeign,
				OrderTotal,
				CurrencyCode,
				CurrencyMode,
				HoldCode,
				RelatedOrderNumber,
				RelatedOrderType,
				DeliveryInst1,
				DeliveryInst2,
				BaseCurrencyCode,
				AddressBookType,
				BillToNumber,
				ShipToNumber,
				ROW_NUMBER() OVER (ORDER BY '+@SORT_DYNAMIC+') AS RNUM
			FROM #TMP_TABLE '
			+ @INNER_DOCUMENT + ' )
		SELECT 
			OrderNumber,
			OrderType,
			OrderCompany,
			CustomerReference,
			OrderDate,
			RequestedDate,
			ProductTotal,
			ProductTotalForeign,
			CurrencyCode,
			CurrencyMode,
			HoldCode,
			RelatedOrderNumber,
			RelatedOrderType,
			DeliveryInst1,
			DeliveryInst2,
			BaseCurrencyCode,
			AddressBookType,
			BillToNumber,
			ShipToNumber,'+
			@STATUS_DYNAMIC + ',
			TotalRowCount = (SELECT COUNT(1) FROM PAGING )
		FROM PAGING A 
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))  '

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@Company	NVARCHAR(5), @OrderType	NVARCHAR(2), @AddressNumber	FLOAT, @OrderNumber	FLOAT, @ShipToNumber FLOAT,
										@OrderDateFrom NUMERIC, @OrderDateTo NUMERIC, @ReferenceNumber	NVARCHAR(25),
										@ItemNumber FLOAT, @OrderHistoryStatus	NVARCHAR(256),
										@FreightLineType NVARCHAR(256), @DiscountLineType NVARCHAR(256), @SurchargeLineType NVARCHAR(256), @SOrderINID NVARCHAR(3), @SOrderConstant NVARCHAR(10), 
										@CompanyINID	NVARCHAR(3), @ForeignConstant	NVARCHAR(10),@PageIndex FLOAT, @PageSize FLOAT',
										@Company = @Company, @AddressNumber = @AddressNumber, @OrderType = @OrderType, @OrderNumber = @OrderNumber,
										@ShipToNumber = @ShipToNumber, @OrderDateFrom = @OrderDateFrom,
										@OrderDateTo = @OrderDateTo, @ReferenceNumber = @ReferenceNumber, @ItemNumber = @ItemNumber,
										@OrderHistoryStatus = @OrderHistoryStatus, @FreightLineType = @FreightLineType,
										@DiscountLineType = @DiscountLineType, @SurchargeLineType = @SurchargeLineType, @SOrderINID = @SOrderINID, @SOrderConstant = @SOrderConstant, @CompanyINID = @CompanyINID, 
										@ForeignConstant = @ForeignConstant,@PageIndex = @PageIndex, @PageSize = @PageSize

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderInfo_Z'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSalesOrderInfo_Z
	END
GO

-- #desc							Load a order detail
-- #bl_class						Premier.Commerce.SalesOrderInfo.cs
-- #db_dependencies					COM_GetSalesOrderBillToInfo, COM_GetSalesOrderShipments
--									COM_GetSalesOrderInfo_Payments, COM_GetSOReturnLineList, COM_GetSalesOrderInfo_Z
-- #db_references					N/A

-- #param @InstallationID			Installation ID
-- #param @OrderCompany				Company ID
-- #param @OrderType				Document Type
-- #param @OrderNumber				OrderNumber
-- #param @RetrieveReturnInfo		Retrieve Return Info
-- #param @RetrieveWebContentInfo	Retrieve Web Content Info
-- #param @LangPref					Language Preference

CREATE PROCEDURE [DBO].COM_GetSalesOrderInfo_Z
	@InstallationID NVARCHAR(3),
	@OrderCompany	NVARCHAR(5),
	@OrderType	NVARCHAR(2),
	@OrderNumber	FLOAT,
	@RetrieveReturnInfo FLOAT,
	@RetrieveWebContentInfo INT,
	@LangPref NVARCHAR(2)
AS

	/* STORE PROCEDURE VARIABLES */
	DECLARE @ScBillTo		FLOAT
	DECLARE @ScShipTo		FLOAT
	DECLARE	@AddressType	FLOAT
	DECLARE	@ContactID		FLOAT	
	DECLARE @Freight INT
	DECLARE @IsOverrideShipTo INT
	 
	DECLARE @SInvoiceRestric     NVARCHAR(1)
    DECLARE @SInvoiceINID        NVARCHAR(3)
	DECLARE @SInvoiceConstant     NVARCHAR(10)
	
	--Gets the Invoice Document Restrictions
	set @SInvoiceINID = @InstallationID
	set @SInvoiceConstant = 'AR_RESTRIC'
	EXEC [DBO].CMM_GetConstantValue @SInvoiceConstant, @SInvoiceINID out, @SInvoiceRestric OUT

	-- Gets Cust Cross Document Restrictions
	DECLARE @CustCrossRefType	NVARCHAR(2)
	DECLARE @CustCrossINID		NVARCHAR(3)
	set @CustCrossINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossINID, @CustCrossRefType out
    
    DECLARE @CurrentJulianDate INTEGER
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
    
    DECLARE @CancelLn			NVARCHAR(1)
	DECLARE @CancelLnINID	    NVARCHAR(3)
	DECLARE @CancelLnConstant	NVARCHAR(10)
    -- Gets the Order History Status
    SET @CancelLnConstant = 'YNCANCELLN'
    SET @CancelLnINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @CancelLnConstant, @CancelLnINID, @CancelLn out
    
    DECLARE @CurrencyMode		 NVARCHAR(1)
    DECLARE @BaseCurrencyCode        NVARCHAR(3)
    DECLARE @BaseCurrencyDesc    NVARCHAR(30)    
    
    -- Foreign Constant
    DECLARE @Foreign     NVARCHAR(1)
    DECLARE @ForeignINID        NVARCHAR(3)
	DECLARE @ForeignConstant     NVARCHAR(10)
	SET @ForeignINID = @InstallationID
	SET @ForeignConstant = 'FOREGCURYN'

    --Load Address Book Type Variable From Order Header
	SELECT TOP 1
		@AddressType = ISNULL(B.SH$9TYP,0),
		@ContactID	 = ISNULL(B.SHIDLN,0)
	FROM	[SCDATA].FQ674201 B
	WHERE	B.SHDOCO = @OrderNumber
		AND	B.SHKCOO = @OrderCompany
		AND	B.SHDCTO = @OrderType

	IF @AddressType is null
	BEGIN
		SET @AddressType =0
		SET @ContactID =0
	END
		
	-- LOAD ORDER DETAIL TEMPORARY TABLE
	SELECT DISTINCT 			
			A.SDKCOO				AS OrderCompany,
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS OrderNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,			
			A.SDLTTR				AS LastStatus,			
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDIVD					AS DateInvoice,
			A.SDKCO					AS InvoiceCompany,
			A.SDDOC					AS InvoiceNumber,
			A.SDDCT					AS InvoiceType,
			A.SDSHAN				AS ShipToID,
			/* When is Customer returns SHAN from F4211 */
			CASE @AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
			' '						AS ShipToName,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			ISNULL(S.IVCITM,'')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			ISNULL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			' '						AS IsInvoiceRestricted,
			ISNULL(B.SD$9SLN,0)		AS ShipLineNumber,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			CASE A.SDADDJ 
				WHEN 0 THEN A.SDTRDJ 
				ELSE A.SDADDJ END	AS ShippedDate,
			A.SDLOCN				AS Location,
			A.SDLOTN				AS LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			ISNULL(C.RFOGNO, 0 ) AS ParentLineNo,
			CASE A.SDSO08 WHEN '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
		INTO 	#TMP_ORDERDETAIL
		FROM	[SCDATA].F4211 A		--Standard Sales OrderDetail
		LEFT OUTER JOIN [SCDATA].FQ674211 B
			ON 	B.SDKCOO = A.SDKCOO
			AND B.SDDOCO = A.SDDOCO
			AND B.SDDCTO = A.SDDCTO
			AND B.SDLNID = A.SDLNID
		LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
			ON A.SDKCOO = C.RFKCOO
			AND A.SDDOCO = C.RFDOCO
			AND A.SDDCTO = C.RFDCTO
			AND A.SDLNID = C.RFLNID
		LEFT OUTER JOIN [SCDATA].F4104	S --Item Cross Ref
			ON  @AddressType = 0		--Not join if AdrressType = 1 - Consumer
			AND	S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND S.IVXRT = @CustCrossRefType
			AND @CurrentJulianDate >= S.IVEFTJ AND @CurrentJulianDate <= S.IVEXDJ
		INNER JOIN [SCDATA].F40205	T --Line Type
			ON T.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE	A.SDDOCO = @OrderNumber
		AND		A.SDDCTO = @OrderType
		AND		A.SDKCOO = @OrderCompany
		AND (@CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
	UNION ALL
	SELECT DISTINCT 
			A.SDKCOO				AS OrderCompany, 
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS OrderNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDIVD					AS DateInvoice,
			A.SDKCO					AS InvoiceCompany,
			A.SDDOC					AS InvoiceNumber,
			A.SDDCT					AS InvoiceType,
			A.SDSHAN				AS ShipToID,
			/* When is Customer returns SHAN from F42119 */
			CASE @AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
			' '						AS ShipToName,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			ISNULL(S.IVCITM,' ')	AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			ISNULL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A. SDLITM,
			A. SDAITM,
			' '						AS IsInvoiceRestricted,
			ISNULL(B.SD$9SLN,0)		AS ShipLineNumber,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			CASE A.SDADDJ 
				WHEN 0 THEN A.SDTRDJ 
				ELSE A.SDADDJ END	AS ShippedDate,
			A.SDLOCN				AS Location,
			A.SDLOTN				AS LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			ISNULL(C.RFOGNO, 0 ) AS ParentLineNo,
			CASE A.SDSO08 WHEN '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
	FROM 	[SCDATA].F42119 A    	
			LEFT OUTER JOIN [SCDATA].FQ674211 B 
				ON 	A.SDDOCO = B.SDDOCO 
				AND A.SDDCTO = B.SDDCTO
				AND A.SDKCOO = B.SDKCOO
				AND A.SDLNID = B.SDLNID
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON A.SDKCOO = C.RFKCOO
				AND A.SDDOCO = C.RFDOCO
				AND A.SDDCTO = C.RFDCTO
				AND A.SDLNID = C.RFLNID
			LEFT OUTER JOIN [SCDATA].F4104	S --Item Cross Ref
				ON  S.IVAN8  = A.SDAN8
				AND S.IVITM  = A.SDITM
				AND @AddressType = 0		--Not join if AdrressType = 1 - Consumer  
				AND S.IVXRT = @CustCrossRefType
				AND @CurrentJulianDate >= S.IVEFTJ AND @CurrentJulianDate <= S.IVEXDJ
			LEFT OUTER JOIN [SCDATA].F40205	T --Line Type
				ON T.LFLNTY = A.SDLNTY
			LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
				ON IM.IMITM = A.SDITM
			WHERE	A.SDDOCO = @OrderNumber
			AND		A.SDDCTO = @OrderType
			AND		A.SDKCOO = @OrderCompany
			AND (@CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
	ORDER BY A.SDLNID ASC

	-- LOAD ORDER HEADER TEMPORARY TABLE
	SELECT	DISTINCT
			/* When Customer returns SHAN from F4201 */
			CASE @AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END AS SCBillToNumber,
			CASE @AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END AS SCShipToNumber,
			ISNULL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			'N' AS ISORDERRESTRICTED,
			A.SHCO	 AS	OrderHeaderCompany,
			'Y' AS IsFreightOn,                  /*********** Y is Freight ON , N is Freight OFF   **************/
			' ' AS  BaseCurrency,
			' ' AS BaseCurrencyDesc,
			A.SHRYIN AS PaymentInstrument
	INTO	#TMP_ORDERHEADER
	FROM	[SCDATA].F4201 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO 
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
			
	WHERE	A.SHDOCO = @OrderNumber
	AND		A.SHDCTO = @OrderType
	AND		A.SHKCOO = @OrderCompany
	UNION ALL
	SELECT	DISTINCT
			/* When Customer returns SHAN from F4201 */
			CASE @AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END AS SCBillToNumber,
			CASE @AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END AS SCShipToNumber,
			ISNULL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			'N' AS ISORDERRESTRICTED,
			A.SHCO	 AS	OrderHeaderCompany,
			'Y' AS IsFreightOn,                  /*********** Y is Freight ON , N is Freight OFF   **************/
			' ' AS  BaseCurrency,
			' ' AS BaseCurrencyDesc,
			A.SHRYIN AS PaymentInstrument
	FROM 	[SCDATA].F42019 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
			
	WHERE	A.SHDOCO = @OrderNumber
	AND		A.SHKCOO = @OrderCompany	
	AND		A.SHDCTO = @OrderType
	
	
	/* Update the field IsFreightOn  when is FREIGHT OFF*/	
	SELECT @Freight = COUNT(1) FROM [SCDATA].FQ67496 WHERE FRKCOO = @OrderCompany AND FRDCTO = @OrderType AND FRDOCO = @OrderNumber
	IF(@Freight = 0) /* When the ship line Number is 0 the order is freight OFF*/
	BEGIN
	    UPDATE #TMP_ORDERHEADER 
	       SET IsFreightOn = 'N'   /* Y is Freight Off, N is Freight On*/    	   
	END
	
	--Load BillTo Variables From Order Header
	SELECT TOP 1 
		@ScBillTo = SCBillToNumber,
		@ScShipTo = SCShipToNumber,
		@AddressType = AddressBookType,		
		@CurrencyMode = CurrencyMode
	FROM #TMP_ORDERHEADER
	
	IF (@CurrencyMode = 'F')
	BEGIN
		EXEC [DBO].CMM_GetConstantValue @ForeignConstant, @ForeignINID, @Foreign out
		IF(@Foreign = 'N')    /*Foreign is OFF*/
		BEGIN
			SELECT
				@BaseCurrencyCode =	B.CCCRCD,
				@BaseCurrencyDesc = C.CVDL01
			FROM #TMP_ORDERHEADER A
			INNER JOIN [SCDATA].F0010 B
			ON B.CCCO = A.OrderCompany
			LEFT OUTER JOIN [SCDATA].F0013 C
			ON B.CCCRCD = C.CVCRCD
		END
	END	
	
	SELECT 		
		A.SCBillToNumber,
		A.SCShipToNumber,
		A.AddressBookType,
		A.DeliveryInst1, 
		A.DeliveryInst2,
		A.CustomerPO,
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.OrderDate,
		A.RequestedDate,
		A.MarketingCode,
		A.HoldOrderCode,
		A.CurrencyCode,
		A.CurrencyMode,
		A.CurrencyDesc,
		A.ISORDERRESTRICTED,
		A.OrderHeaderCompany,
		A.IsFreightOn,
		ISNULL(@BaseCurrencyCode,' ') AS BaseCurrencyCode,
		ISNULL(@BaseCurrencyDesc, ' ') AS BaseCurrencyDesc,
		A.PaymentInstrument,
		ISNULL(ISNULL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
	FROM #TMP_ORDERHEADER A
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.OrderNumber 
		AND Tax.STDCTO = A.OrderType
		AND Tax.STKCOO = A.OrderCompany 
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.OrderNumber 
		AND TxHistory.STDCTO = A.OrderType
		AND TxHistory.STKCOO = A.OrderCompany
	
	EXEC [DBO].COM_GetSalesOrderInfo_BillTo @OrderCompany,@OrderType,@OrderNumber,@ScBillTo,@AddressType,@ContactID


	SELECT @IsOverrideShipTo = COUNT(1)   
	FROM [SCDATA].F4006
	WHERE OADOCO = @OrderNumber			
		AND OADCTO = @OrderType
		AND OAKCOO = @OrderCompany
		AND OAANTY = 2 
		
	IF (@IsOverrideShipTo > 0) BEGIN
		UPDATE #TMP_ORDERDETAIL 
		SET SCShipToNumber = @ScShipTo, ShipLineNumber =1;
	END
	
	SELECT DISTINCT
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.CostCenter, 
		A.ShipLineNumber,
		A.SCShipToNumber,
		A.LineType
	INTO #COM_GetSalesOrderShipments_A	
	FROM #TMP_ORDERDETAIL A
	EXEC [DBO].COM_GetSalesOrderShipments @InstallationID, @OrderCompany, @OrderType, @OrderNumber, @ScShipTo, @AddressType, @Freight, @IsOverrideShipTo

	IF(@RetrieveWebContentInfo = 0) --CMS
	BEGIN
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.NextStatus,
			A.LastStatus,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.DateInvoice,
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.ShipToID,
			A.SCShipToNumber,
			A.ShipToName,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			A.Description1 AS Description1, /* Retrieve Description 1 for Tracking lines */
			A.Description2 AS Description2,
			'' AS URL,
			A.ShippingQuantity,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.CarrierID,
			A.ModeOfTransportation,
			A.IdentifierShortItem,
			A.LongItemNumber,
			A.AuxItemNumber,
			(CASE WHEN @SInvoiceRestric = '1' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS IsInvoiceRestricted,
			A.ShipLineNumber,
			A.OverridePrice,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,
			ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			ISNULL(ISNULL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			ISNULL(ISNULL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			A.ShippedDate,
			A.Location,
			A.LotNumber,
			A.IsFreeGood,
			A.ParentLineNo,
			A.IsBasketRepricing
		FROM #TMP_ORDERDETAIL A
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.OrderNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber 
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.OrderNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
			ON SOR1.DRKY = InvoiceType
			AND SOR1.DR$9INID = @SInvoiceINID
			AND SOR1.DR$9CNST = @SInvoiceConstant
	END
	ELSE BEGIN
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.NextStatus,
			A.LastStatus,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.DateInvoice,
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.ShipToID,
			A.SCShipToNumber,
			A.ShipToName,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			ISNULL(ContenDesc.DESC1,A.Description1) AS Description1,
			ISNULL(ContenDesc.DESC2,A.Description2) AS Description2,
			ISNULL (ContenDesc.URL,' ') AS URL,
			A.ShippingQuantity,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.CarrierID,
			A.ModeOfTransportation,
			A.IdentifierShortItem,
			A.LongItemNumber,
			A.AuxItemNumber,
			(CASE WHEN @SInvoiceRestric = '1' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS IsInvoiceRestricted,
			A.ShipLineNumber,
			A.OverridePrice,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,
			ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			ISNULL(ISNULL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			ISNULL(ISNULL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			A.ShippedDate,
			A.Location,
			A.LotNumber,
			A.IsFreeGood,
			A.ParentLineNo,
			A.IsBasketRepricing
		FROM #TMP_ORDERDETAIL A
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,IdentifierShortItem,@LangPref,0)ContenDesc 
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.OrderNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber 
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.OrderNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
			ON SOR1.DRKY = InvoiceType
			AND SOR1.DR$9INID = @SInvoiceINID
			AND SOR1.DR$9CNST = @SInvoiceConstant
	END;

	EXEC [DBO].COM_GetSalesOrderInfo_Payments @OrderCompany,@OrderType,@OrderNumber

	DROP TABLE #TMP_ORDERDETAIL
	DROP TABLE #TMP_ORDERHEADER
	DROP TABLE #COM_GetSalesOrderShipments_A

	/*Configured Items*/
	EXEC [DBO].COM_GetSOConfiguredLineList @OrderCompany, @OrderType, @OrderNumber, @LangPref
	
	IF (@RetrieveReturnInfo = 1 )
	BEGIN
		EXEC [DBO].COM_GetSOReturnLineList @InstallationID,@OrderCompany,@OrderType,@OrderNumber
	END


GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSalesOrderLineSrchList'))
	BEGIN
		DROP PROCEDURE [DBO].COM_GetSalesOrderLineSrchList
	END
GO

-- #desc						Search Orders
-- #bl_class					Premier.Commerce.SalesOrderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationId		Installation ID
-- #param @AddressBookType		Address Book Type
-- #param @AddressNumber		Address Number
-- #param @ItemNumber			Item Number
-- #param @TransactionDateFrom	Transaction Date From
-- #param @TransactionDateTo	Transaction Date To
-- #param @ShipToNumber			Ship To Number
-- #param @DisplayItemSetting	Display Item Setting
-- #param @CustomerReference	Customer Reference
-- #param @SortBy				Column to filter by ItemNumber (Display ITM) OrderType (),
--								OrderNumber, OrderDate(Default Value), OrderedQuantity */
-- #param @SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value
-- #param @PageIndex			PageIndex
-- #param @PageSize				PageSize

CREATE PROCEDURE [DBO].COM_GetSalesOrderLineSrchList
	@InstallationID			NVARCHAR(3),
	@AddressBookType		FLOAT,
	@AddressNumber			FLOAT,
	@ItemNumber				FLOAT,
	@TransactionDateFrom	NUMERIC,
	@TransactionDateTo		NUMERIC,
	@ShipToNumber			FLOAT,
	@DisplayItemSetting		NVARCHAR(4),
	@CustomerReference		NVARCHAR(25),
	@SortBy					NVARCHAR(40),
	@SortDir				NVARCHAR(3),
	@PageIndex				INT,
	@PageSize				INT
AS
SET NOCOUNT ON

	/* Paging */
	DECLARE @ROWSTART INT
	DECLARE @ROWEND INT

	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @SQL_DYNAMICSELECT NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @CONS_WHERE_DYNAMIC NVARCHAR(MAX) = ''

	DECLARE @INNER_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @DISPLAY_ITEM_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @FROM NVARCHAR(MAX) = ''

	--Dynamic Sort
	DECLARE @SORT_DYNAMIC NVARCHAR(50)
	DECLARE @SORTDIR_DYNAMIC NVARCHAR(5)

	/* Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256) = ''
	DECLARE @ConstantInstallation	NVARCHAR(3) = ''
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue N'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT

	/* Gets the Sales Order Document Restrictions */
	DECLARE @SOrderRestric	NVARCHAR(256)
	DECLARE @SOrderINID     NVARCHAR(3)
	DECLARE @SOrderConstant	NVARCHAR(10)
	SET @SOrderConstant = N'SO_RESTRIC'
	SET @SOrderINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric OUT

	/* Gets the Freight Line Type */
	DECLARE @FreightLnType	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'FREIGHTLN', @InstallationID, @FreightLnType OUT

	/* Gets the Discount Line Type */
	DECLARE @DiscountLnType	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'DISCOUNTLN', @InstallationID, @DiscountLnType OUT

	/* Gets the Tracking Line Type */
	DECLARE @TrackingLnType	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'TRACKINGLN', @InstallationID, @TrackingLnType OUT

    /* Gets the Surcharge Line Type */
	DECLARE @SurchargeLnType	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'SURCHARGLN', @InstallationID, @SurchargeLnType OUT

	/* Gets the Order History Status */
	DECLARE @CancelLn		NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'YNCANCELLN', @InstallationID, @CancelLn OUT

	/* Gets Default Language */
	DECLARE @DefLangValue	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'DEFLANGPRF', @InstallationID, @DefLangValue OUT

	------------------------------------------------------
	-- Dynamic query
	------------------------------------------------------

	IF (@DisplayItemSetting = 'LITM') BEGIN
		SET @DISPLAY_ITEM_DYNAMIC = ' LongItemNumber ';
	END

	ELSE IF (@DisplayItemSetting = 'AITM') BEGIN
		SET @DISPLAY_ITEM_DYNAMIC = ' AuxItemNumber ';	
	END

	ELSE BEGIN
		SET @DISPLAY_ITEM_DYNAMIC = ' ItemNumber ';
	END;

	------------------------------------------------------
	-- Dynamic query conditions
	------------------------------------------------------

	/* Dynamic sort direction statement */
	SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

	SET @SORT_DYNAMIC = CASE
		WHEN @SortBy = 'OrderDate' THEN 'TransactionDate ' + @SORTDIR_DYNAMIC + ', OrderNumber DESC'
		WHEN @SortBy = 'OrderType' THEN 'OrderType ' + @SORTDIR_DYNAMIC + ', TransactionDate DESC'
		WHEN @SortBy = 'OrderNumber' THEN 'OrderNumber ' + @SORTDIR_DYNAMIC + ', TransactionDate DESC'
		WHEN @SortBy = 'ProductNumber' THEN @DISPLAY_ITEM_DYNAMIC + @SORTDIR_DYNAMIC + ', TransactionDate DESC'
		WHEN @SortBy = 'OrderedQuantity' THEN 'Quantity ' + @SORTDIR_DYNAMIC + ', TransactionDate DESC'
		WHEN @SortBy = 'CustomerReference' THEN 'CustomerReference ' + @SORTDIR_DYNAMIC + ', TransactionDate DESC' 
		ELSE 'TransactionDate DESC, OrderNumber DESC'
	END

	IF (@TransactionDateFrom <> N'0') BEGIN
	
		SET @WHERE_DYNAMIC += N' AND  B.SDTRDJ BETWEEN @TransactionDateFrom AND @TransactionDateTo'
	END

	IF (@ItemNumber IS NOT NULL) BEGIN

			SET @WHERE_DYNAMIC += N' AND B.SDITM = @ItemNumber'
	END

	
	IF (@ShipToNumber IS NOT NULL) BEGIN
		IF (@AddressBookType = 0) BEGIN
			SET @WHERE_DYNAMIC += N' AND B.SDSHAN = @ShipToNumber'
		END
		ELSE BEGIN
			SET @CONS_WHERE_DYNAMIC += N' AND B.SD$9SHAN = @ShipToNumber'
		END
	END

	IF (@CancelLn = N'N') BEGIN

		SET @WHERE_DYNAMIC += N' AND (B.SDLTTR < ''980'' OR B.SDLTTR = ''995'')'
	END

	
	IF (@CustomerReference <> '*') BEGIN
		SET @WHERE_DYNAMIC +=  N' AND A.SHVR01 LIKE ''%'' + @CustomerReference + ''%''';
	END

	IF (@AddressBookType = 0) BEGIN
		SET @WHERE_DYNAMIC = N' WHERE B.SDAN8 = @AddressNumber AND B.SDLNTY <> @FreightLnType AND B.SDLNTY <> @DiscountLnType AND B.SDLNTY <> @TrackingLnType AND B.SDLNTY <> @SurchargeLnType ' + @WHERE_DYNAMIC;
	END
	ELSE BEGIN
		SET @WHERE_DYNAMIC = N' WHERE B.SDLNTY <> @FreightLnType AND B.SDLNTY <> @DiscountLnType AND B.SDLNTY <> @TrackingLnType AND B.SDLNTY <> @SurchargeLnType ' + @WHERE_DYNAMIC;
		SET @CONS_WHERE_DYNAMIC = N' WHERE B.SD$9AN8 = @AddressNumber ' + @CONS_WHERE_DYNAMIC;
	END

	------------------------------------------------------
	--Dynamic Inner Join 
	------------------------------------------------------

	IF (@CompanyConstant = N'L')
	BEGIN
		SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 CR
								ON CR.CI$9INID = @ConstantInstallation
								AND CR.CICO = Company ';
	END
	
	IF (@SOrderRestric = N'1' ) BEGIN
		SET @INNER_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 DR
									ON  DR.DR$9INID = @SOrderINID 
									AND DR.DR$9CNST = @SOrderConstant
									AND DR.DRKY = OrderType ';
	END	

	------------------------------------------------------
	--Dynamic From
	------------------------------------------------------

	IF (@AddressBookType = 0)
	BEGIN
		SET @FROM = N' ;WITH CTE AS (
        SELECT 
        	B.SDDOCO  AS OrderNumber, 
        	B.SDDCTO  AS OrderType, 
        	B.SDKCOO  AS Company,    
        	B.SDLNID  AS LineNumber, 
        	B.SDLNTY  AS LineType,
        	B.SDUPRC  AS UnitPrice,
        	B.SDFUP   AS ForeignUnitPrice,
        	B.SDAEXP  AS ExtendedPrice,
        	B.SDFEA   AS ForeignExtPrice,
        	B.SDUORG  AS Quantity,
        	B.SDSOQS  AS ShippedQuantity,
        	B.SDITM   AS ItemNumber,
        	B.SDLITM  AS LongItemNumber,
        	B.SDAITM  AS AuxItemNumber, 
        	B.SDUOM   AS UnitOfMeasure, 
        	B.SDUOM4  AS PricingUnitOfMeasure,
        	B.SDSHAN  AS SCShipToNumber,
			0 AS AddressBookType,
        	B.SDNXTR  AS NextStatus,
        	B.SDLTTR  AS LastStatus,
        	B.SDMCU   AS BusinessUnit,
        	B.SDEMCU  AS BusinessUnitHeader,
        	B.SDTAX1  AS TaxableYN, 
        	B.SDTXA1  AS TaxArea,
        	B.SDEXR1  AS TaxExplanationCode,
        	B.SDSOBK  AS BackorderedQuantity,
        	B.SDTRDJ  AS TransactionDate,
        	B.SDRLIT  AS RelatedKitItemNo,
			A.SHVR01  AS CustomerReference,
			A.SHCRCD  AS CurrencyCode,
    		A.SHCRRM  AS CurrencyMode,
    		A.SHHOLD  AS HoldOrderCode,
			B.SDDSC1  AS Description1,
			B.SDDSC2  AS Description2
        FROM [SCDATA].F4211 B
		INNER JOIN [SCDATA].F4201 A 
			ON  A.SHDOCO = B.SDDOCO  
			AND A.SHDCTO = B.SDDCTO
			AND A.SHKCOO = B.SDKCOO
			AND (RTRIM(B.SDRLIT) = '''')
		' + @WHERE_DYNAMIC + N'
        UNION ALL
        SELECT  
        	B.SDDOCO  AS OrderNumber, 
        	B.SDDCTO  AS OrderType, 
        	B.SDKCOO  AS Company,    
        	B.SDLNID  AS LineNumber, 
        	B.SDLNTY  AS LineType,
        	B.SDUPRC  AS UnitPrice,
        	B.SDFUP   AS ForeignUnitPrice,
        	B.SDAEXP  AS ExtendedPrice,
        	B.SDFEA   AS ForeignExtPrice,
        	B.SDUORG  AS Quantity,
        	B.SDSOQS  AS ShippedQuantity,
        	B.SDITM   AS ItemNumber, 
        	B.SDLITM  AS LongItemNumber,
        	B.SDAITM  AS AuxItemNumber, 
        	B.SDUOM   AS UnitOfMeasure, 
        	B.SDUOM4  AS PricingUnitOfMeasure,
        	B.SDSHAN  AS SCShipToNumber,
			0 AS AddressBookType,
        	B.SDNXTR  AS NextStatus,
        	B.SDLTTR  AS LastStatus,
        	B.SDMCU   AS BusinessUnit,
        	B.SDEMCU  AS BusinessUnitHeader,
        	B.SDTAX1  AS TaxableYN, 
        	B.SDTXA1  AS TaxArea,
        	B.SDEXR1  AS TaxExplanationCode,
        	B.SDSOBK  AS BackorderedQuantity,
        	B.SDTRDJ  AS TransactionDate,
        	B.SDRLIT  AS RelatedKitItemNo,
			A.SHVR01  AS CustomerReference,
			A.SHCRCD  AS CurrencyCode,
    		A.SHCRRM  AS CurrencyMode,
    		A.SHHOLD  AS HoldOrderCode,
			B.SDDSC1  AS Description1,
			B.SDDSC2  AS Description2
        FROM  [SCDATA].F42119 B
		INNER JOIN [SCDATA].F42019 A 
			ON  A.SHDOCO = B.SDDOCO  
			AND A.SHDCTO = B.SDDCTO
			AND A.SHKCOO = B.SDKCOO
			AND (RTRIM(B.SDRLIT) = '''')
		' + @WHERE_DYNAMIC + N'
		) ' 
	END
	ELSE BEGIN
		SET @FROM = N' ;WITH F4211_F42119 AS (
		SELECT 	
			B.SDDOCO					AS OrderNumber, 
			B.SDDCTO					AS OrderType, 
			B.SDKCOO					AS Company,    
			B.SDLNID					AS LineNumber, 
			B.SDLNTY					AS LineType,		
			B.SDUPRC					AS UnitPrice,
			B.SDFUP						AS ForeignUnitPrice,
			B.SDAEXP					AS ExtendedPrice,
			B.SDFEA						AS ForeignExtPrice,
			B.SDUORG					AS Quantity,
			B.SDSOQS					AS ShippedQuantity,
			B.SDITM						AS ItemNumber,
        	B.SDLITM					AS LongItemNumber,
        	B.SDAITM					AS AuxItemNumber, 
			B.SDUOM						AS UnitOfMeasure, 
			B.SDUOM4					AS PricingUnitOfMeasure,
			B.SDNXTR					AS NextStatus,
			B.SDLTTR					AS LastStatus,
			B.SDMCU						AS BusinessUnit,
			B.SDEMCU					AS BusinessUnitHeader,
			B.SDTAX1					AS TaxableYN, 
			B.SDTXA1					AS TaxArea,
			B.SDEXR1					AS TaxExplanationCode,
			B.SDSOBK					AS BackorderedQuantity,
			B.SDTRDJ					AS TransactionDate,
			B.SDRLIT					AS RelatedKitItemNo,
			A.SHVR01 					AS CustomerReference,
			A.SHCRCD  					AS CurrencyCode,
    		A.SHCRRM  					AS CurrencyMode,
    		A.SHHOLD  					AS HoldOrderCode,
			B.SDDSC1					AS Description1,
			B.SDDSC2					AS Description2
		FROM		[SCDATA].F4211 B 
		INNER JOIN 	[SCDATA].F4201 A 
			ON  A.SHDOCO = B.SDDOCO  
			AND A.SHDCTO = B.SDDCTO
			AND A.SHKCOO = B.SDKCOO
			AND (RTRIM(B.SDRLIT) = '''')
		' + @WHERE_DYNAMIC + N'
		UNION ALL
		SELECT		
			B.SDDOCO					AS OrderNumber, 
			B.SDDCTO					AS OrderType, 
			B.SDKCOO					AS Company,    
			B.SDLNID					AS LineNumber, 
			B.SDLNTY					AS LineType,		
			B.SDUPRC					AS UnitPrice,
			B.SDFUP						AS ForeignUnitPrice,
			B.SDAEXP					AS ExtendedPrice,
			B.SDFEA						AS ForeignExtPrice,
			B.SDUORG					AS Quantity,
			B.SDSOQS					AS ShippedQuantity,
			B.SDITM						AS ItemNumber,
        	B.SDLITM					AS LongItemNumber,
        	B.SDAITM					AS AuxItemNumber, 
			B.SDUOM						AS UnitOfMeasure, 
			B.SDUOM4					AS PricingUnitOfMeasure,
			B.SDNXTR					AS NextStatus,
			B.SDLTTR					AS LastStatus,
			B.SDMCU						AS BusinessUnit,
			B.SDEMCU					AS BusinessUnitHeader,
			B.SDTAX1					AS TaxableYN, 
			B.SDTXA1					AS TaxArea,
			B.SDEXR1					AS TaxExplanationCode,
			B.SDSOBK					AS BackorderedQuantity,
			B.SDTRDJ					AS TransactionDate,
			B.SDRLIT					AS RelatedKitItemNo,
			A.SHVR01 					AS CustomerReference,
			A.SHCRCD  					AS CurrencyCode,
    		A.SHCRRM  					AS CurrencyMode,
    		A.SHHOLD  					AS HoldOrderCode,
			B.SDDSC1					AS Description1,
			B.SDDSC2					AS Description2
		FROM		[SCDATA].F42119 B
		INNER JOIN 	[SCDATA].F42019 A 
			ON  A.SHDOCO = B.SDDOCO  
			AND A.SHDCTO = B.SDDCTO
			AND A.SHKCOO = B.SDKCOO
			AND (RTRIM(B.SDRLIT) = '''')
		' + @WHERE_DYNAMIC + N'
		), CTE AS(
		SELECT
			A.OrderNumber, 
			A.OrderType, 
			A.Company,    
			A.LineNumber, 
			A.LineType,		
			A.UnitPrice,
			A.ForeignUnitPrice,
			A.ExtendedPrice,
			A.ForeignExtPrice,
			A.Quantity,
			A.ShippedQuantity,
			A.ItemNumber,
        	A.LongItemNumber,
        	A.AuxItemNumber,
			A.UnitOfMeasure, 
			A.PricingUnitOfMeasure,
			B.SD$9SHAN  AS SCShipToNumber,
			1			AS AddressBookType,
			A.NextStatus,
			A.LastStatus,
			A.BusinessUnit,
			A.BusinessUnitHeader,
			A.TaxableYN, 
			A.TaxArea,
			A.TaxExplanationCode,
			A.BackorderedQuantity,
			A.TransactionDate,
			A.RelatedKitItemNo,
			A.CustomerReference,
			A.CurrencyCode,
    		A.CurrencyMode,
    		A.HoldOrderCode,
			A.Description1,
			A.Description2
		FROM F4211_F42119 A
		INNER JOIN [SCDATA].FQ674211 B
			ON  B.SDDOCO = A.OrderNumber
			AND B.SDDCTO = A.OrderType 
			AND B.SDKCOO = A.Company 
			AND B.SDLNID = A.LineNumber 
			AND B.SD$9TYP = 1
		' + @CONS_WHERE_DYNAMIC + N'
		) ';
	END	

	------------------------------------------------------
	--Paging Calculation
	------------------------------------------------------
	/* Set the first row to be selected*/
	SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
	/* Set the last row to be selected */
	SET @ROWEND = @PageIndex * @PageSize	
	
	SET @SQL_DYNAMIC = @FROM + N'
		SELECT  
			OrderNumber, OrderType, Company, LineNumber, LineType, UnitPrice, ForeignUnitPrice,
			ExtendedPrice, ForeignExtPrice, Quantity, ShippedQuantity, ItemNumber, LongItemNumber, AuxItemNumber, UnitOfMeasure, 
			PricingUnitOfMeasure, NextStatus, LastStatus, BusinessUnit, 
			BusinessUnitHeader, TaxableYN, TaxArea, TaxExplanationCode, BackorderedQuantity, 
			TransactionDate, RelatedKitItemNo, SCShipToNumber, AddressBookType, CustomerReference, CurrencyCode, CurrencyMode, HoldOrderCode, Description1,
			Description2
			INTO #TMP_TABLE
		FROM CTE A 
		' + @INNER_DYNAMIC + N'

	; WITH PAGING AS (
	SELECT
			OrderNumber,
			OrderType,
			Company,
			LineNumber,
			LineType,
			UnitPrice,
			ForeignUnitPrice,
			ExtendedPrice,
			ForeignExtPrice,
			Quantity,
			ShippedQuantity,
			ItemNumber,
        	LongItemNumber,
        	AuxItemNumber,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			SCShipToNumber,
			AddressBookType,
			NextStatus,
			LastStatus,
			BusinessUnit,
			BusinessUnitHeader,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			BackorderedQuantity,
			TransactionDate,
			RelatedKitItemNo,
			CustomerReference,
			CurrencyCode,
    		CurrencyMode,
    		HoldOrderCode,
			Description1,
			Description2,
			ROW_NUMBER() OVER ( ORDER BY '+@SORT_DYNAMIC+') AS RNUM
	FROM #TMP_TABLE 
	)
	SELECT
			OrderNumber,
			OrderType,
			Company,
			LineNumber,
			LineType,
			UnitPrice,
			ForeignUnitPrice,
			ExtendedPrice,
			ForeignExtPrice,
			Quantity,
			ShippedQuantity,
			ItemNumber,
        	LongItemNumber,
        	AuxItemNumber,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			SCShipToNumber,
			AddressBookType,
			NextStatus,
			LastStatus,
			BusinessUnit,
			BusinessUnitHeader,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			BackorderedQuantity,
			TransactionDate,
			RelatedKitItemNo,
			CustomerReference,
			CurrencyCode,
			CurrencyMode,
			HoldOrderCode,
			Description1,
			Description2,
    		ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP), 0)   AS TaxedExtendedPrice,
    		ISNULL(ISNULL(Tax.DTTFEA, TxHistory.DTTFEA), 0)    AS ForeignTaxedExtPrice,
    		ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA), 0)     AS ExtendedTaxAmount,
    		ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA), 0)    AS ForeignExtTaxAmount,
			ISNULL(ISNULL(TaxHeader.STUTP, TxHistoryHeader.STUTP), 0)  AS UseTaxedPrices,
			TotalRowCount = (SELECT COUNT(1) AS TotalRowCount FROM PAGING )
	FROM PAGING B
		LEFT OUTER JOIN [SCDATA].F4201 A
			ON  A.SHDOCO = B.OrderNumber  
			AND A.SHDCTO = B.OrderType 
			AND A.SHKCOO = B.Company
    	LEFT OUTER JOIN [SCDATA].F4211TX Tax
    		ON Tax.DTDOCO = B.OrderNumber 
    		AND Tax.DTDCTO = B.OrderType 
    		AND Tax.DTKCOO = B.Company 
    		AND Tax.DTLNID = B.LineNumber
    	LEFT OUTER JOIN [SCDATA].F4201TX TaxHeader
    		ON TaxHeader.STDOCO = B.OrderNumber 
    		AND TaxHeader.STDCTO = B.OrderType 
    		AND TaxHeader.STKCOO = B.Company
		LEFT OUTER JOIN [SCDATA].F42019 C  
			ON  C.SHDOCO = B.OrderNumber 
			AND C.SHDCTO = B.OrderType 
			AND C.SHKCOO = B.Company 
    	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
    		ON TxHistory.DTDOCO = B.OrderNumber 
    		AND TxHistory.DTDCTO = B.OrderType
    		AND TxHistory.DTKCOO = B.Company 
    		AND TxHistory.DTLNID = B.LineNumber
    	LEFT OUTER JOIN [SCDATA].F42019TX TxHistoryHeader
    		ON TxHistoryHeader.STDOCO = B.OrderNumber 
    		AND TxHistoryHeader.STDCTO = B.OrderType
    		AND TxHistoryHeader.STKCOO = B.Company 
	 WHERE 
	((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN @ROWSTART AND @ROWEND)) 
	ORDER BY RNUM '

	EXECUTE sp_executesql @SQL_DYNAMIC, N' @AddressBookType FLOAT, @AddressNumber FLOAT, @TransactionDateFrom NUMERIC, 
										@TransactionDateTo NUMERIC, @ItemNumber FLOAT, @FreightLnType NVARCHAR(256), 
										@DiscountLnType NVARCHAR(256), @TrackingLnType NVARCHAR(256), @SurchargeLnType NVARCHAR(256), @SOrderINID NVARCHAR(3),
										@SOrderConstant NVARCHAR(10), @CompanyConstant	NVARCHAR(256), @ConstantInstallation NVARCHAR(3),
										@ShipToNumber FLOAT, @CustomerReference NVARCHAR(25), @PageIndex FLOAT, @PageSize FLOAT, @ROWSTART INT, @ROWEND INT',
										@AddressBookType = @AddressBookType, @AddressNumber = @AddressNumber, @TransactionDateFrom = @TransactionDateFrom, 
										@TransactionDateTo = @TransactionDateTo, @ItemNumber = @ItemNumber, @FreightLnType = @FreightLnType, 
										@DiscountLnType = @DiscountLnType, @TrackingLnType = @TrackingLnType, @SurchargeLnType = @SurchargeLnType, @SOrderINID = @SOrderINID, 
										@SOrderConstant = @SOrderConstant, @CompanyConstant = @CompanyConstant, @ConstantInstallation = @ConstantInstallation,
										@ShipToNumber = @ShipToNumber, @CustomerReference = @CustomerReference, @PageIndex = @PageIndex, @PageSize = @PageSize, @ROWSTART = @ROWSTART , @ROWEND = @ROWEND;

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetScheduledPaymentList'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetScheduledPaymentList
	END

GO

-- #desc						Get Scheduled Payment List
-- #bl_class					Premier.Commerce.ScheduledPaymentList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @InvoiceNumber		Invoice Number
-- #param @InvoiceType			Invoice Type
-- #param @InvoiceCompany		Invoice Company
-- #param @PayItem				Pay Item

CREATE Procedure [DBO].COM_GetScheduledPaymentList
(
	@InvoiceNumber		FLOAT,
	@InvoiceType		NCHAR(2),
	@InvoiceCompany		NCHAR(5),
	@PayItem			NCHAR(3)
)
AS

	SELECT
		PDDOC		AS InvoiceNumber,
		PDDCT		AS InvoiceType,
		PDKCO		AS InvoiceCompany,
		PDSFX		AS PayItem,
		PHRYIN		AS PaymentInstrument,
		[DBO].CMM_GetUserDefinedCodeFnc(N'00', N'PY', PHRYIN, N'*') AS PaymentDescription,
		PH$9UKID	AS Mode,
		PHPST		AS Status,
		PHDPR		AS PaymentDate,
		PDAAP		AS AmountToApply,
		PHCBNK		AS BARerefence,
		PHCRCI		AS CCReference,
		AYCBNK		AS BAOFReference,
		CCCRCI		AS CCOFReference
	FROM [SCDATA].FQ670314 A
	INNER JOIN [SCDATA].FQ670313 B
		ON B.PH$9PYID = A.PD$9PYID
	LEFT OUTER JOIN [SCDATA].F0030 C
		ON C.AYUKID = B.PHUKID
	LEFT OUTER JOIN [SCDATA].FQ67CCIF D
		ON D.CC$9AN8 = B.PH$9AN8 AND D.CCSEQ = B.PHSEQ
	WHERE A.PDDOC = @InvoiceNumber 
		AND A.PDDCT = @InvoiceType 
		AND A.PDKCO = @InvoiceCompany 
		AND (@PayItem = N'*' OR A.PDSFX = @PayItem);
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSONumbyCountry'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSONumbyCountry
	END

GO

-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param @InstallationID		Installation Id
-- #param @OrderNumber			Order Number
-- #param @Country		        Country
-- #param @ZipCode		        Zip Code

CREATE PROCEDURE [DBO].COM_GetSONumbyCountry
(
	@InstallationID			NVARCHAR(3),
	@Country				NVARCHAR(6),
	@OrderNumber			FLOAT,
	@ZipCode				NVARCHAR(12)
)
AS

BEGIN 
	
	DECLARE @DocumentNumber		FLOAT
	DECLARE @OrderType			NVARCHAR(3)
	DECLARE @OrderCompany		NVARCHAR(5)	
	DECLARE @AddressType	    FLOAT
	DECLARE @AddressNumber		FLOAT 	
	
	DECLARE @OrderWasFound		INT
	
	DECLARE @SOrderRestric	NVARCHAR(256)
	DECLARE @SOrderINID     NVARCHAR(3)
	DECLARE @SOrderConstant	NVARCHAR(10)
	-- Gets the Sales Order Document Restrictions	
    SET @SOrderConstant = 'SO_RESTRIC'
    SET @SOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric out
    
    SET @OrderWasFound = 0 
    
	/* Validate the exist order*/
	SELECT 
		@DocumentNumber = SHDOCO,
		@OrderType = SHDCTO,
		@OrderCompany = SHKCOO,
		@AddressNumber = SHAN8
	FROM 
	(	
		SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
		FROM [SCDATA].F4201
		WHERE SHDOCO = @OrderNumber
		UNION ALL
		SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
		FROM [SCDATA].F42019
		WHERE SHDOCO = @OrderNumber
	) AS TEMPORAL_TABLE
	LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
		ON SOR1.DRKY = SHDCTO
		AND SOR1.DR$9INID = @SOrderINID 
		AND SOR1.DR$9CNST = @SOrderConstant
	WHERE (@SOrderRestric = '0' OR SOR1.DRKY IS NOT NULL)

	IF(@DocumentNumber > 0)
	BEGIN 
		/*Search billing override address*/	
		IF EXISTS (SELECT 1 FROM [SCDATA].F4006
				   WHERE OAANTY = 1 
					AND OADOCO = @DocumentNumber  
					AND OADCTO = @OrderType 
					AND OAKCOO = @OrderCompany	
					AND OACTR =  @Country
					AND (@ZipCode = '*' OR OAADDZ = @ZipCode))
		BEGIN
			SET @OrderWasFound = 1						
		END
		ELSE
		BEGIN 
			/* Search if the order is an Smart Commerce order */
			SELECT 
				@AddressType = SH$9TYP, 
				@AddressNumber = SH$9AN8 
			FROM [SCDATA].FQ674201
			WHERE SHDOCO =  @DocumentNumber  
				AND SHDCTO = @OrderType
				AND SHKCOO= @OrderCompany
				
			/*CONSUMER */
			IF(@AddressType = 1)
			BEGIN 
				IF EXISTS (SELECT 1 FROM  [SCDATA].FQ670302 
							WHERE PR$9AN8= @AddressNumber
							AND PRCTR = @Country
							AND (@ZipCode = '*' OR PRADDZ = @ZipCode))
				BEGIN
					SET @OrderWasFound = 1
				END 					
			END
			/*CUSTOMER*/
			ELSE 
			BEGIN
				IF EXISTS (SELECT 1 FROM [SCDATA].F0116
							WHERE ALAN8= @AddressNumber
							AND ALCTR = @Country
							AND (@ZipCode = '*' OR ALADDZ = @ZipCode))
				BEGIN
					SET @OrderWasFound = 1
				END 	
			END
		END  
    END  
	 
	IF (@OrderWasFound = 1)
		BEGIN
			SELECT @DocumentNumber AS OrderNumber,@OrderType AS OrderType, @OrderCompany AS OrderCompany  			
		END
	ELSE
	BEGIN
		SELECT 0 AS OrderNumber, '' AS OrderType, '' AS OrderCompany  			
	END	
END 

GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSONumbyEmail'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSONumbyEmail
	END

GO

-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param @InstallationID		Installation Id
-- #param @OrderNumber			Order Number
-- #param @EmailAddress		    Email Address

CREATE PROCEDURE [DBO].COM_GetSONumbyEmail
(
	@InstallationID			NVARCHAR(3),
	@EmailAddress			NVARCHAR(256),
	@OrderNumber			FLOAT		
)
AS

BEGIN 
	
	DECLARE @DocumentNumber		FLOAT
	DECLARE @OrderType			NVARCHAR(3)
	DECLARE @OrderCompany		NVARCHAR(5)	
	DECLARE @Count				BIT	
	DECLARE @AddressType	    FLOAT
	DECLARE @AddressNumber		FLOAT 	
	
	DECLARE @OrderWasFound		INT
	
	DECLARE @SOrderRestric	NVARCHAR(256)
	DECLARE @SOrderINID     NVARCHAR(3)
	DECLARE @SOrderConstant	NVARCHAR(10)	

	SET @Count = 0
	
	-- Gets the Sales Order Document Restrictions	
    SET @SOrderConstant = 'SO_RESTRIC'
    SET @SOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric OUT

    /* Validate the exist order*/
	SELECT 
			@DocumentNumber = SHDOCO,
			@OrderType = SHDCTO,
			@OrderCompany = SHKCOO,
			@AddressNumber = SHAN8
	FROM 
	(	
			SELECT SHDOCO,SHDCTO,SHKCOO, SHAN8
			FROM [SCDATA].F4201
			WHERE SHDOCO = @OrderNumber
			UNION ALL
			SELECT SHDOCO,SHDCTO,SHKCOO, SHAN8
			FROM [SCDATA].F42019
			WHERE SHDOCO = @OrderNumber
	) AS TEMPORAL_TABLE
	LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
		ON SOR1.DRKY = SHDCTO
		AND SOR1.DR$9INID = @SOrderINID 
		AND SOR1.DR$9CNST = @SOrderConstant
	WHERE (@SOrderRestric = '0' OR SOR1.DRKY IS NOT NULL)

	IF(@DocumentNumber > 0)  
	BEGIN 
		/*Search billing override address*/	
		IF EXISTS (SELECT 1 FROM [SCDATA].F4006 
					WHERE OAANTY =1    
					AND OADOCO = @DocumentNumber  
					AND OADCTO = @OrderType 
					AND OAKCOO = @OrderCompany )	
			BEGIN
				SET @Count = 1
			END
		ELSE
		BEGIN
			/* Search if the order is an SmarterCommerce order */
			SELECT 
				@AddressType = SH$9TYP, 
				@AddressNumber = SH$9AN8 
			FROM 
				[SCDATA].FQ674201
			WHERE 
				SHDOCO =  @DocumentNumber  
				AND SHDCTO = @OrderType
				AND SHKCOO = @OrderCompany
						
			/*CONSUMER */
			IF(@AddressType = 1)
			BEGIN 
				IF EXISTS ( SELECT 1 FROM  [SCDATA].FQ67303 
							WHERE PC$9AN8 = @AddressNumber
							AND PCEMAL = @EmailAddress	)	
				BEGIN
					SET @OrderWasFound = 1
				END
			END
			
			/*CUSTOMER*/
			ELSE 
				IF EXISTS (SELECT 1 FROM [SCDATA].F01151 
						WHERE EAAN8 = @AddressNumber
						AND EAETP = 'E'
						AND EAEMAL = @EmailAddress)
				BEGIN
					SET @OrderWasFound = 1
				END 
		END	
		IF  @Count = 1 
		BEGIN
			IF EXISTS (SELECT 1
					FROM [SCDATA].F4006 
					WHERE OAANTY =1    
					AND OADOCO = @DocumentNumber  
					AND OADCTO = @OrderType 
					AND OAKCOO = @OrderCompany
					AND OAADD3 = SUBSTRING(@EmailAddress,1,40) ) /*OADD3 can only store 40 characters*/	
			BEGIN
				SET @OrderWasFound = 1
			END
		END	
	END

	IF (@OrderWasFound =1) BEGIN
		SELECT @DocumentNumber AS OrderNumber,@OrderType AS OrderType, @OrderCompany AS OrderCompany  			
	END
	ELSE 
	BEGIN
		SELECT 0 AS OrderNumber, '' AS OrderType, '' AS OrderCompany  			
	END
END 

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSONumbyName'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetSONumbyName
	END

GO

-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @OrderNumber			Order Number
-- #param @BillingName		    Billing Name


CREATE PROCEDURE [DBO].COM_GetSONumbyName
(
	@InstallationID			NVARCHAR(3),
	@BillingName			NVARCHAR(40),
	@OrderNumber			FLOAT		
)
AS

BEGIN 
	
	DECLARE @DocumentNumber		FLOAT
	DECLARE @OrderType			NVARCHAR(3)
	DECLARE @OrderCompany		NVARCHAR(5)	
	DECLARE @AddressType	    FLOAT
	DECLARE @AddressNumber		FLOAT 	
	
	DECLARE @OrderWasFound		INT
	
	DECLARE @SOrderRestric	NVARCHAR(256)
	DECLARE @SOrderINID     NVARCHAR(3)
	DECLARE @SOrderConstant	NVARCHAR(10)
	 -- Gets the Sales Order Document Restrictions	
    SET @SOrderConstant = 'SO_RESTRIC'
    SET @SOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric out

    SET @OrderWasFound = 0 
     /* Validate the exist order*/
	SELECT 
			@DocumentNumber = SHDOCO,
			@OrderType = SHDCTO,
			@OrderCompany = SHKCOO,
			@AddressNumber = SHAN8
	FROM 
	(	
			SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
			FROM [SCDATA].F4201
			WHERE SHDOCO = @OrderNumber
			UNION ALL
			SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
			FROM [SCDATA].F42019
			WHERE SHDOCO = @OrderNumber
	) AS TEMPORAL_TABLE
	LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
		ON SOR1.DRKY = SHDCTO
		AND SOR1.DR$9INID = @SOrderINID 
		AND SOR1.DR$9CNST = @SOrderConstant
	WHERE (@SOrderRestric = '0' OR SOR1.DRKY IS NOT NULL)
		
				
	IF(@DocumentNumber > 0)
	BEGIN 
		/*Search billing override address*/	
		IF EXISTS (SELECT 1 FROM [SCDATA].F4006
					WHERE OAANTY = 1 
					AND OADOCO = @DocumentNumber  
					AND OADCTO = @OrderType 
					AND OAKCOO =  @OrderCompany	 
					AND OAMLNM = @BillingName )
			BEGIN
				SET @OrderWasFound = 1						
			END
		ELSE	
		BEGIN 
			/* Search if the order is an Smart Commerce order */
			SELECT 
				@AddressType = SH$9TYP, 
				@AddressNumber = SH$9AN8 
			FROM [SCDATA].FQ674201
			WHERE SHDOCO =  @DocumentNumber  
				AND SHDCTO = @OrderType
				AND SHKCOO= @OrderCompany	
											
			/*CONSUMER */
			IF(@AddressType = 1)
			BEGIN 
				IF EXISTS (SELECT 1 FROM  [SCDATA].FQ67303 
							WHERE PC$9AN8= @AddressNumber
							AND PCMLNM = @BillingName )
				BEGIN
					SET @OrderWasFound = 1
				END 					
			END
			/*CUSTOMER*/
			ELSE 
			BEGIN
				IF EXISTS (SELECT 1 FROM [SCDATA].F0111 
							WHERE WWAN8= @AddressNumber
							AND WWMLNM = @BillingName )
				BEGIN
					SET @OrderWasFound = 1
				END 	
			END
		END
	END  
	 
	IF (@OrderWasFound =1)
	BEGIN
		SELECT @DocumentNumber AS OrderNumber,@OrderType AS OrderType, @OrderCompany AS OrderCompany  			
	END
	ELSE
	BEGIN
		SELECT 0 AS OrderNumber, '' AS OrderType, '' AS OrderCompany  			
	END	
END 

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetSOReturnLineSrchList'))
	BEGIN
		DROP PROCEDURE [DBO].COM_GetSOReturnLineSrchList
	END
GO

-- #desc						Search Orders
-- #bl_class					Premier.Commerce.SalesOrderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationId		Installation ID
-- #param @OrderNumber			Order number to search for.
-- #param @OrderType			Document type to search for.
-- #param @Company				Company
-- #param @AddressNumber		Address Number
-- #param @AddressBookType		Address Book Type		/* 0 Customer - 1 Consumer */
-- #param @ItemNumber			Item Number
-- #param @TransactionDateFrom	Transaction Date From
-- #param @TransactionDateTo	Transaction Date To
-- #param @DisplayItemSetting	Display Item Setting
-- #param @SortBy				SortBy
-- #param @PageIndex			PageIndex
-- #param @PageSize				PageSize
-- #param @TotalRowCount		TotalRowCount

CREATE PROCEDURE [DBO].COM_GetSOReturnLineSrchList
@InstallationID			NVARCHAR(3),
	@OrderNumber			FLOAT,
	@OrderType				NVARCHAR(2),
	@Company				NVARCHAR(5),
	@AddressNumber			FLOAT,
	@AddressBookType		FLOAT,
	@ItemNumber				FLOAT,
	@TransactionDateFrom	NUMERIC, 
	@TransactionDateTo		NUMERIC,
	@DisplayItemSetting NVARCHAR(4),
	@SortBy					INT,
	@PageIndex				INT,
	@PageSize				INT,
	@LangPref		        NVARCHAR(2)
AS
 
	DECLARE @BInstallationID NVARCHAR(3) = '***'
	
	/* Gets Default Language */
	DECLARE @DefLangValue	NVARCHAR(2)
	EXEC [DBO].CMM_GetConstantValue N'DEFLANGPRF', @InstallationID, @DefLangValue OUT

	/*Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256) = ''
	DECLARE @ConstantInstallation	NVARCHAR(3) = ''
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	

	--Paging
	DECLARE @RowStart INT
	DECLARE @RowEnd INT

	--Dynamic
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @UNION_DYNAMIC NVARCHAR(MAX) = '';
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @INNER_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @LEFT_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @DISPLAYITEM_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @TAX_DYNAMIC NVARCHAR(MAX) = ''
	DECLARE @SORT_DYNAMIC NVARCHAR(70) = N'';

	-- Gets the Sales Order Document Restrictions
	DECLARE @SOrderRestric	NVARCHAR(256)
	DECLARE @SOrderINID     NVARCHAR(3)
	DECLARE @SOrderConstant	NVARCHAR(10)
	SET @SOrderConstant = N'SO_RESTRIC'
	SET @SOrderINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue @SOrderConstant, @SOrderINID OUT, @SOrderRestric OUT

	-- Gets the Credit Order Document Restrictions
	DECLARE @CORestric	NVARCHAR(256)
	DECLARE @COINID		NVARCHAR(3)
	SET @COINID = @InstallationID
	EXEC [DBO].CMM_GetConstantValue N'CO_RESTRIC', @COINID OUT, @CORestric OUT

	-- Gets the Tracking Line Type
	DECLARE @SurchargeLnType	NVARCHAR(2)
	EXEC [DBO].CMM_GetConstantValue N'SURCHARGLN', @InstallationID, @SurchargeLnType OUT

	-------------------------------------------------------
	-- Paging Calculation
	-------------------------------------------------------
	-- Set the first row to be selected
	SET @ROWSTART = (@PageSize * @PageIndex) - @PageSize + 1
	-- Set the last row to be selected
	SET @ROWEND = @PageIndex * @PageSize

	IF @DisplayItemSetting = 'LITM' BEGIN
		SET @DISPLAYITEM_DYNAMIC = ' A.LongItemNumber ';
	END
	ELSE IF @DisplayItemSetting = 'AITM' BEGIN
		SET @DISPLAYITEM_DYNAMIC = ' A.AuxItemNumber '
	END 
	ELSE BEGIN
		SET @DISPLAYITEM_DYNAMIC = ' A.ItemNumber ';        
	END;

	SET @SORT_DYNAMIC = CASE @SortBy
		WHEN 0 THEN N' A.OrderNumber ASC ' /* Ascending */
		WHEN 1 THEN N' A.OrderNumber DESC ' /* Descending */
		WHEN 2 THEN N' A.ItemDescription1 ASC ' /* Ascending */
		WHEN 3 THEN N' A.ItemDescription1 DESC ' /* Descending */
		WHEN 4 THEN @DISPLAYITEM_DYNAMIC + N' ASC ' /* Ascending */
		WHEN 5 THEN @DISPLAYITEM_DYNAMIC + N' DESC ' /* Descending */
	END;

	------------------------------------------------------
	-- Dynamic query Inner
	------------------------------------------------------

	IF (@CompanyConstant = 'L') BEGIN
			SET @INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 CR
								ON CR.CICO = Company
								AND CR.CI$9INID = @ConstantInstallation'
	END
	IF (@SOrderRestric = N'1' ) BEGIN
			SET @INNER_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 DR 
								ON  DR.DR$9INID = @SOrderINID
								AND DR.DR$9CNST = @SOrderConstant
								AND DR.DRKY	= OrderType '
	END

	------------------------------------------------------
	-- Dynamic query condition
	------------------------------------------------------
	IF (@OrderNumber IS NOT NULL) BEGIN

		SET @WHERE_DYNAMIC += N' A.SDDOCO = @OrderNumber '
	END	
	
	IF (@AddressNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND ';
		
		/* Validate address book type */
		IF (@AddressBookType = 0)
			SET @WHERE_DYNAMIC += N' A.SDAN8 = @AddressNumber ';
		ELSE IF(@AddressBookType = 1)
			SET @WHERE_DYNAMIC += N' B.SD$9AN8 = @AddressNumber ';
		ELSE
			SET @WHERE_DYNAMIC += N' ISNULL(B.SD$9AN8, A.SDAN8) = @AddressNumber ';
	END

	IF (@OrderType <> N'*')BEGIN
		IF (@WHERE_DYNAMIC <> '')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' A.SDDCTO = @OrderType '
	END

	IF (@ItemNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND ' 
		SET @WHERE_DYNAMIC += N' A.SDITM = @ItemNumber '
	END

	IF (@Company <> N'*' AND @Company <> N'00000') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' A.SDKCOO = @Company '
	END

	IF (@TransactionDateFrom > 0) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '	
		SET @WHERE_DYNAMIC += N' A.SDTRDJ BETWEEN @TransactionDateFrom AND @TransactionDateTo '
	END

	SET @WHERE_DYNAMIC = N' WHERE ' + @WHERE_DYNAMIC + ' AND A.SDLNTY <> @SurchargeLnType '

	------------------------------------------------------
	--Dynamic Left Join 
	------------------------------------------------------

	IF (@DefLangValue = @LangPref)
	
	BEGIN 
	SET  @LEFT_DYNAMIC += N' LEFT OUTER JOIN  ( SELECT CHITM, CHDSC1 AS DESC1, CHDSC2 AS DESC2, ROW_NUMBER() OVER ( PARTITION BY CHITM
												ORDER BY CH$9INID DESC ) AS INSTALL
												FROM [SCDATA].FQ67410
												WHERE CH$9DS=0
												AND (CH$9INID = @InstallationID OR CH$9INID = @BInstallationID ) ) ContenDesc
												ON ContenDesc.CHITM =ItemNumber  
												AND INSTALL = 1 ' 
	END
	ELSE
	SET  @LEFT_DYNAMIC += N'  LEFT OUTER JOIN  ( SELECT CHITM, ISNULL(B.CLDSC1, A.CHDSC1) AS DESC1, ISNULL(B.CLDSC2, A.CHDSC2) AS DESC2,
															ROW_NUMBER() OVER ( PARTITION BY CHITM ORDER BY CH$9INID DESC ) AS INSTALL 
													FROM [SCDATA].FQ67410 A
													LEFT OUTER JOIN [SCDATA].FQ67410L B
													ON  B.CLITM = A.CHITM
													AND B.CL$9INID = A.CH$9INID
													AND B.CL$9DS = A.CH$9DS
													AND B.CLLNGP = @LangPref
													WHERE (A.CH$9INID = @InstallationID OR A.CH$9INID = @BInstallationID )
													AND  A.CH$9DS = 0) ContenDesc
													ON ContenDesc.CHITM =ItemNumber  
													AND INSTALL = 1 ' 
	
	------------------------------------------------------
	--Dynamic Inner Join 
	------------------------------------------------------
	IF (@AddressNumber IS NOT NULL) BEGIN
		IF (@AddressBookType = 0) BEGIN
			SET @UNION_DYNAMIC = N' UNION_LINES AS (
				SELECT 	
					A.SDDOCO	AS OrderNumber, 
					A.SDDCTO	AS OrderType, 
					A.SDKCOO	AS Company,    
					A.SDLNID	AS LineNumber, 
					A.SDLITM	AS LongItemNumber,
					A.SDAITM	AS AuxItemNumber,
					A.SDLNTY	AS LineType,
					A.SDDSC1	AS ItemDescription1,
					A.SDDSC2	AS ItemDescription2,			
					A.SDUPRC	AS UnitPrice,
					A.SDFUP		AS ForeignUnitPrice,
					A.SDUORG	AS Quantity,
					A.SDSOQS	AS ShippedQuantity,
					A.SDITM		AS ItemNumber,
					A.SDUOM		AS UnitOfMeasure, 
					A.SDUOM4	AS PricingUOM, 
					A.SDAN8		AS SCBillToNumber,
					0			AS SCBillToContactID,
					0			AS AddressBookType,
					A.SDNXTR	AS NextStatus,
					A.SDTAX1	AS TaxableYN, 
					A.SDLOCN	AS Location,
					A.SDLOTN	AS LotNumber,
					A.SDADDJ	AS OrderActualDeliveryDate,
					A.SDIVD		AS DateInvoice,
					A.SDTXA1	AS TaxArea,
					A.SDEXR1	AS TaxExplanationCode,
					A.SDSO09	AS SalesOrderStatus09
				FROM [SCDATA].F4211 A 
				' + @WHERE_DYNAMIC + N'
				UNION ALL
				SELECT		
					A.SDDOCO	AS OrderNumber, 
					A.SDDCTO	AS OrderType, 
					A.SDKCOO	AS Company,    
					A.SDLNID	AS LineNumber, 
					A.SDLITM	AS LongItemNumber,
					A.SDAITM	AS AuxItemNumber,
					A.SDLNTY	AS LineType,
					A.SDDSC1	AS ItemDescription1,
					A.SDDSC2	AS ItemDescription2,			
					A.SDUPRC	AS UnitPrice,
					A.SDFUP		AS ForeignUnitPrice,
					A.SDUORG	AS Quantity,
					A.SDSOQS	AS ShippedQuantity,
					A.SDITM		AS ItemNumber,
					A.SDUOM		AS UnitOfMeasure, 
					A.SDUOM4	AS PricingUOM, 
					A.SDAN8		AS SCBillToNumber,
					0			AS SCBillToContactID,
					0			AS AddressBookType,
					A.SDNXTR	AS NextStatus,
					A.SDTAX1	AS TaxableYN, 
					A.SDLOCN	AS Location,
					A.SDLOTN	AS LotNumber,
					A.SDADDJ	AS OrderActualDeliveryDate,
					A.SDIVD		AS DateInvoice,
					A.SDTXA1	AS TaxArea,
					A.SDEXR1	AS TaxExplanationCode,
					A.SDSO09	AS SalesOrderStatus09
				FROM [SCDATA].F42119 A 
				' + @WHERE_DYNAMIC + N'
			) ';
		END
		ELSE BEGIN
			SET @UNION_DYNAMIC = N' UNION_LINES AS (
				SELECT 	
					A.SDDOCO	AS OrderNumber, 
					A.SDDCTO	AS OrderType, 
					A.SDKCOO	AS Company,    
					A.SDLNID	AS LineNumber, 
					A.SDLITM	AS LongItemNumber,
					A.SDAITM	AS AuxItemNumber,
					A.SDLNTY	AS LineType,
					A.SDDSC1	AS ItemDescription1,
					A.SDDSC2	AS ItemDescription2,			
					A.SDUPRC	AS UnitPrice,
					A.SDFUP		AS ForeignUnitPrice,
					A.SDUORG	AS Quantity,
					A.SDSOQS	AS ShippedQuantity,
					A.SDITM		AS ItemNumber,
					A.SDUOM		AS UnitOfMeasure, 
					A.SDUOM4	AS PricingUOM,
					B.SD$9AN8	AS SCBillToNumber,
					B.SDIDLN	AS SCBillToContactID,
					B.SD$9TYP	AS AddressBookType,
					A.SDNXTR	AS NextStatus,
					A.SDTAX1	AS TaxableYN, 
					A.SDLOCN	AS Location,
					A.SDLOTN	AS LotNumber,
					A.SDADDJ	AS OrderActualDeliveryDate,
					A.SDIVD		AS DateInvoice,
					A.SDTXA1	AS TaxArea,
					A.SDEXR1	AS TaxExplanationCode,
					A.SDSO09	AS SalesOrderStatus09
				FROM [SCDATA].F4211 A 
				INNER JOIN [SCDATA].FQ674211 B
					ON  B.SDDOCO = A.SDDOCO
					AND B.SDDCTO = A.SDDCTO 
					AND B.SDKCOO = A.SDKCOO 
					AND B.SDLNID = A.SDLNID 
					AND B.SD$9TYP = 1
				' + @WHERE_DYNAMIC + N'
				UNION ALL
				SELECT		
					A.SDDOCO	AS OrderNumber, 
					A.SDDCTO	AS OrderType, 
					A.SDKCOO	AS Company,    
					A.SDLNID	AS LineNumber, 
					A.SDLITM	AS LongItemNumber,
					A.SDAITM	AS AuxItemNumber,
					A.SDLNTY	AS LineType,
					A.SDDSC1	AS ItemDescription1,
					A.SDDSC2	AS ItemDescription2,			
					A.SDUPRC	AS UnitPrice,
					A.SDFUP		AS ForeignUnitPrice,
					A.SDUORG	AS Quantity,
					A.SDSOQS	AS ShippedQuantity,
					A.SDITM		AS ItemNumber,
					A.SDUOM		AS UnitOfMeasure, 
					A.SDUOM4	AS PricingUOM, 
					B.SD$9AN8	AS SCBillToNumber,
					B.SDIDLN	AS SCBillToContactID,
					B.SD$9TYP	AS AddressBookType,
					A.SDNXTR	AS NextStatus,
					A.SDTAX1	AS TaxableYN, 
					A.SDLOCN	AS Location,
					A.SDLOTN	AS LotNumber,
					A.SDADDJ	AS OrderActualDeliveryDate,
					A.SDIVD		AS DateInvoice,
					A.SDTXA1	AS TaxArea,
					A.SDEXR1	AS TaxExplanationCode,
					A.SDSO09	AS SalesOrderStatus09
				FROM [SCDATA].F42119 A 
				INNER JOIN [SCDATA].FQ674211 B
					ON  B.SDDOCO = A.SDDOCO
					AND B.SDDCTO = A.SDDCTO 
					AND B.SDKCOO = A.SDKCOO 
					AND B.SDLNID = A.SDLNID 
					AND B.SD$9TYP = 1
				' + @WHERE_DYNAMIC + N'
			) ';
		END	
	END
	ELSE BEGIN
		SET @UNION_DYNAMIC = N' UNION_LINES AS (
			SELECT 	
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2,			
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM,
				CASE B.SD$9TYP WHEN 1 THEN B.SD$9AN8 ELSE A.SDAN8 END	AS SCBillToNumber,
				ISNULL(B.SDIDLN, 0)		AS SCBillToContactID,
				ISNULL(B.SD$9TYP, 0)	AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM [SCDATA].F4211 A 
			LEFT OUTER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID 
			' + @WHERE_DYNAMIC + N'
			UNION ALL
			SELECT		
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2,			
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM, 
				CASE B.SD$9TYP WHEN 1 THEN B.SD$9AN8 ELSE A.SDAN8 END	AS SCBillToNumber,
				ISNULL(B.SDIDLN, 0)		AS SCBillToContactID,
				ISNULL(B.SD$9TYP, 0)	AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM [SCDATA].F42119 A 
			LEFT OUTER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID 
			' + @WHERE_DYNAMIC + N'
		) ';
	END;

	SET @TAX_DYNAMIC = N' 
			LEFT OUTER JOIN [SCDATA].F4201 B
				ON  B.SHDOCO = A.OrderNumber
				AND B.SHDCTO = A.OrderType
				AND B.SHKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.OrderNumber 
				AND Tax.DTDCTO = A.OrderType
				AND Tax.DTKCOO = A.Company 
				AND Tax.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F4201TX TaxHeader
				ON TaxHeader.STDOCO = A.OrderNumber 
				AND TaxHeader.STDCTO = A.OrderType
				AND TaxHeader.STKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F42019 C  
				ON  C.SHDOCO = A.OrderNumber
				AND C.SHDCTO = A.OrderType
				AND C.SHKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.OrderNumber 
				AND TxHistory.DTDCTO = A.OrderType
				AND TxHistory.DTKCOO = A.Company 
				AND TxHistory.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F42019TX TxHistoryHeader
				ON TxHistoryHeader.STDOCO = A.OrderNumber 
				AND TxHistoryHeader.STDCTO = A.OrderType
				AND TxHistoryHeader.STKCOO = A.Company ';

	SET @SQL_DYNAMIC = N'
		;WITH '+ @UNION_DYNAMIC +N'
		SELECT  
			A.OrderNumber, 
			A.OrderType, 
			A.Company, 
			A.LineNumber, 
			A.ItemDescription1, 
			A.ItemDescription2, 
			A.UnitPrice, 
			A.ForeignUnitPrice,
			A.Quantity, 
			A.ShippedQuantity, 
			A.LongItemNumber,
			A.AuxItemNumber,
			A.ItemNumber,  
			A.UnitOfMeasure, 
			A.PricingUOM,
			A.SCBillToNumber, 
			A.SCBillToContactID, 
			A.AddressBookType, 
			A.NextStatus, 
			A.TaxableYN, 
			A.Location, 
			A.LotNumber,
			A.OrderActualDeliveryDate,
			A.DateInvoice,
			A.TaxArea,
			A.TaxExplanationCode,
			A.SalesOrderStatus09
		INTO 
			#TMP_TABLE 
		FROM UNION_LINES A '
		+ @INNER_DYNAMIC +N' 

		;WITH PAGING AS ( 	
			SELECT
				OrderNumber, 
				OrderType, 
				Company, 
				LineNumber, 
				ItemDescription1, 
				ItemDescription2, 
				UnitPrice, 
				ForeignUnitPrice,
				Quantity, 
				ShippedQuantity, 
				ItemNumber,
				A.LongItemNumber,
				A.AuxItemNumber,
				UnitOfMeasure,
				A.PricingUOM,
				SCBillToNumber, 
				SCBillToContactID, 
				AddressBookType, 
				NextStatus, 
				TaxableYN,
				Location, 
				LotNumber,
				OrderActualDeliveryDate,
				DateInvoice,
				TaxArea,
				TaxExplanationCode,
				SalesOrderStatus09,
				ROW_NUMBER() OVER (ORDER BY '+@SORT_DYNAMIC+N') AS RNUM
			FROM #TMP_TABLE	A
		)
		SELECT 
			OrderNumber, 
			OrderType, 
			Company, 
			LineNumber, 
			ISNULL (ContenDesc.DESC1, ItemDescription1) AS ItemDescription1, 
			ISNULL (ContenDesc.DESC2, ItemDescription2) AS ItemDescription2,
			UnitPrice, 
			ForeignUnitPrice,
			Quantity, 
			ShippedQuantity,
			ISNULL(RETURNQ.ReturnQuantity,0) ReturnedQuantity, 
			ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			UnitOfMeasure, 
			A.PricingUOM,
			SCBillToNumber, 
			SCBillToContactID, 
			AddressBookType, 
			NextStatus, 
			TaxableYN,
			ISNULL(B.SHCRRM, C.SHCRRM) AS CurrencyMode, 
			Location, 
			LotNumber, 
			ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC)	AS TaxedUnitPrice,
			ISNULL(Tax.DTTFUP, TxHistory.DTTFUP)	AS ForeignTaxedUnitPrice, 
			ISNULL(TaxHeader.STUTP, TxHistoryHeader.STUTP) AS UseTaxedPrices, 
			OrderActualDeliveryDate,
			DateInvoice,
			TaxArea,
			TaxExplanationCode,
			SalesOrderStatus09,
			TotalRowCount = (SELECT COUNT(1) AS TotalRowCount FROM PAGING )
		FROM PAGING A 
		LEFT OUTER JOIN [DBO].COM_GetSOReturnedQuantityFnc (@COINID,@CORestric) RETURNQ
				ON RETURNQ.SDOORN = OrderNumber
				AND RETURNQ.SDOCTO = OrderType
				AND RETURNQ.SDOKCO = Company
				AND RETURNQ.SDOGNO = LineNumber   
		'+ @TAX_DYNAMIC + 
		+ @LEFT_DYNAMIC + N'
		WHERE 
		((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN @ROWSTART AND @ROWEND)) ORDER BY RNUM'

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@Company NVARCHAR(5), @OrderType NVARCHAR(2), @AddressNumber FLOAT, @OrderNumber FLOAT,
								@TransactionDateFrom NUMERIC, @TransactionDateTo NUMERIC, @ItemNumber FLOAT,@SortBy	INT, 
								@InstallationID NVARCHAR(3), @SurchargeLnType NVARCHAR(2),
								@BInstallationID NVARCHAR(3), @SOrderINID NVARCHAR(3), 
								@SOrderConstant NVARCHAR(10), @CompanyConstant	NVARCHAR(256), @ConstantInstallation NVARCHAR(3),
								@CORestric NVARCHAR(256), @COINID NVARCHAR(3), @PageIndex INT, 
								@PageSize INT, @ROWSTART INT, @ROWEND INT, @LangPref NVARCHAR(2)',
								@Company = @Company, @OrderType = @OrderType, @AddressNumber = @AddressNumber, @OrderNumber = @OrderNumber, 
								@TransactionDateFrom = @TransactionDateFrom, @TransactionDateTo = @TransactionDateTo, @ItemNumber = @ItemNumber,
								@SortBy = @SortBy, @InstallationID = @InstallationID, @SurchargeLnType = @SurchargeLnType,
								@BInstallationID = @BInstallationID, @SOrderINID = @SOrderINID,
								@SOrderConstant = @SOrderConstant, @CompanyConstant = @CompanyConstant, @ConstantInstallation = @ConstantInstallation,
								@CORestric = @CORestric, @COINID = @COINID, @PageIndex = @PageIndex, @PageSize = @PageSize, @ROWSTART = @ROWSTART, 
								@ROWEND = @ROWEND, @LangPref = @LangPref

GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_GetTaxInfo'))
	BEGIN
		DROP  Procedure  [DBO].COM_GetTaxInfo
	END

GO

-- #desc						Load Area and tax expl code info
-- #bl_class					Premier.Commerce.TaxInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @AddressType			Address Book Type (Consumer/Customer)
-- #param @BillToNumber			Billing Address Number
-- #param @ShipToNumber			Shipping Address Number
-- #param @ShipToAddressType	ShipTo Address Book Type (Consumer/Customer)
-- #param @NONTAXABLE			Non Taxable Tax Area Constant

CREATE Procedure [DBO].COM_GetTaxInfo
(
	@AddressType	FLOAT,
	@Company		NVARCHAR(5),
	@BillToNumber	FLOAT,
	@ShipToNumber	FLOAT,
	@ShipToAddressType FLOAT,
	@NONTAXABLE		NVARCHAR(256)
)
AS

BEGIN

DECLARE @SHIPTAXAREA NVARCHAR(10)
DECLARE @SHIPEXPCODE NVARCHAR(2)
DECLARE @BILLEXPCODE NVARCHAR(2)

	IF @AddressType = 0 	--CUSTOMER
	 BEGIN
	 
	 
		SELECT	@SHIPTAXAREA = AITXA1, 
			@SHIPEXPCODE = AIEXR1
		FROM	[DBO].CST_GetCustomerInfoFnc(@Company, @ShipToNumber)	
		
		
		SELECT	@BILLEXPCODE = AIEXR1
		FROM	[DBO].CST_GetCustomerInfoFnc(@Company, @BillToNumber)
			
	 END
	ELSE		-- CONSUMER
	 BEGIN
	
		SELECT	@BILLEXPCODE = PREXR1
		FROM	[SCDATA].FQ670302
		WHERE	PR$9AN8 = @BillToNumber
	
		/* In POS when the order is Cash and Carry, the default ship will be the Default Customer ShipTo
		 * and Bill to could be a Consumer
		 */
		IF @ShipToAddressType = 0
		BEGIN
			SELECT	@SHIPTAXAREA = AITXA1, 
				@SHIPEXPCODE = AIEXR1
			FROM	[DBO].CST_GetCustomerInfoFnc(@Company, @ShipToNumber)	
		END
		ELSE BEGIN
			SELECT	@SHIPTAXAREA = PRTXA1, 
				@SHIPEXPCODE = PREXR1
			FROM	[SCDATA].FQ670302
			WHERE	PR$9AN8 = @ShipToNumber
		END
	 END

	IF @SHIPTAXAREA <> ''
	 BEGIN
		IF (@BILLEXPCODE <> '')
		 BEGIN
			SELECT	@SHIPTAXAREA AS TaxArea, @BILLEXPCODE AS TaxExplanationCode
		 END	
		ELSE
		 BEGIN
			SELECT	@SHIPTAXAREA AS TaxArea, @SHIPEXPCODE AS TaxExplanationCode
		 END
	 END
	ELSE
	 BEGIN
		IF (@BILLEXPCODE <> '')
		 BEGIN
			SELECT	@NONTAXABLE AS TaxArea, @BILLEXPCODE AS TaxExplanationCode
		 END
		ELSE
		 BEGIN
			SELECT '' AS TaxArea, '' AS TaxExplanationCode
		 END
	 END

END


GO

 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_UpdCarrierTracking'))
	BEGIN
		DROP  Procedure  [DBO].COM_UpdCarrierTracking
	END

GO

-- #desc					Updates Carrier Tracking 
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @CarrierID		Carrier ID
-- #param @TrackingURL		Tracking URL
-- #param @ProgramID		Program ID
-- #param @WorkStationID	WorkStation ID
-- #param @UserID			User ID
-- #param @DateUpdated		Last Date Update
-- #param @TimeLastUpdated	Last Updated time

CREATE Procedure [DBO].COM_UpdCarrierTracking
(
	@CarrierID FLOAT,
	@TrackingURL NVARCHAR(256),
	@UserID NVARCHAR(10),
	@ProgramID NVARCHAR(10),
	@WorkStationID NVARCHAR(10),
	@DateUpdated NUMERIC,
	@TimeLastUpdated NUMERIC
)
AS

SET NOCOUNT ON

UPDATE 
	[SCDATA].FQ67CARS
SET  
	CREMAL = @TrackingURL,
	CRUSER = @UserID,
	CRPID  = @ProgramID, 
	CRJOBN = @WorkStationID,
	CRUPMJ = @DateUpdated, 
	CRUPMT = @TimeLastUpdated
	
WHERE 
	CRAN8 = @CarrierID


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_UpdMarketingCode'))
	BEGIN
		DROP  Procedure  [DBO].COM_UpdMarketingCode
	END

GO

-- #desc					Updates marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Constant ID
-- #param @BranchPlant		Branch plant
-- #param @Description1		Description 1
-- #param @Description2		Description 2
-- #param @EffectiveDate	Effective date
-- #param @ExpirationDate	Expiration date
-- #param @UsageMode		Usage Mode flag

CREATE Procedure [DBO].COM_UpdMarketingCode
	@MarketingCode NVARCHAR(30),
	@BranchPlant NVARCHAR(12),
	@Description1 NVARCHAR(30),
	@Description2 NVARCHAR(30),
	@EffectiveDate NUMERIC,
	@ExpirationDate NUMERIC,
	@UsageMode NVARCHAR(1)
AS

SET NOCOUNT ON

UPDATE 
	[SCDATA].FQ674204
SET  
	MKMCU = @BranchPlant,
	MKDSC1 = @Description1,
	MKDSC2 = @Description2,
	MKEFTJ = @EffectiveDate,
	MKEXDJ = @ExpirationDate,
	MK$9WEB = @UsageMode
WHERE 
	MK$9MKT = @MarketingCode


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_UpdMarketingCodeValue'))
	BEGIN
		DROP  Procedure  [DBO].COM_UpdMarketingCodeValue
	END

GO

-- #desc					Updates marketing code value 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @MarketingCode	Marketing Code
-- #param @PriceKey			Price Key
-- #param @PriceKeyValue	Price Key Value

CREATE Procedure [DBO].COM_UpdMarketingCodeValue
	@MarketingCode NVARCHAR(30),
	@PriceKey NVARCHAR(10),
	@PriceKeyValue NVARCHAR(12)

AS

SET NOCOUNT ON

UPDATE 
	[SCDATA].FQ674205
SET  
	MK$9MVAL = @PriceKeyValue
WHERE 
	MK$9MKT = @MarketingCode AND
	MK$9MCOL = @PriceKey



GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_UpdP4210VersRuleDetail'))
	BEGIN
		DROP  Procedure  [DBO].COM_UpdP4210VersRuleDetail
	END

GO

-- #desc					Update P4210 Version Rule Detail
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleUniqueID		Rule Unique ID
-- #param @Description		Description
-- #param @P4210Version		P4210 Version
-- #param @Hierarchy		Hierarchy

CREATE Procedure [DBO].COM_UpdP4210VersRuleDetail
	@InstallationID			NVARCHAR(3),
	@RuleUniqueID			FLOAT,
	@LineID					FLOAT,
	@UserDefinedKey			NVARCHAR(10),
	@BranchPlant			NVARCHAR(12),
	@AddressNumber			FLOAT,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC,
	@WorkStationID			NVARCHAR(10)
AS

SET NOCOUNT ON

UPDATE
	[SCDATA].FQ674231
SET
	RDUKID	= @RuleUniqueID,
	RDLNID	= @LineID,
	RDKY	= @UserDefinedKey,
	RDMCU	= @BranchPlant,
	RD$9AN8 = @AddressNumber,
	RDURAB	= @UserReservedNumber,
	RDURAT	= @UserReservedAmount,
	RDURCD	= @UserReservedCode,
	RDURDT	= @UserReservedDate,
	RDURRF	= @UserReservedReference,
	RDUSER	= @UserID,
	RDPID	= @ProgramID,
	RDUPMJ	= @DateUpdated,
	RDUPMT	= @TimeLastUpdated,
	RDJOBN	= @WorkStationID
WHERE
	RD$9INID = @InstallationID AND
	RDUKID = @RuleUniqueID AND
	RDLNID = @LineID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].COM_UpdP4210VersRuleHeader'))
	BEGIN
		DROP  Procedure  [DBO].COM_UpdP4210VersRuleHeader
	END

GO

-- #desc					Update P4210 Version Rule Header
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @RuleUniqueID		Rule Unique ID
-- #param @Description		Description
-- #param @P4210Version		P4210 Version
-- #param @Hierarchy		Hierarchy

CREATE Procedure [DBO].COM_UpdP4210VersRuleHeader
	@InstallationID			NVARCHAR(3),
	@RuleUniqueID			FLOAT,
	@Description			NVARCHAR(30),
	@P4210Version			NVARCHAR(10),
	@Hierarchy				FLOAT,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC,
	@WorkStationID			NVARCHAR(10)
AS

SET NOCOUNT ON

UPDATE
	[SCDATA].FQ674230
SET
	RHDSC1	= @Description,
	RHVER	= @P4210Version,
	RHSEQ	= @Hierarchy,
	RHURAB	= @UserReservedNumber,
	RHURAT	= @UserReservedAmount,
	RHURCD	= @UserReservedCode,
	RHURDT	= @UserReservedDate,
	RHURRF	= @UserReservedReference,
	RHUSER	= @UserID,
	RHPID	= @ProgramID,
	RHUPMJ	= @DateUpdated,
	RHUPMT	= @TimeLastUpdated,
	RHJOBN	= @WorkStationID
WHERE
	RH$9INID =  @InstallationID AND
	RHUKID	=  @RuleUniqueID

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].QTS_ExcCheckQuoteStatus'))
	BEGIN
		DROP  PROCEDURE  [DBO].QTS_ExcCheckQuoteStatus
	END
GO

-- #desc					Execute Update Quote Status
-- #bl_class				Premier.Commerce.Quote.CheckQuoteStatusCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @Company			Company Number
-- #param @OrderType		Order Type	
-- #param @OrderNumber		Order Number
-- #param @@LineNumbersXML	Line Number XML

CREATE PROCEDURE [DBO].QTS_ExcCheckQuoteStatus
(
	@InstallationID		NVARCHAR(3),
	@Company			NVARCHAR(5),
	@OrderType			NVARCHAR(2),
	@OrderNumber		FLOAT,
	@LineNumbersXML		XML
)
AS
	--Dynamic
	DECLARE @SQL_DYNAMIC	 NVARCHAR(MAX)
	DECLARE @LineNumberQuery NVARCHAR(MAX)
	
	-- Gets the Quote Status for Quote Convertion
	DECLARE @QuoteStatus	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'QUOTSTAT', @InstallationID, @QuoteStatus OUT
	
	SET @LineNumberQuery = N' '
	IF @LineNumbersXML IS NOT NULL BEGIN
		--Quote Detail
		SET @LineNumberQuery = N' INNER JOIN @LineNumbersXML.nodes(''/items/item'') AS items(item)
				ON SDLNID = items.item.value(''.'',''FLOAT'') '
	END

	SET @SQL_DYNAMIC = N'
			SELECT 
				SDLNID AS LineNumberID
			FROM 
				[SCDATA].F4211
			'+ @LineNumberQuery + N'
			WHERE 
				SDKCOO = @Company
				AND SDDOCO = @OrderNumber
				AND SDDCTO = @OrderType
				AND SDNXTR = @QuoteStatus'		

	EXECUTE sp_executesql @SQL_DYNAMIC,	N'@LineNumbersXML XML, @Company NVARCHAR(5), @OrderNumber FLOAT, @OrderType NVARCHAR(2), @QuoteStatus NVARCHAR(256) ',
							@LineNumbersXML = @LineNumbersXML, @Company = @Company, @OrderNumber = @OrderNumber, @OrderType = @OrderType, @QuoteStatus = @QuoteStatus



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'IF' AND id = OBJECT_ID(N'[DBO].QTS_GetQtDetStatByShipToFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].QTS_GetQtDetStatByShipToFnc
	END

GO

-- #desc						Calculate Quote Status in Detail Mode based in ShipTo lines
--								Get a table with Quote Number, Quote Company, Quote Type and Quote Status based in ShipTo lines
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteRecentList

-- #param @QuoteStatus			Quote Acceptance Status
-- #param @ShiptoNumber			Ship to Number

CREATE FUNCTION [DBO].QTS_GetQtDetStatByShipToFnc
(	
	@QuoteStatus		NVARCHAR(3),
	@ShiptoNumber		FLOAT
)
RETURNS TABLE 
AS
RETURN 
WITH CTE AS (
		SELECT 
			SDDOCO, SDDCTO, SDKCOO,
			CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
				CASE WHEN SDNXTR =  @QuoteStatus THEN 'READYFORREVIEW' 
						WHEN SDNXTR <  @QuoteStatus THEN 'PENDING' 
				ELSE 'COMPLETED'END
			ELSE 'CANCELLED' END AS SDNXTR
		FROM [SCDATA].F4211 	--Sales Order Lines
		WHERE  SDSHAN =@ShiptoNumber AND SDRLIT = ''

		UNION ALL

		SELECT 
			SDDOCO, SDDCTO, SDKCOO,
			CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
				CASE WHEN SDNXTR =  @QuoteStatus THEN 'READYFORREVIEW' 
						WHEN SDNXTR <  @QuoteStatus THEN 'PENDING' 
				ELSE 'COMPLETED'END
			ELSE 'CANCELLED' END AS SDNXTR
		FROM [SCDATA].F42119 	--Sales Order Lines
			WHERE SDSHAN =@ShiptoNumber AND SDRLIT = '' 
		)
	,CTE2 AS (  
		SELECT 
			SDDOCO, SDDCTO, SDKCOO,SDNXTR,ROW_NUMBER() OVER ( PARTITION BY SDDOCO, SDDCTO, SDKCOO ORDER BY SDNXTR  DESC ) STAT  
		FROM CTE 
	)
	
	SELECT 
		SDDOCO, SDDCTO, SDKCOO,SDNXTR FROM CTE2
	WHERE STAT= 1




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteConvertInfo'))
	BEGIN
		DROP PROCEDURE [DBO].QTS_GetQuoteConvertInfo
	END
GO

-- #desc					Reads quote order header/lines information to convert
-- #bl_class				Premier.Commerce.Quote.QuoteConvertInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation Id.
-- #param @Company			Company Number to search for.
-- #param @OrderType		Order number to search for.
-- #param @OrderNumber		Order type to search for.
-- #param @LineNumbersXML	XML with list of lines to search for. If parameter is null, then all lines are returned

CREATE PROCEDURE [DBO].QTS_GetQuoteConvertInfo
(
	@InstallationID  NVARCHAR(3),
	@Company		 NVARCHAR(5),
	@OrderType		 NVARCHAR(2),
	@OrderNumber	 FLOAT,
	@LineNumbersXML	 XML,
	@LangPref		 NVARCHAR(2)
)
AS
	--Dynamic
	DECLARE @SQL_DYNAMIC	NVARCHAR(MAX)
	DECLARE @LineNumberQuery NVARCHAR(MAX)
	
	DECLARE @IsOverrideShipTo INT

	-- Gets the Quote Status for Quote Convertion
	DECLARE @QuoteStatus	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue N'QUOTSTAT', @InstallationID, @QuoteStatus OUT
    
    -- Gets Customer Cross Reference Type Restrictions
	DECLARE @CustCrossRefType	NVARCHAR(256)	
    EXEC [DBO].CMM_GetConstantValue N'CUST_CROSS', @InstallationID, @CustCrossRefType OUT
    
    DECLARE @CurrentJulianDate NUMERIC
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())    
    
	SET @LineNumberQuery = N' '
	IF  @LineNumbersXML IS NOT NULL BEGIN
		--Quote Detail
		SET @LineNumberQuery = N' INNER JOIN @LineNumbersXML.nodes(''/items/item'') AS items(item)
				ON A.SDLNID = items.item.value(''.'',''FLOAT'') '
	END
  
	SET  @SQL_DYNAMIC =
	N'SELECT 
		A.SDKCOO	AS Company, 
		A.SDDCTO	AS OrderType,
		A.SDDOCO	AS OrderNumber,
		A.SDLNID	AS LineNumberID,
		A.SDITM		AS ItemNumber,
		A.SDLITM	AS LongItemNumber,
		A.SDAITM	AS AuxItemNumber,
		A.SDMCU		AS BusinessUnit,
		A.SDAN8		AS BillToNumber,
		A.SDSHAN	AS ShipToID,
		A.SDDRQJ	AS RequestedDate,     
		A.SDLNTY	AS LineType,
		A.SDUORG	AS QuantityOrdered,
		A.SDUPRC	AS UnitPrice,
		A.SDAEXP	AS ExtendedPrice,
		A.SDFUP		AS ForeignUnitPrice,
		A.SDFEA		AS ForeignExtPrice,
		A.SDUOM		AS TransactionUOM,
		A.SDUOM4	AS PricingUOM,
		A.SDPROV	AS OverridePrice,
		A.SDDMCT	AS AgreementNumber,
		A.SDLOB		AS LineofBusiness,
		A.SDEUSE	AS EndUse,
		A.SDDTYS	AS DutyStatus,
		A.SDMOT		AS ModeOfTransport,
		A.SDUPC1	AS PriceCode1,
		A.SDUPC2	AS PriceCode2,
		A.SDUPC3	AS PriceCode3,
		A.SDTAX1	AS TaxableYN,    
		ISNULL(B.SD$9TYP,0)			 AS AddressType,	
		A.SDAN8	 AS SCBillToNumber,
		A.SDSHAN	 AS SCShipToNumber,			   		
		ISNULL(B.SDIDLN, 0)			 AS SCBillToContactID,   
		ISNULL(B.SDRCK7, 0)			 AS SCShipToContactID,  	    
		ISNULL(B.SD$9SLN, 0)		 AS ShipLineNumber,
		ISNULL(X.IVCITM,'' '')		 AS ItemCrossRefNumber,
		ISNULL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		ISNULL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		ISNULL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		ISNULL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		ISNULL(Tax.DTUTA,0)   AS UnitTaxAmount,
		ISNULL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		ISNULL(Tax.DTETA,0)   AS ExtendedTaxAmount,
		ISNULL(Tax.DTFETA,0)  AS ForeignExtTaxAmount,
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDCPNT				AS ComponentLineNumber,
		A.SDKTLN				AS KitMasterLineNo,
		ISNULL(Tax.DTTPROV,0)  AS TaxedPriceOverrideCode
	FROM [SCDATA].F4211 A
	'+ @LineNumberQuery + N'
	LEFT OUTER JOIN [SCDATA].FQ674211 B
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
	LEFT OUTER JOIN [SCDATA].F4104	X --Item Cross Ref
		ON	X.IVAN8  = A.SDAN8
		AND X.IVITM  = A.SDITM
		AND X.IVXRT = @CustCrossRefType
		AND @CurrentJulianDate >= X.IVEFTJ AND @CurrentJulianDate <= X.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.SDDOCO
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID	
	WHERE A.SDKCOO = @Company
		AND A.SDDOCO = @OrderNumber
		AND A.SDDCTO = @OrderType
		AND A.SDNXTR = @QuoteStatus
	UNION ALL
	SELECT 
		A.SDKCOO	AS Company, 
		A.SDDCTO	AS OrderType,	
		A.SDDOCO	AS OrderNumber,
		A.SDLNID	AS LineNumberID,
		A.SDITM		AS ItemNumber,
		A.SDLITM	AS LongItemNumber,
		A.SDAITM	AS AuxItemNumber,
		A.SDMCU		AS BusinessUnit,
		A.SDAN8		AS BillToNumber,
		A.SDSHAN	AS ShipToID,
		A.SDDRQJ	AS RequestedDate,     
		A.SDLNTY	AS LineType,
		A.SDUORG	AS QuantityOrdered,
		A.SDUPRC	AS UnitPrice,
		A.SDAEXP	AS ExtendedPrice,
		A.SDFUP		AS ForeignUnitPrice,
		A.SDFEA		AS ForeignExtPrice,
		A.SDUOM		AS TransactionUOM,
		A.SDUOM4	AS PricingUOM,
		A.SDPROV	AS OverridePrice,
		A.SDDMCT	AS AgreementNumber,
		A.SDLOB		AS LineofBusiness,
		A.SDEUSE	AS EndUse,
		A.SDDTYS	AS DutyStatus,
		A.SDMOT		AS ModeOfTransport,
		A.SDUPC1	AS PriceCode1,
		A.SDUPC2	AS PriceCode2,
		A.SDUPC3	AS PriceCode3,
		A.SDTAX1	AS TaxableYN,
		ISNULL(B.SD$9TYP,0)			 AS AddressType,	
		A.SDAN8	 AS SCBillToNumber,
		A.SDSHAN	 AS SCShipToNumber,			   		
		ISNULL(B.SDIDLN, 0)			 AS SCBillToContactID,   
		ISNULL(B.SDRCK7, 0)			 AS SCShipToContactID,   	    
		ISNULL(B.SD$9SLN, 0)		 AS ShipLineNumber,
		ISNULL(X.IVCITM,'' '')		 AS ItemCrossRefNumber,
		ISNULL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		ISNULL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		ISNULL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		ISNULL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		ISNULL(Tax.DTUTA,0)   AS UnitTaxAmount,
		ISNULL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		ISNULL(Tax.DTETA,0)   AS ExtendedTaxAmount,
		ISNULL(Tax.DTFETA,0)  AS ForeignExtTaxAmount,
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDCPNT				AS ComponentLineNumber,
		A.SDKTLN				AS KitMasterLineNo,
		ISNULL(Tax.DTTPROV,0)  AS TaxedPriceOverrideCode
	FROM [SCDATA].F42119 A 
	'+ @LineNumberQuery + N'
	LEFT OUTER JOIN [SCDATA].FQ674211 B
 		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
	LEFT OUTER JOIN [SCDATA].F4104	X --Item Cross Ref
		ON	X.IVAN8  = A.SDAN8
		AND X.IVITM  = A.SDITM
		AND X.IVXRT = @CustCrossRefType
		AND @CurrentJulianDate >= X.IVEFTJ AND @CurrentJulianDate <= X.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F42119TX Tax
		ON Tax.DTDOCO = A.SDDOCO
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID
	WHERE A.SDKCOO = @Company
		AND A.SDDOCO = @OrderNumber
		AND A.SDDCTO = @OrderType
		AND A.SDNXTR =  @QuoteStatus'

	-- SHIPTO OVERRIDE
	SELECT @IsOverrideShipTo = COUNT(1)   
	FROM [SCDATA].F4006
	WHERE OADOCO = @OrderNumber			
		AND OADCTO = @OrderType
		AND OAKCOO = @Company
		AND OAANTY = 2 

	-- GET ORDER HEADER INFO
	SELECT
		A.SHAN8	AS SCBillToNumber,
		ISNULL(B.SHIDLN,0) AS ContactID,
		A.SHDRQJ AS RequestedDate,
		ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		A.SHRCD  AS ReasonCode,
		A.SHCRCD AS CurrencyCode,
		A.SHPRGP	AS PricingGroup,
		A.SHASN		AS AdjustmentSchedule,
		A.SHPTC		AS PaymentTerms,
		CASE @IsOverrideShipTo WHEN 1 THEN 'Y' ELSE 'N' END AS IsShipToOverride,
		A.SHVR01 AS CustomerPO
	FROM [SCDATA].F4201 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
		ON	A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO 
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = @OrderNumber
		AND	A.SHDCTO = @OrderType
		AND	A.SHKCOO = @Company
	UNION ALL
	SELECT
		A.SHAN8	AS SCBillToNumber,
		ISNULL(B.SHIDLN,0) AS ContactID,
		A.SHDRQJ AS RequestedDate,
		ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		A.SHRCD  AS ReasonCode,
		A.SHCRCD AS CurrencyCode,
		A.SHPRGP	AS PricingGroup,
		A.SHASN		AS AdjustmentSchedule,
		A.SHPTC		AS PaymentTerms,
		CASE @IsOverrideShipTo WHEN 1 THEN 'Y' ELSE 'N' END AS IsShipToOverride,
		A.SHVR01 AS CustomerPO
	FROM [SCDATA].F42019 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
		ON	A.SHDOCO = B.SHDOCO
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = @OrderNumber
		AND	A.SHDCTO = @OrderType
		AND	A.SHKCOO = @Company	
	
	-- GET ORDER DETAIL INFO
	EXECUTE sp_executesql @SQL_DYNAMIC, N'@LineNumbersXML XML, @CustCrossRefType NVARCHAR(256), @CurrentJulianDate NUMERIC, @Company NVARCHAR(5), @OrderNumber FLOAT,
	@OrderType NVARCHAR(2), @QuoteStatus NVARCHAR (256)', @LineNumbersXML = @LineNumbersXML,
	@CustCrossRefType = @CustCrossRefType, @CurrentJulianDate = @CurrentJulianDate, @Company = @Company, @OrderNumber = @OrderNumber,
	@OrderType = @OrderType, @QuoteStatus = @QuoteStatus

	/*Configured Items*/
	EXEC [DBO].COM_GetSOConfiguredLineList @Company, @OrderType, @OrderNumber, @LangPref
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'IF' AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteDetailStatusFnc'))
	BEGIN
		DROP  FUNCTION  [DBO].QTS_GetQuoteDetailStatusFnc
	END

GO

-- #desc						Calculate Quote Status in Detail Mode using all lines
--								Get a table with Quote Number, Quote Company, Quote Type and Quote Status
-- #bl_class				
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteRecentList

-- #param @QuoteStatus			Quote Acceptance Status

CREATE FUNCTION [DBO].QTS_GetQuoteDetailStatusFnc 
(	
	@QuoteStatus		NVARCHAR(3)
)
RETURNS TABLE 
AS
RETURN 
WITH CTE AS (
		SELECT SDDOCO,SDKCOO,SDDCTO,
			CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
				CASE WHEN SDNXTR =  @QuoteStatus THEN 'READYFORREVIEW' 
					 WHEN SDNXTR <  @QuoteStatus THEN 'PENDING' 
				ELSE 'COMPLETED' END 
			ELSE 'CANCELLED' END AS SDNXTR
		FROM [SCDATA].F4211 	--Sales Order Lines
		WHERE SDRLIT = ''  
		UNION ALL
		SELECT SDDOCO,SDKCOO,SDDCTO,
			CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
				CASE WHEN SDNXTR =  @QuoteStatus THEN 'READYFORREVIEW' 
					 WHEN SDNXTR <  @QuoteStatus THEN 'PENDING' 
				ELSE 'COMPLETED' END 
			ELSE 'CANCELLED' END AS SDNXTR
		FROM [SCDATA].F42119	--Sales Order Lines
		WHERE SDRLIT = ''   
	)
	,CTE2 AS (  
		SELECT 
			SDDOCO,SDKCOO,SDDCTO,SDNXTR,
		ROW_NUMBER() OVER ( PARTITION BY SDDOCO, SDKCOO, SDDCTO ORDER BY SDNXTR  DESC ) STAT  FROM CTE 
	)
	SELECT 
			SDDOCO,SDKCOO,SDDCTO,SDNXTR FROM CTE2
	WHERE STAT= 1


GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteOrderHeadSrchList'))
	BEGIN
		DROP  Procedure  [DBO].QTS_GetQuoteOrderHeadSrchList
	END

GO
-- #desc						N/A
-- #bl_class					Premier.Commerce.Quote.QuoteOrderHeaderSearchList.cs
-- #db_dependencies				QTS_OrderHeadVW, QTS_OrderHeadSrchVW, QTS_GetQtDetStatByShipToFnc,
--								QTS_GetQuoteDetailStatusFnc, QTS_GetQuoteOrderStatusFnc
-- #db_references				N/A

-- #param @InstallationID		Installation Id
-- #param @Company				Company
-- #param @OrderType			Order Type
-- #param @AddressNumber		Address Number
-- #param @QuoteNumber			Order Number
-- #param @ShipToNumber			ShipTo Number
-- #param @OrderDateFrom		Date Range
-- #param @OrderDateTo			Date Range
-- #param @ReferenceNumber		Reference Number
-- #param @Pending				Quotes in status Pending
-- #param @Ready				Quotes in status Ready to Review
-- #param @SortBy				Column to filter by QuoteNumber, CustomerReference, QuoteDate,
--								QuoteDate DESC, QuoteNumber DESC (Default Values) */
-- #param @SortDir				Direction to filter A = Ascendant, D = Descendant, A DEFAULT Value
-- #param @PageIndex			Page Index
-- #param @PageSize				Page Size

/* To retrieve all open orders, should send @Pending and @Ready parameters with value 1
 */
 
CREATE PROCEDURE [DBO].QTS_GetQuoteOrderHeadSrchList
(
	@InstallationID			NVARCHAR(3),
	@Company				NVARCHAR(5),
	@OrderType				NVARCHAR(2),
	@AddressNumber			FLOAT,
	@QuoteNumber			FLOAT,
	@ShipToNumber			FLOAT,
	@OrderDateFrom			NUMERIC,
	@OrderDateTo			NUMERIC,
	@ReferenceNumber		NVARCHAR(25),
	@Pending				NVARCHAR(1), /* Quotes in status Pending */
	@Ready					NVARCHAR(1), /* Quotes in status Ready to Review */
	@SortBy					NVARCHAR(40),
	@SortDir				NVARCHAR(3),
	@PageIndex				FLOAT,
	@PageSize				FLOAT
)
AS		
	/* Dynamic */
	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC NVARCHAR(MAX) = ''				/* Filter Conditions */
	DECLARE @FROM_DYNAMIC NVARCHAR(MAX) = ''				/* View name */
	DECLARE @QUOTESTATUS_WHERE_DYNAMIC NVARCHAR(MAX) = ''	/* Where condition to filter by status when the status filter is pending or ready */
	DECLARE @STATUS NVARCHAR(MAX)=''

	/* Dynamic Sort */
	DECLARE @SORT_DYNAMIC NVARCHAR(50)
	DECLARE @SORTDIR_DYNAMIC NVARCHAR(5)
	DECLARE @INNER_COMPANY NVARCHAR(MAX) = ''
	DECLARE @INNER_DOCUMENT NVARCHAR(MAX) = ''

	DECLARE @QOrderRestric	NVARCHAR(256)
	DECLARE @QOrderINID     NVARCHAR(3)
	DECLARE @QOrderConstant	NVARCHAR(10)
	/* Gets the Quote Order Document Restrictions	*/
    SET @QOrderConstant = 'SQ_RESTRIC'
    SET @QOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @QOrderConstant, @QOrderINID OUT, @QOrderRestric out    
    
    DECLARE @QuoteAcceptanceStatusValue	NVARCHAR(256)
	DECLARE @OrderHistoryINID	    NVARCHAR(3)
	DECLARE @QuoteStatusConstant	NVARCHAR(10)
    /* Gets the Quote Status for Quote Conversion */
    SET @QuoteStatusConstant = 'QUOTSTAT'
    SET @OrderHistoryINID = @InstallationID	
    EXEC [DBO].CMM_GetConstantValue @QuoteStatusConstant, @OrderHistoryINID, @QuoteAcceptanceStatusValue out
    
    DECLARE @QuoteAcceptanceLevel			NVARCHAR(256)
	DECLARE @QuoteTypeINID	    NVARCHAR(3)
	DECLARE @QuoteTypeConstant	NVARCHAR(10)
    /* Gets the Quote Acceptance Level - Header - Detail */
    SET @QuoteTypeConstant = 'QUOTTYPE' 
    SET @QuoteTypeINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @QuoteTypeConstant, @QuoteTypeINID, @QuoteAcceptanceLevel out
    
	/* Read Account Receivable company constant */
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)

	/* Gets Foreign Setting */
	DECLARE @ForeignConstant	NVARCHAR(10)
	EXEC [DBO].CMM_GetConstantValue N'FOREGCURYN', @InstallationID, @ForeignConstant OUT

	/* Dynamic sort direction statement */
	SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

	SET @SORT_DYNAMIC = CASE @SortBy
		WHEN 'QuoteNumber' THEN ' QuoteNumber ' + @SORTDIR_DYNAMIC + ', QuoteDate DESC'
		WHEN 'CustomerReference' THEN ' CustomerReference ' + @SORTDIR_DYNAMIC + ', QuoteDate DESC'
		WHEN 'QuoteDate' THEN ' QuoteDate ' + @SORTDIR_DYNAMIC + ', QuoteNumber DESC'
		ELSE 'QuoteDate DESC, QuoteNumber DESC'
	END
	IF (@AddressNumber IS NOT NULL) BEGIN
		SET @WHERE_DYNAMIC = N' VW.BillToNumber = @AddressNumber '
	END

	IF (@QuoteNumber IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' VW.SHDOCO = @QuoteNumber '
	END

	IF (@ShipToNumber IS NOT NULL) 
	BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' SHAN = @ShipToNumber '
	END

	IF (@OrderDateFrom IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' VW.SHTRDJ >= @OrderDateFrom '
	END

	IF (@OrderDateTo IS NOT NULL) BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' VW.SHTRDJ <= @OrderDateTo '
	END
	
	IF (@ReferenceNumber <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' VW.SHVR01 LIKE ''%'' + @ReferenceNumber + ''%'''
	END
	
	IF (@OrderType <> N'*') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' VW.SHDCTO = @OrderType '
	END

	IF (@Company <> N'*' AND @Company <> N'00000') BEGIN
		IF (@WHERE_DYNAMIC <> N'')
			SET @WHERE_DYNAMIC += N' AND '
		SET @WHERE_DYNAMIC += N' VW.SHKCOO = @Company '
	END
	ELSE
	BEGIN
		SET @ConstantInstallation = @InstallationID
		EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	

		--Company Restric
		IF (@CompanyConstant = 'L')
		  BEGIN
		   SET @INNER_COMPANY = N' INNER JOIN [SCDATA].FQ679912 CR
								 ON CR.CICO = SHCO
								 AND CR.CI$9INID = @ConstantInstallation '
		END			
	END

	/* Filter by open orders */
	IF ((@Ready = '1') AND (@Pending = '1')) BEGIN /* All Open Orders */

		SET @QUOTESTATUS_WHERE_DYNAMIC = ' WHERE QuoteStatus IN (''PENDING'', ''READYFORREVIEW'') '
	END

	ELSE IF (@Ready = '1') BEGIN /* Ready */
		SET @QUOTESTATUS_WHERE_DYNAMIC = ' WHERE QuoteStatus = ''READYFORREVIEW'' '
	END

	ELSE IF (@Pending = '1' ) BEGIN /* Pending */
		SET @QUOTESTATUS_WHERE_DYNAMIC = ' WHERE QuoteStatus = ''PENDING'' '
	END 
	
	ELSE BEGIN
	SET @WHERE_DYNAMIC = @WHERE_DYNAMIC 
	END
		IF  @QuoteAcceptanceLevel = 'DETAIL' BEGIN
			IF @ShipToNumber IS NOT NULL BEGIN
			
				SET @STATUS = N' CROSS APPLY [DBO].QTS_GetQtDetStatByShipToFnc ( @QuoteAcceptanceStatusValue,@ShipToNumber) QTS
								 WHERE QTS.SDDOCO = QuoteNumber
								 AND QTS.SDKCOO=A.OrderCompany
						    	 AND QTS.SDDCTO=A.OrderType '
				END
			ELSE  BEGIN
				SET @STATUS = N' CROSS APPLY [DBO].QTS_GetQuoteDetailStatusFnc ( @QuoteAcceptanceStatusValue) QTS
								 WHERE QTS.SDDOCO = QuoteNumber
								 AND QTS.SDKCOO=A.OrderCompany
						    	 AND QTS.SDDCTO=A.OrderType '
			END
		END
		ELSE BEGIN
				SET @STATUS = N' CROSS APPLY [DBO].QTS_GetQuoteOrderStatusFnc ( A.QuoteNumber, A.OrderType, A.OrderCompany, @QuoteAcceptanceStatusValue) QTS '
			END

	IF (@QOrderRestric = N'1') BEGIN
		SET @INNER_DOCUMENT += N' INNER JOIN [SCDATA].FQ67008 DR
									ON  DR.DR$9INID = @QOrderINID 
									AND DR.DR$9CNST = ''SQ_RESTRIC''
									AND DR.DRKY = SHDCTO '

	END

	IF (@WHERE_DYNAMIC <> N'') BEGIN
		SET @WHERE_DYNAMIC = N' WHERE ' + @WHERE_DYNAMIC 
	END

	IF (@ShipToNumber IS NOT NULL) OR (@Ready = '1') OR (@Pending = '1')

	BEGIN
		  SET @FROM_DYNAMIC = N' FROM [DBO].QTS_OrderHeadSrchVW VW '
	END

	ELSE BEGIN
	
		  SET @FROM_DYNAMIC = N' FROM [DBO].QTS_OrderHeadVW VW '
	
	END

	SET @SQL_DYNAMIC = N'
			SELECT DISTINCT
					SHDOCO		AS QuoteNumber, 
					SHDCTO		AS OrderType,
					SHKCOO		AS OrderCompany, 
					SHVR01		AS CustomerReference, 
					SHTRDJ		AS QuoteDate,
					SHDRQJ		AS RequestedDate, 				
					SHRORN		AS RelatedOrderNumber,
					SHRCTO		AS RelatedOrderType,
					CASE WHEN SHCRRM = ''F'' AND @ForeignConstant = ''N'' THEN ''NOTALLOWED'' 
					ELSE '' '' END AS QuoteStatus,
					SHCRCD		AS CurrencyCode,
					SHCRRM		AS CurrencyMode,
					BillToNumber
					INTO #TMP_TABLE  '
					+ @FROM_DYNAMIC
					+ @INNER_COMPANY
					+ @INNER_DOCUMENT
					+ @WHERE_DYNAMIC + '

			;WITH CTE AS
			(
			SELECT 
					QuoteNumber, 
					OrderType,
					OrderCompany, 
					CustomerReference, 
					QuoteDate,
					RequestedDate, 				
					RelatedOrderNumber,
					RelatedOrderType,
					CASE WHEN A.QuoteStatus = '' '' THEN QTS.SDNXTR ELSE A.QuoteStatus END AS QuoteStatus ,
					CurrencyCode,
					CurrencyMode,
					BillToNumber
					FROM #TMP_TABLE A '
					+ @STATUS
					+ '
			)
			, PAGING AS (
						SELECT 
								QuoteNumber, 
								OrderType,
								OrderCompany, 
								CustomerReference, 
								QuoteDate,
								RequestedDate, 				
								RelatedOrderNumber,
								RelatedOrderType,
								QuoteStatus,
								CurrencyCode,
								CurrencyMode,
								BillToNumber,
								ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM
								FROM CTE T ' 
								+ @QUOTESTATUS_WHERE_DYNAMIC 
								+' 
						)
			SELECT 
				QuoteNumber, 
				OrderType,
				OrderCompany, 
				CustomerReference, 
				QuoteDate,
				RequestedDate, 		
				RelatedOrderNumber,
				RelatedOrderType,
				QuoteStatus,
				CurrencyCode,
				CurrencyMode,
				BillToNumber,
				TotalRowCount = (SELECT COUNT(1) FROM PAGING)
			FROM PAGING 
			WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) '

			EXECUTE sp_executesql @SQL_DYNAMIC, N'@Company NVARCHAR(5), @OrderType NVARCHAR(2), @AddressNumber FLOAT, @QuoteNumber FLOAT, @ShipToNumber FLOAT,
										@OrderDateFrom NUMERIC, @OrderDateTo NUMERIC, @ReferenceNumber NVARCHAR(25), @QOrderINID NVARCHAR(3), @QOrderConstant NVARCHAR(10), 
										@QuoteAcceptanceLevel NVARCHAR(256), @ForeignConstant NVARCHAR(1), @QOrderRestric NVARCHAR(256), @ConstantInstallation NVARCHAR(3), 
										@PageIndex FLOAT, @PageSize FLOAT, @QuoteAcceptanceStatusValue NVARCHAR(256)',
										@Company = @Company, @AddressNumber = @AddressNumber, @OrderType = @OrderType, @QuoteNumber = @QuoteNumber, @ShipToNumber = @ShipToNumber, 
										@OrderDateFrom = @OrderDateFrom, @OrderDateTo = @OrderDateTo, @ReferenceNumber = @ReferenceNumber, @QOrderRestric = @QOrderRestric,
										@QOrderINID = @QOrderINID, @QOrderConstant = @QOrderConstant, @QuoteAcceptanceLevel = @QuoteAcceptanceLevel, 
										@ForeignConstant = @ForeignConstant, @ConstantInstallation = @ConstantInstallation, @PageIndex = @PageIndex, @PageSize = @PageSize,
										@QuoteAcceptanceStatusValue = @QuoteAcceptanceStatusValue

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteOrderInfo_Z'))
	BEGIN
		DROP  Procedure  [DBO].QTS_GetQuoteOrderInfo_Z
	END
GO

-- #desc								Load a order detail
-- #bl_class							Premier.Commerce.Quote.QuoteOrderInfo.cs
-- #db_dependencies						QTS_GetQuoteOrderBillToInfo.sql , QTS_GetQuoteOrderInfoShipments.sql, QTS_GetQuoteOrderStatusFnc.sql
-- #db_references						N/A

-- #param @InstallationID				Installation ID
-- #param @OrderCompany					Company ID
-- #param @OrderType					Document Type
-- #param @QuoteNumber					Quote Number
-- #param @RetrieveWebContentInfo		Retrieve Web Content Info
-- #param @LangPref						Language Preference


CREATE PROCEDURE [DBO].QTS_GetQuoteOrderInfo_Z
	@InstallationID	NVARCHAR(3),
	@OrderCompany	NVARCHAR(5),
	@OrderType		NVARCHAR(2),
	@QuoteNumber	FLOAT,
	@RetrieveWebContentInfo	INT,
	@LangPref		NVARCHAR(2)
AS

	/* STORE PROCEDURE VARIABLES */
	DECLARE @ScBillTo		FLOAT
	DECLARE @ScShipTo		FLOAT
	DECLARE	@ContactID		FLOAT
	DECLARE	@OrderHeaderCompany	NVARCHAR(5)
	DECLARE @CurrencyMode	NVARCHAR(1)

	-- Gets Cust Cross Document Restrictions
	DECLARE @CustCrossRefType	NVARCHAR(256)
	DECLARE @CustCrossINID		NVARCHAR(3)
	set @CustCrossINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossINID, @CustCrossRefType out
    
    DECLARE @CurrentJulianDate INTEGER
    SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
    
    DECLARE @CancelLn			NVARCHAR(256)
	DECLARE @CancelLnINID	    NVARCHAR(3)
	DECLARE @CancelLnConstant	NVARCHAR(10)
     -- Gets the Quote Display Canceled Quote Lines(Y/N)
    SET @CancelLnConstant = 'QUOTCANCYN' 
    SET @CancelLnINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @CancelLnConstant, @CancelLnINID, @CancelLn out
    
    DECLARE @QuoteStatus	NVARCHAR(256)
	DECLARE @QuoteHistoryINID	    NVARCHAR(3)
	DECLARE @QuoteStatusConstant	NVARCHAR(10)
    -- Gets the Quote Status for Quote Convertion 
    SET @QuoteStatusConstant = 'QUOTSTAT'
    SET @QuoteHistoryINID = @InstallationID	
    EXEC [DBO].CMM_GetConstantValue @QuoteStatusConstant, @QuoteHistoryINID, @QuoteStatus out
         
    DECLARE @QuoteAcceptanceLevel			NVARCHAR(256)
	DECLARE @QuoteTypeINID	    NVARCHAR(3)
	DECLARE @QuoteTypeConstant	NVARCHAR(10)

    /* Gets the Quote Acceptance Level - Header - Detail */
    SET @QuoteTypeConstant = 'QUOTTYPE' 
    SET @QuoteTypeINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @QuoteTypeConstant, @QuoteTypeINID, @QuoteAcceptanceLevel out

	/* Gets Foreign Setting */
	DECLARE @ForeignConstant	NVARCHAR(10)
	EXEC [DBO].CMM_GetConstantValue N'FOREGCURYN', @InstallationID, @ForeignConstant OUT

	-- LOAD ORDER DETAIL TEMPORARY TABLE
	SELECT	DISTINCT			
			A.SDKCOO				AS OrderCompany,
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS QuoteNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDSHAN				AS ShipToID,
			A.SDSHAN				AS SCShipToNumber,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,			
			ISNULL(S.IVCITM,'')		AS ItemCrossRefNumber,			
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS QuantityOrdered,			
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			ISNULL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,		
			A.SDNXTR				AS NextStatus, 
			A.SDLTTR				AS LastStatus,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			ISNULL(B.SD$9SLN,0)		AS ShipLineNumber
		INTO 	#TMP_ORDERDETAIL
		FROM	[SCDATA].F4211 A		--Standard Sales OrderDetail
		LEFT OUTER JOIN [SCDATA].FQ674211 B
			ON 	B.SDKCOO = A.SDKCOO
			AND B.SDDOCO = A.SDDOCO
			AND B.SDDCTO = A.SDDCTO
			AND B.SDLNID = A.SDLNID
		LEFT OUTER JOIN [SCDATA].F4104	S --Item Cross Ref
			ON	S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND S.IVXRT = @CustCrossRefType
			AND @CurrentJulianDate >= S.IVEFTJ AND @CurrentJulianDate <= S.IVEXDJ
		INNER JOIN [SCDATA].F40205	T --Line Type
			ON T.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE	A.SDDOCO = @QuoteNumber
		AND		A.SDDCTO = @OrderType
		AND		A.SDKCOO = @OrderCompany
		AND (@CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
	UNION ALL
	SELECT	DISTINCT
			A.SDKCOO				AS OrderCompany, 
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS QuoteNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDSHAN				AS ShipToID,
			A.SDSHAN				AS SCShipToNumber,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			ISNULL(S.IVCITM,' ')	AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS QuantityOrdered,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			ISNULL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,				
			A.SDNXTR				AS NextStatus, 
			A.SDLTTR				AS LastStatus,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			ISNULL(B.SD$9SLN,0)		AS ShipLineNumber
	FROM 	[SCDATA].F42119 A    	
			LEFT OUTER JOIN [SCDATA].FQ674211 B 
				ON 	A.SDDOCO = B.SDDOCO 
				AND A.SDDCTO = B.SDDCTO
				AND A.SDKCOO = B.SDKCOO
				AND A.SDLNID = B.SDLNID
			LEFT OUTER JOIN [SCDATA].F4104	S --Item Cross Ref
				ON  S.IVAN8  = A.SDAN8
				AND S.IVITM  = A.SDITM
				AND S.IVXRT = @CustCrossRefType
				AND @CurrentJulianDate >= S.IVEFTJ AND @CurrentJulianDate <= S.IVEXDJ
				
			LEFT OUTER JOIN [SCDATA].F40205	T --Line Type
				ON T.LFLNTY = A.SDLNTY
			LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
				ON IM.IMITM = A.SDITM
			WHERE	A.SDDOCO = @QuoteNumber
			AND		A.SDDCTO = @OrderType
			AND		A.SDKCOO = @OrderCompany
			AND (@CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
	ORDER BY A.SDLNID ASC

	-- LOAD ORDER HEADER TEMPORARY TABLE
	SELECT	DISTINCT
			A.SHAN8  AS SCBillToNumber,
			A.SHSHAN AS SCShipToNumber,
			ISNULL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS QuoteNumber,
			A.SHTRDJ AS OrderDate,
			A.SHCNDJ AS CancelDate,
			A.SHDRQJ AS RequestedDate,
			ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
			B.SH$9MMID AS MembershipID, 
			B.SH$9PD AS PercentageDiscount,
			B.SH$9DT AS DiscountType,
			A.SHRCD  AS ReasonCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			A.SHCO	 AS	OrderHeaderCompany,			
			ISNULL(B.SHIDLN,0) AS ContactID			
	INTO	#TMP_ORDERHEADER
	FROM	[SCDATA].F4201 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO 
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
			
	WHERE	A.SHDOCO = @QuoteNumber
	AND		A.SHDCTO = @OrderType
	AND		A.SHKCOO = @OrderCompany
	UNION ALL
	SELECT	DISTINCT
			A.SHAN8  AS SCBillToNumber,
			A.SHSHAN AS SCShipToNumber,
			ISNULL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS QuoteNumber,
			A.SHTRDJ AS OrderDate,
			A.SHCNDJ AS CancelDate,
			A.SHDRQJ AS RequestedDate,
			ISNULL(B.SH$9MKT, ' ') AS MarketingCode,
			B.SH$9MMID AS MembershipID, 
			B.SH$9PD AS PercentageDiscount,
			B.SH$9DT AS DiscountType,			
			A.SHRCD  AS ReasonCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			A.SHCO	 AS	OrderHeaderCompany,		
			ISNULL(B.SHIDLN,0) AS ContactID			
			
	FROM 	[SCDATA].F42019 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
			
	WHERE	A.SHDOCO = @QuoteNumber
	AND		A.SHKCOO = @OrderCompany	
	AND		A.SHDCTO = @OrderType
	
	--Load BillTo Variables From Order Header
	SELECT TOP 1 
		@ScBillTo = SCBillToNumber,
		@ScShipTo = SCShipToNumber,
		@OrderHeaderCompany = OrderHeaderCompany,
		@ContactID = ContactID,
		@CurrencyMode = CurrencyMode
	FROM #TMP_ORDERHEADER
	
	
	SELECT 		
		SCBillToNumber,
		SCShipToNumber,
		AddressBookType,
		DeliveryInst1, 
		DeliveryInst2,
		CustomerPO,
		OrderCompany,
		OrderType,
		QuoteNumber,
		OrderDate,
		CancelDate,
		RequestedDate,
		MarketingCode,
		MembershipID, 
		PercentageDiscount,
		DiscountType,
		ReasonCode,
		CurrencyCode,
		CurrencyMode,
		CurrencyDesc,
		OrderHeaderCompany,			
		ContactID,
		ISNULL(ISNULL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices,
		(CASE 
			WHEN (CurrencyMode = 'F' AND @ForeignConstant = 'N') 
				THEN N'NOTALLOWED' 
				ELSE QTS.SDNXTR 
		END) AS QuoteStatus
		
	FROM #TMP_ORDERHEADER
	CROSS APPLY [DBO].QTS_GetQuoteOrderStatusFnc (QuoteNumber,OrderType,OrderCompany,@QuoteStatus) QTS
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = QuoteNumber 
		AND Tax.STDCTO = OrderType
		AND Tax.STKCOO = OrderCompany
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = QuoteNumber 
		AND TxHistory.STDCTO = OrderType
		AND TxHistory.STKCOO = OrderCompany

	EXEC [DBO].QTS_GetQuoteOrderInfo_BillTo @ScBillTo, @ContactID 
	EXEC [DBO].QTS_GetQuoteOrderInfoShipments @OrderHeaderCompany, @OrderType, @QuoteNumber, @ScShipTo

	IF(@RetrieveWebContentInfo = 1)	BEGIN

		SELECT
			A.OrderCompany,
			A.OrderType,
			A.QuoteNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.ShipToID,
			A.SCShipToNumber,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			ISNULL(ContenDesc.DESC1,A.Description1)	AS Description1,
			ISNULL(ContenDesc.DESC2,A.Description2)	AS Description2,
			ContenDesc.URL AS URL,
			A.QuantityOrdered,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.IdentifierShortItem,
			A.OverridePrice,
			A.LongItemNumber,
			A.AuxItemNumber,
			(CASE	
				WHEN @CurrencyMode = 'F' AND @ForeignConstant = 'N'
					THEN 'NOTALLOWED'																
				WHEN (A.NextStatus = '999' AND A.LastStatus >= '980' AND A.LastStatus <> '995')
					THEN 'CANCELLED'
				WHEN (A.NextStatus < @QuoteStatus)
					THEN 'PENDING'
				WHEN (A.NextStatus = @QuoteStatus)
					THEN 'READYFORREVIEW'
				WHEN (A.NextStatus > @QuoteStatus)
					THEN 'COMPLETED'			
			END) AS QuoteStatus,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,
			ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			ISNULL(ISNULL(Tax.DTTFEA,TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			ISNULL(ISNULL(Tax.DTFUTA,TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			A.ShipLineNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			ISNULL(C.RFOGNO, 0 ) AS ParentLineNo
		FROM #TMP_ORDERDETAIL A
		OUTER APPLY [DBO].INV_GetItemContenDescAndURLFnc(@InstallationID,IdentifierShortItem,@LangPref,0) ContenDesc 
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.QuoteNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.QuoteNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON  C.RFDOCO = A.QuoteNumber
				AND C.RFDCTO = A.OrderType
				AND C.RFKCOO = A.OrderCompany
				AND C.RFLNID = A.LineNumber
	END

	ELSE BEGIN

		SELECT
				A.OrderCompany,
				A.OrderType,
				A.QuoteNumber,
				A.LineNumber,
				A.TransactionDate,
				A.RequestedDate,
				A.LineType,
				A.TaxableYN,
				A.TaxArea,
				A.TaxExplanationCode,
				A.ShipToID,
				A.SCShipToNumber,
				A.CostCenter, 
				A.CostCenterHeader,
				A.ItemCrossRefNumber,
				A.Description1	AS Description1,/*Return this description for miscellaneous line and for Tracking lines */
				A.Description2	AS Description2,
				N'' AS URL,
				A.QuantityOrdered,
				A.ShippedQuantity,
				A.UnitOfMeasure,
				A.PricingUnitOfMeasure,
				A.BackorderedQuantity,
				A.CanceledQuantity,
				A.AmountUnitPrice,
				A.ForeignUnitPrice,
				A.AmountExtPrice,
				A.ForeignExtPrice,
				A.InventoryInterface,
				A.IdentifierShortItem,
				A.OverridePrice,
				A.LongItemNumber,
				A.AuxItemNumber,
				(CASE	
					WHEN @CurrencyMode = 'F' AND @ForeignConstant = 'N'
						THEN 'NOTALLOWED'																
					WHEN (A.NextStatus = '999' AND A.LastStatus >= '980' AND A.LastStatus <> '995' )
						THEN 'CANCELLED'
					WHEN (A.NextStatus < @QuoteStatus)
						THEN 'PENDING'
					WHEN (A.NextStatus = @QuoteStatus)
						THEN 'READYFORREVIEW'
					WHEN (A.NextStatus > @QuoteStatus)
						THEN 'COMPLETED'			
				END) AS QuoteStatus,
				A.StockingType,
				A.RelatedKitItemNo,
				A.KitMasterLineNo,
				A.ComponentLineNumber,
				ISNULL(ISNULL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
				ISNULL(ISNULL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
				ISNULL(ISNULL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
				ISNULL(ISNULL(Tax.DTTFEA,TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
				ISNULL(ISNULL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
				ISNULL(ISNULL(Tax.DTFUTA,TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
				ISNULL(ISNULL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
				ISNULL(ISNULL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
				A.ShipLineNumber,
				CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
				ISNULL(C.RFOGNO, 0 ) AS ParentLineNo
			FROM #TMP_ORDERDETAIL A
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.QuoteNumber 
				AND Tax.DTDCTO = A.OrderType
				AND Tax.DTKCOO = A.OrderCompany 
				AND Tax.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.QuoteNumber 
				AND TxHistory.DTDCTO = A.OrderType
				AND TxHistory.DTKCOO = A.OrderCompany 
				AND TxHistory.DTLNID = A.LineNumber 
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON  C.RFDOCO = A.QuoteNumber
				AND C.RFDCTO = A.OrderType
				AND C.RFKCOO = A.OrderCompany
				AND C.RFLNID = A.LineNumber
	END

	DROP TABLE #TMP_ORDERDETAIL
	DROP TABLE #TMP_ORDERHEADER

	/*Configured Items*/
	EXEC [DBO].COM_GetSOConfiguredLineList @OrderCompany, @OrderType, @QuoteNumber, @LangPref
	
RETURN 

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].QTS_GetQuoteRecentList'))
	BEGIN
		DROP  Procedure  [DBO].QTS_GetQuoteRecentList
	END

GO

-- #desc							N/A
-- #bl_class						Premier.Commerce.QuoteRecentList.QuoteRecentInfo.cs
-- #db_dependencies					QTS_OrderDetailVW, RecentFnc, QTS_GetQuoteOrderStatusFnc_DetailShipTo, QTS_GetQuoteOrderStatusFnc_Detail, QTS_GetQuoteOrderStatusFnc_Header
-- #db_references					N/A

-- #param @InstallationID			Installation Id
-- #param @Company					Company if is 00000 is '*'
-- #param @AddressNumber			Address Number
-- #param @QuoteToDisplay			Quantity of rows to be returned

CREATE PROCEDURE [DBO].QTS_GetQuoteRecentList
(
	@InstallationID			NVARCHAR(3),
	@Company				NVARCHAR(5),
	@AddressNumber			FLOAT,
	@QuoteToDisplay			INT
)
AS	
	-- Gets the Quote Order Document Restrictions	
	DECLARE @QOrderRestric	NVARCHAR(256)
	DECLARE @QOrderINID     NVARCHAR(3)
	DECLARE @QOrderConstant	NVARCHAR(10)
    SET @QOrderConstant = 'SQ_RESTRIC'
    SET @QOrderINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue @QOrderConstant, @QOrderINID OUT, @QOrderRestric out    
    
	-- Gets the Quote Status for Quote Convertion 
	DECLARE @QuoteAcceptanceStatusValue	NVARCHAR(256)
    EXEC [DBO].CMM_GetConstantValue 'QUOTSTAT', @InstallationID, @QuoteAcceptanceStatusValue out

	-- Gets the Quote Acceptance Level - Header - Detail
	DECLARE @QuoteAcceptanceLevel	NVARCHAR(256)
	EXEC [DBO].CMM_GetConstantValue 'QUOTTYPE', @InstallationID, @QuoteAcceptanceLevel out

	 --Read Account Receivable company constant 
	DECLARE @CompanyConstant		NVARCHAR(256)
	DECLARE @ConstantInstallation	NVARCHAR(3)
	SET @ConstantInstallation = @InstallationID
	EXEC [DBO].CMM_GetConstantValue 'INSCOMPANY', @ConstantInstallation OUT, @CompanyConstant OUT	

	/* Gets Foreign Setting */
	DECLARE @ForeignConstant	NVARCHAR(10)
	EXEC [DBO].CMM_GetConstantValue N'FOREGCURYN', @InstallationID, @ForeignConstant OUT

	IF (@Company = '00000')
	BEGIN
		SET @Company = '*'
	END

	/*Filter by default shipto */
	IF @QuoteAcceptanceLevel = 'DETAIL' BEGIN 		
			SELECT
				A.SHDOCO QuoteNumber, 
				A.SHDCTO OrderType, 
				A.SHKCOO OrderCompany,		
				A.SHTRDJ QuoteDate,
				CASE WHEN A.SHCRRM = 'F' AND @ForeignConstant = 'N' THEN 'NOTALLOWED' ELSE QTS.SDNXTR  END QuoteStatus
			FROM 
				[DBO].COM_GetRecentDocsFnc (@Company, @QOrderINID, @QOrderConstant, @ConstantInstallation, @CompanyConstant, @QOrderRestric, @AddressNumber) A
				CROSS APPLY [DBO].QTS_GetQuoteDetailStatusFnc (@QuoteAcceptanceStatusValue) QTS
			WHERE
				QTS.SDDOCO = A.SHDOCO 
				AND QTS.SDKCOO=A.SHKCOO
				AND QTS.SDDCTO=A.SHDCTO
				AND RNUM BETWEEN 1 AND @QuoteToDisplay
			ORDER BY RNUM
	END
	ELSE  BEGIN 
		SELECT
			A.SHDOCO QuoteNumber, 
			A.SHDCTO OrderType, 
			A.SHKCOO OrderCompany,	
			A.SHTRDJ QuoteDate,
			CASE WHEN A.SHCRRM = 'F' AND @ForeignConstant = 'N' THEN 'NOTALLOWED' ELSE QTS.SDNXTR END QuoteStatus
		FROM 
			[DBO].COM_GetRecentDocsFnc (@Company, @QOrderINID, @QOrderConstant, @ConstantInstallation, @CompanyConstant, @QOrderRestric, @AddressNumber) A
			CROSS APPLY [DBO].QTS_GetQuoteOrderStatusFnc (A.SHDOCO, A.SHDCTO, A.SHKCOO, @QuoteAcceptanceStatusValue) QTS			
		WHERE 
			RNUM BETWEEN 1 AND @QuoteToDisplay
	END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddDrawer'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddDrawer
	END

GO


-- #desc							Add drawer by register 
-- #bl_class						Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @RegisterID				Register ID.
-- #param @DrawerNumber				Drawer Number.
-- #param @RegisterID				Register ID			
-- #param @DrawerNumber				Drawer Number	
-- #param @Status					Status
-- #param @CurrentBatchNumber		Batch Number	
-- #param @UserReservedReference	User Reserved ref.
-- #param @UserReservedNumber		User Reserved Number
-- #param @UserReservedAmount		User Reserved Amount
-- #param @UserReservedCode			User Reserved Code
-- #param @UserReservedDate			User Reserved date
-- #param @CashDrawerLimit			Cash in drawer limit
-- #param @UserId					User Id
-- #param @ProgramId				Pregram Id
-- #param @dateUpdated				Date updated
-- #param @workStationId			Work Station		
-- #param @TimeLastUpdated			Time Last Update

CREATE Procedure [DBO].POS_AddDrawer
	@RegisterID				NVARCHAR(12),
	@DrawerNumber			FLOAT,
	@Status					NVARCHAR(2),
	@AllowMultipleUsers		NVARCHAR(2),
	@CurrentBatchNumber		NVARCHAR(15),
	@UserReservedReference	NVARCHAR(15) ,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@CashDrawerLimit		FLOAT,
	@ProgramId				NVARCHAR(10),
	@WorkStationId			NVARCHAR(10),
	@UserId					NVARCHAR(10),	
	@DateUpdated			NUMERIC,	
	@TimeLastUpdated		NUMERIC
	

AS

SET NOCOUNT ON


INSERT INTO
	[SCDATA].FQ674261
	(
		DR$9REGID, 
		DR$9DRAW,  
		DR$9DRST,
		DR$9DRMUL,  
		DREDBT ,   
		DRURRF,    
		DRURAB,    
		DRURAT,    
		DRURCD,    
		DRURDT,
		DR$9AATR,   
		DRPID,     
		DRJOBN,    
		DRUSER,    
		DRUPMJ,    
		DRUPMT				
	)
	VALUES
	(
		@RegisterID,
		@DrawerNumber,
		@Status,
		@AllowMultipleUsers,
		@CurrentBatchNumber,
		@UserReservedReference,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@CashDrawerLimit,
		@ProgramID,
		@WorkStationId,
		@UserId,
		@DateUpdated,
		@TimeLastUpdated
		
	)


GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddDrawerPayment'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddDrawerPayment
	END

GO

-- #desc							Insert Drawer Payment
-- #bl_class						Premier.POS.DrawerPayment.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @RegisterID				Register ID.
-- #param @DrawerNumber				Drawer ID
-- #param @CurrentBatchNumber		Current Batch
-- #param @PaymentInstrument		Payment instrument
-- #param @OpeningBalance			Opening Balance
-- #param @SumOfTransactions		Sum of Trans.
-- #param @TotalsPerCashier			Totals per Cashier
-- #param @LeftInDrawer Left		in Drawer
-- #param @CreditCardType			Credit Card Type
-- #param @CurrecyCode				Currecy Code
-- #param @UserId					UserId
-- #param @ProgramId				ProgramId			
-- #param @WorkstationId			WorkstationId		
-- #param @DateUpdated				DateUpdated		
-- #param @TimeOfDay				TimeOfDay			


CREATE Procedure [DBO].POS_AddDrawerPayment
	@RegisterID				NVARCHAR(12), 
	@DrawerNumber			FLOAT, 
	@CurrentBatchNumber		NVARCHAR(15),
	@PaymentInstrument		NVARCHAR(1),
	@OpeningBalance			FLOAT, 
	@SumOfTransactions		FLOAT,
	@TotalsPerCashier		FLOAT, 
	@LeftInDrawer			FLOAT,
	@CreditCardType			NVARCHAR(4),
	@CurrecyCode			NVARCHAR(3),
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserId					NVARCHAR(10),   
	@ProgramId				NVARCHAR(10),
	@WorkstationId			NVARCHAR(10),  
	@DateUpdated			NUMERIC,   
	@TimeOfDay				NUMERIC

AS
	SET NOCOUNT ON

	--Get max sequence number
	DECLARE @LineID FLOAT;
	SET @LineID = (ISNULL((SELECT MAX (DCLNID) FROM [SCDATA].FQ67428 WHERE DC$9REGID = @RegisterID AND DC$9DRAW = @DrawerNumber AND DCEDBT= @CurrentBatchNumber),0) + 1)

	INSERT INTO 
		[SCDATA].FQ67428
	(
	  DC$9REGID,  
	  DC$9DRAW,      
	  DCEDBT,     
	  DCRYIN,
	  DCLNID,
	  DC$9AAOB,                  
	  DC$9AATR,
	  DC$9AACS,                  
	  DC$9AALF,
	  DCCARD,
	  DCCRCD,
	  DCURAB,
	  DCURAT,
	  DCURCD,
	  DCURDT,
	  DCURRF,
	  DCUSER,
      DCPID,
      DCJOBN,
      DCUPMJ,
      DCUPMT
	)
	VALUES
	(
	  @RegisterID, 
	  @DrawerNumber,     
	  @CurrentBatchNumber,    
	  @PaymentInstrument,
	  @LineID,
	  @OpeningBalance,  
	  @SumOfTransactions,
	  @TotalsPerCashier,  
	  @LeftInDrawer,
	  @CreditCardType,
	  @CurrecyCode,
	  @UserReservedNumber,
	  @UserReservedAmount,
	  @UserReservedCode,
	  @UserReservedDate,
	  @UserReservedReference,
	  @UserId,   
	  @ProgramId,
	  @WorkstationId,  
	  @DateUpdated,   
	  @TimeOfDay
	)
	

	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddFastButton'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddFastButton
	END

GO

-- #desc					Cast fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @LineNumber		Line	
-- #param @ItemNumber		Item number
-- #param @UnitOfMeasure    UOM
-- #param @Quantity			Quantity
-- #param @Description1		Description 1
-- #param @Description2		Description 2

CREATE Procedure [DBO].POS_AddFastButton
	@InstallationID NVARCHAR(3),
	@LineNumber	FLOAT,
	@ItemNumber FLOAT,
	@UnitOfMeasure NVARCHAR(2),
	@Quantity	FLOAT,
	@ItemDescription1 NVARCHAR(30),
	@ItemDescription2 NVARCHAR(30)

AS
	SET NOCOUNT ON

	INSERT INTO 
		[SCDATA].FQ67416
		(
		 FB$9INID,  FBLNID, 
		 FBITM,     FBUOM,   FBUORG, 
		 FBDSC1,    FBDSC2
		)
	VALUES
		(
		 @InstallationID, @LineNumber, 
		 @ItemNumber,    @UnitOfMeasure,  @Quantity,   
		 @ItemDescription1,   @ItemDescription2
		)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddFastButtonLang'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddFastButtonLang
	END

GO

-- #desc					Add Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	InstallationID
-- #param @LineNumberID		LineNumberID
-- #param @LangPref			LangPref
-- #param @Description1		Description1 
-- #param @Description2		Description2

CREATE Procedure [DBO].POS_AddFastButtonLang
	@InstallationID	NVARCHAR(6),
	@LineNumber		FLOAT,
	@LangPref		NVARCHAR(4),
	@Description1	NVARCHAR(30),
	@Description2	NVARCHAR(30)
AS

	INSERT INTO [SCDATA].FQ67416L
	(
		FB$9INID,
		FBLNID,
		FBLNGP,		
		FBDSC1,
		FBDSC2
	)
	VALUES
	(
		@InstallationID,
		@LineNumber,		 
		@LangPref, 
		@Description1,
		@Description2
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddReceiptItemMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddReceiptItemMessage
	END

GO


-- #desc				    POS_AddReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.
-- #param @MessageText      Message Text

CREATE PROCEDURE [DBO].POS_AddReceiptItemMessage
    @InstallationID NVARCHAR(3),
    @ItemNumber     FLOAT,
    @MessageID      NVARCHAR(50),
    @QtyMessageItem NVARCHAR(1),
	@ProgramID      NVARCHAR(10),
    @WorkStationID   NVARCHAR(10),
    @User           NVARCHAR(10),
	@DateLastUpdated NUMERIC,
	@TimeLastUpdated NUMERIC
AS
	SET NOCOUNT ON

INSERT INTO [SCDATA].FQ674220
           (MI$9INID
           ,MIITM
           ,MI$9MID
           ,MI$9IMQY
           ,MIPID
           ,MIJOBN
           ,MIUSER
           ,MIUPMJ
           ,MIUPMT)
     VALUES
           ( @InstallationID ,
			 @ItemNumber     ,
			 @MessageID      ,
			 @QtyMessageItem ,
			 @ProgramID      ,
			 @WorkStationID   ,
			 @User           ,
			 @DateLastUpdated,
			 @TimeLastUpdated )
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddReceiptMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddReceiptMessage
	END

GO

-- #desc					Add Receipt Message
-- #bl_class				Premier.POS.ReceiptMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.
-- #param @MessageText      Message Text

CREATE PROCEDURE [DBO].POS_AddReceiptMessage
	@MessageID      NVARCHAR(50),
	@Description1   NVARCHAR(30),
	@Description2   NVARCHAR(30),
    @Type		    NVARCHAR(1),
    @OneTimeOnly    NVARCHAR(1),
    @Priority       FLOAT,
    @EfectiveDate   NUMERIC, 
    @ExpirationDate NUMERIC,
    @MessageText    NTEXT,
    @ProgramID      NVARCHAR(10),
    @WorkStationID   NVARCHAR(10),
    @User           NVARCHAR(10),
	@DateLastUpdated NUMERIC,
	@TimeLastUpdated NUMERIC

AS
	SET NOCOUNT ON

	INSERT INTO [SCDATA].FQ674219
           (RM$9MID
           ,RMDSC1
           ,RMDSC2
           ,RM$9RMT
           ,RM$9RMUF
           ,RM$9RMP
           ,RMEFTJ
           ,RMEXDJ
           ,RM$9XML
           ,RMPID
           ,RMJOBN
           ,RMUSER
           ,RMUPMJ
           ,RMUPMT)
     VALUES
		   (@MessageID ,
			@Description1,
			@Description2,
			@Type,
			@OneTimeOnly,
			@Priority,
			@EfectiveDate, 
			@ExpirationDate,
			@MessageText,
			@ProgramID,
			@WorkStationID,
			@User,
			@DateLastUpdated,
			@TimeLastUpdated)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddRegDrawerBatchNote'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddRegDrawerBatchNote
	END
GO

-- #desc							Add drawer Note
-- #bl_class						Premier.POS.RegisterDrawerBatchNote.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @RegisterID				Register ID
-- #param @DrawerNumber				Drawer Number
-- #param @BatchNumber				Batch Number
-- #param @UserReservedNumber		User Reserved Number
-- #param @UserReservedAmount		User Reserved Amount
-- #param @UserReservedCode			User Reserved Code
-- #param @UserReservedDate			User Reserved date
-- #param @UserReservedReference	User Reserved ref
-- #param @UserId					User Id
-- #param @ProgramId				Pregram Id
-- #param @WorkStationId			Work Station
-- #param @DateUpdated				Date updated
-- #param @TimeLastUpdated			Time Last Update

CREATE Procedure [DBO].POS_AddRegDrawerBatchNote
	@RegisterID				NVARCHAR(12),
	@DrawerNumber			FLOAT,
	@BatchNumber			NVARCHAR(15),
	@SCUserID				FLOAT,
	@NoteType				NVARCHAR(3),
	@Notes				 NVARCHAR(MAX),
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@UserReservedReference	NVARCHAR(15),
	@UserID					NVARCHAR(10),
	@ProgramID				NVARCHAR(10),
	@WorkStationID			NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC
AS
SET NOCOUNT ON

--Get max sequence number
	DECLARE @SequenceNumber FLOAT;
	SET @SequenceNumber = (ISNULL((SELECT MAX (DNRCK7) FROM [SCDATA].FQ674271 WHERE DN$9REGID = @RegisterID AND DN$9DRAW = @DrawerNumber AND DNEDBT= @BatchNumber),0) + 1)

INSERT INTO
	[SCDATA].FQ674271
	(
		DN$9REGID,
		DN$9DRAW,
		DNEDBT,
		DNRCK7,
		DN$9USER,
		DNCLS,
		DN$9HTML,
		DNURRF,
		DNURAB,
		DNURAT,
		DNURCD,
		DNURDT,
		DNUSER,
		DNPID,
		DNJOBN,
		DNUPMJ,	
		DNUPMT		
	)
	VALUES
	(
		@RegisterID,
		@DrawerNumber,
		@BatchNumber,
		@SequenceNumber,
		@SCUserID,
		@NoteType,
		@Notes,
		@UserReservedReference,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserID,
		@ProgramID,
		@WorkStationID,
		@DateUpdated,
		@TimeLastUpdated
	)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddRegister'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddRegister
	END

GO

-- #desc						Insert a Register 
-- #bl_class					Premier.POS.Register.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @RegisterDescription	Descripcion.
-- #param @InstallationID		Installation ID.

CREATE Procedure [DBO].POS_AddRegister
	@RegisterID				NVARCHAR(12),
	@RegisterDescription    NVARCHAR(30),
	@InstallationID			NVARCHAR(3),
	@UserID					NVARCHAR(20),
	@Password				NVARCHAR(200),
	@GroupID					NVARCHAR(20)
AS

	SET NOCOUNT ON

	INSERT INTO 
		[SCDATA].FQ67426
	(
		RG$9REGID,  
		RGDSC1,   
		RG$9INID,
		RGUSER,
		RG$9PWD,
		RGUGRP
	)
	VALUES
	(
		@RegisterID, 
		@RegisterDescription,  
		@InstallationID,
		@UserID,
		@Password,
		@GroupID
	)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_AddRegisterDrawerControl'))
	BEGIN
		DROP  Procedure  [DBO].POS_AddRegisterDrawerControl
	END

GO

-- #desc						Add Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch
-- #param @DateOpened			Date Opened
-- #param @TimeOpened			Time Opened	
-- #param @UserOpened			User Opened
-- #param @DateClosed			Date Closed
-- #param @TimeClosed			Time Closed
-- #param @UserClosed			User Closed

CREATE Procedure [DBO].POS_AddRegisterDrawerControl
	@RegisterID NVARCHAR(12),
	@DrawerNumber FLOAT ,
	@CurrentBatchNumber NVARCHAR(15),
	@DateOpened  NUMERIC,
	@TimeOpened NUMERIC,
	@UserOpened FLOAT,
	@DateClosed  NUMERIC,
	@TimeClosed NUMERIC,
	@UserClosed FLOAT

AS

	SET NOCOUNT ON
	
INSERT INTO
	[SCDATA].FQ67427
	(
	RC$9REGID,
	RC$9DRAW, 
	RCEDBT,	
	RC$9DAO, 
	RC$9TIO, 
	RC$9USERO,
	RC$9DAC, 
	RC$9TIC, 
	RC$9USERC
	)

VALUES

	(
	@RegisterID,
	@DrawerNumber,
	@CurrentBatchNumber,
	@DateOpened,
	@TimeOpened,
	@UserOpened,
	@DateClosed,
	@TimeClosed,
	@UserClosed
	
	)


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelDrawer'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelDrawer
	END

GO

-- #desc					Add drawer by register 
-- #bl_class				Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @RegisterID		Register ID.
-- #param @DrawerNumber		Drawer Number.

CREATE Procedure [DBO].POS_DelDrawer
	@RegisterID				NVARCHAR(12),
	@DrawerNumber			FLOAT	
AS

SET NOCOUNT ON
/*Drawers by Register*/
DELETE FROM
	[SCDATA].FQ674261
WHERE
	(DR$9REGID = @RegisterID) and
	(@DrawerNumber IS NULL OR DR$9DRAW = @DrawerNumber)

/*Register Drawer Control*/
DELETE FROM  
	[SCDATA].FQ67427
WHERE 
	(RC$9REGID = @RegisterID) and
	(@DrawerNumber IS NULL OR RC$9DRAW = @DrawerNumber)

/*Drawer Payment*/		
DELETE FROM  
	[SCDATA].FQ67428
WHERE 
	(DC$9REGID = @RegisterID) and
	(@DrawerNumber IS NULL OR DC$9DRAW = @DrawerNumber)

/*Payment Details*/
DELETE FROM
	[SCDATA].FQ674281
WHERE
	(DP$9REGID = @RegisterID) and
	(@DrawerNumber IS NULL OR DP$9DRAW = @DrawerNumber)

/*Cash In/out*/
DELETE FROM
	[SCDATA].FQ674282
WHERE
	(DR$9REGID = @RegisterID) and
	(@DrawerNumber IS NULL OR DR$9DRAW = @DrawerNumber)

/*Drawers Notes*/
DELETE FROM
	[SCDATA].FQ674271
WHERE
	(DN$9REGID = @RegisterID) and
	(@DrawerNumber IS NULL OR DN$9DRAW = @DrawerNumber)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelDrawerPayment'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelDrawerPayment
	END

GO

-- #desc						Delete drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch
-- #param @PaymentInstrument	Payment Instrument
-- #param @CreditCardType		CreditCardType
-- #param @CurrencyCode			CurrencyCode

CREATE Procedure [DBO].POS_DelDrawerPayment
	@RegisterID			NVARCHAR(12),
	@DrawerNumber		FLOAT,
	@CurrentBatchNumber NVARCHAR(15),
	@PaymentInstrument	NVARCHAR(1) = null,
	@CreditCardType		NVARCHAR(4),
	@CurrencyCode		NVARCHAR(3)

AS
	SET NOCOUNT ON

	DELETE  FROM  
		[SCDATA].FQ67428
	WHERE 
		DC$9REGID = @RegisterID AND 
		DC$9DRAW = @DrawerNumber AND 
		DCEDBT = @CurrentBatchNumber AND 
		(@PaymentInstrument IS NULL OR DCRYIN = @PaymentInstrument) AND
		DCCARD = @CreditCardType AND
		DCCRCD = @CurrencyCode
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelFastButton'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelFastButton
	END

GO

-- #desc					Delete fast button
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @LineNumber		Line	number

CREATE Procedure [DBO].POS_DelFastButton
	@InstallationID NVARCHAR(3),
	@LineNumber	FLOAT
	
AS

DELETE  
FROM  
	[SCDATA].FQ67416
WHERE 
	FB$9INID = @InstallationID AND 
	FBLNID = @LineNumber
	
EXEC [DBO].POS_DelFastButtonLang @InstallationID, @LineNumber, NULL

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelReceiptDetail'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelReceiptDetail
	END

GO

-- #desc					Delete receipts detail 
-- #bl_class				Premier.POS.ReceiptDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ReceiptID		Receipt ID
-- #param @InstallationID	Installation ID
-- #param @RegisterID		Register ID

CREATE Procedure [DBO].POS_DelReceiptDetail
	@ReceiptID NVARCHAR(10),
	@InstallationID NVARCHAR(3),
	@RegisterID NVARCHAR(12)
AS
	SET NOCOUNT ON
	
	DELETE FROM  
		[SCDATA].FQ674213
	WHERE 
		RR$9RCID = @ReceiptID
		AND RR$9INID = @InstallationID
		AND RR$9REGID = @RegisterID


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelReceiptMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelReceiptMessage
	END

GO

-- #desc					Delete Receipt Message
-- #bl_class				Premier.POS.ReceiptMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.
-- #param @MessageText      Message Text

CREATE PROCEDURE [DBO].POS_DelReceiptMessage
	@MessageID      NVARCHAR(50)
AS
	SET NOCOUNT ON

  DELETE FROM [SCDATA].FQ674219
      WHERE (RM$9MID= @MessageID)
      
 EXEC [DBO].POS_DelReceiptItemMessage NULL,NULL,@MessageID

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelRegister'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelRegister
	END

GO

-- #desc				Delete a Register 
-- #bl_class			Premier.POS.Register.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @RegisterID	Register ID.

CREATE Procedure [DBO].POS_DelRegister
	@RegisterID				NVARCHAR(12)
AS

	SET NOCOUNT ON
/*Registers Master*/
DELETE FROM  
		[SCDATA].FQ67426
	WHERE 
		RG$9REGID = @RegisterID

/*Delete All Drawers Associated Information(Drawers by Register, Payment Details, Cash In/out )*/
EXEC [DBO].POS_DelDrawer @RegisterID,NULL
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_DelRegisterDrawerControl'))
	BEGIN
		DROP  Procedure  [DBO].POS_DelRegisterDrawerControl
	END

GO

-- #desc						Delete Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch


CREATE Procedure [DBO].POS_DelRegisterDrawerControl
	@RegisterID NVARCHAR(12) ,
	@DrawerNumber FLOAT ,
	@CurrentBatchNumber NVARCHAR(15)

AS
SET NOCOUNT ON

DELETE FROM 
	[SCDATA].FQ67427
WHERE
	RC$9REGID = @RegisterID AND
	RC$9DRAW = @DrawerNumber AND
	RCEDBT = @CurrentBatchNumber


GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_ExcAddRegisterDrawerInOut'))
	BEGIN
		DROP  Procedure  [DBO].POS_ExcAddRegisterDrawerInOut
	END

GO


-- #desc							Add money in/out transaction
-- #bl_class						Premier.POS.RegisterDrawerInOutCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @RegisterID				Register ID.
-- #param @DrawerNumber				Drawer Number.
-- #param @BatchNumber				Batch Number.
-- #param @SequenceNumber			Sequence Number.
-- #param @LineNumber				Line Number
-- #param @PaymentInstrument		Payment Instrument	
-- #param @CurrencyCode				Currency Code
-- #param @AmountTransact			Amount Transaction
-- #param @UserId					User ID	(How execute the transaction)	
-- #param @UserReservedReference	User Reserved Reference	
-- #param @UserReservedNumber		User Reserved Number	
-- #param @UserReservedAmount		User Reserved Amount	
-- #param @UserReservedCode			User Reserved Code
-- #param @UserReservedDate			User Reserved Date
-- #param @ProgramId				Program Id
-- #param @WorkStationId			Work Station Id	
-- #param @AuditUser				Audit User
-- #param @DateUpdated				Date Updated	
-- #param @TimeLastUpdated			Time Last Updated

CREATE Procedure [DBO].POS_ExcAddRegisterDrawerInOut
	@RegisterID				NVARCHAR(12),
	@DrawerNumber			FLOAT,
	@BatchNumber			NVARCHAR(15),
	@SequenceNumber			FLOAT OUTPUT,
	@LineNumber				FLOAT OUTPUT,
	@PaymentInstrument		NVARCHAR(1),
	@CurrencyCode			NVARCHAR(3),
	@AmountTransact			FLOAT,
	@UserId 				FLOAT,	
	@UserReservedReference	NVARCHAR(15),
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@ProgramId				NVARCHAR(10),
	@WorkStationId			NVARCHAR(10),
	@AuditUser				NVARCHAR(10),	
	@DateUpdated			NUMERIC,	
	@TimeLastUpdated		NUMERIC
AS

BEGIN
	SET @SequenceNumber = (SELECT ISNULL(MAX(DRRCK7) + 1, 1) FROM [SCDATA].FQ674282
		WHERE DR$9REGID = @RegisterID AND DR$9DRAW = @DrawerNumber AND DREDBT = @BatchNumber)
			
	SET @LineNumber = (SELECT ISNULL(MAX(DRLNID) + 1, 1) FROM [SCDATA].FQ674282
			WHERE DR$9REGID = @RegisterID AND DR$9DRAW = @DrawerNumber AND DREDBT = @BatchNumber AND DRRCK7 = @SequenceNumber)
		
	INSERT INTO
		[SCDATA].FQ674282
		(
			DR$9REGID, 
			DR$9DRAW,  
			DREDBT,
			DRRCK7,  
			DRLNID,   
			DRRYIN,    
			DRCRCD,    
			DR$9AATR,    
			DR$9USER,    
			DRTYPT,
			DRURRF,   
			DRURAB,     
			DRURAT,    
			DRURCD,    
			DRURDT,    
			DRPID,
			DRJOBN,
			DRUSER,
			DRUPMJ,
			DRUPMT
		)
		VALUES
		(
			@RegisterID,
			@DrawerNumber,
			@BatchNumber,
			@SequenceNumber,
			@LineNumber,
			@PaymentInstrument,
			@CurrencyCode,
			@AmountTransact,
			@UserId,
			'', /*Type Transaction*/
			@UserReservedReference,
			@UserReservedNumber,
			@UserReservedAmount,
			@UserReservedCode,
			@UserReservedDate,
			@ProgramId,
			@WorkStationId,
			@AuditUser,	
			@DateUpdated,	
			@TimeLastUpdated		
		)
END 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_ExcCheckDrawerStatus'))
	BEGIN
		DROP  Procedure  [DBO].POS_ExcCheckDrawerStatus
	END

GO

-- #desc				Read drawer by register 
-- #bl_class			Premier.POS.Drawer.cs , register.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @RegisterID	Register ID.
-- #param @DrawerNumber Drawer Number.

CREATE Procedure [DBO].POS_ExcCheckDrawerStatus
	@RegisterID NVARCHAR(12) ,
	@DrawerNumber FLOAT ,
	@CurrentBatchNumber NVARCHAR(15)
AS

SET NOCOUNT ON

Select 
	DR$9DRST  Status
FROM
	[SCDATA].FQ674261
WHERE
	DR$9REGID = @RegisterID and
	DR$9DRAW = @DrawerNumber and
	DREDBT = @CurrentBatchNumber
	
	
	RETURN

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_ExcCheckRegDrawerCashLimit'))
	BEGIN
		DROP  Procedure  [DBO].POS_ExcCheckRegDrawerCashLimit
	END

GO

-- #desc						Add money in/out transaction
-- #bl_class					Premier.POS.RegisterDrawerCashLimitCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer Number.
-- #param @BatchNumber			Batch Number.
-- #param @PaymentInstrument	Payment Instrument.
-- #param @TotalPayment			Total Payment.
-- #param @CashDrawerLimit		Cash in drawer limit.
-- #param @AmountExceed			Amount Exceed.

CREATE Procedure [DBO].POS_ExcCheckRegDrawerCashLimit
	@RegisterID				NVARCHAR(12),
	@DrawerNumber			FLOAT,
	@BatchNumber			NVARCHAR(15),
	@PaymentInstrument		NVARCHAR(1),
	@TotalPayment			FLOAT OUTPUT,
	@CashDrawerLimit		FLOAT OUTPUT,
	@AmountExceed			FLOAT OUTPUT
AS
	DECLARE @SumPayments FLOAT
	DECLARE @SumInOutTransaction FLOAT
	
BEGIN
	SELECT @SumPayments = ISNULL(SUM(A.DP$9AATR),0) FROM [SCDATA].FQ674281 A
	WHERE  A.DP$9REGID = @RegisterID AND  A.DP$9DRAW = @DrawerNumber AND  A.DPEDBT = @BatchNumber AND A.DPRYIN = @PaymentInstrument

	SELECT @SumInOutTransaction = ISNULL(SUM(A.DR$9AATR),0) FROM [SCDATA].FQ674282 A
	WHERE  A.DR$9REGID = @RegisterID AND  A.DR$9DRAW = @DrawerNumber AND  A.DREDBT = @BatchNumber AND A.DRRYIN = @PaymentInstrument

	SELECT @CashDrawerLimit = ISNULL(DR$9AATR,0) FROM [SCDATA].FQ674261 A WHERE A.DR$9REGID = @RegisterID AND  A.DR$9DRAW = @DrawerNumber AND  A.DREDBT = @BatchNumber

	SET @TotalPayment = (@SumPayments + @SumInOutTransaction)
	
	IF(@CashDrawerLimit = 0)
		BEGIN
			SET @AmountExceed = 0
		END
	ELSE
		BEGIN
			SET @AmountExceed = ISNULL(@TotalPayment - @CashDrawerLimit, 0)
		END	
END  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_ExcEnterDrawerPayment'))
	BEGIN
		DROP  Procedure  [DBO].POS_ExcEnterDrawerPayment
	END

GO

-- #desc							Creates a extended payment detail
-- #bl_class						Premier.POS.EnterDrawerPaymentCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @RegisterID				Register ID
-- #param @DrawerID					Drawer ID
-- #param @BatchNumber				Batch Number
-- #param @PaymentInstrument		Payment Instrument
-- #param @CreditCardType			Credit Card Type
-- #param @CurrecyCode				Currecy Code
-- #param @RoundingAdjustment		Rounding Adjustment
-- #param @OrderNumber				Order Number
-- #param @OrderType				Order type
-- #param @OrderCompany				Order Company
-- #param @PaymentAmount			Payment Amount
-- #param @ProgramId				Preogram ID
-- #param @WorkStationId			WorkStation ID
-- #param @UserId					User ID
-- #param @DateUpdated				Date updated
-- #param @TimeLastUpdated			Time Updated

CREATE Procedure [DBO].POS_ExcEnterDrawerPayment
	@RegisterID				NVARCHAR(24),
	@DrawerID				FLOAT,
	@BatchNumber			NVARCHAR(30),
	@PaymentInstrument		NVARCHAR(2),
	@CreditCardType			NVARCHAR(4),
	@CurrecyCode			NVARCHAR(3),
	@RoundingAdjustment		FLOAT,
	@OrderNumber			FLOAT,
	@OrderType				NVARCHAR(3),
	@OrderCompany			NVARCHAR(5),
	@PaymentAmount			FLOAT,
	@UserID					FLOAT,
	@UserReservedReference  NVARCHAR(15),
	@UserReservedNumber     FLOAT,
	@UserReservedAmount     FLOAT,
	@UserReservedCode       NVARCHAR(2),
	@UserReservedDate       NUMERIC,
	@JDEUserId				NVARCHAR(10),
	@ProgramId				NVARCHAR(10),
	@WorkStationId			NVARCHAR(10),
	@DateUpdated			NUMERIC,
	@TimeLastUpdated		NUMERIC
	
AS

SET NOCOUNT ON

DECLARE @PaymentID FLOAT


--Get next payment ID
SELECT 
	@PaymentID = ISNULL(MAX(DPRCK7) + 1,0)
FROM 
	[SCDATA].FQ674281 
WHERE 
	DP$9REGID = @RegisterID AND
	DP$9DRAW = @DrawerID AND
	DPEDBT = @BatchNumber
 

INSERT INTO 
	[SCDATA].FQ674281
(
	DP$9REGID,
	DP$9DRAW,
	DPEDBT,
	DPRCK7, 
	DPRYIN,
	DPCARD,
	DPCRCD,
	DPRDAJ,
	DPDOCO,
	DPDCTO,
	DPKCOO,
	DP$9AATR,
	DP$9USER,
	DPURRF,
	DPURAB,
	DPURAT,
	DPURCD,
	DPURDT,
	DPPID,
	DPJOBN,
	DPUSER,
	DPUPMJ,
	DPUPMT
)
VALUES
(
	@RegisterID,
	@DrawerID,
	@BatchNumber,
	@PaymentID,
	@PaymentInstrument,
	@CreditCardType,
	@CurrecyCode,
	@RoundingAdjustment,
	@OrderNumber,
	@OrderType,		
	@OrderCompany,	
	@PaymentAmount,	
	@UserID,
	@UserReservedReference,
	@UserReservedNumber,
	@UserReservedAmount,
	@UserReservedCode,
	@UserReservedDate,
	@ProgramId,
	@WorkStationId,	
	@JDEUserId,			
	@DateUpdated,	
	@TimeLastUpdated
)	


GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_ExcExistRegDrawerTrans'))
	BEGIN
		DROP  Procedure  [DBO].POS_ExcExistRegDrawerTrans
	END

GO

-- #desc				Count Payments for Register ID
-- #bl_class			Premier.POS.CheckRegisterDrawerTransCommand.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @RegisterID	Register ID.
-- #param @DrawerID		Register ID.

CREATE Procedure [DBO].POS_ExcExistRegDrawerTrans
(
	@RegisterID NVARCHAR(12),
	@DrawerID FLOAT
)
AS 
BEGIN
	SET NOCOUNT ON
	DECLARE	@TRANSACTIONS INT;
	SET @TRANSACTIONS = 0 ;
	SET @TRANSACTIONS = ( Select 
								COUNT(*) 
							  FROM 
								[SCDATA].FQ674281 
							  WHERE
								DP$9REGID = @RegisterID AND (@DrawerID IS NULL OR DP$9DRAW = @DrawerID));
	if(@TRANSACTIONS = 0)
	BEGIN
		SET @TRANSACTIONS = ( Select 
							COUNT(*)
						  FROM 
							[SCDATA].FQ674282	
						  WHERE
							DR$9REGID = @RegisterID AND (@DrawerID IS NULL OR DR$9DRAW = @DrawerID));
	END
	select @TRANSACTIONS as CountTransactions
END
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_ExcReceiptCopy'))
	BEGIN
		DROP  Procedure  [DBO].POS_ExcReceiptCopy
	END

GO

-- #desc							Receipt Copy
-- #bl_class						Premier.POS.ReceiptDetail.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @SourceInstallationID		SourceInstallation ID
-- #param @TargetInstallationID		TargetInstallation ID
-- #param @ReceiptID				Receipt ID
-- #param @SourceRegisterID			SourceRegister ID
-- #param @TargetRegisterID			TargetRegister ID

CREATE PROCEDURE [DBO].POS_ExcReceiptCopy
	@SourceInstallationID	NVARCHAR(3),
	@TargetInstallationID	NVARCHAR(3),
	@ReceiptID				NVARCHAR(10),	
	@SourceRegisterID		NVARCHAR(12),
	@TargetRegisterID		NVARCHAR(12)
AS
	SET NOCOUNT ON

BEGIN
	/*check if template already exist*/
	IF((SELECT COUNT(*) FROM [SCDATA].FQ674213 
		WHERE  RR$9INID = @TargetInstallationID AND 
			   RR$9RCID = @ReceiptID AND 
			   RR$9REGID = @TargetRegisterID) = 0)
	
		INSERT INTO [SCDATA].FQ674213 (RR$9RCID,RR$9INID,RR$9REGID,RR$9XML,RRPID,RRJOBN,RRUSER,RRUPMJ,RRUPMT)
		SELECT 
			 RR$9RCID,
			 @TargetInstallationID,
			 @TargetRegisterID,
			 RR$9XML,
			 RRPID,
			 RRJOBN,
			 RRUSER,
			 RRUPMJ,
			 RRUPMT
		FROM [SCDATA].FQ674213
		WHERE  RR$9INID = @SourceInstallationID AND
				RR$9RCID = @ReceiptID AND
				RR$9REGID = @SourceRegisterID
	ELSE
		UPDATE [SCDATA].FQ674213
			SET	RR$9XML = (SELECT B.RR$9XML
		FROM [SCDATA].FQ674213 B
			WHERE  B.RR$9INID = @SourceInstallationID 
			AND B.RR$9RCID = @ReceiptID
			AND B.RR$9REGID = @SourceRegisterID)
		WHERE  
				RR$9INID = @TargetInstallationID
			AND RR$9RCID = @ReceiptID
			AND RR$9REGID = @TargetRegisterID
END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawerAccountingBatchNo'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetDrawerAccountingBatchNo
	END

GO

-- #desc				Get Drawer Accounting Batch No
-- #bl_class			Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @RegisterID	Register ID.
-- #param @DrawerNumber Drawer Number.

CREATE Procedure [DBO].POS_GetDrawerAccountingBatchNo
	@RegisterID NVARCHAR(12),
	@DrawerNumber FLOAT
AS

SET NOCOUNT ON

Select 
	DRURAT AccountingBatchNumber
FROM
	[SCDATA].FQ674261
WHERE
	(@RegisterID IS NULL OR DR$9REGID = @RegisterID) AND
	(@DrawerNumber IS NULL OR DR$9DRAW = @DrawerNumber)

 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawerInfo'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetDrawerInfo
	END

GO

-- #desc				Read drawer info
-- #bl_class			Premier.POS.DrawerInfo.cs 
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param RegisterID	Register ID.
-- #param DrawerNumber  Drawer Number.
 
CREATE Procedure [DBO].POS_GetDrawerInfo 
	@RegisterID NVARCHAR(12),
	@DrawerNumber FLOAT
AS
	SET NOCOUNT ON

	SELECT 
		A.DR$9REGID AS RegisterID, 
	    A.DR$9DRAW AS DrawerNumber, 
	    A.DR$9DRST AS Status, 
	    A.DR$9DRMUL AS AllowMultipleUsers, 
	    A.DREDBT AS CurrentBatchNumber, 
	    B.RC$9DAO AS DateOpened, 
	    B.RC$9TIO AS TimeOpened, 
	    B.RC$9USERO AS UserOpened, 
	    B.RC$9DAC AS DateClosed, 
	    B.RC$9TIC AS TimeClosed, 
	    B.RC$9USERC AS UserClosed,
		A.DRURAT AS AccountingBatchNumber
	FROM 
		[SCDATA].FQ674261 A
		LEFT OUTER JOIN [SCDATA].FQ67427 B 
		ON B.RC$9REGID = A.DR$9REGID 
	        AND B.RC$9DRAW = A.DR$9DRAW  
	        AND B.RCEDBT = A.DREDBT    

	WHERE A.DR$9DRAW = @DrawerNumber 
			AND A.DR$9REGID = @RegisterID ORDER BY A.DR$9DRAW;
					
GO	   				 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawerInvoicePaidTotals'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetDrawerInvoicePaidTotals
	END

GO

-- #desc							Read sum (RUAG ) 
-- #bl_class						Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @AccountingBatchNumber	Accounting Batch Number.
-- #param @EdiBatchNumber			Edi Batch Number.

CREATE Procedure [DBO].POS_GetDrawerInvoicePaidTotals
	@AccountingBatchNumber	FLOAT,
	@EdiBatchNumber			NVARCHAR(30)
AS
SET NOCOUNT ON

	SELECT SUM(RUAG) AS InvoiceTotalAmountPaid,
		   COUNT(*) AS TotalDoc  
	FROM [SCDATA].F03B13Z1
	WHERE
		RUICU = @AccountingBatchNumber AND
		RUEDBT = @EdiBatchNumber

	  
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawerList'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetDrawerList
	END

GO

-- #desc				Read drawer info
-- #bl_class			Premier.POS.DrawerList.cs 
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @RegisterID	Register ID.

CREATE Procedure [DBO].POS_GetDrawerList
	@RegisterID NVARCHAR(12) = null
AS

SET NOCOUNT ON

SELECT     
	A.DR$9REGID AS RegisterID, 
	A.DR$9DRAW AS DrawerNumber, 
	A.DR$9DRST AS Status, 
	A.DR$9DRMUL AS AllowMultipleUsers, 
	A.DREDBT AS CurrentBatchNumber, 
	B.RC$9DAO AS DateOpened, 
	B.RC$9TIO AS TimeOpened, 
	B.RC$9USERO AS UserOpened, 
	B.RC$9DAC AS DateClosed, 
	B.RC$9TIC AS TimeClosed, 
	B.RC$9USERC AS UserClosed,
	A.DRURAT AS AccountingBatchNumber
FROM         
	[SCDATA].FQ674261 A
	LEFT OUTER JOIN [SCDATA].FQ67427 B
	ON A.DR$9REGID = B.RC$9REGID 
	AND A.DR$9DRAW = B.RC$9DRAW 
	AND A.DREDBT = B.RCEDBT
WHERE
	(@RegisterID IS NULL OR A.DR$9REGID = @RegisterID)
ORDER BY A.DR$9DRAW
	

GO
  
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawerPayDetCurrencyLst'))
BEGIN
	DROP  Procedure  [DBO].POS_GetDrawerPayDetCurrencyLst
END

GO

-- #desc						Read Currency codes of Detail of Drawer Payment, read only info
-- #bl_class					Premier.POS.DrawerPaymentsCurrencyList
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterId			Register Id
-- #param @DrawerNumber			Drawer Number.
-- #param @BatchNumber			Batch Number
-- #param @PaymentInstrument	Payment Instrument

CREATE Procedure [DBO].POS_GetDrawerPayDetCurrencyLst
(
	@RegisterId			NVARCHAR(12),
	@DrawerNumber		FLOAT,
	@BatchNumber		NVARCHAR(15),
	@PaymentInstrument	NVARCHAR(1)	
)
AS
	SELECT Distinct
		A.DPCRCD	AS CurrencyCode,
		B.CVDL01    AS CurrencyDesc
	FROM
		[SCDATA].FQ674281 A 				-- Drawer Payment Detail List
		LEFT OUTER JOIN [SCDATA].F0013 B
		ON B.CVCRCD = A.DPCRCD
	WHERE 	(A.DP$9REGID = @RegisterId)
		AND	(A.DP$9DRAW	 = @DrawerNumber)
		AND (A.DPEDBT	 = @BatchNumber)
		AND (A.DPRYIN	 = @PaymentInstrument)
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetDrawerPaymentDetailList'))
BEGIN
	DROP  Procedure  [DBO].POS_GetDrawerPaymentDetailList
END

GO

-- #desc						Read Detail of Drawer Payment, read only info
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterId			RegisterId
-- #param @DrawerNumber			DrawerNumber.
-- #param @BatchNumber			batchNumber
-- #param @PaymentInstrument	PaymentInstrument
-- #param @OrderType			OrderType
-- #param @OrderNumber			OrderNumber
-- #param @JulianDateFrom		JulianDateFrom
-- #param @JulianDateTo			JulianDateTo
-- #param @JulianTimeFrom		JulianTimeFrom
-- #param @JulianTimeTo			JulianTimeTo
-- #param @PageIndex			Paging - Current page
-- #param @PageSize				Paging - Items to be shown

CREATE Procedure [DBO].POS_GetDrawerPaymentDetailList
(
	@RegisterId			NVARCHAR(12),
	@DrawerNumber		FLOAT,
	@BatchNumber		NVARCHAR(15),
	@PaymentInstrument	NVARCHAR(1),
	@OrderType			NVARCHAR(2),
	@OrderNumber		FLOAT,
	@UserID				FLOAT,
	@JulianDateFrom		NUMERIC(18, 0),
	@JulianDateTo		NUMERIC(18, 0),
	@JulianTimeFrom		FLOAT,
	@JulianTimeTo		FLOAT,
	@PageIndex			INT,
    @PageSize			INT
)
AS

	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	
	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	;WITH CTE AS (
		SELECT
			DP$9REGID	AS RegisterID,
			DP$9DRAW	AS DrawerNumber,
			DPEDBT		AS BatchNumber,
			DPRCK7		AS SecuenceNumber, 
			DPRYIN		AS PaymentInstrument, 
			DPKCOO		AS OrderCompany,
			DPDCTO		AS OrderType,
			DPDOCO		AS OrderNumber,
			DPCRCD		AS Currency,
			DP$9AATR    AS TransactionAmount, 
			DP$9USER	AS UserID,
			DPUPMJ		AS DateUpdated,
			DPUPMT		AS TimeUpdated,
			ROW_NUMBER() OVER (ORDER BY A.DPUPMJ DESC, A.DPUPMT DESC) AS RNUM
		FROM
			[SCDATA].FQ674281 A 				-- Drawer Payment Detail List
		WHERE 
				(A.DP$9REGID= @RegisterId)
			AND	(A.DP$9DRAW	= @DrawerNumber)
			AND (A.DPEDBT	= @BatchNumber)
			AND (@PaymentInstrument = '*' OR A.DPRYIN = @PaymentInstrument)
			AND (@OrderNumber IS NULL OR A.DPDOCO = @OrderNumber)
			AND (@OrderType = '*' OR A.DPDCTO = @OrderType)
			AND (@JulianDateFrom = 0 OR @JulianDateTo = 0 OR (A.DPUPMJ >= @JulianDateFrom AND A.DPUPMJ <= @JulianDateTo))
			AND (@JulianTimeFrom = 0 OR @JulianTimeTo = 0 OR (A.DPUPMT >= @JulianTimeFrom AND A.DPUPMT <= @JulianTimeTo))
			AND (@UserID IS NULL OR DP$9USER = @UserID)
	)
	SELECT
		A.RegisterID,
		A.DrawerNumber,
		A.BatchNumber,
		A.SecuenceNumber, 
		A.PaymentInstrument, 
		[DBO].CMM_GetUserDefinedCodeFnc('00', 'PY', A.PaymentInstrument, '*') AS PaymentInstrumentDesc,
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.Currency,
		A.TransactionAmount, 
		A.UserID,
		A.DateUpdated,
		A.TimeUpdated,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A 
	WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

			
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetFastButton'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetFastButton
	END

GO

-- #desc					Get fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @LineNumber		Line	number

CREATE Procedure [DBO].POS_GetFastButton
	@InstallationID NVARCHAR(3),
	@LineNumber	FLOAT

AS

	SET NOCOUNT ON
	
	SELECT 
		FBHED.FB$9INID InstallationID,   
		FBHED.FBLNID LineNumber,   
		FBHED.FBITM ItemNumber,   
		FBHED.FBUOM UnitOfMeasure,   
		FBHED.FBUORG Quantity,  
		FBHED.FBDSC1 AS ItemDescription1,  
		FBHED.FBDSC2 AS ItemDescription2  

	 FROM 
		[SCDATA].FQ67416 FBHED  	  
	 WHERE   
	   
		FBHED.FB$9INID = @InstallationID  AND 
		FBHED.FBLNID = @LineNumber  
		
	EXEC [DBO].POS_GetFastButtonLangs @InstallationID, @LineNumber, null

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetFastButtonList'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetFastButtonList
	END

GO

-- #desc				Read fast buttons list 
-- #bl_class			Premier.POS.FastButtonList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @UserID		User ID number.

CREATE Procedure [DBO].POS_GetFastButtonList
(
	@InstallationID NVARCHAR(3) = null,
	@ItemNumber	FLOAT = null,
	@Description1 NVARCHAR(30) = null,
	@LangPref NVARCHAR(2) = null
)
AS


;WITH CTE_FastButton AS
(
	SELECT
		FBHED.FB$9INID InstallationID,   
		FBHED.FBLNID LineNumber,   
		FBHED.FBITM ItemNumber,   
		FBHED.FBUOM UnitOfMeasure,   
		FBHED.FBUORG Quantity,  
		ISNULL(FBHEDLNG.FBDSC1, FBHED.FBDSC1) AS ItemDescription1,  
		ISNULL(FBHEDLNG.FBDSC2, FBHED.FBDSC2) AS ItemDescription2,
		IM.IMLITM AS LongItemNumber,
		IM.IMAITM AS AuxItemNumber,
		IM.IMSTKT StockingType,
		IM.IMLNTY LineTypeControl
	 FROM [SCDATA].FQ67416 FBHED  -- Item Fast Master  
		LEFT JOIN [SCDATA].FQ67416L FBHEDLNG  -- Item Fast Language Master  
			ON FBHEDLNG.FB$9INID = FBHED.FB$9INID  
			AND FBHEDLNG.FBLNID = FBHED.FBLNID  
			AND FBHEDLNG.FBLNGP = @LangPref
		INNER JOIN [SCDATA].F4101 IM	-- Item Master
			ON IM.IMITM = FBHED.FBITM 
	 WHERE   
		-- Installation Id filter  
		(@InstallationID = '*' OR FBHED.FB$9INID = @InstallationID)    
		-- Item Number filter  
		AND (@ItemNumber IS NULL OR FBHED.FBITM = @ItemNumber)  
		-- Description filter  
		AND (@Description1 = '*' OR 
			(FBHEDLNG.FBDSC1 IS NULL AND FBHED.FBDSC1 LIKE '%' + LTRIM(RTRIM(@Description1)) + '%') OR
			(FBHEDLNG.FBDSC1 IS NOT NULL AND FBHEDLNG.FBDSC1 LIKE '%' + LTRIM(RTRIM(@Description1)) + '%'))	
),
CTE_Filter_MCU AS
(
	SELECT DISTINCT
		A.InstallationID,   
		A.LineNumber,   
		A.ItemNumber,   
		A.UnitOfMeasure,   
		A.Quantity,  
		A.ItemDescription1,  
		A.ItemDescription2,
		A.LongItemNumber,
		A.AuxItemNumber
	FROM CTE_FastButton A
	INNER JOIN [SCDATA].F40205 C /*Line Type Control Table*/
		ON C.LFLNTY = A.LineTypeControl
	INNER JOIN [SCDATA].FQ679910 E	/*BranchPlant by Installation*/
		ON E.BI$9INID = @InstallationID 		
	INNER JOIN [SCDATA].F4102 B		/*Item Master by BranchPlant*/
		ON B.IBITM = ItemNumber
		AND B.IBMCU = E.BIMCU
	WHERE 
		A.StockingType <> 'N' AND (C.LFIVI = 'Y' OR C.LFIVI = 'D')		/*Inventory Interface -- Stock Items*/
	UNION ALL
	SELECT  
		A.InstallationID,   
		A.LineNumber,   
		A.ItemNumber,   
		A.UnitOfMeasure,   
		A.Quantity,  
		A.ItemDescription1,  
		A.ItemDescription2,
		A.LongItemNumber,
		A.AuxItemNumber
	FROM
		CTE_FastButton A
	INNER JOIN [SCDATA].F40205 C /*Line Type Control Table*/
		ON C.LFLNTY = A.LineTypeControl
	WHERE
		A.StockingType = 'N' OR (C.LFIVI <> 'Y' AND C.LFIVI <> 'D') /*Inventory Interface-- Non stock*/
)

SELECT 
	A.InstallationID,   
	A.LineNumber,   
	A.ItemNumber,   
	A.UnitOfMeasure,   
	A.Quantity,  
	A.ItemDescription1,  
	A.ItemDescription2,
	A.LongItemNumber,
	A.AuxItemNumber,
	'Y' IsValidBrancPlant
FROM CTE_Filter_MCU A
UNION
SELECT  
	A.InstallationID,   
	A.LineNumber,   
	A.ItemNumber,   
	A.UnitOfMeasure,   
	A.Quantity,  
	A.ItemDescription1,  
	A.ItemDescription2,
	A.LongItemNumber,
	A.AuxItemNumber,
	'N' IsValidBrancPlant
FROM  CTE_FastButton A
LEFT JOIN CTE_Filter_MCU B 
	ON (A.ItemNumber = B.ItemNumber)
WHERE 
	B.ItemNumber IS NULL
ORDER BY LineNumber ASC



GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetInstallationLicenseAuth'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetInstallationLicenseAuth
	END

GO

-- #desc						Get Installation License Information
-- #bl_class					Premier.POS.License.StoreLicenseAuthentication.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID

CREATE Procedure [DBO].POS_GetInstallationLicenseAuth

@InstallationID NVARCHAR(3)

AS

	SET NOCOUNT ON
	
		SELECT 
			IN$9HTML XMLFile
		FROM [SCDATA].FQ670001
		WHERE @InstallationID = IN$9INID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetReceipt'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetReceipt
	END

GO

-- #desc						Get receipt INFO
-- #bl_class					Premier.POS.ReceiptHeader.cs
-- #db_dependencies				POS_GetReceiptDetail
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @ReceiptID			Receipt ID
-- #param @RegisterID			Register ID

CREATE Procedure [DBO].POS_GetReceipt
	@InstallationID NVARCHAR(3),
	@RegisterID NVARCHAR(12),
	@ReceiptID NVARCHAR(10) 
AS

	SET NOCOUNT ON
	
	SELECT 
		A.RP$9RCID ReceiptID, 
		A.RPDSC1 Description, 
        A.RPPID ProgramId,    
        A.RPJOBN WorkStationId, 
        A.RPUSER UserId, 
        A.RPUPMJ DateLastUpdated,   
        A.RPUPMT TimeLastUpdated
    FROM 
		[SCDATA].FQ674212 A
	WHERE 
		(@ReceiptID IS NULL OR A.RP$9RCID = @ReceiptID)
		
	---Get Receipt detail
	EXEC [DBO].POS_GetReceiptDetail @InstallationID, @RegisterID, @ReceiptID

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetReceiptItemMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetReceiptItemMessage
	END

GO

-- #desc				    POS_GetReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessages.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @ItemNumber		Item Number.
-- #param @QtyMessageItem   Qty Message Item

CREATE PROCEDURE [DBO].POS_GetReceiptItemMessage
    @InstallationID NVARCHAR(3),
    @ItemNumber     FLOAT,
    @MessageID      NVARCHAR(50)
AS
	SET NOCOUNT ON

 SELECT
       MI$9INID InstallationID 
      ,MIITM    ItemNumber 
      ,MI$9MID  MessageID
      ,MI$9IMQY QtyMessageItem
      ,MIPID    ProgramID
      ,MIJOBN	  WorkStatioID
      ,MIUSER   UserID
      ,MIUPMJ   DateLastUpdated
      ,MIUPMT   TimeLastUpdated
 FROM  [SCDATA].FQ674220
 WHERE (@InstallationID = '*' OR MI$9INID = @InstallationID) AND
       (@ItemNumber= 0 OR MIITM    = @ItemNumber) AND
       (@MessageID = '*' OR MI$9MID  = @MessageID)




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetReceiptList'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetReceiptList
	END

GO

-- #desc					Get receipts list 
-- #bl_class				Premier.POS.ReceiptList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID
-- #param @ReceiptID		Receipt ID
-- #param @RegisterID		Register ID
-- #param @Description		Description

CREATE Procedure [DBO].POS_GetReceiptList
	@InstallationID NVARCHAR(3),
	@RegisterID NVARCHAR(12),
	@ReceiptID NVARCHAR(10),
	@Description NVARCHAR(30)
AS
	SET NOCOUNT ON

	SELECT 
		A.RR$9RCID ReceiptID,
		B.RPDSC1 Description,
	    A.RR$9INID InstallationID,
	    A.RR$9REGID RegisterID
	FROM 
		[SCDATA].FQ674213 A
		-- Receipts Header
		INNER JOIN [SCDATA].FQ674212 B
		ON B.RP$9RCID = A.RR$9RCID
		    
	WHERE 
		(@InstallationID = '*' OR A.RR$9INID = @InstallationID) AND 
		(@RegisterID = '*'  OR A.RR$9REGID = @RegisterID) AND
		-- Receipt Code filter   
		(@ReceiptID = '*' OR A.RR$9RCID LIKE ('%' + ltrim(rtrim(@ReceiptID)) + '%')) AND 
		(@Description = '*' OR B.RPDSC1 LIKE ('%' + ltrim(rtrim(@Description)) + '%')) 
		
GO
	   
			
		 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetReceiptMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetReceiptMessage
	END

GO

-- #desc				    Update Receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies		    POS_GetReceiptDetail
-- #db_references		    N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.

CREATE PROCEDURE [DBO].POS_GetReceiptMessage
	@MessageID      NVARCHAR(50)
AS
	SET NOCOUNT ON

   SELECT
       RM$9MID as MessageID 
      ,RMDSC1 as Description1
      ,RMDSC2 as Description2
      ,RM$9RMT as Type
      ,RM$9RMUF as OneTimeOnly
      ,RM$9RMP as Priority
      ,RMEFTJ as EfectiveDate
      ,RMEXDJ as ExpirationDate
      ,RM$9XML as MessageText
      ,RMPID  as ProgramID
      ,RMJOBN  as WorkStatioID
      ,RMUSER  as UserID
      ,RMUPMJ  as DateLastUpdated
      ,RMUPMT  as TimeLastUpdated
 FROM  [SCDATA].FQ674219
 WHERE  RM$9MID = @MessageID

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetReceiptMessageList'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetReceiptMessageList
	END

GO

-- #desc				    Get Message Receipt List
-- #bl_class			    Premier.POS.ReceiptMessageList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.

CREATE PROCEDURE [DBO].POS_GetReceiptMessageList
	@MessageID      NVARCHAR(50),
	@Description1   NVARCHAR(30),
	@Description2   NVARCHAR(30),
    @Type		    NVARCHAR(1),
    @OneTimeOnly    NVARCHAR(1),
    @Priority       FLOAT,
    @EffectiveDate   NUMERIC

AS
	SET NOCOUNT ON

   SELECT
       RM$9MID AS MessageID 
      ,RMDSC1  AS Description1
      ,RMDSC2  AS Description2
      ,RM$9RMT AS Type
      ,RM$9RMUF AS OneTimeOnly
      ,RM$9RMP AS Priority
      ,RMEFTJ  AS EfectiveDate
      ,RMEXDJ AS ExpirationDate
      ,RM$9XML AS MessageText
      ,RMPID AS ProgramID
      ,RMJOBN AS WorkStatioID
      ,RMUSER AS UserID
      ,RMUPMJ AS DateLastUpdated
      ,RMUPMT AS TimeLastUpdated
 FROM   [SCDATA].FQ674219
 WHERE  (@MessageID = '*' OR RTRIM(LTRIM(RM$9MID)) LIKE RTRIM(LTRIM('%'+@MessageID+'%'))) AND
	    (@Description1 = '*' OR RTRIM(LTRIM(RMDSC1)) LIKE (RTRIM(LTRIM('%'+@Description1+'%')))) AND
    	(@Description2 = '*' OR RTRIM(LTRIM(RMDSC2)) LIKE (RTRIM(LTRIM('%'+@Description2+'%'))))  AND
		(@Type = '*' OR RM$9RMT= @Type)AND
		(@OneTimeOnly = '*' OR RM$9RMUF= @OneTimeOnly)AND
		(@Priority = 0 OR RM$9RMP= @Priority)AND
		(@EffectiveDate = 0 OR (RMEFTJ <= @EffectiveDate AND @EffectiveDate <= RMEXDJ))
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetRegDrawerBatchList'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetRegDrawerBatchList
	END

GO

-- #desc						Get Register Drawer Batch List
-- #bl_class					Premier.POS.RegisterDrawerBatchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID
-- #param @DrawerNumber			Drawer ID

CREATE Procedure [DBO].POS_GetRegDrawerBatchList
	@RegisterID			NVARCHAR(12),
	@DrawerNumber		FLOAT

AS
	SET NOCOUNT ON

DECLARE @currentDate decimal = [DBO].CMM_GetCurrentJulianDate (GETDATE());
DECLARE @currentTime decimal = replace(Convert (varchar(8),GetDate(), 108),':','');

SELECT BatchNumber, DateOpened, TimeOpened, UserOpened, DateClosed, TimeClosed, UserClosed 
FROM 
(SELECT DISTINCT
	A.RCEDBT		AS BatchNumber,
	A.RC$9DAO		AS DateOpened,   
	A.RC$9TIO		AS TimeOpened,   
	A.RC$9USERO		AS UserOpened,    
	A.RC$9DAC		AS DateClosed, 
	A.RC$9TIC		AS TimeClosed,      
	A.RC$9USERC		AS UserClosed,
	(CASE A.RC$9DAC WHEN 0 THEN @currentDate ELSE A.RC$9DAC END) AS RegDrawerDate,
	(CASE A.RC$9TIC WHEN 0 THEN @currentTime ELSE A.RC$9TIC END) AS RegDrawerTime
FROM
	[SCDATA].FQ67427 A
WHERE
	A.RC$9REGID = @RegisterID AND
	A.RC$9DRAW = @DrawerNumber) B
ORDER BY B.RegDrawerDate DESC, B.RegDrawerTime DESC


GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetRegDrawerBatchNoteLst'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetRegDrawerBatchNoteLst
	END

GO

-- #desc					Get Drawer Note List
-- #bl_class				Premier.POS.RegisterDrawerBatchNoteList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @RegisterID		Register ID
-- #param @DrawerNumber		DrawerNumber
-- #param @BatchNumber		BatchNumber
-- #param @SCUserID			SCUserID
-- #param @NoteType			NoteType
-- #param @JulianDateFrom	JulianDateFrom
-- #param @JulianDateTo		JulianDateTo
-- #param @JulianTimeFrom	JulianTimeFrom
-- #param @JulianTimeTo		JulianTimeTo

CREATE Procedure [DBO].POS_GetRegDrawerBatchNoteLst
	@RegisterID				NVARCHAR(12),
	@DrawerNumber			FLOAT,
	@BatchNumber			NVARCHAR(15),
	@SCUserID				FLOAT,
	@NoteType				NVARCHAR(4),
	@JulianDateFrom			NUMERIC(18,0),
	@JulianDateTo			NUMERIC(18,0),
	@JulianTimeFrom			FLOAT,
	@JulianTimeTo			FLOAT,
	@PageIndex				INT,
    @PageSize				INT
AS

	DECLARE @RowStart INT;
	DECLARE @RowEnd INT;
	
	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);

	;WITH CTE AS (
		SELECT     
			A.DN$9REGID		AS RegisterID, 
			A.DN$9DRAW		AS DrawerNumber, 
			A.DNEDBT		AS BatchNumber, 
			A.DNRCK7		AS SequenceNumber,
			A.DN$9USER		AS SCUserID,
			A.DNCLS			AS NoteType,
			A.DN$9HTML		AS Notes,
			A.DNUPMJ		AS DateUpdated, 
			A.DNUPMT		AS TimeOfDay,
			ROW_NUMBER() OVER (ORDER BY A.DNUPMJ DESC, A.DNUPMT DESC) AS RNUM
		FROM
			[SCDATA].FQ674271 A
		WHERE
			A.DN$9REGID = @RegisterID
			AND	(A.DN$9DRAW	= @DrawerNumber)
			AND (@BatchNumber = '*' OR A.DNEDBT = @BatchNumber)
			AND (@SCUserID IS NULL OR A.DN$9USER = @SCUserID)
			AND (@NoteType = '*' OR A.DNCLS = @NoteType)
			AND (@JulianDateFrom = 0 OR @JulianDateTo = 0 OR (A.DNUPMJ >= @JulianDateFrom AND A.DNUPMJ <= @JulianDateTo))
			AND (@JulianTimeFrom = 0 OR @JulianTimeTo = 0 OR (A.DNUPMT >= @JulianTimeFrom AND A.DNUPMT <= @JulianTimeTo))
	)
	SELECT 
		A.RegisterID, 
		A.DrawerNumber, 
		A.BatchNumber, 
		A.SequenceNumber,
		A.SCUserID,
		A.NoteType,
		A.Notes,
		A.DateUpdated, 
		A.TimeOfDay,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A 
	WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

GO
	

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetRegister'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetRegister
	END

GO

-- #desc				Read Register 
-- #bl_class			Premier.POS.Register.cs
-- #db_dependencies		POS_GetDrawer
-- #db_references		N/A

-- #param @RegisterID	Register ID.




CREATE Procedure [DBO].POS_GetRegister

	@RegisterID				NVARCHAR(12) = null

AS

	SET NOCOUNT ON

	SELECT 
		RG$9REGID as	RegisterID	, 
		RGDSC1 as		RegisterDescription, 
		RG$9INID as		InstallationID,
		RGUSER as		E1User,
		RG$9PWD as		E1Password,
		RGUGRP as		E1Group
	FROM 
		[SCDATA].FQ67426 A
	WHERE 
		(@RegisterID IS NULL OR A.RG$9REGID = @RegisterID)

--Get Drawer by register

EXEC [DBO].POS_GetDrawer @RegisterID,null

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetRegisterDrawerCashIOLst'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetRegisterDrawerCashIOLst
	END

GO

-- #desc						Read Cash In/Out transactions
-- #bl_class					Premier.POS.RegisterDrawerCashInOutList 
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch Number

CREATE Procedure [DBO].POS_GetRegisterDrawerCashIOLst
	@RegisterID			NVARCHAR(12),
	@DrawerNumber		FLOAT,
	@CurrentBatchNumber NVARCHAR(15)
AS

SET NOCOUNT ON

SELECT
	A.DR$9USER AS UserId,
	A.DRUPMJ AS TransactionDate,
	A.DRUPMT AS TransactionTime,
	[DBO].CMM_GetUserDefinedCodeFnc('00','PY',A.DRRYIN,'*') AS PaymentInstrumentDesc,
	A.DRCRCD AS CurrencyCode,
	A.DR$9AATR AS TransactionAmount
FROM [SCDATA].FQ674282 A
WHERE 
	A.DR$9REGID = @RegisterID AND 
	A.DR$9DRAW = @DrawerNumber AND 
	A.DREDBT = @CurrentBatchNumber
ORDER BY A.DRUPMJ, A.DRUPMT ASC
 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetRegisterDrawerControl'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetRegisterDrawerControl
	END

GO

-- #desc						Reads Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch

CREATE Procedure [DBO].POS_GetRegisterDrawerControl
	@InstallationID		NVARCHAR(3),
	@RegisterID			NVARCHAR(12) = null,
	@DrawerNumber		FLOAT = null,
	@CurrentBatchNumber NVARCHAR(15)= null

AS

	SET NOCOUNT ON

SELECT 
	RC$9REGID AS RegisterID,
	RC$9DRAW AS DrawerNumber,
	RCEDBT	AS CurrentBatchNumber,  
	RC$9DAO AS  DateOpened,
	RC$9TIO AS  TimeOpened,
	RC$9USERO AS	UserOpened,
	RC$9DAC AS  DateClosed,
	RC$9TIC AS  TimeClosed,
	RC$9USERC AS UserClosed

FROM
	[SCDATA].FQ67427

WHERE
	(@RegisterID IS NULL OR RC$9REGID = @RegisterID) AND
	(@DrawerNumber IS NULL OR RC$9DRAW = @DrawerNumber) AND
	(@CurrentBatchNumber IS NULL OR RCEDBT = @CurrentBatchNumber)

EXEC [DBO].POS_GetDrawerPayment @InstallationID, @RegisterID,@DrawerNumber,@CurrentBatchNumber

GO
  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetRegisterLicenseAuth'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetRegisterLicenseAuth
	END

GO

-- #desc							Get Licenses Information
-- #bl_class						Premier.POS.Licenses.RegisterLicenseAuthentication.cs
-- #db_references					N/A

-- #param @InstallationID			Installation ID

CREATE Procedure [DBO].POS_GetRegisterLicenseAuth

@InstallationID NVARCHAR(3),
@RegisterId NVARCHAR(12)

AS

	SET NOCOUNT ON
	
		SELECT 
			RG$9SMS XMLFile
		FROM
		[SCDATA].FQ67426
	WHERE 
		(RG$9REGID = @RegisterID) AND (RG$9INID = @InstallationID)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_GetRegistersList'))
	BEGIN
		DROP  Procedure  [DBO].POS_GetRegistersList
	END

GO



-- #desc					Read Register list.
-- #bl_class				Premier.POS.RegisterList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.

CREATE Procedure [DBO].POS_GetRegistersList

	@InstallationID NVARCHAR(3) = null

AS

SET NOCOUNT ON

SELECT  
	RG$9REGID as RegisterID, 
	RGDSC1 as Description
	
FROM 
	[SCDATA].FQ67426 A
WHERE 
	(@InstallationID = '*' OR A.RG$9INID = @InstallationID)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdDrawer'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdDrawer
	END

GO

-- #desc							Update drawer by register 
-- #bl_class						Premier.POS.Drawer.cs , register.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @RegisterID				Register ID.
-- #param @DrawerNumber				Drawer Number.
-- #param @RegisterID				Register ID			
-- #param @DrawerNumber				Drawer Number	
-- #param @Status					Status
-- #param @CurrentBatchNumber		Batch Number	
-- #param @UserReservedReference	User Reserved ref.
-- #param @UserReservedNumber		User Reserved Number
-- #param @UserReservedAmount		User Reserved Amount
-- #param @UserReservedCode			User Reserved Code
-- #param @UserReservedDate			User Reserved date
-- #param @CashDrawerLimit			Cash in drawer limit
-- #param @ProgramId				Pregram Id
-- #param @workStationId			Work Station		
-- #param @UserId					User Id
-- #param @dateUpdated				Date updated
-- #param @TimeLastUpdated			Time Last Update

CREATE Procedure [DBO].POS_UpdDrawer
	@RegisterID				NVARCHAR(12),
	@DrawerNumber			FLOAT,
	@Status					NVARCHAR(2),
	@AllowMultipleUsers		NVARCHAR(2),
	@CurrentBatchNumber		NVARCHAR(15),
	@UserReservedReference	NVARCHAR(15) ,
	@UserReservedNumber		FLOAT,
	@UserReservedAmount		FLOAT,
	@UserReservedCode		NVARCHAR(2),
	@UserReservedDate		NUMERIC,
	@CashDrawerLimit		FLOAT,
	@ProgramId				NVARCHAR(10),
	@WorkStationId			NVARCHAR(10),
	@UserId					NVARCHAR(10),	
	@DateUpdated			NUMERIC,	
	@TimeLastUpdated		NUMERIC

AS

UPDATE
	[SCDATA].FQ674261
SET	
	DR$9DRST = @Status,
	DR$9DRMUL = @AllowMultipleUsers,
	DREDBT = @CurrentBatchNumber,
	DRURRF = @UserReservedReference,
	DRURAB = @UserReservedNumber,
	DRURAT = @UserReservedAmount,
	DRURCD = @UserReservedCode,
	DRURDT = @UserReservedDate,
	DR$9AATR = @CashDrawerLimit,
	DRPID =  @ProgramID,
	DRJOBN = @WorkStationId,
	DRUSER = @UserId,
	DRUPMJ = @DateUpdated,
	DRUPMT = @TimeLastUpdated

WHERE
	DR$9REGID = @RegisterID AND
	DR$9DRAW = @DrawerNumber
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdDrawerControlStatus'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdDrawerControlStatus
	END

GO

-- #desc						Update Drawer control status 
-- #bl_class					Premier.POS.Drawer.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer Number.
-- #param @CurrentBatchNumber	Batch Number
-- #param @Status				Drawer Status 

CREATE Procedure [DBO].POS_UpdDrawerControlStatus
	@RegisterID NVARCHAR(12) ,
	@DrawerNumber FLOAT ,
	@CurrentBatchNumber NVARCHAR(15),
	@Status	NVARCHAR(1)
	
AS

	
	UPDATE
		[SCDATA].FQ674261
	SET
		 DR$9DRST = @Status,
		 DREDBT = @CurrentBatchNumber,
		 DRURAT = 0    /*Accounting Batch Number*/
	WHERE
		DR$9REGID = @RegisterID and
		DR$9DRAW = @DrawerNumber 
		


GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdDrawerPayment'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdDrawerPayment
	END

GO

-- #desc						Update Drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch
-- #param @PaymentInstrument	Payment instrument
-- #param @CreditCardType		Credit Card Type
-- #param @CurrencyCode			Currency Code
-- #param @OpeningBalance		Opening Balance
-- #param @SumOfTransactions	Sum of Trans.
-- #param @TotalsPerCashier		Totals per Cashier
-- #param @LeftInDrawer			Left in Drawer

CREATE Procedure [DBO].POS_UpdDrawerPayment
	@RegisterID			NVARCHAR(12), 
	@DrawerNumber		FLOAT, 
	@CurrentBatchNumber NVARCHAR(15),
	@PaymentInstrument	NVARCHAR(1),
	@CreditCardType		NVARCHAR(4),
	@CurrencyCode		NVARCHAR(3),
	@OpeningBalance		FLOAT, 
	@SumOfTransactions	FLOAT,
	@TotalsPerCashier	FLOAT, 
	@LeftInDrawer		FLOAT,
	@UserId				NVARCHAR(10),   
	@ProgramId			NVARCHAR(10),
	@WorkstationId		NVARCHAR(10),  
	@DateUpdated		NUMERIC,   
	@TimeOfDay			NUMERIC

AS
	SET NOCOUNT ON


    UPDATE 
		[SCDATA].FQ67428
	SET 
		DC$9AAOB = @OpeningBalance,
	    DC$9AATR = @SumOfTransactions,
	    DC$9AACS = @TotalsPerCashier,
	    DC$9AALF = @LeftInDrawer,
		DCUSER	 = @UserId,
		DCPID	 = @ProgramId,
		DCJOBN	 = @WorkstationId,
		DCUPMJ	 = @DateUpdated,
		DCUPMT	 = @TimeOfDay 
    WHERE 
		DC$9REGID = @RegisterID AND 
		DC$9DRAW = @DrawerNumber AND 
		DCEDBT = @CurrentBatchNumber AND 
		DCRYIN = @PaymentInstrument AND
		DCCARD = @CreditCardType AND
		DCCRCD = @CurrencyCode

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdFastButton'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdFastButton
	END

GO

-- #desc					Update fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @LineNumber		Line	
-- #param @ItemNumber		Item number
-- #param @UnitOfMeasure    UOM
-- #param @Quantity			Quantity
-- #param @Description1		Description 1
-- #param @Description2		Description 2

CREATE Procedure [DBO].POS_UpdFastButton
	@InstallationID NVARCHAR(3),
	@LineNumber	FLOAT,
	@ItemNumber FLOAT,
	@UnitOfMeasure NVARCHAR(2),
	@Quantity	FLOAT,
	@ItemDescription1 NVARCHAR(30),
	@ItemDescription2 NVARCHAR(30)

AS
	SET NOCOUNT ON
	
	UPDATE 
		[SCDATA].FQ67416
	SET  
		FBITM = @ItemNumber,
	    FBUOM = @UnitOfMeasure,
	    FBUORG = @Quantity,
	    FBDSC1 = @ItemDescription1,
	    FBDSC2 = @ItemDescription2
	WHERE 
		FB$9INID = @InstallationID AND 
		FBLNID = @LineNumber
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdFastButtonLang'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdFastButtonLang
	END

GO

-- #desc					Add Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	InstallationID
-- #param @LineNumberID		LineNumberID
-- #param @LangPref			LangPref
-- #param @Description1		Description1 
-- #param @Description2		Description2 

CREATE Procedure [DBO].POS_UpdFastButtonLang
	@InstallationID	NVARCHAR(6),
	@LineNumber		FLOAT,
	@LangPref		NVARCHAR(4),
	@Description1	NVARCHAR(30),
	@Description2	NVARCHAR(30)
AS
	UPDATE [SCDATA].FQ67416L
		SET FBDSC1 = @Description1,
			FBDSC2 = @Description2
	WHERE
		FB$9INID   = @InstallationID
		AND FBLNID = @LineNumber
		AND FBLNGP = @LangPref 
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdInstallationLicenseAuth'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdInstallationLicenseAuth
	END

GO

-- #desc				Authenticate for registers
-- #bl_class			Premier.POS.Licenses.StoreLicenseAuthentication.cs
-- #db_dependencies		N/A
-- #db_references		N/A

 create procedure [DBO].POS_UpdInstallationLicenseAuth

@InstallationID NVARCHAR(3),
@EncryptedXML Text

AS
	SET NOCOUNT ON
	
		UPDATE [SCDATA].FQ670001
		SET
			IN$9HTML=@EncryptedXML
		WHERE (IN$9INID = @InstallationID)
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdReceiptDetail'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdReceiptDetail
	END

GO

-- #desc					Update receipts detail 
-- #bl_class				Premier.POS.ReceiptDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ReceiptID		Receipt ID
-- #param @InstallationID	Installation ID
-- #param @RegisterID		Register ID
-- #param @XmlBody			Receipt Body XML
-- #param @ProgramId		Audith Info
-- #param @WorkStationId	Audith Info
-- #param @UserId			Audith Info
-- #param @DateUpdated		Audith Info
-- #param @TimeLastUpdated	Audith Info

CREATE Procedure [DBO].POS_UpdReceiptDetail
	@ReceiptID NVARCHAR(10),
	@InstallationID NVARCHAR(3),
	@RegisterID NVARCHAR(12),
	@XmlBody ntext,
	@ProgramId NVARCHAR(10),
	@WorkStationId NVARCHAR(10),
	@UserId NVARCHAR(10),
	@DateLastUpdated NUMERIC,
	@TimeLastUpdated NUMERIC


AS
	SET NOCOUNT ON
	
	 UPDATE 
		[SCDATA].FQ674213
     SET 
		RR$9XML = @XmlBody,
        RRPID = @ProgramId,
        RRJOBN = @WorkStationId,
        RRUSER = @UserId,
        RRUPMJ = @DateLastUpdated,
        RRUPMT = @TimeLastUpdated
   WHERE 
		RR$9RCID = @ReceiptID
		AND RR$9INID = @InstallationID
		AND RR$9REGID = @RegisterID

	
		

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdReceiptHeader'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdReceiptHeader
	END

GO

-- #desc					Update receipts  
-- #bl_class				Premier.POS.ReceiptHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @ReceiptID		Receipt ID
-- #param @Description		Description
-- #param @ProgramId		Audith Info
-- #param @WorkStationId	Audith Info
-- #param @UserId			Audith Info
-- #param @DateUpdated		Audith Info
-- #param @TimeLastUpdated	Audith Info

CREATE Procedure [DBO].POS_UpdReceiptHeader
	@ReceiptID NVARCHAR(10),
	@Description NVARCHAR(30),
	@ProgramId NVARCHAR(10),
	@WorkStationId NVARCHAR(10),
	@UserId NVARCHAR(10),
	@DateLastUpdated NUMERIC,
	@TimeLastUpdated NUMERIC

AS
	SET NOCOUNT ON

	UPDATE
		[SCDATA].FQ674212
	SET
		RPDSC1 = @Description,
		RPPID = @ProgramId,
        RPJOBN = @WorkStationId,
        RPUSER = @UserId,
        RPUPMJ = @DateLastUpdated,
        RPUPMT = @TimeLastUpdated
    WHERE 
		RP$9RCID = @ReceiptID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdReceiptItemMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdReceiptItemMessage
	END
GO

-- #desc				    POS_UpdReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.
-- #param @MessageText      Message Text

CREATE PROCEDURE [DBO].POS_UpdReceiptItemMessage
    @InstallationID NVARCHAR(3),
    @ItemNumber     FLOAT,
    @MessageID      NVARCHAR(50),
    @QtyMessageItem NVARCHAR(1),
	@ProgramID      NVARCHAR(10),
    @WorkStationID   NVARCHAR(10),
    @UserID         NVARCHAR(10),
	@DateLastUpdated NUMERIC,
	@TimeLastUpdated NUMERIC
AS
	SET NOCOUNT ON

UPDATE [SCDATA].FQ674220
   SET MI$9IMQY = @QtyMessageItem
      ,MIPID    = @ProgramID
      ,MIJOBN	  = @WorkStationID
      ,MIUSER   = @UserID
      ,MIUPMJ   = @DateLastUpdated
      ,MIUPMT   = @TimeLastUpdated
 WHERE MI$9INID = @InstallationID AND
       MIITM    = @ItemNumber AND
       MI$9MID  = @MessageID




GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdReceiptMessage'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdReceiptMessage
	END

GO

-- #desc				    Update Receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @MessageID		MessageID.
-- #param @Description1     Description 1.
-- #param @Description2     Description 2.
-- #param @Type		        Type.
-- #param @OneTimeOnly      One time Only.
-- #param @Priority         Priority
-- #param @EfectiveDate     Efective Date. 
-- #param @ExpirationDate	Expiration Date.
-- #param @MessageText      Message Text

CREATE PROCEDURE [DBO].POS_UpdReceiptMessage
	@MessageID      NVARCHAR(50),
	@Description1   NVARCHAR(30),
	@Description2   NVARCHAR(30),
    @Type		    NVARCHAR(1),
    @OneTimeOnly    NVARCHAR(1),
    @Priority       FLOAT,
    @EfectiveDate   NUMERIC, 
    @ExpirationDate NUMERIC,
    @MessageText    NTEXT,
    @ProgramID      NVARCHAR(10),
    @WorkStationID   NVARCHAR(10),
    @User           NVARCHAR(10),
	@DateLastUpdated NUMERIC,
	@TimeLastUpdated NUMERIC

AS
	SET NOCOUNT ON

   UPDATE [SCDATA].FQ674219
   SET RMDSC1  = @Description1
      ,RMDSC2  = @Description2
      ,RM$9RMT = @Type
      ,RM$9RMUF= @OneTimeOnly
      ,RM$9RMP = @Priority
      ,RMEFTJ  = @EfectiveDate
      ,RMEXDJ  = @ExpirationDate
      ,RM$9XML = @MessageText
      ,RMPID   = @ProgramID
      ,RMJOBN  = @WorkStationID
      ,RMUSER  = @User
      ,RMUPMJ  = @DateLastUpdated
      ,RMUPMT  = @TimeLastUpdated
 WHERE RM$9MID = @MessageID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdRegister'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdRegister
	END

GO

-- #desc						Update a Register 
-- #bl_class					Premier.POS.Register.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @RegisterDescription	Descripcion.
-- #param @InstallationID		Installation ID.
-- #param @User					User.
-- #param @Password				Password.
-- #param @Group				Group.

CREATE Procedure [DBO].POS_UpdRegister
	@RegisterID				NVARCHAR(12),
	@RegisterDescription    NVARCHAR(30),
	@InstallationID			NVARCHAR(3),
	@UserID					NVARCHAR(20),
	@Password				NVARCHAR(200),
	@GroupID				NVARCHAR(20)
AS

	SET NOCOUNT ON

	UPDATE 
		[SCDATA].FQ67426
	SET  
		RGDSC1 = @RegisterDescription,
	    RG$9INID = @InstallationID,
	    RGUSER = @UserID,
		RG$9PWD = @Password,
		RGUGRP = @GroupID
	WHERE 
		RG$9REGID = @RegisterID

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdRegisterDrawerControl'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdRegisterDrawerControl
	END

GO

-- #desc						Update Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @RegisterID			Register ID.
-- #param @DrawerNumber			Drawer ID
-- #param @CurrentBatchNumber	Current Batch Number
-- #param @DateOpened			Date Opened
-- #param @TimeOpened			Time Opened	
-- #param @UserOpened			User Opened
-- #param @DateClosed			Date Closed
-- #param @TimeClosed			Time Closed
-- #param @UserClosed			User Closed

CREATE Procedure [DBO].POS_UpdRegisterDrawerControl
	@RegisterID NVARCHAR(12),
	@DrawerNumber FLOAT ,
	@CurrentBatchNumber NVARCHAR(15),
	@DateOpened  NUMERIC,
	@TimeOpened NUMERIC,
	@UserOpened FLOAT,
	@DateClosed  NUMERIC,
	@TimeClosed NUMERIC,
	@UserClosed FLOAT
	
AS


	SET NOCOUNT ON

UPDATE 
	[SCDATA].FQ67427
SET	
	RC$9DAO =  @DateOpened,
	RC$9TIO =  @TimeOpened,
	RC$9USERO = @UserOpened,
	RC$9DAC = @DateClosed,
	RC$9TIC =  @TimeClosed,
	RC$9USERC = @UserClosed
WHERE
	RC$9REGID = @RegisterID AND
	RC$9DRAW  = @DrawerNumber AND
	RCEDBT =  @CurrentBatchNumber 
	


GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].POS_UpdRegisterLicenseAuth'))
	BEGIN
		DROP  Procedure  [DBO].POS_UpdRegisterLicenseAuth
	END

GO

-- #desc				Authenticate for registers
-- #bl_class			Premier.POS.Licenses.RegisterLicenseAuthentication.cs
-- #db_dependencies		N/A
-- #db_references		N/A

 create procedure [DBO].POS_UpdRegisterLicenseAuth

@InstallationID NVARCHAR(3),
@RegisterId NVARCHAR(12),
@EncryptedXML NVARCHAR(2000)

AS
	SET NOCOUNT ON
	
		UPDATE [SCDATA].FQ67426
		SET
			RG$9SMS=@EncryptedXML
		WHERE (RG$9INID = @InstallationID) AND (RG$9REGID = @RegisterID)
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_AddSalesPersonClient'))
	BEGIN
		DROP  Procedure  [DBO].ECO_AddSalesPersonClient
	END

GO

-- #desc							Add a Sales Person Client
-- #bl_class						Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationId			InstallationId				
-- #param @WebAccountId				WebAccountId	
-- #param @AddressBookType			AddressBookType		
-- #param @AddressNumber			AddressNumber
-- #param @ContactId				ContactId
-- #param @CommissionRate			CommissionRate
-- #param @PersistentShoppingCart	PersistentShoppingCart
-- #param @LastPickDate				LastPickDate
-- #param @TimeLasUpdated			TimeLasUpdated
-- #param @OrderCompany				OrderCompany
-- #param @OrderNumber				OrderNumber
-- #param @OrderType				OrderType
-- #param @OrderDate				OrderDate
-- #param @AmmountOrderGross		AmmountOrderGross
-- #param @UserReservedNumber		UserReservedNumber			
-- #param @UserReservedAmount		UserReservedAmount	
-- #param @UserReservedCode			UserReservedCode	
-- #param @UserReservedDate			UserReservedDate
-- #param @UserReservedReference	UserReservedReference		
-- #param @UserId					UserId					
-- #param @ProgramId				ProgramId					
-- #param @DateUpdated				DateUpdated				
-- #param @TimeLastUpdated			TimeLastUpdated			
-- #param @JobNumber				JobNumber

CREATE Procedure [DBO].ECO_AddSalesPersonClient
(	
	@InstallationId				NVARCHAR(3),
	@WebAccountId				FLOAT,
	@AddressBookType			FLOAT,
	@AddressNumber				FLOAT,
	@ContactId					FLOAT,
	@CommissionRate				FLOAT,
	@PersistentShoppingCart	 NVARCHAR(MAX),
	@LastPickDate				NUMERIC,	
	@TimeUpd					NUMERIC,	
	@OrderCompany				NVARCHAR(5),
	@OrderNumber				FLOAT,
	@OrderType					NVARCHAR(3),
	@OrderDate					NUMERIC,
	@AmmountOrderGross			FLOAT,
	@UserReservedNumber			FLOAT,
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserId						NVARCHAR(10),
	@ProgramId					NVARCHAR(10),
	@DateUpdated				NUMERIC,	
	@TimeLastUpdated			NUMERIC,
	@JobNumber					NVARCHAR(10)
	
)
AS
	INSERT INTO [SCDATA].FQ67125
	(
		SP$9INID,
		SP$9WAN8,
		SP$9TYP,
		SP$9AN8,
		SPIDLN,
		SPCMR1,	
		SP$9HTML,
		SPUPDJ,
		SPMUPT,
		SPKCOO,
		SPDOCO,	
		SPDCTO,
		SPTRDJ,
		SPOTOT,
		SPURAB,
		SPURAT,
		SPURCD,
		SPURDT,
		SPURRF,
		SPUSER,
		SPPID,
		SPUPMJ,
		SPUPMT,
		SPJOBN
	)
	VALUES
	(
		@InstallationId,			
		@WebAccountId,				
		@AddressBookType,	
		@AddressNumber,
		@ContactId,
		@CommissionRate,
		@PersistentShoppingCart,
		@LastPickDate,
		@TimeUpd,
		@OrderCompany,
		@OrderNumber,
		@OrderType,
		@OrderDate,
		@AmmountOrderGross,
		@UserReservedNumber,			
		@UserReservedAmount,	
		@UserReservedCode,		
		@UserReservedDate,			
		@UserReservedReference,
		@UserId,						
		@ProgramId,					
		@DateUpdated,				
		@TimeLastUpdated,			
		@JobNumber			
	)
		
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_AddWebUserAdditionalInfo'))
	BEGIN
		DROP  Procedure  [DBO].ECO_AddWebUserAdditionalInfo
	END

GO

-- #desc							Add a Web Account Additional Info
-- #bl_class						Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationId			@InstallationId
-- #param @ObjectType				@ObjectType
-- #param @WebAccountID				@WebAccountID
-- #param @XmlBody					@XmlBody
-- #param @SharedReference			@SharedReference
-- #param @UserReservedNumber		@UserReservedNumber
-- #param @UserReservedAmount		@UserReservedAmount
-- #param @UserReservedCode			@UserReservedCode
-- #param @UserReservedDate			@UserReservedDate
-- #param @UserReservedReference	@UserReservedReference
-- #param @UserID					@UserID
-- #param @ProgramID				@ProgramID
-- #param @DateUpdated				@DateUpdated
-- #param @TimeLastUpdated			@TimeLastUpdated
-- #param @JobNumber				@JobNumber

CREATE Procedure [DBO].ECO_AddWebUserAdditionalInfo
(	
	@InstallationId				NVARCHAR(3),
	@ObjectType					FLOAT,
	@WebAccountID				FLOAT,
	@XmlBody				 NVARCHAR(MAX),
	@UserReservedNumber			FLOAT,
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@JobNumber					NVARCHAR(10),
	@TimeLastUpdated			NUMERIC,
	@DateUpdated				NUMERIC
)
AS
	
	INSERT INTO [SCDATA].FQ67120
	(
		WI$9INID,
		WI$9UKID,
		WI$9OBJTY,
		WI$9WAN8,
		WI$9HTML,
		WIURAB,
		WIURAT,
		WIURCD,
		WIURDT,
		WIURRF,
		WIUSER,
		WIPID,
		WIUPMJ,
		WIUPMT,
		WIJOBN
	)
	VALUES
	(
		@InstallationId,
		(ISNULL((SELECT MAX(WI$9UKID) FROM [SCDATA].FQ67120
					WHERE WI$9INID = @InstallationId AND WI$9OBJTY = @ObjectType AND WI$9WAN8 = @WebAccountID), 0) + 1),
		@ObjectType,
		@WebAccountID,
		@XmlBody,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedReference,
		@UserID,
		@ProgramID,
		@DateUpdated,
		@TimeLastUpdated,
		@JobNumber
	)



GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_DelSalesPersonClient'))
BEGIN
	DROP  Procedure  [DBO].ECO_DelSalesPersonClient
END

GO

-- #desc						Delete Sales Person Client
-- #bl_class					Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationId		InstallationId
-- #param @WebAccountId			WebAccountId

CREATE Procedure [DBO].ECO_DelSalesPersonClient
(
	@InstallationId			NVARCHAR(3),
	@WebAccountId			FLOAT,
	@AddressNumber			FLOAT,
	@ContactId				FLOAT
)
AS
	SET NOCOUNT ON
	
	DELETE FROM [SCDATA].FQ67125
	WHERE 
		SP$9INID = @InstallationID 
		AND	SP$9WAN8 = @WebAccountId 
		AND SP$9AN8 = @AddressNumber 
		AND SPIDLN = @ContactId
		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_DelSavedCart'))
	BEGIN
		DROP  Procedure  [DBO].ECO_DelSavedCart
	END

GO

-- #desc					Delete Saved Cart			
-- #bl_class				Premier.eCommerce.SavedCart.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID 
-- #param AddressNumberID	Address Number ID
-- #param UniqueKeyID		Unique Key ID

CREATE Procedure [DBO].ECO_DelSavedCart
(
	@InstallationID		NVARCHAR(3),
	@AddressNumberID		FLOAT,
	@UniqueKeyID		FLOAT
)
AS		
	DELETE FROM [SCDATA].FQ679913
	WHERE WA$9INID = @InstallationID
	AND WA$9AN8  = @AddressNumberID
	AND WAUKID = @UniqueKeyID;		
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcCheckWebAccountByInst'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcCheckWebAccountByInst
	END

GO

-- #desc						Check Web Account By Installation
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID
-- #param @UserName

CREATE Procedure [DBO].ECO_ExcCheckWebAccountByInst
	(
		@UserName		nvarchar(256), 
		@InstallationID	nchar(3)
	)
AS

SELECT
	WUSR.WA$9USER AS UserID
FROM
	[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	--Installation By User
		ON WUSR.WA$9USER = INBU.UI$9USER
WHERE
	INBU.UI$9INID = @InstallationID
	AND WUSR.WAEMAL = @UserName
	

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcCheckWebAcctAddressNo'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcCheckWebAcctAddressNo
	END

GO

-- #desc				Get the Web Account key fields does not exists
-- #bl_class			Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param @InstallationID
-- #param @UserName

CREATE Procedure [DBO].ECO_ExcCheckWebAcctAddressNo
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@ContactID			FLOAT
)
AS

SELECT
	COUNT(*) AS AccountNameCount,
	WUSR.WA$9WAN8 AS WebAccountID
FROM
	[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	--Installation By User
		ON WUSR.WA$9USER = INBU.UI$9USER
WHERE
	(INBU.UI$9INID = @InstallationID) AND
	(WUSR.WA$9AN8 = @AddressNumber) AND
	(WUSR.WAIDLN = @ContactID)
	group by  WUSR.WA$9WAN8
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcClearTermsCondStatus'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcClearTermsCondStatus
	END

GO

-- #desc						Execute clear Terms and Condition Status
-- #bl_class					Premier.eCommerce.TermsAndConditionsAccept.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @StoreId
-- #param @ObjectType
-- #param @XmlBody

CREATE Procedure [DBO].ECO_ExcClearTermsCondStatus
(
	@StoreId				NVARCHAR(3),
	@ObjectType				NUMERIC(18,0),
	@XmlBody				NTEXT
)
AS
	SET NOCOUNT ON
	
	BEGIN
		--Clear specific installation
		UPDATE 
			[SCDATA].FQ67120
		SET	
			WI$9HTML = @XmlBody
		WHERE
			WI$9OBJTY = @ObjectType
			AND	WI$9INID = @StoreId
	END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcCopyWishList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcCopyWishList
	END

GO
-- #desc						Copy Wish List
-- #bl_class					Premier.eCommerce.WishListHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @WebAccountID			WebAccountID
-- #param @WishListID			SequenceID
-- #param @NewWishListName		NewName


CREATE Procedure [DBO].ECO_ExcCopyWishList
(
	@WebAccountID		FLOAT,
	@WishListID			FLOAT,
	@NewWishListName	NVARCHAR(30),
	@SequenceID			FLOAT = NULL OUTPUT
)
AS

DECLARE @SEQCOUNT FLOAT
SET @SEQCOUNT = (SELECT ISNULL(MAX(WHSEQ ),-1) + 1 
	FROM [SCDATA].FQ674214 WHERE WH$9WAN8 = @WebAccountID);

SET @SequenceID = @SEQCOUNT;
	
INSERT INTO [SCDATA].FQ674214
(
	WH$9WAN8, 
	WHSEQ ,
	WHDESC,
	WHURCD,
	WHURDT,
	WHURAT,
	WHURAB,
	WHURRF,
	WHUSER,
	WHPID,
	WHJOBN,
	WHUPMJ,
	WHTDAY
)
SELECT 
	WH$9WAN8			AS WebAccountID, 
	@SEQCOUNT			AS WishListID,
	@NewWishListName	AS wishListDesc,
	WHURCD				AS UserReservedCode,
	WHURDT				AS UserReservedDate,
	WHURAT				AS UserReservedAmount,
	WHURAB				AS UserReservedNumber,
	WHURRF				AS UserReservedReference,
	WHUSER				AS UserID,
	WHPID				AS ProgramID,
	WHJOBN				AS WorkStationID,
	WHUPMJ				As DateUpdated,
	WHTDAY				AS TimeOfDay
FROM 
	[SCDATA].FQ674214 --WishListHeader
WHERE 
	WH$9WAN8 = @WebAccountID
	AND WHSEQ = @WishListID

INSERT INTO [SCDATA].FQ674215
(
	WD$9WAN8, 
	WDSEQ ,
	WDITM,
	WDUORG,
	WDUOM,
	WDURCD,
	WDURDT,
	WDURAT,
	WDURAB,
	WDURRF,
	WDUSER,
	WDPID,
	WDJOBN,
	WDUPMJ,
	WDTDAY
)
SELECT 
	WD$9WAN8	AS WebAccount, 
	@SEQCOUNT	AS SequenceID ,
	WDITM		AS ShortItemNumber,
	WDUORG		AS Quantity,
	WDUOM		AS UOM,
	WDURCD		AS UserReservedCode,
	WDURDT		AS UserReservedDate,
	WDURAT		AS UserReservedAmount,
	WDURAB		AS UserReservedNumber,
	WDURRF		AS UserReservedReference,
	WDUSER		AS UserID,
	WDPID		AS ProgramID,
	WDJOBN		AS WorkStationID,
	WDUPMJ		As DateUpdated,
	WDTDAY		AS TimeOfDay
FROM 
	[SCDATA].FQ674215	
WHERE 
	WD$9WAN8 = @WebAccountID
	AND WDSEQ = @WishListID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcDelWebAccountInfo'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcDelWebAccountInfo
	END
GO

-- #desc						Delete Web Account Info
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationId		InstallationId				
-- #param @WebAccountId			WebAccountId	

CREATE Procedure [DBO].ECO_ExcDelWebAccountInfo
(
	@InstallationId		NVARCHAR(3),
	@WebAccountId		FLOAT
)
AS
	--Delete the Sales Person
	DELETE FROM	[SCDATA].FQ67125
	WHERE 
		SP$9INID = @InstallationId
		AND SP$9WAN8 = @WebAccountId
		
	--Delete Web Account Additional Info
	DELETE FROM	[SCDATA].FQ67120
	WHERE 
		WI$9INID = @InstallationId AND
		WI$9WAN8 = @WebAccountId
		
	--Delete Persist Shopping Cart Info
	DELETE FROM [SCDATA].FQ6742WF
	WHERE
		SH$9INID = @InstallationId AND
		SH$9WAN8 = @WebAccountId;

	--Announcements - Assignments by web account 	
	DELETE FROM [SCDATA].FQ67105A WHERE MA$9ATYP = 5 AND MA$9WAN8 = @WebAccountId;

	--Announcements  History
	DELETE FROM [SCDATA].FQ67105H WHERE MH$9INID = @InstallationID AND MH$9WAN8 = @WebAccountId;
	
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcDelWebAcctByContactID'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcDelWebAcctByContactID
	END

GO

-- #desc						Delete WebAccount By Contact
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		Installation ID
-- #param @AddressNumber		Address Number
-- #param @ContactID			Contact ID

CREATE Procedure [DBO].ECO_ExcDelWebAcctByContactID
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@ContactID			FLOAT
)
AS
	DELETE FROM
			[SCDATA].FQ67101
	WHERE
		WA$9INID = @InstallationID AND
		WA$9AN8	 = @AddressNumber AND
		WAIDLN	 = @ContactID
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcPurgeAbandonShopCarts'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcPurgeAbandonShopCarts
	END

GO

-- #desc							Delete abandoned shopping cart
-- #bl_class						Premier.Ecommerce.PurgeAbandonedShoppingCartsCommand
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationID			InstallationID

CREATE Procedure [DBO].ECO_ExcPurgeAbandonShopCarts
(
	@InstallationID 	NVARCHAR(3)
)
AS
	DECLARE @NotificationSetting INT
	DECLARE @InstallationIDTemp NVARCHAR(3)

	SET @InstallationIDTemp = @InstallationID;

	EXEC [DBO].CMM_GetConstantValue 'ABNCARTDEL', @InstallationIDTemp, @NotificationSetting out

	DELETE 
	FROM [SCDATA].FQ6742WF
	WHERE SH$9INID = @InstallationID
	AND SHUPMJ <= [DBO].CMM_GetCurrentJulianDate (GETDATE() - @NotificationSetting)

	UPDATE [SCDATA].FQ67125 
	SET SP$9HTML = '' 
	WHERE 
			SP$9INID = @InstallationID
		AND SPUPMJ <= [DBO].CMM_GetCurrentJulianDate (GETDATE() - @NotificationSetting)

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcUpdLastLoginTime'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcUpdLastLoginTime
	END

GO

-- #desc						Execute Update Last Login Date
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID
-- #param @UserName
-- #param @LastLoginDate
-- #param @LastLoginTime

CREATE Procedure [DBO].ECO_ExcUpdLastLoginTime
	(
		@UserID			float,
		@InstallationID	nchar(3),
		@LastLoginDate	NUMERIC,
		@LastLoginTime	NUMERIC
	)
AS

SET NOCOUNT ON

UPDATE [SCDATA].FQ67101
	SET	WAACTDATE = @LastLoginDate, 
		WAACTTIME = @LastLoginTime
	WHERE
		WA$9WAN8 = @UserID AND
		WA$9INID = @InstallationID

SET NOCOUNT OFF

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExcUpdLastLoginTimeByName'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExcUpdLastLoginTimeByName
	END

GO

-- #desc						Update Last Login Date by Name
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID
-- #param @UserName
-- #param @LastLoginDate
-- #param @LastLoginTime

CREATE Procedure [DBO].ECO_ExcUpdLastLoginTimeByName
	(
		@UserName		nvarchar(256), 
		@InstallationID	nchar(3), 
		@LastLoginDate	NUMERIC, 
		@LastLoginTime	NUMERIC
	)
AS

SET NOCOUNT ON

UPDATE [SCDATA].FQ67101
	SET	WAACTDATE = @LastLoginDate, 
		WAACTTIME = @LastLoginTime
	WHERE
		WA$9INID = @InstallationID
		AND WAEMAL = @UserName 
		

SET NOCOUNT OFF

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_ExeUpdWebAcctLanguagePref'))
	BEGIN
		DROP  Procedure  [DBO].ECO_ExeUpdWebAcctLanguagePref
	END

GO

-- #desc					Update an User (LanguagePref).
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	InstallationID
-- #param @WebAccountID		WebAccountID
-- #param @LanguagePref		LanguagePref

CREATE Procedure [DBO].ECO_ExeUpdWebAcctLanguagePref
(
	@InstallationID					NVARCHAR(3),
	@WebAccountID					FLOAT,
	@LanguagePref					NVARCHAR(2)
)
AS
SET NOCOUNT ON
	
UPDATE 
	[SCDATA].FQ67991
SET
	USLNGP	= @LanguagePref
WHERE 	 
	US$9USER = (SELECT WA$9USER FROM [SCDATA].FQ67101
					WHERE WA$9WAN8 = @WebAccountID AND
						  WA$9INID = @InstallationID)	
	
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetAbandonedShopCartList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetAbandonedShopCartList
	END

GO

-- #desc					Get the abandoned persist shopping cart
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A


CREATE Procedure [DBO].ECO_GetAbandonedShopCartList
(
	@InstallationID NVARCHAR(3)
)
AS
DECLARE @NotificationSetting INTEGER
DECLARE @FirstNotificationDate INTEGER
DECLARE @SecondNotificationDate INTEGER
DECLARE @ThirdNotificationDate INTEGER
DECLARE @CurrentJulianDate INTEGER
DECLARE @InstallationIDTemp NVARCHAR(3)

SET @InstallationIDTemp = @InstallationID;

SET @CurrentJulianDate = [DBO].CMM_GetCurrentJulianDate (GETDATE())
EXEC [DBO].CMM_GetConstantValue 'ABNEMLNOT1', @InstallationIDTemp, @NotificationSetting out
SET @FirstNotificationDate = [DBO].CMM_GetCurrentJulianDate (GETDATE() - @NotificationSetting)
EXEC [DBO].CMM_GetConstantValue 'ABNEMLNOT2', @InstallationIDTemp, @NotificationSetting out
SET @SecondNotificationDate = [DBO].CMM_GetCurrentJulianDate (GETDATE() - @NotificationSetting)
EXEC [DBO].CMM_GetConstantValue 'ABNEMLNOT3', @InstallationIDTemp, @NotificationSetting out
SET @ThirdNotificationDate = [DBO].CMM_GetCurrentJulianDate (GETDATE() - @NotificationSetting)

SELECT	
	PSC.SH$9WAN8	AS WebAccountID,
	PSC.SH$9INID	AS InstallationID,
	WA.WAEMAL		AS UserName,
	CASE WA.WA$9TYP 
		WHEN 1 THEN CONS.PCMLNM
		ELSE CUST.WWMLNM
	END AS CustomerName,
	CASE WA.WA$9TYP
		WHEN 1 THEN CONS.PCEMAL
		ELSE ISNULL((SELECT TOP 1 EAEMAL
				FROM	[SCDATA].F01151
				WHERE	EAAN8 = CUST.WWAN8
				AND		EAIDLN = CUST.WWIDLN
				AND		EAETP = 'E'
				ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'')
	END AS Email,
	CONT.ABLNGP AS LangPref,
	0 AS Client,
	'' AS ClientName,
	CASE PSC.SHUPMJ
		WHEN @FirstNotificationDate THEN 1
		WHEN @SecondNotificationDate THEN 2
		WHEN @ThirdNotificationDate THEN 3
		END AS NotificationSequence
FROM 
	[SCDATA].FQ6742WF PSC
	INNER JOIN [SCDATA].FQ67101 WA
		ON WA.WA$9WAN8 = PSC.SH$9WAN8
		AND WA.WA$9INID = PSC.SH$9INID
	LEFT OUTER JOIN [SCDATA].FQ67104 CONT
		ON CONT.AB$9AN8 = WA.WA$9AN8
		AND CONT.ABIDLN = WA.WAIDLN
	LEFT OUTER JOIN [SCDATA].F0111 CUST
		ON CUST.WWAN8 = WA.WA$9AN8 
		AND CUST.WWIDLN = WA.WAIDLN 
		AND WA.WA$9TYP IN(0, 2)  --Customer Only
	LEFT OUTER JOIN [SCDATA].FQ67303 CONS
		ON CONS.PC$9AN8 = WA.WA$9AN8 
		AND CONS.PCIDLN = WA.WAIDLN 
		AND WA.WA$9TYP = 1 --Consumer Only
WHERE PSC.SHQTY > 0
AND PSC.SH$9INID = @InstallationID
AND PSC.SHUPMJ <> @CurrentJulianDate
AND PSC.SHUPMJ IN (@FirstNotificationDate, @SecondNotificationDate, @ThirdNotificationDate) 
UNION
SELECT	
	PSC.SP$9WAN8	AS WebAccountID,
	PSC.SP$9INID	AS InstallationID,
	WA.WAEMAL		AS UserName,
	CASE WA.WA$9TYP 
		WHEN 1 THEN CONS.PCMLNM
		ELSE CUST.WWMLNM
	END AS CustomerName,
	CASE WA.WA$9TYP 
		WHEN 1 THEN CONS.PCEMAL
		ELSE ISNULL((SELECT TOP 1 EAEMAL
				FROM	[SCDATA].F01151
				WHERE	EAAN8 = CUST.WWAN8
				AND		EAIDLN = CUST.WWIDLN
				AND		EAETP = 'E'
				ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC),'')
	END AS Email,
	CONT.ABLNGP AS LangPref,
	PSC.SP$9AN8 AS Client,
	CASE PSC.SP$9TYP 
		WHEN 1 THEN CONSCLIENT.PCMLNM
		ELSE CUSTCLIENT.WWMLNM
	END AS ClientName,
	CASE PSC.SPUPMJ
		WHEN @FirstNotificationDate THEN 1
		WHEN @SecondNotificationDate THEN 2
		WHEN @ThirdNotificationDate THEN 3
		END AS NotificationSequence 
FROM 
	[SCDATA].FQ67125 PSC
	INNER JOIN [SCDATA].FQ67101 WA
		ON WA.WA$9WAN8 = PSC.SP$9WAN8
		AND WA.WA$9INID = PSC.SP$9INID
	LEFT OUTER JOIN [SCDATA].FQ67104 CONT
		ON CONT.AB$9AN8 = WA.WA$9AN8
		AND CONT.ABIDLN = WA.WAIDLN
	LEFT OUTER JOIN [SCDATA].F0111 CUST
		ON CUST.WWAN8 = WA.WA$9AN8 
		AND CUST.WWIDLN = WA.WAIDLN 
		AND WA.WA$9TYP IN(0, 2)  --Customer Only
	LEFT OUTER JOIN [SCDATA].FQ67303 CONS
		ON CONS.PC$9AN8 = WA.WA$9AN8 
		AND CONS.PCIDLN = WA.WAIDLN 
		AND WA.WA$9TYP = 1 --Consumer Only
	LEFT OUTER JOIN [SCDATA].F0111 CUSTCLIENT
		ON CUSTCLIENT.WWAN8 = PSC.SP$9AN8 
		AND CUSTCLIENT.WWIDLN = PSC.SPIDLN 
		AND PSC.SP$9TYP IN(0, 2)  --Customer Only
	LEFT OUTER JOIN [SCDATA].FQ67303 CONSCLIENT
		ON CONSCLIENT.PC$9AN8 = PSC.SP$9AN8 
		AND CONSCLIENT.PCIDLN = PSC.SPIDLN 
		AND PSC.SP$9TYP = 1 --Consumer Only
WHERE PSC.SP$9HTML IS NOT NULL
AND PSC.SP$9INID = @InstallationID
AND PSC.SPUPMJ <> @CurrentJulianDate
AND PSC.SPUPMJ IN (@FirstNotificationDate, @SecondNotificationDate, @ThirdNotificationDate) 
GO 
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetAccountSummaryInfo'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetAccountSummaryInfo
	END

GO

-- #desc						Get Account Summary Info
-- #bl_class	 	 			Premier.eCommerce.AccountSummaryInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param Company				Company

CREATE Procedure [DBO].ECO_GetAccountSummaryInfo
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@AddressBookType	FLOAT,
	@Company			NVARCHAR(5)
)
AS
SET NOCOUNT ON
	
	/* Gets the Document Restrictions Parameters */
	DECLARE	@CtRestric	NVARCHAR(256);
	DECLARE @CtINID		NVARCHAR(3);
	DECLARE @CtConstant	NVARCHAR(10);
	
	/* Counts variables */
	DECLARE @ShipTosCount INTEGER;
	DECLARE @ContactsWebAcctActiveCount INTEGER;
	DECLARE @ContactsWebAcctInactiveCount INTEGER;
	DECLARE @ContactsWithoutWebAcctCount INTEGER;

	--------------------------Gets the Organization Structure Type
	DECLARE @OrgStrType	NCHAR(3)
	DECLARE @OrgStrTypeINID	NCHAR(3)
	SET @OrgStrTypeINID = @InstallationID	

	SET @CtConstant = 'CT_RESTRIC';
	SET @CtINID = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue @CtConstant, @CtINID OUT, @CtRestric OUT;

	IF(@AddressBookType = 0)	/* Customer */ 
	BEGIN
		EXEC [DBO].CMM_GetConstantValue 'ORGSTRTYPE', @OrgStrTypeINID OUT, @OrgStrType OUT
		/* Shiptos count */
		;WITH SHIPTOS AS /* CTE with parent address number and children address number */
		(
			SELECT MAAN8 FROM [SCDATA].F0150 WHERE MAPA8 = @AddressNumber AND MAOSTP = @OrgStrType
			UNION ALL 
			SELECT @AddressNumber MAAN8
		),
		CUSTOMERS AS 
		(
			SELECT ISNULL(B.AIBADT, A.AIBADT) BADT 
			FROM SHIPTOS
			INNER JOIN [SCDATA].F03012 A
				ON MAAN8 = A.AIAN8
			LEFT OUTER JOIN [SCDATA].F03012 B
				ON MAAN8 = B.AIAN8
				AND B.AICO = @Company
			WHERE A.AICO = '00000'
		)
		SELECT @ShipTosCount = COUNT(1)
		FROM CUSTOMERS
		WHERE BADT IN ('S', 'X');

		/* Validates if the setting is on and join to FQ67008 */
		IF (@CtRestric = N'1')	
		BEGIN
			/* Web account counts */
			SELECT 
				@ContactsWithoutWebAcctCount = SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END),
				@ContactsWebAcctInactiveCount = SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END),
				@ContactsWebAcctActiveCount = SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END)
			FROM [SCDATA].F0111 CON 
				INNER JOIN [SCDATA].FQ67008 CtR
					ON DR$9INID = @CtINID 
					AND DR$9CNST = @CtConstant 
					AND CtR.DRKY = CON.WWTYC
				LEFT OUTER JOIN [SCDATA].FQ67101
					ON WA$9AN8 = @AddressNumber
					AND WA$9TYP IN (0,2) 
					AND WA$9INID = @InstallationID
					AND WAIDLN = CON.WWIDLN 
				LEFT OUTER JOIN [SCDATA].FQ67991 
					ON US$9USER = WA$9USER 
			WHERE CON.WWAN8 = @AddressNumber
				AND CON.WWIDLN <> 0;
		END
		ELSE
		BEGIN
			/* Web account counts */
			SELECT 
				@ContactsWithoutWebAcctCount = SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END),
				@ContactsWebAcctInactiveCount = SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END),
				@ContactsWebAcctActiveCount = SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END)
			FROM [SCDATA].F0111 CON 
				LEFT OUTER JOIN [SCDATA].FQ67101
					ON  WA$9AN8 = @AddressNumber
					AND WA$9TYP IN (0,2)
					AND WA$9INID = @InstallationID
					AND WAIDLN = CON.WWIDLN 
				LEFT OUTER JOIN [SCDATA].FQ67991 
					ON US$9USER = WA$9USER 
			WHERE CON.WWAN8 = @AddressNumber
				AND CON.WWIDLN <> 0;
		END
	END
	ELSE	/* Consumer */
	BEGIN
		/* Shiptos count */
		SELECT @ShipTosCount = COUNT(1)
		FROM [SCDATA].FQ670302
		/* Read the parent shipto and children shiptos */
		WHERE (PR$9PA8 = @AddressNumber OR PR$9AN8 = @AddressNumber)
		AND PRBADT IN ('S', 'X');

		/* Validates if the setting is on and join to FQ67008 */
		IF (@CtRestric = N'1')	
		BEGIN
			/* Web account count */
			SELECT 
				@ContactsWithoutWebAcctCount = SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END),
				@ContactsWebAcctInactiveCount = SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END),
				@ContactsWebAcctActiveCount = SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END)
			FROM [SCDATA].FQ67303 
				INNER JOIN [SCDATA].FQ67008 CtR
					ON DR$9INID = @CtINID 
					AND DR$9CNST = @CtConstant
					AND CtR.DRKY = PCTYC
				LEFT OUTER JOIN [SCDATA].FQ67101 
					ON WA$9AN8 = @AddressNumber
					AND WA$9TYP = 1
					AND WA$9INID = @InstallationID
					AND WAIDLN = PCIDLN
				LEFT OUTER JOIN [SCDATA].FQ67991 
					ON US$9USER = WA$9USER
			WHERE PC$9AN8 = @AddressNumber
					AND PCIDLN <> 0;
		END
		ELSE
		BEGIN 
			/* Web account count */
			SELECT 
				@ContactsWithoutWebAcctCount = SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END),
				@ContactsWebAcctInactiveCount = SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END),
				@ContactsWebAcctActiveCount = SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END)
			FROM [SCDATA].FQ67303
				LEFT OUTER JOIN [SCDATA].FQ67101 
					ON WA$9AN8 = @AddressNumber
					AND WA$9TYP = 1
					AND WA$9INID = @InstallationID
					AND WAIDLN = PCIDLN
				LEFT OUTER JOIN [SCDATA].FQ67991 
					ON US$9USER = WA$9USER
			WHERE PC$9AN8 = @AddressNumber
					AND PCIDLN <> 0;
		END
	END

	SELECT 
		@ShipTosCount AS ShipTosCount, 
		@ContactsWebAcctActiveCount AS ContactsWebAcctActiveCount,
		@ContactsWebAcctInactiveCount AS ContactsWebAcctInactiveCount,
		@ContactsWithoutWebAcctCount AS ContactsWithoutWebAcctCount

	/* Credit carts summary */
	EXEC [DBO].PRO_GetCreditCardsSummary @AddressNumber, @AddressBookType;
	/* Bank accounts summary */
	EXEC [DBO].PRO_GetBankAccountsSummary @InstallationID, @AddressNumber;

SET NOCOUNT OFF

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetPermissionSetUpList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetPermissionSetUpList
	END

GO

-- #desc						Get Permission SetUp List
-- #bl_class	 	 			Premier.eCommerce.PermissionSetUpList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Installation			Installation
-- #param @AddressNumber		Address Number
-- #param @Status				Status	 

CREATE Procedure [DBO].ECO_GetPermissionSetUpList
(
	@InstallationID   NVARCHAR(3),
	@IndCompFlag	FLOAT
)
AS

		
Select 
	PE$9INID  AS InstallationID,
	PE$9PCD   AS PermissionCode,
	PE$9ICF   AS IndividualCompanyFlag,
	PE$9ALLOW AS ActionAllowed,
	PE$9WEBA  AS WebAllowebFlag
From
	[SCDATA].FQ67994E
Where
	PE$9INID = @InstallationID AND
	PE$9ICF = @IndCompFlag	
UNION ALL
Select 
	PE$9INID  AS InstallationID,
	PE$9PCD   AS PermissionCode,
	PE$9ICF   AS IndividualCompanyFlag,
	PE$9ALLOW AS ActionAllowed,
	PE$9WEBA  AS WebAllowebFlag
From
	[SCDATA].FQ67994E  A
Where
	A.PE$9INID = '***' AND
	A.PE$9ICF = @IndCompFlag
	AND A.PE$9PCD  NOT IN(SELECT B.PE$9PCD
							  FROM  [SCDATA].FQ67994E B
							  WHERE B.PE$9INID = @InstallationID
								AND B.PE$9ICF = @IndCompFlag)

GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetPersistentShoppingCart'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetPersistentShoppingCart
	END

GO

-- #desc					Get the persist shopping cart
-- #bl_class	 	 		Premier.eCommerce.TemporalShoppingCartCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A


CREATE Procedure [DBO].ECO_GetPersistentShoppingCart
(
	@WebAccountId FLOAT,
	@InstallationID NVARCHAR(3)
)

AS

SELECT	
	SH$9WAN8	AS WebAccountId,
	SH$9INID	AS InstallationID,
	SHQTY		AS Quantity,
	SHUPMT		AS LastUpdate,
	SH$9HTML	AS ItemList
FROM 
	[SCDATA].FQ6742WF
WHERE          
	-- Search Type filter
    (SH$9WAN8  = @WebAccountId) AND (SH$9INID = @InstallationID)

GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetSalePClientShopCart'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetSalePClientShopCart
	END
GO

-- #desc							Get the persist shopping cart of the Sales Person Client
-- #bl_class						Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @WebAccountID				WebAccountID of the Sales Person
-- #param @InstallationID			Installation Id
-- #param @SalesPersonClient		Address Number of the Sales Person Client

CREATE Procedure [DBO].ECO_GetSalePClientShopCart
(
	@WebAccountId FLOAT,
	@InstallationID NVARCHAR(3),
	@SalesPersonClient FLOAT
)

AS

SELECT	
	SP$9WAN8	AS WebAccountId,
	SP$9INID	AS InstallationID,
	0			AS Quantity,
	SPUPMT		AS LastUpdate,
	SP$9HTML	AS ItemList
FROM 
	[SCDATA].FQ67125
WHERE          
	-- Search Type filter
    (SP$9WAN8  = @WebAccountId) 
	AND (SP$9INID = @InstallationID) 
	AND (SP$9AN8 = @SalesPersonClient)

GO  
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetSalesPersnLstByClient'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetSalesPersnLstByClient
	END

GO

-- #desc						Get Sales Person List by Client
-- #bl_class	 	 			Premier.eCommerce.SalesPersonList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @AddressNumber		Address Number
-- #param @ContactID     		Contact ID

CREATE Procedure [DBO].ECO_GetSalesPersnLstByClient
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@ContactID			FLOAT	
)
AS
SELECT 
	B.WA$9AN8 AS AddressNumber,
	B.WAIDLN AS ContactID,
	(CASE WHEN C.UP$9ALLOW IS NULL OR C.UP$9ALLOW = 1 THEN 'N' ELSE 'Y' END) AS Notify,
	(SELECT TOP 1 emails.EAEMAL
						FROM [SCDATA].F01151 emails
						WHERE emails.EAAN8 = B.WA$9AN8 
						 AND emails.EAIDLN = B.WAIDLN AND emails.EAETP = 'E'
						ORDER BY emails.EAEHIER DESC, emails.EARCK7 DESC) AS EmailAddress
	FROM [SCDATA].FQ67125 A 
	INNER JOIN [SCDATA].FQ67101 B
		 ON B.WA$9WAN8= A.SP$9WAN8 AND B.WA$9INID = A.SP$9INID
	 LEFT OUTER JOIN [SCDATA].FQ67997 C 
		 ON C.UP$9USER = B.WA$9USER AND UP$9PCD='ESPRE'
	 WHERE A.SP$9AN8=@AddressNumber AND A.SP$9INID=@InstallationID AND A.SPIDLN=@ContactID;
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetSalesPersonClientList'))
	BEGIN
		DROP  Procedure [DBO].ECO_GetSalesPersonClientList
	END
GO
-- #desc					Read Sales Person Client List 
-- #bl_class				Premier.Ecommerce.SalesPersonClientList
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param @InstallationId	Installation Id			
-- #param @WebAccountId		Web Account Id
-- #param @CustomerName		Customer Name
-- #param @AddressNumber	Address Number
-- #param @AddressLine1		Address Line 1
-- #param @City				City
-- #param @State			State
-- #param @ZipCode			Zip Code
-- #param @Country			Country
-- #param @LangPref			Language Preference
-- #param @SortBy			Sort By Colum name
-- #param @SortDir			Sort Dir ASC / DESC
-- #param @PageIndex		Page Index
-- #param @PageSize			Page Size


CREATE Procedure [DBO].ECO_GetSalesPersonClientList
(
	@InstallationId				NVARCHAR(3),
	@WebAccountId				FLOAT,
    @CustomerName				NVARCHAR(40),
    @AddressNumber              FLOAT,
    @AddressLine1				NVARCHAR(40),
    @City						NVARCHAR(25),
    @State						NVARCHAR(3),
    @ZipCode					NVARCHAR(12),
    @Country					NVARCHAR(3),
    @LangPref					NVARCHAR(2),
	@SortBy						NVARCHAR(20),
	@SortDir					NVARCHAR(1),
    @PageIndex                  FLOAT,
	@PageSize                   FLOAT
)
AS
	/* Dynamic */
	DECLARE @SQL_DYNAMIC			NVARCHAR(MAX)
	DECLARE @WHERE_DYNAMIC			NVARCHAR(MAX) = ''
	DECLARE @WHERE_DYNAMIC_CONSU	NVARCHAR(MAX) = ''
	DECLARE @SORT_DYNAMIC			NVARCHAR(36)
	DECLARE @SORTDIR_DYNAMIC		NVARCHAR(5)
	DECLARE @ConsumerCount			FLOAT
	DECLARE @CurrentJulianDate NUMERIC = [DBO].CMM_GetCurrentJulianDate(GETDATE());

       
	/* Dynamic sort direction statement */
    SET @SORTDIR_DYNAMIC = CASE @SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END

    /* Dynamic sort statement */
    SET @SORT_DYNAMIC = CASE @SortBy 
        WHEN 'AddressNumber' THEN 'AddressNumber'
        WHEN 'AddressLine1' THEN 'AddressLine1'
        WHEN 'City' THEN 'City'
        WHEN 'State' THEN 'State'
        WHEN 'ZipCode' THEN 'ZipCode'
        ELSE 'CustomerName' + @SORTDIR_DYNAMIC +', CompanyName'
    END
	
	SET @SORT_DYNAMIC += @SORTDIR_DYNAMIC

	/* Verify if exist consumer relation to concat consumer UNION ALL */
	SELECT @ConsumerCount = COUNT(*) FROM [SCDATA].FQ67125 SPC WHERE SPC.SP$9INID = @InstallationId AND SPC.SP$9WAN8 = @WebAccountId AND SPC.SP$9TYP = 1

    /* Dynamic query condition */
    IF (@CustomerName <> N'*') BEGIN
            SET @WHERE_DYNAMIC = N' AND  ISNULL(CUST.WWMLNM, '''') + '' '' + ISNULL(CUSTCIA.WWMLNM, '''') LIKE N''%'' + @CustomerName + N''%'''
			SET @WHERE_DYNAMIC_CONSU = N' AND  ISNULL(CONTACT.PCMLNM, '''') + '' '' + ISNULL(CONSCIA.PCMLNM, '''') LIKE N''%'' + @CustomerName + N''%'''
            SET @CustomerName = LTRIM(RTRIM(@CustomerName))
    END

    IF (@AddressNumber IS NOT NULL) BEGIN
            SET @WHERE_DYNAMIC += N' AND SPC.SP$9AN8 = @AddressNumber'
			SET @WHERE_DYNAMIC_CONSU += N' AND SPC.SP$9AN8 = @AddressNumber'
    END

    IF (@AddressLine1 <> N'*') BEGIN
            SET @WHERE_DYNAMIC += N' AND AL.ALADD1 LIKE N''%'' + @AddressLine1 + N''%'''
			SET @WHERE_DYNAMIC_CONSU += N' AND CONS.PRADD1 LIKE N''%'' + @AddressLine1 + N''%'''
    END

    IF (@City <> N'*') BEGIN
            SET @WHERE_DYNAMIC += N' AND AL.ALCTY1 LIKE N''%'' + @City + N''%'''
			SET @WHERE_DYNAMIC_CONSU += N' AND CONS.PRCTY1 LIKE N''%'' + @City + N''%'''
    END

    IF (@State <> N'*') BEGIN
            SET @WHERE_DYNAMIC += N' AND AL.ALADDS = @State'
			SET @WHERE_DYNAMIC_CONSU += N' AND CONS.PRADDS = @State'
    END

    IF (@ZipCode<> N'*') BEGIN
            SET @WHERE_DYNAMIC += N' AND AL.ALADDZ LIKE N''%'' + @ZipCode + N''%'''
			SET @WHERE_DYNAMIC_CONSU += N' AND CONS.PRADDZ LIKE N''%'' + @ZipCode + N''%'''
            SET @ZipCode = LTRIM(RTRIM(@ZipCode))
    END

    IF (@Country <> N'*') BEGIN
            SET @WHERE_DYNAMIC += N' AND AL.ALCTR = @Country'
			SET @WHERE_DYNAMIC_CONSU += N' AND CONS.PRCTR = @Country'
    END

    /* Dynamic query */
	SET @SQL_DYNAMIC =
	N'	SELECT 
			@InstallationId AS InstallationId, @WebAccountId AS WebAccountId, AddressBookType, AddressNumber, ContactId, CommissionRate, 
			CustomerName, PersistentShoppingCart, AddressLine1, AddressLine2, AddressLine3, AddressLine4, City, State, ZipCode, Country, 
			[DBO].CMM_GetUserDefinedCodeFnc(''00'',''CN'', Country, @LangPref)  AS CountryDescription, CompanyName, IndividualCompanyFlag, TotalRowCount 
		FROM 
			(SELECT SalesPersonClients.*, ROW_NUMBER() OVER (ORDER BY ' + @SORT_DYNAMIC + ') AS RNUM,  COUNT(*) OVER () AS TotalRowCount FROM
					(SELECT                     
						 SPC.SP$9TYP          AS AddressBookType,  
						 SPC.SP$9AN8          AS AddressNumber,
						 SPC.SPIDLN           AS ContactId,
						 SPC.SPCMR1           AS CommissionRate,
						 CUST.WWMLNM          AS CustomerName,             
						 SPC.SP$9HTML  AS PersistentShoppingCart,
						 AL.ALADD1            AS AddressLine1,        
						 AL.ALADD2            AS AddressLine2,
						 AL.ALADD3            AS AddressLine3,
						 AL.ALADD4            AS AddressLine4,
						 AL.ALCTY1            AS City,
						 AL.ALADDS            AS State,
						 AL.ALADDZ            AS ZipCode,
						 AL.ALCTR             AS Country,
						 ISNULL(CUSTCIA.WWMLNM, '''') AS CompanyName,
						 PS$9ICF                    AS IndividualCompanyFlag
					  FROM [SCDATA].FQ67125 SPC
					  INNER JOIN [SCDATA].F0111 CUST
								   ON CUST.WWAN8 = SPC.SP$9AN8 AND 
								   CUST.WWIDLN = SPC.SPIDLN          
					  INNER JOIN [SCDATA].F0101 AB 
								   ON AB.ABAN8 = SPC.SP$9AN8         
					  CROSS APPLY [DBO].CMM_GetEffectiveAddressFnc(SPC.SP$9AN8, @CurrentJulianDate) AL        
					  INNER JOIN [SCDATA].FQ67107                /* Profile Extended Information */
								   ON PS$9AN8 = SPC.SP$9AN8
								   AND PS$9TYP = SPC.SP$9TYP  
					  LEFT OUTER JOIN [SCDATA].F0111 CUSTCIA
								   ON CUSTCIA.WWAN8 =  SPC.SP$9AN8 AND 
								   CUSTCIA.WWIDLN = 0 AND            
								   SPC.SPIDLN <> 0 AND
								   PS$9ICF = 1                                     /* Company Only */     
					  WHERE SPC.SP$9INID = @InstallationId
								   AND SPC.SP$9WAN8 = @WebAccountId
								   AND SPC.SP$9TYP = 0                      /* Customer Only */ ' +
							 @WHERE_DYNAMIC 

	/* Validate if exists consumer relation */
	IF (@ConsumerCount > 0) BEGIN
		SET @SQL_DYNAMIC = @SQL_DYNAMIC
				+'	UNION ALL
					SELECT                                   
						SPC.SP$9TYP          AS AddressBookType,  
						SPC.SP$9AN8          AS AddressNumber,
						SPC.SPIDLN           AS ContactId,
						SPC.SPCMR1           AS CommissionRate,
						CONTACT.PCMLNM          AS CustomerName,             
						SPC.SP$9HTML  AS PersistentShoppingCart,
						CONS.PRADD1            AS AddressLine1,        
						CONS.PRADD2            AS AddressLine2,
						CONS.PRADD3            AS AddressLine3,
						CONS.PRADD4           AS AddressLine4,
						CONS.PRCTY1            AS City,
						CONS.PRADDS            AS State,
						CONS.PRADDZ            AS ZipCode,
						CONS.PRCTR             AS Country,
						ISNULL(CONSCIA.PCMLNM, '''') AS CompanyName,
						PS$9ICF                    AS IndividualCompanyFlag
					FROM [SCDATA].FQ67125 SPC
					INNER JOIN [SCDATA].FQ67303 CONTACT
								ON CONTACT.PC$9AN8 = SPC.SP$9AN8 AND 
								CONTACT.PCIDLN = SPC.SPIDLN          
					INNER JOIN [SCDATA].FQ670302 CONS 
								ON CONS.PR$9AN8 = SPC.SP$9AN8         				  
					INNER JOIN [SCDATA].FQ67107                /* Profile Extended Information */
								ON PS$9AN8 = SPC.SP$9AN8
								AND PS$9TYP = SPC.SP$9TYP  
					LEFT OUTER JOIN [SCDATA].FQ67303 CONSCIA
								ON CONSCIA.PC$9AN8 =  SPC.SP$9AN8 AND 
								CONSCIA.PCIDLN = 0 AND            
								SPC.SPIDLN <> 0 AND PS$9ICF = 1 /* Company Only */     
					WHERE SPC.SP$9INID = @InstallationId
								AND SPC.SP$9WAN8 = @WebAccountId
								AND SPC.SP$9TYP = 1 /* Consumer Only */ ' +
							@WHERE_DYNAMIC_CONSU 
	END

		/* Concat paging section */
		SET @SQL_DYNAMIC = @SQL_DYNAMIC 
		+'			)  SalesPersonClients
			) SalesPersonClients2	  
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize)) '

	EXECUTE sp_executesql @SQL_DYNAMIC, N'@InstallationId NVARCHAR(3), @WebAccountId FLOAT, @CustomerName NVARCHAR(40), @AddressNumber FLOAT, @CurrentJulianDate NUMERIC,
                                                                     @AddressLine1 NVARCHAR(40), @City NVARCHAR(25), @State NVARCHAR(3), @ZipCode NVARCHAR(12), 
                                                                     @Country NVARCHAR(3), @LangPref NVARCHAR(2), @PageIndex FLOAT, @PageSize FLOAT ', @InstallationId = @InstallationId, 
                                                                     @WebAccountId = @WebAccountId, @CustomerName = @CustomerName, @AddressNumber = @AddressNumber, @CurrentJulianDate = @CurrentJulianDate, 
                                                                     @AddressLine1 = @AddressLine1, @City = @City, @State = @State, @ZipCode = @ZipCode, @Country = @Country,  
                                                                     @LangPref = @LangPref, @PageIndex = @PageIndex, @PageSize    = @PageSize

GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetSalesPersonClients'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetSalesPersonClients
	END

GO

-- #desc					Read Web Site Most Viewed Items 
-- #bl_class				Premier.Ecommerce.SalesPersonClients
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param @InstallationId	Installation Id			
-- #param @WebAccountId		Web Account Id


CREATE Procedure [DBO].ECO_GetSalesPersonClients
(
	@InstallationId				NVARCHAR(3),
	@WebAccountId				FLOAT
)
AS
	SELECT 
	    SPC.SP$9INID AS InstallationId,			
		SPC.SP$9WAN8 AS WebAccountId,				
		SPC.SP$9TYP	AS AddressBookType,	
		SPC.SP$9AN8	AS AddressNumber,
		SPC.SPIDLN	AS ContactId,
		SPC.SPCMR1	AS CommissionRate,
		CASE SPC.SP$9TYP 
			WHEN 0 THEN CUST.WWMLNM
			ELSE CONS.PCMLNM
		END AS CustomerName,	   	
		SPC.SP$9HTML AS PersistentShoppingCart,
		SPC.SPUPDJ	AS LastPickDate,
		SPC.SPMUPT	AS TimeUpd,
		SPC.SPKCOO	AS OrderCompany,
		SPC.SPDOCO	AS OrderNumber,
		SPC.SPDCTO	AS OrderType,
		SPC.SPTRDJ	AS OrderDate,
		SPC.SPOTOT	AS AmmountOrderGross,
		SPC.SPURAB	AS UserReservedNumber,			
		SPC.SPURAT	AS UserReservedAmount,	
		SPC.SPURCD	AS UserReservedCode,		
		SPC.SPURDT	AS UserReservedDate,			
		SPC.SPURRF	AS UserReservedReference,
		SPC.SPUSER	AS UserId,						
		SPC.SPPID	AS ProgramId,					
		SPC.SPUPMJ	AS DateUpdated,				
		SPC.SPUPMT	AS TimeLastUpdated,			
		SPC.SPJOBN	AS JobNumber
	FROM [SCDATA].FQ67125 SPC
	LEFT OUTER JOIN [SCDATA].F0111 CUST
		ON CUST.WWAN8 = SPC.SP$9AN8 AND 
		CUST.WWIDLN = 0 AND
		SPC.SP$9TYP = 0 --Customer Only
	LEFT OUTER JOIN		[SCDATA].FQ67303 CONS
		ON SPC.SP$9AN8 = CONS.PC$9AN8 AND 
		CONS.PCIDLN = 0 AND
		SPC.SP$9TYP = 1 --Consumer Only
	WHERE (SPC.SP$9INID = @InstallationId)
	AND SPC.SP$9WAN8 = @WebAccountId
	ORDER BY SPC.SP$9TYP, SPC.SP$9AN8

Go
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetSavedCart'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetSavedCart
	END

GO

-- #desc								Get the Saved Cart			
-- #bl_class							Premier.eCommerce.SavedCart.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param InstallationID				InstallationID 
-- #param AddressNumberID				Address Number ID
-- #param UniqueKeyID					Unique Key ID

CREATE Procedure [DBO].ECO_GetSavedCart
(
	@InstallationID		NVARCHAR(3),
	@AddressNumberID	FLOAT,
	@UniqueKeyID		FLOAT
)
AS
	SELECT	
		WA$9INID	AS InstallationID,
		WA$9WAN8	AS WebAccountID,
		WAUKID		AS UniqueKeyID,
		WA$9AN8		AS AddressNumber,	
		WAIDLN		AS ContactID,	
		WA$9TYP		AS AddressType,
		ISNULL(WWMLNM,PCMLNM)	AS MailingName,
		WAPDSC		AS Description,
		WAQTY		AS Quantity,
		WA$9SHFLG	AS ShareFlag,
		WAUPDTDATE  AS DateSaved,
		WAMUPT		AS TimeSaved,
		WAKCOO		AS OrderCompany,
		WADOCO		AS OrderNumber,
		WADCTO		AS OrderType,
		WATRDJ		AS TransactionDate,
		WA$9HTML	AS ItemList
	FROM [SCDATA].FQ679913
	LEFT OUTER JOIN [SCDATA].F0111
		ON	WA$9AN8 = WWAN8
		AND WAIDLN = WWIDLN
		AND WA$9TYP IN (0,2) --Customer Only
	LEFT OUTER JOIN [SCDATA].FQ67303 CONS
		ON WA$9AN8 = CONS.PC$9AN8 AND 
		CONS.PCIDLN = WAIDLN
		AND WA$9TYP = 1 --Consumer Only
	WHERE WA$9INID = @InstallationID			
	AND WA$9AN8  = @AddressNumberID
	AND WAUKID = @UniqueKeyID;
GO 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetSavedCartList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetSavedCartList
	END

GO

-- #desc				    Get the Saved Cart List 
-- #bl_class			    Premier.eCommerce.SavedCartList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param InstallationID	Installation ID		
-- #param ContactID		    Contact ID
-- #param AddressBookType	Web Account Address Type		
-- #param AddressNumber		Web Account AN8

CREATE Procedure [DBO].ECO_GetSavedCartList
(
	@InstallationID		NVARCHAR(3),
	@ContactID			FLOAT,
	@AddressType		FLOAT,
	@AddressNumber		FLOAT
)
AS
	SELECT
        A.WA$9WAN8  AS WebAccountID,
        A.WAUKID	AS UniqueKeyID,
        A.WAPDSC    AS Description,
        A.WA$9SHFLG AS ShareFlag,
        A.WAQTY     AS Quantity,
        A.WA$9AN8   AS AddressNumberID,
        CASE A.WA$9TYP
            WHEN 0 THEN ISNULL(CUST.WWMLNM, '')
            ELSE ISNULL(CONS.PCMLNM, '')
        END AS MailingName,
		CASE WA.WA$9TYP
			WHEN 2 THEN 'Y'
			ELSE 'N'
        END AS SalesPersonFlag,
        A.WAUPDTDATE  AS DateSaved
    FROM [SCDATA].FQ679913 A
    INNER JOIN [SCDATA].FQ67101 WA
        ON WA.WA$9WAN8 = A.WA$9WAN8
    LEFT OUTER JOIN [SCDATA].F0111 CUST
        ON CUST.WWAN8 = WA.WA$9AN8
        AND CUST.WWIDLN = WA.WAIDLN
        AND A.WA$9TYP = 0 /*Customer Only*/
    LEFT OUTER JOIN [SCDATA].FQ67303 CONS
        ON CONS.PC$9AN8 = WA.WA$9AN8
        AND CONS.PCIDLN = WA.WAIDLN
        AND A.WA$9TYP = 1 /*Consumer Only*/
	WHERE A.WA$9INID = @InstallationID
		AND A.WA$9TYP = @AddressType
		AND A.WA$9AN8 = @AddressNumber
		AND (A.WA$9SHFLG = 'Y' OR A.WAIDLN = @ContactID) 
	ORDER BY Description;
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWebAccountUserList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWebAccountUserList
	END

GO

-- #desc							Get the Web Account List by InstallationID
-- #bl_class						Premier.eCommerce.WebAccountUserList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param @InstallationList		InstallationID
--	#param @AddressBookNumber		AddressBookNumber
--	#param @FilterTerm				FilterTerm
--	#param @AddressBookType			AddressBookType
--	#param @AccountDisable			AccountDisable
--	#param @PageIndex				PageIndex		
--  #param @PageSize				PageSize

create Procedure [DBO].ECO_GetWebAccountUserList
(
	@InstallationList	NVARCHAR(100),
	@AddressBookNumber	FLOAT,
	@FilterTerm			NVARCHAR(256),
	@AddressBookType	FLOAT,
	@AccountDisable		FLOAT,
	@PageIndex			INT,
    @PageSize			INT
)
AS
	DECLARE @Rowstart int;
	DECLARE @Rowend int;

	/* Paging */
	SET @RowStart = ((@PageSize * @PageIndex) - @PageSize + 1);
	SET @RowEnd = (@PageIndex * @PageSize);
	
	;WITH CTE AS (
		SELECT 
			WUSR.WAEMAL								AS	webAccountUser, 
			WUSR.WA$9WAN8							AS	WebAccountID, 
			WUSR.WA$9USER							AS	UserID,
			SQ.US$9SQ								AS  SecretQuestion,
			SQ.US$9ANS								AS  SecretAnswer,
			WUSR.WA$9TYP							AS	AddressBookType, 
			WUSR.WA$9AN8							AS	AddressNumber,   
			WUSR.WAIDLN								AS	ContactID,
			ISNULL(CUST.WWMLNM,CONS.PCMLNM)			AS  MailingName,
			ISNULL(CUSTCOMP.WWMLNM,CONSCOMP.PCMLNM)	AS	CompanyName,  
			ISNULL(SQ.US$9SFAD, 1)					AS  AccountDisable,
			ISNULL(SQ.US$9SFAL, 1)					AS  AccountLockout,
			ISNULL(EXT.PS$9ICF,0)					AS	IndividualCompanyFlag,
			WUSR.WAACTDATE							AS	LastLoginDate,
			WUSR.WAACTTIME							AS	LastLoginTime,
			SQ.USLNGP								AS	LanguagePreference,
			ROW_NUMBER() OVER (ORDER BY WAEMAL)		AS RNUM 
		FROM [SCDATA].FQ67101 WUSR 
		INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
			ON INBU.UI$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].FQ67107 EXT /* Profile Extended Information*/
			ON EXT.PS$9AN8 = WUSR.WA$9AN8
			AND EXT.PS$9TYP = CASE @AddressBookType WHEN 2 THEN 0 ELSE WUSR.WA$9TYP END
		LEFT OUTER JOIN [SCDATA].FQ67991 SQ
			ON SQ.US$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].F0111 CUST
			ON CUST.WWAN8 = WUSR.WA$9AN8
			AND CUST.WWIDLN = WUSR.WAIDLN
			AND WUSR.WA$9TYP IN (0, 2)  /*Customer and Internal Sales Person Only*/
		LEFT OUTER JOIN [SCDATA].FQ67303 CONS
			ON CONS.PC$9AN8 = WUSR.WA$9AN8
			AND CONS.PCIDLN = WUSR.WAIDLN
			AND WUSR.WA$9TYP = 1 /*Consumer Only*/
		LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
			ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
			AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
			AND WUSR.WA$9TYP IN (0, 2)  /*Customer and Internal Sales Person Only*/
			AND EXT.PS$9ICF = 1 /* Company Only */ 
		LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
			ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
			AND CONSCOMP.PCIDLN = 0 /*Company Name*/
			AND WUSR.WA$9TYP = 1 /*Consumer Only*/
			AND EXT.PS$9ICF = 1 /* Company Only */ 
		WHERE
			(@AddressBookNumber = 0 OR WUSR.WA$9AN8 = @AddressBookNumber) /*AddressBookNumber Filter*/
			AND (@AddressBookType = 9 OR WUSR.WA$9TYP = @AddressBookType)
			AND (@AccountDisable = 2 OR SQ.US$9SFAD = @AccountDisable)
			AND (@FilterTerm = '*' OR WUSR.WAEMAL LIKE '%' + @FilterTerm + '%' OR CUSTCOMP.WWMLNM LIKE '%' + @FilterTerm + '%' OR CONSCOMP.PCMLNM LIKE '%' + @FilterTerm + '%' OR CUST.WWMLNM LIKE '%' + @FilterTerm + '%') /*FilterTerm Filter*/
			AND @InstallationList LIKE '%' + INBU.UI$9INID +'%'
	)
	SELECT
		A.WebAccountUser, 
		A.WebAccountID, 
		A.UserID,
		A.SecretQuestion,
		A.SecretAnswer,
		A.AddressBookType, 
		A.AddressNumber,   
		A.ContactID,
		A.MailingName,
		A.CompanyName,
		A.AccountDisable,
		A.AccountLockout,
		A.IndividualCompanyFlag,
		A.LastLoginDate,
		A.LastLoginTime,
		A.LanguagePreference,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A 
	WHERE ((@RowStart  = 0 OR @RowEnd = 0) OR (RNUM BETWEEN @RowStart AND @RowEnd));

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWebAcctConsContactList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWebAcctConsContactList
	END

GO

-- #desc						Get Web Account Consumer Contact List
-- #bl_class	 	 			Premier.eCommerce.WebAccountContactList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Installation			Installation
-- #param @AddressNumber		Address Number
-- #param @WebAccountStatus		Web Account Status	
-- #param @ReturnContactZero	Return Contact Zero
-- #param @Name					Contact Name
-- #param @EmailAddress			Email Address
-- #param @SortBy				Sort by
-- #param @SortDir				Sort Direction
-- #param @PageIndex			Page Index
-- #param @PageSize				Page Size

						
CREATE PROCEDURE [DBO].ECO_GetWebAcctConsContactList
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@WebAccountStatus	FLOAT,
	@ReturnContactZero	DECIMAL,
	@Name				NVARCHAR(40),
	@EmailAddress		NVARCHAR(256),
	@SortBy				NVARCHAR(20),
	@SortDir			NVARCHAR(1),
    @PageIndex			DECIMAL,
    @PageSize			DECIMAL
)
AS
SET NOCOUNT ON

DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
DECLARE @SORT_BY NVARCHAR(30)

-- Gets the Document Restrictions Parameters
DECLARE	@CtRestric	NVARCHAR(256)
DECLARE @CtINID		NVARCHAR(3)
DECLARE @CtConstant	NVARCHAR(10)

SET @CtConstant = 'CT_RESTRIC';
SET @CtINID = @InstallationID;
EXEC [DBO].CMM_GetConstantValue @CtConstant, @CtINID out, @CtRestric out

IF (@SortBy = 'EmailAddress')
	IF(@SortDir = 'A')
		SET @SORT_BY = 'CON.PCEMAL ASC'
	ELSE
		SET @SORT_BY = 'CON.PCEMAL DESC'
ELSE --By Mailing Name
	IF(@SortDir = 'D')
		SET @SORT_BY = 'CON.PCMLNM DESC'				
	ELSE
		SET @SORT_BY = 'CON.PCMLNM ASC'


	SET @SQL_DYNAMIC =' SELECT ContactID, MailingName, WebAccountID, UserName, EmailAddress, ContactTitle, AccountDisable, AdminPermission, DefaultShipTo,
			ShipToContactId, ShipToMailingName, TotalRowCount
	FROM
		(SELECT 
			CON.PCIDLN				AS ContactID,
			CON.PCMLNM				AS MailingName, 
			ISNULL(WA.WA$9WAN8, 0)	AS WebAccountID,
			ISNULL(USR.US$9USRN,'''') AS UserName,
			CON.PCEMAL				AS EmailAddress,
			CON.PCSLNM 				AS ContactTitle,
			ISNULL(USR.US$9SFAD, 1)	AS AccountDisable, /*Default is Inactive*/
			ISNULL(UP.UP$9PCD, '''')	AS AdminPermission,
			ISNULL(CE.AB$9SHAN, 0)	AS DefaultShipTo,
			CE.ABRCK7				AS ShipToContactId,
			CON.PCMLNM           	AS ShipToMailingName,
			ROW_NUMBER() OVER (ORDER BY '+ @SORT_BY +') AS RNUM,  
			COUNT(*) OVER ()		AS TotalRowCount 
		FROM
			[SCDATA].FQ67303 CON
		
			LEFT OUTER JOIN [SCDATA].FQ67101 WA
			ON WA.WA$9AN8 = CON.PC$9AN8
			AND WA.WAIDLN = CON.PCIDLN
			AND WA.WA$9TYP = 1
			AND WA.WA$9INID = @InstallationID
		
			LEFT OUTER JOIN [SCDATA].FQ67991 USR
			ON USR.US$9USER = WA.WA$9USER
		
			LEFT OUTER JOIN [SCDATA].FQ67997 UP /*Return the admin permission*/
			ON USR.US$9USER = UP.UP$9USER
			AND UP.UP$9PCD=''EADM'' /*User is an administrator*/
		
			LEFT OUTER JOIN [SCDATA].FQ67104 CE		/*Contact Extended*/
			ON CE.AB$9AN8 = CON.PC$9AN8
			AND CE.ABIDLN  = CON.PCIDLN
			AND CE.AB$9TYP = 1	
		
			LEFT OUTER JOIN [SCDATA].FQ670302 PR
			ON PR.PR$9AN8= CE.AB$9SHAN	'	
			
			IF (@CtRestric = '1') 
				SET @SQL_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 SOR
									ON SOR.DRKY = CON.PCTYC
									AND SOR.DR$9INID = @CtINID
									AND SOR.DR$9CNST = @CtConstant '

			SET @SQL_DYNAMIC +=' WHERE
				CON.PC$9AN8 = @AddressNumber '
			
			IF(@ReturnContactZero = 1)/* 1 = No*/
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'AND CON.PCIDLN > 0 ';

			IF (@WebAccountStatus = 3)	/* 3 = Without web account */
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
				AND WA.WA$9WAN8 IS NULL '

			IF (@WebAccountStatus = 0 OR @WebAccountStatus = 1) /* 0 = Inactive, 1 = Active */
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
				AND (USR.US$9SFAD = @WebAccountStatus OR (CON.PCIDLN = 0 AND @ReturnContactZero = 0)) ';/*0 = Yes*/

			IF (@Name <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
				AND CON.PCMLNM LIKE ''%'' + @Name + ''%'' '

			IF (@EmailAddress <> '*')
				SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
				AND CON.PCEMAL LIKE ''%'' + @EmailAddress + ''%'' '

		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		) AS CONTACTS
		WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))';


EXECUTE sp_executesql @SQL_DYNAMIC, N'	
@InstallationID		NVARCHAR(3),
@AddressNumber		FLOAT,
@WebAccountStatus	FLOAT,
@ReturnContactZero	DECIMAL,
@Name				NVARCHAR(40),
@EmailAddress		NVARCHAR(256),
@CtINID				NVARCHAR(3),
@CtConstant			NVARCHAR(10),
@PageIndex			DECIMAL,
@PageSize			DECIMAL',
@InstallationID		=@InstallationID,	
@AddressNumber		=@AddressNumber,
@WebAccountStatus	=@WebAccountStatus,
@ReturnContactZero	=@ReturnContactZero,
@Name				=@Name,	
@EmailAddress		=@EmailAddress,	
@CtINID				=@CtINID,
@CtConstant			=@CtConstant,	
@PageIndex			=@PageIndex,
@PageSize			=@PageSize

SET NOCOUNT OFF

GO


IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWebAcctCustContactList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWebAcctCustContactList
	END

GO

-- #desc						Get Web Account Customer Contact List
-- #bl_class	 	 			Premier.eCommerce.WebAccountContactList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Installation			Installation
-- #param @AddressNumber		Address Number
-- #param @WebAccountStatus		Web Account Status
-- #param @ReturnContactZero	Return Contact Zero
-- #param @Name					Contact Name
-- #param @EmailAddress			Email Address
-- #param @SortBy				Sort by
-- #param @SortDir				Sort Direccion
-- #param @PageIndex			Page Index
-- #param @PageSize				Page Size

CREATE Procedure [DBO].ECO_GetWebAcctCustContactList
(
	@InstallationID		NVARCHAR(3),
	@AddressNumber		FLOAT,
	@WebAccountStatus	FLOAT,
	@ReturnContactZero	DECIMAL,
    @Name				NVARCHAR(40),
	@EmailAddress		NVARCHAR(256),
	@SortBy				NVARCHAR(20),
	@SortDir			NVARCHAR(1),
    @PageIndex			DECIMAL,
    @PageSize			DECIMAL
)
AS
SET NOCOUNT ON

	DECLARE @SQL_DYNAMIC NVARCHAR(MAX)
	DECLARE @INNER_DYNAMIC NVARCHAR(500) = N' ';
	DECLARE @SORT_BY NVARCHAR(30)

	-- Gets the Document Restrictions Parameters
	DECLARE	@CtRestric	NVARCHAR(256)
	DECLARE @CtINID		NVARCHAR(3)

	SET @CtINID = @InstallationID;
	EXEC [DBO].CMM_GetConstantValue 'CT_RESTRIC', @CtINID out, @CtRestric out

	IF (@SortBy = 'EmailAddress')
		IF(@SortDir = 'A')
			SET @SORT_BY = 'CTE1.EmailAddress ASC'
		ELSE
			SET @SORT_BY = 'CTE1.EmailAddress DESC'
	ELSE --By Mailing Name
		IF(@SortDir = 'D')
			SET @SORT_BY = 'CTE1.MailingName DESC'
		ELSE
			SET @SORT_BY = 'CTE1.MailingName ASC'

	IF (@CtRestric = '1') BEGIN
		SET @INNER_DYNAMIC += N' INNER JOIN [SCDATA].FQ67008 DR
				ON DR.DRKY = CON.WWTYC
				AND DR.DR$9INID = @CtINID
				AND DR.DR$9CNST = ''CT_RESTRIC'' ';
	END

	SET @SQL_DYNAMIC =' 
	WITH CTE1 AS (
		SELECT
			CON.WWIDLN				AS ContactID,
			CON.WWMLNM				AS MailingName,
			ISNULL(WA.WA$9WAN8, 0)	AS WebAccountID, 
			ISNULL(USR.US$9USRN,'''') AS UserName,
			EmailAddress = (SELECT TOP 1 emails.EAEMAL
						FROM [SCDATA].F01151 emails
						WHERE  emails.EAETP = ''E''
						AND emails.EAAN8 = CON.WWAN8
						AND emails.EAIDLN = CON.WWIDLN
						ORDER BY emails.EAEHIER DESC, emails.EARCK7 DESC),
			CON.WWATTL 				AS ContactTitle,
			ISNULL(USR.US$9SFAD, 1)	AS AccountDisable,		/* Default is Inactive*/
			ISNULL(UP.UP$9PCD,'''')	AS AdminPermission,
			ISNULL(CE.AB$9SHAN, 0)	AS DefaultShipTo,
			CE.ABRCK7				AS ShipToContactId,
			SHIP.WWMLNM             AS ShipToMailingName
		FROM
			[SCDATA].F0111 CON						/*CustomerContact*/
			' + @INNER_DYNAMIC + N'
			LEFT OUTER JOIN [SCDATA].FQ67101 WA		/*WebAccount*/
				ON WA.WA$9AN8 = CON.WWAN8	
				AND  WA.WA$9TYP IN (0,2)
				AND WA.WA$9INID = @InstallationID
				AND WA.WAIDLN  = CON.WWIDLN
			LEFT OUTER JOIN [SCDATA].FQ67991 USR		/*User*/
				ON USR.US$9USER = WA.WA$9USER 

			LEFT OUTER JOIN [SCDATA].FQ67997 UP /*Return the admin permission*/
				ON UP.UP$9USER = USR.US$9USER
				AND UP.UP$9PCD=''EADM'' /*User is an administrator*/

			LEFT OUTER JOIN [SCDATA].FQ67104 CE		/*Contact Extended*/
				ON CE.AB$9AN8 = @AddressNumber
				AND CE.ABIDLN  = CON.WWIDLN
				AND CE.AB$9TYP = 0

			LEFT OUTER JOIN  [SCDATA].F0111 SHIP	/*Join to get Shipto information*/
				ON  SHIP.WWAN8 = CE.AB$9SHAN
				AND SHIP.WWIDLN = CE.ABRCK7
		WHERE
			CON.WWAN8 = @AddressNumber ';

	IF(@ReturnContactZero = 1)/* 1 = No*/
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'AND CON.WWIDLN > 0 ';

	IF (@WebAccountStatus = 3)	/* 3 = Without web account */
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		AND WA.WA$9WAN8 IS NULL ';

	IF (@WebAccountStatus = 0 OR @WebAccountStatus = 1)/* 0 = Inactive, 1 = Active */
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		AND (USR.US$9SFAD = @WebAccountStatus OR (CON.WWIDLN = 0 AND @ReturnContactZero = 0)) ';/*0 = Yes*/
	
	IF (@Name <> '*')
		SET @SQL_DYNAMIC = @SQL_DYNAMIC + N'
		AND CON.WWMLNM LIKE ''%'' + @Name + ''%'' ';

	SET @SQL_DYNAMIC += N'
	),
	PAGING AS(
		SELECT CTE1.*, ROW_NUMBER() OVER (ORDER BY '+ @SORT_BY +') AS RNUM, COUNT(*) OVER () AS TotalRowCount
		FROM CTE1 ';

	IF (@EmailAddress <> '*')
		SET @SQL_DYNAMIC += N'
		WHERE CTE1.EmailAddress LIKE ''%'' + @EmailAddress + ''%'' ';

	SET @SQL_DYNAMIC += N'
	)SELECT 
		ContactID, MailingName, WebAccountID, UserName, EmailAddress, ContactTitle, AccountDisable, 
		AdminPermission, DefaultShipTo, ShipToContactId, ShipToMailingName, TotalRowCount
	FROM PAGING
	WHERE ((@PageIndex = 0 OR @PageSize = 0) OR (RNUM BETWEEN (@PageSize * @PageIndex) - @PageSize + 1 AND @PageIndex * @PageSize))';

EXECUTE sp_executesql @SQL_DYNAMIC, N'
@InstallationID		NVARCHAR(3),
@AddressNumber		FLOAT,
@WebAccountStatus	FLOAT,
@ReturnContactZero	DECIMAL,
@Name				NVARCHAR(40),
@EmailAddress		NVARCHAR(256),
@CtINID				NVARCHAR(3),
@PageIndex			DECIMAL,
@PageSize			DECIMAL',
@InstallationID		=@InstallationID,
@AddressNumber		=@AddressNumber,
@WebAccountStatus	=@WebAccountStatus,
@ReturnContactZero	=@ReturnContactZero,
@Name				=@Name,
@EmailAddress		=@EmailAddress,
@CtINID				=@CtINID,
@PageIndex			=@PageIndex,
@PageSize			=@PageSize

SET NOCOUNT OFF

GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWebAcctUserInfoByID'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWebAcctUserInfoByID
	END

GO

-- #desc						Get Web Account User Information By ID
-- #bl_class					Premier.eCommerce.WebAccountUserInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @WebAccountId			WebAccountId

CREATE Procedure [DBO].ECO_GetWebAcctUserInfoByID
	(
		@InstallationID		NVARCHAR(3),
		@WebAccountId		FLOAT
	)
AS
	
DECLARE @AddressBookType FLOAT

SET @AddressBookType = (SELECT TOP 1 WA$9TYP FROM [SCDATA].FQ67101 WHERE WA$9INID = @InstallationID AND WA$9WAN8 = @WebAccountId)

IF (@AddressBookType = 1)  /*Validation if account is Consumer*/
BEGIN
	SELECT
			WUSR.WAEMAL					AS	webAccountUser,
			WUSR.WA$9WAN8				AS	WebAccountID,
			WUSR.WA$9USER				AS	UserID,
			SQ.US$9SQ					AS  SecretQuestion,
		    SQ.US$9ANS					AS  SecretAnswer,
			@AddressBookType			AS	AddressBookType,
			WUSR.WA$9AN8				AS	AddressNumber,
			WUSR.WAIDLN					AS	ContactID,  
			CONT.PCMLNM					AS	MailingName, /*CONSUMER [SCDATA].FQ67303 1*/
			ISNULL(CONSCOMP.PCMLNM, '')	AS	CompanyName, 
			ISNULL(SQ.US$9SFAD, 1)		AS  AccountDisable,
			ISNULL(SQ.US$9SFAL, 1)		AS  AccountLockout,
			ISNULL(EXT.PS$9ICF,0)		AS	IndividualCompanyFlag,
			WAACTDATE					AS	LastLoginDate,
			WAACTTIME					AS	LastLoginTime,
			SQ.USLNGP					AS	LanguagePreference
		FROM
			[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
				ON WUSR.WA$9USER = INBU.UI$9USER
			LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
				ON WUSR.WA$9TYP = EXT.PS$9TYP
				AND WUSR.WA$9AN8 = EXT.PS$9AN8
			LEFT OUTER JOIN [SCDATA].FQ67991 SQ
				ON SQ.US$9USER = WUSR.WA$9USER
			LEFT OUTER JOIN [SCDATA].FQ67303 CONT
				ON WUSR.WA$9AN8 = CONT.PC$9AN8 AND 
				WUSR.WAIDLN = CONT.PCIDLN
			LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
				ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
				AND CONSCOMP.PCIDLN = 0 /*Company Name*/
		WHERE
			INBU.UI$9INID = @InstallationID
			AND WUSR.WA$9WAN8 = @WebAccountId	
END		
ELSE      /*Validation if account is Customer or Internal Sales Person*/
BEGIN
	SELECT
		WUSR.WAEMAL					AS	webAccountUser,
		WUSR.WA$9WAN8				AS	WebAccountID,
		WUSR.WA$9USER				AS	UserID,
		SQ.US$9SQ					AS  SecretQuestion,
		SQ.US$9ANS					AS  SecretAnswer,
		@AddressBookType			AS	AddressBookType,
		WUSR.WA$9AN8				AS	AddressNumber,
		WUSR.WAIDLN					AS	ContactID,  
		CONT.WWMLNM					AS	MailingName,		/*CUSTOMER F0111 0*/
		ISNULL(CUSTCOMP.WWMLNM, '')	AS	CompanyName,
		ISNULL(SQ.US$9SFAD, 1)		AS  AccountDisable,
		ISNULL(SQ.US$9SFAL, 1)		AS  AccountLockout,
		ISNULL(EXT.PS$9ICF,0)		AS	IndividualCompanyFlag,
		WAACTDATE					AS	LastLoginDate,
		WAACTTIME					AS	LastLoginTime,
		SQ.USLNGP					AS	LanguagePreference
	FROM
			[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
			ON WUSR.WA$9USER = INBU.UI$9USER	
			LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
				ON 0 = EXT.PS$9TYP    /*Compare with 0 because join is with customers table in JDEdwards*/
				AND WUSR.WA$9AN8 = EXT.PS$9AN8
			LEFT OUTER JOIN [SCDATA].FQ67991 SQ
				ON SQ.US$9USER = WUSR.WA$9USER
			LEFT OUTER JOIN [SCDATA].F0111 CONT
				ON CONT.WWAN8 = WUSR.WA$9AN8 AND 
				CONT.WWIDLN = WUSR.WAIDLN	
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
				ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
				AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
	WHERE
		INBU.UI$9INID = @InstallationID
		AND WUSR.WA$9WAN8 = @WebAccountId
END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWebAcctUserInfoByName'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWebAcctUserInfoByName
	END

GO

-- #desc						Get Web Account User Information By Name
-- #bl_class					Premier.eCommerce.WebAccountUserInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @InstallationID		InstallationID
-- #param @UserID				WebUserName

CREATE Procedure [DBO].ECO_GetWebAcctUserInfoByName
(
	@InstallationID		NCHAR(3),
	@WebUserName		NVARCHAR(256)
)
AS
DECLARE @AddressBookType FLOAT

SET @AddressBookType = (select TOP 1 WA$9TYP from [SCDATA].FQ67101 where wa$9inid = @InstallationID and WAEMAL = @WebUserName)

IF (@AddressBookType = 1) /*Validation if account is Consumer*/
BEGIN  
	SELECT
		WUSR.WAEMAL					AS	webAccountUser,
		WUSR.WA$9WAN8				AS	WebAccountID,
		WUSR.WA$9USER				AS	UserID,
		SQ.US$9SQ					AS  SecretQuestion,
		SQ.US$9ANS					AS  SecretAnswer,
		@AddressBookType			AS	AddressBookType,
		WUSR.WA$9AN8				AS	AddressNumber,
		WUSR.WAIDLN					AS	ContactID,  
		CONT.PCMLNM					AS	MailingName,/*CONSUMER [SCDATA].FQ67303 1*/
		ISNULL(CONSCOMP.PCMLNM, '')	AS	CompanyName, 
		ISNULL(SQ.US$9SFAD, 1)		AS  AccountDisable,
		ISNULL(SQ.US$9SFAL, 1)		AS  AccountLockout,
		ISNULL(EXT.PS$9ICF,0)		AS	IndividualCompanyFlag,
		WAACTDATE					AS	LastLoginDate,
		WAACTTIME					AS	LastLoginTime,
		SQ.USLNGP					AS	LanguagePreference

	FROM
		[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
			ON WUSR.WA$9USER = INBU.UI$9USER
		LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
			ON WUSR.WA$9TYP = EXT.PS$9TYP
			AND WUSR.WA$9AN8 = EXT.PS$9AN8
		LEFT OUTER JOIN [SCDATA].FQ67991 SQ
			ON SQ.US$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].FQ67303 CONT
			ON WUSR.WA$9AN8 = CONT.PC$9AN8 AND 
			WUSR.WAIDLN = CONT.PCIDLN
		LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
			ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
			AND CONSCOMP.PCIDLN = 0 /*Company Name*/
	WHERE
		INBU.UI$9INID = @InstallationID
		AND WUSR.WAEMAL = @WebUserName		
END

ELSE  /*Validation if account is Customer or Internal Sales Person*/
BEGIN
SELECT
		WUSR.WAEMAL					AS	webAccountUser,
		WUSR.WA$9WAN8				AS	WebAccountID,
		WUSR.WA$9USER				AS	UserID,
		SQ.US$9SQ					AS  SecretQuestion,
		SQ.US$9ANS					AS  SecretAnswer,
		@AddressBookType			AS	AddressBookType,
		WUSR.WA$9AN8				AS	AddressNumber,
		WUSR.WAIDLN					AS	ContactID,  
		CONT.WWMLNM					AS	MailingName,	/*CUSTOMER F0111 0*/
		ISNULL(CUSTCOMP.WWMLNM, '')	AS	CompanyName,
		ISNULL(SQ.US$9SFAD, 1)		AS  AccountDisable,
		ISNULL(SQ.US$9SFAL, 1)		AS  AccountLockout,
		ISNULL(EXT.PS$9ICF,0)		AS	IndividualCompanyFlag,
		WAACTDATE					AS	LastLoginDate,
		WAACTTIME					AS	LastLoginTime,
		SQ.USLNGP					AS	LanguagePreference
	FROM
		[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
			ON WUSR.WA$9USER = INBU.UI$9USER
		LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
			ON 0 = EXT.PS$9TYP  /*Compare with 0 because join is with customers table in JDEdwards*/
			AND WUSR.WA$9AN8 = EXT.PS$9AN8
		LEFT OUTER JOIN [SCDATA].FQ67991 SQ
			ON SQ.US$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].F0111 CONT
			ON CONT.WWAN8 = WUSR.WA$9AN8 AND 
			CONT.WWIDLN = WUSR.WAIDLN		
		LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
			ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
			AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
	WHERE
		INBU.UI$9INID = @InstallationID
		AND WUSR.WAEMAL = @WebUserName	
	
END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWebUserAdditionalInfo'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWebUserAdditionalInfo
	END

GO

-- #desc						Get a Web Account Additional Info
-- #bl_class	 	 			Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @Installation			Installation
-- #param @ObjectType			Object Type
-- #param @WebAccountID			WebAccountID

CREATE Procedure [DBO].ECO_GetWebUserAdditionalInfo
(
	@InstallationID   NVARCHAR(3),
	@ObjectType		  FLOAT,
	@WebAccountID	  FLOAT
)
AS

SELECT 
	WI$9INID	AS InstallationId,
	WI$9UKID	AS UniquekeyID,
	WI$9OBJTY	AS ObjectType,
	WI$9WAN8	AS WebAccountID,
	WI$9HTML	AS XmlBody,
	WIGUID		AS SharedReference,
	WIURAB		AS UserReservedNumber,
	WIURAT		AS UserReservedAmount,
	WIURCD		AS UserReservedCode,
	WIURDT		AS UserReservedDate,
	WIURRF		AS UserReservedReference
FROM
	[SCDATA].FQ67120 
WHERE
	WI$9INID = @InstallationID 
	AND	WI$9OBJTY = @ObjectType
	AND WI$9WAN8 = @WebAccountID	
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWishHeaderListByAddNo'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWishHeaderListByAddNo
	END

GO

-- #bl_class				Premier.eCommerce.WishListHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param AddressType		AddressType 0 = CUSTOMER, 1 = CONSUMER
-- #param InstallationID	Installation ID

CREATE Procedure [DBO].ECO_GetWishHeaderListByAddNo
(
	@AddressNumber  FLOAT,
	@AddressType	FLOAT,
	@InstallationID	NVARCHAR(3)
)
AS

SELECT
	B.WH$9WAN8 AS WebAccountID,
	B.WHSEQ    AS	WishListID,
	B.WHDESC   AS	WishListDesc
FROM 
	[SCDATA].FQ67101 A -- Web accounts
	INNER JOIN
	[SCDATA].FQ674214 B-- Wish List Header
	ON A.WA$9WAN8 = B.WH$9WAN8
WHERE 
	A.WA$9AN8 = @AddressNumber
	AND 
	A.WA$9TYP = @AddressType
	AND
	A.WA$9INID = @InstallationID
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWishListHeaderList'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWishListHeaderList
	END

GO

-- #bl_class					Premier.eCommerce.WishListHeaderList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param @WebAccountID			WebAccount ID

CREATE Procedure [DBO].ECO_GetWishListHeaderList
(
	@WebAccountID FLOAT
)
AS

SELECT 
	WH$9WAN8 AS WebAccountID,
	WHSEQ    AS	WishListID,
	WHDESC   AS	wishListDesc
FROM 
	[SCDATA].FQ674214	-- Wish List Header
WHERE 
	WH$9WAN8 = @WebAccountID
ORDER BY WHSEQ DESC
GO


  IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_GetWishListLines'))
	BEGIN
		DROP  Procedure  [DBO].ECO_GetWishListLines
	END

GO

-- #bl_class						Premier.eCommerce.WishListHeader.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param @InstallationID			InstallationID 
--	#param @WebAccountID			WebAccount ID
--	#param @WishListID				WishListID ID

CREATE Procedure [DBO].ECO_GetWishListLines
(
	@InstallationID	NVARCHAR(3),
	@WebAccountID	FLOAT,
	@WishListID		FLOAT
)
AS
	
	-- Gets Cust Cross Document Restrictions
	DECLARE @CustCrossRefType     NVARCHAR(256)
	DECLARE @CustCrossINID        NVARCHAR(3)
	SET @CustCrossINID = @InstallationID
    EXEC [DBO].CMM_GetConstantValue 'CUST_CROSS', @CustCrossINID out, @CustCrossRefType out
    
  DECLARE @CurrentJulianDate NUMERIC
	DECLARE @currentDate DATETIME = GETDATE()
	SELECT @CurrentJulianDate = CONVERT( NUMERIC , CONVERT(NVARCHAR, DATEPART(yy, @currentDate)-1900) + RIGHT('000' + CONVERT(NVARCHAR,DATEPART(dy, @currentDate)),3))
	
SELECT 
	WD.WD$9WAN8 AS WebAccountID,
	WD.WDSEQ	AS WishListID,
	WD.WDITM	AS ItemNumber,
	WD.WDUORG	AS Quantity,
	WD.WDUOM	AS UnitOfMeasure,
	IM.IMLITM	AS LongItemNumber,
	IM.IMAITM	AS AuxItemNumber,
	ISNULL(S.IVCITM,'')		AS RefProductNumber,
	IM.IMSTKT	AS StockingType
FROM 
	[SCDATA].FQ674215	 WD						--WISH LIST DETAIL
	INNER JOIN [SCDATA].F4101 IM				--ITEM MASTER
		ON IM.IMITM = WD.WDITM 
	INNER JOIN [SCDATA].FQ67101 WA		--Web Accounts table
		ON WA.WA$9WAN8 = WD.WD$9WAN8
	LEFT OUTER JOIN [SCDATA].F4104 S			--CUSTOMER /ITEM Cross Ref Table
		ON S.IVAN8 = WA.WA$9AN8
		AND S.IVITM = WD.WDITM 
		AND S.IVXRT = @CustCrossRefType
		AND @CurrentJulianDate  BETWEEN S.IVEFTJ AND S.IVEXDJ  
WHERE 
	WD.WD$9WAN8  = @WebAccountID
	AND WD.WDSEQ = @WishListID
ORDER BY WDITM DESC
GO


 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_UpdPersistentShoppingCart'))
	BEGIN
		DROP  Procedure  [DBO].ECO_UpdPersistentShoppingCart
	END

GO

-- #desc				Save the persist shopping cart
-- #bl_class	 	 	Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].ECO_UpdPersistentShoppingCart
	(
		@WebAccountId			FLOAT,
		@InstallationID			NVARCHAR(3),
		@Quantity				FLOAT,
		@ItemsList				NTEXT,
		@UserReservedNumber		FLOAT,
		@UserReservedAmount		FLOAT,
		@UserReservedCode		NVARCHAR(2),
		@UserReservedDate		NUMERIC,
		@UserReservedReference	NVARCHAR(15),
		@UserID					NVARCHAR(10),
		@ProgramID				NVARCHAR(10),
		@DateUpdated			NUMERIC,
		@TimeLastUpdated		NUMERIC,
		@WorkStationID			NVARCHAR(10)		
	)
AS

	IF EXISTS (SELECT * FROM [SCDATA].FQ6742WF WHERE @WebAccountId = SH$9WAN8 AND @InstallationID = SH$9INID)
	UPDATE [SCDATA].FQ6742WF
		SET
			SHQTY = @Quantity,
			SH$9HTML = @ItemsList,
			SHURAB = @UserReservedNumber,
			SHURAT = @UserReservedAmount,
			SHURCD = @UserReservedCode,
			SHURDT = @UserReservedDate,
			SHURRF = @UserReservedReference,
			SHUSER = @UserID,
			SHPID =  @ProgramID,
			SHUPMJ = @DateUpdated,
			SHUPMT = @TimeLastUpdated,
			SHJOBN = @WorkStationID			
		WHERE @WebAccountId = SH$9WAN8 AND @InstallationID = SH$9INID
		ELSE
		INSERT INTO 
		[SCDATA].FQ6742WF
		(
			SH$9WAN8,
			SH$9INID,
			SHQTY,			
			SH$9HTML,
			SHURAB,
			SHURAT,
			SHURCD,
			SHURDT,
			SHURRF,
			SHUSER,
			SHPID,
			SHUPMJ,
			SHUPMT,
			SHJOBN			
		)
		values
		(
			@WebAccountID,
			@InstallationID,
			@Quantity,			
			@ItemsList,
			@UserReservedNumber,
			@UserReservedAmount,
			@UserReservedCode,
			@UserReservedDate,
			@UserReservedReference,
			@UserID,
			@ProgramID,
			@DateUpdated,
			@TimeLastUpdated,
			@WorkStationID	
		)
GO 
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_UpdSalePClientShopCart'))
	BEGIN
		DROP  Procedure  [DBO].ECO_UpdSalePClientShopCart
	END

GO

-- #desc				Save the Persist Shopping Cart of the Sales Person Client
-- #bl_class	 	 	Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE Procedure [DBO].ECO_UpdSalePClientShopCart
(
	@WebAccountId		FLOAT,
	@InstallationID		NVARCHAR(3),
	@ItemsList			NTEXT,
	@SalesPersonClient  FLOAT,
	@UserID				NVARCHAR(10),
	@ProgramID			NVARCHAR(10),
	@DateUpdated		NUMERIC,	
	@TimeLastUpdated	NUMERIC,
	@WorkStationID		NVARCHAR(10)
)
AS
	UPDATE [SCDATA].FQ67125
		SET	
			SP$9HTML = @ItemsList,
			SPUSER = @UserID,
			SPPID = @ProgramID,
			SPUPMJ = @DateUpdated,
			SPUPMT = @TimeLastUpdated,
			SPJOBN = @WorkStationID
		WHERE @WebAccountId = SP$9WAN8 
			AND @InstallationID = SP$9INID 
			AND @SalesPersonClient = SP$9AN8 		
GO  
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_UpdSalesPersonClient'))
	BEGIN
		DROP  Procedure  [DBO].ECO_UpdSalesPersonClient
	END

GO

-- #desc							Updated Sales Person Client
-- #bl_class						Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param @InstallationId			InstallationId				
-- #param @WebAccountId				WebAccountId	
-- #param @AddressBookType			AddressBookType		
-- #param @AddressNumber			AddressNumber
-- #param @ContactId				ContactId
-- #param @CommissionRate			CommissionRate
-- #param @PersistentShoppingCart	PersistentShoppingCart
-- #param @LastPickDate				LastPickDate
-- #param @TimeLasUpdated			TimeLasUpdated
-- #param @OrderCompany				OrderCompany
-- #param @OrderNumber				OrderNumber
-- #param @OrderType				OrderType
-- #param @OrderDate				OrderDate
-- #param @AmmountOrderGross		AmmountOrderGross
-- #param @UserReservedNumber		UserReservedNumber			
-- #param @UserReservedAmount		UserReservedAmount	
-- #param @UserReservedCode			UserReservedCode	
-- #param @UserReservedDate			UserReservedDate
-- #param @UserReservedReference	UserReservedReference		
-- #param @UserId					UserId					
-- #param @ProgramId				ProgramId					
-- #param @DateUpdated				DateUpdated				
-- #param @TimeLastUpdated			TimeLastUpdated			
-- #param @JobNumber				JobNumber

CREATE Procedure [DBO].ECO_UpdSalesPersonClient
(
	@InstallationId				NVARCHAR(3),
	@WebAccountId				FLOAT,
	@AddressBookType			FLOAT,
	@AddressNumber				FLOAT,
	@ContactId					FLOAT,
	@CommissionRate				FLOAT,
	@PersistentShoppingCart	 NVARCHAR(MAX),
	@LastPickDate				NUMERIC,	
	@TimeUpd					NUMERIC,	
	@OrderCompany				NVARCHAR(5),
	@OrderNumber				FLOAT,
	@OrderType					NVARCHAR(3),
	@OrderDate					NUMERIC,
	@AmmountOrderGross			FLOAT,
	@UserReservedNumber			FLOAT,
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserId						NVARCHAR(10),
	@ProgramId					NVARCHAR(10),
	@DateUpdated				NUMERIC,	
	@TimeLastUpdated			NUMERIC,
	@JobNumber					NVARCHAR(10)
)
AS
	SET NOCOUNT ON
	
	UPDATE 
		[SCDATA].FQ67125
	SET		
		SPCMR1		= @CommissionRate,	
		SP$9HTML	= @PersistentShoppingCart,
		SPUPDJ		= @LastPickDate,
		SPMUPT		= @TimeUpd,
		SPKCOO		= @OrderCompany,
		SPDOCO		= @OrderNumber,	
		SPDCTO		= @OrderType,
		SPTRDJ		= @OrderDate,
		SPOTOT		= @AmmountOrderGross,
		SPURAB		= @UserReservedNumber,
		SPURAT		= @UserReservedAmount,
		SPURCD		= @UserReservedCode,
		SPURDT		= @UserReservedDate,
		SPURRF		= @UserReservedReference,
		SPUSER		= @UserId,
		SPPID		= @ProgramId,
		SPUPMJ		= @DateUpdated,
		SPUPMT		= @TimeLastUpdated,
		SPJOBN		= @JobNumber
	WHERE 
		SP$9INID = @InstallationId
		AND SP$9WAN8 = @WebAccountId
		AND SP$9AN8 = @AddressNumber 
		AND SPIDLN = @ContactId
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_UpdSavedCart'))
	BEGIN
		DROP  Procedure  [DBO].ECO_UpdSavedCart
	END

GO

-- #desc							New Saved Cart			
-- #bl_class						Premier.eCommerce.SavedCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			Installation ID 
-- #param WebAccountID				Web Account ID
-- #param AddressNumber				Address Number
-- #param ContactID					ContactID
-- #param AddressType				Address Type
-- #param ShareFlag					Share Flag
-- #param Description				Description
-- #param Quantity					Quantity
-- #param ItemsList					Items List
-- #param DateSaved					Date Saved
-- #param TimeSaved					Time Saved
-- #param OrderCompany				Order Company
-- #param OrderNumber				Order Number
-- #param OrderType					Order Type
-- #param TransactionDate			TransactionDate
-- #param UserReservedNumber		User Reserved Number 
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param DateUpdated				Date Updated
-- #param TimeLastUpdated			Time Last Updated
-- #param WorkStationID				WorkStation ID

CREATE procedure [DBO].ECO_UpdSavedCart

(
	@InstallationID				NVARCHAR(3),
	@WebAccountID				FLOAT,	
	@SavedCartType				NVARCHAR(2),
	@AddressNumber				FLOAT,	
	@ContactID					FLOAT,	
	@AddressType				FLOAT,	
	@ShareFlag					NVARCHAR(1),
	@Description				NVARCHAR(60),
	@Quantity					FLOAT,	
	@ItemsList					nText,
	@DateSaved						NUMERIC,
	@TimeSaved					NUMERIC,	
	@OrderCompany				NVARCHAR(5),
	@OrderNumber				FLOAT,	
	@OrderType					NVARCHAR(2),
	@TransactionDate			NUMERIC,		
	@UserReservedNumber			FLOAT,
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@DateUpdated				NUMERIC,
	@TimeLastUpdated			NUMERIC,
	@WorkStationID				NVARCHAR(10)
)
AS
   DECLARE @UniqueKeyID     FLOAT;
		
	BEGIN
	
	SET @UniqueKeyID = (SELECT ISNULL(MAX(WAUKID), 0) + 1 FROM [SCDATA].FQ679913
						WHERE WA$9INID = @InstallationID)

	INSERT INTO [SCDATA].FQ679913
	(
		WA$9WAN8,
		WA$9INID,		
		WAUKID,
		WA$9TYPECART,
		WA$9AN8,
		WAIDLN,
		WA$9TYP,
		WA$9SHFLG,
		WAPDSC,
		WAQTY,			
		WA$9HTML,			
		WAUPDTDATE,
		WAMUPT,			
		WAKCOO,
		WADOCO,
		WADCTO,
		WATRDJ,	
		WAURAB,
		WAURAT,
		WAURCD,
		WAURDT,
		WAURRF,
		WAUSER,
		WAPID,			
		WAUPMJ,
		WATDAY,			
		WAJOBN
	)
	VALUES
	(
		@WebAccountID,
		@InstallationID,
		@UniqueKeyID,
		@SavedCartType,
		@AddressNumber,
		@ContactID,
		@AddressType,
		@ShareFlag,
		@Description,
		@Quantity,	
		@ItemsList,
		@DateSaved,
		@TimeSaved,
		@OrderCompany,
		@OrderNumber,
		@OrderType,
		@TransactionDate,
		@UserReservedNumber,
		@UserReservedAmount,
		@UserReservedCode,
		@UserReservedDate,
		@UserReservedReference,			
		@UserID,
		@ProgramID,
		@DateUpdated,
		@TimeLastUpdated,
		@WorkStationID
	);
	END
GO
 IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND id = OBJECT_ID(N'[DBO].ECO_UpdWebUserAdditionalInfo'))
	BEGIN
		DROP  Procedure  [DBO].ECO_UpdWebUserAdditionalInfo
	END

GO

-- #desc					Update Web Account Additional Info
-- #bl_class				Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param @InstallationID	Installation ID.
-- #param @ObjectType		Object Type
-- #param @WebAccountID		Web Account ID	
-- #param @XmlBody			Xml Body
-- #param @DateUpdated		Date Updated
-- #param @TimeLastUpdated	Time Last Update

CREATE Procedure [DBO].ECO_UpdWebUserAdditionalInfo
	@InstallationID				NVARCHAR(3),
	@ObjectType					FLOAT,
	@WebAccountID				FLOAT,
	@XmlBody				 NVARCHAR(MAX),
	@UserReservedNumber			FLOAT,
	@UserReservedAmount			FLOAT,
	@UserReservedCode			NVARCHAR(2),
	@UserReservedDate			NUMERIC,
	@UserReservedReference		NVARCHAR(15),
	@UserID						NVARCHAR(10),
	@ProgramID					NVARCHAR(10),
	@JobNumber					NVARCHAR(10),
	@TimeLastUpdated			NUMERIC,
	@DateUpdated				NUMERIC

AS
	SET NOCOUNT ON
	
	UPDATE 
		[SCDATA].FQ67120
	SET  
		WI$9HTML	=	@XmlBody,
	    WIURAB		=	@UserReservedNumber,
		WIURAT		=	@UserReservedAmount,
		WIURCD		=	@UserReservedCode,
		WIURDT		=	@UserReservedDate,
		WIURRF		=	@UserReservedReference,
		WIUSER		=	@UserID,
		WIPID		=	@ProgramID,
		WIJOBN		=	@JobNumber,
		WIUPMJ		=	@DateUpdated,
		WIUPMT		=	@TimeLastUpdated
	WHERE 
		WI$9INID = @InstallationID
		AND	WI$9OBJTY = @ObjectType
		AND	WI$9WAN8 = @WebAccountID
GO
