-- #desc				Get Sales Order Detail Information
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		N/A			

CREATE OR REPLACE VIEW [SCLIBRARY].COM_OrderDetailVW
AS
WITH CTE_F4211 AS (
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		A.SDSHAN AS SHAN,
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
	FROM [SCDATA].F4211 A		--Sales Order Lines
	UNION ALL
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		A.SDSHAN AS SHAN,
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
	FROM [SCDATA].F42119 A	
	)--Historical Sales Order Lines

	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDLNID,
		CASE SD$9TYP WHEN 1 THEN B.SD$9SHAN ELSE A.SHAN END AS SHAN,
		A.SDITM,
		A.SDNXTR,
		A.SDLNTY,
		A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
	FROM CTE_F4211 A
	LEFT OUTER JOIN [SCDATA].FQ674211 B	--Extended Sales Order Lines
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID;
/

-- #desc					Get Sales Order Detail Information for Recent Stored Procedures
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderRecentList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_RecentOrderDetailVW
AS
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDSHAN AS SHAN, 
		A.SDLNTY
	FROM [SCDATA].F4211 A		/* Sales Order Lines */
	UNION 
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		A.SDSHAN AS SHAN, 
		A.SDLNTY
	FROM [SCDATA].F42119 A;	/*Historical Sales Order Lines */
/

-- #desc					Get Sales Order Detail Information for Recent Stored Procedures
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderRecentList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_RecentOrderDetailExtVW
AS
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		B.SD$9SHAN AS SHAN, 
		A.SDLNTY
	FROM [SCDATA].F4211 A	/*Sales Order Lines*/
	INNER JOIN [SCDATA].FQ674211 B	/*Extended Sales Order Lines*/
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
		AND B.SD$9TYP = 1
	UNION 
	SELECT 
		A.SDKCOO,
		A.SDDOCO,
		A.SDDCTO,
		B.SD$9SHAN AS SHAN,   
		A.SDLNTY 
	FROM [SCDATA].F42119 A /*Historical Sales Order Lines*/
	INNER JOIN [SCDATA].FQ674211 B	/*Extended Sales Order Lines*/
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
		AND B.SD$9TYP = 1;
/




-- #desc					Get Sales Order Header Information
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_SalesOrderHeadVW
AS
WITH CTE AS (
	SELECT 
		A.SHDOCO ,	
		A.SHDCTO , 
		A.SHKCOO , 
		A.SHVR01 , 
		A.SHTRDJ , 
		A.SHDRQJ ,
		A.SHOTOT ,
		A.SHFAP  ,
		A.SHCRCD , 
		A.SHCRRM ,
		A.SHHOLD ,
		A.SHRORN ,
		A.SHRCTO ,
		A.SHDEL1 , 
		A.SHDEL2 ,
		NVL(B.SH$9TYP, 0)			AS AddressBookType,
		CASE B.SH$9TYP WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END		AS BillToNumber,
	    NVL(B.SHIDLN, 0)			AS BillToContactID,
		CASE B.SH$9TYP WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END 	AS ShipToNumber,
		NVL(B.SHRCK7, 0)			AS ShipToContactID,
		SHCO
	FROM [SCDATA].F4201 A
		LEFT OUTER JOIN [SCDATA].FQ674201 B	--Extended Sales Order Header
		ON  A.SHKCOO = B.SHKCOO
		AND A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO	
	UNION ALL
	SELECT 
		A.SHDOCO ,	
		A.SHDCTO , 
		A.SHKCOO , 
		A.SHVR01 , 
		A.SHTRDJ , 
		A.SHDRQJ ,
		A.SHOTOT ,
		A.SHFAP  ,
		A.SHCRCD , 
		A.SHCRRM ,
		A.SHHOLD ,
		A.SHRORN ,
		A.SHRCTO ,
		A.SHDEL1 , 
		A.SHDEL2 ,
		NVL(B.SH$9TYP, 0)			AS AddressBookType,
		CASE B.SH$9TYP WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END		AS BillToNumber,
	    NVL(B.SHIDLN, 0)			AS BillToContactID,
		CASE B.SH$9TYP WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END 	AS ShipToNumber,
		NVL(B.SHRCK7, 0)			AS ShipToContactID,
		SHCO
	FROM [SCDATA].F42019 A				--Historical Sales Order Header
	LEFT OUTER JOIN [SCDATA].FQ674201 B	--Extended Sales Order Header
		ON  A.SHKCOO = B.SHKCOO
		AND A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO	
)
SELECT 
		SHDOCO ,	
		SHDCTO , 
		SHKCOO , 
		SHVR01 , 
		SHTRDJ , 
		SHDRQJ ,
		SHOTOT ,
		SHFAP  ,
		SHCRCD , 
		SHCRRM ,
		SHHOLD ,
		SHRORN ,
		SHRCTO ,
		SHDEL1 , 
		SHDEL2 ,
		AddressBookType,
		BillToNumber,
	    BillToContactID,
		ShipToNumber,
		ShipToContactID,
		SHCO,
		TB.CCCRCD AS BaseCurrencyCode 
FROM CTE
INNER JOIN [SCDATA].F0010 TB 
	ON TB.CCCO = SHKCOO;
/

-- #desc					Get Sales Order Header/Detail Information
-- #db_dependencies			COM_OrderDetailVW
-- #db_references			COM_GetSalesOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_SalesOrderHeadSrchVW  
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddressBookType,
		A.BillToNumber,
	    A.BillToContactID,
		A.ShipToNumber,
		B.SHAN,
		A.ShipToContactID,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurrencyCode
	FROM [SCLIBRARY].COM_SalesOrderHeadVW A			
	INNER JOIN [SCLIBRARY].COM_OrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO;
/

CREATE OR REPLACE VIEW [SCLIBRARY].COM_ConsumerOrderDetailVW
AS
	WITH CTE_F4211 AS ( 
			SELECT 
				A.SDKCOO, 
				A.SDDOCO, 
				A.SDDCTO, 
				A.SDLNID, 
				A.SDITM, 
				A.SDNXTR, 
				A.SDLNTY, 
				A.SDLTTR, 
				A.SDCNDJ, 
				A.SDRLIT 
			FROM [SCDATA].F4211 A		 --Sales Order Lines 
			UNION ALL
			SELECT 
				A.SDKCOO, 
				A.SDDOCO, 
				A.SDDCTO, 
				A.SDLNID, 
				A.SDITM, 
				A.SDNXTR, 
				A.SDLNTY, 
				A.SDLTTR, 
				A.SDCNDJ, 
				A.SDRLIT 
			FROM [SCDATA].F42119 A	 
			) --Historical Sales Order Lines 
			SELECT 
				A.SDKCOO, 
				A.SDDOCO, 
				A.SDDCTO, 
				A.SDLNID, 
				B.SD$9SHAN AS SHAN, 
				A.SDITM, 
				A.SDNXTR, 
				A.SDLNTY, 
				A.SDLTTR, 
				A.SDCNDJ, 
				A.SDRLIT 
			FROM CTE_F4211 A 
			INNER JOIN [SCDATA].FQ674211 B	 --Extended Sales Order Lines 
				ON A.SDKCOO = B.SDKCOO 
				AND A.SDDOCO = B.SDDOCO 
				AND A.SDDCTO = B.SDDCTO 
				AND A.SDLNID = B.SDLNID 
	 AND B.SD$9TYP = 1;
/

CREATE OR REPLACE VIEW [SCLIBRARY].COM_ConsumerOrderHeaderVW
AS
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2,
			SHCO 
		FROM [SCDATA].F4201 A
		UNION ALL
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2,
			SHCO 
		FROM [SCDATA].F42019 A				 --Historical Sales Order Header
	) 
	SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			B.SH$9TYP AS AddressBookType, 
			B.SH$9AN8 AS BillToNumber, 
			B.SH$9SHAN AS ShipToNumber,
			A.SHCO, 
			TB.CCCRCD AS BaseCurrencyCode 
	FROM CTE A 
	INNER JOIN [SCDATA].FQ674201 B	 --Extended Sales Order Header 
			ON B.SHKCOO = A.SHKCOO 
			AND B.SHDOCO = A.SHDOCO 
			AND B.SHDCTO = A.SHDCTO	 
			AND B.SH$9TYP = 1 
	INNER JOIN [SCDATA].F0010 TB 
		ON TB.CCCO = A.SHKCOO;
/

CREATE OR REPLACE VIEW [SCLIBRARY].COM_CustomerOrderDetailVW
AS
	SELECT 
		A.SDKCOO, 
		A.SDDOCO, 
		A.SDDCTO, 
		A.SDLNID, 
		A.SDSHAN AS SHAN, 
		A.SDITM, 
		A.SDNXTR, 
		A.SDLNTY, 
		A.SDLTTR, 
		A.SDCNDJ, 
		A.SDRLIT 
	FROM [SCDATA].F4211 A		 --Sales Order Lines 
	UNION ALL
	SELECT 
		A.SDKCOO, 
		A.SDDOCO, 
		A.SDDCTO, 
		A.SDLNID, 
		A.SDSHAN AS SHAN, 
		A.SDITM, 
		A.SDNXTR, 
		A.SDLNTY, 
		A.SDLTTR, 
		A.SDCNDJ, 
		A.SDRLIT 
	FROM [SCDATA].F42119 A;
/

CREATE OR REPLACE VIEW [SCLIBRARY].COM_CustomerOrderHeaderVW
AS
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			0		AS AddressBookType, 
			A.SHAN8	AS BillToNumber, 
			A.SHSHAN AS ShipToNumber,
			SHCO 
		FROM [SCDATA].F4201 A 
		UNION ALL
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			0		AS AddressBookType, 
			A.SHAN8	AS BillToNumber, 
			A.SHSHAN AS ShipToNumber, 
			SHCO 
		FROM [SCDATA].F42019 A				 --Historical Sales Order Header 
	) 
	SELECT 
			SHDOCO,	 
			SHDCTO, 
			SHKCOO, 
			SHVR01, 
			SHTRDJ, 
			SHDRQJ, 
			SHOTOT, 
			SHFAP,
			SHCRCD, 
			SHCRRM, 
			SHHOLD, 
			SHRORN, 
			SHRCTO, 
			SHDEL1, 
			SHDEL2, 
			AddressBookType, 
			BillToNumber, 
			ShipToNumber,
			SHCO, 
			TB.CCCRCD AS  BaseCurrencyCode
	FROM CTE 
	INNER JOIN [SCDATA].F0010 TB 
		ON TB.CCCO = SHKCOO;
/


-- #desc				
-- #db_dependencies				N/A
-- #db_references				N/A

CREATE OR REPLACE VIEW [SCLIBRARY].COM_ConsumerSOHeadSrchVW
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddressBookType,
		A.BillToNumber,
		A.ShipToNumber,
		B.SHAN,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurrencyCode
	FROM [SCLIBRARY].COM_ConsumerOrderHeaderVW A			
	INNER JOIN [SCLIBRARY].COM_ConsumerOrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO;
/


CREATE OR REPLACE VIEW [SCLIBRARY].COM_CustomerSOHeadSrchVW  
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddressBookType,
		A.BillToNumber,
		A.ShipToNumber,
		B.SHAN,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurrencyCode
	FROM [SCLIBRARY].COM_CustomerOrderHeaderVW A			
	INNER JOIN [SCLIBRARY].COM_CustomerOrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO;
/

-- #desc					Get Invoice Order Header Information
-- #db_dependencies			N/A
-- #db_references			COM_GetInvoiceOrderDetail
CREATE OR REPLACE VIEW [SCLIBRARY].COM_InvoiceOrderHeaderVW  
AS
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHDEL1, 
		A.SHDEL2,
		A.SHCO,
		0       AS AddressBookType,
		A.SHAN8	AS BillToNumber,
        A.SHSHAN AS ShipToNumber
	FROM [SCDATA].F4201 A					--Sales Order Header
	UNION ALL	
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHDEL1, 
		A.SHDEL2,
		A.SHCO,
		0       AS AddressBookType,
		A.SHAN8	AS BillToNumber,
        A.SHSHAN AS ShipToNumber
	FROM [SCDATA].F42019 A;				--History Sales Order Header
/


/* Create Custom Types */
DECLARE
	i INTEGER;
BEGIN
	SELECT COUNT(1) INTO i FROM DBA_TYPES WHERE TYPE_NAME = 'COM_RECENTDOCUMENTTBL' AND TYPECODE = 'COLLECTION' AND OWNER = 'SCLIBRARY';
    IF i > 0 THEN
        EXECUTE IMMEDIATE 'DROP TYPE [SCLIBRARY].COM_RecentDocumentTBL';
    END IF;
END;
/

CREATE OR REPLACE TYPE [SCLIBRARY].COM_RecentDocumentType AS OBJECT (
    SHKCOO	NCHAR(5),
    SHDOCO	NUMBER,
    SHDCTO	NCHAR(2),
    SHTRDJ	NUMBER(6,0),
    SHVR01	NCHAR(25),
    SHCRCD	NCHAR(3),
    SHCRRM	NCHAR(1),
    SHHOLD	NCHAR(2),
    SHOTOT	NUMBER,
    SHFAP	NUMBER,
    RNUM NUMBER
);
/

CREATE TYPE [SCLIBRARY].COM_RecentDocumentTBL AS TABLE OF [SCLIBRARY].COM_RecentDocumentType;
/

DECLARE
	i INTEGER;
BEGIN
	SELECT COUNT(1) INTO i FROM DBA_TYPES WHERE TYPE_NAME = 'COM_ORIGINALORDERINFOTBL' AND TYPECODE = 'COLLECTION' AND OWNER = 'SCLIBRARY';
    IF i > 0 THEN
        EXECUTE IMMEDIATE 'DROP TYPE [SCLIBRARY].COM_OriginalOrderInfoTBL';
    END IF;
END;
/

CREATE OR REPLACE TYPE [SCLIBRARY].COM_OriginalOrderInfoType AS OBJECT (
    SDDOCO	NUMBER,
    SDDCTO	NCHAR(2),
    SDKCOO	NCHAR(5),
    SDOKCO	NCHAR(5),
    SDOORN	NCHAR(8),
    SDOCTO	NCHAR(2)
);
/

CREATE TYPE [SCLIBRARY].COM_OriginalOrderInfoTBL AS TABLE OF [SCLIBRARY].COM_OriginalOrderInfoType;
/


/* Create Custom Types */
DECLARE
	i INTEGER;
BEGIN
	SELECT COUNT(1) INTO i FROM DBA_TYPES WHERE TYPE_NAME = 'INV_GETITEMDESCANDURLTBL' AND TYPECODE = 'COLLECTION' AND OWNER = 'SCLIBRARY';
    IF i > 0 THEN
        EXECUTE IMMEDIATE 'DROP TYPE [SCLIBRARY].INV_GetItemDescAndURLTBL';
    END IF;
END;
/

CREATE OR REPLACE TYPE [SCLIBRARY].INV_GetItemDescAndURLType AS OBJECT (
    DESCITM NUMBER,
    DESC1	NCHAR(30),
    DESC2	NCHAR(30),
    DESC3	NCHAR(30),
    URL NVARCHAR2(256)
);
/

CREATE TYPE [SCLIBRARY].INV_GetItemDescAndURLTBL AS TABLE OF [SCLIBRARY].INV_GetItemDescAndURLType;
/


/* Create Custom Types */
DECLARE
	i INTEGER;
BEGIN
	SELECT COUNT(1) INTO i FROM DBA_TYPES WHERE TYPE_NAME = 'QTS_QUOTESTATUSTBL' AND TYPECODE = 'COLLECTION' AND OWNER = 'SCLIBRARY';
    IF i > 0 THEN
        EXECUTE IMMEDIATE 'DROP TYPE [SCLIBRARY].QTS_QuoteStatusTBL';
    END IF;
END;
/

CREATE OR REPLACE TYPE [SCLIBRARY].QTS_QuoteStatusType AS OBJECT (
    SDKCOO	NCHAR(5),
    SDDOCO	NUMBER,
    SDDCTO	NCHAR(2),
    QuoteStatus NVARCHAR2(20)  
);
/

CREATE TYPE [SCLIBRARY].QTS_QuoteStatusTBL AS TABLE OF [SCLIBRARY].QTS_QuoteStatusType;
/

/* Create Custom Types */

DECLARE
	i INTEGER;
BEGIN
	SELECT COUNT(1) INTO i FROM DBA_TYPES WHERE TYPE_NAME = 'CMM_EFFECTIVEADDRESSTBL' AND TYPECODE = 'COLLECTION' AND OWNER = 'SCLIBRARY';
    IF i > 0 THEN
        EXECUTE IMMEDIATE 'DROP TYPE [SCLIBRARY].CMM_EffectiveAddressTBL';
    END IF;
END;
/

CREATE OR REPLACE TYPE [SCLIBRARY].CMM_EffectiveAddressType AS OBJECT (
    ALAN8	NUMBER,
	ALEFTB	NUMBER(6,0),
	ALADD1	NCHAR(40),
	ALADD2	NCHAR(40),
	ALADD3	NCHAR(40),
	ALADD4	NCHAR(40),
	ALADDZ	NCHAR(12),
	ALCTY1	NCHAR(25),
	ALCOUN	NCHAR(25),
	ALADDS	NCHAR(3),
	ALCTR	NCHAR(3)
);
/

CREATE OR REPLACE TYPE [SCLIBRARY].CMM_EffectiveAddressTBL AS TABLE OF [SCLIBRARY].CMM_EffectiveAddressType;
/



-- #desc						Get constant by installation value only
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Constant				Constant ID
-- #param InstallationID		Installation ID
-- #param ConstantValue			output the value, used inside other SPs

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetConstantValue
(
	Constant		IN NCHAR,
	InstallationID  IN OUT NCHAR,
	ConstantValue   OUT NVARCHAR2
)
AS	
BEGIN
        ConstantValue := null;
    BEGIN
	    --First try to get constant by installation defined value
	    SELECT CN$9VAL INTO ConstantValue
	    FROM  
		    [SCDATA].FQ670004 A
	    WHERE  A.CN$9INID = InstallationID
		    AND A.CN$9CNST = Constant;
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        ConstantValue := NULL;
    END;

	--Check value, if null then get base value
	IF(ConstantValue IS NULL)   THEN
		    InstallationID := '***';
    		BEGIN 
		        SELECT CN$9VAL INTO ConstantValue 
		        FROM  
			        [SCDATA].FQ670004 A
		        WHERE 
			        A.CN$9INID = InstallationID
			        AND A.CN$9CNST = Constant;
			    EXCEPTION WHEN NO_DATA_FOUND THEN 
                ConstantValue := NULL;
	        END;
	END IF;
    EXCEPTION WHEN VALUE_ERROR THEN 
    ConstantValue := NULL;
END;
	
  /
-- #desc						Returns a date in Julian date format
-- #bl_class			        N/A
-- #db_dependencies		        N/A
-- #db_references		        N/A

-- #param currentDate		    Date

CREATE OR REPLACE FUNCTION [SCLIBRARY].CMM_GetCurrentJulianDate
(
    currentDate DATE
)
RETURN INT IS
    DAYS NVARCHAR2(5);
    TODAY INT;
BEGIN
    DAYS := '00' || SUBSTR(TO_NUMBER(TO_CHAR((currentDate), 'DDD')), 1,3);
    DAYS := SUBSTR(DAYS, LENGTH(RTRIM(DAYS)) -2, 3);
    TODAY := TO_NUMBER(TO_CHAR((currentDate), 'YYYY')) -1900 || DAYS;
RETURN TODAY;

END CMM_GetCurrentJulianDate;

  /
-- #desc					Get a table with Effective Address by AN8
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_BillTo, COM_GetSalesOrderShipments, QTS_GetQuoteOrderInfoShipments
--							QTS_GetQuoteOrderInfo_BillTo, CMM_GetBranchPlantInfo, CMM_GetBranchPlantInfoList,
--						

-- #param AddressNumber		Address Number
-- #param CurrentDate		Current Julian Date

CREATE OR REPLACE FUNCTION [SCLIBRARY].CMM_GetEffectiveAddressFnc
(
    AddressNumber		IN NUMBER,
    CurrentDate			IN NUMBER
)
RETURN [SCLIBRARY].CMM_EffectiveAddressTBL IS
       RETURNS [SCLIBRARY].CMM_EffectiveAddressTBL;
BEGIN
    SELECT
		[SCLIBRARY].CMM_EffectiveAddressType(
			A.ALAN8,
			A.ALEFTB,
			A.ALADD1,
			A.ALADD2,
			A.ALADD3,
			A.ALADD4,
			A.ALADDZ,
			A.ALCTY1,
			A.ALCOUN,
			A.ALADDS,
			A.ALCTR
        )BULK COLLECT INTO RETURNS
	FROM [SCDATA].F0116 A
	WHERE A.ALAN8 = AddressNumber 
		AND A.ALEFTB <= CurrentDate 
		AND ROWNUM < 2
	ORDER BY A.ALEFTB DESC;
    
    RETURN RETURNS;
END CMM_GetEffectiveAddressFnc;
  /
-- #desc							Gets Nodes.
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					dbo.INV_DelCatalogDetail

-- #param IncludeParent             Bit Include or exclude the parent node 
-- #param Catalog		            Catalog ID
-- #param UniqueKey			        Unique Key	

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogTree
(
	Catalog	        IN NVARCHAR2,
	UniqueKey	    IN DECIMAL
)

AS  
BEGIN 
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCATALOGTREE_A'; 
    
    INSERT INTO [SCLIBRARY].INV_GETCATALOGTREE_A(UniqueKeyID,CatalogId,ParentKeyID,Description,SeqNumber)	
    SELECT  CDUKID AS CDUKID,
			CD$9CLGID,
			CD$9PKID,
			CDDL01,
			CDSEQ	
		FROM [SCDATA].FQ67413
        WHERE TRIM(CD$9CLGID) = TRIM(Catalog)
        CONNECT BY
			PRIOR CDUKID =  CD$9PKID AND
			PRIOR  TRIM(CD$9CLGID) = TRIM(Catalog)
		START WITH CDUKID = UniqueKey;
END;

  /

-- #desc						Gets Bread Crumb in a string
-- #bl_class					N/A	
-- #db_references				INV_GetCatalogDetListByInst  
-- #db_dependencies				N/A

-- #param CatalogID			    Catalog ID
-- #param CatalodDetailId		Catalod Node Id


CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetCatalogNodePathFnc
(
	CatalogId		    IN NVARCHAR2,
	CatalodDetailId	    IN DECIMAL
)RETURN NVARCHAR2 IS
	CookieCrumb NVARCHAR2(500); 
    Exist   DECIMAL; 
    CatalodDetailIdTPM DECIMAL := CatalodDetailId;
    ParentTmp DECIMAL;
    NodeTemp NVARCHAR2(30);
BEGIN       
    WHILE(CatalodDetailIdTPM IS NOT NULL AND CatalodDetailIdTPM <> 0)
    LOOP
        BEGIN
            SELECT COUNT(*) INTO Exist 
            FROM [SCDATA].FQ67413 
			WHERE TRIM(CD$9CLGID) = TRIM(CatalogId) 
			AND TRIM(CDUKID) = TRIM(CatalodDetailIdTPM);
                
            IF(Exist > 0) THEN                                            
	            SELECT CDDL01 into NodeTemp 
	            FROM [SCDATA].FQ67413 
	            WHERE TRIM(CD$9CLGID) = TRIM(CatalogId) 
	            AND TRIM(CDUKID) = TRIM(CatalodDetailIdTPM);
				
				CookieCrumb := TRIM(NodeTemp)||  ' / '  || CookieCrumb ; 
				ParentTmp := CatalodDetailIdTPM;
				
				BEGIN		            
		            SELECT CD$9PKID INTO CatalodDetailIdTPM 
					FROM [SCDATA].FQ67413
					WHERE TRIM(CD$9CLGID) = TRIM(CatalogId) 
					AND TRIM(CDUKID) = TRIM(CatalodDetailIdTPM);
					EXCEPTION WHEN NO_DATA_FOUND THEN 
						CatalodDetailIdTPM := NULL;
		        END;
		        
				IF (ParentTmp=CatalodDetailIdTPM) THEN
					CatalodDetailIdTPM := NULL;
		        END IF;
            ELSE
                CatalodDetailIdTPM := NULL;	            
	        END IF;
        END;
    END LOOP;
    
	IF (LENGTH(CookieCrumb) > 0) THEN 
		BEGIN
			SELECT  CADSC1 INTO NodeTemp 
			FROM [SCDATA].FQ67412 
			WHERE CA$9CLGID = CatalogId;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
				NodeTemp := '';
		END;	 
		CookieCrumb := TRIM(NodeTemp) || ' / ' ||  SUBSTR(CookieCrumb, 1, LENGTH(CookieCrumb) - 3) ; 
	ELSE
		CookieCrumb := ' ';
	END IF;			    
	
	RETURN  CookieCrumb;
	
END;
  /

-- #desc				        All relationated rows and Catalog Detail Lang Delete.
-- #bl_class			        Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param UniqueKeyID    	    UniqueKeyID.
-- #param LangPref    			Language Preference.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalogDetailLang
(
	CatalogId   IN NVARCHAR2,
	UniqueKeyID	IN DECIMAL,
	LangPref    IN NVARCHAR2
)
AS
BEGIN
    DELETE FROM [SCDATA].FQ67413L
    WHERE
         (TRIM(CD$9CLGID) = TRIM(CatalogId)) AND
         (UniqueKeyID IS NULL OR CDUKID = UniqueKeyID) AND
         (TRIM(LangPref) IS NULL OR TRIM(CDLNGP) = TRIM(LangPref));
END;
    
  /

-- #desc				        Catalog Lang Delete.
-- #bl_class			        Premier.Inventory.CatalogLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param LangPref    			Language Preference.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalogLang
(
	CatalogId  IN NVARCHAR2,
	LangPref   IN NVARCHAR2
)
AS
BEGIN
    DELETE FROM [SCDATA].FQ67412L
    WHERE
        (CA$9CLGID = CatalogId) AND
        (TRIM(LangPref) IS NULL OR TRIM(CALNGP)  = TRIM(LangPref));
END;
    
  /

-- #desc					Delete language override for Item Web Content Detail
-- #bl_class				Premier.Inventory.ItemWebContentDetailLang
-- #db_dependencies			N/A
-- #db_references			INV_DelItemWebContentDetail

-- #param ItemNumber	    Item Number
-- #param InstallationID	Installation ID	 
-- #param DesignStatus		Design Status
-- #param UniqueKeyID		Unique Key ID
-- #param LangPref			Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentDetLang
(
	InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL,
	DesignStatus    IN DECIMAL,
	UniqueKeyID     IN DECIMAL,
	LangPref        IN NVARCHAR2
)
AS
BEGIN
	DELETE FROM 
		[SCDATA].FQ67411L
    WHERE 
		CLITM = ItemNumber 
		AND CL$9INID = InstallationID
		AND CL$9DS = DesignStatus
		AND (UniqueKeyID IS NULL OR CLUKID = UniqueKeyID)
		AND (TRIM(LangPref) IS NULL OR TRIM(CLLNGP) = TRIM(LangPref));
END;
  /

-- #desc					Delete language override for Item Web Content Header
-- #bl_class				Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies			N/A
-- #db_references			INV_DelItemWebContentHeader

-- #param InstallationID	Installation ID
-- #param ItemNumber	    Item Number	 
-- #param DesignStatus		Design Status
-- #param LangPref			Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentHeadLang
(
    InstallationID  IN NVARCHAR2,
	ItemNumber      IN DECIMAL,
	DesignStatus    IN DECIMAL,
	LangPref        IN NVARCHAR2
)
AS
BEGIN
	DELETE FROM 
		[SCDATA].FQ67410L
	WHERE	
		CLITM = ItemNumber 
		AND CL$9INID = InstallationID
		AND CL$9DS = DesignStatus
		AND (TRIM(LangPref) IS NULL OR TRIM(CLLNGP) = TRIM(LangPref));
END;
            
  /

-- #desc					Del UOM Lang
-- #bl_class				Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure		Unit of Measure
-- #param LangPref			Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelUnitOfMeasureLang
(	
	UnitOfMeasure	IN NVARCHAR2,
	LangPref		IN NVARCHAR2
)
AS
BEGIN
	DELETE  
		FROM  [SCDATA].FQ67415L
  WHERE TRIM(UMUOM) = TRIM(UnitOfMeasure)
	    AND (TRIM(LangPref) IS NULL OR TRIM(UMLNGP) = TRIM(LangPref));
END;



  
  /

-- #desc						Get the first Template Id 
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog ID
-- #param UniqueKeyId		    Node ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatDetailTemplate
(
	CatalogID		IN NVARCHAR2,
	UniqueKeyID		IN DECIMAL,
	TemplateID		OUT NVARCHAR2
)
AS

Exist DECIMAL; 
ParentTmp DECIMAL;
TemplateIDTemp NVARCHAR2(10);
UniqueKeyIDTemp DECIMAL := UniqueKeyID;

BEGIN

	WHILE(UniqueKeyIDTemp IS NOT NULL) 
	LOOP
		BEGIN
	
			SELECT COUNT(*) INTO Exist 
			FROM [SCDATA].FQ67413 
			WHERE TRIM(CD$9CLGID) = TRIM(CatalogID) 
			AND TRIM(CDUKID) = TRIM(UniqueKeyIDTemp);
  
			IF(Exist > 0) 
			THEN
		
				SELECT A.CD$9PKID,TRIM(A.CDTMPI) INTO ParentTmp, TemplateIDTemp
				FROM [SCDATA].FQ67413 A		
				WHERE TRIM(A.CD$9CLGID) = TRIM(CatalogID) 
				AND TRIM(A.CDUKID) = TRIM(UniqueKeyIDTemp);					
				
				TemplateID := TemplateIDTemp;
				
				IF (ParentTmp = 0) 
				THEN
					UniqueKeyIDTemp := NULL;
				ELSE 
					UniqueKeyIDTemp := ParentTmp;
				END	IF;
				
				IF(TRIM(TemplateID) IS NOT NULL AND TemplateID <>'NOTEMPLATE')
				THEN			
					UniqueKeyIDTemp := NULL;
				END IF;
		
			ELSE 
				UniqueKeyIDTemp := NULL;	   
			END IF; 
	
		END;
	
	END LOOP;

END;
  /

-- #desc					Get Valid Catalog Node List. Remove Orphan nodes (Nodes where parent does not exist).
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			INV_ExcGetCatXMLNodeList, INV_ExcGetCatNodeXMLItemList

-- #param CatalogID			Catalog Id
  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogNodeListFnc
( 
	CatalogID IN NVARCHAR2
) 
AS  
	 OrphanNodes DECIMAL;	 
BEGIN 
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A'; 

	INSERT INTO [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A
	(
		CatalogID,
		UniqueKeyID,
		ParentKeyID,
		IncludeInSearch,
		Description,
		EffectiveModeFlag,
		EffectiveFromDate,
		EffectiveThruDate,
		SequenceNumber,
		ImageName,
		TemplateID 
	)
	SELECT 
		CD$9CLGID,
		CDUKID,
		CD$9PKID,
		CD$9IIS,
		CDDL01,
		CD$9EFM,
		CDEFFF,
		CDEFFT,
		CDSEQ,
		CDIMGURL,
		CDTMPI
	FROM [SCDATA].FQ67413 
	WHERE TRIM(CD$9CLGID) = TRIM(CatalogID);
	
	SELECT COUNT(*) INTO OrphanNodes 
	FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A
	WHERE ParentKeyID <> 0
	AND ParentKeyID IS NOT NULL
	AND ParentKeyID NOT IN (SELECT UniqueKeyID FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A);
		 
	WHILE (OrphanNodes <> 0)
	LOOP        
		BEGIN
			DELETE FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A
			WHERE ParentKeyID <> 0
			AND ParentKeyID IS NOT NULL
			AND ParentKeyID NOT IN (SELECT UniqueKeyID FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A);
			
			SELECT COUNT(*) INTO OrphanNodes 
			FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A
			WHERE ParentKeyID <> 0
			AND ParentKeyID IS NOT NULL
			AND ParentKeyID NOT IN (SELECT UniqueKeyID FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A);	
		END; /*END WHILE*/
	END LOOP;
END;
  /

-- #desc						Returns the BranchPlant list of an item in a string value concatenated with bMCU'+-NCU code-+'eMCU '
-- #bl_class					N/A	
-- #db_dependencies				N/A
-- #db_references				INV_GetCatalogDetailItemList

-- #param InstallationID		Installation Identifier
-- #param CatalogID			    Catalog Identifier

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetItemBranchPlantStrFnc
(
	InstallationID  IN NVARCHAR2,
	ItemNumber      IN DECIMAL
)
RETURN NVARCHAR2 IS
    BranchPlant NVARCHAR2(8000);
  BEGIN
    FOR c IN (    
              SELECT MCMCU FROM [SCDATA].F0006 BM
                  --Branch Plant Master
              INNER JOIN [SCDATA].F4102 IB          --Item Master Branch
                    ON IB.IBMCU = BM.MCMCU
              INNER JOIN [SCDATA].FQ679910 BI        -- BrachPlant by Installation
                    ON BI.BI$9INID = InstallationID
                    AND BI.BIMCU = IB.IBMCU
              WHERE
                    IB.IBITM = ItemNumber 
            ) LOOP
      BranchPlant:= NVL(BranchPlant, '')|| 'bMCU' || TRIM(c.MCMCU)||'eMCU ';
    END LOOP;
    RETURN BranchPlant;
  END;  
  /

-- #desc						Return table with desc1,desc2,desc3 and URL
-- #bl_class					N/A
-- #db_dependencies				N/A			
-- #db_references				Several SPs

-- #param InstallationID		Installation ID
-- #param ItemNumber			Item Number
-- #param LangPref				Language Preference
-- #param DesignStatus			Design Status

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetItemContenDescAndURLFnc
(
	InstallationID  IN NCHAR,
	ItemNumber      IN NUMBER,
	LangPref		IN NCHAR,
	DesignStatus 	IN NUMBER
)
RETURN [SCLIBRARY].INV_GetItemDescAndURLTBL IS
		RETURNS [SCLIBRARY].INV_GetItemDescAndURLTBL;
		COUNTTMP INT;
		InstallationIDTMP NCHAR(3):= InstallationID;
BEGIN
    BEGIN
        SELECT 
            COUNT(1) INTO COUNTTMP 
        FROM 
            [SCDATA].FQ67410 
        WHERE 
                CHITM = ItemNumber 
            AND CH$9INID = InstallationID 
            AND CH$9DS = DesignStatus;
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        COUNTTMP := 0;
     END;
    
    IF(COUNTTMP = 0) THEN
        InstallationIDTMP := '***';
    END IF;
    
	SELECT
		[SCLIBRARY].INV_GetItemDescAndURLType(
			CHITM,
			NVL(B.CLDSC1, A.CHDSC1),
			NVL(B.CLDSC2, A.CHDSC2),
			NVL(B.CLDSC3, A.CHDSC3),
			A.CHPTURL 
		) BULK COLLECT INTO RETURNS
	FROM [SCDATA].FQ67410 A
	LEFT OUTER JOIN [SCDATA].FQ67410L B
		ON B.CLITM = A.CHITM
		AND B.CL$9INID = A.CH$9INID
		AND B.CL$9DS = A.CH$9DS
		AND B.CLLNGP = LangPref
	WHERE 
		A.CHITM = ItemNumber
		AND A.CH$9INID = InstallationIDTMP
		AND A.CH$9DS = DesignStatus;
		
	RETURN RETURNS;
END INV_GetItemContenDescAndURLFnc;
  /

-- #desc				    Read Cross Reference item list associated to an Item Number
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			INV_GetCatalogDetailItemList

-- #param ItemNumber	    Short Item Number
-- #param Type			    Cross Reference Type (XRT)

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetItemCrossRefStrFnc
(	
	ItemNumber      IN DECIMAL,
	CrossRefType  IN NVARCHAR2
)
RETURN NVARCHAR2 IS
    CrossReference NVARCHAR2(8000);
  BEGIN
    FOR c IN (    
              SELECT IVCITM FROM [SCDATA].F4104 			  
              WHERE
                    IVITM = ItemNumber
                    AND TRIM(IVXRT) in ('M', 'UP', TRIM(CrossRefType))
            ) LOOP
      CrossReference:= NVL(CrossReference, '')||  TRIM(c.IVCITM)||' ';
    END LOOP;
    RETURN CrossReference;
  END;  
  / 

-- #desc					All relationated rows and Catalog Detail Delete.
-- #bl_class				Premier.Inventory.CatalogDetail.cs
-- #db_dependencies			dbo.INV_GetCatalogTree
-- #db_references			N/A	

-- #param CatalogId			Catalog Id.
-- #param UniqueKeyID		UniqueKeyID  (Node ID)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalogDetail
(
	CatalogId       IN NVARCHAR2,
	UniqueKeyID		IN DECIMAL
)
AS
BEGIN

    IF(UniqueKeyID IS NULL) THEN			
		--Delete All Catalog Node Items
		DELETE FROM [SCDATA].FQ67413I
		WHERE TRIM(IN$9CLGID) = TRIM(CatalogId);
		
		--DELETE ALL NODES
		DELETE FROM [SCDATA].FQ67413
		WHERE TRIM(CD$9CLGID) = TRIM(CatalogId);
     
		[SCLIBRARY].INV_DelCatalogDetailLang(CatalogId,NULL,NULL);

    ELSE
		/*--------------------------------------------*/
		/*call the stored procedure to fill the INV_GETCATALOGTREE_A*/
		[SCLIBRARY].INV_GetCatalogTree(CatalogId, UniqueKeyID);

		/*Delete information for all the Node children*/

        --Delete Catalog Node Items
		DELETE FROM [SCDATA].FQ67413I
		WHERE TRIM(IN$9CLGID) = TRIM(CatalogId) 
		AND	INUKID IN (SELECT UniqueKeyID FROM [SCLIBRARY].INV_GETCATALOGTREE_A);
		        
        --DELETE NODE LANGUAGES
        DELETE FROM [SCDATA].FQ67413L
        WHERE TRIM(CD$9CLGID) = TRIM(CatalogId)
		AND CDUKID IN (SELECT UniqueKeyID FROM [SCLIBRARY].INV_GETCATALOGTREE_A);
		
     	--DELETE Catalog Nodes
        DELETE FROM [SCDATA].FQ67413
        WHERE TRIM(CD$9CLGID) = TRIM(CatalogId)
        AND CDUKID IN (SELECT UniqueKeyID FROM [SCLIBRARY].INV_GETCATALOGTREE_A);
        
		/*--------------------------------------------*/
    END IF;
END;    
  /

-- #desc					Delete Item Web Content Detail and related registers
-- #bl_class				Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies			INV_DelItemWebContentDetailLang
-- #db_references			INV_DelItemWebContentHeader

-- #param InstallationID	Installation ID
-- #param ItemNumber	    Item Number	 
-- #param DesignStatus		Design Status
-- #param UniqueKeyID		Unique Key ID


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentDetail
(
	InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL,	
	DesignStatus    IN DECIMAL,
	UniqueKeyID     IN DECIMAL
)
AS
BEGIN
	DELETE FROM 
		[SCDATA].FQ67411
    WHERE 
		CD$9INID = InstallationID
		AND CDITM = ItemNumber 
		AND CD$9DS = DesignStatus
		AND (UniqueKeyID IS NULL OR CDUKID = UniqueKeyID);
		
	[SCLIBRARY].INV_DelItemWebContentDetLang(InstallationID, ItemNumber, DesignStatus, UniqueKeyID, null);
END;
  /

-- #desc				        Get Catalog Detail Language.
-- #bl_class			        N/A
-- #db_dependencies		        N/A
-- #db_references		        INV_GetCatalogDetail

-- #param CatalogId			    Catalog Id.
-- #param UniqueKeyID    		UniqueKeyID.
-- #param LangPref				Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogDetailLang  
(	
	CatalogId       IN NVARCHAR2,
	UniqueKeyID		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)	
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT     A.CD$9CLGID AS CatalogId,
                   A.CDUKID    AS UniqueKeyID,
                   A.CDLNGP    AS LangPref,
                   A.CDDL01	   AS Description,
                   [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',A.CDLNGP,LangPref) AS LanguageDescE1           
        FROM [SCDATA].FQ67413L A
        WHERE
                   (TRIM(CD$9CLGID) = TRIM(CatalogID) AND
			        ( UniqueKeyID is null or CDUKID    = UniqueKeyID));
END;
  /

-- #desc				        Get Catalog Detail.
-- #bl_class			        Premier.Inventory.CatalogDetail.cs
-- #db_dependencies		        dbo.INV_GetCatalogDetailLang
-- #db_references		        dbo.INV_GetCatalog

-- #param CatalogId			    Catalog Id.
-- #param UniqueKeyID    		UniqueKeyID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogDetail  
(
	CatalogId       IN NVARCHAR2,
	UniqueKeyID		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT     
           CD$9CLGID AS CatalogId,
           CDUKID    AS UniqueKeyID,
           CD$9PKID  AS ParentKeyID,
           CD$9IIS   AS IncludeInSearch,
           CDDTAI	 AS DataItem,
           CDKY	     AS UserDefinedCode,
           CDDL01	 AS Description,
           CD$9EFM   AS EffectiveModeFlag,
           CDEFFF	 AS EffectiveFromDate,
           CDEFFT    AS EffectiveThruDate,
           CDSEQ     AS SequenceNumber,
           CDIMGURL	 AS	ImageName,
           CDTMPI    AS TemplateID
        FROM 
            [SCDATA].FQ67413
        WHERE
            TRIM(CD$9CLGID) = TRIM(CatalogID) AND
            (UniqueKeyID is null or CDUKID = UniqueKeyID)
        ORDER BY CDSEQ;
        
    [SCLIBRARY].INV_GetCatalogDetailLang(CatalogID,UniqueKeyID,'*',ResultData2);
END;
  /

-- #desc				Get Catalog Lang
-- #bl_class			Premier.Inventory.CatalogLang.cs
-- #db_dependencies		N/A
-- #db_references		INV_GetCatalog				

-- #param CatalogID	    Catalog ID	
-- #param LangPref		Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogLang  
(
	CatalogId   IN NVARCHAR2,
	LangPref    IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT     A.CA$9CLGID AS CatalogId,
	               A.CALNGP    AS LanguagePreference,
                   A.CADSC1	   AS Description,
                   [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',A.CALNGP,LangPref) AS LanguageDescE1
                   
        FROM [SCDATA].FQ67412L A
        WHERE
                   TRIM(CA$9CLGID) = TRIM(CatalogID);
END;
			 
  /

-- #desc							Gets item info by item number
-- #bl_class						Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A				

-- #param InstallationID			Installation Id
-- #param BranchPlant				Specific Branch Plant (mcu)
-- #param ShortItemNumber			Short Item Number to Search For
-- #param LongItemNumber			Long Item Number to Search For
-- #param AuxItemNumber			    Aux Item Number to Search For
-- #param RetrieveWebContentInfo	If value=1 then return values of web content item, value = 0 return the information from Item master

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterInfo
(
	InstallationID          IN NCHAR,
	BranchPlant			    IN NCHAR,
	ShortItemNumber		    IN NUMBER,
	LongItemNumber			IN NCHAR, 
	AuxItemNumber			IN NCHAR,
	RetrieveWebContentInfo  IN NUMBER,			/* 0 return the DSC1 and DSC2 from IM, 1 returns info from FQ67410*/
	LangPref				IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	InventoryFlag			NCHAR(1);
	StockingType			NCHAR(1);
	ItemNumber				NUMBER := ShortItemNumber;
	MatrixTemplate			NCHAR(20);
	MatrixControlled		NCHAR(1);
	MatrixParentItemNumber	NUMBER;
	Segment1				NCHAR(10);
	BInstallationID			NCHAR(3) := '***';
BEGIN
	
	IF ((ItemNumber IS NULL) OR (ItemNumber = 0))THEN 	 
		    
    IF (LongItemNumber <> '*' ) THEN 
        BEGIN
          SELECT A.IMITM INTO ItemNumber /*SHORT ITEM NUMBER */
          FROM [SCDATA].F4101 A  /*ITEM MASTER*/
          WHERE A.IMLITM = LongItemNumber;				
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
           ItemNumber:= 0;
        END;
    ELSIF (AuxItemNumber <> '*') THEN 
		BEGIN
			SELECT A.IMITM INTO ItemNumber	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER*/
			WHERE A.IMAITM = AuxItemNumber; 
		EXCEPTION
        WHEN NO_DATA_FOUND THEN
           ItemNumber:= 0;
        END;
		END	IF;
	END	IF;
	
	BEGIN 
	    /*First Resolve the inventory flag of the item.*/
	    SELECT 
	        B.LFIVI INTO InventoryFlag	/*Inventory Interface*/
	    FROM
	        [SCDATA].F4101 A,			/*Item Master*/
	        [SCDATA].F40205 B			/*Line Type Control Table*/
	    WHERE 
            A.IMITM = ItemNumber
		    AND B.LFLNTY = A.IMLNTY
	        AND ROWNUM = 1; 
	EXCEPTION WHEN NO_DATA_FOUND THEN 
	    InventoryFlag := ' ';
    END;

	BEGIN
		/*Resolve StockingType and MatrixParentItemNumber*/
		SELECT 
			IMSTKT,IMTMPL,IMMIC,IMSEG1
		INTO 
			StockingType, MatrixTemplate, MatrixControlled, Segment1
		FROM 
			[SCDATA].F4101 A
		WHERE 
			(A.IMITM = ItemNumber); 
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		StockingType := ' ';
		MatrixTemplate := ' ';
		MatrixControlled := ' ';
		Segment1		 := ' ';
	END;

	IF(MatrixTemplate IS NOT NULL AND MatrixControlled = '2')
	THEN
		BEGIN
			SELECT IMITM INTO MatrixParentItemNumber 
			FROM [SCDATA].F4101	
			WHERE 
				IMTMPL = MatrixTemplate 
				AND IMSEG1 = Segment1 
				AND IMMIC = '1';
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			MatrixParentItemNumber := 0;
		END;
	END IF;
		
	IF (StockingType = 'N' OR (InventoryFlag <> 'Y' AND InventoryFlag <> 'D'))   THEN
		OPEN ResultData1 FOR
		    SELECT 
		        InstallationID AS InstallationID, 
		        '' AS BranchPlant, 
		        '' AS BranchPlantDesc, 
		        A.IMITM ItemNumber, 
		        A.IMLITM LongItemNumber, 
		        A.IMAITM AuxItemNumber,
		        CASE RetrieveWebContentInfo
			        WHEN 0 THEN A.IMDSC1
			        ElSE NVL(ContenDesc.DESC1, A.IMDSC1) END
			        AS Description1,
		        CASE RetrieveWebContentInfo
			        WHEN 0 THEN A.IMDSC2
			        ElSE NVL(ContenDesc.DESC2, A.IMDSC2) END
			        AS Description2,
		        CASE RetrieveWebContentInfo
			        WHEN 0 THEN N''
			        ELSE ContenDesc.URL END
			        AS URL,
		        A.IMUOM1 PrimaryUnitOfMeasure,
		        A.IMUOM2 SecondaryUnitOfMeasure,
		        A.IMUOM4 PricingUnitOfMeasure,
		        A.IMSRTX SearchItemText,
		        A.IMSTKT StockingType ,
		        A.IMLNTY LineType ,
		        InventoryFlag AS InventoryFlag,
		        A.IMIFLA AS ItemFlashMessage,
				A.IMTMPL AS MatrixTemplate,
				A.IMMIC  AS MatrixControlled,
				MatrixParentItemNumber AS MatrixParentItemNumber,
			    0   AS AddressNumber,
			    ''  AS AllowPickup,
				IMCYCL AS CYCL,
				IMPRP0 AS PRP0,
				IMPRP1 AS PRP1,
				IMPRP2 AS PRP2,
				IMPRP3 AS PRP3,
				IMPRP4 AS PRP4,
				IMPRP5 AS PRP5,
				IMPRP6 AS PRP6,
				IMPRP7 AS PRP7,
				IMPRP8 AS PRP8,
				IMPRP9 AS PRP9,
				IMSHCM AS SHCM,
				IMSHCN AS SHCN,
				IMSRP0 AS SRP0,
				IMSRP1 AS SRP1,
				IMSRP2 AS SRP2,
				IMSRP3 AS SRP3,
				IMSRP4 AS SRP4,
				IMSRP5 AS SRP5,
				IMSRP6 AS SRP6,
				IMSRP7 AS SRP7,
				IMSRP8 AS SRP8,
				IMSRP9 AS SRP9
	        FROM [SCDATA].F4101 A						/*Item Master*/
			LEFT OUTER JOIN (SELECT CHITM, NVL(B.CLDSC1, A.CHDSC1) AS DESC1, NVL(B.CLDSC2, A.CHDSC2) AS DESC2, A.CHPTURL AS URL, 
									ROW_NUMBER() OVER (PARTITION BY CHITM ORDER BY CH$9INID DESC) AS Install 
							FROM [SCDATA].FQ67410 A
							LEFT OUTER JOIN [SCDATA].FQ67410L B
								ON B.CLITM = A.CHITM
								AND B.CL$9INID = A.CH$9INID
								AND B.CL$9DS = A.CH$9DS
								AND B.CLLNGP = LangPref
							WHERE 
								(A.CH$9INID = InstallationID OR A.CH$9INID = BInstallationID)
								AND A.CH$9DS = 0) ContenDesc 
				ON ContenDesc.CHITM = A.IMITM
				AND Install = 1 
	        WHERE (A.IMITM = ItemNumber);
		ELSE
			OPEN ResultData1 FOR
                SELECT 
                    E.BI$9INID AS InstallationID, 
                    B.IBMCU BranchPlant, 
                    C.MCDL01 BranchPlantDesc, 
                    A.IMITM ItemNumber, 
                    A.IMLITM LongItemNumber, 
                    A.IMAITM AuxItemNumber,
                    CASE RetrieveWebContentInfo
	                    WHEN 0 THEN A.IMDSC1
	                    ElSE NVL(ContenDesc.DESC1, A.IMDSC1) END
	                    AS Description1,
                    CASE RetrieveWebContentInfo
	                    WHEN 0 THEN A.IMDSC2
	                    ElSE NVL(ContenDesc.DESC2, A.IMDSC2) END
	                    AS Description2,
                    CASE RetrieveWebContentInfo
	                    WHEN 0 THEN N''
	                    ELSE ContenDesc.URL END
	                    AS URL,
                    A.IMUOM1 PrimaryUnitOfMeasure,
                    A.IMUOM2 SecondaryUnitOfMeasure,
                    A.IMUOM4 PricingUnitOfMeasure,
                    A.IMSRTX SearchItemText,
                    A.IMSTKT StockingType ,
                    A.IMLNTY LineType ,
                    InventoryFlag AS InventoryFlag,
                    A.IMIFLA AS ItemFlashMessage,
					A.IMTMPL AS MatrixTemplate,
					A.IMMIC  AS MatrixControlled,
					MatrixParentItemNumber AS MatrixParentItemNumber,
				    0   AS AddressNumber,
				    ''  AS AllowPickup,
					IMCYCL AS CYCL,
					IMPRP0 AS PRP0,
					IMPRP1 AS PRP1,
					IMPRP2 AS PRP2,
					IMPRP3 AS PRP3,
					IMPRP4 AS PRP4,
					IMPRP5 AS PRP5,
					IMPRP6 AS PRP6,
					IMPRP7 AS PRP7,
					IMPRP8 AS PRP8,
					IMPRP9 AS PRP9,
					IMSHCM AS SHCM,
					IMSHCN AS SHCN,
					IMSRP0 AS SRP0,
					IMSRP1 AS SRP1,
					IMSRP2 AS SRP2,
					IMSRP3 AS SRP3,
					IMSRP4 AS SRP4,
					IMSRP5 AS SRP5,
					IMSRP6 AS SRP6,
					IMSRP7 AS SRP7,
					IMSRP8 AS SRP8,
					IMSRP9 AS SRP9
	            FROM 
		            [SCDATA].F4101 A			/*Item Master*/
				LEFT OUTER JOIN (SELECT CHITM, NVL(B.CLDSC1, A.CHDSC1) AS DESC1, NVL(B.CLDSC2, A.CHDSC2) AS DESC2, A.CHPTURL AS URL, 
									ROW_NUMBER() OVER (PARTITION BY CHITM ORDER BY CH$9INID DESC) AS Install 
								FROM [SCDATA].FQ67410 A
								LEFT OUTER JOIN [SCDATA].FQ67410L B
									ON B.CLITM = A.CHITM
									AND B.CL$9INID = A.CH$9INID
									AND B.CL$9DS = A.CH$9DS
									AND B.CLLNGP = LangPref
								WHERE 
									(A.CH$9INID = InstallationID OR A.CH$9INID = BInstallationID)
									AND A.CH$9DS = 0) ContenDesc 
					ON ContenDesc.CHITM = A.IMITM
					AND Install = 1 
				INNER JOIN [SCDATA].FQ679910 E		/*BrachPlant by Installation*/
					ON E.BI$9INID = InstallationID 
		        INNER JOIN [SCDATA].F4102 B			/*Item Master by BranchPlant*/
					ON B.IBITM = A.IMITM
		            AND B.IBMCU = E.BIMCU
		        INNER JOIN [SCDATA].F0006 C			/*Branch Master*/
					ON C.MCMCU = B.IBMCU
	            WHERE
					(BranchPlant = '*' OR B.IBMCU = BranchPlant) 
		            AND A.IMITM = ItemNumber
	                AND ROWNUM = 1; 
	END IF;
END;
  /

-- #desc				        Get Web Content Detail Language
-- #bl_class			        Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies		        N/A
-- #db_references		        dbo.INV_GetItemWebContentDetail

-- #param ItemNumber			Item Number.
-- #param InstallationID		Installation ID.
-- #param DesignStatus			Desing Status.
-- #param UniqueKeyID           Unique Key ID.
-- #param LangPref              Language Preference.

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetItemWebContentDetLangs
(
    InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL,
    DesignStatus    IN DECIMAL,
    UniqueKeyID     IN DECIMAL,
    LangPref        IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT	A.CLITM AS ItemNumber,
		        A.CLUKID AS UniqueKeyID,
		        A.CL$9INID AS InstallationID,
		        A.CL$9DS AS DesignStatus,
		        A.CLLNGP AS LangPref,
	            A.CL$9PTL AS ParagraphTitle
               ,A.CL$9HTML AS HtmlContent
               ,A.CLURCD AS UserReservedCode
               ,A.CLURDT AS UserReservedDate
               ,A.CLURAT AS UserReservedAmount
               ,A.CLURAB AS UserReservedNumber
               ,A.CLURRF AS UserReservedReference
               ,A.CLUSER AS UserId
               ,A.CLPID AS ProgramId
               ,A.CLJOBN AS WorkStationId
               ,A.CLUPMJ AS DateUpdated
               ,A.CLTDAY AS TimeOfDay,
               [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',A.CLLNGP,LangPref) AS LanguageDescE1
	           FROM [SCDATA].FQ67411L A		
        WHERE CLITM = ItemNumber AND
	          CL$9INID = InstallationID AND
              (DesignStatus IS NULL OR CL$9DS = DesignStatus) AND 
              (UniqueKeyID IS NULL OR CLUKID = UniqueKeyID);
END;
  /
-- #desc				        Get Web Content Header
-- #bl_class			        N/A
-- #db_dependencies		        N/A
-- #db_references		        INV_GetItemWebContentHeader

-- #param ItemNumber			Item Number.
-- #param InstallationID		Installation ID.
-- #param DesignStatus			Desing Status.
-- #param LangPref			    Language Preference.

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetItemWebContentHeadLangs
(	  
    InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL,
    DesignStatus    IN DECIMAL,
    LangPref        IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT A. CLITM AS ItemNumber
              ,A. CL$9INID AS InstallationID
              ,A. CL$9DS AS DesignStatus
              ,A. CLLNGP AS LangPref
              ,A. CLDSC1 AS Description1
              ,A. CLDSC2 AS Description2
              ,A. CLDSC3 AS Description3
              ,A. CL$9HTML AS HtmlContent
              ,A. CLURCD AS UserReservedCode
              ,A. CLURDT AS UserReservedDate
              ,A. CLURAT AS UserReservedAmount
              ,A. CLURAB AS UserReservedNumber
              ,A. CLURRF AS UserReservedReference
              ,A. CLUSER AS UserId
              ,A. CLPID AS ProgramId
              ,A. CLJOBN AS WorkStationId
              ,A. CLUPMJ AS DateUpdated
              ,A. CLTDAY AS TimeOfDay,
              [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',A.CLLNGP,LangPref) AS LanguageDescE1
         FROM [SCDATA].FQ67410L A		
         WHERE  A.CLITM = ItemNumber AND
		        A.CL$9INID  =  InstallationID AND
		        A.CL$9DS  = DesignStatus;
END;


  /

-- #desc						Read UOM 
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation 		    Installation id
-- #param UnitofMeasureCode	    Unit of Measure
-- #param LangPref				Language
-- #param Description			Description

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetUnitOfMeasureLangs
(
    InstallationID  IN NVARCHAR2,
    UnitofMeasure   IN NVARCHAR2,
    LangPref		IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
		    UM$9INID	AS InstallationID, 
		    UMUOM		AS UnitofMeasure, 
		    UMLNGP		AS LanguagePref,
		    [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',UMLNGP,LangPref)	AS LanguageDescE1,
		    UMDSC1		AS Description	
          FROM  
	        [SCDATA].FQ67415L A
          WHERE 
			TRIM(A.UMUOM) = TRIM(UnitofMeasure)
          ORDER BY A.UMUOM, A.UMLNGP;
END;
  /

-- #desc					Delete AboutUs language.
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AboutUsID			AboutUsID
-- #param LangPref			Language

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_DelAboutUsLang
(
	AboutUsID	IN NVARCHAR2,
	LangPref	IN NVARCHAR2
)
AS
BEGIN
	DELETE 
	    [SCDATA].FQ67102L 
	WHERE 
		    (TRIM(HH$9HHA)  = TRIM(AboutUsID))
		AND (TRIM(LangPref) IS NULL OR TRIM(HHLNGP) = TRIM(LangPref));
END;
   
  /

-- #desc					Delete line of business.
-- #bl_class				Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param LineOfBusinessID	Line of business 
-- #param LangPref			Language


CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_DelLineOfBusinessLang
(
	LineOfBusinessID    IN NVARCHAR2,
	LangPref			IN NVARCHAR2
)

AS
BEGIN
	DELETE 
			[SCDATA].FQ67103L 
	WHERE 
			    (TRIM(LB$9LOB)  = TRIM(LineOfBusinessID))
			AND (TRIM(LangPref) IS NULL OR TRIM(LBLNGP) = TRIM(LangPref));
END;
  
  /

-- #desc				Read AboutUsLangs
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param AboutUsID 	AboutUsID
-- #param LangPref		Language

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAboutUsLangs
(
    AboutUsID IN NVARCHAR2,
    LangPref  IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
            HH$9HHA		AS AboutUsID, 
            HHLNGP		AS LanguagePref,
            [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',HHLNGP,LangPref) AS LanguageDescE1,
            HHDSC1		AS Description		  FROM  
            [SCDATA].FQ67102L
        WHERE 
            TRIM(HH$9HHA) = TRIM(AboutUsID)
        ORDER BY HH$9HHA;
END;
         

 
  /

-- #desc				    Fetch Contact Extended Info for Customer/Consumer
-- #bl_class	 	 	    N/A
-- #db_dependencies			N/A
-- #db_references			CST_GetContactChildren, CSM_GetContactChildren

-- #param AddressNumber		Address Number
-- #param AddressType		AddressBook Type
-- #param ContactID			Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetContactExtInformation
(
	AddressNumber   IN DECIMAL,
	AddressType     IN DECIMAL,
	ContactID       IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
            AB$9AN8  AS AddressNumber  ,
            AB$9TYP  AS AddressType  ,
            ABIDLN   AS ContactID  ,
            ABLNGP   AS LanguagePreference  ,
            AB$9SHAN AS ShipToNumber  ,
            AB$9MAIL AS MailPreference  ,
            AB$9EMYN AS EmailPreference  ,
            AB$9EMFP AS EmailFormat  ,
            AB$9MLCP AS MailContentPreference  ,
            AB$9MLP  AS PartnerMail  ,
            AB$9EMALS AS ShareEmail  ,
            AB$9CRS  AS IsCrossRefOn  ,
            ABURC1   AS UserReserveCode1  ,
            ABURC2   AS UserReserveCode2  ,
            ABURRF   AS UserReservedReference  ,
            ABURAB   AS UserReservedNumber  ,
            ABURDT   AS UserReservedDate  ,
            ABURAT   AS UserReservedAmount  ,
            ABAURCH1 AS UserReservedChar  ,
            ABUSER   AS UserId  ,
            ABPID    AS ProgramId  ,
            ABUPMJ   AS DateUpdated  ,
            ABJOBN   AS WorkStationId  ,
            ABUPMT   AS TimeLastUpdated  ,
            ABRELY   AS RelationType  ,
            ABRCK7   AS ShipToContactID ,
            [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','RT',ABRELY,'*') AS RelationTypeDescription
        FROM [SCDATA].FQ67104
        WHERE 
                AB$9AN8 = AddressNumber  
            AND AB$9TYP = AddressType 
            AND ABIDLN = ContactID;
END;




  /

-- #desc					Read LineOfBusinessLangs
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param LineOfBusinessID 	LineOfBusinessID
-- #param LangPref			Language

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetLineOfBusinessLangs
(
    LineOfBusinessID    IN NVARCHAR2,
    LangPref			IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT  
	        LB$9LOB AS  LineOfBusinessID, 
	        LBLNGP  AS  LanguagePref,
	        [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',LBLNGP,LangPref) AS LanguageDescE1,
	        LBDSC1  AS  Description	
        FROM  
	        [SCDATA].FQ67103L
        WHERE 
		    TRIM(LB$9LOB) =  TRIM(LineOfBusinessID)
        ORDER BY LB$9LOB;
END;
	
  /

-- #desc				Delete password  history by User Id
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		SEC_DelUser

-- #param UserID		User ID number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_DelPasswordHistory
(
	UserID	IN decimal
)
AS

BEGIN
	DELETE  

	FROM  
		[SCDATA].FQ679911
	WHERE 
		PH$9USER = UserID;

END;


  /

-- #desc					Delete from User by Installation Table 
-- #bl_class				Premier.Security.StoreByUserList.cs/UserStore.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param UserID			User ID number.
-- #param InstallationID	Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_DelUserByInst
(
	UserID			IN decimal,
	InstallationID	IN NVARCHAR2
) 
AS

BEGIN

	DELETE  
	FROM  
		[SCDATA].FQ67996
	WHERE 
		UI$9USER = UserID AND 
		(TRIM(InstallationID) = '*' OR UI$9INID = InstallationID);
		
END;

  /

-- #desc					Delete user permision, when permission code is null delete all permision of the user.
-- #bl_class				Premier.Security.UserPermission.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserID			User ID number.
-- #param PermissionCode	Permission code.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_DelUserPermission
(
	UserID			IN decimal,
	PermissionCode	IN NVARCHAR2
)
AS

BEGIN

	DELETE  
	
	FROM  
		[SCDATA].FQ67997
	WHERE 
		UP$9USER = UserID AND 
		(TRIM(PermissionCode) IS NULL OR TRIM(UP$9PCD) = TRIM(PermissionCode));

END;

  /
-- #desc						Read related Installation list by UserID and Installation type.
-- #bl_class					Premier.Security.StoreByUserList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UserID				User ID
-- #param ApplicationUseFlag	Installation type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetInstByUserListRelated
(
    UserID				IN DECIMAL,
	ApplicationUseFlag  IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
	        A.IN$9INID as InstallationID, 
	        UI$9USER as UserID,
	        INDSC1 as Description,
	        IN$9APFL as ApplicationUseFlag
        FROM  
	        -- Installation Id's 	
	        [SCDATA].FQ670001 A,
            [SCDATA].FQ67996 B --User by Installation
        WHERE 
                A.IN$9INID = B.UI$9INID
	        AND UI$9USER = UserID
	        AND (ApplicationUseFlag = '*' OR TRIM(IN$9APFL) = TRIM(ApplicationUseFlag))
	        ORDER BY  IN$9APFL ASC,INDSC1 ASC	 	;
END;
	
					
  /
-- #desc					Read user permission. 
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			SEC_GetUser


-- #param UserID			User ID number.
-- #param PermissionCode	Permission code.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUserPermisions
(
	UserID IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT  
		    A.UP$9USER as UserID, 
		    A.UP$9PCD as PermissionCode, 
		    B.PEDSC1 as Description,
		    A.UP$9ALLOW as ActionAllowed,
		    B.PECLS as ApplicationUseFlag
	    FROM  
		    [SCDATA].FQ67997 A,
		    [SCDATA].FQ67994 B
	    WHERE 
                A.UP$9PCD = B.PE$9PCD
	        AND A.UP$9USER = UserID;
END;


  /
-- #desc				Read all user information.  Uses procedures:  
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_GetUserPermision
-- #db_references       N/A

-- #param UserID	    User ID number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUser
(
    UserID IN DECIMAL, -- User Id search criteria
    ResultData1 OUT GLOBALPKG.refcursor,
    ResultData2 OUT GLOBALPKG.refcursor,
    ResultData3 OUT GLOBALPKG.refcursor   
) 
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        USR.US$9USER	as UserID , 
	        NVL(WUSR.WAEMAL, USR.US$9USRN)	as UserName , 
	        USR.US$9PWD		as Password ,  
	        USR.USLNGP		as LanguagePreference ,
            USR.US$9SQ		as SecretQuestion ,   
            USR.US$9ANS		as SecretAnswer ,  
            USR.US$9LDPC	as LastDatePasswordChanged, 
            USR.US$9SFCP	as ChangePassword ,  
            USR.US$9SFNP	as NoPasswordChange , 
            USR.US$9SFNE	as PasswordExpires , 
            USR.US$9SFAD	as AccountDisable , 
            USR.US$9SFAL	as AccountLockout ,
	        USR.US$9LDAL	as LastDateAccountLocked, 
	        USR.US$9LTAL	as LastTimeAccountLocked
        FROM 
	        [SCDATA].FQ67991 USR
		LEFT OUTER JOIN [SCDATA].FQ67101 WUSR
			ON WUSR.WA$9USER = USR.US$9USER
        WHERE 
	        -- User Id filter	
            (USR.US$9USER = UserID);
       
	   --User Permisions
        [SCLIBRARY].SEC_GetUserPermisions(UserID, ResultData2);

        --User Installations
        [SCLIBRARY].SEC_GetInstByUserListRelated(UserID, '*', ResultData3);
END;


  /
-- #desc					Fetch Consumer Contacts excluding main consumer contact 0 or 1
-- #bl_class	 	 		N/A
-- #db_dependencies			N/A
-- #db_references			GetConsumerChildren

-- #param AddressNumber		Consumer Number
-- #param ContactID			Contact ID ( The main contact to exclude )

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetConsumerContacts
(
	AddressNumber   IN DECIMAL,
	ContactID       IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
		        PC$9AN8 AS AddressNumber,   
		        PCIDLN AS ContactID,    
		        PCMLNM AS MailingName, 
	 	        PCATTL AS Salutation,    
	 	        PCEMAL AS EmailAddress,    
	 	        PCSLNM AS Title,    
	 	        PCALPH AS AlphaName, 
	 	        PCGNNM AS FirstName,    
	 	        PCMDNM AS MiddleName,    
	 	        PCSRNM AS LastName,    
	 	        PCTYC AS Type, 
	 	        PCURC1 AS UserReserveCode1,    
	 	        PCURC2 AS UserReserveCode2,    
	 	        PCURRF AS UserReservedReference,    
	 	        PCURAB AS UserReservedNumber, 
	 	        PCURDT AS UserReservedDate,    
	 	        PCURAT AS UserReservedAmount,    
	 	        PCAURCH1 AS UserReservedChar,  
	 	        PC$9W001 AS CategoryCode001,  
	 	        PC$9W002 AS CategoryCode002,  
	 	        PC$9W003 AS CategoryCode003,  
	 	        PC$9W004 AS CategoryCode004, 
	 	        PC$9W005 AS CategoryCode005,  
	 	        PC$9W006 AS CategoryCode006,  
	 	        PC$9W007 AS CategoryCode007,  
	 	        PC$9W008 AS CategoryCode008, 
	 	        PC$9W009 AS CategoryCode009,  
	 	        PC$9W010 AS CategoryCode010,
	 	        PCUSER AS UserId, 
	 	        PCPID AS ProgramId ,     
	 	        PCUPMJ AS DateUpdated,    
	 	        PCJOBN AS WorkStationId,    
	 	        PCUPMT AS TimeLastUpdated
        FROM 
            [SCDATA].FQ67303
        WHERE 
                PC$9AN8 = AddressNumber 
            AND PCIDLN <> ContactID; -- Main Contact To Exclude.
END;
 
  /
-- #desc					Get Brand Mailing
-- #bl_class	 	 		N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param AddressBookType	AddressBookType
-- #param ContactID			ContactID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetBrandMailSubscriptions
(
	AddressNumber				IN DECIMAL,
	AddressBookType			    IN DECIMAL,
	ContactID					IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
	        A.PR$9AN8	AS	AddressNumber,
	        A.PR$9TYP	AS	AddressBookType,
	        A.PRIDLN	AS	ContactID,
	        A.PR$9SRP1	AS	Brand,
	        [SCLIBRARY].CMM_GetUserDefinedCodeFnc('58','S1',A.PR$9SRP1,'*') AS BrandDescription,
	        A.PR$9MAIL	AS	MailPreference,
	        A.PR$9EMYN	AS	EmailPreference,
	        A.PR$9EMFP	AS	EmailFormat,
	        A.PR$9MLCP	AS  MailContentPreference,
	        A.PR$9MLP	AS	PartnerMail,
	        A.PR$9EMALS	AS	ShareEmail,
	        A.PR$9MLF1	AS	MailingFlag1,
	        A.PR$9MLF2	AS	MailingFlag2,
	        A.PR$9MLF3	AS	MailingFlag3,
	        A.PR$9MLF4	AS	MailingFlag4,
	        A.PR$9MLF5	AS	MailingFlag5,
	        A.PR$9MLF6	AS	MailingFlag6,
	        A.PR$9MLF7	AS	MailingFlag7,
	        A.PR$9MLF8	AS	MailingFlag8,
	        A.PR$9MLF9	AS	MailingFlag9,
	        A.PR$9MLF10	AS	MailingFlag10,
	        A.PR$9MLC1	AS	MailingCatCode1,
	        A.PR$9MLC2	AS	MailingCatCode2,
	        A.PR$9MLC3	AS	MailingCatCode3,
	        A.PR$9MLC4	AS	MailingCatCode4,
	        A.PR$9MLC5	AS	MailingCatCode5,
	        A.PR$9MLC6	AS	MailingCatCode6,
	        A.PR$9MLC7	AS	MailingCatCode7,
	        A.PR$9MLC8	AS	MailingCatCode8,
	        A.PR$9MLC9	AS	MailingCatCode9,
	        A.PR$9MLC10	AS	MailingCatCode10,
	        A.PRURC1	AS	UserReserveCode1,
	        A.PRURC2	AS	UserReserveCode2,
	        A.PRURRF	AS	UserReservedReference,
	        A.PRURAB	AS	UserReservedNumber,
	        A.PRURDT	AS	UserReservedDate,
	        A.PRURAT	AS	UserReservedAmount,
	        A.PRAURCH1	AS	UserReservedChar,
	        A.PRUSER	AS	UserId,
	        A.PRPID		AS	ProgramId,
	        A.PRUPMJ	AS	DateUpdated,
	        A.PRJOBN	AS	WorkStationId,
	        A.PRUPMT	AS	TimeLastUpdated
        FROM
	        [SCDATA].FQ671041 A
        WHERE
		        A.PR$9AN8  = AddressNumber
	        AND A.PR$9TYP  = AddressBookType
	        AND A.PRIDLN   = ContactID;
END;

 
  /
-- #desc					Reads the phones associated with a consumer
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			CSM_GetContactChildren

-- #param AddressNumber	    Address Number to search for
-- #param Contact Id to     search for
-- #param TelephoneID		TelephoneID (optional)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetPhones
(
	AddressNumber   IN DECIMAL,
	ContactID       IN DECIMAL,
	TelephoneID     IN DECIMAL,
	LangPref        IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT  
		    A.PP$9AN8 AS AddressNumber,  
		    A.PPIDLN AS ContactID, 
		    A.PPRCK7 AS TelephoneID, 
		    A.PPPHTP AS PhoneType,   
		    A.PPAR1 AS AreaCode,  
		    A.PPPH1 AS PhoneNumber,  
		    A.PPURC1 AS UserReserveCode1, 
		    A.PPURC2 AS UserReserveCode2,   
		    A.PPURRF AS UserReservedReference, 
		    A.PPURAB AS UserReservedNumber, 
		    A.PPURDT AS UserReservedDate, 
		    A.PPAURCH1 AS UserReservedChar, 
		    A.PPUSER AS UserId, 
		    A.PPPID AS ProgramId,  
		    A.PPUPMJ AS DateUpdated, 
		    A.PPJOBN AS WorkStationId,   
		    A.PPUPMT AS TimeLastUpdated,
		    [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','PH',PPPHTP,LangPref) AS PhoneTypeDescription
	    FROM  
	        [SCDATA].FQ67304 A
	    WHERE 
	        (A.PP$9AN8 = AddressNumber)
	    AND (A.PPIDLN = ContactID)
	    AND (TelephoneID IS NULL OR A.PPRCK7 = TelephoneID);
END;


  /

-- #desc							Get Consumer ship tos by address number
-- #bl_class						Premier.Consumer.ShipToList.cs
-- #db_dependencies					N/A
-- #db_references					N/A
			
-- #param StoreId 					StoreId 
-- #param Status					Status
-- #param ParentAddressNumber		Parent Address Number
-- #param ParentAddressNumber		Parent Address Number
-- #param WebAccountId				Web Account Id
-- #param Name   					Filter Term to search ship to by Name
-- #param Address					Filter Term to search ship to by address 1
-- #param City						Filter Term to search ship to by City
-- #param State						Filter Term to search ship to by State (Code)
-- #param ZipCode					Filter Term to search ship to by Zip Code
-- #param Country					Filter Term to search ship to by Country(code)
-- #param SortBy					Column to filter by Name (Default PRALPH),
--									Address (PRADD1), City, State, ZipCode */
-- #param SortDir					Direction to filter (A = Ascendent, D = Descendent) 
-- #param PageIndex					Page Index
-- #param PageSize					Page Size
-- #param RetrievePrimaryPhone		Retrieve Primary Phone(1 true, 0 false) 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetShipToList
(
	StoreId				IN NCHAR,
	ParentAddressNumber IN NUMBER,
	WebAccountId			IN NUMBER,
	FilterByWebAccount	 	IN INT,
	Status              IN NCHAR,
	Name			    IN NCHAR,
	Address				IN NCHAR,
	City				IN NCHAR,
	State				IN NCHAR,
	ZipCode				IN NCHAR,
	Country				IN NCHAR,
	SortBy				IN NVARCHAR2,
	SortDir				IN NVARCHAR2,
    RetrievePrimaryPhone IN INT,
    PageIndex           IN INT,
	PageSize            IN INT,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS

    -- Get the PhoneType value constant
	PHONECONSTANTCMP NCHAR(4);
	PHONECONSTANTIND NCHAR(4);
	
	PHONECMPINSTA   NVARCHAR2(3) := StoreId;
	PHONEINDINSTA   NVARCHAR2(3) := StoreId;
	
	SQL_DYNAMIC		VARCHAR2(4000);
	WHERE_DYNAMIC	NVARCHAR2(4000) := ' ';
	WINDOW_DYNAMIC	NVARCHAR2(500) := ' ';
	SORT_DYNAMIC	NVARCHAR2(60);
	SORTDIR_DYNAMIC NVARCHAR2(5);
	SHIPTO_DYNAMIC	NVARCHAR2(2000) := ' ';
	SHIPTO_COUNT 	INT;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    RowEnd INT := (PageIndex * PageSize);

BEGIN
	[SCLIBRARY].CMM_GetConstantValue('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	[SCLIBRARY].CMM_GetConstantValue('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);

	/* Dynamic sort direction statement */
    SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	SORT_DYNAMIC := CASE SortBy 
		WHEN 'Address' THEN 'UPPER(PRADD1)'
		WHEN 'City' THEN 'UPPER(PRCTY1)'
		WHEN 'State' THEN 'PRADDS'
		WHEN 'ZipCode' THEN 'UPPER(PRADDZ)'
		WHEN 'MailingName' THEN 'UPPER(PCMLNM)'
		ELSE 'UPPER(PRURRF)' || SORTDIR_DYNAMIC || ', UPPER(PRALPH)'
	END;

	SORT_DYNAMIC := SORT_DYNAMIC || SORTDIR_DYNAMIC;

	SELECT COUNT(*) INTO SHIPTO_COUNT FROM [SCDATA].FQ67101S WHERE WS$9INID = StoreId AND WS$9WAN8 = WebAccountId AND WS$9AN8 = ParentAddressNumber;
	/* If the FilterByWebAccount parameter is true, it returns only the selected ship to's for the web account,
	otherwise it returns the complete list with the difference that the Selected property would be true or false.*/
	IF (FilterByWebAccount = 1 AND SHIPTO_COUNT > 0) THEN
		SHIPTO_DYNAMIC := N' INNER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = :WebAccountId AND S.WS$9INID = :StoreId AND S.WS$9AN8 = :ParentAddressNumber AND S.WS$9SHAN = PR$9AN8 ';
	ELSE
		SHIPTO_DYNAMIC := N' LEFT OUTER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = :WebAccountId AND S.WS$9INID = :StoreId AND S.WS$9AN8 = :ParentAddressNumber AND S.WS$9SHAN = PR$9AN8 ';
	END IF;

	/* Make windows functions to generate row number and total row count*/
	WINDOW_DYNAMIC := N' ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM ';

	IF (Status <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND T0.PR$9STS = :Status ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Status = ''*'') ';
	END IF;

	/*Filter by Name*/
	IF (Name <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (NVL(UPPER(T0.PRALPH),'''') LIKE ''%'' || :Name || ''%'')';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Name = ''*'') ';
	END IF;

	/*Filter by Address1*/
	IF (Address <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (UPPER(T0.PRADD1) LIKE ''%'' || :Address || ''%'')';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Address = ''*'') ';
	END IF;

	/*Filter by City*/
	IF (City <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (UPPER(T0.PRCTY1) LIKE ''%'' || :City || ''%'')';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :City = ''*'') ';
	END IF;

	/*Filter by State*/
	IF (State <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND T0.PRADDS = :State ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :State = ''*'') ';
	END IF;

	/*Filter by ZipCode*/
	IF (ZipCode <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND T0.PRADDZ LIKE ''%'' || :ZipCode || ''%'' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ZipCode = ''*'') ';
	END IF;

	/*Filter by Country*/
	IF (Country <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (T0.PRCTR = :Country)';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Country = ''*'') ';
	END IF;

    SQL_DYNAMIC := N'
	WITH SHIPTOS2 AS ( '; 
		/* If RetrievePrimaryPhone true resolve primary phone and create sub select 2, else return dummy value */
		IF(RetrievePrimaryPhone = 1) THEN
			SQL_DYNAMIC := SQL_DYNAMIC || N'
		SELECT SHIPTOS.*, '|| WINDOW_DYNAMIC || N'
			FROM ( ';
		END IF;
		SQL_DYNAMIC := SQL_DYNAMIC || N'
			SELECT 	
				T0.PR$9AN8,
				T0.PR$9PA8,
				T0.PRALPH,
				T1.PCMLNM,
				T0.PRADD1,
				T0.PRADD2,
				T0.PRADD3,
				T0.PRADD4,
				T0.PRCTY1,
				T0.PRADDS,
				T0.PRADDZ,
				T0.PRCTR,
				T1.PCIDLN,
				T1.PCGNNM,
				T1.PCMDNM,
				T1.PCSRNM,
				T0.PRURRF,
				T0.PRDEL1,
				T0.PRDEL2,
				T0.PR$9STS, 
				NVL(S.WS$9WAN8, 0) AS Selected, ';

			/* Returns dummy value in Phone when RetrievePrimaryPhone = 0 */
			IF(RetrievePrimaryPhone = 1) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' 
				CASE 
					WHEN TRIM(PPAR1) IS NULL THEN  PPPH1
					ELSE ''('' || TRIM(PPAR1) || '') '' || PPPH1 END AS Phone, 
				ROW_NUMBER() OVER (PARTITION BY T0.PR$9AN8 ORDER BY T0.PR$9AN8) AS RW ';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N' 
				'' '' AS Phone, ' || WINDOW_DYNAMIC || N' ';
			END IF;

				SQL_DYNAMIC := SQL_DYNAMIC || N'  		
			FROM 
				[SCDATA].FQ670302 T0
				INNER JOIN [SCDATA].FQ67303 T1
					ON (T0.PR$9AN8 = T1.PC$9AN8)
					AND (T1.PCIDLN = 0)		/*ONLY CONTACT 0*/ ' 
					|| SHIPTO_DYNAMIC || ' ';
			
			IF(RetrievePrimaryPhone = 1) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' INNER JOIN [SCDATA].FQ67107 PS
					ON (PS.PS$9AN8 =  T1.PC$9AN8)
					AND (PS.PS$9TYP = 1) /*CONSUMER*/ 
				LEFT OUTER JOIN [SCDATA].FQ67304
					ON PP$9AN8 = T0.PR$9AN8
					AND PPIDLN = 0
					AND PPPHTP = (CASE WHEN PS.PS$9ICF = 0 THEN ''' || PHONECONSTANTIND || ''' ELSE ''' || PHONECONSTANTCMP || ''' END ) ';
			END IF;
			
			SQL_DYNAMIC := SQL_DYNAMIC || N' WHERE 
				T0.PRBADT IN (''S'', ''X'')
				AND (T0.PR$9PA8 = :AddressNumber OR T0.PR$9AN8 = :AddressNumber) ' ||
				WHERE_DYNAMIC;

		/* Where to return top 1 phones and close sub select 3 */
		IF(RetrievePrimaryPhone = 1) THEN
			SQL_DYNAMIC := SQL_DYNAMIC || N')  SHIPTOS WHERE RW = 1) ';
		ELSE 
			SQL_DYNAMIC := SQL_DYNAMIC || N') ';
		END IF;

		SQL_DYNAMIC := SQL_DYNAMIC || N' 
		SELECT  PR$9AN8		AS AddressNumber, 
			PR$9PA8		As ParentAddressNumber, 
			PRALPH		AS AlphaName, 
			PCMLNM		AS MailingName, 
			PRADD1		AS AddressLine1,
            PRADD2		AS AddressLine2, 
			PRADD3		AS AddressLine3, 
			PRADD4		AS AddressLine4, 
			PRCTY1		AS City, 
			PRADDS		AS State,
            PRADDZ		AS ZipCode, 
			PRCTR		AS Country, 
			PCIDLN		AS ContactId, 
			PCGNNM		AS Firstname, 
			PCMDNM		AS Middlename, 
			PCSRNM		AS Lastname, 
			PRURRF		AS Nickname,
            0			AS PoBoxFlag, 
			PRDEL1		AS DeliveryInstructions1, 
			PRDEL2		AS DeliveryInstructions2, 
			PR$9STS		AS Status, 
			Selected	AS Selected,
			Phone, 
			'' ''		AS AlternateAddressKey, 
			(SELECT COUNT(1) FROM SHIPTOS2) AS TotalRowCount 
		FROM SHIPTOS2 A
		WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';


		OPEN ResultData1 FOR SQL_DYNAMIC USING WebAccountId, StoreId, ParentAddressNumber, ParentAddressNumber, ParentAddressNumber, Status, Name, Address, City, State, ZipCode, Country,
											PageIndex, PageSize, RowStart, RowEnd;
END;
  /
 -- #desc						Gets Customer Information
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Company				Company
-- #param AddressNumber			AddressNumber

CREATE OR REPLACE FUNCTION [SCLIBRARY].CST_GetCustomerInfoFnc
(
	Company		    IN NCHAR,
	AddressNumber	IN NUMBER
)
RETURN NVARCHAR2 IS
CompanyTMP NCHAR(5) := NULL;

BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].CST_GETCUSTOMERINFOFNC_A';
    
    BEGIN
	    SELECT AICO INTO CompanyTMP FROM [SCDATA].F03012
						WHERE AIAN8 = AddressNumber AND AICO = Company AND ROWNUM < 2;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    CompanyTMP := NULL;
	END;
	
	IF(CompanyTMP IS NULL)THEN
		CompanyTMP := '00000';
	END IF;
	
	INSERT INTO [SCLIBRARY].CST_GETCUSTOMERINFOFNC_A 
	(
	    AIAN8	,       -- AddressNumber 		
	    AICO	,       -- Company
	    AIURRF 	,	    -- NickName
	    AIBADT 	,		-- BillingAddressType
	    AICMGR 	,	    -- AccountRepresentative
	    AICARS  ,		-- Carrier
	    AITXA1 	,	    -- TaxAreaCode
	    AIEXR1 	,		-- TaxExplanationCode
	    AIPORQ 	,		-- CustomerPORequired
	    AIAPRC 	,		-- OpenOrders
	    AIACL 	,		-- CreditLimit
	    AIDAOJ 	,		-- DateAccountOpened
	    AITRAR 	,		-- PaymentTermsCode
	    AIASTY 	,		-- InvoicedYTD
	    AISPYE 	,		-- InvoicedPriorYear
	    AICPGP 	,		-- PricingGroup
	    AIBACK	,		-- AllowBackOrder
	    AICUSTS	,  	    -- Status
	    AIDEL1	,	    -- DeliveryInstructions1
	    AIDEL2	,       -- DeliveryInstructions2	 
	    AIEDF2	,		-- ItemRestrictionsCode   
		AIMINO  ,		-- MinimumOrderAmount
		AIMAXO			-- MaximumOrderAmount
	)
	SELECT 
		AIAN8,			-- AddressNumber
		CompanyTMP,	    -- Company
		' ',			-- NickName
		AIBADT,			-- BillingAddressType
		AICMGR,			-- AccountRepresentative
		AICARS,			-- Carrier
		AITXA1,			-- TaxAreaCode
		AIEXR1,			-- TaxExplanationCode
		AIPORQ,			-- CustomerPORequired
		AIAPRC,			-- OpenOrders
		AIACL,			-- CreditLimit
		AIDAOJ,			-- DateAccountOpened
		AITRAR,			-- PaymentTermsCode
		AIASTY,			-- InvoicedYTD
		AISPYE,			-- InvoicedPriorYear
		AICPGP,			-- PricingGroup
		AIBACK,			-- AllowBackOrder
		AICUSTS,	    -- Status
		AIDEL1,			-- DeliveryInstructions1
		AIDEL2,			-- DeliveryInstructions2
		AIEDF2,			-- ItemRestrictionsCode
		AIMINO,			-- MinimumOrderAmount
		AIMAXO			-- MaximumOrderAmount
	FROM [SCDATA].F03012
	WHERE 
		AIAN8 = AddressNumber
		AND	AICO = CompanyTMP;

    RETURN ' ' ;
END CST_GetCustomerInfoFnc;


  /
-- #desc						Return the mail address or company url
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param ContactID				Contact ID 
-- #param Type					Electronic Address Type

CREATE OR REPLACE FUNCTION [SCLIBRARY].CST_GetPrimaryElectAddressFnc
(
	AddressNumber	IN DECIMAL,
	ContactID		IN DECIMAL,
	Type			IN NVARCHAR2
)
RETURN NVARCHAR2 IS
    ElectronicAddress	NVARCHAR2(256);
BEGIN

    BEGIN
	    SELECT TMP.EAEMAL INTO ElectronicAddress
		FROM
		(
			SELECT	EAEMAL 
			FROM	[SCDATA].F01151
			WHERE	
					EAAN8 = AddressNumber
			AND		EAIDLN = ContactID
			AND		TRIM(EAETP) = TRIM(Type)
			ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC	    
		)TMP
		WHERE ROWNUM < 2;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		    ElectronicAddress := NULL;
	END;
	
	RETURN NVL(ElectronicAddress,'');
END;


		
  /

-- #desc					Fetch Customer Contacts excluding main customer contact 0 or 1
-- #bl_class	 	 		N/A
-- #db_dependencies			N/A
-- #db_references			GetCustomerChildren

-- #param AddressNumber		Customer Number
-- #param ContactID			Contact ID ( The main contact to exclude )

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetCustomerContacts
(
	AddressNumber	DECIMAL,
	ContactID		DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS

BEGIN
OPEN ResultData1 FOR
SELECT 
		WWAN8 AS AddressNumber, 
		WWIDLN AS ContactID,
		WWMLNM AS MailingName,
		WWATTL AS Title,
		TO_CHAR(SCLIBRARY.CST_GetPrimaryElectAddressFnc(WWAN8,WWIDLN,'E')) AS EmailAddress,
		WWSLNM AS Salutation , 
		WWALPH AS AlphaName , 
		WWGNNM AS FirstName , 
		WWMDNM AS MiddleName , 
		WWSRNM AS LastName , 
		WWTYC AS Type , 
		WWUSER AS UserId , 
		WWPID AS ProgramId , 
		WWUPMJ AS DateUpdated , 
		WWJOBN AS WorkStationId , 
		WWUPMT AS TimeLastUpdated , 
		'' AS WebSite , 
		WWDC AS CompressName  
FROM [SCDATA].F0111
WHERE WWAN8 = AddressNumber 
AND WWIDLN <> ContactID; -- Main Contact To Exclude.

END;

  /
-- #desc					Read Electronic Addresses
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param ContactID			Specific contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetElectronicAddress
(
	AddressNumber			IN NUMBER,
	ContactID				IN NUMBER := null,
	ElectronicAddressID		IN NUMBER := null,
	ElectronicAddressType	IN NCHAR := null,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
	SQL_DYNAMIC		VARCHAR2(4000);
	WHERE_DYNAMIC	NVARCHAR2(1000) := N' ';
BEGIN
	IF (ContactID IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND EAIDLN = :ContactID ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ContactID IS NULL) ';
	END IF;

	IF (ElectronicAddressID IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND EARCK7 = :ElectronicAddressID ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ElectronicAddressID IS NULL) ';
	END IF;

	IF (TRIM(ElectronicAddressType) IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND EAETP = :ElectronicAddressType ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ElectronicAddressType IS NULL) ';
	END IF;
	
	SQL_DYNAMIC := N'
	SELECT	
		EAAN8  AS AddressNumber,
		EAIDLN AS ContactID,
		EARCK7 AS ElectronicAddressID,
		EAETP  AS ElectronicAddressType,
		EAEMAL AS Address
	FROM	
		[SCDATA].F01151
	WHERE
		EAAN8 = :AddressNumber
		'|| WHERE_DYNAMIC ||'
	ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC';

	OPEN ResultData1 FOR SQL_DYNAMIC USING AddressNumber, ContactID, ElectronicAddressID, ElectronicAddressType;

END; 
  /

-- #desc						Fetch Phones for a Contact
-- #bl_class	 	 			N/A
-- #db_dependencies				N/A
-- #db_references				CST_GetContactChildren

-- #param AddressNumber			Address Number
-- #param ContactID				Contact ID
-- #param TelephoneID			TelephoneID (optional)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetPhones
(
	AddressNumber IN decimal,
	ContactID IN decimal,
	TelephoneID IN decimal,
	LangPref IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS

BEGIN

OPEN ResultData1 FOR
	SELECT 
			A.WPAN8 AS AddressNumber  ,
			A.WPIDLN AS ContactID  ,
			A.WPRCK7 AS TelephoneID  ,
			A.WPPHTP AS PhoneType  ,
			A.WPAR1 AS AreaCode  ,
			A.WPPH1 AS PhoneNumber  ,
			A.WPUSER AS UserId  ,
			A.WPPID AS ProgramId  ,
			A.WPUPMJ AS DateUpdated  ,
			A.WPJOBN AS WorkStationId  ,
			A.WPUPMT AS TimeLastUpdated  ,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','PH',WPPHTP ,LangPref)AS PhoneTypeDescription
	FROM [SCDATA].F0115 A 
	WHERE A.WPAN8 = AddressNumber 
	AND A.WPIDLN = ContactID
	AND (TelephoneID IS NULL OR A.WPRCK7 = TelephoneID);

END;
  /

-- #desc							Get Customer ship tos by address number
-- #bl_class						Premier.Customer.ShipToList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param StoreId					Store Id
-- #param Company					Company
-- #param ParentAddressNumber		Parent Address Number
-- #param WebAccountId				Web Account Id
-- #param FilterByWebAccount		Filter By Web Account
-- #param Status					Status
-- #param Name					    Filter Term to search ship to by Name
-- #param Address					Filter Term to search ship to by address 1
-- #param City						Filter Term to search ship to by City
-- #param State						Filter Term to search ship to by State (Code)
-- #param ZipCode					Filter Term to search ship to by Zip Code
-- #param Country					Filter Term to search ship to by Country(code)
-- #param ZipCode					Filter Term to search ship to by Zip Code
-- #param Country					Filter Term to search ship to by Country(code)
-- #param SortBy					Column to filter by Name (Default WWMLNM),
--									Address (ALADD1), City, State, ZipCode */
-- #param SortDir					Direction to filter (A = Ascendent, D = Descendent) 
-- #param RetrievePrimaryPhone		Retrieve Primary Phone(1 true, 0 false) 
-- #param PageIndex					Page Index
-- #param PageSize					Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetShipToList
(
	StoreId					IN NCHAR,
	Company				    IN NCHAR,
	ParentAddressNumber		IN NUMBER,
	WebAccountId			IN NUMBER,
	FilterByWebAccount	 	IN INT,
	Status					IN NCHAR,
	Name				    IN NCHAR,
	Address					IN NCHAR,
	City					IN NCHAR,
	State					IN NCHAR,
	ZipCode					IN NCHAR,
	Country					IN NCHAR,
	SortBy					IN NVARCHAR2,
	SortDir					IN NVARCHAR2,
    RetrievePrimaryPhone	IN INT,
    PageIndex				IN INT,
	PageSize				IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	-- Get the PhoneType value constant
	 PHONECONSTANTCMP NCHAR(4);
	 PHONECONSTANTIND NCHAR(4);
	
	 PHONECMPINSTA     NCHAR(3) := StoreId;
	 PHONEINDINSTA     NCHAR(3) := StoreId;
	 CodeLength INT :=0;
	 RetrievePrimaryPhoneTMP	INT := RetrievePrimaryPhone;
	 
	 SQL_DYNAMIC 		varchar(4000);
	 SQL_DYNAMIC2 		varchar(4000);
	 WHERE_DYNAMIC 		NVARCHAR2(2000) := ' ';
	 SORT_DYNAMIC 		NVARCHAR2(60);
	 SORTDIR_DYNAMIC 	NVARCHAR2(5);
	 WINDOW_DYNAMIC 	NVARCHAR2(500) := ' ';
	 SHIPTO_DYNAMIC		NVARCHAR2(2000) := ' ';
	 SHIPTO_COUNT 		INT;

	 /* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    RowEnd INT := (PageIndex * PageSize);

	--------------------------Gets the Organization Structure Type
	OrgStrType	NCHAR(3);
	OrgStrTypeINID	NCHAR(3) := StoreId;	

BEGIN
	
	SELECT DTCDL INTO CodeLength FROM [SCCTL].F0004
	WHERE DTSY = 'H00' AND DTRT = 'TA';
	
	[SCLIBRARY].CMM_GetConstantValue('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	[SCLIBRARY].CMM_GetConstantValue ('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);
	[SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

	/* If settings do not exist, work like RetrievePrimaryPhone = 0 */
	IF(PhoneConstantCMP IS NULL OR PhoneConstantIND IS NULL) THEN
		RetrievePrimaryPhoneTMP := 0;
	END IF;

	/* Dynamic sort direction statement */
    SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	SORT_DYNAMIC := CASE SortBy 
		WHEN 'Address' THEN 'UPPER(AddressLine1)'
		WHEN 'City' THEN 'UPPER(City)'
		WHEN 'State' THEN 'State'
		WHEN 'ZipCode' THEN 'UPPER(ZipCode)'
		WHEN 'MailingName' THEN 'UPPER(MailingName)'
		ELSE 'UPPER(NickName)' || SORTDIR_DYNAMIC || ', UPPER(MailingName)'
	END;

	SORT_DYNAMIC := SORT_DYNAMIC || SORTDIR_DYNAMIC;
	
	SELECT COUNT(*) INTO SHIPTO_COUNT FROM [SCDATA].FQ67101S WHERE WS$9INID = StoreId AND WS$9WAN8 = WebAccountId AND WS$9AN8 = ParentAddressNumber;

	/* If the FilterByWebAccount parameter is true, it returns only the selected ship to's for the web account,
	otherwise it returns the complete list with the difference that the Selected property would be true or false.*/
	IF (FilterByWebAccount = 1 AND SHIPTO_COUNT > 0) THEN
		SHIPTO_DYNAMIC := N' INNER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = :WebAccountId AND S.WS$9INID = :StoreId AND S.WS$9AN8 = :ParentAddressNumber AND S.WS$9SHAN = ABAN8 ';
	ELSE
		SHIPTO_DYNAMIC := N' LEFT OUTER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = :WebAccountId AND S.WS$9INID = :StoreId AND S.WS$9AN8 = :ParentAddressNumber AND S.WS$9SHAN = ABAN8 ';
	END IF;

	/* Make windows functions to generate row number and total row count*/
	WINDOW_DYNAMIC := N' ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM ';

	/*Filter by Name*/
	IF (Name <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (NVL(UPPER(WWMLNM),'''') LIKE ''%'' || :Name || ''%'')';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Name = ''*'') ';
	END IF;

	/*Filter by Address1*/
	IF (Address <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (UPPER(ALADD1) LIKE ''%'' || :Address || ''%'')';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Address = ''*'') ';
	END IF;

	/*Filter by City*/
	IF (City <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (UPPER(ALCTY1) LIKE ''%'' || :City || ''%'')';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :City = ''*'') ';
	END IF;

	/*Filter by State*/
	IF (State <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ALADDS = :State';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :State = ''*'') ';
	END IF;

	/*Filter by ZipCode*/
	IF (ZipCode <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (ALADDZ LIKE ''%'' || :ZipCode || ''%'')';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ZipCode = ''*'') ';
	END IF;

	/*Filter by Country*/
	IF (Country <> '*')THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ALCTR = :Country ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Country = ''*'') ';
	END IF;

	/* Dynamic status statement. Evaluates Status for specific Company. If the Company record does not exists then uses 00000 */
	IF (Status <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ';

		IF(Company <> '00000') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N'NVL(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS)';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N'DEFAULTCOMPANY.AICUSTS';
		END IF;

		IF (Status = '1') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' = ''1''';
		END IF;

		IF (Status = '0') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' <> ''1''';
		END IF;
	END IF;

	SQL_DYNAMIC := N'
	WITH SHIPTOS3 AS ( '; 
	/* If RetrievePrimaryPhone true resolve primary phone and create sub select 3, else return dummy value */
	IF(RetrievePrimaryPhoneTMP = 1) THEN
		SQL_DYNAMIC := SQL_DYNAMIC || N'
	SELECT SHIPTOS2.*, ' || WINDOW_DYNAMIC || N'  
		FROM 
		(SELECT SHIPTOS.*, (CASE  WHEN TRIM(WPAR1) IS NULL THEN  WPPH1 ELSE ''('' || TRIM(WPAR1) || '') '' || WPPH1 END) Phone, 
				ROW_NUMBER() OVER (PARTITION BY AddressNumber ORDER BY AddressNumber) AS RW ';
		ELSE
			SQL_DYNAMIC := SQL_DYNAMIC || N' 
	SELECT SHIPTOS.*, '' '' AS Phone, ' || WINDOW_DYNAMIC || N' ';
		END IF;

		SQL_DYNAMIC := SQL_DYNAMIC || N'
		FROM 
			(SELECT	
					ABAN8		AS AddressNumber,			/* Address Number */
					MAPA8		AS ParentAddressNumber,		/* Parent Address Number */
					WWALPH		AS AlphaName,				/* Alpha Name*/
					WWMLNM		AS MailingName,				/* Mailing Name*/
					ALADD1		AS AddressLine1,			/* Address Line 1*/
					ALADD2		AS AddressLine2,			/* Address Line 2*/
					ALADD3		AS AddressLine3,			/* Address Line 3*/
					ALADD4		AS AddressLine4,			/* Address Line 4*/
					ALCTY1		AS City,					/* City*/
					ALADDS		AS State,					/* State*/
					ALADDZ		AS ZipCode,					/* Zip Code*/
					ALCTR		AS Country,					/* Country*/
					WWIDLN		AS ContactId,				/* Contact ID*/
					WWGNNM		AS Firstname,				/* First Name*/
					WWMDNM		AS Middlename,				/* Middle Name*/
					WWSRNM		AS Lastname,				/* Last Name*/
					WWNICK		AS Nickname, 
					NVL(S.WS$9WAN8, 0) AS Selected, ';
				
				IF (Company <> '00000') THEN
					SQL_DYNAMIC := SQL_DYNAMIC || 
					N' NVL(OVERRIDECOMPANY.AIDEL1, DEFAULTCOMPANY.AIDEL1) AS DeliveryInstructions1,
					NVL(OVERRIDECOMPANY.AIDEL2, DEFAULTCOMPANY.AIDEL2) AS DeliveryInstructions2,
					NVL(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) AS Status, ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || 
					N' DEFAULTCOMPANY.AIDEL1 AS DeliveryInstructions1, 
					DEFAULTCOMPANY.AIDEL2 AS DeliveryInstructions2, 
					DEFAULTCOMPANY.AICUSTS AS Status, ';
				END IF;
				
				/* Calculate Individual Company Flag when RetrievePrimaryPhone = 1 */
				IF(RetrievePrimaryPhoneTMP = 1) THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N'
					NVL(PS$9ICF, (CASE WHEN DRSPHD = ''0'' THEN 0 ELSE 1 END)) AS IndividualCompanyFlag, ';
				END IF;
					
					SQL_DYNAMIC := SQL_DYNAMIC || 
					N' ABALKY		AS AlternateAddressKey
			FROM	[SCDATA].F0150
					INNER JOIN	[SCDATA].F0101
						ON   ABAN8 = MAAN8									/* Address Book Join Address Organization Structure */
					' || SHIPTO_DYNAMIC ||'
					INNER JOIN [SCDATA].F0111									/* Address Book Join Who is Who (Contacts)	*/
						ON WWAN8 = ABAN8
						AND   WWIDLN = 0		
					INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, :CurrentJulianDate)) AL	/* Address Book Join Address File */
						ON AL.ALAN8 = ABAN8
					INNER JOIN [SCDATA].F03012     DEFAULTCOMPANY				/* Address Book Join Customer Master */ 
						ON   DEFAULTCOMPANY.AIAN8 = ABAN8
						AND  DEFAULTCOMPANY.AICO  = ''00000''
						AND  (DEFAULTCOMPANY.AIBADT IN (''S'', ''X'')) ';

				IF (Company <> '00000') THEN		 
					SQL_DYNAMIC := SQL_DYNAMIC || N' LEFT OUTER JOIN [SCDATA].F03012     OVERRIDECOMPANY		/* Address Book Join Customer Master */   
						ON OVERRIDECOMPANY.AIAN8 = ABAN8
						AND OVERRIDECOMPANY.AICO  = '''||Company||''' ';
				END IF;

				IF(RetrievePrimaryPhoneTMP = 1) THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' LEFT OUTER JOIN [SCDATA].FQ67107	        				/* Profile Extended Information	*/	
						ON PS$9AN8 = ABAN8
						AND PS$9TYP = 0										/*CUSTOMER*/
					LEFT OUTER JOIN [SCCTL].F0005
						ON PS$9AN8 IS NULL
						AND DRSY = ''H00''
						AND DRRT = ''TA'' 
						AND SUBSTR(DRKY, 10 - '||CodeLength||' + 1, '||CodeLength||') = ABTAXC ';
				END IF;

					SQL_DYNAMIC := SQL_DYNAMIC || N' WHERE MAPA8 = :ParentAddressNumber
						AND MAOSTP = :OrgStrType
						AND	MAAN8 <> :ParentAddressNumber ' || WHERE_DYNAMIC;
					
		SQL_DYNAMIC2 := SQL_DYNAMIC2 || N'
			UNION ALL 		
			SELECT 	ABAN8  AS AddressNumber,		/* Address Number*/
					' || ParentAddressNumber || '	AS ParentAddressNumber,
					WWALPH AS AlphaName,			/* Alpha Name*/
					WWMLNM AS MailingName,			/* Mailing Name*/
					ALADD1 AS AddressLine1,			/* Address Line 1*/
					ALADD2 AS AddressLine2,			/* Address Line 2*/
					ALADD3 AS AddressLine3,			/* Address Line 3*/
					ALADD4 AS AddressLine4,			/* Address Line 4*/
					ALCTY1 AS City,					/* City*/
					ALADDS AS State,				/* State*/
					ALADDZ AS ZipCode,				/* Zip Code*/
					ALCTR  AS Country,				/* Country*/
					WWIDLN AS ContactId,			/* Contact ID*/
					WWGNNM AS Firstname,			/* First Name*/
					WWMDNM AS Middlename,			/* Middle Name*/
					WWSRNM AS Lastname,				/* Last Name*/
					WWNICK AS Nickname, 
					NVL(S.WS$9WAN8, 0) AS Selected, ';
					
				IF (Company <> '00000') THEN
					SQL_DYNAMIC2 := SQL_DYNAMIC2 || 
					N' NVL(OVERRIDECOMPANY.AIDEL1, DEFAULTCOMPANY.AIDEL1) AS DeliveryInstructions1,
					NVL(OVERRIDECOMPANY.AIDEL2, DEFAULTCOMPANY.AIDEL2) AS DeliveryInstructions2,
					NVL(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) AS Status, ';
				ELSE
					SQL_DYNAMIC2 := SQL_DYNAMIC2 || 
					N' DEFAULTCOMPANY.AIDEL1 AS DeliveryInstructions1, 
					DEFAULTCOMPANY.AIDEL2 AS DeliveryInstructions2, 
					DEFAULTCOMPANY.AICUSTS AS Status, ';
				END IF;
				
				/* Calculate Individual Company Flag when RetrievePrimaryPhone = 1 */
				IF(RetrievePrimaryPhoneTMP = 1) THEN
					SQL_DYNAMIC2 := SQL_DYNAMIC2 || N'
					NVL(PS$9ICF, (CASE WHEN DRSPHD = ''0'' THEN 0 ELSE 1 END)) AS IndividualCompanyFlag, ';
				END IF;
					
					SQL_DYNAMIC2 := SQL_DYNAMIC2 || 
					N' ABALKY	AS AlternateAddressKey
			FROM   [SCDATA].F0101
				   INNER JOIN [SCDATA].F0111									   /* Address Book Join Who is Who (Contacts)*/
					  ON WWAN8 = ABAN8
					  AND WWIDLN = 0  
					 ' || SHIPTO_DYNAMIC ||'
				   INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, :CurrentJulianDate)) AL
					  ON  AL.ALAN8 = ABAN8
				   INNER JOIN [SCDATA].F03012     DEFAULTCOMPANY					/* Address Book Join Customer Master*/
					  ON DEFAULTCOMPANY.AIAN8 = ABAN8
					  AND DEFAULTCOMPANY.AICO  = ''00000''
					  AND (DEFAULTCOMPANY.AIBADT IN (''S'', ''X'')) ';

				IF (Company <> '00000') THEN
					SQL_DYNAMIC2 := SQL_DYNAMIC2 || N' LEFT OUTER JOIN [SCDATA].F03012     OVERRIDECOMPANY					/* Address Book Join Customer Master*/
					  ON OVERRIDECOMPANY.AIAN8 = ABAN8
					  AND OVERRIDECOMPANY.AICO = '''||Company||''' ';
				END IF;
				IF(RetrievePrimaryPhoneTMP = 1) THEN 		  
				   SQL_DYNAMIC2 := SQL_DYNAMIC2 || N' LEFT OUTER JOIN	[SCDATA].FQ67107				                 /* Profile Extended Information*/
					  ON PS$9AN8 = ABAN8
					  AND PS$9TYP = 0											 /* CUSTOMER */
				   LEFT OUTER JOIN [SCCTL].F0005
					  ON PS$9AN8 IS NULL
					  AND DRSY = ''H00''
					  AND DRRT = ''TA''
					  AND SUBSTR(DRKY, 10 - '||CodeLength||' + 1, '||CodeLength||') = ABTAXC ';
				END IF;
			
				SQL_DYNAMIC2 := SQL_DYNAMIC2 ||	N' WHERE ABAN8 = :ParentAddressNumber ' || WHERE_DYNAMIC || N' )  SHIPTOS ';
				
				/* Join to resolve Phone */
				IF(RetrievePrimaryPhoneTMP = 1) THEN 	
					SQL_DYNAMIC2 := SQL_DYNAMIC2 ||	N'
					LEFT OUTER JOIN [SCDATA].F0115 PH
						ON WPAN8 = AddressNumber
						AND WPIDLN = 0
						AND (WPPHTP = (CASE WHEN IndividualCompanyFlag = 0 THEN ''' || PHONECONSTANTIND || ''' ELSE ''' || PHONECONSTANTCMP || ''' END )) ';
				END IF;

				

				/* Where to return top 1 phones and close sub select 3 */
				IF(RetrievePrimaryPhoneTMP = 1) THEN
					SQL_DYNAMIC2 := SQL_DYNAMIC2 ||	N' ) SHIPTOS2 WHERE RW = 1) ';
				ELSE 
					SQL_DYNAMIC2 := SQL_DYNAMIC2 ||	N' ) ';
				END IF;

				SQL_DYNAMIC2 := SQL_DYNAMIC2 ||	N'  
			SELECT  AddressNumber, ParentAddressNumber, AlphaName, MailingName, AddressLine1,
				AddressLine2, AddressLine3, AddressLine4, City, State,
				ZipCode, Country, ContactId, Firstname, Middlename, Lastname, Nickname,
				0 AS PoBoxFlag, DeliveryInstructions1, DeliveryInstructions2, Status, Phone, AlternateAddressKey, Selected,
				(SELECT COUNT(1) FROM SHIPTOS3) AS TotalRowCount 
			FROM SHIPTOS3
			WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';


		OPEN ResultData1 FOR SQL_DYNAMIC || SQL_DYNAMIC2 USING WebAccountId, StoreId, ParentAddressNumber, CurrentJulianDate, ParentAddressNumber, OrgStrType, ParentAddressNumber, Name, Address, City, State, ZipCode, Country, 
															   WebAccountId, StoreId, ParentAddressNumber, CurrentJulianDate, ParentAddressNumber, Name, Address, City, State, ZipCode, Country, 
															   PageIndex, PageSize, RowStart, RowEnd;
END;

  /
-- #desc								Reads the Customer/Consumer Attibutes view with the given information
-- #bl_class							Premier.Club.MembershipAttributes.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param MembershipAddressNumber		Address Number to search for
-- #param MembershipUniqueId			Membership Unique Id to search for

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetMembershipAttributes
(
	MembershipAddressNumber IN DECIMAL,
	MembershipUniqueId		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT	B.CASEQ			AS SequenceNo, 
			A.MA$9AID		AS AttributeId, 
			C.AMDSC1		AS Description1, 
			C.AMDSC2		AS Description2,
			A.MA$9DASN		AS AttributeSelection,
			B.CA$9FASN		AS SelectionCriteria,
			B.CA$9ADRV		AS AttributeDriver,
			C.AM$9DTY		AS AttributeType,
			C.AMSY			AS ProductCode,
			C.AMRT			AS UserDefinedCodes
	FROM	
			[SCDATA].FQ6759B1 A, 
			[SCDATA].FQ675911 B,
			[SCDATA].FQ675950 C, 
			[SCDATA].FQ6759B0 D
	WHERE	
	        (A.MA$9AID = B.CA$9AID)
	        AND (A.MA$9AID = C.AM$9AID)
	        AND (A.MAUKID = D.MMUKID AND B.CA$9CLUB = D.MM$9CLUB)
			AND (A.MA$9AN8 = MembershipAddressNumber)
			AND	A.MAUKID = MembershipUniqueId 
	ORDER BY 
			B.CASEQ;
END;
  /

-- #desc				Read marketing code values
-- #bl_class			Premier.Commerce.MarketingCodeValues.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param MarketingCode	Marketing Code  search criteria

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMarketingCodeValues
(
    MarketingCode	IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
OPEN ResultData1 FOR

    SELECT  MK$9MKT AS MarketingCode, 
			MK$9MCOL AS PriceKey, 
			MK$9MVAL AS PriceKeyValue
    -- Marketing Code Detail	
	FROM  [SCDATA].FQ674205 MKDET
	WHERE 
	-- Marketing Code filter	
	TRIM(MKDET.MK$9MKT) = TRIM(MarketingCode);	
END;




  /
-- #desc					Read P4210 Version Rule Details
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param RuleType			Rule Type
-- #param CategoryCode		Category Code
-- #param ProductCode		Product Code
-- #param UserDefinedCode	User Defined Code


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetP4210VersRuleDetails
(
	InstallationID		IN NVARCHAR2,
	RuleUniqueID		IN DECIMAL,
	ProductCode			IN NVARCHAR2,
	UserDefinedCode		IN NVARCHAR2,
	ResultData1   OUT   GLOBALPKG.refcursor
)
AS
	CodeLength  		INT := 0;
BEGIN
	BEGIN
	    -- Get Code Length
	    SELECT
	        DTCDL INTO CodeLength
	    FROM
	        [SCCTL].F0004
	    WHERE
	        TRIM(DTSY) = ProductCode AND TRIM(DTRT) = UserDefinedCode;
        EXCEPTION WHEN NO_DATA_FOUND THEN
        CodeLength := 0;
    END;

	OPEN ResultData1 FOR
		SELECT
			A.RDUKID				AS RuleUniqueID,
			A.RDLNID				AS LineID,
			A.RDKY					AS UserDefinedKey,
			NVL(B.DRDL01,' ')		AS DescriptionUDC,
			A.RDMCU					AS BranchPlant,
			NVL(C.MCDL01,' ')		AS BranchPlantDescription,
			A.RD$9AN8				AS AddressNumber,
			NVL(D1.ABALPH, NVL(E.PRALPH,''))		AS AlphaName
		FROM
			[SCDATA].FQ674231 A,
			[SCCTL].F0005 B,
			[SCDATA].F0006 C, -- Branch Master
			[SCDATA].F0101 D1, -- Address Book Master
			[SCDATA].FQ670302 E -- Consumer Master
		WHERE
			RD$9INID = InstallationID AND
			RDUKID = RuleUniqueID
			AND C.MCMCU(+) = A.RDMCU
			AND D1.ABAN8(+) = A.RD$9AN8
			AND E.PR$9AN8(+) = A.RD$9AN8
			AND SUBSTR(B.DRKY(+), 10 - CodeLength + 1, CodeLength) = A.RDKY
			AND TRIM(B.DRRT(+)) = TRIM(UserDefinedCode)
			AND TRIM(B.DRSY(+)) = TRIM(ProductCode);
END;
  /
-- #desc						Get the Sales Order Status
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				COM_GetSalesOrderRecentList, COM_GetSalesOrderHeadSrchList

 -- #param OrderNumber			Order Number
-- #param OrderCompany			Order Company
-- #param OrderType				Order Type
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Type
-- #param OpenLnStatus			Open Line Status
-- #param FreightLnType			Freight Line Type
-- #param DiscountLnType		Discount Line Type
-- #param SurchargeLnType		Surcharge Line Type

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetSalesOrderStatusFnc
(
	OrderNumber		IN NUMBER,
	OrderCompany	IN NCHAR,
	OrderType		IN NCHAR,  
	OpenLnStatus    IN NCHAR,
	FreightLnType   IN NCHAR,
	DiscountLnType  IN NCHAR,
	SurchargeLnType IN NCHAR
)
RETURN NVARCHAR2 IS
	SalesStatusResult NVARCHAR2(256);
    Flag NUMBER;
    OpenLnCount NUMBER;
BEGIN
	SELECT 
        COUNT(1) INTO Flag
    FROM 
        [SCDATA].F4211
    WHERE SDDOCO = OrderNumber
	   AND SDKCOO = OrderCompany 
	   AND SDDCTO = OrderType 
	   AND (SDLTTR < '980' OR SDLTTR = '995') 
	   AND SDLNTY NOT IN (FreightLnType, DiscountLnType, SurchargeLnType)
	   AND ROWNUM = 1;

	IF (Flag = 1) THEN 
        SELECT 
            COUNT(1) INTO OpenLnCount
        FROM 
            [SCDATA].F4211
        WHERE 
            SDDOCO = OrderNumber
            AND SDKCOO = OrderCompany 
            AND SDDCTO = OrderType 
            AND SDNXTR <= OpenLnStatus
            AND SDLNTY NOT IN (FreightLnType, DiscountLnType, SurchargeLnType)
            AND ROWNUM = 1;

        IF (OpenLnCount = 1) THEN 
            SalesStatusResult := 'OPEN';
        ELSE
            SalesStatusResult := 'COMPLETED';
        END IF;
	ELSE
		SELECT 
            COUNT(1) INTO Flag
        FROM 
            [SCDATA].F42119
        WHERE 
           SDDOCO = OrderNumber
           AND SDKCOO = OrderCompany 
           AND SDDCTO = OrderType 
           AND (SDLTTR < '980' OR SDLTTR = '995') 
           AND SDLNTY NOT IN (FreightLnType, DiscountLnType, SurchargeLnType)
           AND ROWNUM = 1; 

        IF (Flag = 1) THEN 

			SELECT 
				COUNT(1) INTO OpenLnCount
			FROM 
				[SCDATA].F42119
			WHERE 
				SDDOCO = OrderNumber
				AND SDKCOO = OrderCompany 
				AND SDDCTO = OrderType 
				AND SDNXTR <= OpenLnStatus
				AND SDLNTY NOT IN (FreightLnType, DiscountLnType, SurchargeLnType)
				AND ROWNUM = 1;

			IF (openLnCount = 1) THEN 
				SalesStatusResult := 'OPEN';
			ELSE
				SalesStatusResult := 'COMPLETED';
			END IF;
		ELSE
			SalesStatusResult := 'CANCELLED';
		END IF;
	END IF;
    RETURN SalesStatusResult;

END COM_GetSalesOrderStatusFnc;
  /

-- #desc					N/A
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrder

-- #param Company			Company Number to search for.
-- #param OrderType			Order number to search for.
-- #param OrderNumber		Order type to search for.
-- #param InstallationID	Installation Id.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderHeader
(
	Company			IN NCHAR,
	OrderType		IN NCHAR,
	OrderNumber		IN NUMBER,
	InstallationID	IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
OPEN ResultData1 FOR

    SELECT 
		A.SHKCOO AS Company,
		A.SHDOCO AS OrderNumber,
		A.SHDCTO AS OrderType,   
		A.SHMCU  AS BranchPlant,
		A.SHOKCO AS OriginalOrderCo,    
		A.SHOORN AS OriginalOrderNo,
		A.SHOCTO AS OriginalOrderType,     
		A.SHAN8  AS CustomerNumber,
		A.SHSHAN AS ShipToID,
		A.SHDRQJ AS RequestedDate,     
		A.SHTRDJ AS OrderDate,    
		A.SHPDDJ AS PromisedDate,
		A.SHCNDJ AS CancelDate,
		A.SHVR01 AS CustomerPO,     
		A.SHDEL1 AS DeliveryInstructions1,
		A.SHDEL2 AS DeliveryInstructions2,     
		A.SHINMG AS PrintMesg,    
		A.SHPTC  AS PaymentTerms,
		A.SHRYIN AS PaymentInstrument,     
		A.SHASN  AS AdjustmentSchedule,     
		A.SHPRGP AS PricingGroup,
		A.SHTRDC AS TradeDiscount,
		A.SHTXA1 AS TaxArea,     
		A.SHEXR1 AS TaxExplanationCode,    
		A.SHTXCT AS Certificate,
		A.SHATXT AS AssociatedText,     
		A.SHHOLD AS HoldOrdersCode,    
		A.SHPLST AS PricePickListYN,
		A.SHINVC AS InvoiceCopies,
		A.SHANBY AS BuyerNumber,
		A.SHCARS AS Carrier,
		A.SHMOT  AS ModeOfTransport,      
		A.SHROUT AS RouteCode,
		A.SHSTOP AS StopCode,     
		A.SHZON  AS ZoneNumber,      
		A.SHFRTH AS FreightCode,     
		A.SHAFT  AS ApplyFreightYN,     
		A.SHWUMD AS WeightDisplayUOM,     
		A.SHVUMD AS VolumeDisplayUOM,    
		A.SHAUTN AS AuthorizationNo,
		A.SHCACT AS CreditBankAcctNo,     
		A.SHCEXP AS CreditBankExpiredDate,    
		A.SHCRRM AS CurrencyMode,     
		A.SHCRCD AS CurrencyCode,
		A.SHCRR  AS ExchangeRate,
		A.SHORBY AS OrderedBy,     
		A.SHTKBY AS OrderTakenBy,    
		A.SHURCD AS UserReservedCode,
		A.SHURDT AS UserReservedDate,     
		A.SHURAT AS UserReservedAmnt,
		A.SHURAB AS UserReservedNo,
		A.SHURRF AS UserReservedRef,     
		A.SHUSER AS UserId,    
		A.SHUPMJ AS DateUpdated,
		B.SH$9AN8 AS SCBillToNumber,  
		B.SH$9TYP AS AddressType, 
		B.SH$9SHAN AS SCShipToNumber, 
		B.SH$9WHI  AS WarehouseInstructions,  
		B.SH$9MKT  AS MarketingCode, 
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		B.SHIDLN AS SCBillToContactID,
		B.SHRCK7 AS SCShipToContactID,
		A.SHRCD AS ReasonCode,
		NVL(Tax.STUTP, 0) AS UseTaxedPrices
      FROM 
		[SCDATA].F4201 A
	 LEFT OUTER JOIN [SCDATA].FQ674201 B
	   ON A.SHKCOO = B.SHKCOO 
       AND A.SHDOCO = B.SHDOCO 
       AND A.SHDCTO = B.SHDCTO
	 LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.SHDOCO 
		AND Tax.STDCTO = A.SHDCTO
		AND Tax.STKCOO = A.SHKCOO
    WHERE A.SHKCOO = Company
		AND A.SHDOCO = OrderNumber
		AND A.SHDCTO = OrderType
     
    UNION ALL
    SELECT 
		A.SHKCOO AS Company,
		A.SHDOCO AS OrderNumber,
		A.SHDCTO AS OrderType,   
		A.SHMCU AS BranchPlant,
		A.SHOKCO AS OriginalOrderCo,    
		A.SHOORN AS OriginalOrderNo,
		A.SHOCTO AS OriginalOrderType,     
		A.SHAN8 AS CustomerNumber,
		A.SHSHAN AS ShipToID,
		A.SHDRQJ AS RequestedDate,     
		A.SHTRDJ AS OrderDate,    
		A.SHPDDJ AS PromisedDate,
		A.SHCNDJ AS CancelDate,
		A.SHVR01 AS CustomerPO,     
		A.SHDEL1 AS DeliveryInstructions1,
		A.SHDEL2 AS DeliveryInstructions2,     
		A.SHINMG AS PrintMesg,    
		A.SHPTC AS PaymentTerms,
		A.SHRYIN AS PaymentInstrument,     
		A.SHASN AS AdjustmentSchedule,     
		A.SHPRGP AS PricingGroup,
		A.SHTRDC AS TradeDiscount,
		A.SHTXA1 AS TaxArea,     
		A.SHEXR1 AS TaxExplanationCode,    
		A.SHTXCT AS Certificate,
		A.SHATXT AS AssociatedText,     
		A.SHHOLD AS HoldOrdersCode,    
		A.SHPLST AS PricePickListYN,
		A.SHINVC AS InvoiceCopies,
		A.SHANBY AS BuyerNumber,
		A.SHCARS AS Carrier,
		A.SHMOT  AS ModeOfTransport,      
		A.SHROUT AS RouteCode,
		A.SHSTOP AS StopCode,     
		A.SHZON AS ZoneNumber,      
		A.SHFRTH AS FreightCode,     
		A.SHAFT AS ApplyFreightYN,     
		A.SHWUMD AS WeightDisplayUOM,     
		A.SHVUMD AS VolumeDisplayUOM,    
		A.SHAUTN AS AuthorizationNo,
		A.SHCACT AS CreditBankAcctNo,     
		A.SHCEXP AS CreditBankExpiredDate,    
		A.SHCRRM AS CurrencyMode,     
		A.SHCRCD AS CurrencyCode,
		A.SHCRR AS ExchangeRate,
		A.SHORBY AS OrderedBy,     
		A.SHTKBY AS OrderTakenBy,    
		A.SHURCD AS UserReservedCode,
		A.SHURDT AS UserReservedDate,     
		A.SHURAT AS UserReservedAmnt,
		A.SHURAB AS UserReservedNo,
		A.SHURRF AS UserReservedRef,     
		A.SHUSER AS UserId,    
		A.SHUPMJ AS DateUpdated,
		B.SH$9AN8 AS SCBillToNumber,  
		B.SH$9TYP AS AddressType, 
		B.SH$9SHAN AS SCShipToNumber, 
		B.SH$9WHI AS WarehouseInstructions,  
		B.SH$9MKT AS MarketingCode, 
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		B.SHIDLN AS SCBillToContactID,
		B.SHRCK7 AS SCShipToContactID,
		A.SHRCD AS ReasonCode,
		NVL(Tax.STUTP, 0) AS UseTaxedPrices
     FROM [SCDATA].F42019 A
	 LEFT OUTER JOIN [SCDATA].FQ674201 B
		ON A.SHKCOO = B.SHKCOO 
		AND A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO
	 LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.SHDOCO 
		AND Tax.STDCTO = A.SHDCTO
		AND Tax.STKCOO = A.SHKCOO
     WHERE A.SHKCOO = Company
		AND A.SHDOCO = OrderNumber
		AND A.SHDCTO = OrderType;

END;





  /
-- #desc					Profile Read only info
-- #bl_class				N/A	
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_Z, COM_GetOrderShipConfInfo, COM_GetReturnOrderInfo

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber
-- #param SCBillToNumber	AddressNumber
-- #param AddressType		AddressType

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderInfo_BillTo
(
	OrderCompany	IN NVARCHAR2,
	OrderType		IN NVARCHAR2,
	OrderNumber		IN DECIMAL,
	SCBillToNumber	IN DECIMAL,
	AddressType		IN DECIMAL,
	ContactID		IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS

NUM INT;
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

BEGIN

	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETSALESORDINF_BILLTO_A';

	/*SEARCH FOR A BILLTO ADDRESS OVERRIDE*/
	INSERT 	INTO [SCLIBRARY].COM_GETSALESORDINF_BILLTO_A
	SELECT 
		OAMLNM AS MailingName,
		OAADD1 AS AddressLine1, 
		OAADD2 AS AddressLine2, 
		OAADD3 AS AddressLine3,
		OAADD4 AS AddressLine4,
		OACTY1 AS City,
		OAADDS AS State,
		OAADDZ AS ZipCode,
		OACTR AS Country
	FROM [SCDATA].F4006
	WHERE
		OAANTY = 1 --BILLTO TYPE
		AND OADOCO = OrderNumber
		AND TRIM(OADCTO) = OrderType
		AND TRIM(OAKCOO) = OrderCompany;

    SELECT COUNT(*) INTO NUM FROM [SCLIBRARY].COM_GETSALESORDINF_BILLTO_A;
    
	--NO BILLTO OVERRIDE GET BILLTO INFORMATION FOR THE CONSUMER/CUSTOMER
	IF(NUM = 0) THEN
		IF(AddressType = 0) THEN--CUSTOMER
			INSERT 	INTO [SCLIBRARY].COM_GETSALESORDINF_BILLTO_A
				SELECT 
					WW.WWMLNM AS MailingName,
					AL.ALADD1 AS AddressLine1, 
					AL.ALADD2 AS AddressLine2, 
					AL.ALADD3 AS AddressLine3,
					AL.ALADD4 AS AddressLine4,
					AL.ALCTY1 AS City,
					AL.ALADDS AS State,
					AL.ALADDZ AS ZipCode,
					AL.ALCTR AS Country
				FROM [SCDATA].F0101 AB	/* Customer Master */
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	/* Address Book Join */
					ON AL.ALAN8 = AB.ABAN8
				INNER JOIN [SCDATA].F0111 WW	/* Contact Information */
					ON WW.WWAN8 = AB.ABAN8
					AND WW.WWIDLN = ContactID
				WHERE 
					ABAN8 = SCBillToNumber;
		ELSE --CONSUMER
			--Read Consumer Information
			INSERT 	INTO [SCLIBRARY].COM_GETSALESORDINF_BILLTO_A
			SELECT 				
				PCMLNM AS MailingName,
				PRADD1 AS AddressLine1,
				PRADD2 AS AddressLine2,
				PRADD3 AS AddressLine3,
				PRADD4 AS AddressLine4,
				PRCTY1 AS City,
				PRADDS AS State,
				PRADDZ AS ZipCode,
				PRCTR AS Country
			FROM [SCDATA].FQ670302, --Consumer
			     [SCDATA].FQ67303  --Contact Information
					
			WHERE 
				PR$9AN8 = SCBillToNumber
                AND PR$9AN8 = PC$9AN8
				AND PCIDLN = ContactID;
		END IF;
	END IF;

OPEN ResultData1 FOR
SELECT * FROM [SCLIBRARY].COM_GETSALESORDINF_BILLTO_A;


END;
  /
-- #desc					Sales order payment read only info
-- #bl_class				N/A		
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_Z

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderInfo_Payments
(
	OrderCompany	IN NVARCHAR2,
	OrderType		IN NVARCHAR2,
	OrderNumber	    IN DECIMAL,
	ResultData1     OUT GLOBALPKG.refcursor
)
AS	

BEGIN	
	OPEN ResultData1 FOR
		SELECT  DISTINCT
				PTRYIN AS PaymentInstrument,
				(CASE 
					WHEN TRIM(PTATS) = '01' OR TRIM(PTATS) = '02'  then PTATRM
					WHEN TRIM(PTATS) = '05' then PTSTRM
					ELSE 0
				 END )		AS	CreditCardAmount,
				PTCHKP	AS	CheckAmount,
				PTCASP	AS	CashAmount,
				PT$9CODAM	AS	CODAmount,
				PT$9ACNT	AS	OnAccountAmount,
				PTOPY1	AS	OtherAmount,
				PTOPY2	AS	OtherAmount2,
				(CASE 
					WHEN TRIM(PTATS) = '02' then TO_CHAR(PTABTM)
					WHEN TRIM(PTATS) = '05' then TO_CHAR(PT$9VSATCD)
					ELSE ''
				 END ) AS AuthorizationCode,
				PTCRCI AS MaskedCreditCardNumber,
				PTCARD AS CreditCardType,
				PTATS AS TransactionStatus,
				B.PT$9FRUC AS FreightUpCharge,
				A.PTCEXP AS ExpirationDate,			
				A.PTALPH	AS NameOnCreditCard,
				PTSTRM		AS SettleAmount,
				CASE WHEN A.PTATS = '05' THEN B.PT$9PNREF2 ELSE B.PT$9PAYID END AS PNRef,
				A.PTCRCD	AS CurrencyCode,
				CASE WHEN A.PTATS = '02' THEN B.PT$9CCSURE  ELSE 0 END AS SurchargeAmount
			FROM	[SCDATA].F004201 A,
		    [SCDATA].FQ670041 B
			WHERE	
		A.PTDOCO = OrderNumber
		AND	TRIM(A.PTKCOO) = TRIM(OrderCompany)
		AND	TRIM(A.PTDCTO) = TRIM(OrderType)
		AND A.PTDOCO = B.PTDOCO(+)
		AND A.PTDCTO = B.PTDCTO(+)
		AND A.PTKCOO = B.PTKCOO(+)
		AND A.PTLNID = B.PTLNID(+);
END;

  /
-- #desc				    Load the order payments List
-- #bl_class			    Premier.Commerce.SalesOrderPayments.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param OrderCompany		Company id to search for.
-- #param OrderType		    Document type to search for.
-- #param OrderNumber		Order number to search for.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderPayments
(
    OrderCompany    IN VARCHAR2,
	OrderType       IN VARCHAR2,
	OrderNumber     IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT A.PTDOCO AS OrderNumber, 
            A.PTDCTO AS OrderType,
            A.PTKCOO AS OrderCompany, 
            A.PTSFXO AS OrderSuffix,
            A.PTLNID AS LineNumber,
            A.PTSEQ AS SequenceNumber,
			A.PTPOF AS OriginationFlag,
            A.PTRYIN AS PaymentInstrument,
            CAST(round(A.PTATRM, 0) AS DECIMAL) AS AuthorizeAmount,
            A.PTALPH AS AlphaName, 
            A.PTAN8 AS AddressNumber,
            A.PTADD1 AS AddressLine1, 
            A.PTADD2 AS AddressLine2,
            A.PTCTY1 AS City, 
            A.PTADDS AS State, 
            B.PTADDZ AS ZipCode,
            A.PTCTR AS Country, 
            A.PTCARD AS CreditCardType,
            A.PTCRCI AS CreditCardNumber,
            A.PTCEXP AS CreditCardExpDate,
            A.PTCASP AS CashAmount,
            CAST(round(A.PTCHKP, 0) AS DECIMAL) AS CheckAmount,
            A.PTCKNU AS CheckNumber,
            CAST(round(A.PTOPY1, 0) AS DECIMAL) AS OtherAmount,
            CAST(round(A.PTOPY2, 0) AS DECIMAL) AS OtherAmount2,
            A.PTCRCD AS Currency, 
            A.PTEMCU AS CostCenter,
            A.PTDL01 AS Reference, 
            A.PTATS AS TransactionStatus,
            CAST(round(B.PT$9ACNT, 0) AS DECIMAL)  AS OnAccountAmount,
            CAST(round(B.PT$9CODAM, 0) AS DECIMAL) AS CODAmount,
            B.PT$9FRUC AS FreightUpCharge,
            B.PT$9VSCVRS AS CVResult,
            B.PT$9VSIAVS AS IAVS,
            B.PT$9VSSTMC AS StreetMatch,
            B.PT$9VSZPMC AS ZipMatch, 
            CASE WHEN A.PTATS = '05' THEN B.PT$9VSATCD ELSE A.PTABTM END AS AuthCode,
			CASE WHEN A.PTATS = '05' THEN B.PT$9PNREF2 ELSE B.PT$9PAYID END AS PNRef,
            A.PTATRD AS TransactionDate,
            A.PTSTRM  AS SettleAmount, 
            A.PTSETD AS SettleDate,
            A.PTPID AS ProgramId, 
            B.PT$9REGID AS Register,
            B.PT$9DRAW AS Drawer,
            B.PTEDBT AS EditBatch,
			B.PT$9VSCCN AS CreditCardNumRef,
            CASE WHEN A.PTATS = '02' THEN B.PT$9CCSURE  ELSE 0 END AS SurchargeAmount
        FROM 
            [SCDATA].F004201 A, 
		    [SCDATA].FQ670041 B 
	    WHERE 
	        B.PTDOCO(+) = A.PTDOCO
        AND B.PTDCTO(+) = A.PTDCTO
        AND B.PTKCOO(+) = A.PTKCOO
        AND B.PTLNID(+) = A.PTLNID
        AND B.PTSFXO(+) = A.PTSFXO
        AND B.PTSEQ(+) = A.PTSEQ
        AND B.PTPOF(+) = A.PTPOF
		AND A.PTDOCO = OrderNumber 
	    AND TRIM(A.PTDCTO) = TRIM(OrderType)
	    AND TRIM(A.PTKCOO) = TRIM(OrderCompany);
END;
  /

-- #desc							N/A
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					COM_GetSalesOrder

-- #param Company					Company Number to search for.
-- #param OrderType					Order number to search for.
-- #param OrderNumber				Order type to search for.
-- #param InstallationID			Installation Id
-- #param RetrieveWebContentInfo	Condition to validate if Retrieve Web Content Info or no.
-- #param LangPref					Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderDetail
(
	Company						IN NCHAR,
	OrderType					IN NCHAR,
	OrderNumber					IN NUMBER,
	InstallationID				IN NCHAR,
	RetrieveWebContentInfo      IN INT,
	LangPref					IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
 )
AS
BEGIN
	IF ( RetrieveWebContentInfo = 0) THEN
	 OPEN ResultData1 FOR
		SELECT 
			A.SDKCOO AS Company, 
			A.SDDOCO AS OrderNumber,
			A.SDDCTO AS OrderType,
			A.SDLNID AS LineNumberID,
			A.SDMCU AS BusinessUnit,
			A.SDOKCO AS OriginalOrderCompany,     
			A.SDOORN AS OriginalOrderNumber,     
			A.SDOCTO AS OriginalOrderType,
			A.SDOGNO AS OriginalOrderLineNumber,
			A.SDDMCT AS AgreementNumber,
			A.SDAN8 AS BillToNumber,
			A.SDSHAN AS ShipToID,
			A.SDDRQJ AS RequestedDate,     
			A.SDTRDJ AS TransactionDate,     
			A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
			A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
			A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)   
			A.SDCNDJ AS CancelDate,		    
			A.SDITM AS ItemNumber,
			A.SDLITM AS ItemNo,     
			A.SDAITM AS AuxItemNumber,
			A.SDDSC1 AS ItemDescription1,		/* Retrieve1 for Tracking lines */
			N''	AS ItemDescription2,
			N''  AS URL,
			A.SDLNTY AS LineType,
			A.SDNXTR AS NextStatus,     
			A.SDLTTR AS LastStatus,     
			A.SDEMCU AS RevenueBusinessUnit,
			A.SDHDBU AS F4201BranchPlant,
			A.SDRLIT AS ItemNumberRelatedKit,
			A.SDKTLN AS KitMasterLineNo,
			A.SDCPNT AS ComponentLineNumber,
			A.SDRKIT AS RelatedKitComponent,    
			A.SDUOM AS TransactionUOM,
			A.SDUORG AS QuantityOrdered,
			A.SDSOQS AS QuantityShipped,
			A.SDSOBK AS QuantityBackOrdered,
			A.SDSOCN AS QuantityCanceled,
			A.SDUPRC AS UnitPrice,
			A.SDFUP  AS ForeignUnitPrice,
			A.SDAEXP AS ExtendedPrice,
			A.SDFEA	 AS ForeignExtPrice,
			A.SDPROV AS OverridePrice,     
			A.SDUNCS AS UnitCost,
			A.SDFUC AS ForeignUnitCost,
			A.SDECST AS ExtendedCost,
			A.SDFEC AS ForeignExtendedCost,
			A.SDCSTO AS CostOverrideMode,
			A.SDINMG AS ItemFlashMessage,     
			A.SDPTC AS PaymentTerms,      
			A.SDRYIN AS PaymentInstrument,
			A.SDDTBS AS BasedOnDate,
			A.SDTRDC AS DiscountTrade,
			A.SDASN AS AdjustmentSchedule,
			A.SDPRGR AS PricingCategory,     
			A.SDCLVL AS PricingCategoryLevel,
			A.SDCADC AS DiscountCash,
			A.SDKCO AS InvoiceCompany,
			A.SDDOC AS InvoiceNo,
			A.SDDCT AS InvoiceDocType,
			A.SDTAX1 AS IsTaxable,     
			A.SDTXA1 AS TaxArea,     
			A.SDEXR1 AS TaxExplanationCode,
			A.SDLOB AS LineofBusiness,      
			A.SDEUSE AS EndUse,     
			A.SDDTYS AS DutyStatus,
			A.SDANBY AS BuyerNumber,
			A.SDCARS AS Carrier,
			A.SDMOT AS ModeOfTransport,
			A.SDUOM4 AS PricingUOM,
			A.SDITWT AS ItemWeight,
			A.SDWTUM AS WeightUOM,
			A.SDITVL AS ItemVolume,
			A.SDVLUM AS VolumeUOM,     
			A.SDRPRC AS RepriceBasketPriceCat,     
			A.SDORPR AS OrderRepriceCategory,
			A.SDRCD AS ReasonCode,
			A.SDUPC1 AS PriceCode1,     
			A.SDUPC2 AS PriceCode2,
			A.SDUPC3 AS PriceCode3,
			A.SDCRCD AS CurrencyCode,
			A.SDURRF AS UserReservedReference,     
			A.SDUSER AS UserID,
			A.SDPID AS ProgramId,
			A.SDJOBN AS WorkStationId,
			A.SDUPMJ AS DateUpdated,
			B.SD$9AN8 AS SCBillToNumber,  
			B.SD$9SHAN AS SCShipToNumber, 
			B.SD$9TYP AS AddressType, 
			B.SD$9MKTG AS MarketingCode, 
			B.SD$9IGPR AS ItemGroupPriority, 
			B.SDKIT AS ItemNumberShortKit, 
			B.SDMMCU AS CostCenterAlt,   
			B.SD$9SLN AS ShipLineNumber,  
			B.SD$9FQTY AS FamilyQuantityItems, 
			B.SD$9IID AS ItemGroupKeyID, 
			B.SD$9STS AS NextStatus,  
			B.SDQNTY AS FamilyQuantityItems,   
			B.SD$9UOM AS FamilyUnitOfMeasure,
			B.SDIDLN AS SCBillToContactID,   
			B.SDRCK7 AS SCShipToContactID,
			IM.IMSTKT	AS StockingType,
			A.SDLOCN AS Location,
			A.SDLOTN AS LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			NVL(C.RFOGNO, 0 ) AS ParentLineNo,
			NVL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
			NVL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
			NVL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
			NVL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
			NVL(Tax.DTUTA,0)   AS UnitTaxAmount,
			NVL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
			NVL(Tax.DTETA,0)   AS ExtendedTaxAmount,
			NVL(Tax.DTFETA,0)  AS ForeignExtTaxAmount
		FROM [SCDATA].F4211 A
		LEFT OUTER JOIN [SCDATA].FQ674211 B
   			ON A.SDKCOO = B.SDKCOO 
		   AND A.SDDOCO = B.SDDOCO 
		   AND A.SDDCTO = B.SDDCTO 
		   AND A.SDLNID = B.SDLNID
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
			ON  C.RFDOCO = A.SDDOCO
			AND C.RFDCTO = A.SDDCTO
			AND C.RFKCOO = A.SDKCOO
			AND C.RFLNID = A.SDLNID
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.SDDOCO 
			AND Tax.DTDCTO = A.SDDCTO
			AND Tax.DTKCOO = A.SDKCOO 
			AND Tax.DTLNID = A.SDLNID
		WHERE
		    A.SDKCOO = Company 
		    AND A.SDDOCO = OrderNumber
		    AND A.SDDCTO = OrderType
    UNION ALL
    SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)
		A.SDCNDJ AS CancelDate,   
		A.SDITM AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		A.SDDSC1 AS ItemDescription1,		/* Retrieve1 for Tracking lines */
		N''	AS ItemDescription2,
		N'' AS URL,
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost,
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,      
		A.SDPRGR AS PricingCategory,
		A.SDCLVL AS PricingCategoryLevel,
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,
		A.SDRCD AS ReasonCode,
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS UserID,
		A.SDPID AS ProgramId,
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
	   A.SDLOCN AS Location,
	   A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		NVL(C.RFOGNO, 0 ) AS ParentLineNo,
		NVL(TxHistory.DTTUPRC,0) AS TaxedUnitPrice,
		NVL(TxHistory.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		NVL(TxHistory.DTTAEXP,0) AS TaxedExtendedPrice,
		NVL(TxHistory.DTTFEA,0)  AS ForeignTaxedExtPrice,
		NVL(TxHistory.DTUTA,0)   AS UnitTaxAmount,
		NVL(TxHistory.DTFUTA,0)  AS ForeignUnitTaxAmount,
		NVL(TxHistory.DTETA,0)   AS ExtendedTaxAmount,
		NVL(TxHistory.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F42119 A
	LEFT OUTER JOIN [SCDATA].FQ674211 B
   		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
    LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO
		AND C.RFDCTO = A.SDDCTO
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.SDDOCO 
		AND TxHistory.DTDCTO = A.SDDCTO
		AND TxHistory.DTKCOO = A.SDKCOO 
		AND TxHistory.DTLNID = A.SDLNID
	WHERE
        A.SDKCOO = Company
        AND A.SDDOCO = OrderNumber
        AND A.SDDCTO = OrderType;
	ELSE
	 OPEN ResultData1 FOR
		SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)   
		A.SDCNDJ AS CancelDate,		    
		A.SDITM AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		NVL(ContenDesc.DESC1, A.SDDSC1)	AS ItemDescription1,
		NVL(ContenDesc.DESC2, A.SDDSC2)	AS ItemDescription2,
		ContenDesc.URL AS URL,
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,    
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost,
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,
		A.SDPRGR AS PricingCategory,     
		A.SDCLVL AS PricingCategoryLevel,
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		A.SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,
		A.SDRCD AS ReasonCode,
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS UserID,
		A.SDPID AS ProgramId,
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
	   A.SDLOCN AS Location,
	   A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		NVL(C.RFOGNO, 0 ) AS ParentLineNo,
		NVL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		NVL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		NVL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		NVL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		NVL(Tax.DTUTA,0)   AS UnitTaxAmount,
		NVL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		NVL(Tax.DTETA,0)   AS ExtendedTaxAmount,
		NVL(Tax.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F4211 A
	LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.SDITM, LangPref, 0) ) ContenDesc 
		ON ContenDesc.DESCITM = A.SDITM
	LEFT OUTER JOIN [SCDATA].FQ674211 B
   		ON A.SDKCOO = B.SDKCOO 
       AND A.SDDOCO = B.SDDOCO 
       AND A.SDDCTO = B.SDDCTO 
       AND A.SDLNID = B.SDLNID
    LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO
		AND C.RFDCTO = A.SDDCTO
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.SDDOCO 
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID
	WHERE
        A.SDKCOO = Company 
        AND A.SDDOCO = OrderNumber
        AND A.SDDCTO = OrderType
    UNION ALL
    SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)
		A.SDCNDJ AS CancelDate,   
		A.SDITM AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		NVL(ContenDesc.DESC1, A.SDDSC1)	AS ItemDescription1,
		NVL(ContenDesc.DESC2, A.SDDSC2)	AS ItemDescription2,
		ContenDesc.URL AS URL,
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost,
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,      
		A.SDPRGR AS PricingCategory,
		A.SDCLVL AS PricingCategoryLevel,
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,
		A.SDRCD AS ReasonCode,
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS UserID,
		A.SDPID AS ProgramId,
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
	   A.SDLOCN AS Location,
	   A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		NVL(C.RFOGNO, 0 ) AS ParentLineNo,
		NVL(TxHistory.DTTUPRC,0) AS TaxedUnitPrice,
		NVL(TxHistory.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		NVL(TxHistory.DTTAEXP,0) AS TaxedExtendedPrice,
		NVL(TxHistory.DTTFEA,0)  AS ForeignTaxedExtPrice,
		NVL(TxHistory.DTUTA,0)   AS UnitTaxAmount,
		NVL(TxHistory.DTFUTA,0)  AS ForeignUnitTaxAmount,
		NVL(TxHistory.DTETA,0)   AS ExtendedTaxAmount,
		NVL(TxHistory.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F42119 A
	LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.SDITM, LangPref, 0) ) ContenDesc 
		ON ContenDesc.DESCITM = A.SDITM
	LEFT OUTER JOIN [SCDATA].FQ674211 B
   		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID
    LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO
		AND C.RFDCTO = A.SDDCTO
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.SDDOCO 
		AND TxHistory.DTDCTO = A.SDDCTO
		AND TxHistory.DTKCOO = A.SDKCOO 
		AND TxHistory.DTLNID = A.SDLNID
	WHERE
        A.SDKCOO = Company
        AND A.SDDOCO = OrderNumber
        AND A.SDDCTO = OrderType;
	END IF;
END;
  /
-- #desc					Reads Order Shipment information  
-- #bl_class				N/A		
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_Z, COM_GetOrderShipConfInfo

-- #param InstallationID	Installation ID
-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber
-- #param OrderShipToNumber Order ShipTo Number
-- #param AddressType		AddressType
-- #param Freight			Freight on or off flag  0= off  1 = On
-- #param IsOverrideShipTo	Is Override Ship To	Address 


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderShipments
(
	InstallationID		IN NCHAR,
	OrderCompany		IN NCHAR,
	OrderType			IN NCHAR,
	OrderNumber			IN NUMBER,
	OrderShipToNumber	IN NUMBER,
	AddressType			IN INT,		
	Freight				IN INT,
	IsOverrideShipTo	IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	 DiscountLineType	NCHAR(2);
	 TrackingLineType   NCHAR(2);     
     InstallationTemp	NCHAR(3);
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	 
BEGIN	
	IF (IsOverrideShipTo> 0) THEN		
		OPEN ResultData1 FOR
		SELECT DISTINCT 
			OrderShipToNumber AS SCShipToNumber,
			' '			AS NickName,
			A.OAMLNM AS MailingName,
			A.OAADD1 AS AddressLine1, 
			A.OAADD2 AS AddressLine2, 
			A.OAADD3 AS AddressLine3,
			A.OAADD4 AS AddressLine4,
			A.OACTY1 AS City,
			A.OAADDS AS State,
			A.OAADDZ AS ZipCode,
			A.OACTR AS Country,
			(CASE WHEN Freight = 0 THEN N' ' ELSE DETAIL.CostCenter END) AS CostCenter,
			'Y' AS IsShipToOverride
		FROM [SCDATA].F4006 A
		INNER JOIN [SCLIBRARY].COM_GetSalesOrderShipments_A  DETAIL
			ON DETAIL.OrderNumber = OADOCO
			AND DETAIL.OrderType = OADCTO
			AND DETAIL.OrderCompany = OAKCOO
		WHERE 
			OADOCO = OrderNumber			
			AND OADCTO = OrderType
			AND OAKCOO = OrderCompany
			AND OAANTY = 2; /*SHIPTO TYPE*/
			
	ELSE /*NO SHIPTO OVERRIDE GET SHIPTO INFORMATION FOR THE CONSUMER/CUSTOMER*/
	
		InstallationTemp := InstallationID;
		[SCLIBRARY].CMM_GetConstantValue('DISCOUNTLN', InstallationTemp, DiscountLineType);
		
		InstallationTemp := InstallationID;
		[SCLIBRARY].CMM_GetConstantValue('TRACKINGLN', InstallationTemp, TrackingLineType);
	
		IF(AddressType = 0) THEN/*Customer*/
			OPEN ResultData1 FOR
			SELECT DISTINCT
				DETAIL.SCShipToNumber	AS SCShipToNumber,
				CASE
					WHEN LENGTH(RTRIM(LTRIM(S2.WWNICK))) >	0 THEN S2.WWNICK
					ELSE
						(CASE 
							WHEN NVL(PE.PS$9ICF, 0) = 1  THEN S2.WWALPH
							ELSE S2.WWMLNM
						END)
				END	AS  Nickname,				-- Nick Name
				S2.WWMLNM AS MailingName,
				S3.ALADD1 AS AddressLine1, 
				S3.ALADD2 AS AddressLine2,
				S3.ALADD3 AS AddressLine3,
				S3.ALADD4 AS AddressLine4,
				S3.ALCTY1 AS City,
				S3.ALADDS AS State,
				S3.ALADDZ AS ZipCode,
				S3.ALCTR AS Country,
				(CASE WHEN Freight = 0 THEN N' ' ELSE DETAIL.CostCenter END) AS CostCenter,
				'N' AS IsShipToOverride
			FROM [SCLIBRARY].COM_GetSalesOrderShipments_A DETAIL
			INNER JOIN [SCDATA].F0101 S1
				ON S1.ABAN8 = DETAIL.SCShipToNumber
			INNER JOIN [SCDATA].F0111 S2
				ON S2.WWAN8 = S1.ABAN8
				AND S2.WWIDLN = 0
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (S1.ABAN8, CurrentJulianDate)) S3
				ON S3.ALAN8 = S1.ABAN8
			LEFT OUTER JOIN [SCDATA].FQ67107 PE		-- Profile Extended Information 
				ON PE.PS$9AN8 = S1.ABAN8
				AND PE.PS$9TYP = 0 /*CUSTOMER*/
			WHERE
				(DETAIL.LineType <> DiscountLineType AND DETAIL.LineType <> TrackingLineType);

		ELSE --Consumer
			OPEN ResultData1 FOR
			SELECT DISTINCT
				DETAIL.SCShipToNumber	AS SCShipToNumber,
				(CASE
					WHEN LENGTH(RTRIM(LTRIM(C.PRURRF))) > 0 THEN C.PRURRF
					ELSE (
							CASE 
							WHEN NVL(PE.PS$9ICF,0) = 1 THEN C.PRALPH
							ELSE CONT.PCMLNM
							END)
					END)	AS NickName,
				CONT.PCMLNM AS MailingName,
				C.PRADD1 AS AddressLine1, 
				C.PRADD2 AS AddressLine2, 
				C.PRADD3 AS AddressLine3,
				C.PRADD4 AS AddressLine4,
				C.PRCTY1 AS City,
				C.PRADDS AS State,
				C.PRADDZ AS ZipCode,
				C.PRCTR AS Country,
				(CASE WHEN Freight = 0 THEN N' ' ELSE DETAIL.CostCenter END) AS CostCenter,
				'N' AS IsShipToOverride
			FROM [SCLIBRARY].COM_GetSalesOrderShipments_A DETAIL
			INNER JOIN [SCDATA].FQ670302 C /*Consumer*/
				ON C.PR$9AN8 = DETAIL.SCShipToNumber
			INNER JOIN [SCDATA].FQ67303 CONT /*Consumer*/
				ON CONT.PC$9AN8 = DETAIL.SCShipToNumber
				AND CONT.PCIDLN = 0
			LEFT OUTER JOIN [SCDATA].FQ67107 PE		/* Profile Extended Information*/
				ON PE.PS$9AN8 = PC$9AN8
				AND PE.PS$9TYP = 1 /* CONSUMER */
			WHERE
				(DETAIL.LineType <> DiscountLineType AND DETAIL.LineType <> TrackingLineType);
		END IF;
	END IF;
END;
  /
-- #desc					Load the Configured Segments List 
-- #bl_class				N/A	
-- #db_dependencies			N/A
-- #db_references			COM_GetOrderShipConfInfo, COM_GetSalesOrderInfo_Z, QTS_GetQuoteOrderInfo_Z

-- #param OrderCompany		Company id
-- #param OrderType			Document type
-- #param OrderNumber		Order number
-- #param LangPref			Lang Pref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSOConfiguredLineList
(
	OrderCompany  IN	VARCHAR2,
	OrderType     IN	NVARCHAR2,
	OrderNumber	  IN	DECIMAL,
	LangPref	  IN	NVARCHAR2,
	ResultData1	  IN OUT GLOBALPKG.refcursor
)
AS
BEGIN
	--/*Stores the history for the configured items of all the configurations ordered.*/
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GetSOConfiguredLineList_A ';
		
	INSERT INTO [SCLIBRARY].COM_GetSOConfiguredLineList_A
		(CONFIGURATORID,
		BRANCHPLANT, 
		LINENUMBER) 
	SELECT * FROM (
	SELECT DISTINCT
			CT.CMCFGID	AS ConfiguratorID,
			CT.CMEMCU	AS BranchPlant,
			CT.CMLNID	AS LineNumber
		FROM 
			[SCDATA].F3201 CT	 /*Configurator Master*/
		WHERE
			CT.CMKCOO = OrderCompany AND
			CT.CMDOCO =	OrderNumber AND
			CT.CMDCTO =	OrderType AND
			CT.CMCFGCID  = 1 /*assumption:1 is the parent number ID - CMLNID = 1*/
		UNION ALL
		SELECT DISTINCT
			CTH.CHCFGID	AS ConfiguratorID,
			CTH.CHEMCU	AS BranchPlant,
			CTH.CHLNID	AS LineNumber
		FROM 
			[SCDATA].F32019 CTH /*Configurator Master History*/
		WHERE
			CTH.CHKCOO = OrderCompany AND
			CTH.CHDOCO = OrderNumber AND
			CTH.CHDCTO = OrderType AND
			CTH.CHCFGCID  = 1
			);
					
		OPEN ResultData1 FOR
			SELECT 
				OrderCompany,
				OrderType,
				OrderNumber,
				LineNumberID,
				ConfigurationIDNumber,
				ComponentIDNumber,
				SegmentNumber,
				SegmentValue,
				ParentItemNumber,
				COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ) AS RequiredorOptional,
				COALESCE(CIS_MCU.KWDSC1, CIS_EMPTY_MCU.KWDSC1) AS Description,
				COALESCE(CIS_MCU.KWDTAS, CIS_EMPTY_MCU.KWDTAS) AS SegmentSequence,
				(CASE WHEN (COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ)) = 'C' OR TRIM(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY)) IS NULL OR TRIM(COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT)) IS NULL
					THEN N' ' 
					ELSE [SCLIBRARY].CMM_GetUserDefinedCodeFnc(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY), COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT), SegmentValue, LangPref)  
				END) AS SegmentDescription
			FROM
				(SELECT DISTINCT
					OrderCompany	AS OrderCompany,
					OrderType		AS OrderType,        
					OrderNumber	AS OrderNumber,	 
					CM.LineNumber	AS LineNumberID,
					SD.KZCFGID		AS ConfigurationIDNumber,	
					SD.KZCFGCID		AS ComponentIDNumber,
					SD.KZPEL		AS SegmentNumber,
					SD.KZSGVL		AS SegmentValue,
					SD.KZKIT		AS ParentItemNumber,
					CM.BranchPlant  AS  BranchPlant
				FROM
					[SCDATA].F3211 SD	  /*Configurator Segment Detail*/
				INNER JOIN [SCLIBRARY].COM_GetSOConfiguredLineList_A CM
					ON CM.ConfiguratorID = SD.KZCFGID
				UNION ALL
				SELECT DISTINCT
					OrderCompany	AS OrderCompany,
					OrderType		AS OrderType,        
					OrderNumber	AS OrderNumber,	 
					CM.LineNumber	AS LineNumberID,
					SDH.KSCFGID		AS ConfigurationIDNumber,	
					SDH.KSCFGCID	AS ComponentIDNumber,
					SDH.KSPEL		AS SegmentNumber,
					SDH.KSSGVL 		AS SegmentValue,
					SDH.KSKIT		AS ParentItemNumber,
					CM.BranchPlant AS  BranchPlant
				FROM 	
					[SCDATA].F32119 SDH /*Configurator Segment Detail History*/
				INNER JOIN [SCLIBRARY].COM_GetSOConfiguredLineList_A CM
					ON CM.ConfiguratorID = SDH.KSCFGID) OrderConf
			LEFT JOIN [SCDATA].F3291 CIS_MCU /*Configured Item Segments*/
					ON CIS_MCU.KWKIT  = OrderConf.ParentItemNumber 
					AND CIS_MCU.KWMCU = OrderConf.BranchPlant
					AND CIS_MCU.KWPEL = OrderConf.SegmentNumber
			LEFT JOIN [SCDATA].F3291 CIS_EMPTY_MCU /*Configured Item Segments*/
				ON CIS_EMPTY_MCU.KWKIT  = OrderConf.ParentItemNumber 
				AND CIS_EMPTY_MCU.KWMCU = ' '
				AND CIS_EMPTY_MCU.KWPEL = OrderConf.SegmentNumber
			ORDER BY ComponentIDNumber, SegmentSequence, SegmentNumber, Description;
END;
  /
-- #desc					Delete marketing code tracking 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_DelMarketingCodeTracking
(
	MarketingCode  NVARCHAR2
)
AS

BEGIN

	DELETE FROM  
		[SCDATA].FQ674240
	WHERE 
		TRIM(MK$9MKT) = TRIM(MarketingCode);
	
END;

  /
-- #desc					Return Line List 
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber

/*|*/

CREATE OR REPLACE PROCEDURE	[SCLIBRARY].COM_GetSOReturnLineList
(
	InstallationID	IN NCHAR,
	OrderCompany	IN NCHAR,
	OrderType		IN NCHAR,
	OrderNumber		IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CORestric				NVARCHAR2(1);
	COINID					NCHAR(3) := InstallationID;
	COConstant				NCHAR(10) := 'CO_RESTRIC';
	OriginalOrderNumber		NCHAR(8) := TO_NCHAR(OrderNumber);
BEGIN	
	/* Gets the Sales Order Document Restrictions */
    [SCLIBRARY].CMM_GetConstantValue(COConstant, COINID, CORestric);
	OPEN ResultData1 FOR
	WITH CTE AS(
		SELECT
				A.SDKCOO	AS CreditCompany, 
				A.SDDCTO	AS CreditType,
				A.SDDOCO	AS CreditNumber,
				A.SDOGNO	AS LineNumberID,			
				A.SDITM		AS IdentifierShortItem,
				A.SDUOM		AS UnitOfMeasure,
				A.SDMCU		AS CostCenter, 
				A.SDSOQS	AS ReturnQuantity,
				A.SDTRDJ	AS TransactionDate
		FROM	[SCDATA].F4211 A		/* Standard Sales OrderDetail */
		WHERE	A.SDOORN = OriginalOrderNumber
			AND	A.SDOCTO = OrderType
			AND	A.SDOKCO = OrderCompany
			AND (A.SDLTTR < '980' OR A.SDLTTR = '995') /* Cancelled Lines Validation */
		UNION ALL
		SELECT
				A.SDKCOO	AS CreditCompany, 
				A.SDDCTO	AS CreditType,
				A.SDDOCO	AS CreditNumber,
				A.SDOGNO	AS LineNumberID,			
				A.SDITM		AS IdentifierShortItem,
				A.SDUOM		AS UnitOfMeasure,
				A.SDMCU		AS CostCenter, 
				A.SDUORG	AS ReturnQuantity,
				A.SDTRDJ	AS TransactionDate			
		FROM 	[SCDATA].F42119 A			
		WHERE	A.SDOORN = OriginalOrderNumber
			AND	A.SDOCTO = OrderType
			AND	A.SDOKCO = OrderCompany
			AND (A.SDLTTR < '980' OR A.SDLTTR = '995') /* Cancelled Lines Validation */
	)
	SELECT 
		A.CreditCompany, 
		A.CreditType,
		A.CreditNumber,
		A.LineNumberID,			
		A.IdentifierShortItem,
		A.UnitOfMeasure,
		A.CostCenter, 
		A.ReturnQuantity,
		A.TransactionDate
	FROM CTE A
	LEFT OUTER JOIN [SCDATA].FQ67008 DR
		ON DR.DR$9INID = COINID
		AND DR.DR$9CNST = COConstant 
		AND DR.DRKY = A.CreditType
	WHERE
		(CORestric = N'0' OR DR.DRKY IS NOT NULL)
	ORDER BY LineNumberID ASC;
END;
  /
-- #desc					Profile Read Billing Information
-- #bl_class				N/A				
-- #db_dependencies			N/A
-- #db_references			QTS_GetQuoteOrderInfo_Z.sql

-- #param SCBillToNumber	AddressNumber
-- #param ContactID         ContactID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteOrderInfo_BillTo
(
	SCBillToNumber	IN DECIMAL,	
	ContactID		IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
	OPEN ResultData1 FOR
		SELECT 
			WW.WWMLNM AS MailingName,
			AL.ALADD1 AS AddressLine1, 
			AL.ALADD2 AS AddressLine2, 
			AL.ALADD3 AS AddressLine3,
			AL.ALADD4 AS AddressLine4,
			AL.ALCTY1 AS City,
			AL.ALADDS AS State,
			AL.ALADDZ AS ZipCode,
			AL.ALCTR AS Country
		FROM [SCDATA].F0101 AB  -- Customer Master
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	-- Address Book Join
			ON AL.ALAN8 = AB.ABAN8
		INNER JOIN [SCDATA].F0111 WW		--Contact Information
			ON WW.WWAN8 = AB.ABAN8
			AND WW.WWIDLN = ContactID
		WHERE 
			ABAN8 = SCBillToNumber;
END;
  /
-- #desc					Shipment read only info
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			QTS_GetQuoteOrderInfo_Z.sql

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		Quote Number
-- #param OrderShipToNumber	Order ShipTo Number

CREATE or REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteOrderInfoShipments
(
	OrderCompany		IN	VARCHAR2,
	OrderType			IN	VARCHAR2,
	QuoteNumber			IN  DECIMAL,
	OrderShipToNumber	IN	DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS     
	OverrideShipToCount INT;
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN

	SELECT COUNT(*) INTO OverrideShipToCount FROM [SCDATA].F4006
		WHERE OADOCO = QuoteNumber			
			AND TRIM(OADCTO) = TRIM(OrderType)
			AND TRIM(OAKCOO) = TRIM(OrderCompany)  
			AND OAANTY = 2; 

	IF (OverrideShipToCount> 0) THEN
		UPDATE [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_B set SCShipToNumber = OrderShipToNumber;
		OPEN ResultData1 FOR
		SELECT DISTINCT 
			OrderShipToNumber	  AS SCShipToNumber,
			DETAIL.ShipLineNumber AS ShipLineNumber,
			' '		 AS NickName,
			A.OAMLNM AS MailingName,
			A.OAADD1 AS AddressLine1, 
			A.OAADD2 AS AddressLine2, 
			A.OAADD3 AS AddressLine3,
			A.OAADD4 AS AddressLine4,
			A.OACTY1 AS City,
			A.OAADDS AS State,
			A.OAADDZ AS ZipCode,
			A.OACTR  AS Country,
			'Y'		 AS IsShipToOverride
		FROM [SCDATA].F4006 A
		INNER JOIN [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_B  DETAIL
			ON DETAIL.QuoteNumber = OADOCO
			AND DETAIL.OrderType = OADCTO
			AND DETAIL.OrderCompany = OAKCOO
		WHERE 
			OADOCO = QuoteNumber			
			AND TRIM(OADCTO) = TRIM(OrderType)
			AND TRIM(OAKCOO) = TRIM(OrderCompany)  
			AND OAANTY = 2; /*SHIPTO TYPE*/
			
	ELSE /*NO SHIPTO OVERRIDE GET SHIPTO INFORMATION FOR THE CONSUMER/CUSTOMER*/
	OPEN ResultData1 FOR
		SELECT
			DETAIL.SCShipToNumber AS SCShipToNumber,
			DETAIL.ShipLineNumber AS ShipLineNumber,
			S2.WWNICK AS NickName,
			S2.WWMLNM AS MailingName,
			S3.ALADD1 AS AddressLine1, 
			S3.ALADD2 AS AddressLine2, 
			S3.ALADD3 AS AddressLine3,
			S3.ALADD4 AS AddressLine4,
			S3.ALCTY1 AS City,
			S3.ALADDS AS State,
			S3.ALADDZ AS ZipCode,
			S3.ALCTR  AS Country,
			'N'		  AS IsShipToOverride
					
		FROM [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_B DETAIL
		INNER JOIN  [SCDATA].F0101					S1
			-- Address Book Join Who's Who (Contacts)
			ON S1.ABAN8 = DETAIL.SCShipToNumber
		INNER JOIN  [SCDATA].F0111					S2
			ON S2.WWAN8 = S1.ABAN8
			AND S2.WWIDLN = 0
			-- Address Book Join Address File
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (S1.ABAN8, CurrentJulianDate)) S3
			ON S3.ALAN8 = S1.ABAN8
		GROUP BY DETAIL.SCShipToNumber,DETAIL.ShipLineNumber,S2.WWNICK,S2.WWMLNM,S3.ALADD1,S3.ALADD2,S3.ALADD3,S3.ALADD4,S3.ALCTY1,S3.ALADDS,S3.ALADDZ,S3.ALCTR;
	END IF;
END;
  /
-- #desc						Calculate Quote Status in Order Mode
--								Get a table with Quote Status
-- #bl_class					N/A	
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteOrderInfo_Z, QTS_GetQuoteRecentList

-- #param QuoteNumber			Quote Number
-- #param QuoteType				Quote Type
-- #param QuoteCompany			Quote Company
-- #param QuoteStatus			Quote Acceptance Status


CREATE OR REPLACE FUNCTION [SCLIBRARY].QTS_GetQuoteOrderStatusFnc
(
	QuoteNumber				IN NUMBER,
	QuoteType				IN NCHAR,
	QuoteCompany			IN NCHAR,
	QuoteAcceptanceStatus	IN NCHAR
)
RETURN [SCLIBRARY].QTS_QuoteStatusTBL IS
       RETURNS [SCLIBRARY].QTS_QuoteStatusTBL;
BEGIN

	WITH CTE AS (
		SELECT 
			SDNXTR AS MINSTATUS
		FROM 
			[SCDATA].F4211 	/*Sales Order Lines*/
		WHERE 
			SDDOCO = QuoteNumber AND SDDCTO = QuoteType AND SDKCOO = QuoteCompany 
			AND SDRLIT = ' ' AND (SDLTTR < '980' OR SDLTTR = '995') 
		
		UNION ALL
		
		SELECT 
			SDNXTR AS MINSTATUS
		FROM 
			[SCDATA].F42119 	/*History Sales Order Lines*/
		WHERE 
			SDDOCO = QuoteNumber AND SDDCTO = QuoteType AND SDKCOO = QuoteCompany 
			AND SDRLIT = ' ' AND (SDLTTR < '980' OR SDLTTR = '995') 
	)
	SELECT
		[SCLIBRARY].QTS_QuoteStatusType(
            QuoteCompany, QuoteNumber, QuoteType, 
			CASE WHEN MIN(MINSTATUS) = QuoteAcceptanceStatus THEN 'READYFORREVIEW'
				WHEN MIN(MINSTATUS) < QuoteAcceptanceStatus THEN 'PENDING'
				WHEN MIN(MINSTATUS) > QuoteAcceptanceStatus THEN 'COMPLETED' 
			ELSE 'CANCELLED' END
        )BULK COLLECT INTO RETURNS
	FROM CTE;
	
    RETURN RETURNS;

END QTS_GetQuoteOrderStatusFnc;
  /

-- #desc					Del Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelFastButtonLang
(
	InstallationID	IN NVARCHAR2,
	LineNumber		IN DECIMAL,
	LangPref		IN NVARCHAR2
)
AS
BEGIN
	DELETE FROM  
		[SCDATA].FQ67416L
	WHERE
		FB$9INID = InstallationID
		AND FBLNID = LineNumber
		AND (TRIM(LangPref) IS NULL OR TRIM(FBLNGP) = TRIM(LangPref));
END;

 


    
  /

-- #desc				    POS_DelReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelReceiptItemMessage
(
    InstallationID IN NVARCHAR2,
    ItemNumber     IN DECIMAL,
    MessageID      IN NVARCHAR2
)
AS
BEGIN
 DELETE
	FROM  [SCDATA].FQ674220
 WHERE (InstallationID IS NULL OR MI$9INID = InstallationID) AND
       (ItemNumber IS NULL OR MIITM = ItemNumber) AND
       TRIM(MI$9MID)  = TRIM(MessageID);
END;




  /

-- #desc					Read drawer by register 
-- #bl_class				Premier.POS.Drawer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawer
(
    RegisterID      IN NVARCHAR2,
	DrawerNumber    IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
	        DR$9REGID RegisterID,
	        DR$9DRAW  DrawerNumber,
	        DR$9DRST  Status,
	        DR$9DRMUL AllowMultipleUsers,
	        DREDBT    CurrentBatchNumber,
	        DRURRF    UserReservedReference,
	        DRURAB    UserReservedNumber,
	        DRURAT    UserReservedAmount,
	        DRURCD    UserReservedCode,
	        DRURDT    UserReservedDate,
	        DR$9AATR  CashDrawerLimit,
	        DRPID     ProgramID,
	        DRJOBN    WorkStationId,
	        DRUSER    UserId,
	        DRUPMJ    DateUpdated,
	        DRUPMT    TimeUpdated
        FROM
	        [SCDATA].FQ674261
        WHERE
	        (TRIM(RegisterID) IS NULL OR TRIM(DR$9REGID) = TRIM(RegisterID)) and
	        (DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber);
END;


  /

-- #desc					Get receipt detail
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			POS_GetReceipt

-- #param InstallationID	Installation ID
-- #param ReceiptID		    Receipt ID
-- #param RegisterID		Register ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetReceiptDetail
(
	InstallationID  IN NVARCHAR2,
	RegisterID      IN NVARCHAR2,
	ReceiptID       IN NVARCHAR2,
	ResultData1         OUT   GLOBALPKG.refcursor
)	
AS
    TotalRowCount INT;
    
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].POS_GETRECEIPTDETAIL_A';
    
        
    INSERT INTO [SCLIBRARY].POS_GETRECEIPTDETAIL_A
    SELECT 
	    A.RR$9RCID AS ReceiptID, 
	    A.RR$9INID AS InstallationID, 
	    A.RR$9REGID AS RegisterID, 
	    RR$9XML   AS XmlBody
    FROM 
	    [SCDATA].FQ674213 A
    WHERE 
	    (TRIM(ReceiptID) IS NULL OR TRIM(A.RR$9RCID) = TRIM(ReceiptID)) AND 
	    A.RR$9INID = InstallationID AND 
	    ((TRIM(RegisterID) IS NULL AND TRIM(A.RR$9REGID) IS NULL) OR TRIM(A.RR$9REGID) = TRIM(RegisterID));

	SELECT COUNT(*) INTO TotalRowCount FROM [SCLIBRARY].POS_GETRECEIPTDETAIL_A;
    --RECIEPTID AND INSTALLATIONID SELECT
    IF(TotalRowCount = 0 ) THEN
    
	    INSERT INTO [SCLIBRARY].POS_GETRECEIPTDETAIL_A
        SELECT 
	        A.RR$9RCID ReceiptID, 
	        A.RR$9INID InstallationID, 
	        A.RR$9REGID RegisterID, 
	        RR$9XML AS XmlBody
        FROM 
	        [SCDATA].FQ674213 A
        WHERE 
	        (TRIM(ReceiptID) IS NULL OR TRIM(A.RR$9RCID) = TRIM(ReceiptID)) AND 
	        A.RR$9INID = InstallationID;
	        
    END IF;
    
	SELECT COUNT(*) INTO TotalRowCount FROM [SCLIBRARY].POS_GETRECEIPTDETAIL_A;
    --BASE INSTALLATION SELECT
    IF(TotalRowCount = 0 ) THEN
        
	    INSERT INTO [SCLIBRARY].POS_GETRECEIPTDETAIL_A
        SELECT 
	        A.RR$9RCID ReceiptID, 
	        A.RR$9INID InstallationID, 
	        A.RR$9REGID RegisterID, 
	        RR$9XML AS XmlBody
        FROM 
	        [SCDATA].FQ674213 A
        WHERE 
	        (TRIM(ReceiptID) IS NULL OR TRIM(A.RR$9RCID) = TRIM(ReceiptID)) AND 
	        A.RR$9INID = '***';
	        
    END IF;

    OPEN ResultData1 FOR
	    SELECT * FROM [SCLIBRARY].POS_GETRECEIPTDETAIL_A;
END;
  /

-- #desc						Reads Register Payment
-- #bl_class					Premier.POS.RegisterPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument		Payment Instrument


CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawerPayment
(
	InstallationID		IN NCHAR,
	RegisterID          IN NCHAR,
	DrawerNumber        IN NUMBER,
	CurrentBatchNumber  IN NCHAR,
	PaymentInstrument   IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CC_DETAILCONSTANT	NVARCHAR2(1);
	InsatallationTemp	NCHAR(3) := InstallationID;
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].POS_GETDRAWERPAYMENT_A';
	
	--Gets the Credit Card Detail on Close Drawer Report Constant
	[SCLIBRARY].CMM_GetConstantValue('CC_DETPAY', InsatallationTemp, CC_DETAILCONSTANT);
	
	
	INSERT INTO [SCLIBRARY].POS_GETDRAWERPAYMENT_A
	SELECT 
		A.RC$9REGID,
		A.RC$9DRAW,
		A.RCEDBT,
		C.DPRYIN,
		TO_CHAR(C.DPCARD),
		C.DPCRCD,
		0,
		0,
		0,
		C.DP$9AATR
	FROM 
		[SCDATA].FQ67427 A 
	INNER JOIN [SCDATA].FQ674281 C
		ON C.DPEDBT = A.RCEDBT AND
		C.DP$9REGID = A.RC$9REGID AND
		C.DP$9DRAW = A.RC$9DRAW
	WHERE 
		A.RC$9REGID = RegisterID AND
		A.RC$9DRAW = DrawerNumber AND 
		A.RCEDBT = CurrentBatchNumber
	UNION ALL
	SELECT  
		Y.DC$9REGID,
		Y.DC$9DRAW,
		Y.DCEDBT,
		Y.DCRYIN,
		TO_CHAR(''),
		Y.DCCRCD,
		Y.DC$9AAOB,
		Y.DC$9AALF,
		Y.DC$9AACS,
		Y.DC$9AATR
	FROM
		[SCDATA].FQ67428 Y
	WHERE 
		Y.DC$9REGID = RegisterID AND
		Y.DC$9DRAW = DrawerNumber AND
		Y.DCEDBT = CurrentBatchNumber
	UNION ALL
	SELECT
		Z.DR$9REGID,
		Z.DR$9DRAW,
		Z.DREDBT,
		Z.DRRYIN,
		TO_CHAR(''),
		Z.DRCRCD,
		0,
		0,
		0,
		Z.DR$9AATR
	FROM
		[SCDATA].FQ674282 Z
	WHERE 
		Z.DR$9REGID = RegisterID AND
		Z.DR$9DRAW = DrawerNumber AND 
		Z.DREDBT = CurrentBatchNumber;

   IF(CC_DETAILCONSTANT = '1') THEN
		BEGIN
			OPEN ResultData1 FOR
			SELECT 
				  RC$9REGID    AS      RegisterID,
				  RC$9DRAW     AS      DrawerNumber,
				  RCEDBT       AS      CurrentBatchNumber,
				  DPRYIN       AS      PaymentInstrument,
				  TRIM(DPCARD) AS      CreditCardType,
				  DPCRCD       AS      CurrecyCode,
				  [SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',DPRYIN,'*') AS PaymentInstrumentDesc,
				  SUM(OpeningBalance)		AS OpeningBalance,
				  SUM(LeftInDrawer)			AS LeftInDrawer,
				  SUM(TotalsPerCashier)		AS TotalsPerCashier,
				  (NVL(SUM(DP$9AATR),0) )AS SumOfTransactions,
				  (NVL(SUM(TotalsPerCashier),0) - (NVL(SUM(DP$9AATR), 0) + NVL(SUM(OpeningBalance),0))) AS PendingDifference,
				  (NVL(SUM(DP$9AATR),0) + NVL(SUM(OpeningBalance),0)) AS TotalsByInstrument
			FROM [SCLIBRARY].POS_GETDRAWERPAYMENT_A
			GROUP BY 
				  RC$9REGID,
				  RC$9DRAW,
				  RCEDBT,
				  DPRYIN,
				  TRIM(DPCARD),
				  DPCRCD
			ORDER BY DPRYIN DESC;
		END;
	ELSE
		BEGIN
			OPEN ResultData1 FOR
			SELECT 
				  RC$9REGID   AS      RegisterID,
				  RC$9DRAW    AS      DrawerNumber,
				  RCEDBT      AS      CurrentBatchNumber,
				  DPRYIN      AS      PaymentInstrument,
				  ' '	      AS      CreditCardType,
				  DPCRCD      AS      CurrecyCode,
				  [SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',DPRYIN,'*') AS PaymentInstrumentDesc,
				  SUM(OpeningBalance)		AS OpeningBalance,
				  SUM(LeftInDrawer)			AS LeftInDrawer,
				  SUM(TotalsPerCashier)		AS TotalsPerCashier,
				  (NVL(SUM(DP$9AATR),0) )AS SumOfTransactions,
				  (NVL(SUM(TotalsPerCashier),0) - (NVL(SUM(DP$9AATR), 0) + NVL(SUM(OpeningBalance),0))) AS PendingDifference,
				  (NVL(SUM(DP$9AATR),0) + NVL(SUM(OpeningBalance),0)) AS TotalsByInstrument
			FROM [SCLIBRARY].POS_GETDRAWERPAYMENT_A
			GROUP BY 
				  RC$9REGID,
				  RC$9DRAW,
				  RCEDBT,
				  DPRYIN,
				  DPCRCD
			ORDER BY DPRYIN DESC;
		END;
	END IF;
END;
	

  /

-- #desc					Read Fast Button Langs
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref
-- #param Description1		Description1 
-- #param Description2		Description2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetFastButtonLangs
(
	InstallationID  IN NVARCHAR2,
	LineNumber		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
			FB$9INID	AS InstallationID,
			FBLNID		AS LineNumber, 
			FBLNGP		AS LanguagePref,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',FBLNGP,LangPref) AS LanguageDescE1,
			FBDSC1		AS Description1,
			FBDSC2		AS Description2
		  FROM  
			[SCDATA].FQ67416L
		  WHERE
				FB$9INID = InstallationID
				AND FBLNID = LineNumber
		  ORDER BY 
				FB$9INID, FBLNID, FBLNGP;
END;
				
      
      
  
  /
-- #desc						Delete a General Announcement Assignments
-- #bl_class					Premier.Common.GeneralAnnouncementAssignment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param UniqueKeyID			Unique key ID	

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelGnrlAnnounceAssign
(
	AnnouncementID	IN DECIMAL,
	UniqueKeyID		IN DECIMAL
)
AS
BEGIN 
	DELETE FROM	[SCDATA].FQ67105A
		WHERE MA$9NID = AnnouncementID
		 AND (UniqueKeyID IS NULL OR MAUKID = UniqueKeyID);
END;


  /
-- #desc				        Get a table with Documents using Extended table, filter by Company and Address Number, 
--						        also validate Document Restrict and Company Restrict
-- #bl_class			        N/A
-- #db_dependencies				N/A
-- #db_references		        COM_GetReturnOrderRecentList

-- #param Company				Company
-- #param OrderINID				Setting Installation
-- #param OrderConstant			Setting Name
-- #param ConstantInstallation	Company Installation
-- #param CompanyConstant		Company Setting
-- #param OrderRestric			Order Restrict
-- #param AddressNumber			Address Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetRecentDocExtendedFnc
(
    Company					IN NCHAR,
    OrderINID				IN NCHAR,
    OrderConstant			IN NCHAR,
    ConstantInstallation	IN NCHAR,
    CompanyConstant			IN NVARCHAR2,
    OrderRestric			IN NVARCHAR2,
    AddressNumber			IN NUMBER
)
RETURN [SCLIBRARY].COM_RecentDocumentTBL IS
       RETURNS [SCLIBRARY].COM_RecentDocumentTBL;
BEGIN
    WITH CTE AS
    (
      SELECT 
        A.SHDOCO, 
        A.SHDCTO, 
        A.SHKCOO,			
        A.SHTRDJ,
        A.SHVR01,
        A.SHCRCD,
        A.SHCRRM,
        A.SHHOLD,
        A.SHOTOT,
        A.SHFAP,
        A.SHCO
      FROM [SCDATA].F4201 A			/*Sales Order Header*/
        INNER JOIN [SCDATA].FQ674201 B /* Extended Sales Order Header */
            ON  B.SHKCOO = A.SHKCOO
            AND B.SHDOCO = A.SHDOCO
            AND B.SHDCTO = A.SHDCTO
            AND B.SH$9AN8 = AddressNumber
            AND B.SH$9TYP = 1 
      WHERE
        (Company = '*' OR A.SHCO = Company)	
      UNION ALL
      SELECT 
        A.SHDOCO, 
        A.SHDCTO, 
        A.SHKCOO,			
        A.SHTRDJ,
        A.SHVR01,
        A.SHCRCD,
        A.SHCRRM,
        A.SHHOLD,
        A.SHOTOT,
        A.SHFAP,
        A.SHCO
      FROM [SCDATA].F42019 A			/*Sales Order Header*/
        INNER JOIN [SCDATA].FQ674201 B /* Extended Sales Order Header */
            ON  B.SHKCOO = A.SHKCOO
            AND B.SHDOCO = A.SHDOCO
            AND B.SHDCTO = A.SHDCTO
            AND B.SH$9AN8 = AddressNumber
            AND B.SH$9TYP = 1 
      WHERE
        (Company = '*' OR A.SHCO = Company)	
    )
    SELECT 	
        [SCLIBRARY].COM_RecentDocumentType(
            A.SHKCOO,	
            A.SHDOCO, 
            A.SHDCTO, 		
            A.SHTRDJ,
            A.SHVR01,
            A.SHCRCD,
            A.SHCRRM,
            A.SHHOLD, 
            A.SHOTOT,
            A.SHFAP,
            ROW_NUMBER() OVER (ORDER BY SHTRDJ DESC, SHDOCO DESC)
        )BULK COLLECT INTO RETURNS
    FROM CTE A
    LEFT OUTER JOIN [SCDATA].FQ679912 CR
      ON CR.CICO = SHCO
      AND CR.CI$9INID = ConstantInstallation
    LEFT OUTER JOIN [SCDATA].FQ67008 DR
      ON  DR.DR$9INID = OrderINID 
      AND DR.DR$9CNST = OrderConstant
      AND DR.DRKY = SHDCTO
    WHERE
        (CompanyConstant ='A' OR CR.CICO IS NOT NULL)
    AND (OrderRestric = '0' OR DR.DRKY IS NOT NULL);
    
    return RETURNS;
END COM_GetRecentDocExtendedFnc;
  /
-- #desc				        Get a table with Documents filtered by Company and Address Number, 
--						        also validate Document Restrict and Company Restrict
-- #bl_class			        N/A
-- #db_dependencies				N/A
-- #db_references		        COM_GetReturnOrderRecentList, QTS_GetQuoteRecentList

-- #param Company				Company
-- #param OrderINID				Setting Installation
-- #param OrderConstant			Setting Name
-- #param ConstantInstallation	Company Installation
-- #param CompanyConstant		Company Setting
-- #param OrderRestric			Order Restrict
-- #param AddressNumber			Address Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetRecentDocsFnc
(
    Company					IN NCHAR,
    OrderINID				IN NCHAR,
    OrderConstant			IN NCHAR,
    ConstantInstallation	IN NCHAR,
    CompanyConstant			IN NVARCHAR2,
    OrderRestric			IN NVARCHAR2,
    AddressNumber			IN NUMBER
)
RETURN [SCLIBRARY].COM_RecentDocumentTBL IS
       RETURNS [SCLIBRARY].COM_RecentDocumentTBL;
BEGIN
    WITH CTE AS
    (
      SELECT 
        A.SHDOCO, 
        A.SHDCTO, 
        A.SHKCOO,			
        A.SHTRDJ,
        A.SHVR01,
        A.SHCRCD,
        A.SHCRRM,
        A.SHHOLD,
        A.SHOTOT,
        A.SHFAP,
        A.SHCO
      FROM [SCDATA].F4201 A			/*Sales Order Header*/
      WHERE
        A.SHAN8 = AddressNumber
      AND (Company = '*' OR A.SHCO = Company)	
      UNION ALL
      SELECT 
        A.SHDOCO, 
        A.SHDCTO, 
        A.SHKCOO,			
        A.SHTRDJ,
        A.SHVR01,
        A.SHCRCD,
        A.SHCRRM,
        A.SHHOLD,
        A.SHOTOT,
        A.SHFAP,
        A.SHCO
      FROM [SCDATA].F42019 A			/*Sales Order Header*/
      WHERE
        A.SHAN8 = AddressNumber
      AND (Company = '*' OR A.SHCO = Company)	
    )
    SELECT 	
        [SCLIBRARY].COM_RecentDocumentType(
            A.SHKCOO,	
            A.SHDOCO, 
            A.SHDCTO, 		
            A.SHTRDJ,
            A.SHVR01,
            A.SHCRCD,
            A.SHCRRM,
            A.SHHOLD, 
            A.SHOTOT,
            A.SHFAP,
            ROW_NUMBER() OVER (ORDER BY SHTRDJ DESC, SHDOCO DESC)
        )BULK COLLECT INTO RETURNS
    FROM CTE A
    LEFT OUTER JOIN [SCDATA].FQ679912 CR
      ON CR.CICO = SHCO
      AND CR.CI$9INID = ConstantInstallation
    LEFT OUTER JOIN [SCDATA].FQ67008 DR
      ON  DR.DR$9INID = OrderINID 
      AND DR.DR$9CNST = OrderConstant
      AND DR.DRKY = SHDCTO
    WHERE
        (CompanyConstant='A' OR CR.CICO IS NOT NULL)
    AND (OrderRestric = '0' OR DR.DRKY IS NOT NULL);
    
    return RETURNS;
END COM_GetRecentDocsFnc;
  /
-- #desc						Delete Announcement History
-- #bl_class					Premier.Common.UserAnnouncementHistory.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param AnnouncementType		Installation ID
-- #param WebAccountID			Web Account ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcUserAnnounceClearHist
(
	AnnouncementID		IN DECIMAL,
	AnnouncementType	IN NVARCHAR2,
	WebAccountID	    IN DECIMAL
)
AS
BEGIN
	DELETE FROM
		[SCDATA].FQ67105H
	WHERE
		MH$9NID = AnnouncementID AND 
		MH$9APFL = AnnouncementType AND
		(WebAccountID IS NULL OR MH$9WAN8 = WebAccountID);
END;
  /
-- #desc							Relate All Companies
-- #bl_class						Premier.Common.CompanyList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param SalesQtyPriorMonth01		Sales Qty Prior Month 01
-- #param SalesQtyPriorMonth02		Sales Qty Prior Month 02
-- #param Amount					Amount
-- #param AmountAa1					Amount Aa1
-- #param ADPDate01					ADP Date 01
-- #param ADPDate02					ADP Date 02
-- #param SalesReportingCode1		Sales Reporting Code 1
-- #param SalesReportingCode2		Sales Reporting Code 2
-- #param SalesReportingCode3		Sales Reporting Code 3
-- #param SalesReportingCode4		Sales Reporting Code 4
-- #param SalesReportingCode5		Sales Reporting Code 5
-- #param SalesReportingCode6		Sales Reporting Code 6
-- #param SalesReportingCode7		Sales Reporting Code 7
-- #param SalesReportingCode8		Sales Reporting Code 8
-- #param SalesReportingCode9		Sales Reporting Code 9
-- #param SalesReportingCode10		Sales Reporting Code 10
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param DateUpdated				Date Updated 
-- #param TimeLastUpdated			Time Last Updated
-- #param WorkStationID				WorkStation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddAllCompaniesByInst
(
    InstallationID				IN NVARCHAR2,
	SalesQtyPriorMonth01		IN DECIMAL,
	SalesQtyPriorMonth02		IN DECIMAL,
	Amount						IN DECIMAL,
	AmountAa1					IN DECIMAL,
	ADPDate01					IN DECIMAL,
	ADPDate02					IN DECIMAL,
	SalesReportingCode1			IN NVARCHAR2,
	SalesReportingCode2			IN NVARCHAR2,
	SalesReportingCode3			IN NVARCHAR2,
	SalesReportingCode4			IN NVARCHAR2,
	SalesReportingCode5			IN NVARCHAR2,
	SalesReportingCode6			IN NVARCHAR2,
	SalesReportingCode7			IN NVARCHAR2,
	SalesReportingCode8			IN NVARCHAR2,
	SalesReportingCode9			IN NVARCHAR2,
	SalesReportingCode10		IN NVARCHAR2,
	UserReservedNumber			IN DECIMAL, 
	UserReservedAmount			IN DECIMAL,
	UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN DECIMAL,
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,	
	DateUpdated					IN DECIMAL,
	TimeLastUpdated				IN DECIMAL,
	WorkStationID				IN NVARCHAR2
)
AS
BEGIN
    
	DELETE FROM
		[SCDATA].FQ679912 
	WHERE 
		CI$9INID = InstallationID;

	INSERT INTO [SCDATA].FQ679912
	(	
		CI$9INID,		
		CICO,		
		CIDSC1,
		CIDSC2,
		CISQ01,
		CISQ02,
		CIAA,
		CIAA1,
		CIDATE01,
		CIDATE02,
		CISRP1,
		CISRP2,
		CISRP3,
		CISRP4,
		CISRP5,
		CISRP6,
		CISRP7,
		CISRP8,
		CISRP9,
		CISRP0,
		CIURAB,
		CIURAT,
		CIURCD,
		CIURDT,
		CIURRF,
		CIUSER,   
		CIPID,		
		CIUPMJ,
        CIUPMT,
		CIJOBN             
	)
	SELECT	
		InstallationID,
		CCCO,					--Company ID
		CCNAME,					--Description 1
		'',						--Description 2
		SalesQtyPriorMonth01,
		SalesQtyPriorMonth02,
		Amount,
		AmountAa1,
		ADPDate01,
		ADPDate02,
		SalesReportingCode1,
		SalesReportingCode2,
		SalesReportingCode3,
		SalesReportingCode4,
		SalesReportingCode5,
		SalesReportingCode6,
		SalesReportingCode7,
		SalesReportingCode8,
		SalesReportingCode9,
		SalesReportingCode10,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,		
		DateUpdated,
		TimeLastUpdated,
		WorkStationID			
	FROM	
		[SCDATA].F0010;

END;		
  /
-- #desc				    Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 
-- #param UserDefinedKey	UDC Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddAllDocRestric
(
    InstallationID          IN NCHAR,
    ConstantID				IN NCHAR,
    ProductCode				IN NCHAR,
    UserDefinedCode			IN NCHAR,
    UserReservedCode	    IN NCHAR,
	UserReservedDate		IN NUMBER,
	UserReservedAmount		IN NUMBER, 
	UserReservedNumber		IN NUMBER, 
	UserReservedReference	IN NCHAR,
	UserID					IN NCHAR,
	ProgramID				IN NCHAR,
	WorkStationID			IN NCHAR,
	DateUpdated				IN NUMBER,
	TimeLastUpdated			IN NUMBER
)
AS

    CODELENGTH INT :=0;
    
BEGIN
    BEGIN
	    SELECT DTCDL INTO CODELENGTH  FROM [SCCTL].F0004 
        WHERE DTSY = ProductCode AND DTRT = UserDefinedCode;
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        CODELENGTH := 0;
    END;
    

	DELETE FROM [SCDATA].FQ67008 WHERE DR$9INID = InstallationID
										 AND    DR$9CNST = ConstantID
										 AND	DRSY	 = ProductCode
										 AND    DRRT     = UserDefinedCode;
	INSERT INTO [SCDATA].FQ67008
	(	
		DR$9INID,		-- Installation Id
		DR$9CNST,		-- Constant ID
		DRSY,			-- Product Code
		DRRT,			-- User defined Code  
		DRKY,			-- User defined Key 
		DRURCD,   
		DRURDT,
		DRURAT,  
		DRURAB, 
		DRURRF,  
		DRUSER,   
		DRPID,
		DRJOBN,
		DRUPMJ,
        DRUPMT             
	)
	SELECT	
	    InstallationID,
		ConstantID,
		ProductCode,
		UserDefinedCode,
		SUBSTR (A.DRKY,10-CODELENGTH+1,CODELENGTH) AS UserDefinedKey,
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	FROM	
	    [SCCTL].F0005 A
	WHERE	
	        A.DRSY = ProductCode
	    AND	A.DRRT = UserDefinedCode
	ORDER BY DRKY;
END;
			
  /
-- #desc					Add Announcement Installation.
-- #bl_class				Premier.Common.AnnouncementStore.cs

-- #param AnnouncementID	Announcement ID
-- #param InstallationID	Installation ID
-- #param AnnouncementType	Announcement Type  AGen | ATag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddAnnounceInstallation
(
    AnnouncementID				IN DECIMAL,
    InstallationID				IN NVARCHAR2,
	AnnouncementType			IN NVARCHAR2,
	UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN DECIMAL, 
	UserReservedAmount			IN DECIMAL,
	UserReservedNumber			IN DECIMAL,
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,
	WorkStationID				IN NVARCHAR2,
	DateUpdated					IN DECIMAL,
	TimeOfDay					IN DECIMAL
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67105I
	(
		MI$9NID,
		MI$9INID,
		MI$9APFL,
		MIURCD,
		MIURDT,
		MIURAT,
		MIURAB,
		MIURRF,
		MIUSER,
		MIPID,
		MIJOBN,
		MIUPMJ,
		MITDAY
	)
	VALUES
	(
		AnnouncementID,
		InstallationID,
		AnnouncementType,
		UserReservedCode,
		UserReservedDate, 
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeOfDay
	);
END;
  /
-- #desc					Add Branch Plants to a Instalation.
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param BranchPlant		Branch Plant (MCU)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddBranchPlantByInst
(
    InstallationID  IN NVARCHAR2,
	BranchPlant	    IN NVARCHAR2
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ679910
	(
		BI$9INID,		-- Installation Id
		BIMCU,			-- Branch Plant
		BILCNF          -- AllowPickup
	)
	VALUES
	(
		InstallationID,
		BranchPlant,
		'N'	
	);
END;
  /
-- #desc							Relate Company
-- #bl_class						Premier.Common.CompanyList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param Company					Company
-- #param Description1				Description 1
-- #param Description2				Description 2
-- #param SalesQtyPriorMonth01		Sales Qty Prior Month 01
-- #param SalesQtyPriorMonth02		Sales Qty Prior Month 02
-- #param Amount					Amount
-- #param AmountAa1					Amount Aa1
-- #param ADPDate01					ADP Date 01
-- #param ADPDate02					ADP Date 02
-- #param SalesReportingCode1		Sales Reporting Code 1
-- #param SalesReportingCode2		Sales Reporting Code 2
-- #param SalesReportingCode3		Sales Reporting Code 3
-- #param SalesReportingCode4		Sales Reporting Code 4
-- #param SalesReportingCode5		Sales Reporting Code 5
-- #param SalesReportingCode6		Sales Reporting Code 6
-- #param SalesReportingCode7		Sales Reporting Code 7
-- #param SalesReportingCode8		Sales Reporting Code 8
-- #param SalesReportingCode9		Sales Reporting Code 9
-- #param SalesReportingCode10		Sales Reporting Code 10
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param DateUpdated				Date Updated 
-- #param TimeLastUpdated			Time Last Updated
-- #param WorkStationID				WorkStation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddCompanyByInst
(
    InstallationID				IN NVARCHAR2,
    Company						IN NVARCHAR2,
	Description1				IN NVARCHAR2,
	Description2				IN NVARCHAR2,
	SalesQtyPriorMonth01		IN DECIMAL,
	SalesQtyPriorMonth02		IN DECIMAL,
	Amount						IN DECIMAL,
	AmountAa1					IN DECIMAL,
	ADPDate01					IN DECIMAL,
	ADPDate02					IN DECIMAL,
	SalesReportingCode1			IN NVARCHAR2,
	SalesReportingCode2			IN NVARCHAR2,
	SalesReportingCode3			IN NVARCHAR2,
	SalesReportingCode4			IN NVARCHAR2,
	SalesReportingCode5			IN NVARCHAR2,
	SalesReportingCode6			IN NVARCHAR2,
	SalesReportingCode7			IN NVARCHAR2,
	SalesReportingCode8			IN NVARCHAR2,
	SalesReportingCode9			IN NVARCHAR2,
	SalesReportingCode10		IN NVARCHAR2,
	UserReservedNumber			IN DECIMAL, 
	UserReservedAmount			IN DECIMAL,
	UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN DECIMAL,
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,	
	DateUpdated					IN DECIMAL,
	TimeLastUpdated				IN DECIMAL,
	WorkStationID				IN NVARCHAR2
)
AS
BEGIN

	INSERT INTO [SCDATA].FQ679912
	(
		CI$9INID,		
		CICO,		
		CIDSC1,
		CIDSC2,
		CISQ01,
		CISQ02,
		CIAA,
		CIAA1,
		CIDATE01,
		CIDATE02,
		CISRP1,
		CISRP2,
		CISRP3,
		CISRP4,
		CISRP5,
		CISRP6,
		CISRP7,
		CISRP8,
		CISRP9,
		CISRP0,
		CIURAB,
		CIURAT,
		CIURCD,
		CIURDT,
		CIURRF,
		CIUSER,   
		CIPID,		
		CIUPMJ,
        CIUPMT,
		CIJOBN    
	)
	VALUES
	(
		InstallationID,
		Company,
		Description1,
		Description2,
		SalesQtyPriorMonth01,
		SalesQtyPriorMonth02,
		Amount,
		AmountAa1,
		ADPDate01,
		ADPDate02,
		SalesReportingCode1,
		SalesReportingCode2,
		SalesReportingCode3,
		SalesReportingCode4,
		SalesReportingCode5,
		SalesReportingCode6,
		SalesReportingCode7,
		SalesReportingCode8,
		SalesReportingCode9,
		SalesReportingCode10,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,		
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);

END;
  /
-- #desc				    Add contant detail
-- #bl_class				Premier.Common.Constant.cs
-- #db_dependencies		    N/A
-- #db_references			N/A

-- #param Constant			Constant ID
-- #param InstallationID	Installation ID
-- #param ConstantValue	    Constant Value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddConstant
(
	Constant		IN NVARCHAR2,
	InstallationID  IN NVARCHAR2,
	ConstantValue	IN NVARCHAR2
)	
AS
BEGIN
    INSERT INTO [SCDATA].FQ670004
    (
	    CN$9INID,  CN$9CNST,  CN$9VAL
    )
    VALUES
    (
	    InstallationID, Constant, NVL(ConstantValue,' ')
    );
END;


  /
-- #desc					Insert currency detail
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param Description		Currency Description
-- #param Amount			Denomination Amount
-- #param CoinBillFlag		IS Coin or Bill
-- #param IsSpeedCash		mark as speed cash button

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddCurrencyDetail
(
    CurrencyCode			IN NCHAR,
    Amount					IN NUMBER,
    Description				IN NCHAR,
    CoinBillFlag			IN NCHAR,
    IsSpeedCash				IN NCHAR,
    SequenceID				OUT NUMBER,
    UserReservedNumber		IN NUMBER,
	UserReservedAmount		IN NUMBER,
	UserReservedCode		IN NCHAR,
	UserReservedDate		IN NUMBER,
	UserReservedReference	IN NCHAR,
	UserID					IN NCHAR,
	ProgramID				IN NCHAR,
	WorkStationID			IN NCHAR,
	DateUpdated				IN NUMBER,
	TimeLastUpdated			IN NUMBER
)

AS

BEGIN
	--Get max sequence number
	BEGIN
	    SELECT NVL(MAX(CILNID),0) + 1 INTO SequenceID
	    FROM [SCDATA].FQ67012
	    WHERE CICRCD = CurrencyCode;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    SequenceID := NULL;
	END;

	INSERT INTO [SCDATA].FQ67012
	(
		CICRCD,
		CILNID,
		CIAEXP,
		CIDL01,
		CIBCF8,
		CISPEOW,
		CIURAB,
	    CIURAT,
	    CIURCD,
	    CIURDT,
	    CIURRF,
		CIUSER,   
		CIPID,
		CIJOBN,
		CIUPMJ,
		CIUPMT
	)
	VALUES
	(	
		NVL(CurrencyCode,' '),
		SequenceID,
		Amount,
		Description,
		CoinBillFlag,
		IsSpeedCash,
		UserReservedNumber,
	    UserReservedAmount,
	    UserReservedCode,
	    UserReservedDate,
	    UserReservedReference,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);
END;
  /
-- #desc					Insert currency header
-- #bl_class				Premier.Common.CurrencyHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param CurrencySymbol	Currency Symbol
-- #param RoundingRule		Rounding Rule Name

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddCurrencyHeader
(
    CurrencyCode			IN NVARCHAR2,
    CurrencySymbol			IN NVARCHAR2,
    RoundingRule			IN NVARCHAR2,
    UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	WorkStationID			IN NVARCHAR2,
	DateUpdated				IN DECIMAL,
	TimeLastUpdated			IN DECIMAL
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67011
	(
		CICRCD,
		CICC0,
		CIRULENAME,
		CIURAB,
	    CIURAT,
	    CIURCD,
	    CIURDT,
	    CIURRF,
		CIUSER,   
		CIPID,
		CIJOBN,
		CIUPMJ,
		CIUPMT
	)
	VALUES
	(	
		NVL(CurrencyCode,' '),
		CurrencySymbol,
		RoundingRule,
		UserReservedNumber,
	    UserReservedAmount,
	    UserReservedCode,
	    UserReservedDate,
	    UserReservedReference,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);
END;
  /
-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 
-- #param UserDefinedKey	UDC Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddDocRestric
(
    InstallationID          IN NVARCHAR2,
    ConstantID				IN NVARCHAR2,
    ProductCode				IN NVARCHAR2,
    UserDefinedCode			IN NVARCHAR2,
    UserDefinedKey			IN NVARCHAR2,
    UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedAmount		IN DECIMAL, 
	UserReservedNumber		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	WorkStationID			IN NVARCHAR2,
	DateUpdated				IN Decimal,
	TimeLastUpdated			IN Decimal
)
AS
BEGIN

	INSERT INTO [SCDATA].FQ67008
	(
		DR$9INID,		-- Installation Id
		DR$9CNST,		-- Constant ID
		DRSY,			-- Product Code
		DRRT,			-- User defined Code  
		DRKY,			-- User defined Key 
		DRURCD,   
		DRURDT,
		DRURAT,  
		DRURAB, 
		DRURRF,  
		DRUSER,   
		DRPID,
		DRJOBN,
		DRUPMJ,
        DRUPMT    
	)
	VALUES
	(
		InstallationID,
		ConstantID,
		ProductCode,
		UserDefinedCode,
		NVL(UserDefinedKey,' '),
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);
END;
  /
-- #desc							Add GeneralAnnouncement Lang
-- #bl_class						Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AnnouncementID			AnnouncementID
-- #param DesignStatus				DesignStatus
-- #param LangPref 					Language
-- #param Title						Title
-- #param HtmlContent				HtmlContent

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddGeneralAnnounceLang
(
	AnnouncementID			IN DECIMAL,
	DesignStatus			IN DECIMAL,
	LangPref 				IN NVARCHAR2,
	Title					IN NVARCHAR2,
	HtmlContent				IN NCLOB
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67105L
	(
		ML$9NID,
		ML$9DS,
		MLLNGP,
		ML$9MTT,
		ML$9MSC
	)
	VALUES
	(
		AnnouncementID,
		DesignStatus,
		LangPref,
		Title,
		HtmlContent
	);
END;
  /
-- #desc						Add General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.
-- #param Priority				Priority.
-- #param AccessLevel			AccessLevel.
-- #param EffectiveDate			EffectiveDate.
-- #param ExpirationDate		ExpirationDate.
-- #param Title					Title.
-- #param HtmlContent			HtmlContent.
-- #param Url					Url.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddGeneralAnnouncement 
(
		AnnouncementID			IN OUT DECIMAL,	
		DesignStatus			IN DECIMAL,
		Priority				IN DECIMAL,
		AccessLevel				IN DECIMAL,
		EffectiveDate			IN DECIMAL,
		ExpirationDate			IN DECIMAL,
		Title					IN NVARCHAR2,
		HtmlContent				IN NCLOB,
		Url						IN NVARCHAR2,
		UserReservedCode		IN NVARCHAR2,
		UserReservedDate		IN DECIMAL,
		UserReservedAmount		IN DECIMAL,
		UserReservedNumber		IN DECIMAL,
		UserReservedReference	IN NVARCHAR2,
		UserId					IN NVARCHAR2,
		ProgramId				IN NVARCHAR2,
		WorkStationId			IN NVARCHAR2,
		DateUpdated				IN DECIMAL,
		TimeOfDay				IN DECIMAL
)
AS
BEGIN

	IF(AnnouncementID IS NULL OR AnnouncementID = 0) THEN
		BEGIN
			SELECT NVL(MAX(MS$9NID), 0) + 1 INTO AnnouncementID 
			FROM [SCDATA].FQ67105;
		END;
	END IF;

	INSERT INTO [SCDATA].FQ67105
    (
        MS$9NID
       ,MS$9DS
       ,MS$9PRI
       ,MS$9MST
       ,MSEFFF
       ,MSEFFT
       ,MS$9MTT
       ,MS$9MSC
       ,MS$9MLK
       ,MSURCD
       ,MSURDT
       ,MSURAT
       ,MSURAB
       ,MSURRF
       ,MSUSER
       ,MSPID
       ,MSJOBN
	   ,MSUPMJ
       ,MSTDAY
    )
    VALUES
    (	
        AnnouncementID,
		DesignStatus,
		Priority,
		AccessLevel,
		EffectiveDate,
		ExpirationDate,
		Title,
		HtmlContent,
		Url,
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		UserId,
		ProgramId,
		WorkStationId,
		DateUpdated,
		TimeOfDay
    );
END;
		
  /
-- #desc						Add a General Announcement Assignments
-- #bl_class					Premier.Common.GeneralAnnouncementAssignment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param UniqueKeyID			Unique ID	
-- #param AssignmentType		Assignment Type
-- #param WebAccountID			Web Account ID
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param DataItem				Data Item
-- #param UserDefinedKey		User Defined Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddGnrlAnnounceAssign
(		
	AnnouncementID			IN DECIMAL,
	UniqueKeyID				OUT DECIMAL,
	AssignmentType			IN DECIMAL,	
	WebAccountID			IN DECIMAL,
	AddressNumber			IN DECIMAL,
	AddressBookType			IN DECIMAL,
	DataItem				IN NVARCHAR2,
	UserDefinedKey			IN NVARCHAR2,

	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedNumber		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	WorkStationID			IN NVARCHAR2,
	DateUpdated				IN DECIMAL,
	TimeOfDay				IN DECIMAL
)
AS
BEGIN 
	BEGIN
	    SELECT NVL(MAX(MAUKID), 0) + 1 INTO UniqueKeyID 
	    FROM [SCDATA].FQ67105A
	    WHERE MA$9NID = AnnouncementID;
	END;

	INSERT INTO [SCDATA].FQ67105A
	(
		MA$9NID,
		MAUKID,
		MA$9ATYP,
		MA$9WAN8,
		MA$9AN8,
		MA$9TYP,
		MADTAI,
		MAKY,
		MAURCD,
		MAURDT,
		MAURAT,
		MAURAB,
		MAURRF,
		MAUSER,
		MAPID,
		MAJOBN,
		MAUPMJ,
		MATDAY
	)
	VALUES
	(
		AnnouncementID,
		UniqueKeyID,
		AssignmentType,
		WebAccountID,
		AddressNumber,
		AddressBookType,
		DataItem,
		UserDefinedKey,
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeOfDay
	);
END;
  /
-- #desc						Add an Installation.
-- #bl_class					Premier.Common.Store.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param description			Description
-- #param ApplicationUseFlag	POS WEB NONE app Use Flag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddInstallation
(
	InstallationID      IN NVARCHAR2,
	Description         IN NVARCHAR2,
	ApplicationUseFlag  IN NVARCHAR2
)
AS
BEGIN

    INSERT INTO [SCDATA].FQ670001
	(
	  IN$9INID,  
	  INDSC1,
	  IN$9APFL
	)
	VALUES
	(
	  InstallationID, 
	  Description,
	  ApplicationUseFlag
	);
END;


  /
-- #desc				            Create next number into table FQ67002
-- #bl_class			            Premier.Common.NextNumber.cs
-- #db_dependencies				    N/A
-- #db_references				    N/A	

-- #param NextNumberID				Key
-- #param UseDescription1			Description
-- #param UseDescription2			Description 2
-- #param NextValue				    Next value
-- #param UserReservedCode			
-- #param UserReservedDate
-- #param UserReservedAmount
-- #param UserReservedNumber
-- #param UserReservedReference
-- #param UserId
-- #param ProgramId
-- #param WorkStationId
-- #param DateUpdated
-- #param TimeOfDay

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddNextNumber
(
    NextNumberID        IN DECIMAL,
    UseDescription1     IN NVARCHAR2,
    UseDescription2     IN NVARCHAR2,
    NextValue           IN DECIMAL,
    UserReservedCode    IN NVARCHAR2,
    UserReservedDate    IN DECIMAL,
    UserReservedAmount  IN DECIMAL,
    UserReservedNumber  IN DECIMAL,
    UserReservedReference  IN NVARCHAR2,
    UserId              IN NVARCHAR2,
    ProgramId           IN NVARCHAR2,
    WorkStationId       IN NVARCHAR2,
    DateUpdated         IN DECIMAL,
    TimeOfDay           IN DECIMAL
)

AS
BEGIN
    INSERT INTO [SCDATA].FQ67002
    (
        NN$9UKID,  NNUD01,  NNUD02, 
        NN$9N001,  NNURCD,  NNURDT,  NNURAT, 
        NNURAB,    NNURRF,  NNUSER,  NNPID, 
        NNJOBN,    NNUPMJ,  NNTDAY
    )
    VALUES
    (
        NextNumberID, UseDescription1, UseDescription2, 
        NextValue, UserReservedCode, UserReservedDate, UserReservedAmount, 
        UserReservedNumber,   UserReservedReference, UserId, ProgramId, 
        WorkStationId,   DateUpdated, TimeOfDay
    );
END;



  /
-- #desc						Associates ItemNumbers and BranchPlants sent as parameters separated by a ','
-- #bl_class					N/A	
-- #db_dependencies				N/A
-- #db_references				COM_GetCrossSegmentRulesList

-- #param ItemNumberList		Item Number List
-- #param BranchPlantList		Branch Plant List
-- #param Separator				Separator

CREATE OR REPLACE FUNCTION [SCLIBRARY].CMM_AssocItemBranchPlantFnc
(
	ItemNumberList 	IN NVARCHAR2,
	BranchPlantList	IN NVARCHAR2,
	Separator 		IN NCHAR
)

RETURN NVARCHAR2 IS

	AssociateIB NVARCHAR2(1) := NULL;
	ItemNumberListTMP NVARCHAR2(500);
	BranchPlantListTMP NVARCHAR2(500);
	SeparatorPositionIN INT;
	SeparatorPositionBP INT;
	ItemNumber INT;
	BranchPlant NVARCHAR2(12);
	TMPBranchPlant NVARCHAR2(12); 
	StartPositionIN INT;
	StartPositionBP INT;

BEGIN

	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETCROSSSEGMENTRULESLIST_A';

	ItemNumberListTMP := ItemNumberList;
	BranchPlantListTMP := BranchPlantList;
	SeparatorPositionIN := INSTR(ItemNumberListTMP, Separator, 1 );
	SeparatorPositionBP := INSTR(BranchPlantListTMP, Separator, 1 );
    StartPositionIN := 1;
    StartPositionBP := 1;

	 IF (SeparatorPositionIN = 0) THEN
	   
	    BEGIN
	     SELECT KUMCU INTO TMPBranchPlant
			FROM [SCDATA].F3292
			WHERE KUKIT = ItemNumberListTMP
			AND KUMCU = BranchPlantListTMP
			AND ROWNUM = 1;
			EXCEPTION
			WHEN NO_DATA_FOUND THEN
			TMPBranchPlant := NULL; /*Retrieve first MCU valid for the specified product in the cross segment rules table*/
		END;

	   ItemNumber := TO_NUMBER(ItemNumberListTMP);
	   BranchPlant := CASE WHEN TMPBranchPlant IS NULL THEN ' ' ELSE TMPBranchPlant END;

	   INSERT INTO [SCLIBRARY].COM_GETCROSSSEGMENTRULESLIST_A(ItemNumber, BranchPlant) VALUES (ItemNumber, BranchPlant);
	 ELSE
		 ItemNumberListTMP := ItemNumberListTMP || Separator;
		 BranchPlantListTMP := BranchPlantListTMP || Separator;

		 WHILE SeparatorPositionIN > 0
		 LOOP
			  BEGIN
			   ItemNumber := TO_NUMBER(SUBSTR(ItemNumberListTMP , StartPositionIN, SeparatorPositionIN- StartPositionIN));
			   BranchPlant := SUBSTR(BranchPlantListTMP , StartPositionBP, SeparatorPositionBP- StartPositionBP);

			   BEGIN
				   SELECT KUMCU INTO TMPBranchPlant
					FROM [SCDATA].F3292
					WHERE KUKIT = ItemNumber
					AND KUMCU = BranchPlant
					AND ROWNUM = 1;
					EXCEPTION
					WHEN NO_DATA_FOUND THEN
					TMPBranchPlant := NULL; /*Retrieve first MCU valid for the specified product in the cross segment rules table*/
			   END;
                                
			   BranchPlant := CASE WHEN TMPBranchPlant IS NULL THEN ' ' ELSE TMPBranchPlant END;
 
			   IF( ItemNumber <> 0) THEN
				  INSERT INTO [SCLIBRARY].COM_GETCROSSSEGMENTRULESLIST_A(ItemNumber, BranchPlant) VALUES (ItemNumber, BranchPlant);
			   END IF;
   
			   StartPositionIN := SeparatorPositionIN + 1;
			   SeparatorPositionIN := INSTR(ItemNumberListTMP, Separator, StartPositionIN);
			   StartPositionBP := SeparatorPositionBP + 1;
			   SeparatorPositionBP := INSTR(BranchPlantListTMP, Separator, StartPositionBP);
			 END;
		END LOOP;
	 END IF;

	RETURN ' ';

END CMM_AssocItemBranchPlantFnc;	
  /
-- #desc					Un Relate All Companies
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation ID 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelAllCompaniesByInst
(
	InstallationID      IN NVARCHAR2
)
AS
BEGIN
	
	DELETE FROM
		[SCDATA].FQ679912
	WHERE
		CI$9INID = InstallationID;

END;
		
  /
-- #desc				    Deletes an Installation description.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelAllDocRestric
(
	InstallationID      IN NCHAR,
    ConstantID		    IN NCHAR,
    ProductCode		    IN NCHAR,
    UserDefinedCode	    IN NCHAR
)
AS
BEGIN
	DELETE  
	FROM  [SCDATA].FQ67008
		
	WHERE
		    DR$9INID = InstallationID
		AND DR$9CNST = ConstantID
		AND DRSY =	 ProductCode
		AND DRRT =	 UserDefinedCode;
END;
		
  /
-- #desc						Delete Announcement Installation
-- #bl_class					Premier.Common.AnnouncementStore.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param InstallationID		Installation ID
-- #param AnnouncementType		Announcement Type  AGen | ATag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelAnnounceInstallation
(
	AnnouncementID		IN NUMBER,
	InstallationID	    IN NCHAR,
	AnnouncementType	IN NCHAR
)
AS
BEGIN
	DELETE FROM
		[SCDATA].FQ67105I
	WHERE
		MI$9NID  = AnnouncementID AND 
		(InstallationID = '*' OR MI$9INID = InstallationID) AND 
		MI$9APFL = AnnouncementType;
END;
  /
-- #desc				    Delete Branch Plant from installation
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param BranchPlant		Branch Plant (MCU)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelBranchPlantByInst
(
	InstallationID  IN NCHAR,
	BranchPlant	    IN NCHAR
)
AS
BEGIN
	/* Item Branch Plant Override By Installation */
	DELETE FROM [SCDATA].FQ670005 WHERE BP$9INID = InstallationID AND BPMCU = BranchPlant;

	DELETE FROM
		[SCDATA].FQ679910
	Where
		    BI$9INID =  InstallationID 
		AND BIMCU =    BranchPlant;
END;
		

  /
-- #desc					Un Relate Company
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation ID
-- #param Company			Company

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelCompanyByInst
(
	InstallationID		IN  NCHAR,
    Company				IN	NCHAR
)
AS
BEGIN
	
	DELETE FROM
		[SCDATA].FQ679912		
	WHERE
		CI$9INID = InstallationID		
		AND CICO = Company;

END;
  /
-- #desc				            Delete contant detail
-- #bl_class						Premier.Common.Constant.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelConstant
(
	Constant		IN NCHAR,
	InstallationID  IN NCHAR
)

AS
BEGIN
	DELETE FROM
		[SCDATA].FQ670004
	WHERE
		    CN$9INID = InstallationID
		AND CN$9CNST = Constant;
END;



  /
-- #desc					Remove currency Detail
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param SequenceId		Sequence Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelCurrencyDetail
(
    CurrencyCode	IN NCHAR,
    SequenceId		IN NUMBER
)
AS
BEGIN
	DELETE FROM 
		[SCDATA].FQ67012 
	WHERE 
		CICRCD = CurrencyCode
		AND CILNID = SequenceId;
END;
  /
-- #desc					Remove currency header
-- #bl_class				Premier.Common.CurrencyHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelCurrencyHeader
(
    CurrencyCode	IN NCHAR
)
AS
BEGIN

	DELETE FROM [SCDATA].FQ67011 WHERE CICRCD = CurrencyCode;

	DELETE FROM [SCDATA].FQ67012 WHERE CICRCD = CurrencyCode;

END;
  /
-- #desc					Deletes an Installation description.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 
-- #param UserDefinedKey	UDC Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelDocRestric
(
	InstallationID   IN NCHAR,
    ConstantID		 IN	NCHAR,
    ProductCode		 IN	NCHAR,
    UserDefinedCode	 IN	NCHAR,
    UserDefinedKey	 IN	NCHAR
)
AS
BEGIN
	DELETE  
	FROM  
	    [SCDATA].FQ67008
	WHERE
		    DR$9INID = InstallationID
		AND DR$9CNST = ConstantID
		AND DRSY = ProductCode	
		AND DRRT = UserDefinedCode
		AND DRKY = UserDefinedKey; 
END;
		
  /

-- #desc						Del General Announcement Lang
-- #bl_class					Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param DesignStatus			Design Status
-- #param LangPref				Language


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelGeneralAnnounceLang
(
	AnnouncementID		NUMBER,
	DesignStatus		NUMBER,
	LangPref			NCHAR
)
AS
BEGIN

	DELETE FROM  
		[SCDATA].FQ67105L
	WHERE 
		ML$9NID = AnnouncementID
		AND (LangPref = '*' OR MLLNGP = LangPref)
		AND (DesignStatus IS NULL OR ML$9DS = DesignStatus);
END;

	
  /
-- #desc					Delete General Announcement
-- #bl_class				Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies			CMM_DelGeneralAnnouncLang, CMM_DelGeneralAnnouncInst
-- #db_references			N/A

-- #param AnnouncementID	Announcement ID
-- #param DesignStatus		Design Status

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelGeneralAnnouncement
(
	AnnouncementID		IN DECIMAL,
	DesignStatus		IN DECIMAL
)
AS
	COUNTANNOUNCE INT;
BEGIN
	SELECT COUNT(*) INTO COUNTANNOUNCE FROM [SCDATA].FQ67105 WHERE MS$9NID = AnnouncementID;
	/* IF COUNTANNOUNCE = 1 doesn't have copy (draft and published) */
	/* IF DesignStatus delete published and draft version */
	IF COUNTANNOUNCE = 1 OR DesignStatus IS NULL THEN 
		
		/* Delete relation with installations */
		[SCLIBRARY].CMM_DelAnnounceInstallation(AnnouncementID, '*', 'AGen');
		/* History */
		[SCLIBRARY].CMM_ExcUserAnnounceClearHist(AnnouncementID, 'AGen', NULL);
		/* Delete assignments */
		[SCLIBRARY].CMM_DelGnrlAnnounceAssign(AnnouncementID, NULL);
	END IF;

	[SCLIBRARY].CMM_DelGeneralAnnounceLang(AnnouncementID, DesignStatus, '*');

	DELETE FROM 
		[SCDATA].FQ67105
	WHERE 
		MS$9NID = AnnouncementID AND
		(DesignStatus IS NULL OR MS$9DS = DesignStatus);	
END;
			
			
  /
-- #desc				    Deletes an Installation description.
-- #bl_class				Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelInstallation
(
	InstallationID IN NVARCHAR2
)
AS
BEGIN
	--Line of Business By Installation
	DELETE FROM [SCDATA].FQ671031 WHERE LI$9INID = InstallationID;
		
	--Item Branch Priority
	DELETE FROM [SCDATA].FQ674101 WHERE PR$9INID = InstallationID;
	
	/* Item Branch Plant Override By Installation */
	DELETE FROM [SCDATA].FQ670005 WHERE BP$9INID = InstallationID;
	
	--Branch Plant By Installation
	DELETE FROM [SCDATA].FQ679910 WHERE BI$9INID = InstallationID;
	
	--Constant Value By Installation
	DELETE FROM [SCDATA].FQ670004 WHERE CN$9INID = InstallationID;
	
	--Sales Unit of Measure
	DELETE FROM [SCDATA].FQ67415 WHERE UM$9INID = InstallationID;
	
	--Sales Unit of Measure (language)
	DELETE FROM [SCDATA].FQ67415L WHERE UM$9INID = InstallationID AND UMUOM NOT IN (SELECT UMUOM FROM [SCDATA].FQ67415);	
	
	--Items Fast Buttons (language)
	DELETE FROM [SCDATA].FQ67416L WHERE FB$9INID = InstallationID;
	
	--Items Fast Buttons
	DELETE FROM [SCDATA].FQ67416 WHERE FB$9INID = InstallationID;
	
	--Document Restrictions (AR - SO)
	DELETE FROM [SCDATA].FQ67008 WHERE DR$9INID = InstallationID;
	
	--Permission Setup by Installation (eCommerce Permissions)
	DELETE FROM [SCDATA].FQ67994E WHERE PE$9INID = InstallationID;
	
	--Item Web Content Detail
	DELETE FROM [SCDATA].FQ67411 WHERE CD$9INID = InstallationID;
	
	--Item Web Content Detail (Language)
	DELETE FROM [SCDATA].FQ67411L WHERE CL$9INID = InstallationID;
	
	--Item Web Content Header
	DELETE FROM [SCDATA].FQ67410 WHERE CH$9INID = InstallationID;
	
	--Item Web Content Header ( Language)
	DELETE FROM [SCDATA].FQ67410L WHERE CL$9INID = InstallationID;
		
	--Receipts by Installation ID or Registers
	DELETE FROM [SCDATA].FQ674213 WHERE RR$9INID = InstallationID;
	
	--Drawers by Register
	DELETE FROM [SCDATA].FQ674261 WHERE EXISTS(SELECT * FROM [SCDATA].FQ67426 
												WHERE RG$9REGID = DR$9REGID AND RG$9INID = InstallationID);
	
	--Registers Master
	DELETE FROM [SCDATA].FQ67426 WHERE RG$9INID = InstallationID;

	--Catalog Detail (language)
	DELETE FROM [SCDATA].FQ67413L CDL WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = CDL.CD$9CLGID AND C.CA$9INID = InstallationID);
	--Catalogs Detail
	DELETE FROM [SCDATA].FQ67413 CD WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = CD.CD$9CLGID AND C.CA$9INID = InstallationID);
	--Catalogs (language)
	DELETE FROM [SCDATA].FQ67412L CL WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = CL.CA$9CLGID AND C.CA$9INID = InstallationID);
												
	--Catalog Node Items
	DELETE FROM [SCDATA].FQ67413I I WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 C
												WHERE C.CA$9CLGID = I.IN$9CLGID AND C.CA$9INID = InstallationID);
	--Catalogs
	DELETE FROM [SCDATA].FQ67412 WHERE CA$9INID = InstallationID;
	
	--- P4210 Settings Detail	
	DELETE FROM [SCDATA].FQ674231 WHERE RD$9INID = InstallationID;
	
	--- P4210 Settings Header	
	DELETE FROM [SCDATA].FQ674230 WHERE RH$9INID = InstallationID;
	
	--- Sales Person Clients	
	DELETE FROM [SCDATA].FQ67125 WHERE SP$9INID = InstallationID;
	
	--Recently View Items
	DELETE FROM [SCDATA].FQ67120 WHERE WI$9INID = InstallationID;
	
	--Companies By Installation
	DELETE FROM [SCDATA].FQ679912 WHERE CI$9INID = InstallationID;

	--///////////// Delete User /////////////////////////
	
	--User Permissions
	DELETE FROM [SCDATA].FQ67997 WHERE EXISTS(SELECT US$9USER 
	                                           FROM [SCDATA].FQ67991   US,
													[SCDATA].FQ67101   WA,
													[SCDATA].FQ67996	UI	
											   WHERE 
													    WA.WA$9USER = UI.UI$9USER
													AND WA.WA$9USER = US.US$9USER
													AND US.US$9USER = UP$9USER 
													AND UI.UI$9INID = InstallationID);
	
	--User Password History
	DELETE FROM [SCDATA].FQ679911 WHERE EXISTS(SELECT US$9USER 
	                                           FROM [SCDATA].FQ67991 US,
													[SCDATA].FQ67101 WA,
													[SCDATA].FQ67996 UI
											    WHERE 
													    WA.WA$9USER = US.US$9USER
													AND WA.WA$9USER = UI$9USER
													AND	US$9USER = PH$9USER
													AND UI$9INID = InstallationID);
													
	--Users
	DELETE FROM [SCDATA].FQ67991 WHERE EXISTS(SELECT WA$9USER 
	                                           FROM [SCDATA].FQ67101   WA,
													[SCDATA].FQ67996   UI   
											   WHERE 
											            WA.WA$9USER = UI.UI$9USER
											        AND WA.WA$9USER = US$9USER
													AND UI.UI$9INID = InstallationID);	 
		
	--Shopping Cart Detail (Persist Information)	
	DELETE FROM [SCDATA].FQ67411W WHERE EXISTS(SELECT WA$9WAN8 
	                                            FROM 
	                                                [SCDATA].FQ67101   WA,
													[SCDATA].FQ67996   UI
												WHERE 
												        WA.WA$9USER = UI.UI$9USER
												    AND WA.WA$9WAN8 = SD$9WAN8
													AND UI.UI$9INID = InstallationID);
		
	--Shopping Cart Header (Persist Information)
	DELETE FROM [SCDATA].FQ6742WF WHERE EXISTS(SELECT WA$9WAN8 
	                                            FROM [SCDATA].FQ67101 WA,
													 [SCDATA].FQ67996 UI
												WHERE
												        WA.WA$9USER = UI.UI$9USER 
													AND WA.WA$9WAN8 = SH$9WAN8
													AND UI.UI$9INID = InstallationID);		
	
	--Wish List Detail
	DELETE FROM [SCDATA].FQ674215 WHERE EXISTS(SELECT WA$9WAN8 
	                                           FROM [SCDATA].FQ67101 WA,
													[SCDATA].FQ67996 UI
													WHERE 
													        WA.WA$9USER = UI.UI$9USER --INNER JOIN
													    AND WA.WA$9WAN8 = WD$9WAN8
														AND UI.UI$9INID = InstallationID);
	
	--Wish List Header
	DELETE FROM [SCDATA].FQ674214 WHERE EXISTS(SELECT WA.WA$9WAN8 
	                                           FROM [SCDATA].FQ67101 WA,
													[SCDATA].FQ67996 UI
											   WHERE 
											        WA.WA$9USER = UI.UI$9USER --INNER JOIN
													AND WA.WA$9WAN8 = WH$9WAN8
													AND UI.UI$9INID = InstallationID);	
	--Announcements - Assignments by web account 
	DELETE FROM [SCDATA].FQ67105A WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101 
													WHERE WA$9INID = InstallationID AND WA$9WAN8 = MA$9WAN8) AND MA$9ATYP = 5;
															
	--Web Accounts
	DELETE FROM [SCDATA].FQ67101 WHERE EXISTS(SELECT UI$9USER FROM [SCDATA].FQ67996
														WHERE UI$9USER = WA$9USER
															AND UI$9INID = InstallationID);	
	
	--Users by Installation Id
	DELETE FROM [SCDATA].FQ67996 WHERE UI$9INID = InstallationID;

	--Announcements  History
	DELETE FROM [SCDATA].FQ67105H WHERE MH$9INID = InstallationID;

	--Announcements 
	DELETE FROM [SCDATA].FQ67105I WHERE MI$9INID = InstallationID;
	
	--InstallationId Master
	DELETE FROM [SCDATA].FQ670001 WHERE IN$9INID = InstallationID;
END;
  /
-- #desc							Update next number from table FQ67002
-- #bl_class						Premier.Common.NextNumber.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param NextNumberID				Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelNextNumber
(
	NextNumberID IN DECIMAL
)
	
AS
BEGIN	
    DELETE 
    FROM  
	    [SCDATA].FQ67002
    WHERE 
	    NN$9UKID = NextNumberID;
END;




  /

-- #desc					Check BranchPlant Related Exist
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param BranchPlantID		BranchPlant ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcBranchPlantRelatedExist
(	
	BranchPlantID 	IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)	
AS
BEGIN
	OPEN ResultData1 FOR
	SELECT
		COUNT(1)
	FROM
		[SCDATA].FQ679910			
	WHERE 
		BIMCU = BranchPlantID AND 
		BI$9INID <> '***';
END;
  /
-- #desc						Check dry state
-- #bl_class					Premier.Common.CheckDryStateCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param State			        State

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcCheckDryState
(
	State IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
	        SC$9CLR
        FROM  
            [SCDATA].FQ675520
        WHERE 
  	        SCADDS = State;
END;
  /

-- #desc					Copy an Installation.
-- #bl_class				Premier.Common.CopyStoreCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcCopyInstallation
(
	InstallationID		IN NCHAR,
	InstallationIDFrom  IN NCHAR,
	UserID				IN DECIMAL,
	SelectionKeys		IN NVARCHAR2
)
AS
	Pos INT;
	NextString NVARCHAR2(1000);
	SelectionKeysTMP NVARCHAR2(256) := SelectionKeys;
	v_longf LONG;
	
BEGIN 
	
	IF (TRIM(SelectionKeysTMP) IS NOT NULL) THEN
	BEGIN
		Pos := INSTR(SelectionKeysTMP, '|@');	
		WHILE (Pos <> 0)
		LOOP
			BEGIN
				NextString := SUBSTR(SelectionKeysTMP, 1, Pos - 1);
				SelectionKeysTMP := SUBSTR(SelectionKeysTMP,Pos + 2,LENGTH(SelectionKeysTMP));
				Pos := INSTR(SelectionKeysTMP, '|@');
							
				IF (NextString = 'CONSTANT') THEN	
				BEGIN
						INSERT INTO [SCDATA].FQ670004 (CN$9INID,CN$9CNST,CN$9VAL)
							(SELECT
								InstallationID,
								A.CN$9CNST,
								A.CN$9VAL
							FROM [SCDATA].FQ670004 A
							INNER JOIN [SCDATA].FQ670003 B
								ON B.CN$9CNST= A.CN$9CNST
							WHERE A.CN$9INID = InstallationIDFrom
								AND B.CN$9SOF = 0
								AND NOT EXISTS (SELECT 1 FROM [SCDATA].FQ670004 C WHERE C.CN$9INID = InstallationID AND C.CN$9CNST = A.CN$9CNST));

					    INSERT INTO [SCDATA].FQ679912 (CI$9INID,CICO,CIDSC1,CIDSC2,CISQ01,CISQ02,CIAA,CIAA1,CIDATE01,CIDATE02,CISRP1,CISRP2,CISRP3,CISRP4,
						CISRP5,CISRP6,CISRP7,CISRP8,CISRP9,CISRP0,CIURAB,CIURAT,CIURCD,CIURDT,CIURRF,CIUSER,CIPID,CIUPMJ,CIUPMT,CIJOBN) 
						(SELECT
								InstallationID,
								CICO,
								CIDSC1,
								CIDSC2,
								CISQ01,
								CISQ02,
								CIAA,
								CIAA1,
								CIDATE01,
								CIDATE02,
								CISRP1,
								CISRP2,
								CISRP3,
								CISRP4,
								CISRP5,
								CISRP6,
								CISRP7,
								CISRP8,
								CISRP9,
								CISRP0,
								CIURAB,
								CIURAT,
								CIURCD,
								CIURDT,
								CIURRF,
								CIUSER,
								CIPID,
								CIUPMJ,
								CIUPMT,
								CIJOBN
							FROM [SCDATA].FQ679912
							WHERE CI$9INID = InstallationIDFrom);
				END;
				
			   ELSIF (NextString = 'LOB') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ671031(LI$9LOB,LI$9INID,LIPID,LIJOBN,LIUSER,LIUPMJ,LIUPMT)
							(SELECT
								LI$9LOB,
								InstallationID,
								LIPID,
								LIJOBN,
								LIUSER,
								LIUPMJ,
								LIUPMT
							FROM [SCDATA].FQ671031
							WHERE LI$9INID = InstallationIDFrom);
				END;
				
				ELSIF (NextString = 'MCU') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ679910 (BI$9INID,BIMCU)
							(SELECT
								InstallationID,
								BIMCU
							FROM [SCDATA].FQ679910
							WHERE BI$9INID = InstallationIDFrom);
				END;
				
				ELSIF (NextString = 'UOM') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ67415 (UM$9INID,UMUOM,UMDSC1)
							(SELECT
								InstallationID,
								UMUOM,	
								UMDSC1
							FROM [SCDATA].FQ67415
							WHERE UM$9INID = InstallationIDFrom);
				END;
				
				ELSIF (NextString = 'DOCREST') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ67008(DR$9INID,DR$9CNST,DRSY,DRRT,DRKY,DRURCD,DRURDT,DRURAT,DRURAB,DRURRF,DRUSER,DRPID,DRUPMJ,DRJOBN,DRUPMT)
							(SELECT	
								InstallationID,
								DR$9CNST,
								DRSY,
								DRRT,
								DRKY,								
								DRURCD,
								DRURDT,
								DRURAT,
								DRURAB,
								DRURRF,
								DRUSER,
								DRPID,
								DRUPMJ,
								DRJOBN,
								DRUPMT
							FROM [SCDATA].FQ67008
							WHERE DR$9INID = InstallationIDFrom);
				END;
				
				ELSIF (NextString = 'ITEMCNT') THEN
				BEGIN
					   INSERT INTO [SCDATA].FQ67411L
							(SELECT 
								 CLITM
								,CLUKID
								,InstallationID
								,CL$9DS
								,CLLNGP
								,CL$9PTL
								,v_longf
								,CLURCD
								,CLURDT
								,CLURAT
								,CLURAB
								,CLURRF
								,CLUSER
								,CLPID
								,CLJOBN
								,CLUPMJ
								,CLTDAY
							FROM [SCDATA].FQ67411L
							WHERE 	    
								CL$9INID = InstallationIDFrom);
						
				
						INSERT INTO [SCDATA].FQ67411
							(SELECT
								CDITM,
								CDUKID,
								InstallationID,
								CD$9DS,
								CDSEQ,
								CD$9PTL,
								CD$9HTML,
								CDASAI,
								CDEFFF,
								CDEFFT,
								CDURCD,
								CDURDT,
								CDURAT,
								CDURAB,
								CDURRF,
								CDUSER,
								CDPID,
								CDJOBN,
								CDUPMJ,
								CDTDAY
							FROM [SCDATA].FQ67411
							WHERE CD$9INID = InstallationIDFrom);
													
						INSERT INTO [SCDATA].FQ67410L
							(SELECT
								CLITM,
								InstallationID,       
								CL$9DS,
								CLLNGP,
								CLDSC1,
								CLDSC2,
								CLDSC3,
								CLPGTX,
								CLDL01,
								CLDL02,
								CLDL03,
								CLDL04,
								CLDL05,
								CLDL06,
								CLDL07,
								CLDL08,
								CLDL09,
								CLDL10,
								CLCOMMENTS,
								CL$9HTML,
								CLURCD,
								CLURDT,
								CLURAT,
								CLURAB,
								CLURRF,
								CLUSER,
								CLPID,
								CLJOBN,
								CLUPMJ,
								CLTDAY
							FROM [SCDATA].FQ67410L
							WHERE CL$9INID = InstallationIDFrom);

						INSERT INTO [SCDATA].FQ67410
							(SELECT
								CHITM,
								InstallationID,
								CH$9DS,
								CHDSC1,
								CHDSC2,
								CHDSC3,
								CHPGTX,
								CHDL01,
								CHDL02,
								CHDL03,
								CHDL04,
								CHDL05,
								CHDL06,
								CHDL07,
								CHDL08,
								CHDL09,
								CHDL10,
								CHCOMMENTS,
								CH$9PRI,
								CH$9HTML,
								CHPTURL,
								CHURCD,
								CHURDT,
								CHURAT,
								CHURAB,
								CHURRF,
								CHUSER,
								CHPID,
								CHJOBN,
								CHUPMJ,
								CHTDAY
							FROM [SCDATA].FQ67410
							WHERE CH$9INID = InstallationIDFrom);
				END;
				
				ELSIF (NextString = 'PERMISSION') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ67994E (PE$9INID,PE$9PCD,PE$9ICF,PE$9ALLOW,PE$9WEBA)
							(SELECT
							InstallationID,
							PE$9PCD,
							PE$9ICF,
							(CASE 
								WHEN (PE$9PCD IN ('EOVAB', 'EOCIH', 'EOIVP', 'EBAAD', 'EBAMF', 'EBASW', 'ECCSW', 'ECCAD', 'ECCMF')) 
								THEN PE$9ALLOW
								ELSE 1 
							END),
							(CASE 
								WHEN (PE$9PCD IN ('EOVAB', 'EOCIH', 'EOIVP', 'EBAAD', 'EBAMF', 'EBASW', 'ECCSW', 'ECCAD', 'ECCMF')) 
								THEN PE$9WEBA
								ELSE 0 
							END)
						FROM [SCDATA].FQ67994E
						WHERE PE$9INID = InstallationIDFrom);
				END;
				
				ELSIF (NextString = 'RECEIPT') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ674213
							(SELECT
								RR$9RCID,
								InstallationID,
								RR$9REGID,
								RR$9XML,
								RRPID,
								RRJOBN,
								RRUSER,
								RRUPMJ,
								RRUPMT
							FROM [SCDATA].FQ674213
							WHERE RR$9INID = InstallationIDFrom);
				END;
				
				ELSIF (NextString = 'FASTBTN') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ67416L (FB$9INID,FBLNID,FBLNGP,FBDSC1,FBDSC2)
							(SELECT
								InstallationID,
								FBLNID,
								FBLNGP,
								FBDSC1,
								FBDSC2
							FROM [SCDATA].FQ67416L
							WHERE FB$9INID = InstallationIDFrom);

						INSERT INTO [SCDATA].FQ67416 (FB$9INID,FBLNID,FBITM,FBUOM,FBUORG,FBDSC1,FBDSC2)
							(SELECT
								InstallationID,
								FBLNID,
								FBITM,
								FBUOM,
								FBUORG,
								FBDSC1,
								FBDSC2
							FROM [SCDATA].FQ67416
							WHERE FB$9INID = InstallationIDFrom);
				END;		   
         
        ELSIF (NextString = 'P4210') THEN
				BEGIN
						INSERT INTO [SCDATA].FQ674230 (RH$9INID,RHUKID,RHDSC1,RHVER,RHSEQ,RHRUDTP,RHRT,RHURAB,RHURAT,RHURCD,RHURDT,RHURRF,RHUSER,RHPID,RHUPMJ,RHUPMT,RHJOBN)
							(SELECT
								InstallationID,
								RHUKID,
								RHDSC1,
								RHVER,
								RHSEQ,
								RHRUDTP,
								RHRT,
								RHURAB,
								RHURAT,
								RHURCD,
								RHURDT,
								RHURRF,
								RHUSER,
								RHPID,
								RHUPMJ,
								RHUPMT,
								RHJOBN
							FROM [SCDATA].FQ674230
							WHERE RH$9INID = InstallationIDFrom);

						INSERT INTO [SCDATA].FQ674231 (RD$9INID,RDUKID,RDLNID,RDKY,RDMCU,RD$9AN8,RDURAB,RDURAT,RDURCD,RDURDT,RDURRF,RDUSER,RDPID,RDUPMJ,RDUPMT,RDJOBN)
							(SELECT
								InstallationID,
								RDUKID,
								RDLNID,
								RDKY,
								RDMCU,
								RD$9AN8,
								RDURAB,
								RDURAT,
								RDURCD,
								RDURDT,
								RDURRF,
								RDUSER,
								RDPID,
								RDUPMJ,
								RDUPMT,
								RDJOBN
							FROM [SCDATA].FQ674231
							WHERE RD$9INID = InstallationIDFrom);
				END;
			   
			   END IF;
			 END; -- BEGIN WHILE  
			END LOOP;		
	
	END; --BEGIN PRINCIPAL IF
	END IF;
  
END;
  /
 -- #desc					Get country address format from table F0070
-- #bl_class				Premier.Common.GetCountryAddressFormatCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param Country			Country id
-- #param AddressFormatId	Output value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcGetCountryAddrFormat
(
    Country				IN NVARCHAR2,
    AddressFormatId		OUT	NVARCHAR2
)
AS
BEGIN
    BEGIN        
        SELECT 
            A.CKADID INTO AddressFormatId
        FROM 
            [SCDATA].F0070 A
        WHERE 
            TRIM(A.CKCTR) = TRIM(Country);
            EXCEPTION WHEN NO_DATA_FOUND THEN 
			AddressFormatId := NULL;
	 END;
            
    IF (TRIM(AddressFormatId) IS NULL)
	THEN			
		BEGIN 
			SELECT 
				A.CKADID INTO AddressFormatId
			FROM 
				[SCDATA].F0070 A
			WHERE 
				TRIM(A.CKCTR) IS NULL;
				EXCEPTION WHEN NO_DATA_FOUND THEN 
				AddressFormatId := NULL;
		END;		
		IF(TRIM(AddressFormatId) IS NULL)
		THEN
			AddressFormatId := '04';
		END IF;
		
	END IF; 
END;
  /
-- #desc					Publish Announcement.
-- #bl_class				Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AnnouncementID	Announcement ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcGnrlAnnouncePublish
(
	AnnouncementID  IN DECIMAL,
	UserID			IN NVARCHAR2,
	WorkStationID	IN NVARCHAR2,
	DateUpdated		IN DECIMAL,
	TimeOfDay		IN DECIMAL
)
AS
BEGIN
	
	/* Delete Announcement Languages */
	DELETE FROM [SCDATA].FQ67105L 
	WHERE  
	ML$9NID = AnnouncementID AND
	ML$9DS = 0;							/* Published = 0 | Draft = 1 */

	/* Delete Published version	*/
	DELETE FROM [SCDATA].FQ67105 
	WHERE  
	MS$9NID = AnnouncementID AND
	MS$9DS = 0;							/* Published = 0 | Draft = 1 */
	/* Update Announcement status (Draft to Published) */
	UPDATE [SCDATA].FQ67105 
	SET MS$9DS = 0,						/* Published = 0 | Draft = 1 */
		MSUSER = UserID,
		MSJOBN = WorkStationID,
		MSUPMJ = DateUpdated,
		MSTDAY = TimeOfDay
	WHERE 
	MS$9NID = AnnouncementID AND 
	MS$9DS = 1;

	/* Update Announcement Langs */
	UPDATE [SCDATA].FQ67105L 
	SET ML$9DS = 0						/* Published = 0 | Draft = 1 */
	WHERE 
	ML$9NID = AnnouncementID AND 
	ML$9DS = 1;
END;
  /
-- #desc					Execute a command of Default Data Syncronization
-- #bl_class				Premier.SysBase.SystemDefaultDataSyncCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param TableName			Table Name
-- #param ExecuteCommand	Command(s) To Execute

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcSystemDefaultDataSync(
	TableName IN VARCHAR2,
	ExecuteCommand IN NCLOB,
	ResultData1 out GLOBALPKG.refcursor
)
AS

DTAOWNER VARCHAR2(30) := '[SCDATA]';
CTLOWNER VARCHAR2(30) := '[SCCTL]';
tableNameTemp VARCHAR2(50) := tableName;

originalExistingRecords NUMBER;
overallResult NUMBER;
originalExistingRecordsSQL VARCHAR2(300);
sqlToExecute LONG;
BEGIN

	tableNameTemp := Replace(tableNameTemp, '[JDEDTA]', DTAOWNER);
	tableNameTemp := Replace(tableNameTemp, '[JDECTL]', CTLOWNER);
	originalExistingRecordsSQL :='select  Count(*)  FROM ' || tableNameTemp;

	--Original existing records result
	EXECUTE IMMEDIATE  originalExistingRecordsSQL INTO originalExistingRecords;

	sqlToExecute :='BEGIN ' || Replace(Replace(Replace(Replace(executeCommand,'[JDEDTA]',DTAOWNER),'[JDECTL]',CTLOWNER),'{DUMMYTABLE}','from dual'),'{SPLITTER}',';')||' END;';
	EXECUTE IMMEDIATE sqlToExecute;
	EXECUTE IMMEDIATE 'select Count(*) FROM ' || tableNameTemp INTO overallResult;

	--Get the results
	OPEN ResultData1 FOR
	SELECT originalExistingRecords as OriginalExistingRecords, overallResult as OverallResult
	FROM dual;

END;
  /
-- #desc							Update pickup flag for Branchplants by Installations
-- #bl_class						Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param BranchPlant				Branch Plant (MCU)
-- #param AllowPickup				AllowPickup

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcUpdBranchPlantPickup
(
	InstallationID  IN NVARCHAR2,
	BranchPlant	    IN NVARCHAR2,
	AllowPickup     IN NVARCHAR2
)
AS	
BEGIN
	UPDATE 
		[SCDATA].FQ679910
	SET  
		BILCNF = AllowPickup
	WHERE 
		    BI$9INID = InstallationID
		AND BIMCU = BranchPlant;
END;
  /
-- #desc							Add User Announcement History
-- #bl_class						Premier.Common.UserAnnouncementHistory.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AnnouncementID			Announcement ID		
-- #param AnnouncementType			Announcement Type		
-- #param WebAccountID				WebAccount ID			
-- #param InstallationID			Installation ID		
-- #param AddressNumber				Address Number			
-- #param ContactID					Contact ID				
-- #param AddressBookType			Address Book Type		
-- #param Priority					Priority	
-- #param UserAnnouncementStatus	Announcement Record History Status			
-- #param AcceptanceDate			Acceptance Date

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcUserAnnounceUpdHist
(
	AnnouncementID				IN DECIMAL,
	AnnouncementType			IN NVARCHAR2,
	WebAccountID				IN DECIMAL,
	InstallationID				IN NVARCHAR2,
	AddressNumber				IN DECIMAL,
	ContactID					IN DECIMAL,
	AddressBookType				IN DECIMAL,
	Priority					IN DECIMAL,
	UserAnnouncementStatus		IN NVARCHAR2,
	AcceptanceDate				IN DECIMAL,
	UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN DECIMAL,
	UserReservedAmount			IN DECIMAL,
	UserReservedNumber			IN DECIMAL,
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,
	WorkStationID				IN NVARCHAR2,
	DateUpdated					IN DECIMAL,
	TimeOfDay					IN DECIMAL
)

AS
	
	CNT INT := 0;

BEGIN

	SELECT COUNT(*) INTO CNT FROM [SCDATA].FQ67105H WHERE (MH$9WAN8 = WebAccountID AND MH$9NID = AnnouncementID AND MH$9APFL = AnnouncementType);

	IF(UserAnnouncementStatus = 'U') THEN
		DELETE 
		FROM [SCDATA].FQ67105H
		WHERE MH$9WAN8 = WebAccountID AND 
				MH$9NID = AnnouncementID AND 
				MH$9APFL = AnnouncementType;
	ELSIF(CNT > 0)
	THEN
		UPDATE [SCDATA].FQ67105H
		SET 
			MH$9NID = AnnouncementID,
			MH$9APFL = AnnouncementType, 
			MH$9WAN8 = WebAccountID, 
			MH$9INID = InstallationID, 
			MH$9AN8 = AddressNumber, 
			MHIDLN = ContactID, 
			MH$9TYP = AddressBookType, 
			MH$9PRI = Priority, 
			MH$9A1ST = UserAnnouncementStatus,
			MH$9MDT =
			CASE 
				WHEN UserAnnouncementStatus = 'R' THEN AcceptanceDate ELSE MH$9MDT
			END, 
			MHURCD = UserReservedCode, 
			MHURDT = UserReservedDate, 
			MHURAT = UserReservedAmount, 
			MHURAB = UserReservedNumber, 
			MHURRF = UserReservedReference, 
			MHUSER = UserID, 
			MHPID = ProgramID, 
			MHJOBN = WorkStationID, 
			MHUPMJ =
			CASE 
				WHEN UserAnnouncementStatus = 'RB' 
				OR UserAnnouncementStatus = 'B' 
				OR UserAnnouncementStatus = 'D' THEN  DateUpdated ELSE MHUPMJ
			END, 
			MHTDAY = TimeOfDay
		WHERE
			MH$9WAN8 = WebAccountID 
			AND MH$9NID = AnnouncementID 
			AND MH$9APFL = AnnouncementType;
	ELSE
		INSERT INTO [SCDATA].FQ67105H
		(
			MH$9NID, MH$9APFL, MH$9WAN8, MH$9INID, MH$9AN8, MHIDLN, MH$9TYP, MH$9PRI, MH$9A1ST, MH$9MDT, 
			MHURCD, MHURDT, MHURAT, MHURAB, MHURRF, MHUSER, MHPID, MHJOBN, MHUPMJ, MHTDAY
		)
		VALUES 
		(
			AnnouncementID,
			AnnouncementType,
			WebAccountID,
			InstallationID,
			AddressNumber,
			ContactID,
			AddressBookType,
			Priority,
			UserAnnouncementStatus,
			AcceptanceDate,
			UserReservedCode,
			UserReservedDate,
			UserReservedAmount,
			UserReservedNumber,
			UserReservedReference,
			UserID,
			ProgramID,
			WorkStationID,
			DateUpdated,
			TimeOfDay				
		);
	END IF;
END;

  /
-- #desc					Get Announceent Installations.
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AnnouncementID	Announcement ID.
-- #param AnnouncementType	Announcement Type   AGen | ATag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetAnnounceInstallations
(
	AnnouncementID			IN DECIMAL,
	AnnouncementType		IN NVARCHAR2,
	ResultData1				OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
    SELECT 
		MI$9NID AS AnnouncementID,
		MI$9INID AS InstallationID,
		MI$9APFL AS AnnouncementType,
	    INDSC1	 AS Description,
		MIURCD AS UserReservedCode,
		MIURDT AS UserReservedDate,
		MIURAT AS UserReservedAmount,
		MIURAB AS UserReservedNumber,
		MIURRF AS UserReservedReference,
		MIUSER AS UserID,
		MIPID AS ProgramID,
		MIJOBN AS WorkStationID,
		MIUPMJ AS DateUpdated,
		MITDAY AS TimeOfDay
    FROM  
	    [SCDATA].FQ67105I ANNI
		INNER JOIN 
			[SCDATA].FQ670001 INID 
		ON 
			INID.IN$9INID = ANNI.MI$9INID
    WHERE 
			MI$9NID = AnnouncementID AND
			MI$9APFL = AnnouncementType;
END;
  /
-- #desc					Get Announce User Acceptance List
-- #bl_class				Premier.Common.AnnounceUserAcceptHistList
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AnnouncementID	Announcement ID.
-- #param AnnouncementType	Announcement Type  AGen | ATag
-- #param FilterTerm		Criteria to search by username or mailing name
-- #param PageIndex			Page number
-- #param PageSize			Page size


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetAnnounceUserAcceptLst
(
	AnnouncementID			IN NUMBER,
	AnnouncementType		IN NCHAR,
	FilterTerm				IN NCHAR,
	PageIndex				IN INT,
    PageSize				IN INT,
	ResultData1				OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT
		    AnnouncementID,
			AnnouncementType,
			WebAccountID,
			InstallationID,
			AddressNumber, 
			ContactId, 
			AcceptanceDate,
			MailingName, 
			UserName,
			Installation,
			ApplicationUseFlag,
			TotalRowCount
	FROM
	(SELECT ANNOUNCEHIST.*, ROWNUM RNUM, COUNT(*) OVER () TotalRowCount  FROM       
		(SELECT MH$9NID AS AnnouncementID,
			MH$9APFL AS AnnouncementType,
			MH$9WAN8 AS WebAccountID,
			MH$9INID AS InstallationID,
			MH$9AN8 AS AddressNumber,
			MHIDLN AS ContactId,
			MH$9MDT AS AcceptanceDate,
			CASE ANNH.MH$9TYP WHEN 0 THEN CUST.WWMLNM ELSE CONS.PCMLNM END AS  MailingName, 
			WUSR.WAEMAL AS UserName,
			INID.INDSC1 AS Installation,
			INID.IN$9APFL AS ApplicationUseFlag
		FROM [SCDATA].FQ67105H ANNH
		  INNER JOIN [SCDATA].FQ670001 INID 
			  ON INID.IN$9INID =  ANNH.MH$9INID 	  
		  INNER JOIN [SCDATA].FQ67101 WUSR 
			  ON ANNH.MH$9WAN8 = WUSR.WA$9WAN8 
		  LEFT OUTER JOIN [SCDATA].F0111 CUST
			  ON CUST.WWAN8 = ANNH.MH$9AN8 AND 
			  CUST.WWIDLN = ANNH.MHIDLN  AND
			  ANNH.MH$9TYP = 0 /*Customer Only*/
		  LEFT OUTER JOIN [SCDATA].FQ67303 CONS
			  ON ANNH.MH$9AN8 = CONS.PC$9AN8 AND 
			  ANNH.MHIDLN = CONS.PCIDLN AND		  
			  ANNH.MH$9TYP = 1 /*Consumer Only*/      
		  WHERE 
			  MH$9NID = AnnouncementID AND
			  MH$9APFL = AnnouncementType AND
			  (FilterTerm = N'*' OR 
				  UPPER(WUSR.WAEMAL) LIKE N'%' ||  FilterTerm || '%'
				  OR UPPER(CUST.WWMLNM) LIKE N'%' ||  FilterTerm || '%' 
				  OR UPPER(CONS.PCMLNM) LIKE N'%' ||  FilterTerm || '%') 
			  AND (MH$9A1ST IN (N'R', N'RB', N'D'))
			ORDER BY MH$9MDT DESC)  ANNOUNCEHIST)		
	WHERE ((PageIndex = 0 OR PageSize = 0) OR (RNUM BETWEEN (PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize));
END;
  /

-- #desc					Reads BranchPlant information
-- #bl_class				Premier.Common.BranchPlantInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param BranchPlant		BranchPlant
-- #param PhoneType			PhoneType

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetBranchPlantInfo
(
	BranchPlant     IN NCHAR,
	PhoneType		IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

BEGIN
	IF PhoneType = '*' THEN
		OPEN ResultData1 FOR
		SELECT
			A.MCCO	 AS Company,
			B.BILCNF AS AllowPickup,
			C.WWMLNM AS MailingName,
			D.ALCTY1 AS City,
			D.ALADDS AS State,
			D.ALADDZ AS ZipCode,
			D.ALCTR  AS Country,
			D.ALADD1 AS AddressLine1,
			D.ALADD2 AS AddressLine2,
			''		 AS Area,
			''		 AS PhoneNumber
		FROM
			[SCDATA].F0006 A				/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 F
				ON A.MCMCU = F.CIMCU
			INNER JOIN [SCDATA].FQ679910 B /*AllowPickup*/
			ON B.BIMCU = A.MCMCU
			LEFT OUTER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = A.MCAN8
				AND C.WWIDLN = 0
			LEFT OUTER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (NVL(F.CIAN8, A.MCAN8), CurrentJulianDate)) D	/*Address*/
				ON D.ALAN8 = A.MCAN8					
		WHERE A.MCMCU = BranchPlant;
	ELSE
		OPEN ResultData1 FOR
		SELECT
			A.MCCO	 AS Company,
			P.BILCNF As AllowPickup,
			C.WWMLNM AS MailingName,
			D.ALCTY1 AS City,
			D.ALADDS AS State,
			D.ALADDZ AS ZipCode,
			D.ALCTR  AS Country,
			D.ALADD1 AS AddressLine1,
			D.ALADD2 AS AddressLine2,
			E.WPAR1	 AS Area,
			E.WPPH1	 AS PhoneNumber
		FROM
			[SCDATA].F0006 A				/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 B
				ON A.MCMCU = B.CIMCU
			INNER JOIN [SCDATA].FQ679910 P /*AllowPickup*/
			ON P.BIMCU = A.MCMCU
			LEFT OUTER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = A.MCAN8
				AND C.WWIDLN = 0
			LEFT OUTER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (NVL(B.CIAN8, A.MCAN8), CurrentJulianDate)) D	/*Address*/
				ON D.ALAN8 = A.MCAN8
			LEFT OUTER JOIN (
			SELECT  WPAR1,WPPH1,WPAN8,WPIDLN  
				FROM  [SCDATA].F0115
				INNER JOIN [SCDATA].F0006 
				ON	WPAN8 = MCAN8      
			WHERE	WPPHTP = PhoneType
				AND WPIDLN = 0 and MCMCU = BranchPlant
				AND rownum  < 2) E /*Phone*/
				ON A.MCAN8 = E.WPAN8					
		WHERE A.MCMCU = BranchPlant;
	END IF;
END;		
  /

-- #desc					Reads Branch Plants by Store
-- #bl_class				Premier.Common.BranchPlantInfoList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			Store Id
-- #param PhoneType			Phone Type Setting
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetBranchPlantInfoList
(
	StoreId			IN NCHAR,
	PhoneType		IN NCHAR,
	PageIndex		IN INT,
	PageSize		IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	/*Get the PhoneType value setting */
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	RowStart INT;
	RowEnd INT;
	COLUMNS_DYNAMIC NVARCHAR2(60);
	JOIN_DYNAMIC NVARCHAR2(100);
	SQL_DYNAMIC VARCHAR2(4000);
BEGIN

	/*Paging */ 
    RowStart := ((PageSize * PageIndex ) - PageSize + 1);
    RowEnd := (PageIndex * PageSize );

	COLUMNS_DYNAMIC := N' F.PXNLATT AS Latitude, F.PXNLONG AS Longitude, ';
	JOIN_DYNAMIC := N' LEFT OUTER JOIN [SCDATA].F0119 F ON F.PXAN8 = A.MCAN8 ';

	BEGIN
		EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM [SCDATA].F0119';
		EXCEPTION WHEN OTHERS THEN
			COLUMNS_DYNAMIC := N' 0 AS Latitude, 0 AS Longitude, ';
			JOIN_DYNAMIC := N' ';
	END;
	
	SQL_DYNAMIC := 
	N'WITH CTE AS 
	(
		SELECT
			A.MCMCU		AS BranchPlant,
			NVL(G.CIAN8, A.MCAN8)		AS AddressNumber,
			A.MCCO		AS Company,
			B.BILCNF AllowPickup,
			C.WWMLNM	AS MailingName,
			D.ALADD1	AS AddressLine1,
			D.ALADD2	AS AddressLine2,
			D.ALCTY1	AS City,
			D.ALADDS	AS State,
			D.ALADDZ	AS ZipCode,
			D.ALCTR		AS Country,
			E.WPAR1		AS Area,
			E.WPPH1		AS PhoneNumber,
			' || COLUMNS_DYNAMIC || '
			ROW_NUMBER() OVER(ORDER BY A.MCMCU) RNUM
		FROM
			[SCDATA].F0006 A				/*BranchPlant*/
		LEFT JOIN [SCDATA].F41001 G
				ON A.MCMCU = G.CIMCU
		INNER JOIN [SCDATA].FQ679910 B /*AllowPickup*/
			ON B.BI$9INID = :StoreId
			AND B.BIMCU = A.MCMCU
		INNER JOIN [SCDATA].F0111 C	/*Contact*/
			ON C.WWAN8 = NVL(G.CIAN8, A.MCAN8)
			AND C.WWIDLN = 0
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.MCAN8, :CurrentJulianDate)) D	/*Address*/
			ON D.ALAN8 = A.MCAN8
		' || JOIN_DYNAMIC || ' /* Address Book Geo Code */
		LEFT OUTER JOIN (
			SELECT  WPAN8, WPAR1,WPPH1
				FROM  [SCDATA].F0115
				INNER JOIN [SCDATA].F0006 
				ON	WPAN8 = MCAN8
			WHERE	
				WPIDLN = 0
				AND WPPHTP = :PhoneType
				AND rownum  < 2
		) E /*Phone*/
			ON E.WPAN8 = A.MCAN8
	)
	SELECT
		A.BranchPlant,
		A.AddressNumber,
		A.Company,
		A.MailingName,
		A.AllowPickup,
		A.AddressLine1,
		A.AddressLine2,
		A.City,
		A.State,
		A.ZipCode,
		A.Country,
		A.Area,
		A.PhoneNumber,
		A.Latitude,
		A.Longitude,
		(SELECT COUNT(1) FROM CTE) TotalRowCount
	FROM CTE A
	WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (A.RNUM BETWEEN :RowStart AND :RowEnd))';
	
	OPEN ResultData1 FOR SQL_DYNAMIC USING StoreId, CurrentJulianDate, PhoneType, PageIndex, PageSize, RowStart, RowEnd;

END;		
  /
-- #desc					Get Branch Plants 
-- #bl_class				Premier.Common.BranchPlantList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param BranchPlant		Branch Plant (MCU)
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetBranchPlantList
(
	InstallationID  IN NCHAR,
	BranchPlant	    IN NCHAR,
	Description	    IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	IF (TRIM(InstallationID) = '*')
	    THEN
	        OPEN ResultData1 FOR
		    SELECT 
			    A.MCMCU  AS BranchPlant, 
			    A.MCDL01 AS Description		
		    FROM 
			    [SCDATA].F0006 A
		    WHERE 		
		            (BranchPlant = '*' OR A.MCMCU LIKE '%' || BranchPlant || '%') 
			    AND (Description = '*' OR UPPER(A.MCDL01) LIKE '%' || Description || '%')
		    ORDER BY 
			    A.MCMCU;
	ELSE
	    OPEN ResultData1 FOR
		SELECT 
			A.MCMCU BranchPlant, 
			A.MCDL01 Description		
		FROM 
			[SCDATA].F0006 A
		INNER JOIN [SCDATA].FQ679910 B 
			ON B.BIMCU  = A.MCMCU
		WHERE 
			 B.BI$9INID = InstallationID  -- Installation ID filter	
			AND (BranchPlant = '*' OR A.MCMCU LIKE '%' || BranchPlant || '%') 
			AND (Description = '*' OR UPPER(A.MCDL01) LIKE '%' || Description || '%')
		ORDER BY A.MCMCU;
	END IF;
END;
  /
-- #desc					Get Branch Plants Not Related
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param BranchPlant	    BranchPlant
-- #param Description	    Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetBranchPlantListNotRel
(
	InstallationID  IN NCHAR,
	BranchPlant	    IN NCHAR,
	Description	    IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT
		    A.MCMCU  AS BranchPlant, 
		    A.MCDL01 AS Description,
			'N' AS AllowPickup
	    FROM
		    [SCDATA].F0006 A			
	    WHERE 
		        -- Installation ID filter				
		        A.MCMCU NOT IN(SELECT 
		                            B.BIMCU 
		                        FROM 
		                            [SCDATA].FQ679910 B 
		                        WHERE B.BI$9INID = InstallationID) 
		    AND (BranchPlant = '*' OR A.MCMCU LIKE '%' || BranchPlant || '%') 
		    AND (Description = '*' OR UPPER(A.MCDL01) LIKE '%' || Description || '%')
	    ORDER BY A.MCMCU ASC;
END; 
  /

-- #desc					Get Branch Plants Related
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetBranchPlantListRelated
(
	InstallationID IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
		SELECT
			A.MCMCU BranchPlant, 
			A.MCDL01 Description,
			B.BILCNF AllowPickup
		FROM
			[SCDATA].F0006 A
		INNER JOIN [SCDATA].FQ679910 B 
			ON B.BIMCU = A.MCMCU
		WHERE 
		      B.BI$9INID = InstallationID-- Installation ID filter	
		ORDER BY
			A.MCMCU ASC;
END;
			

  /
-- #desc					Get Companies By Installation List
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCompaniesByInstList
(
	InstallationID IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

CompanyConstant			NCHAR(1);
ConstantInstallation	NCHAR(3); 

BEGIN
	
	--RGM this call change the output installation back up before send it.
	ConstantInstallation := InstallationID;
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);

    OPEN ResultData1 FOR
		SELECT 
			CCCO AS CompanyID, 
			CCNAME AS Description1, 
			CCCRCD	AS CurrencyCode,
			(CASE WHEN CICO IS NULL THEN 'N' ELSE 'Y' END) AS IsRelated  
		FROM 
			[SCDATA].F0010
		LEFT OUTER JOIN [SCDATA].FQ679912
			ON CICO = CCCO 
			AND CI$9INID = ConstantInstallation
		WHERE 
			CCCO <> '00000';
END;
			

  /
-- #desc				Get Company Info
-- #bl_class			Premier.Common.CompanyInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param CompanyID		Company ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCompanyInfo
(	
	CompanyID		NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
	OPEN ResultData1 FOR
		SELECT 
			CCCO	AS CompanyID, 
			CCNAME	AS Description1,
			CCCRCD	AS CurrencyCode,
			' '		AS IsRelated   
		FROM 
			[SCDATA].F0010
		WHERE
			CCCO = CompanyID;
END;
			

  /
-- #desc					Get Company List
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCompanyList
(	
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
	OPEN ResultData1 FOR
		SELECT 
			CCCO	AS CompanyID, 
			CCNAME	AS Description1,
			CCCRCD	AS CurrencyCode,
			' '		AS IsRelated   
		FROM 
			[SCDATA].F0010;
END;
			

  /
-- #desc				    Get constant by installation 
-- #bl_class				Premier.Common.Constant.cs
-- #db_dependencies		    N/A
-- #db_references			N/A

-- #param Constant		    Constant ID
-- #param InstallationID	Installation ID


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetConstant
(
	Constant		NCHAR,
	InstallationID  NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
	
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT  
		    A.CN$9VAL  ConstantValue,
		    A.CN$9CNST  Constant,
		    A.CN$9INID InstallationID,
		    B.CN$9SOF  SystemOnlyFlag
	    FROM  
		    [SCDATA].FQ670004 A
        INNER JOIN [SCDATA].FQ670003 B 
			ON B.CN$9CNST = A.CN$9CNST
	    WHERE 
               A.CN$9INID = InstallationID
	        AND A.CN$9CNST = Constant;
END;

  /
-- #desc					Reads contant header
-- #bl_class				Premier.Common.ConstantHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ConstantID		Constant ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetConstantHeader
(
	ConstantID  IN  NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
		    CN$9CNST	ConstantID,
		    CNSYS		SubSystemCode,  
		    CNDTA1		Description1,
	        CNDTA2		Description2,
		    CNSY		ProductCode,
	        CNRT		UserDefinedCode,
	        CN$9SOF		SystemOnlyFlag	
         FROM  
		    [SCDATA].FQ670003 CNST -- Constants Master 	
         WHERE 
  	        CNST.CN$9CNST = ConstantID;-- Constant Id filter	
END;
  /
-- #desc					Get constant header list
-- #bl_class				Premier.Common.ConstantHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Constant		    Constant ID
-- #param Description1		Description
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetConstantHeaderList
(
	ConstantID      IN NCHAR,
	Description1    IN NVARCHAR2,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1     OUT   GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	IF (ConstantID = '*' AND Description1 = '*') THEN 
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT  
				CN$9CNST	AS ConstantID,
				CNDTA1		AS Description1,
				CNDTA2		AS Description2,
				CNSY		AS	ProductCode,
				CNRT		AS	UserDefinedCode,
				CN$9SOF 	AS SystemOnlyFlag,
				ROW_NUMBER() OVER (ORDER BY CN$9CNST) AS RNUM
			FROM  
				[SCDATA].FQ670003
		)
		SELECT 
			A.ConstantID,
			A.Description1,
			A.Description2,
			A.ProductCode,
			A.UserDefinedCode,
			A.SystemOnlyFlag,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	ELSE
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT  
				CN$9CNST	AS ConstantID,
				CNDTA1		AS Description1,
				CNDTA2		AS Description2,
				CNSY		AS	ProductCode,
				CNRT		AS	UserDefinedCode,
				CN$9SOF 	AS SystemOnlyFlag,
				ROW_NUMBER() OVER (ORDER BY CN$9CNST) AS RNUM
			FROM  
				[SCDATA].FQ670003 
			WHERE		
					(ConstantID = '*' OR UPPER(CN$9CNST) LIKE '%' || ConstantID || '%') 
				AND (Description1 = '*' OR UPPER(CNDTA1) LIKE '%' || Description1 || '%')
		)
		SELECT 
			A.ConstantID,
			A.Description1,
			A.Description2,
			A.ProductCode,
			A.UserDefinedCode,
			A.SystemOnlyFlag,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	END IF;
END;
  /
-- #desc							Get constant by installation 
-- #bl_class						Premier.Common.ConstantInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetConstantInfo
(
	Constant	    IN NCHAR,
	InstallationID  IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
    ConstantValue NVARCHAR2(256);
    LocalInstallationID NCHAR(3) := InstallationID;
BEGIN

	ConstantValue := null;
	
	BEGIN 
	    --First try to get constant by installation defined value
	    SELECT CN$9VAL INTO ConstantValue 
	    FROM  
		    [SCDATA].FQ670004 A
	    WHERE 
		        A.CN$9INID = LocalInstallationID 
		    AND A.CN$9CNST = Constant;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		ConstantValue := NULL;
	END;
	
	--Check value, if null then get base value
	IF (ConstantValue IS NULL)
	THEN
		
		BEGIN 
		    LocalInstallationID := N'***';
		    SELECT CN$9VAL INTO ConstantValue 
		    FROM  
			    [SCDATA].FQ670004 A
		    WHERE 
			        A.CN$9INID = LocalInstallationID 
			    AND A.CN$9CNST = Constant;
		    EXCEPTION WHEN NO_DATA_FOUND THEN 
		    ConstantValue := NULL;
		END;
	END IF;
	
	--Return
	OPEN ResultData1 FOR
	SELECT  
	    ConstantValue as  ConstantValue,
	    LocalInstallationID as InstallationID,
	    Constant as Constant
	FROM SYS.DUAL;
END;

			

  /
-- #desc						Get constant by value
-- #bl_class					Premier.Common.ConstantInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Constant				Constant ID
-- #param ConstantValue			Constant Value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetConstantInfobyValue
(
	Constant	    IN NVARCHAR2,
	ConstantValue	IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
    InstallationID NVARCHAR2(3);
	ConstantValueTemp	NVARCHAR2(256);
BEGIN

	InstallationID := null;
	ConstantValueTemp :=  REPLACE(REPLACE(TRIM(ConstantValue),'http://',''), 'https://','');
	
	BEGIN 
		--Get installationID constant by value
	    SELECT A.CN$9INID INTO InstallationID 
	    FROM  
		    [SCDATA].FQ670004 A
	    WHERE 
		    REPLACE(REPLACE(TRIM(UPPER(A.CN$9VAL)),'HTTP://',''), 'HTTPS://','') = UPPER(ConstantValueTemp)
		    AND TRIM(A.CN$9CNST) = TRIM(Constant)
		    AND rownum  < 2;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		InstallationID := NULL;
	END;
		
	--Return
	OPEN ResultData1 FOR
	SELECT  
	    ConstantValueTemp	AS ConstantValue,
	    InstallationID		AS InstallationID,
	    Constant			AS Constant
	FROM SYS.DUAL;
END;

			
  
  /
-- #desc                    Get Constant List.
-- #bl_class                Premier.Common.ConstantList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Constant			Constant ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetConstantList
(
	Constant		NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)	
AS
BEGIN
    OPEN ResultData1 FOR
		SELECT  
			A.CN$9VAL  	ConstantValue,
			A.CN$9CNST  Constant,
			A.CN$9INID 	InstallationID,
			B.CN$9SOF  	SystemOnlyFlag
		FROM  
			[SCDATA].FQ670004 A
		INNER JOIN [SCDATA].FQ670003 B 
			ON A.CN$9CNST = B.CN$9CNST
		WHERE 
			A.CN$9CNST = Constant;
END;
  /
-- #desc					Get currency header List
-- #bl_class				Premier.Common.CurrencyDetailList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCurrencyDetailList
(
	CurrencyCode	IN NCHAR,
	ResultData1		OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT
		CICRCD	AS CurrencyCode,
		CILNID	AS SequenceID,
		CIAEXP	AS Amount,
		CIDL01	AS Description,
		CIBCF8	AS CoinBillFlag,
		CISPEOW AS IsSpeedCash,
		CIUSER	AS UserID,   
		CIPID	AS ProgramID,
		CIJOBN	AS WorkStationID,
		CIUPMJ	AS DateUpdated,
		CIUPMT	AS TimeLastUpdated  
	FROM
		[SCDATA].FQ67012
	WHERE
		CICRCD = CurrencyCode
	ORDER BY CIAEXP;
END;
  /
-- #desc					Get currency header
-- #bl_class				Premier.Common.CurrencyHeader.cs/CurrencyHeaderInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCurrencyHeader
(
    CurrencyCode	IN NCHAR,
	ResultData1		OUT GLOBALPKG.refcursor,
	ResultData2		OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT
		A.CICRCD		AS CurrencyCode,
		B.CVDL01		AS CurrencyDescription,
		A.CICC0			AS CurrencySymbol,
		A.CIRULENAME	AS RoundingRule
	FROM
		[SCDATA].FQ67011 A
	LEFT OUTER JOIN [SCDATA].F0013 B
			ON B.CVCRCD = A.CICRCD
	WHERE
		A.CICRCD = CurrencyCode;
		
	[SCLIBRARY].CMM_GetCurrencyDetailList(CurrencyCode, ResultData2);

END;

  /
-- #desc					Get currency header List
-- #bl_class				Premier.Common.CurrencyHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCurrencyHeaderList
(
	ResultData1		OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT
		A.CICRCD		AS CurrencyCode,
		B.CVDL01		AS CurrencyDescription,
		A.CICC0			AS CurrencySymbol,
		A.CIRULENAME	AS RoundingRule
	FROM
		[SCDATA].FQ67011 A
	LEFT OUTER JOIN [SCDATA].F0013 B
			ON B.CVCRCD = A.CICRCD;
END;
  /
-- #desc				Get Currency Information
-- #bl_class			Premier.Common.GetCurrencyInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCurrencyInfo
(
	CurrencyCode    IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
           	C.CVCRCD AS CurrencyCode,
			C.CVDL01 AS CurrencyDesc
        FROM 
            [SCDATA].F0013 C 
        WHERE  C.CVCRCD = CurrencyCode;
END;

  /
-- #desc				Get Currency List
-- #bl_class			Premier.Common.CurrencyList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetCurrencyList
(
	ResultData1		OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT 
		C.CVDL01 AS CurrencyDesc,
		C.CVCRCD AS CurrencyCode
	FROM
		[SCDATA].F0013 C;
END;
  /
-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetDocRestricListNotRel
(
    InstallationID  IN NVARCHAR2,
    ConstantID		IN NVARCHAR2,
	ProductCode		IN NVARCHAR2,
	UserDefinedCode	IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
    CODELENGTH INT := 0;
BEGIN

	BEGIN
	    SELECT 
	        DTCDL INTO CODELENGTH 
	    FROM 
	        [SCCTL].F0004
	    WHERE 
	        TRIM(DTSY) = TRIM(ProductCode) AND TRIM(DTRT) = TRIM(UserDefinedCode);
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    CODELENGTH := 0;
	END;
    
    OPEN ResultData1 FOR
	SELECT	
			InstallationID	AS InstallationID,
			ConstantID		AS ConstantID,
			A.DRSY		    AS ProductCode,
			A.DRRT		    AS UserDefinedCode,
			SUBSTR (A.DRKY,10-CODELENGTH+1 ,CODELENGTH) AS UserDefinedKey, 
			A.DRDL01 	    AS DescriptionUDC,
			A.DRDL02	    AS DescriptionUDC2,
			''              AS UserReservedCode,
			0               AS UserReservedDate,
			0               AS UserReservedAmount,
			0               AS UserReservedNumber,
			''              AS UserReservedReference
	FROM	
	    [SCCTL].F0005 A
	WHERE	    
	        (TRIM(A.DRSY) = TRIM(ProductCode))
	    AND	(TRIM(A.DRRT) = TRIM(UserDefinedCode))
    	AND SUBSTR(A.DRKY, 10 - CODELENGTH + 1, CODELENGTH) NOT IN (
    	SELECT SUBSTR(DRKY, 0, CODELENGTH)
						  FROM	 [SCDATA].FQ67008 DR
						  WHERE  DR.DR$9INID = InstallationID
						  AND    TRIM(DR.DRSY)	  = TRIM(ProductCode)
						  AND    TRIM(DR.DRRT)     = TRIM(UserDefinedCode)
					      AND    TRIM(DR.DR$9CNST) = TRIM(ConstantID))
	ORDER BY DRKY;
END;
  /
-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetDocRestricListRelated  
(
    InstallationID  IN NVARCHAR2,
    ConstantID		IN NVARCHAR2,
	ProductCode		IN NVARCHAR2,
	UserDefinedCode	IN NVARCHAR2,
	LangPref		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
    CodeLength  INT := 0;
BEGIN 
    BEGIN
	    -- Get Code Length
	    SELECT 
	        DTCDL INTO CodeLength 
	    FROM 
	        [SCCTL].F0004
	    WHERE 
	        TRIM(DTSY) = TRIM(ProductCode) AND TRIM(DTRT) = TRIM(UserDefinedCode);
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        CodeLength := 0;
    END;
    
    OPEN ResultData1 FOR
	    SELECT	
			    A.DR$9INID	AS InstallationID,
			    A.DR$9CNST	AS ConstantID,
			    A.DRSY		AS ProductCode,
			    A.DRRT		AS UserDefinedCode,
			    A.DRKY 		AS UserDefinedKey,
			    NVL(C.DRDL01,B.DRDL01) AS DescriptionUDC,
			    B.DRDL02	AS DescriptionUDC2,
			    A.DRURCD    AS UserReservedCode,
			    A.DRURDT    AS UserReservedDate,
			    A.DRURAT    AS UserReservedAmount,
			    A.DRURAB    AS UserReservedNumber,
			    A.DRURRF    AS UserReservedReference
			    
	    FROM	[SCDATA].FQ67008 A,
	            [SCCTL].F0005 B,
	            [SCCTL].F0005D C
	    WHERE	
	        SUBSTR(B.DRKY, 10 - CodeLength + 1, CodeLength) = SUBSTR(A.DRKY, 0, CodeLength)
			AND TRIM(B.DRRT(+)) = TRIM(A.DRRT)
			AND TRIM(B.DRSY(+)) = TRIM(A.DRSY)
	        
	        AND	TRIM(C.DRSY(+)) = TRIM(B.DRSY)
			AND TRIM(C.DRRT(+)) = TRIM(B.DRRT)
			AND TRIM(C.DRKY(+)) = TRIM(B.DRKY)
			AND TRIM(C.DRLNGP(+)) = TRIM(LangPref)
	        
		    AND A.DR$9INID	= InstallationID
		    AND TRIM(A.DR$9CNST)	= TRIM(ConstantID)
		    AND TRIM(A.DRSY)	= TRIM(ProductCode)
		    AND TRIM(A.DRRT) = TRIM(UserDefinedCode)
		    
	    ORDER BY A.DRKY;    
END;

  /
-- #desc					Reads an Document Restriction information
-- #bl_class				Premier.Common.DocRestricInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 
-- #param UserDefinedKey	User Defined Key
-- #param LangPref			Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetDocRestricRelatedInfo
(
	InstallationID		IN NCHAR,
    ConstantID			IN NCHAR,
	ProductCode			IN NCHAR,
	UserDefinedCode		IN NCHAR,
	UserDefinedKey		IN NCHAR,
	LangPref			IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
	CodeLength  INT := 0;
BEGIN    
	BEGIN
	    -- Get Code Length
	    SELECT 
	        DTCDL INTO CodeLength 
	    FROM 
	        [SCCTL].F0004
	    WHERE 
	        DTSY = ProductCode AND DTRT = UserDefinedCode;
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        CodeLength := 0;
    END;
    
    OPEN ResultData1 FOR
	    SELECT	
		    A.DR$9INID				AS InstallationID,
		    A.DR$9CNST				AS ConstantID,
		    A.DRSY					AS ProductCode,
		    A.DRRT					AS UserDefinedCode,
		    A.DRKY 					AS UserDefinedKey,
		    NVL(C.DRDL01, B.DRDL01)	AS DescriptionUDC,
		    B.DRDL02				AS DescriptionUDC2,
		    A.DRURCD				AS UserReservedCode,
		    A.DRURDT				AS UserReservedDate,
		    A.DRURAT				AS UserReservedAmount,
		    A.DRURAB				AS UserReservedNumber,
		    A.DRURRF				AS UserReservedReference			    
	    FROM	[SCDATA].FQ67008 A
	    LEFT OUTER JOIN [SCCTL].F0005 B
			ON B.DRRT = A.DRRT
			AND B.DRSY = A.DRSY
	        AND SUBSTR(B.DRKY, 10 - CodeLength + 1, CodeLength) = SUBSTR(A.DRKY, 0, CodeLength)
	    LEFT OUTER JOIN [SCCTL].F0005D C
			ON C.DRSY = B.DRSY
			AND C.DRRT = B.DRRT
			AND C.DRKY = B.DRKY
			AND C.DRLNGP = LangPref
	    WHERE 
		    A.DR$9INID = InstallationID
		    AND A.DR$9CNST = ConstantID
		    AND A.DRSY = ProductCode
		    AND A.DRRT = UserDefinedCode
		    AND A.DRKY = UserDefinedKey;     
END;

 
  /
-- #desc						Gets dry state list
-- #bl_class					Premier.Common.DryStateList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LangPref			    LangPref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GETDRYSTATELIST
(
	InstallationID  NVARCHAR2,
    DocumentType    NVARCHAR2,
    ItemNumber      DECIMAL,
    LangPref        NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    CodeLength  INT := 0;
	SalesReportingCode1 NVARCHAR2(3);
BEGIN 
    BEGIN
          SELECT 
             DTCDL INTO CodeLength 
         FROM 
             [SCCTL].F0004
         WHERE 
             TRIM(DTSY) = '00' AND TRIM(DTRT) = 'S';
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        CodeLength := 0;
    END;
    
    BEGIN
    
    SELECT    IMSRP1 INTO SalesReportingCode1
          FROM      [SCDATA].F4101
          WHERE     IMITM = ItemNumber;
          EXCEPTION WHEN NO_DATA_FOUND THEN 
        SalesReportingCode1 := '';
    
    END;
    
    OPEN ResultData1 FOR
          SELECT    
              SC$9CLR || ';' || TRIM(DRKY) AS UserDefinedKey,
               [SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','S',SCADDS,LangPref) AS DescriptionUDC
          FROM [SCDATA].FQ675520, 
            [SCCTL].F0005  
          WHERE     
            SUBSTR(DRKY, 10 - CodeLength + 1, CodeLength) = SCADDS AND
              DRSY = '00' AND
              DRRT = 'S'  AND 
              SC$9CSR = CASE to_char(SC$9CSR) 
                        WHEN '1' THEN  
                             NVL((SELECT   SC$9CSR 
                                      FROM [SCDATA].FQ675522  
                                      WHERE     SCADDS = DTADDS 
                                           AND DTDCT = DocumentType
                                           AND SCCTR = DTCTR),'0')
                        ELSE 
                             SC$9CSR 
                        END
              AND ((TRIM(SalesReportingCode1) IS NOT NULL 
                        AND (SUBSTR(DRKY, 10 - CodeLength + 1, CodeLength) 
                        IN (SELECT    
                                  DISTINCT LDADDS
                             FROM [SCDATA].FQ675511      A,
                                 [SCDATA].FQ679910        B
                             WHERE     
                        B.BIMCU = A.LDMCU AND
                        B.BI$9INID = InstallationID
						AND  A.LD$9SRP1 = SalesReportingCode1))) -- IF LICENSE EXISTS LOOKS FOR STATES WITH PERMISSION
                     OR
                    (TRIM(SalesReportingCode1) IS NULL) -- LICENSE DOESN'T EXISTS
                   );   
END;

  /
-- #desc						Read General Announcement Langs
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param DesignStatus			DesignStatus

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGeneralAnnounceLangs
(
  AnnouncementID		IN DECIMAL,
  DesignStatus			IN DECIMAL,
  ResultData1			OUT GLOBALPKG.refcursor
)
AS

BEGIN
OPEN ResultData1 FOR
	SELECT 
		ML$9NID			AS AnnouncementID,
		ML$9DS			AS DesignStatus,
		MLLNGP			AS LangPref,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc( '01', 'LP', MLLNGP, '*') AS LanguageDescE1,
		ML$9MTT			AS Title,
		ML$9MSC			AS HtmlContent
	  FROM  
		[SCDATA].FQ67105L L
	  WHERE 
			ML$9NID = AnnouncementID AND
			ML$9DS = DesignStatus
	  ORDER BY L.ML$9NID, L.MLLNGP;
 END;
  /
-- #desc						Get General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				CMM_GetGeneralAnnounceLangs
-- #db_references				N/A

-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].CMM_GetGeneralAnnouncement
(
	AnnouncementID	    IN DECIMAL,
	DesignStatus		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor,
	ResultData3 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT  
		
			MS$9NID AS AnnouncementID,
			MS$9DS AS DesignStatus,
			MS$9PRI AS Priority,
			MS$9MST AS AccessLevel,
			MSEFFF AS EffectiveDate,
			MSEFFT AS ExpirationDate,
			MS$9MTT AS Title,
			MS$9MSC AS HtmlContent,
			MS$9MLK AS Url,
			MSURCD AS UserReservedCode,
			MSURDT AS UserReservedDate,
			MSURAT AS UserReservedAmount,
			MSURAB AS UserReservedNumber,
			MSURRF AS UserReservedReference,
			MSUSER AS UserID,
			MSPID AS ProgramID,
			MSJOBN AS WorkStationID,
			MSUPMJ AS DateUpdated,
			MSTDAY AS TimeOfDay
		
		FROM  
			[SCDATA].FQ67105
		WHERE  
			MS$9NID  =  AnnouncementID
			AND (DesignStatus IS NULL OR MS$9DS = DesignStatus);
		
	[SCLIBRARY].CMM_GetGeneralAnnounceLangs( AnnouncementID, DesignStatus, ResultData2);
	[SCLIBRARY].CMM_GetAnnounceInstallations( AnnouncementID, 'AGen', ResultData3);
END;



  /
-- #desc							Get the General Announcements Assignments
-- #bl_class						Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param AnnouncementID			Announcement ID	
--	#param AssignmentType			Assignment Type		Any = 1 |  AddressBookCategoryCode = 2 | ConsumerCategoryCode = 3 | CustomerNumber = 4 | ConsumerNumber = 5 | WebAccount = 6
--	#param FilterTerm				Filter Term
--	#param PageIndex				PageIndex		
--  #param PageSize					PageSize		
--  #param TotalRowCount			TotalRowCount

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGnrlAnnounceAssignLst
(
	AnnouncementID			IN DECIMAL,
	AssignmentType			IN DECIMAL,
	FilterTerm				IN NCHAR,
	PageIndex				IN DECIMAL,
	PageSize				IN DECIMAL,
	TotalRowCount			OUT INT,
	ResultData1				OUT GLOBALPKG.refcursor
)
AS
	ROWSTART    INT;
	ROWEND      INT;
	CodeLength  INT := 0;
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A';
	
	IF(AssignmentType = 1 OR AssignmentType IS NULL)THEN /* CUSTOMER CATEGORY CODE */
		     		
     INSERT INTO [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A
			SELECT 
              A.AnnouncementID,
              A.UniqueKeyID,
              A.AssignmentType,
              A.AssignmentValue,
              A.Description, 
              A.CategoryCode
        FROM (
          SELECT 
          		AA.MA$9NID						AS AnnouncementID,
            	AA.MAUKID						AS UniqueKeyID,
            	AA.MA$9ATYP						AS AssignmentType,
            	AA.MAKY							AS AssignmentValue,
            	[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01',	SUBSTR(AA.MADTAI,3,LENGTH(AA.MADTAI)-2),AA.MAKY,'*') AS Description,
            	SUBSTR(AA.MADTAI,3,LENGTH(AA.MADTAI)-2) AS CategoryCode
			FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */   
             WHERE  AA.MA$9NID =  1
                    AND AA.MA$9ATYP = 1
            ) A           
         WHERE (FilterTerm = '*' OR TRIM(A.AssignmentValue) LIKE '%' ||  FilterTerm || '%' OR UPPER(TRIM(A.Description)) LIKE '%' ||  UPPER(FilterTerm) || '%');
         
  END IF;
		
	IF(AssignmentType = 2 OR AssignmentType IS NULL)THEN /* CONSUMER CATEGORY CODE */
		   
    INSERT INTO [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A	
            SELECT 
                A.AnnouncementID,
                A.UniqueKeyID,
                A.AssignmentType,
                A.AssignmentValue,
                A.Description, 
                A.CategoryCode
            FROM (
              SELECT 
                AA.MA$9NID						AS AnnouncementID,
              	AA.MAUKID						AS UniqueKeyID,
              	AA.MA$9ATYP						AS AssignmentType,
                AA.MAKY							AS AssignmentValue,
                [SCLIBRARY].CMM_GetUserDefinedCodeFnc('59',	SUBSTR(AA.MADTAI,5,LENGTH(AA.MADTAI)-4),AA.MAKY,'*') AS Description, 
                SUBSTR(AA.MADTAI,5,LENGTH(AA.MADTAI)-4) AS CategoryCode
              FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */   
              WHERE  AA.MA$9NID = AnnouncementID
              AND AA.MA$9ATYP = 2) A
             WHERE (FilterTerm = '*' OR TRIM(A.AssignmentValue) LIKE '%' ||  FilterTerm || '%' OR UPPER(TRIM(A.Description)) LIKE '%' ||  UPPER(FilterTerm) || '%');
   
	END IF;
		
	IF(AssignmentType = 3 OR AssignmentType IS NULL)THEN /* CUSTOMER NUMBER */
		INSERT INTO [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A
			SELECT 
				AA.MA$9NID						AS AnnouncementID,
				AA.MAUKID						AS UniqueKeyID,
				AA.MA$9ATYP						AS AssignmentType,
				CAST(AA.MA$9AN8	AS DECIMAL)		AS AssignmentValue,
				CUST.ABALPH						AS Description,
				''								AS CategoryCode
			FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */
			LEFT OUTER JOIN [SCDATA].F0101 CUST			/* CUSTOMER TABLE */
			ON	CUST.ABAN8 = AA.MA$9AN8			   		
			WHERE
				AA.MA$9NID = AnnouncementID AND
				( FilterTerm = '*' OR UPPER(TRIM(AA.MA$9AN8)) LIKE '%' ||  UPPER(FilterTerm) || '%' 
									OR UPPER(TRIM(CUST.ABALPH)) LIKE '%' ||  UPPER(FilterTerm) || '%') AND
				AA.MA$9ATYP = 3;
	END IF;
		
	IF(AssignmentType = 4 OR AssignmentType IS NULL)THEN /* CONSUMER NUMBER */
		INSERT INTO [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A
			SELECT 
				AA.MA$9NID						AS AnnouncementID,
				AA.MAUKID						AS UniqueKeyID,
				AA.MA$9ATYP						AS AssignmentType,			
				CAST(AA.MA$9AN8 AS DECIMAL)		AS AssignmentValue,
				CONS.PRALPH						AS Description,
				''								AS CategoryCode
			FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */
			LEFT OUTER JOIN [SCDATA].FQ670302 CONS		/* CONSUMER TABLE */
			ON	CONS.PR$9AN8 = AA.MA$9AN8			   		
			WHERE
				AA.MA$9NID = AnnouncementID AND
				( FilterTerm = '*' OR UPPER(TRIM(AA.MA$9AN8)) LIKE '%' ||  UPPER(FilterTerm) || '%' 
									OR UPPER(TRIM(CONS.PRALPH)) LIKE '%' ||  UPPER(FilterTerm) || '%') AND
				AA.MA$9ATYP = 4;
	END IF;
		
	IF(AssignmentType = 5 OR AssignmentType IS NULL)THEN  /* WEB ACCOUNT ID */
		INSERT INTO [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A
			SELECT 
				AA.MA$9NID						AS AnnouncementID,
				AA.MAUKID						AS UniqueKeyID,
				AA.MA$9ATYP						AS AssignmentType,
				WA.WA$9AN8 || '-' || WA.WAIDLN	AS AssignmentValue,
				WA.WAEMAL						AS Description,
				''								AS CategoryCode
			FROM [SCDATA].FQ67105A AA							/* ANNOUNCEMENT ASSIGNMENTS */
			LEFT OUTER JOIN [SCDATA].FQ67101 WA				/* WEB ACCOUNT TABLE */
			ON	WA.WA$9WAN8 = AA.MA$9WAN8			   		
			WHERE
				AA.MA$9NID = AnnouncementID AND
				( FilterTerm = '*' OR UPPER(TRIM(WA.WA$9AN8 || '-' || WA.WAIDLN)) LIKE '%' ||  UPPER(FilterTerm) || '%' 
									OR UPPER(TRIM(WA.WAEMAL)) LIKE '%' ||  UPPER(FilterTerm) || '%') AND
				AA.MA$9ATYP = 5;
	END IF;

	/* Obtain the total count of the result */
	SELECT COUNT(*)INTO TotalRowCount FROM [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A;

	/* Validate if paging is not required */
	IF(PageIndex = 0 OR PageSize = 0)
	THEN
		/* Set the first row to be selected */
		ROWSTART := 1;
		/* Set the last row to be selected */
		ROWEND := TotalRowCount;
	ELSE
		/* Set the first row to be selected */
		ROWSTART := (PageSize * PageIndex) - PageSize + 1;
		/* Set the last row to be selected */
		ROWEND := PageIndex * PageSize;
	END IF;

	/* Select the rows from temporary table betwen the
	   range of ROWSTART ans ROWEND 
	*/
		
	OPEN ResultData1 FOR
		SELECT AnnouncementID,
			UniqueKeyID,
			AssignmentType,
			AssignmentValue,
			Description,
			CategoryCode
		FROM 
			(SELECT [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A.*, ROWNUM ROWNU FROM [SCLIBRARY].CMM_GETGNRLANNOUNCEASSIGNLST_A ORDER BY AssignmentType) A
		WHERE ROWNU BETWEEN  ROWSTART AND ROWEND;
		
END;
  /
-- #desc				            Get the General Announcements Assignments
-- #bl_class			            Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies		            N/A
-- #db_references		            N/A

--	#param AnnouncementID			Announcement ID	
--	#param AssignmentType			Assignment Type		Any = 0 |  AddressBookCategoryCode = 1 | ConsumerCategoryCode = 2 | CustomerNumber = 3 | ConsumerNumber = 4 | WebAccount = 5

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGnrlAnnounceAssigns
(
	AnnouncementID			IN NUMBER,
	AssignmentType			IN NUMBER,
	ResultData1				OUT GLOBALPKG.refcursor
)
AS
	InstallationID  NCHAR(3):= N'***';

BEGIN
	
	OPEN ResultData1 FOR
	SELECT      
		MA$9NID       AS AnnouncementID,
        MAUKID        AS UniqueKeyID,
        MA$9ATYP      AS AssignmentType,
        MA$9WAN8      AS WebAccountID,
        WA.WA$9INID   AS InstallationID,
        MA$9AN8       AS AddressNumber,
        MA$9TYP       AS AddressBookType,
        MADTAI        AS DataItem,
        MAKY          AS UserDefinedKey,
        MAURCD        AS UserReservedCode,
        MAURDT        AS UserReservedDate,
        MAURAT        AS UserReservedAmount,
        MAURAB        AS UserReservedNumber,
        MAURRF        AS UserReservedReference,
        MAUSER        AS "UserID",
        MAPID         AS ProgramID,
        MAJOBN        AS WorkStationID,
        MAUPMJ        AS DateUpdated,
        MATDAY        AS TimeOfDay
    FROM  [SCDATA].FQ67105A AA
    LEFT OUTER JOIN  [SCDATA].FQ67101 WA 
		ON WA.WA$9WAN8 = AA.MA$9WAN8 
		AND AA.MA$9ATYP = 5 /* Web Account */
    WHERE 
		AA.MA$9NID = AnnouncementID 
		AND (AssignmentType IS NULL OR AA.MA$9ATYP = AssignmentType);
END;

  /
-- #desc							Get the General Announcements List
-- #bl_class						Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param DesignStatus				Design Status		0 = Published | 1 = Draft | 2 = Any
--	#param InstallationID			Installation ID
--	#param FilterTerm				Filter Term
--	#param Relation					Relation			Any = 0 | Related = 1 | NotRelated = 2 
--	#param AnnouncementType			Announcement Type	AGen | ATag
--	#param PageIndex				PageIndex		
--  #param PageSize					PageSize

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGnrlAnnouncementList
(
	DesignStatus		IN NUMBER,
	InstallationID		IN NCHAR,
	FilterTerm			IN NVARCHAR2,
	Relation			IN INT,
	AnnouncementType	IN NCHAR,
	PageIndex			IN INT,
	PageSize			IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS	
	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);

BEGIN
	

	/* Relationship		Any = 0 | Related = 1 | NotRelated = 2 | Shared = 3 */
	IF (Relation = 1) THEN			/* Related */
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID		AS AnnouncementID, 
				ANNOUNCE.MS$9DS, 
				ANNOUNCE.MSEFFF			AS EffectiveDate,
				ANNOUNCE.MSEFFT			AS ExpirationDate,
				ANNOUNCE.MSUPMJ			AS PublishedSince,
				ANNOUNCE.MS$9MTT		AS Title, 
				CASE 
					WHEN PUBLISH.MS$9DS IS NOT NULL AND DRAFT.MS$9DS IS NOT NULL THEN 1 ELSE 0 
				END						AS DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = AnnouncementType) = 0 THEN 3 /* SHARED */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = InstallationID AND MI$9APFL = AnnouncementType) > 0 THEN 1 /* RELATED */
					ELSE 2 /* RESTRICTED */
				END AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
				LEFT OUTER JOIN [SCDATA].FQ67105 PUBLISH 
					ON PUBLISH.MS$9NID = ANNOUNCE.MS$9NID 
					AND PUBLISH.MS$9DS = 0
				LEFT OUTER JOIN [SCDATA].FQ67105 DRAFT 
					ON DRAFT.MS$9NID = ANNOUNCE.MS$9NID 
					AND DRAFT.MS$9DS = 1
			WHERE
				( FilterTerm = '*' OR UPPER(ANNOUNCE.MS$9MTT) LIKE '%' ||  FilterTerm || '%' )
		), STS AS (
			SELECT	
				A.AnnouncementID, 
				A.MS$9DS	AS DesignStatus, 
				A.EffectiveDate,
				A.ExpirationDate,
				A.PublishedSince,
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM CTE A
			WHERE ((A.MS$9DS = DesignStatus) OR (DesignStatus = 2 AND (A.MS$9DS = 1 OR (A.MS$9DS = 0 AND A.DraftAndPublished = 0))))
				AND A.RelationShip IN (1, 3)
		)
		SELECT
			A.AnnouncementID,
			A.DesignStatus,
			A.EffectiveDate,
			A.ExpirationDate,
			A.PublishedSince,
			A.Title,
			A.DraftAndPublished,
			A.RelationShip,
			A.TotalRowCount
		FROM STS A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (A.RNUM BETWEEN RowStart AND RowEnd)); 

	ELSIF (Relation = 2) THEN			/* Not related */
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID		AS AnnouncementID, 
				ANNOUNCE.MS$9DS, 
				ANNOUNCE.MSEFFF			AS EffectiveDate,
				ANNOUNCE.MSEFFT			AS ExpirationDate,
				ANNOUNCE.MSUPMJ			AS PublishedSince,
				ANNOUNCE.MS$9MTT		AS Title, 
				CASE 
					WHEN PUBLISH.MS$9DS IS NOT NULL AND DRAFT.MS$9DS IS NOT NULL THEN 1 ELSE 0 
				END						AS DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = AnnouncementType) = 0 THEN 3 /* SHARED */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = InstallationID AND MI$9APFL = AnnouncementType) > 0 THEN 1 /* RELATED */
					ELSE 2 /* RESTRICTED */
				END AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
				LEFT OUTER JOIN [SCDATA].FQ67105 PUBLISH 
					ON PUBLISH.MS$9NID = ANNOUNCE.MS$9NID 
					AND PUBLISH.MS$9DS = 0
				LEFT OUTER JOIN [SCDATA].FQ67105 DRAFT 
					ON DRAFT.MS$9NID = ANNOUNCE.MS$9NID 
					AND DRAFT.MS$9DS = 1
			WHERE
				( FilterTerm = '*' OR UPPER(ANNOUNCE.MS$9MTT) LIKE '%' ||  FilterTerm || '%' )
		), STS AS (
			SELECT	
				A.AnnouncementID, 
				A.MS$9DS	AS DesignStatus, 
				A.EffectiveDate,
				A.ExpirationDate,
				A.PublishedSince,
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM CTE A
			WHERE ((A.MS$9DS = DesignStatus) OR (DesignStatus = 2 AND (A.MS$9DS = 1 OR (A.MS$9DS = 0 AND A.DraftAndPublished = 0))))
				AND A.RelationShip = 2
		)
		SELECT
			A.AnnouncementID,
			A.DesignStatus,
			A.EffectiveDate,
			A.ExpirationDate,
			A.PublishedSince,
			A.Title,
			A.DraftAndPublished,
			A.RelationShip,
			A.TotalRowCount
		FROM STS A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (A.RNUM BETWEEN RowStart AND RowEnd)); 

	ELSE
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID		AS AnnouncementID, 
				ANNOUNCE.MS$9DS, 
				ANNOUNCE.MSEFFF			AS EffectiveDate,
				ANNOUNCE.MSEFFT			AS ExpirationDate,
				ANNOUNCE.MSUPMJ			AS PublishedSince,
				ANNOUNCE.MS$9MTT		AS Title, 
				CASE 
					WHEN PUBLISH.MS$9DS IS NOT NULL AND DRAFT.MS$9DS IS NOT NULL THEN 1 ELSE 0 
				END						AS DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = AnnouncementType) = 0 THEN 3 /* SHARED */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = InstallationID AND MI$9APFL = AnnouncementType) > 0 THEN 1 /* RELATED */
					ELSE 2 /* RESTRICTED */
				END AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
				LEFT OUTER JOIN [SCDATA].FQ67105 PUBLISH 
					ON PUBLISH.MS$9NID = ANNOUNCE.MS$9NID 
					AND PUBLISH.MS$9DS = 0
				LEFT OUTER JOIN [SCDATA].FQ67105 DRAFT 
					ON DRAFT.MS$9NID = ANNOUNCE.MS$9NID 
					AND DRAFT.MS$9DS = 1
			WHERE
				( FilterTerm = '*' OR UPPER(ANNOUNCE.MS$9MTT) LIKE '%' ||  FilterTerm || '%' )
		), STS AS (
			SELECT	
				A.AnnouncementID, 
				A.MS$9DS	AS DesignStatus, 
				A.EffectiveDate,
				A.ExpirationDate,
				A.PublishedSince,
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM CTE A
			WHERE ((A.MS$9DS = DesignStatus) OR (DesignStatus = 2 AND (A.MS$9DS = 1 OR (A.MS$9DS = 0 AND A.DraftAndPublished = 0))))
		)
		SELECT
			A.AnnouncementID,
			A.DesignStatus,
			A.EffectiveDate,
			A.ExpirationDate,
			A.PublishedSince,
			A.Title,
			A.DraftAndPublished,
			A.RelationShip,
			A.TotalRowCount
		FROM STS A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (A.RNUM BETWEEN RowStart AND RowEnd)); 

	END IF;
END;
  /
-- #desc				    Reads an Installation description.
-- #bl_class			    Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetInstallation
(
	InstallationID IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
	        IN$9INID AS InstallationID, 
	        INDSC1	 AS Description,
	        IN$9APFL AS ApplicationUseFlag
        FROM  
            [SCDATA].FQ670001 INID -- Installation Id's 	
        WHERE 
  	        INID.IN$9INID = InstallationID; -- Installation Id filter	
END;
  /
-- #desc						Get the row count of installation related tables.
-- #bl_class					Premier.Common.StoreDeleteStatInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param IsECOMInstallation	IsECOMInstallation

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetInstallationDelStatInfo
(
	InstallationID			IN NVARCHAR2,
	IsECOMInstallation		IN INT,
	BranchPlantByInst		OUT DECIMAL,
	ItemBranchOverride		OUT DECIMAL,
	Catalogs				OUT DECIMAL,
	ItemsFastButtons		OUT DECIMAL,
	ItemWebContentHeader	OUT DECIMAL,
	LobByInst				OUT DECIMAL,
	Registers				OUT DECIMAL,
	SalesUnitOfMeasure		OUT DECIMAL,	
	WebAccounts			    OUT DECIMAL,
	SalesPersonClient		OUT DECIMAL,
	P4210Settings			OUT DECIMAL,
	RecentlyViewedItems		OUT DECIMAL,
	CompaniesByInst			OUT DECIMAL,
	TotalCount				OUT DECIMAL
)
AS
BEGIN			
	
	BEGIN 
	    --Line of Business By Installation
	    SELECT COUNT(*) INTO LobByInst FROM [SCDATA].FQ671031 WHERE LI$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    LobByInst := 0;
    END;
    BEGIN	
	    --Branch Plant By Installation
	    SELECT COUNT(*) INTO BranchPlantByInst FROM [SCDATA].FQ679910 WHERE BI$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    BranchPlantByInst := 0;
    END;
    BEGIN
	    /* Item Branch Plant Override By Installation */
	    SELECT COUNT(*) INTO ItemBranchOverride FROM [SCDATA].FQ670005 WHERE BP$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    ItemBranchOverride := 0;
    END;	
    BEGIN
	    --Sales Unit of Measure
	    SELECT COUNT(*) INTO SalesUnitOfMeasure FROM [SCDATA].FQ67415 WHERE UM$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    SalesUnitOfMeasure := 0;
    END;	
    BEGIN
	    --Items Fast Buttons
	    SELECT COUNT(*) INTO ItemsFastButtons FROM [SCDATA].FQ67416 WHERE FB$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    ItemsFastButtons := 0;
    END;	
	IF (IsECOMInstallation = 0) THEN
		BEGIN
			--Item Web Content Header
			SELECT COUNT(*) INTO ItemWebContentHeader FROM [SCDATA].FQ67410 WHERE CH$9INID = InstallationID;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			ItemWebContentHeader := 0;
		END;	
		BEGIN
			--Catalogs
			SELECT COUNT(*) INTO Catalogs FROM [SCDATA].FQ67412 WHERE CA$9INID = InstallationID;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			Catalogs := 0;
		END;
	ELSE
		ItemWebContentHeader := 0;
		Catalogs := 0;
	END IF;
    BEGIN
	    --Web Accounts
	    SELECT COUNT(*) INTO WebAccounts FROM [SCDATA].FQ67101 
					    WHERE EXISTS(SELECT UI$9USER FROM [SCDATA].FQ67996	
									    WHERE UI$9USER = WA$9USER AND UI$9INID = InstallationID);
        EXCEPTION WHEN NO_DATA_FOUND THEN 
	    WebAccounts := 0;
	END;   	
    BEGIN
	    --Registers Master
	    SELECT COUNT(*) INTO Registers FROM [SCDATA].FQ67426 WHERE RG$9INID = InstallationID;	
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    Registers := 0;
    END;	
	BEGIN
		--Sales Person Client
		SELECT COUNT(*) INTO SalesPersonClient FROM [SCDATA].FQ67125 WHERE SP$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    SalesPersonClient := 0;		
	END;
	BEGIN	
		--- P4210 Settings Header	
		SELECT COUNT(*) INTO P4210Settings FROM [SCDATA].FQ674230 WHERE RH$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    P4210Settings := 0;
    END;
	BEGIN		
		--Recently View Items
		SELECT COUNT(*) INTO RecentlyViewedItems FROM [SCDATA].FQ67120 WHERE WI$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    RecentlyViewedItems := 0;		
	END;
	BEGIN		
		--Companies By Installation
		SELECT COUNT(*) INTO CompaniesByInst FROM [SCDATA].FQ679912 WHERE CI$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    CompaniesByInst := 0;		
	END;
				
	TotalCount :=	    LobByInst				+
						BranchPlantByInst		+
						ItemBranchOverride		+
						SalesUnitOfMeasure		+
						ItemsFastButtons		+
						ItemWebContentHeader	+
						WebAccounts			    +						
						Registers				+	
						Catalogs				+
						SalesPersonClient		+
						P4210Settings			+
						RecentlyViewedItems		+
						CompaniesByInst
						;
END;				
		
  /
-- #desc					Reads an Installation information
-- #bl_class				Premier.Common.StoreInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetInstallationInfo
(
	InstallationID IN   NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
    OPEN ResultData1 FOR
      SELECT  
	    IN$9INID AS InstallationID, 
	    INDSC1	 AS Description,
	    IN$9APFL AS ApplicationUseFlag
       FROM  
 	        -- Installation Id's 	
	        [SCDATA].FQ670001
       WHERE 
	        -- Installation Id filter	
  	        IN$9INID = InstallationID;
END;


  /
-- #desc					Read InstallationID list.
-- #bl_class				Premier.Common.StoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetInstallationsList
(
	InstallationID      IN NCHAR,
	Description         IN NCHAR,
	ApplicationUseFlag  IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
	        IN$9INID AS InstallationID, 
	        INDSC1   AS Description,
	        IN$9APFL AS ApplicationUseFlag
        FROM  	
	        [SCDATA].FQ670001 -- Installation Id's 
        WHERE     
	            (InstallationID = '*' OR IN$9INID like '%' || InstallationID || '%') -- Installation Id filter	
	        AND (Description = '*' OR UPPER(INDSC1) like '%' || Description || '%') 
	        AND (ApplicationUseFlag = '*' OR IN$9APFL like '%' ||  ApplicationUseFlag || '%')
	        ORDER BY  IN$9APFL ASC, IN$9INID ASC;
END;

  /
-- #desc							Get next number from table FQ67002
-- #bl_class						Premier.Common.NextNumber.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param NextNumberID				Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetNextNumber
(
    NextNumberID DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        NN$9UKID    AS  NextNumberID ,
	        NNUD01      AS  UseDescription1,
	        NNUD02      AS  UseDescription2,
	        NN$9N001    AS  NextValue,
	        NNURCD      AS  UserReservedCode,
	        NNURDT      AS  UserReservedDate,
	        NNURAT      AS  UserReservedAmount,
	        NNURAB      AS  UserReservedNumber,
	        NNURRF      AS  UserReservedReference,
	        NNUSER      AS  UserId,
	        NNPID       AS  ProgramId,
	        NNJOBN      AS  WorkStationId,
	        NNUPMJ      AS  DateUpdated,
	        NNTDAY      AS  TimeOfDay  
        	
        FROM
	        [SCDATA].FQ67002
        WHERE
	        NN$9UKID = NextNumberID;
END;	        
  /
-- #desc					Get next number list
-- #bl_class				Premier.Common.NextNumberList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param NextNumberID		Next number ID
-- #param Description1		Description 
-- #param Description2		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetNextNumberList
(
   NextNumberID IN NUMBER,
   Description1 IN NCHAR,
   Description2 IN NCHAR,
   ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        NN$9UKID    AS  NextNumberID,
	        NNUD01      AS  UseDescription1,
	        NNUD02      AS  UseDescription2,
	        NN$9N001    AS  NextValue
        FROM 
	        [SCDATA].FQ67002 
        WHERE 		
	            (NextNumberID IS NULL OR NN$9UKID = NextNumberID) 
	        AND (Description1 = '*' OR UPPER(NNUD01) like '%' || Description1 || '%') 
	        AND (Description2 = '*' OR UPPER(NNUD02) like '%' || Description2 || '%');
END;


  /
-- #desc							Read Payment Terms List
-- #bl_class						Premier.Common.PaymentTermsList
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param PaymentTermCode		    Payment Term Code
-- #param PaymentTermDescription	Payment Term Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetPaymentTermList
(
	PaymentTermCode         IN NCHAR,
	PaymentTermDescription  IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        PNPTC  AS   PaymentTermCode,
	        PNPTD  AS   PaymentTermDescription
        FROM
	        [SCDATA].F0014
        WHERE
	         (PaymentTermCode = '*' OR PNPTC LIKE '%' || PaymentTermCode || '%')	
	         AND
	         (PaymentTermDescription = '*' OR UPPER(PNPTD) LIKE '%' || PaymentTermDescription || '%');
END;
  /
-- #desc					Read Branch Plant by Installation info including address information
-- #bl_class				Premier.Common.PickUpAddressInfo
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param BranchPlant		Branch Plant.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetPickUpAddressInfo
(	
	InstallationID		NVARCHAR2,
	BranchPlant			NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
	OPEN ResultData1 FOR
	SELECT
		A.MCAN8 AS AddressNumber,
		A.MCMCU AS BranchPlant,
		A.MCCO	 AS Company,
		C.WWMLNM AS MailingName,
		D.ALCTY1 AS City,
		D.ALADDS AS State,
		D.ALADDZ AS ZipCode,
		D.ALCTR  AS Country,
		D.ALADD1 AS AddressLine1,
		D.ALADD2 AS AddressLine2
	FROM
		[SCDATA].F0006 A
	INNER JOIN [SCDATA].FQ679910 B
		ON A.MCMCU = B.BIMCU
	INNER JOIN [SCDATA].F0111 C	/*Contact*/
		ON C.WWAN8 = A.MCAN8
		AND C.WWIDLN = 0
	INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.MCAN8, CurrentJulianDate)) D	/*Address*/
		ON D.ALAN8 = A.MCAN8
	WHERE 
		B.BI$9INID = InstallationID
		AND A.MCMCU = BranchPlant
		AND B.BILCNF = 'Y';
		
END;


  /
-- #desc					Read Branch Plant by Installation list including address information
-- #bl_class				Premier.Common.PickUpAddressList
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetPickUpAddressList
(
	InstallationID      IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
    OPEN ResultData1 FOR
	SELECT
		A.MCAN8 AS AddressNumber,
		A.MCMCU AS BranchPlant,
		A.MCCO	 AS Company,
		C.WWMLNM AS MailingName,
		D.ALCTY1 AS City,
		D.ALADDS AS State,
		D.ALADDZ AS ZipCode,
		D.ALCTR  AS Country,
		D.ALADD1 AS AddressLine1,
		D.ALADD2 AS AddressLine2
	FROM
		[SCDATA].F0006 A
	INNER JOIN [SCDATA].FQ679910 B
		ON A.MCMCU = B.BIMCU
	INNER JOIN [SCDATA].F0111 C	/*Contact*/
		ON C.WWAN8 = A.MCAN8
		AND C.WWIDLN = 0
	INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.MCAN8, CurrentJulianDate)) D	/*Address*/
		ON D.ALAN8 = A.MCAN8
	WHERE 
		B.BI$9INID = InstallationID
		AND Trim(B.BILCNF) = 'Y'
	ORDER BY
		A.MCMCU ASC;
END;
  /
-- #desc				Get Rounding Rule List
-- #bl_class			Premier.Common.RoundingRuleList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetRoundingRuleList
(
	ResultData1		OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT 
		C.RRRULENAME AS RuleName,
		C.RRRULEDESC AS RuleDescription
	FROM
		[SCDATA].F95701 C
	GROUP BY
		C.RRRULENAME, C.RRRULEDESC;
END;
  /
-- #desc					Reads the UDC detail
-- #bl_class				Premier.Common.UserDefinedCodeHeaderInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ProductCode		Product code to search for
-- #param UserDefinedCode	User define code to search for     
-- #param LangPref			Language preference 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetUDCHeaderInfo
(
  ProductCode		NVARCHAR2,
  UserDefinedCode	NVARCHAR2,
  LangPref			NVARCHAR2,
  ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN

	IF(TRIM(LangPref) IS NULL)
	    THEN
	        OPEN ResultData1 FOR 
			    SELECT 
				    HUDC.DTSY   AS ProductCode, 
				    HUDC.DTRT   AS UserDefinedCode,
				    CASE WHEN RTRIM(LTRIM(HUDC.DTDL01)) = '.' THEN to_char('') ELSE to_char(RTRIM(LTRIM(HUDC.DTDL01))) END AS Description,
				    HUDC.DTCDL  AS CodeLength
		        FROM 
		            [SCCTL].F0004 HUDC-- UDC Header Master 	
		        WHERE 
		  	            TRIM(HUDC.DTSY) = TRIM(ProductCode)-- Product Code filter	
		            AND (LTRIM(RTRIM( HUDC.DTRT))  = LTRIM(RTRIM(UserDefinedCode)))-- User Defined Codes filter	
		      ORDER BY HUDC.DTSY, HUDC.DTRT;
	ELSE 
	    OPEN ResultData1 FOR 
		    SELECT 
			    HUDC.DTSY   AS ProductCode, 
			    HUDC.DTRT   AS UserDefinedCode,
			    CASE WHEN RTRIM(LTRIM(NVL(HUDCLNG.DTDL01,HUDC.DTDL01))) = '.' THEN to_char('') ELSE to_char(RTRIM(LTRIM(NVL(HUDCLNG.DTDL01,HUDC.DTDL01)))) END AS Description,
			    HUDC.DTCDL  AS CodeLength	
		    FROM 
		        [SCCTL].F0004 HUDC,-- UDC Header Master 
		        [SCCTL].F0004D HUDCLNG-- UDC Header Language Master 	
		    WHERE 
		            HUDCLNG.DTSY(+) = HUDC.DTSY
                AND HUDCLNG.DTRT(+) = HUDC.DTRT
                AND TRIM(HUDCLNG.DTLNGP(+)) = TRIM(LangPref)
	  		    AND TRIM(HUDC.DTSY) = TRIM(ProductCode)-- Product Code filter	
			    AND (TRIM(HUDC.DTRT) = TRIM(UserDefinedCode))-- User Defined Codes filter	
		    ORDER BY HUDC.DTSY, HUDC.DTRT;
    END IF;
END;
  /
-- #desc					Reads the UDC detail
-- #bl_class				Premier.Common.UserDefinedCodeHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ProductCode		Product code to search for
-- #param UserDefinedCode	User define code to search for    
-- #param Description		Description to search for  
-- #param LangPref			Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetUDCHeaderList
(
     ProductCode		NVARCHAR2,
     UserDefinedCode	NVARCHAR2,
     Description		NVARCHAR2,
     LangPref			NVARCHAR2,
     ResultData1 OUT GLOBALPKG.refcursor
 )
AS
BEGIN
	IF(TRIM(LangPref) IS NULL )
	    THEN
	        OPEN ResultData1 FOR 
			    SELECT 
				    HUDC.DTRT as UserDefinedCode,
			        CASE WHEN RTRIM(LTRIM(HUDC.DTDL01)) = '.' THEN to_char('') ELSE to_char(RTRIM(LTRIM(HUDC.DTDL01))) END AS Description
		        FROM 
		            [SCCTL].F0004 HUDC-- UDC Header Master 	
		        WHERE 
		  	            (TRIM(HUDC.DTSY) = TRIM(ProductCode))   -- Product Code filter	
		            AND (UserDefinedCode = '*' OR UPPER(TRIM( HUDC.DTRT)) LIKE '%' || UPPER(TRIM(UserDefinedCode)) || '%' )-- User Defined Codes filter	
	                AND (Description = '*' OR UPPER(TRIM( HUDC.DTDL01)) LIKE '%' || UPPER(TRIM(Description)) || '%'  ) -- Description filter
		      ORDER BY HUDC.DTSY, HUDC.DTRT;
	ELSE 
	    OPEN ResultData1 FOR 
	        SELECT 
		        HUDC.DTRT AS UserDefinedCode,
	            CASE WHEN NVL(TRIM(HUDCLNG.DTDL01),TRIM(HUDC.DTDL01)) = '.' THEN to_char('') ELSE to_char(NVL(TRIM(HUDCLNG.DTDL01),TRIM(HUDC.DTDL01))) END AS Description
	        FROM 
	            [SCCTL].F0004 HUDC, -- UDC Header Master 	
     	        [SCCTL].F0004D HUDCLNG-- UDC Header Language Master 	
	        WHERE 
	                (HUDCLNG.DTSY(+) = HUDC.DTSY)
                AND (HUDCLNG.DTRT(+) = HUDC.DTRT)
                AND (TRIM(HUDCLNG.DTLNGP(+)) = TRIM(LangPref))
  		        AND (TRIM(HUDC.DTSY) = TRIM(ProductCode))    -- Product Code filter	
		        AND (UserDefinedCode = '*' OR UPPER(TRIM( HUDC.DTRT)) LIKE '%' || UPPER(TRIM(UserDefinedCode)) || '%')-- User Defined Codes filter	
		        AND (Description = '*' OR UPPER(TRIM( HUDC.DTDL01)) LIKE '%' || UPPER(TRIM(Description)) || '%') -- Description filter
	        ORDER BY HUDC.DTSY, HUDC.DTRT;
	END IF;
END;
  /
-- #desc						Get User Announcement List
-- #bl_class					Premier.Common.UserAnnouncementList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param WebAccountId			Web Account ID
-- #param AddressNumber			Address Number
-- #param AddressType			Address book type
-- #param DisplayType			Display Type /* 0= Prompt - 1=Floating - 2=List*/
-- #param MaxItemsToDisplay		Max Items To Display /* 0 returns all */
-- #param LangPref				Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST
(
  InstallationID    IN  NVARCHAR2,
  WebAccountId      IN  DECIMAL,
  AddressNumber     IN  DECIMAL,
  AddressBookType   IN  DECIMAL,
  DisplayType       IN  DECIMAL, /* 0= Prompt - 1=Floating - 2=List*/
  MaxItemsToDisplay IN  DECIMAL, /* 0 returns all */
  LangPref          IN  NVARCHAR2,
  ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate INT;
	ConstantINID		VARCHAR2(3) := InstallationID;
	AssignmentConstant NVARCHAR2(256);
	AnnounceLastDaysConstant NVARCHAR2(256);
	AnnounceTotalDisplayConstant NVARCHAR2(256);
BEGIN
  CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
  EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_A';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_B';

  [SCLIBRARY].CMM_GetConstantValue ('ANMDSPDAYS', ConstantINID, AnnounceLastDaysConstant);
  ConstantINID := InstallationID;

  /*Assignment By CategoryCode*/
  IF (AddressBookType = 1) THEN /*Category Code Assignments (Consumer)*/
  BEGIN
    INSERT INTO [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_B (AnnouncementID)
      SELECT A.MA$9NID AnnouncementID
      FROM 
      (
        SELECT PRDTAI, PRKY
        FROM 
        (SELECT PR$9AC01 "$9AC01",PR$9AC02 "$9AC02",PR$9AC03 "$9AC03",PR$9AC04 "$9AC04",PR$9AC05 "$9AC05",PR$9AC06 "$9AC06",PR$9AC07 "$9AC07",PR$9AC08 "$9AC08",PR$9AC09 "$9AC09",PR$9AC10 "$9AC10",
                PR$9AC11 "$9AC11",PR$9AC12 "$9AC12",PR$9AC13 "$9AC13",PR$9AC14 "$9AC14",PR$9AC15 "$9AC15",PR$9AC16 "$9AC16",PR$9AC17 "$9AC17",PR$9AC18 "$9AC18",PR$9AC19 "$9AC19",PR$9AC20 "$9AC20",
                PR$9AC21 "$9AC21",PR$9AC22 "$9AC22",PR$9AC23 "$9AC23",PR$9AC24 "$9AC24",PR$9AC25 "$9AC25",PR$9AC26 "$9AC26",PR$9AC27 "$9AC27",PR$9AC28 "$9AC28",PR$9AC29 "$9AC29",PR$9AC30 "$9AC30"
          FROM [SCDATA].FQ670302 WHERE PR$9AN8 = AddressNumber) 
          UNPIVOT (PRKY FOR PRDTAI IN
            ("$9AC01", "$9AC02", "$9AC03", "$9AC04", "$9AC05", "$9AC06", "$9AC07", "$9AC08", "$9AC09", "$9AC10", "$9AC11", "$9AC12", "$9AC13", "$9AC14", "$9AC15", 
             "$9AC16", "$9AC17", "$9AC18", "$9AC19", "$9AC20", "$9AC21", "$9AC22", "$9AC23", "$9AC24", "$9AC25", "$9AC26", "$9AC27", "$9AC28", "$9AC29", "$9AC30")))B
     INNER JOIN [SCDATA].FQ67105A A
        ON  2 = A.MA$9ATYP
        AND B.PRDTAI = A.MADTAI
        AND B.PRKY = A.MAKY;
  END;
  ELSIF (AddressBookType = 0 OR AddressBookType = 2) THEN /*(Customer/Sales Person)*/
  BEGIN            
		INSERT INTO [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_B (AnnouncementID)
				SELECT A.MA$9NID AnnouncementID
				FROM 
					(
        SELECT ABDTAI, ABKY
      	FROM 
				(SELECT  ABAC01 AC01, ABAC02 AC02,ABAC03 AC03,ABAC04 AC04, ABAC05 AC05, ABAC06 AC06,ABAC07 AC07,ABAC08 AC08,ABAC09 AC09,ABAC10 AC10,
                  ABAC11 AC11,ABAC12 AC12,ABAC13 AC13,ABAC14 AC14,ABAC15 AC15,ABAC16 AC16,ABAC17 AC17,ABAC18 AC18, ABAC19 AC19, ABAC20 AC20,
                  ABAC21 AC21,ABAC22 AC22,ABAC23 AC23, ABAC24 AC24,ABAC25 AC25,ABAC26 AC26,ABAC27 AC27,ABAC28 AC28,ABAC29 AC29,ABAC30 AC30
          FROM [SCDATA].F0101 WHERE ABAN8 = AddressNumber)
				UNPIVOT (ABKY FOR ABDTAI IN
						(AC01, AC02, AC03, AC04, AC05, AC06, AC07, AC08, AC09, AC10, AC11, AC12, AC13, AC14, AC15, 
						AC16, AC17, AC18, AC19, AC20, AC21, AC22, AC23, AC24, AC25,AC26,AC27,AC28,AC29,AC30))) B
				INNER JOIN [SCDATA].FQ67105A A
				ON  1 = A.MA$9ATYP
					AND B.ABDTAI = A.MADTAI
					AND B.ABKY = A.MAKY;
  END;
  END IF; /*Category Code Assignments*/
  
  INSERT INTO [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_A ( MS$9NID)
	SELECT A.MS$9NID
		FROM ( /*Without assignment*/
			 SELECT ANNOUNCE.MS$9NID
			 FROM [SCDATA].FQ67105 ANNOUNCE
			 WHERE
			   ANNOUNCE.MS$9DS = 0  /*Live Status*/
			   AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
			   AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
			   AND (AnnounceLastDaysConstant = 0 OR ((CurrentJulianDate - AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
			   AND (
			 	   (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/
			 		OR
			 	   (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = InstallationID) > 0
			 	  )
			   AND ((SELECT COUNT(*) FROM [SCDATA].FQ67105A WHERE MA$9NID= ANNOUNCE.MS$9NID) = 0)
			 UNION
			 /*Assignment By Web Account*/
			 SELECT ANNOUNCE.MS$9NID
			 FROM [SCDATA].FQ67105 ANNOUNCE
			 INNER JOIN [SCDATA].FQ67105A ANNASSIG
			   ON  ANNOUNCE.MS$9NID = ANNASSIG.MA$9NID
			   AND  ANNASSIG.MA$9ATYP = 5
			   AND ANNASSIG.MA$9WAN8 = WebAccountId
			 WHERE
			   ANNOUNCE.MS$9DS = 0  /*Live Status*/
			   AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
			   AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
			   AND (AnnounceLastDaysConstant = 0 OR ((CurrentJulianDate - AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
			 UNION
			  /*Assignment By Address Number*/
			 SELECT ANNOUNCE.MS$9NID
			 FROM [SCDATA].FQ67105 ANNOUNCE
			 INNER JOIN [SCDATA].FQ67105A ANNASSIG
			   ON  ANNOUNCE.MS$9NID = ANNASSIG.MA$9NID
			   AND  ANNASSIG.MA$9ATYP IN(3, 4)
			   AND ANNASSIG.MA$9AN8 = AddressNumber
			 WHERE
			   ANNOUNCE.MS$9DS = 0  /*Live Status*/
			   AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
			   AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
			   AND (AnnounceLastDaysConstant = 0 OR ((CurrentJulianDate - AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
			   AND (
			 	   (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/
			 		OR
			 	   (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = InstallationID) > 0
			 )) A
		LEFT OUTER JOIN [SCDATA].FQ67105H H
			ON A.MS$9NID = H.MH$9NID AND H.MH$9WAN8 = WebAccountId
		WHERE H.MH$9A1ST IS NULL OR H.MH$9A1ST <> 'D';

	INSERT INTO [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_A   ( MS$9NID)
	  SELECT A.MS$9NID
		FROM (
			  SELECT
				ANNOUNCE.MS$9NID
			  FROM
				 [SCDATA].FQ67105 ANNOUNCE
			  INNER JOIN [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_B ANNASSIG
				ON  ANNOUNCE.MS$9NID = ANNASSIG.ANNOUNCEMENTID
			  WHERE
				ANNOUNCE.MS$9DS = 0  /*Live Status*/
				AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
				AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
				AND (AnnounceLastDaysConstant = 0 OR ((CurrentJulianDate - AnnounceLastDaysConstant) <= ANNOUNCE.MSUPMJ))
				AND (
					 (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/
					  OR
					 (SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = InstallationID) > 0
			 )) A
			 LEFT OUTER JOIN [SCDATA].FQ67105H H
			 	ON A.MS$9NID = H.MH$9NID AND H.MH$9WAN8 = WebAccountId
			 WHERE H.MH$9A1ST IS NULL OR H.MH$9A1ST <> 'D';


   IF(DisplayType = 0) THEN /*Prompt*/
	OPEN ResultData1 FOR
	  SELECT
		MG.MS$9NID        AS AnnouncementID,
		NVL(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
		NVL(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
		CASE ANNOUNCE.MSEFFF
			WHEN 0 THEN ANNOUNCE.MSUPMJ
			ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
		ANNOUNCE.MSTDAY   AS PublishedTimeSince,
		ANNOUNCE.MS$9PRI  AS Priority,
		NVL(H.MH$9A1ST, '') AS Status,
		ANNOUNCE.MSEFFF AS EffectiveDate,
		ANNOUNCE.MSEFFT AS ExpirationDate,
		0 AS TotalRowCount
	  FROM [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_A MG
	  INNER JOIN [SCDATA].FQ67105 ANNOUNCE
		ON MG.MS$9NID = ANNOUNCE.MS$9NID
		AND ANNOUNCE.MS$9DS = 0
	  LEFT JOIN [SCDATA].FQ67105L LANG
		ON LANG.ML$9NID = MG.MS$9NID
		AND LANG.ML$9DS = ANNOUNCE.MS$9DS
		AND TRIM(LANG.MLLNGP) = TRIM(LangPref)
	  LEFT OUTER JOIN [SCDATA].FQ67105H H
			ON H.MH$9NID = ANNOUNCE.MS$9NID AND H.MH$9WAN8 = WebAccountId
	  WHERE
	   H.MH$9A1ST IS NULL OR H.MH$9A1ST NOT IN ('R', 'RB')
	  ORDER BY ANNOUNCE.MS$9PRI DESC, ANNOUNCE.MSEFFT;

  ELSIF(DisplayType = 1)THEN /*Floating*/

	OPEN ResultData1 FOR
		  SELECT
			AnnouncementID, Title, HtmlContent, PublishedDateSince, PublishedTimeSince, Priority, Status, EffectiveDate, ExpirationDate, TotalRowCount
		  FROM
			(SELECT
				  MG.MS$9NID        AS AnnouncementID,
				  NVL(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
				  NVL(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
				  CASE ANNOUNCE.MSEFFF
					  WHEN 0 THEN ANNOUNCE.MSUPMJ
					  ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
				  ANNOUNCE.MSTDAY   AS PublishedTimeSince,
				  ANNOUNCE.MS$9PRI  AS Priority,
				  NVL(H.MH$9A1ST, '') AS Status,
				  ANNOUNCE.MSEFFF AS EffectiveDate,
				  ANNOUNCE.MSEFFT AS ExpirationDate,
				  COUNT(*) OVER () TotalRowCount
				FROM [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_A MG
				INNER JOIN [SCDATA].FQ67105 ANNOUNCE
				  ON MG.MS$9NID = ANNOUNCE.MS$9NID
				  AND ANNOUNCE.MS$9DS = 0
				LEFT JOIN [SCDATA].FQ67105L LANG
				  ON LANG.ML$9NID = MG.MS$9NID
				  AND LANG.ML$9DS = ANNOUNCE.MS$9DS
				  AND TRIM(LANG.MLLNGP) = TRIM(LangPref)
				LEFT OUTER JOIN [SCDATA].FQ67105H H
					ON H.MH$9NID = ANNOUNCE.MS$9NID AND H.MH$9WAN8 = WebAccountId
				WHERE
				  H.MH$9A1ST IS NULL OR H.MH$9A1ST NOT IN ('R', 'RB')
				  ORDER BY ANNOUNCE.MS$9PRI DESC
			  )
			WHERE MaxItemsToDisplay = 0 OR (ROWNUM <= MaxItemsToDisplay);
  ELSE /*List*/
	OPEN ResultData1 FOR
		  SELECT
			MG.MS$9NID        AS AnnouncementID,
			NVL(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
			NVL(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
			CASE ANNOUNCE.MSEFFF
				WHEN 0 THEN ANNOUNCE.MSUPMJ
				ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
			ANNOUNCE.MSTDAY   AS PublishedTimeSince,
			ANNOUNCE.MS$9PRI  AS Priority,
			NVL(HIST.MH$9A1ST, '') AS Status,
			ANNOUNCE.MSEFFF AS EffectiveDate,
			ANNOUNCE.MSEFFT AS ExpirationDate,
			0 AS TotalRowCount
		  FROM [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST_A MG
		  INNER JOIN [SCDATA].FQ67105 ANNOUNCE
			ON MG.MS$9NID = ANNOUNCE.MS$9NID
			AND ANNOUNCE.MS$9DS = 0
		  LEFT JOIN [SCDATA].FQ67105L LANG
			ON LANG.ML$9NID = MG.MS$9NID
			AND LANG.ML$9DS = ANNOUNCE.MS$9DS
			AND TRIM(LANG.MLLNGP) = TRIM(LangPref)
		  LEFT JOIN [SCDATA].FQ67105H HIST
			ON HIST.MH$9NID = MG.MS$9NID
			AND MH$9APFL = 'AGen'
			AND HIST.MH$9WAN8 = WebAccountId
		  ORDER BY ANNOUNCE.MS$9PRI, ANNOUNCE.MSEFFT;
   END IF;
END;
  /
-- #desc					Reads the UDC Info
-- #bl_class				Premier.Common.UserDefinedCodeInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ProductCode		Product code to search for
-- #param UserDefinedCode	User define code to search for    
-- #param UserDefinedKey	User Defined Key search criteria	  
-- #param LangPref			Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetUserDefinedCode
(
    ProductCode		IN  NVARCHAR2,
    UserDefinedCode	IN  NVARCHAR2,
    UserDefinedKey	IN  NVARCHAR2,
    LangPref	    IN  NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    CodeLength INT := 0;
    UserDefinedKeyTmp NVARCHAR2(40) := 0;
BEGIN
    BEGIN
	    SELECT 
	        DTCDL INTO CodeLength  
	    FROM 
	        [SCCTL].F0004 
	    WHERE 
	        ROWNUM < 2 AND TRIM(DTSY) = TRIM(ProductCode) AND TRIM(DTRT) = TRIM(UserDefinedCode);
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    CodeLength := LENGTH (UserDefinedKey);
	END;
	
	-- set UserDefinedKey with blank spaces
	UserDefinedKeyTmp := RPAD(' ' , 10 - CodeLength) || UserDefinedKey;

	IF(TRIM(LangPref) IS NULL )
	    THEN
	        OPEN ResultData1 FOR
		        SELECT
			        DUDC.DRSY AS ProductCode, 
			        DUDC.DRRT AS UserDefinedCode, 
			        RTRIM(DUDC.DRKY) AS UserDefinedKey,
			        CASE WHEN TRIM(DUDC.DRDL01) = '.' THEN to_char('') ELSE to_char(TRIM(DUDC.DRDL01)) END AS Description1,
			        TRIM(DUDC.DRDL02) AS Description2,
			        DUDC.DRSPHD AS SpecialHandlingCode, 
			        DUDC.DRUDCO AS UdcOwnershipflag, 
			        DUDC.DRHRDC AS HardCodedYN,
			        B.DTCDL AS	CodeLength
	         	        
		        FROM  
			        [SCCTL].F0005 DUDC,-- UDC Detail Master 	
		            [SCCTL].F0004 B
		        WHERE 
		                B.DTSY = DUDC.DRSY
			        AND B.DTRT = DUDC.DRRT
		  	        AND TRIM(DUDC.DRSY) = TRIM(ProductCode)-- Product Code filter	
		            AND TRIM(DUDC.DRRT) = TRIM(UserDefinedCode)-- User Defined Codes filter	
		            AND NVL(RTRIM(DUDC.DRKY),' ') = NVL(RTRIM(UserDefinedKeyTmp), ' ');-- User Defined Key filter
	ELSE
	    OPEN ResultData1 FOR 
		     SELECT 
			    DUDC.DRSY AS ProductCode, 
			    DUDC.DRRT AS UserDefinedCode, 
			    RTRIM(DUDC.DRKY) AS UserDefinedKey,
			    CASE WHEN NVL(TRIM(DUDCLNG.DRDL01),TRIM(DUDC.DRDL01)) = '.' THEN to_char('') ELSE to_char(NVL(TRIM(DUDCLNG.DRDL01),TRIM(DUDC.DRDL01))) END AS Description1,
			    NVL(TRIM(DUDCLNG.DRDL02),TRIM(DUDC.DRDL02)) AS Description2,
			    DUDC.DRSPHD AS SpecialHandlingCode, 
			    DUDC.DRUDCO AS UdcOwnershipflag, 
			    DUDC.DRHRDC AS HardCodedYN,
			    B.DTCDL AS	CodeLength
		     FROM 
		        [SCCTL].F0005 DUDC,-- UDC Detail Master 	
		        [SCCTL].F0004 B,
	            [SCCTL].F0005D DUDCLNG-- UDC Detail Language Master 
		     WHERE 
		            B.DTSY = DUDC.DRSY
			    AND B.DTRT = DUDC.DRRT
			    AND DUDCLNG.DRSY(+) = DUDC.DRSY
			    AND DUDCLNG.DRRT(+) = DUDC.DRRT
			    AND DUDCLNG.DRKY(+) = DUDC.DRKY
			    AND TRIM(DUDCLNG.DRLNGP(+)) = TRIM(LangPref)
		  	    AND TRIM(DUDC.DRSY) = TRIM(ProductCode) -- Product Code filter	
		        AND TRIM(DUDC.DRRT) = TRIM(UserDefinedCode) -- User Defined Codes filter	
		        AND NVL(RTRIM(DUDC.DRKY),' ') = NVL(RTRIM(UserDefinedKeyTmp), ' ');-- User Defined Key filter
	END IF;
END;

  /
-- #desc					Reads the UDC detail
-- #bl_class				Premier.Common.UserDefinedCodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ProductCode		Product code to search for
-- #param UserDefinedCode	User define code to search for    
-- #param UserDefinedKey	User Defined Key search criteria	  
-- #param Description1		Description to search for  
-- #param Description2		Description 2 to search for
-- #param LangPref			Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetUserDefinedCodeList
(
    ProductCode		    NCHAR,
    UserDefinedCode	    NCHAR,
    UserDefinedKey	    NCHAR,
    Description1		NCHAR,
    Description2		NCHAR,
    LangPref			NCHAR,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	IF(TRIM(LangPref) IS NULL )
	    THEN
	        OPEN ResultData1 FOR 
		        SELECT  
			        DUDC.DRSY AS ProductCode, 
			        DUDC.DRRT AS UserDefinedCode, 
			        DUDC.DRKY AS UserDefinedKey,
			        CASE WHEN LTRIM(DUDC.DRDL01) = N'.' THEN N'' ELSE DUDC.DRDL01 END AS Description1,
			        DUDC.DRDL02 AS Description2,
			        DUDC.DRSPHD AS SpecialHandlingCode, 
			        DUDC.DRUDCO AS UdcOwnershipflag, 
			        DUDC.DRHRDC AS HardCodedYN,
			        B.DTCDL AS	CodeLength 	
		        FROM  
		            [SCCTL].F0005 DUDC    /* UDC Detail Master */
		        INNER JOIN [SCCTL].F0004 B
					ON B.DTSY = DUDC.DRSY
			        AND B.DTRT = DUDC.DRRT
		        WHERE 
		            DUDC.DRSY = ProductCode-- Product Code filter	
		            AND DUDC.DRRT = UserDefinedCode-- User Defined Codes filter	
		            AND (UserDefinedKey = N'*' OR DUDC.DRKY LIKE '%' || UserDefinedKey || '%')-- User Defined Key filter
                    AND (Description1 = N'*' OR UPPER(DUDC.DRDL01) LIKE '%' || Description1 || '%' )-- Description filter
                    AND (Description2 = N'*' OR UPPER(DUDC.DRDL02) LIKE '%' || Description2 || '%')-- Description2 filter
		        ORDER BY DUDC.DRSY, DUDC.DRRT, DUDC.DRKY;
	ELSE 
	    OPEN ResultData1 FOR 
            SELECT 
	            DUDC.DRSY AS ProductCode, 
			    DUDC.DRRT AS UserDefinedCode, 
			    DUDC.DRKY AS UserDefinedKey,
			    CASE WHEN NVL(LTRIM(DUDCLNG.DRDL01), LTRIM(DUDC.DRDL01)) = N'.' THEN N'' ELSE NVL(DUDCLNG.DRDL01, DUDC.DRDL01) END AS Description1,
			    NVL(DUDCLNG.DRDL02, DUDC.DRDL02) AS Description2,
			    DUDC.DRSPHD AS SpecialHandlingCode, 
			    DUDC.DRUDCO AS UdcOwnershipflag, 
			    DUDC.DRHRDC AS HardCodedYN,
			    B.DTCDL AS	CodeLength
		    FROM 
		        [SCCTL].F0005 DUDC  /* UDC Detail Master */
		    INNER JOIN [SCCTL].F0004 B
				ON B.DTSY = DUDC.DRSY
			    AND B.DTRT = DUDC.DRRT
            LEFT OUTER JOIN [SCCTL].F0005D DUDCLNG /* UDC Detail Language Master */
				ON DUDCLNG.DRSY = DUDC.DRSY
                AND DUDCLNG.DRRT = DUDC.DRRT
                AND DUDCLNG.DRKY = DUDC.DRKY
                AND DUDCLNG.DRLNGP = LangPref
		    WHERE            
		        DUDC.DRSY = ProductCode /* Product Code filter */
		        AND DUDC.DRRT = UserDefinedCode /* User Defined Codes filter */
		        AND (UserDefinedKey = N'*' OR DUDC.DRKY LIKE '%' || UserDefinedKey || '%') /* User Defined Key filter */
                AND (Description1 = N'*' OR UPPER(DUDC.DRDL01) LIKE '%' || Description1 || '%') /* Description filter */
                AND (Description2 = N'*' OR UPPER(DUDC.DRDL02) LIKE '%' || Description2 || '%') /* Description2 filter */
		    ORDER BY DUDC.DRSY, DUDC.DRRT, DUDC.DRKY;
	END IF;
END;

  /
-- #desc							Add contant detail
-- #bl_class						Premier.Common.UserDefinedCodeList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID
-- #param ConstantValue				Constant Value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdConstant
(
	Constant		NVARCHAR2,
	InstallationID  NVARCHAR2,
	ConstantValue	NVARCHAR2
)
AS	
BEGIN
	UPDATE 
		[SCDATA].FQ670004
	SET  
		CN$9VAL = NVL(ConstantValue,' ')
	WHERE 
		    CN$9INID = InstallationID
		AND TRIM(CN$9CNST) = TRIM(Constant);
END;

  /
-- #desc					Updates contant header
-- #bl_class				Premier.Common.Constant.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ConstantID		Constant ID
-- #param SubSystemCode		Sub system code
-- #param Description1		Description 1
-- #param Description2		Description 2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdConstantHeader
(
	ConstantID		NVARCHAR2,
	SubSystemCode	NVARCHAR2,
	Description1	NVARCHAR2,
	Description2	NVARCHAR2,
	ProductCode	    NVARCHAR2,
	UserDefinedCode	NVARCHAR2,
	SystemOnlyFlag	DECIMAL
)
AS
BEGIN
	UPDATE 
		[SCDATA].FQ670003
	SET  
		CNSYS =    SubSystemCode,
	    CNDTA1 =   Description1,
	    CNDTA2 =   Description2,
	    CNSY =     ProductCode,
	    CNRT =     UserDefinedCode,
	    CN$9SOF =  SystemOnlyFlag	
	    
	WHERE 
		TRIM(CN$9CNST) = TRIM(ConstantID);
END;

  /
-- #desc					Insert currency detail
-- #bl_class				Premier.Common.ConstantHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param Description		Currency Description
-- #param Amount			Denomination Amount
-- #param CoinBillFlag		IS Coin or Bill
-- #param IsSpeedCash		Mark as speed cash button

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdCurrencyDetail
(
    CurrencyCode		IN NVARCHAR2,
    SequenceID			IN DECIMAL,
    Amount				IN DECIMAL,
    Description			IN NVARCHAR2,
    CoinBillFlag		IN NVARCHAR2,
    IsSpeedCash			IN NVARCHAR2,
	UserID				IN NVARCHAR2,
	ProgramID			IN NVARCHAR2,
	WorkStationID		IN NVARCHAR2,
	DateUpdated			IN DECIMAL,
	TimeLastUpdated		IN DECIMAL
)
AS	
BEGIN
	UPDATE 
		[SCDATA].FQ67012
	SET
		CIAEXP	= Amount,
		CIDL01	= Description,
		CIBCF8	= CoinBillFlag,
		CISPEOW = IsSpeedCash,
		CIUSER	= UserID,   
		CIPID	= ProgramID,
		CIJOBN	= WorkStationID,
		CIUPMJ	= DateUpdated,
		CIUPMT	= TimeLastUpdated    
	WHERE
		CICRCD = NVL(CurrencyCode,'   ') AND
		CILNID = SequenceID;
END;
  /
-- #desc					Update currency header
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param CurrencySymbol	Currency Symbol
-- #param RoundingRule		Rounding Rule Name

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdCurrencyHeader
(
    CurrencyCode		IN NVARCHAR2,
    CurrencySymbol		IN NVARCHAR2,
    RoundingRule		IN NVARCHAR2,
	UserID				IN NVARCHAR2,
	ProgramID			IN NVARCHAR2,
	WorkStationID		IN NVARCHAR2,
	DateUpdated			IN DECIMAL,
	TimeLastUpdated		IN DECIMAL
)
AS	
BEGIN
	UPDATE
		[SCDATA].FQ67011
	SET
		CICC0		= CurrencySymbol,
		CIRULENAME	= RoundingRule,
		CIUSER		= UserID,   
		CIPID		= ProgramID,
		CIJOBN		= WorkStationID,
		CIUPMJ		= DateUpdated,
		CIUPMT		= TimeLastUpdated
	WHERE
		TRIM(CICRCD) = NVL(TRIM(CurrencyCode),'   ');
END;
  /
-- #desc				        Update User Reserved Reference Enhancement for DME
-- #bl_class			        Premier.Common.DocRestricInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID				
-- #param ConstantID				
-- #param ProductCode				
-- #param UserDefinedCode				
-- #param UserDefinedKey				
-- #param UserReservedReference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdDocRestricRef
(
	InstallationID		    NVARCHAR2,
    ConstantID				NVARCHAR2,
    ProductCode				NVARCHAR2,
    UserDefinedCode			NVARCHAR2,
    UserDefinedKey			NVARCHAR2,
    UserReservedReference	NVARCHAR2
)
AS
BEGIN
    UPDATE
	    [SCDATA].FQ67008
    SET
	    DRURRF = UserReservedReference
    WHERE 
	    DR$9INID =  InstallationID				
    AND	TRIM(DR$9CNST) =  TRIM(ConstantID)					
    AND	TRIM(DRSY) =      TRIM(ProductCode)				
    AND	TRIM(DRRT) =      TRIM(UserDefinedCode)			
    AND	(TRIM(UserDefinedKey) IS NULL OR TRIM(DRKY) = TRIM(UserDefinedKey));
END; 
  /

-- #desc							Update General Announcement Lang
-- #bl_class						Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AnnouncementID			AnnouncementID
-- #param DesignStatus				DesignStatus
-- #param Language					Language
-- #param Title						Title
-- #param HtmlContent				Html Content

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdGeneralAnnounceLang
(
	AnnouncementID			IN NUMBER,
	DesignStatus			IN NUMBER,
	LangPref				IN NCHAR,
	Title					IN NVARCHAR2,
	HtmlContent				IN NCLOB
)
AS
BEGIN

	UPDATE [SCDATA].FQ67105L
	  SET 
		ML$9MTT = Title,
		ML$9MSC = HtmlContent
	WHERE
		ML$9NID = AnnouncementID
		AND ML$9DS = DesignStatus
		AND MLLNGP = LangPref;
END;


  /
-- #desc						Update General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.
-- #param Priority				Priority.
-- #param AccessLevel			AccessLevel.
-- #param EffectiveDate			EffectiveDate.
-- #param ExpirationDate		ExpirationDate.
-- #param Title					Title.
-- #param HtmlContent			HtmlContent.
-- #param Url					Url.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdGeneralAnnouncement 
(
		AnnouncementID			IN DECIMAL,	
		DesignStatus			IN DECIMAL,
		Priority				IN DECIMAL,
		AccessLevel				IN DECIMAL,
		EffectiveDate			IN DECIMAL,
		ExpirationDate			IN DECIMAL,
		Title					IN NVARCHAR2,
		HtmlContent				IN NCLOB,
		Url						IN NVARCHAR2,
		UserReservedCode		IN NVARCHAR2,
		UserReservedDate		IN DECIMAL,
		UserReservedAmount		IN DECIMAL,
		UserReservedNumber		IN DECIMAL,
		UserReservedReference	IN NVARCHAR2,
		UserId					IN NVARCHAR2,
		ProgramId				IN NVARCHAR2,
		WorkStationId			IN NVARCHAR2,
		DateUpdated				IN DECIMAL,
		TimeOfDay				IN DECIMAL
)
AS
BEGIN

	UPDATE [SCDATA].FQ67105
	SET 
		MS$9PRI = Priority
	   ,MS$9MST = AccessLevel
	   ,MSEFFF = EffectiveDate
	   ,MSEFFT = ExpirationDate
	   ,MS$9MTT = Title
	   ,MS$9MSC = HtmlContent
	   ,MS$9MLK = Url
	   ,MSURCD = UserReservedCode
	   ,MSURDT = UserReservedDate
	   ,MSURAT = UserReservedAmount
	   ,MSURAB = UserReservedNumber
	   ,MSURRF = UserReservedReference
	   ,MSUSER = UserId
	   ,MSPID = ProgramId
	   ,MSJOBN = WorkStationId
	   ,MSUPMJ = DateUpdated
	   ,MSTDAY = TimeOfDay
	WHERE
		TRIM(MS$9NID) = TRIM(AnnouncementID) AND
		MS$9DS = DesignStatus;
END;
		
  /
-- #desc					Updates an Installation description.
-- #bl_class				Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdInstallation
(
	InstallationID      NVARCHAR2,
	Description         NVARCHAR2,
	ApplicationUseFlag  NVARCHAR2
)

AS
BEGIN
	UPDATE 
		[SCDATA].FQ670001
	SET  
		INDSC1 = Description,
		IN$9APFL = ApplicationUseFlag 
	WHERE 
		IN$9INID = InstallationID;
END;



  /
-- #desc							Update next number from table FQ67002
-- #bl_class						Premier.Common.NextNumber.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param NextNumberID				Key
-- #param UseDescription1			Description
-- #param UseDescription2			Description 2
-- #param NextValue					Next value
-- #param UserReservedCode			
-- #param UserReservedDate
-- #param UserReservedAmount
-- #param UserReservedNumber
-- #param UserReservedReference
-- #param UserId
-- #param ProgramId
-- #param WorkStationId
-- #param DateUpdated
-- #param TimeOfDay

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdNextNumber
(
	NextNumberID        DECIMAL,
	UseDescription1     NVARCHAR2,
	UseDescription2     NVARCHAR2,
	NextValue           DECIMAL,
	UserReservedCode    NVARCHAR2,
	UserReservedDate    DECIMAL,
	UserReservedAmount  DECIMAL,
	UserReservedNumber  DECIMAL,
	UserReservedReference  NVARCHAR2,
	UserId              NVARCHAR2,
	ProgramId           NVARCHAR2,
	WorkStationId       NVARCHAR2,
	DateUpdated         DECIMAL,
	TimeOfDay           DECIMAL
)
AS
BEGIN
    UPDATE
	    [SCDATA].FQ67002
    SET
	    NNUD01 = UseDescription1,
	    NNUD02 = UseDescription2,
	    NN$9N001 = NextValue,
	    NNURCD = UserReservedCode,
	    NNURDT = UserReservedDate,
	    NNURAT = UserReservedAmount,
	    NNURAB = UserReservedNumber,
	    NNURRF = UserReservedReference,
	    NNUSER = UserId,
	    NNPID =  ProgramId,
	    NNJOBN = WorkStationId,
	    NNUPMJ = DateUpdated,
	    NNTDAY = TimeOfDay
    WHERE 
	    NN$9UKID = NextNumberID;
END;
  /

-- #desc						Add Item Related to Branch Plants
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param BranchPlant    	    Branch Plant.
-- #param ProductListXML		XML with short product numbers list.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddBranchPlantItems
(
	StoreId					IN NCHAR,
	BranchPlant				IN NCHAR,
	ProductListXML			IN XMLType DEFAULT NULL,
	Sequence				IN NUMBER,
	UserReservedNumber		IN NUMBER,
	UserReservedAmount		IN NUMBER,
	UserReservedCode		IN NCHAR,
	UserReservedDate		IN NUMBER,
	UserReservedReference	IN NCHAR,
	UserID					IN NCHAR,
	ProgramID				IN NCHAR,
	DateUpdated				IN NUMBER,
	TimeLastUpdated			IN NUMBER,
	WorkStationID			IN NCHAR
)
AS
BEGIN
	DELETE 
	FROM [SCDATA].FQ670005 FQ
	WHERE EXISTS ( 
				SELECT 1 FROM XMLTABLE ('/items/item' PASSING ProductListXML COLUMNS ShortProductNumber NUMBER PATH 'text()') X WHERE X.ShortProductNumber = FQ.BPITM )	
		  AND FQ.BP$9INID = StoreId;
              
	INSERT INTO [SCDATA].FQ670005
	( 
			BP$9INID, BPITM, BPMCU, BPSEQ, BPURAB, BPURAT, BPURCD, 
			BPURDT, BPURRF, BPUSER, BPPID, BPUPMJ, BPUPMT, BPJOBN 
	)
	SELECT  
		StoreId, I.ProductNumber, BranchPlant, Sequence, UserReservedNumber, UserReservedAmount, UserReservedCode,
		UserReservedDate, UserReservedReference, UserID, ProgramID, DateUpdated, TimeLastUpdated, WorkStationID
	FROM 
		XMLTABLE ('/items/item' PASSING ProductListXML	COLUMNS ProductNumber NUMBER PATH 'text()') I;                
END;

  /

-- #desc						Add Catalog
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param EffectiveModeFlag	    Effective Mode Flag.		
-- #param EffectiveFromDate	    Effective From Date.
-- #param EffectiveThruDate	    Effective Thru Date.
-- #param Description			Description.
-- #param SequenceNumber		SequenceNumber.
-- #param InstallationID	    InstallationID.
-- #param MCU					MCU					
-- #param MCUBehavior			MCU Behavior
-- #param UserReservedNumber	User Reserved Number	
-- #param UserReservedAmount	User Reserved Amount	
-- #param UserReservedCode		User Reserved Code		
-- #param UserReservedDate		User Reserved Date		
-- #param UserReservedReference User Reserved Reference
-- #param UserID				User Id
-- #param ProgramID				Program Id
-- #param WorkStationID			WorkStation ID		
-- #param DateUpdated			Date Updated			
-- #param TimeLastUpdated		Time Last Updated

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddCatalog  
(
	InstallationID				IN NVARCHAR2,
	CatalogId					IN NVARCHAR2,
	EffectiveModeFlag 			IN DECIMAL,	
	EffectiveFromDate			IN DECIMAL,
	EffectiveThruDate			IN DECIMAL,
	Description					IN NVARCHAR2,
	SequenceNumber				IN DECIMAL,
	MCU							IN NVARCHAR2,	
	MCUBehavior					IN NVARCHAR2,	
	UserReservedNumber			IN FLOAT,
	UserReservedAmount			IN FLOAT,
	UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN NUMERIC,
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,
	WorkStationID				IN NVARCHAR2,
	DateUpdated					IN NUMERIC,
	TimeLastUpdated				IN NUMERIC
)	
AS
BEGIN
    INSERT INTO [SCDATA].FQ67412
    (
        CA$9CLGID,
        CA$9EFM,
        CAEFFF,
        CAEFFT,
        CADSC1,
        CASEQ,
        CA$9INID,
		CAMCU,
		CA$9CCFU,
		CAURAB,  
		CAURAT,  
	    CAURCD,  
		CAURDT,  
	    CAURRF,  
		CAUSER,  
		CAPID,   
		CAUPMJ,  
		CAUPMT,  
		CAJOBN
    )
    VALUES
    (
        CatalogID,
	    EffectiveModeFlag,
	    EffectiveFromDate,
	    EffectiveThruDate,
	    Description,
	    SequenceNumber,
	    InstallationID,
		MCU,
		MCUBehavior,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
    );
END;
  /

-- #desc						Add Catalog Detail
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID			UniqueKeyID
-- #param ParentKeyID    	    ParentKeyID.
-- #param IncludeInSearch		Include In Search.
-- #param DataItem				Data Item.
-- #param UserDefinedCode	    User Defined Code.
-- #param Description			Description.
-- #param EffectiveModeFlag		Effective Mode Flag.		
-- #param EffectiveFromDate		Effective From Date.
-- #param EffectiveThruDate		Effective Thru Date.
-- #param SequenceNumber		SequenceNumber.
-- #param ImageName				Node Image Name.
-- #param TemplateID		    TemplateID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddCatalogDetail  
(
	CatalogId		    IN NVARCHAR2,
	UniqueKeyID         IN OUT DECIMAL,
	ParentKeyID    	    IN DECIMAL,	
	IncludeInSearch	    IN DECIMAL,
	DataItem			IN NVARCHAR2,
	UserDefinedCode	    IN NVARCHAR2,
	Description	        IN NVARCHAR2,
	EffectiveModeFlag 	IN DECIMAL,
	EffectiveFromDate	IN DECIMAL,
	EffectiveThruDate	IN DECIMAL,
	SequenceNumber		IN DECIMAL,
	ImageName			IN NVARCHAR2,
	TemplateID			IN NVARCHAR2
)	
AS
seqNum DECIMAL;
BEGIN
   BEGIN
		IF(UniqueKeyID = 0) THEN
			BEGIN
				SELECT NVL(MAX(CDUKID),0) + 1 INTO UniqueKeyID 
				FROM [SCDATA].FQ67413
				WHERE TRIM(CD$9CLGID) = TRIM(CatalogId);
				EXCEPTION WHEN NO_DATA_FOUND THEN 
					UniqueKeyID := 1;
			END;
		END IF;
	END;

	seqNum:= SequenceNumber;
	
	--SET 1 IF THE MAX IS NULL
	IF(SequenceNumber IS NULL)
	    THEN
	        seqNum := 1;
	END IF;
	
    INSERT INTO [SCDATA].FQ67413
    (
        CD$9CLGID,
        CDUKID,
        CD$9PKID,
        CD$9IIS,
        CDDTAI,
        CDKY,
        CDDL01,
        CD$9EFM,
        CDEFFF,
        CDEFFT,
        CDSEQ,
        CDIMGURL,
        CDTMPI
    )
    VALUES
   (
        CatalogID,
        UniqueKeyID,
        ParentKeyID,
        IncludeInSearch,
        DataItem,
        UserDefinedCode,
        Description,
        EffectiveModeFlag,	
        EffectiveFromDate,
        EffectiveThruDate,
        seqNum,
        ImageName,
        TemplateID
    );
END;
  /

-- #desc				        Add Catalog Detail Lang
-- #bl_class			        Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param UniqueKeyID			UniqueKeyID.
-- #param LangPref    	        Language Preference.
-- #param Description			Description.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddCatalogDetailLang
(
	CatalogId       IN NVARCHAR2,
	UniqueKeyID     IN DECIMAL,
	LangPref		IN NVARCHAR2,
	Description	    IN NVARCHAR2
)
AS
BEGIN

    INSERT INTO [SCDATA].FQ67413L
    (
        CD$9CLGID,
        CDUKID,
		CDLNGP,
        CDDL01
    )
    VALUES
    (
        CatalogID,
		UniqueKeyID,
		LangPref,
		Description
    );
END;
  /

-- #desc				    Add Catalog Lang
-- #bl_class			    Premier.Inventory.CatalogLang.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A

-- #param CatalogId			Catalog Id.
-- #param LangPref    	    Language Preference.
-- #param Description		Description.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddCatalogLang  
(
	CatalogId       IN NVARCHAR2,
	LangPref		IN NVARCHAR2,
	Description		IN NVARCHAR2
)
AS
BEGIN
    INSERT INTO [SCDATA].FQ67412L
    (
        CA$9CLGID,
        CALNGP,
        CADSC1
    )
    VALUES
    (
        CatalogID,
	    LangPref,
	    Description
    );
END;
  /

-- #desc					Add Catalog Node Item
-- #bl_class				Premier.Inventory.CatalogNodeItem.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CatalogId			Catalog Id
-- #param UniqueKeyID		UniqueKey ID
-- #param ItemNumber		Item Number
-- #param SequenceNumber	Sequence Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddCatalogNodeItem
(
	CatalogId				IN NVARCHAR2,
	UniqueKeyID				IN DECIMAL,
	ItemNumber				IN DECIMAL,
	SequenceNumber			IN DECIMAL,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	DateUpdated				IN DECIMAL,
	TimeLastUpdated			IN DECIMAL,
	WorkStationID			IN NVARCHAR2
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67413I
	(
		IN$9CLGID,
		INUKID,
		INITM,
		INSEQ,
		INURAB,--UserReservedNumber 
		INURAT,--UserReservedAmount
		INURCD,--UserReservedCode
		INURDT,--UserReservedDate
		INURRF,--UserReservedReference
		INUSER,--UserId
		INPID, --ProgramId
		INUPMJ,--DateUpdated
		INUPMT,--TimeLastUpdated
		INJOBN --WorkstationId
	)
	VALUES
	(
		CatalogId,
		UniqueKeyID,
		ItemNumber,
		SequenceNumber,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);
END;
  /

-- #desc				        Add Item Web Content Detail
-- #bl_class			        Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param InstallationID	    InstallationID.
-- #param ItemNumber			ItemNumber.
-- #param DesignStatus			DesignStatus.
-- #param SequenceNumber		SequenceNumber.
-- #param ParagraphTitle		ParagraphTitle.
-- #param HtmlContent			HtmlContent.
-- #param ActiveInactive		Active-Inactive.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddItemWebContentDetail  
(
	InstallationID          IN  NVARCHAR2,
	ItemNumber              IN  DECIMAL,
	UniqueKeyID             OUT DECIMAL,
	DesignStatus            IN  DECIMAL,
	SequenceNumber          IN  DECIMAL,
	ParagraphTitle          IN  NVARCHAR2,
	HtmlContent             IN  NCLOB,
	ActiveInactive          IN  NVARCHAR2,
	EffectiveFromDate       IN  DECIMAL,
	EffectiveThruDate       IN  DECIMAL,
	UserReservedDate        IN  DECIMAL,
	UserReservedAmount      IN  DECIMAL,
	UserReservedNumber      IN  DECIMAL,
	UserReservedReference   IN  NVARCHAR2,
	UserId                  IN  NVARCHAR2,
	ProgramId               IN  NVARCHAR2,
	WorkStationId           IN  NVARCHAR2,
	DateUpdated             IN  DECIMAL,
	TimeOfDay               IN  DECIMAL
)	
AS 
BEGIN
    BEGIN
		
        -- Get next Unique Key Id   
        SELECT NVL(MAX(CDUKID), 0) + 1 INTO UniqueKeyID
        FROM [SCDATA].FQ67411 A 
        WHERE 
	        CDITM = ItemNumber 
	    AND CD$9INID = InstallationID
	    AND CD$9DS = DesignStatus;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    UniqueKeyID := NULL;
    END;
	
    IF(UniqueKeyID IS NULL) 
        THEN 
            UniqueKeyID := 1;
    END IF;

    INSERT INTO [SCDATA].FQ67411
   (
        CDITM,
        CDUKID,
        CD$9INID,
        CD$9DS,
        CDSEQ,
        CD$9PTL,
        CD$9HTML,
        CDASAI,
        CDEFFF,
        CDEFFT,
        CDURDT,
        CDURAT,
        CDURAB,
        CDURRF,
        CDUSER,
        CDPID,
        CDJOBN,
        CDUPMJ,
        CDTDAY
    )
    VALUES
    (
        ItemNumber ,
        UniqueKeyID ,
        InstallationID ,
        DesignStatus ,
        SequenceNumber ,
        ParagraphTitle ,
        HtmlContent ,
        ActiveInactive ,
        EffectiveFromDate ,
        EffectiveThruDate ,
        UserReservedDate ,
        UserReservedAmount ,
        UserReservedNumber ,
        UserReservedReference ,
        UserId ,
        ProgramId ,
        WorkStationId ,
        DateUpdated ,
        TimeOfDay 
    );
END;
  /

-- #desc						Add Language override for Item Web Content Detail
-- #bl_class					Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param InstallationID	    InstallationID.
-- #param ItemNumber			ItemNumber.
-- #param DesignStatus			DesignStatus.
-- #param LangPref				Language Preference.
-- #param UniqueKeyID			UniqueKeyID.
-- #param ParagraphTitle		ParagraphTitle.
-- #param HtmlContent			HtmlContent.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddItemWebContentDetLang  
(
	InstallationID      IN NVARCHAR2,
	ItemNumber          IN DECIMAL,
	DesignStatus        IN DECIMAL,
	UniqueKeyID         IN DECIMAL,
	LangPref            IN NVARCHAR2,
	ParagraphTitle      IN NVARCHAR2,
	HtmlContent         IN NCLOB,
	UserReservedCode    IN NVARCHAR2,
	UserReservedDate    IN DECIMAL,
	UserReservedAmount  IN DECIMAL,
	UserReservedNumber  IN DECIMAL,
	UserReservedReference IN NVARCHAR2,
	UserId              IN NVARCHAR2,
	ProgramId           IN NVARCHAR2,
	WorkStationId       IN NVARCHAR2,
	DateUpdated         IN DECIMAL,
	TimeOfDay           IN DECIMAL
)

AS 

BEGIN

    INSERT INTO [SCDATA].FQ67411L
    (
        CLITM,
        CLUKID,
        CL$9INID,
        CL$9DS,
        CLLNGP,
        CL$9PTL,
        CL$9HTML,
        CLURCD,
        CLURDT,
        CLURAT,
        CLURAB,
        CLURRF,
        CLUSER,
        CLPID,
        CLJOBN,
        CLUPMJ,
        CLTDAY
    )
    VALUES
    (
        ItemNumber ,
	    UniqueKeyID ,
	    InstallationID ,
	    DesignStatus ,
	    LangPref ,
	    ParagraphTitle ,
	    HtmlContent ,
	    UserReservedCode ,
	    UserReservedDate ,
	    UserReservedAmount ,
	    UserReservedNumber ,
	    UserReservedReference ,
	    UserId ,
	    ProgramId ,
	    WorkStationId ,
	    DateUpdated ,
	    TimeOfDay 
    );
END;
  /

-- #desc						Add Content Header
-- #bl_class					Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param ItemNumber			ItemNumber.
-- #param InstallationID		InstallationID.
-- #param DesignStatus			DesignStatus.
-- #param Description1			Description1.
-- #param Description2			Description2.
-- #param Description3			Description3.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddItemWebContentHeader 
(
		InstallationID      IN NVARCHAR2,	
		ItemNumber          IN DECIMAL,
		DesignStatus        IN DECIMAL,
		Description1        IN NVARCHAR2,
		Description2        IN NVARCHAR2,
		Description3        IN NVARCHAR2,
		MessagePriority     IN DECIMAL,
		HtmlContent         IN NCLOB,
		PortalUrl           IN NVARCHAR2,
		UserReservedCode    IN NVARCHAR2,
		UserReservedDate    IN DECIMAL,
		UserReservedAmount  IN DECIMAL,
		UserReservedNumber  IN DECIMAL,
		UserReservedReference IN NVARCHAR2,
		UserId              IN NVARCHAR2,
		ProgramId           IN NVARCHAR2,
		WorkStationId       IN NVARCHAR2,
		DateUpdated         IN DECIMAL,
		TimeOfDay           IN DECIMAL
)
AS
BEGIN

	INSERT INTO [SCDATA].FQ67410
    (
        CHITM
       ,CH$9INID
       ,CH$9DS
       ,CHDSC1
       ,CHDSC2
       ,CHDSC3  
       ,CH$9PRI
       ,CH$9HTML
       ,CHPTURL
       ,CHURCD
       ,CHURDT
       ,CHURAT
       ,CHURAB
       ,CHURRF
       ,CHUSER
       ,CHPID
       ,CHJOBN
       ,CHUPMJ
       ,CHTDAY
    )
    VALUES
    (	
        ItemNumber,
		InstallationID ,	
		DesignStatus ,
		Description1 ,
		Description2 ,
		Description3 ,
		MessagePriority ,
		HtmlContent ,
		PortalUrl,
		UserReservedCode ,
		UserReservedDate ,
		UserReservedAmount ,
		UserReservedNumber ,
		UserReservedReference ,
		UserId ,
		ProgramId ,
		WorkStationId,
		DateUpdated,
		TimeOfDay 
    );
END;
		
  /

-- #desc						Add Content Header Lang
-- #bl_class					Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param ItemNumber			ItemNumber.
-- #param InstallationID		InstallationID.
-- #param LangPref				Language Preference
-- #param DesignStatus			DesignStatus.
-- #param Description1			Description1.
-- #param Description2			Description2.
-- #param Description3			Description3.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddItemWebContentHeadLang 
(
    InstallationID      IN NVARCHAR2,
	ItemNumber          IN DECIMAL,
	DesignStatus        IN DECIMAL,
	LangPref            IN NVARCHAR2,
	Description1        IN NVARCHAR2,
	Description2        IN NVARCHAR2,
	Description3        IN NVARCHAR2,
	HtmlContent         IN NCLOB,
	UserReservedCode    IN NVARCHAR2,
	UserReservedDate    IN DECIMAL,
	UserReservedAmount  IN DECIMAL,
	UserReservedNumber  IN DECIMAL,
	UserReservedReference IN NVARCHAR2,
	UserId              IN NVARCHAR2,
	ProgramId           IN NVARCHAR2,
	WorkStationId       IN NVARCHAR2,
	DateUpdated         IN DECIMAL,
	TimeOfDay           IN DECIMAL
)
AS
BEGIN
			
	INSERT INTO [SCDATA].FQ67410L
    (       
        CLITM
       ,CL$9INID
       ,CL$9DS
       ,CLLNGP
       ,CLDSC1
       ,CLDSC2
       ,CLDSC3
       ,CL$9HTML
       ,CLURCD
       ,CLURDT
       ,CLURAT
       ,CLURAB
       ,CLURRF
       ,CLUSER
       ,CLPID
       ,CLJOBN
       ,CLUPMJ
       ,CLTDAY
    )
    VALUES
    (	
        ItemNumber,
		InstallationID ,	
		DesignStatus ,
		LangPref,
		Description1 ,
		Description2 ,
		Description3 ,
		HtmlContent ,
		UserReservedCode ,
		UserReservedDate ,
		UserReservedAmount ,
		UserReservedNumber ,
		UserReservedReference ,
		UserId ,
		ProgramId ,
		WorkStationId,
		DateUpdated,
		TimeOfDay 
    );
END;
		
  /

-- #desc					Add UOM 
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddUnitOfMeasure
(
	InstallationID  IN NVARCHAR2,
	UnitOfMeasure   IN NVARCHAR2,
	Description     IN NVARCHAR2
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67415
	(
	    UM$9INID,  UMUOM,  UMDSC1
	)
	VALUES
	(
	    InstallationID, UnitOfMeasure, Description
	);
END;


  /

-- #desc					Add UOM Lang
-- #bl_class				Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure	    Unit of Measure
-- #param LangPref			Language Preference
-- #param Description		Description	

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddUnitOfMeasureLang
(
	UnitOfMeasure  	IN NVARCHAR2,	
	Description		IN NVARCHAR2,
	LangPref		IN NVARCHAR2
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67415L
	(
	     UM$9INID,  
	     UMUOM, 
	     UMLNGP,    
	     UMDSC1
	)
	VALUES
	(
	     ' ', 
	     UnitOfMeasure, 
	     LangPref,   
	     Description
	);
END;

  
  /

-- #desc						Check if item has associated items by reference type
-- #bl_class					Premier.Inventory.ItemAssociatedList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ShortItemNumber		Short Item Number
-- #param RefType				Reference Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_CheckAssociatedItems
(		
	ShortItemNumber	DECIMAL,
	RefType			NVARCHAR2,
	AddressNumber	DECIMAL,
    ResultData1     OUT   GLOBALPKG.refcursor
)
AS
CurrentJulianDate INT := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN		
   OPEN ResultData1 FOR
  SELECT 
      COUNT(*) 
	FROM 
		[SCDATA].F4104               
	WHERE 
		IVITM = ShortItemNumber
		AND TRIM(IVXRT) = TRIM(RefType)
		AND ((CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ) OR
			 (CurrentJulianDate >= IVEFTJ AND IVEXDJ = 0))
		AND (IVAN8 =  AddressNumber OR IVAN8 = 0);
END;			
  /

-- #desc							Add Item Related to Branch Plants
-- #bl_class						Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param StoreId					Store Id
-- #param BranchPlant    			Branch Plant.
-- #param ShortProductNumbersXML	XML with short item numbers list.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelBranchPlantItems
(
	StoreId		IN NCHAR,
	BranchPlant			IN NCHAR,
	ShortProductNumbersXML	IN XMLType DEFAULT NULL
)
AS
	SQLTMP					VARCHAR(8000);

BEGIN
	IF (ShortProductNumbersXML IS NOT NULL) THEN
		DELETE 
		FROM [SCDATA].FQ670005 FQ
		WHERE 
			EXISTS ( SELECT 1 FROM XMLTABLE ('/items/item' PASSING ShortProductNumbersXML COLUMNS ShortProductNumber NUMBER PATH 'text()') X WHERE X.ShortProductNumber = FQ.BPITM )	
			AND FQ.BP$9INID = StoreId;
	END IF;
END;
  /

-- #desc				        Delete Catalog,Delete Catalog Language
--					            Delete Catalog Detail and Delete Catalog Detail Language
-- #bl_class			        Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param InstallationID    	InstallationID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalog
(
	InstallationID  IN NVARCHAR2,
	CatalogId		IN NVARCHAR2
)
	
AS
BEGIN
    DELETE FROM [SCDATA].FQ67412
    WHERE
        (TRIM(CA$9CLGID) = TRIM(CatalogId) AND
		 CA$9INID = InstallationID);
      
    --DELETE CATALOG LANG
    [SCLIBRARY].INV_DelCatalogLang(CatalogId,NULL);
    --DELETE CATALOG DETAIL
    [SCLIBRARY].INV_DelCatalogDetail(CatalogId,NULL);
END;
  /

-- #desc					Delete Catalog Node Item
-- #bl_class				Premier.Inventory.CatalogNodeItem.cs/CatalogNodeItems.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AttributeID		Catalog ID
-- #param UniqueKeyID		UniqueKey ID
-- #param ItemNumber		ItemNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalogNodeItem
(
	CatalogID		IN NVARCHAR2,
	UniqueKeyID		IN DECIMAl,
	ItemNumber		IN DECIMAl
)
AS
BEGIN
	
	DELETE FROM
		[SCDATA].FQ67413I
	WHERE
		(TRIM(IN$9CLGID) = TRIM(CatalogID)) AND
	    INUKID	= UniqueKeyID  AND
	    INITM	= ItemNumber;
END;
  /

-- #desc				    Delete Item Web Content Header and related registers
-- #bl_class			    Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies		    INV_DelItemWebContentHeadLang, INV_DelItemWebContentDetail
-- #db_references

-- #param InstallationID	Installation ID
-- #param ItemNumber	    Item Number	 
-- #param DesignStatus		Design Status


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentHeader
(
    InstallationID  IN NVARCHAR2,
	ItemNumber      IN DECIMAL,	
	DesignStatus    IN DECIMAL
)
AS
BEGIN
	DELETE FROM 
		[SCDATA].FQ67410
    WHERE 
		CHITM = ItemNumber 
		AND CH$9INID = InstallationID
        AND CH$9DS = DesignStatus;
        
    [SCLIBRARY].INV_DelItemWebContentHeadLang(InstallationID,ItemNumber,DesignStatus,null);
    
    --Delete all Item Web Content Detail asociated with Header
    [SCLIBRARY].INV_DelItemWebContentDetail(InstallationID, ItemNumber, DesignStatus, null);
END;
            
            
  /

-- #desc					Del UOM 
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure	    Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description       Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelUnitOfMeasure
(
	InstallationID  IN NVARCHAR2,
	UnitOfMeasure   IN NVARCHAR2
)	
AS
BEGIN
	DELETE 
		[SCDATA].FQ67415
	WHERE
		UM$9INID = InstallationID
	    AND TRIM(UMUOM) = TRIM(UnitOfMeasure);
	    
	[SCLIBRARY].INV_DelUnitOfMeasureLang(UnitOfMeasure, null);
END;
	
  /

-- #desc							Verify if exist items for the DisplayItemNumber List provided and return the ShortItemNumber respective.
-- #bl_class						Premier.Inventory.CheckDisplayItemNumbersCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param DisplayItemSetting		Display Item Setting
-- #param DisplayItemNumbersXML		Display Item Number List
 
CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcCheckDisplayItemNumbers
(
	DisplayItemSetting		IN NCHAR,
	DisplayItemNumbersXML 	IN XMLType,
	ResultData1 OUT GLOBALPKG.refcursor     
)
AS

BEGIN
	
	IF(DisplayItemSetting = 'LITM') THEN 
		OPEN ResultData1 FOR
		SELECT 
			I.IMITM AS ShortItemNumber, 
			I.IMLITM AS DisplayItemNumber
		FROM XMLTABLE ('/items/item' 
						PASSING DisplayItemNumbersXML
						COLUMNS LongItemNumber NCHAR(25) PATH 'text()') X
		INNER JOIN [SCDATA].F4101 I 
			ON I.IMLITM = X.LongItemNumber;		
	ELSIF(DisplayItemSetting = 'AITM') THEN
		OPEN ResultData1 FOR
		SELECT 
			I.IMITM AS ShortItemNumber, 
			I.IMAITM AS DisplayItemNumber
		FROM XMLTABLE ('/items/item' 
						PASSING DisplayItemNumbersXML
						COLUMNS AuxItemNumber NCHAR(25) PATH 'text()') X
		INNER JOIN [SCDATA].F4101 I 
			ON I.IMAITM = X.AuxItemNumber;
	ELSE	
		OPEN ResultData1 FOR
		SELECT 
			I.IMITM AS ShortItemNumber, 
			TO_NCHAR(I.IMITM) AS DisplayItemNumber
		FROM XMLTABLE ('/items/item' 
						PASSING DisplayItemNumbersXML
						COLUMNS ShortItemNumber NUMBER PATH 'text()') X
		INNER JOIN [SCDATA].F4101 I 
			ON I.IMITM = X.ShortItemNumber;
	END IF;
END;

  /

-- #desc				
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param ShortItemNumber		Short Item Number		

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcCheckItemBranchOverr
(
	InstallationID		IN NVARCHAR2,
	ShortItemNumber		IN DECIMAL,
	ResultData1			OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
	SELECT A.BPMCU AS BranchPlantID
	FROM
		[SCDATA].FQ670005 A			/*Branch Plant Override by Item and Installation ID*/
	INNER JOIN [SCDATA].FQ679910 B	/*BranchPlant by Installation*/
		ON B.BI$9INID = A.BP$9INID
		AND B.BIMCU = A.BPMCU
	WHERE
		A.BP$9INID = InstallationID AND
		A.BPITM = ShortItemNumber;
END;
  /

-- #desc						Copy a Catalog from Source Installation to Target Installation.
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID	    Installation ID.
-- #param InstallationIDFrom	Copy Installation ID.
-- #param SelectionKeys         Selection Keys.
-- #param UserID				User ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcCopyCatalog 
(
	SourceInstallationID IN NVARCHAR2,
	SourceCatalogID IN NVARCHAR2,
	NewInstallationID IN NVARCHAR2,
	NewCatalogID IN NVARCHAR2
)
AS
BEGIN		
	--CATALOG COPY
	INSERT INTO [SCDATA].FQ67412 (CA$9CLGID, CA$9EFM, CAEFFF, CAEFFT, CADSC1, CASEQ, CA$9INID)
	(SELECT 
		NewCatalogID,
		CA$9EFM,
		CAEFFF,
		CAEFFT,
		CADSC1,
		CASEQ,
		NewInstallationID
	FROM [SCDATA].FQ67412
	WHERE TRIM(CA$9CLGID) = TRIM(SourceCatalogID));
	
	--CATALOG HEADER LANG
	INSERT INTO [SCDATA].FQ67412L (CA$9CLGID, CALNGP, CADSC1)
	(SELECT 
		NewCatalogID,
		CALNGP,
		CADSC1
	FROM [SCDATA].FQ67412L
	WHERE TRIM(CA$9CLGID) = TRIM(SourceCatalogID));
	
	--NODES COPY
	INSERT INTO [SCDATA].FQ67413 (CD$9CLGID, CDUKID, CD$9PKID, CD$9IIS, CDDTAI, CDKY, CDDL01, CD$9EFM, CDEFFF, CDEFFT, CDSEQ, CDIMGURL, CDTMPI)
	(SELECT
		NewCatalogID,
		CDUKID,
		CD$9PKID,
		CD$9IIS,
		CDDTAI,
		CDKY,
		CDDL01,
		CD$9EFM,
		CDEFFF,
		CDEFFT,
		CDSEQ,
		CDIMGURL,
		CDTMPI
	FROM [SCDATA].FQ67413
	WHERE TRIM(CD$9CLGID) = TRIM(SourceCatalogID));
    		
	--NODE ITEMS COPY
	INSERT INTO [SCDATA].FQ67413I (IN$9CLGID, INUKID, INITM, INSEQ, INURAB, INURAT, INURCD, INURDT, INURRF, INUSER, INPID, INUPMJ, INUPMT, INJOBN)
	(SELECT
		NewCatalogID,
		INUKID,
		INITM,
		INSEQ,
		INURAB,
		INURAT,
		INURCD,
		INURDT,
		INURRF,
		INUSER,
		INPID,
		INUPMJ,
		INUPMT,
		INJOBN
	FROM [SCDATA].FQ67413I
	WHERE TRIM(IN$9CLGID) = TRIM(SourceCatalogID));
	    		
	--NODE LANGUAGES COPY
	INSERT INTO [SCDATA].FQ67413L (CD$9CLGID, CDUKID, CDLNGP, CDDL01)
	(SELECT
		NewCatalogID,
		CDUKID,
		CDLNGP,
		CDDL01
	FROM [SCDATA].FQ67413L
	WHERE TRIM(CD$9CLGID) = TRIM(SourceCatalogID));

END;
  /

-- #desc							Copy Item Web Content to Specific Installation
-- #bl_class						Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param SourceInstallation		Source Installation ID
-- #param TargetInstallation		Target Installation ID
-- #param ItemNumber				Item Number.
-- #param Status					Item Web Status.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcCopyItemWebContenToInst 
(
    SourceInstallation  IN NVARCHAR2,
    TargetInstallation  IN NVARCHAR2,
    ItemNumber          IN DECIMAL,
    Status              IN DECIMAL
)
AS
BEGIN

	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = ItemNumber AND
    CH$9INID = TargetInstallation AND
	CH$9DS = Status;
	--Delete main header table language
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = TargetInstallation AND
	CL$9DS = Status;
	--Delete detail table
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = ItemNumber AND
    CD$9INID = TargetInstallation AND
	CD$9DS = Status;
	--Delete detail table language
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = TargetInstallation AND
	CL$9DS = Status;
	
	--Copy main header table
	INSERT INTO [SCDATA].FQ67410
	(
	        CHITM
           ,CH$9INID
           ,CH$9DS
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CHPGTX
           ,CHDL01
           ,CHDL02
           ,CHDL03
           ,CHDL04
           ,CHDL05
           ,CHDL06
           ,CHDL07
           ,CHDL08
           ,CHDL09
           ,CHDL10
           ,CHCOMMENTS
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,CHUPMJ
           ,CHTDAY
	)
	(SELECT 
		   CHITM
           ,TargetInstallation
           ,CH$9DS
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CHPGTX
           ,CHDL01
           ,CHDL02
           ,CHDL03
           ,CHDL04
           ,CHDL05
           ,CHDL06
           ,CHDL07
           ,CHDL08
           ,CHDL09
           ,CHDL10
           ,CHCOMMENTS
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,CHUPMJ
           ,CHTDAY
	FROM [SCDATA].FQ67410
	WHERE  
		CHITM = ItemNumber AND
        CH$9INID = SourceInstallation AND
		CH$9DS = Status);
    
	--Copy header Lang Table	
	INSERT INTO [SCDATA].FQ67410L
	(
	    CLITM
		,CL$9INID
		,CL$9DS
		,CLLNGP
        ,CLDSC1
        ,CLDSC2
        ,CLDSC3
        ,CLPGTX
        ,CLDL01
        ,CLDL02
        ,CLDL03
        ,CLDL04
        ,CLDL05
        ,CLDL06
        ,CLDL07
        ,CLDL08
        ,CLDL09
        ,CLDL10
        ,CLCOMMENTS
        ,CL$9HTML
        ,CLURCD
        ,CLURDT
        ,CLURAT
        ,CLURAB
        ,CLURRF
        ,CLUSER
        ,CLPID
        ,CLJOBN
        ,CLUPMJ
        ,CLTDAY
	)
	(
	    SELECT 
            CLITM
		    ,TargetInstallation
		    ,CL$9DS
		    ,CLLNGP
            ,CLDSC1
            ,CLDSC2
            ,CLDSC3
            ,CLPGTX
            ,CLDL01
            ,CLDL02
            ,CLDL03
            ,CLDL04
            ,CLDL05
            ,CLDL06
            ,CLDL07
            ,CLDL08
            ,CLDL09
            ,CLDL10
            ,CLCOMMENTS
            ,CL$9HTML
            ,CLURCD
            ,CLURDT
            ,CLURAT
            ,CLURAB
            ,CLURRF
            ,CLUSER
            ,CLPID
            ,CLJOBN
            ,CLUPMJ
            ,CLTDAY
	    FROM [SCDATA].FQ67410L
	    WHERE  
		    CLITM = ItemNumber AND
            CL$9INID = SourceInstallation AND
		    CL$9DS = Status
    );
    		
	--Copy Detail Table
	INSERT INTO [SCDATA].FQ67411
	(
	    CDITM
		,CDUKID
		,CD$9INID
		,CD$9DS
		,CDSEQ
		,CD$9PTL
		,CD$9HTML 
		,CDASAI
		,CDEFFF
		,CDEFFT
		,CDURCD
		,CDURDT
		,CDURAT
		,CDURAB
		,CDURRF
		,CDUSER
		,CDPID
		,CDJOBN
		,CDUPMJ
		,CDTDAY
	)
	(
	    SELECT 
		     CDITM
		    ,CDUKID
		    ,TargetInstallation
		    ,CD$9DS
		    ,CDSEQ
		    ,CD$9PTL
		    ,CD$9HTML
		    ,CDASAI
		    ,CDEFFF
		    ,CDEFFT
		    ,CDURCD
		    ,CDURDT
		    ,CDURAT
		    ,CDURAB
		    ,CDURRF
		    ,CDUSER
		    ,CDPID
		    ,CDJOBN
		    ,CDUPMJ
		    ,CDTDAY
	    FROM [SCDATA].FQ67411
	    WHERE  
		    CDITM = ItemNumber AND
            CD$9INID = SourceInstallation AND
		    CD$9DS = Status
    );
	    		
	--Copy Lang Detail Table
	INSERT INTO [SCDATA].FQ67411L
	(
	     CLITM
		,CLUKID
		,CL$9INID
		,CL$9DS
		,CLLNGP
		,CL$9PTL
		,CL$9HTML
		,CLURCD
		,CLURDT
		,CLURAT
		,CLURAB
		,CLURRF
		,CLUSER
		,CLPID
		,CLJOBN
		,CLUPMJ
		,CLTDAY
	)
	(
	    SELECT 
		     CLITM
		    ,CLUKID
		    ,TargetInstallation
		    ,CL$9DS
		    ,CLLNGP
		    ,CL$9PTL
		    , CL$9HTML 
		    ,CLURCD
		    ,CLURDT
		    ,CLURAT
		    ,CLURAB
		    ,CLURRF
		    ,CLUSER
		    ,CLPID
		    ,CLJOBN
		    ,CLUPMJ
		    ,CLTDAY
	    FROM [SCDATA].FQ67411L
	    WHERE  
		    CLITM = ItemNumber AND
            CL$9INID = SourceInstallation AND
		    CL$9DS = Status
    );
END;
  /

-- #desc				    Indicates if the Item Content of an installation exist
-- #bl_class			    Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references		    N/A

-- #param ItemNumber	    Item Number.
-- #param InstallationID    Installation ID.
-- #param DesignStatus      Desing Status.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcExistItemContentByInst
(
  InstallationID  IN NVARCHAR2,
  ItemNumber      IN DECIMAL,
  DesignStatus    IN DECIMAL,
  ResultData1 OUT GLOBALPKG.refcursor
)

AS
  COUNTTMP INT;
  InstallationIDTMP NVARCHAR2(3) := InstallationID;
  
  BEGIN
    BEGIN
      SELECT 
              COUNT(*) INTO COUNTTMP 
          FROM 
              [SCDATA].FQ67410 
          WHERE 
              InstallationID = CH$9INID
              AND ItemNumber=CHITM 
              AND (DesignStatus IS NULL OR CH$9DS = DesignStatus);
          EXCEPTION WHEN NO_DATA_FOUND THEN 
          COUNTTMP := 0;
    END;
	
    IF(COUNTTMP = 0)
       THEN
           InstallationIDTMP := '***';
    END IF;
    
    OPEN ResultData1 FOR
        SELECT 
        COUNT(*) AS ItemsCount
        , CH$9INID AS InstallationID
        
        FROM [SCDATA].FQ67410 
        WHERE CH$9INID = InstallationIDTMP AND CHITM = ItemNumber
        AND (DesignStatus IS NULL OR CH$9DS = DesignStatus)
        GROUP BY CH$9INID;
  
  END;
  /

-- #desc						Returns the data of the items,langs.
-- #db_dependencies				INV_GetCatalogNodeListFnc
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param CatalogID				Catalog Id
-- #param CatalogMCU			Catalog MCU

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatNodeXMLItemList
(
  InstallationID IN	NCHAR,
  CatalogID	     IN	NCHAR,
  CatalogMCU	 IN NCHAR,
  ResultData1 OUT  GLOBALPKG.refcursor,
  ResultData2 OUT  GLOBALPKG.refcursor,
  ResultData3 OUT  GLOBALPKG.refcursor
  )
AS
  CountItems NUMBER;
  CurrentNode NUMBER;
  INDEXITEMS NUMBER:=0;
  SQL1 VARCHAR2(8000);
  WHERECONDITIONS VARCHAR2(1000);
  IncludeInSearch	NUMERIC(31,0);
  NodeParent NUMERIC;
  ParentTmp NUMERIC;
  CategoryCode NVARCHAR2(10);
  CategoryValue NVARCHAR2(10);
  DetailIdToSearch NUMERIC;
  ParentTemplate NUMERIC;
  CurrentDetailId NUMERIC;
  CurrentTemplateID NVARCHAR2(10);
  CountNodes  NUMERIC;
  indexNodes NUMERIC;
  CurrentNodeIncludeInsearch NUMERIC;
  EffectiveThruDate NUMERIC;
  CurrentJulianDate NUMBER(6,0);
  EffectiveModeFlag NUMERIC;
  IsOverdue smallint := 0;
  EffectiveThruDateParent NUMERIC;
  EffectiveFromDateParent NUMERIC;
  EffectiveModeFlagParent NUMERIC;
  FromCondition VARCHAR2(10000);
BEGIN

  EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_EXGETCATNODXMLITMLST_A';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_EXGETCATNODXMLITMLST_B';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_EXGETCATNODXMLITMLST_C';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_EXGETCATNODXMLITMLST_D';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_EXGETCATNODXMLITMLST_I';

  [SCLIBRARY].INV_GetCatalogNodeListFnc(CatalogID);
  INSERT INTO [SCLIBRARY].INV_EXGETCATNODXMLITMLST_A
  (
		NODEID,
		TEMPLATEID,
		PARENTID,
		RANKNODE,
		INCLUDEINSEARCH,
		EFFECTIVETHRUDATE,
		EFFECTIVEMODEFLAG
  )
  SELECT
		A.UniqueKeyID,
		A.TemplateID,
		A.ParentKeyID,
		RANK() OVER(ORDER BY  A.UniqueKeyID)  RANK,
		A.IncludeInSearch,
		A.EffectiveThruDate,
		A.EffectiveModeFlag
  FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A A
  WHERE NOT EXISTS (SELECT 1 FROM [SCDATA].FQ67413 B WHERE B.CD$9CLGID = CatalogID AND B.CD$9PKID = A.UniqueKeyID);

  SELECT MAX(RANKNODE) INTO CountItems
  FROM [SCLIBRARY].INV_EXGETCATNODXMLITMLST_A;

  CurrentJulianDate:= [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

  WHILE INDEXITEMS < CountItems
  LOOP --Begin Loop 1
	SELECT NODEID, INCLUDEINSEARCH, EFFECTIVETHRUDATE, EFFECTIVEMODEFLAG  INTO CurrentNode,CurrentNodeIncludeInsearch, EffectiveThruDate,EffectiveModeFlag FROM [SCLIBRARY].INV_EXGETCATNODXMLITMLST_A  WHERE RANKNODE= INDEXITEMS+1;
	--EXTRACT ITEMS DATA
	  WhereConditions := ' ';
	  FromCondition := '';
	  NodeParent := currentNode;
	  ParentTmp:=0;
	  IsOverdue:=0;
	  --Begin Include in search IF
	  IF CurrentNodeIncludeInsearch =0 OR CurrentNodeIncludeInsearch=2 OR CurrentNodeIncludeInsearch= 4 OR CurrentNodeIncludeInsearch=5 THEN
	  WHILE NodeParent <> 0 AND  NodeParent IS NOT NULL AND IsOverdue=0
	  LOOP  --Begin Loop 2
			ParentTmp :=  NodeParent;
			SELECT  A.CD$9IIS,   A.CDDTAI,  A.CDKY, NVL(A.CD$9PKID,0),A.CDEFFF, A.CDEFFT,A.CD$9EFM
			INTO IncludeInSearch,CategoryCode,CategoryValue, NodeParent,
				 EffectiveFromDateParent,EffectiveThruDateParent,EffectiveModeFlagParent
			FROM [SCDATA].FQ67413 A
			WHERE A.CD$9CLGID =  CatalogID
			AND A.CDUKID =  ParentTmp;

			--Effective Dates validation
			IF EffectiveModeFlagParent =0 OR ( EffectiveModeFlagParent=1 AND CurrentJulianDate<= EffectiveThruDateParent) THEN
				IF( IncludeInSearch = 0 OR  IncludeInSearch = 2) THEN --Begin If 1
					IF (WhereConditions <> ' ') THEN --Begin If 2
						WhereConditions :=  WhereConditions || ' AND ';
					END IF;	--End If 2
					IF (CategoryValue = '          ') THEN -- In ORACLE the CategoryValue returns a value of 10 blank spaces.
						WhereConditions :=  WhereConditions || 'IM' || TRIM( CategoryCode) || ' = '' '' ';
					ELSE
						WhereConditions :=  WhereConditions || 'IM' || TRIM( CategoryCode) || ' = ''' || TRIM( CategoryValue) || '''';
					END IF;
				END IF;     --End If 1
				IF  ParentTmp =  NodeParent THEN --Begin If 3
				   NodeParent := 0;	--End If 3
				END IF;
			ELSE
				IsOverdue := 1;
				NodeParent:= 0;
			END IF;   -- Effective Dates validation
	 END LOOP; --End Loop 2
	 --Is Overdue Validation
	 IF IsOverdue =0 THEN
		 /* INV_EXGETCATNODXMLITMLST_D - TEMPORARY ITEMS*/
		 SQL1 := 'INSERT INTO  [SCLIBRARY].INV_EXGETCATNODXMLITMLST_D (ITEMNUMBER,PRIORITY,SCTYPE,TEMPLATE, SEGMENT1) ' ;

		--Validate fiter by Cat Code  Include = 0
		IF CurrentNodeIncludeInsearch =0 THEN
			
			FromCondition := ' [SCDATA].F4101 A
								INNER JOIN [SCDATA].F40205 C
								ON C.LFLNTY = A.IMLNTY
								INNER JOIN [SCDATA].FQ679910 E
								ON E.BI$9INID = ''' ||InstallationID || '''
								INNER JOIN [SCDATA].F4102 B
								ON B.IBITM = A.IMITM
								AND B.IBMCU = E.BIMCU';

			SQL1 := SQL1 ||  ' SELECT DISTINCT
									A.IMITM ItemNumber,
									NVL (CONTENTINS.CH$9PRI,NVL(CONTENTBASE.CH$9PRI,0)) AS Priority,
									CASE
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '' '' THEN N''M''
										ELSE N''S''
									END AS ScType, A.IMTMPL AS Template , A.IMSEG1 AS Segment1
								FROM ' || FromCondition ||
								' LEFT OUTER JOIN [SCDATA].FQ67410  CONTENTINS  --Contents by Installation
									ON CONTENTINS.CHITM = A.IMITM
									AND CONTENTINS.CH$9INID = :InstallationID 
									AND CONTENTINS.CH$9DS =0
									LEFT OUTER JOIN [SCDATA].FQ67410  CONTENTBASE  --Contents Base
												ON CONTENTBASE.CHITM = A.IMITM
												AND CONTENTBASE.CH$9INID = ''***''
												AND CONTENTBASE.CH$9DS =0
								WHERE ' ||  WhereConditions ||  ' AND (A.IMSTKT <> ''N'' AND (C.LFIVI = ''Y'' OR C.LFIVI = ''D''))
								AND (A.IMTMPL = '' '' OR A.IMMIC IN (''1'', '' ''))
								UNION
								SELECT
									A.IMITM ItemNumber,
									NVL (CONTENTINS.CH$9PRI,NVL(CONTENTBASE.CH$9PRI,0)) AS Priority,
									CASE
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '' '' THEN N''M''
										ELSE N''N''
									END AS ScType, A.IMTMPL AS Template, A.IMSEG1 AS Segment1
								FROM
									[SCDATA].F4101 A
								INNER JOIN [SCDATA].F40205 C
									ON C.LFLNTY = A.IMLNTY
								LEFT OUTER JOIN [SCDATA].FQ67410  CONTENTINS  --Contents by Installation
									ON CONTENTINS.CHITM = A.IMITM
									AND CONTENTINS.CH$9INID = :InstallationID 
									AND CONTENTINS.CH$9DS =0
									LEFT OUTER JOIN [SCDATA].FQ67410  CONTENTBASE  --Contents Base
												ON CONTENTBASE.CHITM = A.IMITM
												AND CONTENTBASE.CH$9INID =''***''
												AND CONTENTBASE.CH$9DS =0
								WHERE ' ||  WHERECONDITIONS || ' AND (A.IMSTKT = ''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))
								AND (A.IMTMPL = '' '' OR A.IMMIC IN (''1'', '' ''))';
		  ELSE
				FromCondition := ' [SCDATA].FQ67413I D   /*Catalog Node Items*/
										INNER JOIN  [SCDATA].F4101 A
										ON A.IMITM = D.INITM
										INNER JOIN [SCDATA].F40205 C
										ON C.LFLNTY = A.IMLNTY
										INNER JOIN [SCDATA].FQ679910 E
										ON E.BI$9INID = ''' ||InstallationID || '''
										INNER JOIN [SCDATA].F4102 B
										ON B.IBITM = D.INITM
										AND B.IBMCU = E.BIMCU';

				SQL1 := SQL1 ||  ' SELECT DISTINCT
								A.IMITM ItemNumber,
								D.INSEQ Priority,
								CASE
									WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
									WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '' '' THEN N''M''
									ELSE N''S''
								END AS ScType, A.IMTMPL AS Template, A.IMSEG1 AS Segment1
							FROM ' || FromCondition ||'
							WHERE  D.IN$9CLGID = :CatalogID
							AND D.INUKID = :CurrentNode 
							AND (A.IMSTKT <> ''N'' AND (C.LFIVI = ''Y'' OR C.LFIVI = ''D''))
							UNION
							SELECT
								A.IMITM ItemNumber,
								D.INSEQ Priority,
								CASE
									WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
									WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '' '' THEN N''M''
									ELSE N''N''
								END ScType, A.IMTMPL Template, A.IMSEG1 AS Segment1
							FROM
							[SCDATA].FQ67413I D
							INNER JOIN  [SCDATA].F4101 A
							ON A.IMITM  = D.INITM
							INNER JOIN [SCDATA].F40205 C
							ON C.LFLNTY = A.IMLNTY
							WHERE D.IN$9CLGID = :CatalogID 
							AND D.INUKID = :CurrentNode 
							AND (A.IMSTKT = ''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))';
		  END IF; --End IF

		/*CLEAR TEMP LOOP DATA INV_EXGETCATNODXMLITMLST_D - TEMPORARY ITEMS*/
		EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_EXGETCATNODXMLITMLST_D';

		IF (CurrentNodeIncludeInsearch = 0) THEN
			EXECUTE IMMEDIATE SQL1 USING InstallationID, InstallationID;
		ELSE
			EXECUTE IMMEDIATE SQL1 USING CatalogID, CurrentNode, CatalogID, CurrentNode;
		END IF;

		INSERT INTO [SCLIBRARY].INV_EXGETCATNODXMLITMLST_B(ITEMNUMBER,SCTYPE, TEMPLATE, SEGMENT1)
				SELECT A.ITEMNUMBER, A.SCTYPE, A.TEMPLATE, A.SEGMENT1
										FROM  [SCLIBRARY].INV_EXGETCATNODXMLITMLST_D A
										WHERE
										 NOT EXISTS (SELECT B.ITEMNUMBER FROM [SCLIBRARY].INV_EXGETCATNODXMLITMLST_B B WHERE B.ITEMNUMBER = A.ITEMNUMBER);

		INSERT INTO [SCLIBRARY].INV_EXGETCATNODXMLITMLST_C(NODEID, ITEMNUMBER, PRIORITY)
				SELECT  CurrentNode,ITEMNUMBER,PRIORITY
				FROM  [SCLIBRARY].INV_EXGETCATNODXMLITMLST_D;
		END IF;-- End IF Overdue validation
	END IF; --End IF Include in search
	INDEXITEMS := INDEXITEMS+1;

  END LOOP;--End Loop 1

/* Gets all item information and insert that into [SCLIBRARY].INV_EXGETCATNODXMLITMLST_J */

  INSERT INTO [SCLIBRARY].INV_EXGETCATNODXMLITMLST_I (ITEMNUMBER, DESCRIPTION1, DESCRIPTION2, DESCRIPTION3, BRANCHPLANT, CROSSREFERENCE,
			PRIMARYUNITMEASURE, PRICINGUNITMEASURE, SHIPPINGUNITMEASURE, CONTENT, INSTALLATIONID, LONGITEMNUMBER, AUXILIARYITEMNUMBER, INVENTORYFLAG,
			STOCKINGTYPE, SCTYPE, TEMPLATE)
	SELECT
		I.ItemNumber ItemNumber,
			NVL(CONTENTINS.CHDSC1, NVL(CONTENTBASE.CHDSC1, A.IMDSC1))	 Description1,
			NVL (CONTENTINS.CHDSC2, NVL(CONTENTBASE.CHDSC2, A.IMDSC2)) Description2,
			NVL (CONTENTINS.CHDSC3, NVL(CONTENTBASE.CHDSC3, ' '))			 Description3 ,
			NVL ((SCLIBRARY.INV_GetItemBranchPlantStrFnc(InstallationID, A.IMITM)), ' ') BranchPlant,
			NVL ((SCLIBRARY.INV_GetItemCrossRefStrFnc(A.IMITM, ' ')), ' ')	 CrossReference,
			A.IMUOM1 PrimaryUnitMeasure,
			A.IMUOM4 PricingUnitMeasure,
			A.IMUOM6 ShippingUnitMeasure,
			A.IMSRTX Content,
			NVL(CONTENTINS.CH$9INID, '***') InstallationID,
			A.IMLITM	LongItemNumber,
			A.IMAITM	AuxiliaryItemNumber,
			C.LFIVI		InventoryFlag,
			A.IMSTKT	StockingType,
			I.ScType	ScType,
			A.IMTMPL	Template
		FROM [SCLIBRARY].INV_EXGETCATNODXMLITMLST_B I
		INNER JOIN [SCDATA].F4101 A
			ON A.IMITM = I.ItemNumber
		INNER JOIN [SCDATA].F40205 C
			ON C.LFLNTY = A.IMLNTY
		LEFT OUTER JOIN [SCDATA].FQ67410 CONTENTINS
			ON CONTENTINS.CHITM = I.ItemNumber
			AND CONTENTINS.CH$9INID = InstallationID
			AND CONTENTINS.CH$9DS = 0
		LEFT OUTER JOIN [SCDATA].FQ67410 CONTENTBASE
			ON CONTENTBASE.CHITM = I.ItemNumber
			AND CONTENTBASE.CH$9INID = '***'
			AND CONTENTBASE.CH$9DS = 0;

	--Data of items
		OPEN  ResultData1 FOR
		SELECT
			I.ItemNumber,
			I.Description1,
			I.Description2,
			I.Description3,
			I.BranchPlant,
			I.CrossReference,
			I.PrimaryUnitMeasure,
			I.PricingUnitMeasure,
			I.ShippingUnitMeasure,
			I.LongItemNumber,
			I.AuxiliaryItemNumber,
			I.Content,
			InstallationID AS InstallationID, /*Return input installation*/
			I.StockingType,
			I.InventoryFlag,
			I.ScType,
			I.Template
			FROM [SCLIBRARY].INV_EXGETCATNODXMLITMLST_I I;

	--Node items relation data
		OPEN  ResultData2 FOR
		SELECT * FROM [SCLIBRARY].INV_EXGETCATNODXMLITMLST_C;

	--Region Langs Data of Items
		OPEN ResultData3 FOR
		SELECT  ITMLANG.CLITM ItemId, ITMLANG.CLLNGP LangId,
			  NVL(ITMLANG.CLDSC1,'') Description1, NVL(ITMLANG.CLDSC2,'') Description2,
			  NVL(ITMLANG.CLDSC3  ,'')Description3,
				 IT.crossReference,IT.longItemNumber,IT.auxiliaryItemNumber
		FROM 	 [SCDATA].FQ67410L ITMLANG,  [SCLIBRARY].INV_EXGETCATNODXMLITMLST_I IT
		WHERE ITMLANG.CLITM = ITEMNUMBER
		   AND ITMLANG.CL$9INID =  IT.installationID --INSTALLATION
		   AND ITMLANG.CL$9DS =0;
END;
  /

-- #desc							Get the list of cross reference by installation
-- #bl_class						Premier.Inventory.GetCatXMLCrossReferencesCommand.cs	
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID		    Installation ID
-- #param AddressNumber				Optional  -- Address Number
-- #param ShortItemNumber		    Optional  -- Item Number 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatXMLCrossRefList
(
  InstallationID			IN NCHAR,
  AddressNumber 			IN NUMBER,
  ShortItemNumber			IN NUMBER,
  ResultData1 OUT  GLOBALPKG.refcursor
)
AS
	CustCrossRefType		NCHAR(2);
	CustCrossConstantINID	NCHAR(3);
  BEGIN
    CustCrossConstantINID := InstallationID;
    [SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossConstantINID, CustCrossRefType);
    OPEN ResultData1 FOR
    	SELECT 
    	 DISTINCT
         A.WA$9AN8  AS AddressNumber,
         B.IVITM AS ShortItemNumber,
         B.IVXRT AS CrossRefType,
         B.IVCITM AS RefProductNumber,
         B.IVEFTJ AS EfectiveDate, 		   
         B.IVEXDJ AS ExpirationDate		   
      FROM [SCDATA].FQ67101 A,
         [SCDATA].F4104 B
      WHERE B.IVAN8 = A.WA$9AN8
        AND A.WA$9INID = InstallationID
        AND B.IVXRT = CustCrossRefType
        AND (AddressNumber IS NULL OR A.WA$9AN8 = AddressNumber)
        AND (ShortItemNumber IS NULL OR B.IVITM = ShortItemNumber);
  END;
  /
 
-- #desc							Get the list of customer items by installation
-- #bl_class						Premier.Inventory.GetCatXMLCutomersItemsCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].INV_ExcGetCatXMLCustomersItems
(
	InstallationID IN NCHAR,
	AddressNumber IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	DefCustomerConstant		NCHAR(256);
	DefCustomer				DECIMAL := 0;
	ConstantINID			NCHAR(3) := InstallationID;
BEGIN
  -- Get the Default Customer value constant
  [SCLIBRARY].CMM_GetConstantValue('DEFCUSTOM', ConstantINID, DefCustomerConstant);
  DefCustomer := CAST(DefCustomerConstant AS DECIMAL);

  OPEN ResultData1 FOR
	SELECT DISTINCT 
		CAST(SXXRVF AS DECIMAL) AddressNumber,
		CAST(SXXRVT AS DECIMAL) ItemNumber
	FROM [SCDATA].FQ67101
    INNER JOIN [SCDATA].F4013
        ON WA$9AN8=SXXRVF  
        AND SXEDF1 = 'S' AND SXXRTC = 'IR'  
    WHERE	
    ((AddressNumber IS NULL OR SXXRVF = AddressNumber) AND WA$9INID = InstallationID)
	OR (AddressNumber IS NULL AND SXXRVF = DefCustomer);
END;

  /

-- #desc						Returns the nodes  and languages of a catalog
-- #bl_class					Premier.Inventory.GetCatalogXMLNodesCommand.cs
-- #db_dependencies				INV_GetCatalogNodeListFnc, INV_GetCatalogDetailLang
-- #db_references				N/A

-- #param CatalogID				Catalog Id

CREATE OR REPLACE Procedure [SCLIBRARY].INV_ExcGetCatXMLNodeList
(
	 CatalogID		  NVARCHAR2,
     ResultData1 OUT  GLOBALPKG.refcursor,
     ResultData2 OUT  GLOBALPKG.refcursor
)
AS 
BEGIN
	[SCLIBRARY].INV_GetCatalogNodeListFnc(CatalogID);
    
    OPEN ResultData1 FOR
    SELECT     
        UniqueKeyID,
		ParentKeyID,
		IncludeInSearch,
		Description,
		EffectiveModeFlag,
		EffectiveFromDate,
		EffectiveThruDate,
		SequenceNumber,
		ImageName,
		TemplateID              
    FROM [SCLIBRARY].INV_GETCATALOGNODELISTFNC_A   
    ORDER BY ParentKeyID, SequenceNumber;
    	
	[SCLIBRARY].INV_GetCatalogDetailLang(CatalogID, NULL, '*', ResultData2);				 
END;

  /

-- #desc							Return configured product component options
-- #bl_class						Premier.Inventory.ConfiguredProductComponentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A			

-- #param ProductNumber				Long Product Number
-- #param StoreId					Store Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetConfigProdSegments
(
	ProductNumber	NCHAR,
	StoreId		    NCHAR,
	ResultData1	OUT GLOBALPKG.refcursor
)
AS
	MCU NCHAR(12);
	ShortProductNumber NUMBER;
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
	BEGIN
	SELECT IMITM INTO ShortProductNumber FROM [SCDATA].F4101 WHERE IMLITM = ProductNumber;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			ShortProductNumber := 0;
	END;
	
	BEGIN
		SELECT A.BPMCU INTO MCU
		FROM
			[SCDATA].FQ670005 A			/*Branch Plant Override by Item and Installation ID*/
		INNER JOIN [SCDATA].FQ679910 B	/*BranchPlant by Installation*/
			ON B.BI$9INID = A.BP$9INID
			AND B.BIMCU = A.BPMCU
		WHERE
			A.BP$9INID = StoreId AND
			A.BPITM = ShortProductNumber;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			MCU := NULL;
	END;

	IF (MCU IS NULL)
	THEN
		BEGIN		
			SELECT KWMCU INTO MCU FROM [SCDATA].F3291 WHERE KWKIT = ShortProductNumber AND ROWNUM = 1;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			MCU := ' ';		 			
		END;
	END IF;

	Open ResultData1 FOR
		SELECT  KWKIT AS ShortProductNumber,
				KWPEL AS SegmentNumber, 
				MIN(KWDSC1) AS SegmentDescription,
				KWSY AS ProductCode, 
				KWRT AS UserDefinedCode, 
				DRKY AS UserDefinedKey, 
				DRDL01 AS SegmentValueDescription,
				MIN(KWDTAS) AS SegmentSequence
		FROM 
			(SELECT 
				DISTINCT KYITM /*Retrieve assembly product numbers*/
				FROM 
					[SCDATA].F3293 
				WHERE 
					KYITM <> KYKIT AND 
					KYITM <> 0 AND
					((CurrentJulianDate BETWEEN KYEFFF AND KYEFFT) OR (KYEFFF = 0 AND KYEFFT = 0 AND KYAO IN ('I','A','O'))) /*Validate if rules are not expired*/
				CONNECT BY
				PRIOR KYITM = KYKIT AND
					KYITM <> KYKIT AND
					KYITM <> 0 AND
					((CurrentJulianDate BETWEEN KYEFFF AND KYEFFT) OR (KYEFFF = 0 AND KYEFFT = 0 AND KYAO IN ('I','A','O'))) /*Validate if rules are not expired*/
				START WITH KYKIT = ShortProductNumber
			UNION ALL
			SELECT ShortProductNumber
			FROM DUAL)
		INNER JOIN [SCDATA].F3291 
			ON KYITM = KWKIT
		LEFT OUTER JOIN [SCCTL].F0005 
			ON DRRT = KWRT AND DRSY = KWSY
		WHERE 
		(KWMCU = MCU OR KWMCU = ' ') 
		AND KWATRQ <> 'C'
		GROUP BY KWKIT, KWPEL, KWSY, KWRT, DRKY, DRDL01
		ORDER BY KWPEL;
END;

  /

-- #desc				
-- #bl_class						Premier.Inventory.CatalogNSMItemUpdateCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A		


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetItemXMLInfo
(
	InstallationID	NCHAR,
	ShortItemNumber	NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)

AS
	RECORDFOUND INT := 0;
	ItemWebContentINID NCHAR(3) := InstallationID;
BEGIN
 
  /* CHECK IF ITEM HAS CONTENT */
  SELECT COUNT(1)
  INTO RECORDFOUND
  FROM [SCDATA].FQ67410
  WHERE CHITM = ShortItemNumber
	    AND CH$9INID = InstallationID
	    AND CH$9DS = 0;
  
  IF (RECORDFOUND = 0)
  THEN
	ItemWebContentINID := '***';
  END IF;
 
  OPEN ResultData1 FOR  
  SELECT   
    A.IMITM ItemNumber,
      NVL(CONTENT.CHDSC1, A.IMDSC1) AS description1, /* Description 1 */
      NVL(CONTENT.CHDSC2, A.IMDSC2) AS description2, /* Description 2 */
      NVL(CONTENT.CHDSC3, ' ') AS description3, /* Description 3 */
      NVL(SCLIBRARY.INV_GetItemBranchPlantStrFnc( InstallationID ,A.IMITM), ' ') AS branchPlant,
      NVL(SCLIBRARY.INV_GetItemCrossRefStrFnc(A.IMITM,' '), ' ') AS crossReference,
      A.IMUOM1 primaryUnitMeasure,
	  A.IMUOM4 pricingUnitMeasure,
	  A.IMUOM6 shippingUnitMeasure,	  
	  A.IMLITM longItemNumber,
	  A.IMAITM auxiliaryItemNumber, 							
	  A.IMSRTX AS Content,
		A.IMSTKT  StockingType,
		B.LFIVI   InventoryFlag,
		CASE 
			WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
			WHEN A.IMMIC = '1' AND TRIM(A.IMTMPL) IS NOT NULL THEN N'M'
			WHEN (A.IMSTKT <> N'N' AND (B.LFIVI = N'Y' OR B.LFIVI = N'D')) THEN N'S'
			ELSE N'N'
		END AS ScType,
		A.IMTMPL AS Template
	FROM
		[SCDATA].F4101 A
	INNER JOIN [SCDATA].F40205 B   /*Line Type Control Table*/
		ON B.LFLNTY = A.IMLNTY
	LEFT OUTER JOIN [SCDATA].FQ67410  CONTENT
		ON  CONTENT.CHITM = A.IMITM  
		AND CONTENT.CH$9INID = ItemWebContentINID
		AND CONTENT.CH$9DS = 0 
	WHERE A.IMITM = ShortItemNumber;
  /* END region item data */
  
 /* Region LANGS */
 OPEN ResultData2 FOR
 	SELECT  ITMLANG.CLITM ItemId,ITMLANG.CLLNGP LangId,NVL(ITMLANG.CLDSC1,'') Description1,NVL(ITMLANG.CLDSC2,'') Description2,NVL(ITMLANG.CLDSC3,'') Description3
	FROM	[SCDATA].FQ67410L ITMLANG
	WHERE  ITMLANG.CLITM = ShortItemNumber
	   AND ITMLANG.CL$9INID = ItemWebContentINID /* INSTALLATION */
	   AND ITMLANG.CL$9DS = 0;	   
END;
  /

-- #desc				
-- #bl_class						Premier.Inventory.CatalogNSMMassiveItemsUpdateCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

--	#param InstallationID			Installation ID
--	#param ShortItemNumbersXML		XML of Short Item Numbers to be published, XML Template : <items><item>60020</item></items>


CREATE OR REPLACE  PROCEDURE   [SCLIBRARY].INV_ExcGetItemXMLList
(
  InstallationID		NCHAR,
  ShortItemNumbersXML	XMLType,
  ResultData1 OUT  GLOBALPKG.refcursor,
  ResultData2 OUT  GLOBALPKG.refcursor
)

AS
	ItemWebContentINID NCHAR(3) := InstallationID;
BEGIN
 
	/* CHECK IF ITEM HAS CONTENT */
	INSERT INTO [SCLIBRARY].INV_EXCGETITEMXMLLIST_A(ShortItemNumber, TBLInstallationID)
	SELECT 
		X.ShortItemNumber,
		NVL(B.CH$9INID, '***') AS TBLInstallationID
	FROM XMLTABLE ('/items/item' 
		PASSING ShortItemNumbersXML
		COLUMNS ShortItemNumber NUMBER PATH 'text()') X
	LEFT OUTER JOIN [SCDATA].FQ67410 B
		ON B.CHITM = X.ShortItemNumber
	    AND B.CH$9INID = InstallationID
	    AND B.CH$9DS = 0;
  
	OPEN ResultData1 FOR  
	SELECT   
		A.IMITM ItemNumber,
		NVL(CONTENT.CHDSC1, A.IMDSC1) AS Description1, /* Description 1 */
		NVL(CONTENT.CHDSC2, A.IMDSC2) AS Description2, /* Description 2 */
		NVL(CONTENT.CHDSC3, ' ') AS Description3, /* Description 3 */
		NVL(SCLIBRARY.INV_GetItemBranchPlantStrFnc( InstallationID, A.IMITM), ' ') AS BranchPlant,
		NVL(SCLIBRARY.INV_GetItemCrossRefStrFnc(A.IMITM,' '), ' ') AS CrossReference,
		A.IMUOM1 PrimaryUnitMeasure,
		A.IMUOM4 PricingUnitMeasure,
		A.IMUOM6 ShippingUnitMeasure,	  
		A.IMLITM LongItemNumber,
		A.IMAITM AuxiliaryItemNumber, 							
		A.IMSRTX AS Content,
		A.IMSTKT  StockingType,
		B.LFIVI   InventoryFlag,
		CASE 
			WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
			WHEN A.IMMIC = '1' AND A.IMTMPL <> N' ' THEN N'M'
			WHEN (A.IMSTKT <> N'N' AND (B.LFIVI = N'Y' OR B.LFIVI = N'D')) THEN N'S'
			ELSE N'N'
		END AS ScType,
		A.IMTMPL AS Template
	FROM
		[SCDATA].F4101 A
		INNER JOIN [SCLIBRARY].INV_EXCGETITEMXMLLIST_A C
			ON C.ShortItemNumber = A.IMITM
		INNER JOIN [SCDATA].F40205 B   /*Line Type Control Table*/
			ON B.LFLNTY = A.IMLNTY
		LEFT OUTER JOIN [SCDATA].FQ67410  CONTENT
			ON  CONTENT.CHITM = C.ShortItemNumber
			AND CONTENT.CH$9INID = C.TBLInstallationID
			AND CONTENT.CH$9DS = 0;
  /* END region item data */
 
 /* Region LANGS */
 OPEN ResultData2 FOR
 	SELECT  ITMLANG.CLITM ItemId,ITMLANG.CLLNGP LangId,NVL(ITMLANG.CLDSC1,'') Description1,NVL(ITMLANG.CLDSC2,'') Description2,NVL(ITMLANG.CLDSC3,'') Description3,
			NVL(SCLIBRARY.INV_GetItemCrossRefStrFnc(ITMLANG.CLITM,' '), ' ') AS CrossReference,
			D.IMLITM AS LongItemNumber, 
			D.IMAITM AS AuxiliaryItemNumber 
	FROM	[SCDATA].FQ67410L ITMLANG
	INNER JOIN [SCLIBRARY].INV_EXCGETITEMXMLLIST_A C
		ON C.ShortItemNumber = ITMLANG.CLITM 
		AND C.TBLInstallationID = ITMLANG.CL$9INID /* INSTALLATION */
	INNER JOIN [SCDATA].F4101 D
		ON D.IMITM = ITMLANG.CLITM 
	WHERE ITMLANG.CL$9DS = 0;
END;
  /

-- #desc							Check the Item back order status
-- #bl_class						Premier.Inventory.ItemBackOrderStatus.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AddressNumber				Address Number
-- #param ShortItemNumber			Short Item Number
-- #param BranchPlant				Branch Plant

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcItemBackOrderStatus
(
    Company			    IN NVARCHAR2,
	AddressNumber		IN DECIMAL,
	ShortItemNumber	    IN DECIMAL,
	BranchPlant		    IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
    AllowBackOrder NVARCHAR2(1);
    TMPVAR      NVARCHAR2(2);
BEGIN
    BEGIN
        SELECT IMBACK INTO AllowBackOrder FROM [SCDATA].F4101 WHERE IMITM = ShortItemNumber;
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        AllowBackOrder := NULL;
    END;
	IF (AllowBackOrder = 'Y')
	    THEN
	        BEGIN
	            SELECT IBBACK INTO AllowBackOrder FROM [SCDATA].F4102 WHERE IBITM = ShortItemNumber AND RTRIM(IBMCU) = RTRIM(BranchPlant);
	            EXCEPTION WHEN NO_DATA_FOUND THEN 
	            AllowBackOrder := NULL;
	        END;
		    IF (AllowBackOrder = 'Y')
		        THEN
		            TMPVAR := [SCLIBRARY].CST_GetCustomerInfoFnc(Company, AddressNumber);
		            BEGIN
		                SELECT AIBACK INTO AllowBackOrder FROM [SCLIBRARY].CST_GETCUSTOMERINFOFNC_A;
		                EXCEPTION WHEN NO_DATA_FOUND THEN 
		                AllowBackOrder := NULL;
		            END;
			        IF (AllowBackOrder = 'Y')
			            THEN
                            BEGIN
                                SELECT CIBACK INTO AllowBackOrder FROM [SCDATA].F41001 WHERE RTRIM(CIMCU) = RTRIM(BranchPlant);
                                EXCEPTION WHEN NO_DATA_FOUND THEN 
                                AllowBackOrder := NULL;
                            END;
	                        IF (AllowBackOrder = 'Y')
			                    THEN 
			                        OPEN ResultData1 FOR
				                    SELECT 'Y' AS AllowBackOrder FROM SYS.DUAL;
									RETURN;
			                END IF;
                    END IF;
			END IF;
	END IF;
	OPEN ResultData1 FOR
	SELECT 'N' AS AllowBackOrder FROM SYS.DUAL;
END;	
  /

-- #desc					Return if the Item is or not  Category Code Validation Restricted
-- #bl_class				Premier.Inventory.ItemCategoryCodeValidationCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param InstallationID	Installation ID
-- #param ShortItemNumber   Item Number
-- #param BranchPlant		BranchPlant
-- #param IsValid			The Item IsValid or Not 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcItemCatCodeValidation
(
	InstallationID  IN NCHAR,
	BranchPlant		IN NCHAR,
	ShortItemNumber	IN NUMBER,
	IsValid			OUT INT
)
AS	
    STRSQL              VARCHAR2(1000);	
    STOCKINGTYPE		NCHAR(1);
	CC_RESTRIC_INID     NCHAR(3) := InstallationID;
	strConstantValue    VARCHAR2(4);
	strCategoryValue    NCHAR(15);
	InventoryFlag		NVARCHAR2(1);
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_EXCITEMCATCODEVALIDAT_A';	
	/*Read Category Code Restriction Constant*/
	[SCLIBRARY].CMM_GetConstantValue( 'CC_RESTRIC', CC_RESTRIC_INID, strConstantValue);
	
	IF(TRIM(strConstantValue) IS NULL) THEN
        IsValid := 1; /*Item is valid*/
	ELSE 		
		BEGIN
			SELECT IMSTKT INTO StockingType 
			FROM     [SCDATA].F4101 
			WHERE IMITM = ShortItemNumber;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
			StockingType := ' ';
		END;
		
		IF (StockingType <> 'N') THEN
			SELECT LFIVI INTO InventoryFlag	
			FROM [SCDATA].F4101 A	
			INNER JOIN [SCDATA].F40205 B 
				ON A.IMLNTY = B.LFLNTY 
			WHERE A.IMITM = ShortItemNumber;
		END IF;

	    IF(StockingType = 'N' OR (InventoryFlag <> 'Y' AND InventoryFlag <> 'D')) THEN
            STRSQL := ' INSERT INTO [SCLIBRARY].INV_EXCITEMCATCODEVALIDAT_A SELECT IM' || strConstantValue
            || ' FROM [SCDATA].F4101 WHERE IMITM = :ShortItemNumber AND (1 = 1 OR :BranchPlant IS NULL) ';

        ELSE 
			STRSQL := ' INSERT INTO [SCLIBRARY].INV_EXCITEMCATCODEVALIDAT_A SELECT IB' || strConstantValue
			 || ' FROM [SCDATA].F4102 
					WHERE IBITM = :ShortItemNumber 
						AND IBMCU = :BranchPlant ';		
		END IF;
		
		EXECUTE IMMEDIATE STRSQL USING ShortItemNumber, BranchPlant;
			
		BEGIN
		    SELECT CATEGORY INTO strCategoryValue 
		    FROM [SCLIBRARY].INV_EXCITEMCATCODEVALIDAT_A 
		    WHERE  ROWNUM < 2;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		    strCategoryValue := NULL;
		END;
		
		SELECT COUNT(1) INTO IsValid 
		FROM 
			[SCDATA].FQ67008 
		WHERE
			DR$9INID = CC_RESTRIC_INID 
			AND DR$9CNST = 'CC_RESTRIC'
			AND DRKY = strCategoryValue
			AND ROWNUM = 1;
	END IF;
END;
  /

-- #desc					Return if the Item is or not StockingType restricted
-- #bl_class				Premier.Inventory.ItemStockingTypeValidationCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param InstallationID	Installation ID
-- #param ShortItemNumber   Item Number
-- #param BranchPlant		BranchPlant
-- #param IsValid			The Item IsValid or Not 
-- #param IsObsolete		The Item IsObsolete or Not
-- #param IsInBranchPlant	The Item IsInBranchPlant or Not

-- Note /*	1= True    0 = False	*/

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcItemStockTypeValidation
(
	InstallationID  IN  NCHAR,
	BranchPlant		IN  NCHAR,
	ShortItemNumber	IN  NUMBER,
	IsValid			OUT INT,
	IsObsolete	    OUT INT,
	IsInBranchPlant	OUT INT,
	StockingType	OUT	NCHAR
)
AS   
	-- Gets the ST_RESTRIC Document Restrictions Parameters
	RestrictConst		NVARCHAR2(1);
	ST_RESTRIC_INID		NCHAR(3) := InstallationID;
	InventoryFlag		NCHAR(1);
BEGIN
	BEGIN
		SELECT IMSTKT INTO StockingType 
	    FROM     [SCDATA].F4101 
		WHERE IMITM = ShortItemNumber;
	EXCEPTION WHEN NO_DATA_FOUND THEN 
		StockingType := ' ';
	END;

	BEGIN
		SELECT LFIVI INTO InventoryFlag
		FROM [SCDATA].F4101 A
		INNER JOIN [SCDATA].F40205 B
		ON A.IMLNTY = B.LFLNTY 
		WHERE A.IMITM = ShortItemNumber;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		InventoryFlag := ' ';
	END;
	
	IF(StockingType <> 'N' AND (InventoryFlag='Y' OR InventoryFlag='D')) THEN
		BEGIN
			SELECT IBSTKT INTO StockingType 
			FROM [SCDATA].F4102 
			WHERE IBITM = ShortItemNumber AND IBMCU = BranchPlant;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
			StockingType := NULL;
		END;
	END IF; 
	
	IF (StockingType IS NULL)	THEN
		IsInBranchPlant := 0;	--FALSE
		IsValid := 0;			--FALSE
		IsObsolete := 1;		--Is Obsolete
	ELSE 
		IF((StockingType <> 'O')) THEN
			IsInBranchPlant := 1;	--TRUE
			IsObsolete := 0;	-- Is no Obsolete
			[SCLIBRARY].CMM_GetConstantValue('ST_RESTRIC', ST_RESTRIC_INID, RestrictConst);
			IF(RestrictConst = '1')THEN
				SELECT COUNT(1) INTO IsValid FROM  [SCDATA].FQ67008 WHERE DR$9INID = ST_RESTRIC_INID AND DR$9CNST = 'ST_RESTRIC' AND DRKY = StockingType AND ROWNUM = 1;
			ELSE
				IsValid := 1;
			END IF;
		ELSE 
			IsInBranchPlant := 1;	--TRUE
			IsValid := 0;	--FALSE
			IsObsolete := 1; --TRUE
		END IF;
	END IF;
END;
  /

-- #desc						Move items from a Branch Plant to another
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param BranchPlantTo  	    Branch Plant.
-- #param ShortProductNumbersXML	XML with Short Product Numbers.
-- #param UserID				User ID
-- #param ProgramID				Program ID
-- #param WorkStationID			WorkStation ID
-- #param DateUpdated			Date Updated 
-- #param TimeLastUpdated		Time Last Updated


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcMoveItemBranchOverr
(
	StoreId					IN NCHAR,
	BranchPlantTo			IN NCHAR,
	ShortProductNumbersXML	    IN XMLType DEFAULT NULL,
	UserID					IN NCHAR,
	ProgramId				IN NCHAR,
	WorkStationID			IN NCHAR,
	DateUpdated				IN NUMBER,
	TimeLastUpdated			IN NUMBER
)
AS
	
BEGIN

	IF (ShortProductNumbersXML IS NOT NULL) THEN	
		UPDATE  [SCDATA].FQ670005
		SET 
			BPMCU = BranchPlantTo, 
			BPUSER = UserID, 
			BPPID = ProgramId, 
			BPJOBN = WorkStationID, 
			BPUPMJ = DateUpdated, 
			BPUPMT = TimeLastUpdated 
		WHERE 
			BP$9INID = StoreId AND BPITM IN (SELECT X.ShortProductNumber FROM XMLTABLE ('/items/item' 
				PASSING ShortProductNumbersXML
				COLUMNS ShortProductNumber NUMBER PATH 'text()') X);
	END IF; 	
END;
  /
-- #desc								Update Line Of Business Sequence
-- #bl_class							Premier.Inventory.CatalogList.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param LineOfBusinessIDs 			Line Of Business IDs

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcUpdCatalogSequence
(
	CatalogIDs IN NVARCHAR2
)
AS
	Pos INT;
	NextString NVARCHAR2(6);
	SequenceNumb DECIMAL := 0;
	CatalogIDsTMP NVARCHAR2(8000) := CatalogIDs;

BEGIN
	IF (TRIM(CatalogIDsTMP) IS NOT NULL) THEN
		BEGIN
			Pos := INSTR(CatalogIDsTMP, '|@');
			WHILE (Pos <> 0)
			LOOP
				BEGIN
					NextString := SUBSTR(CatalogIDsTMP, 1, Pos - 1);
					CatalogIDsTMP := SUBSTR(CatalogIDsTMP,Pos + 2,LENGTH(CatalogIDsTMP));
					Pos := INSTR(CatalogIDsTMP, '|@');
					SequenceNumb := SequenceNumb + 1;

					UPDATE
						[SCDATA].FQ67412
					SET
						CASEQ   = SequenceNumb
					WHERE 
						TRIM(CA$9CLGID) = TRIM(NextString);

				END; -- BEGIN WHILE  
			END LOOP;		
		
		END; --BEGIN PRINCIPAL IF
	END IF;
END;
  /
-- #desc				    Update Content Status.
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID		
-- #param ItemNumber		Item Number.

/*Item Status: Published: 0 / Draft: 1 */

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcUpdItemWebContentStatus 
(
    InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL
)
AS
BEGIN
	/*Delete all new status record when changing status
	Avoid any primary key violation
	Delete main header table*/	
	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = ItemNumber AND
    CH$9INID = InstallationID AND
	CH$9DS = 0;
	/*Delete main header table language*/
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 0;
	/*Delete detail table*/
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = ItemNumber AND
    CD$9INID = InstallationID AND
	CD$9DS = 0;
	/*Delete detail table language*/
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 0;
	    
	/*Copy main header table*/
	INSERT INTO [SCDATA].FQ67410
	(
	    CHITM
       ,CH$9INID
       ,CH$9DS
       ,CHDSC1
       ,CHDSC2
       ,CHDSC3
       ,CHPGTX
       ,CHDL01
       ,CHDL02
       ,CHDL03
       ,CHDL04
       ,CHDL05
       ,CHDL06
       ,CHDL07
       ,CHDL08
       ,CHDL09
       ,CHDL10
       ,CHCOMMENTS
       ,CH$9PRI
       ,CH$9HTML
       ,CHPTURL
       ,CHURCD
       ,CHURDT
       ,CHURAT
       ,CHURAB
       ,CHURRF
       ,CHUSER
       ,CHPID
       ,CHJOBN
       ,CHUPMJ
       ,CHTDAY
	)
	(
	    SELECT 
		   CHITM
           ,CH$9INID
           ,0
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CHPGTX
           ,CHDL01
           ,CHDL02
           ,CHDL03
           ,CHDL04
           ,CHDL05
           ,CHDL06
           ,CHDL07
           ,CHDL08
           ,CHDL09
           ,CHDL10
           ,CHCOMMENTS
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,[SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE)
           ,CHTDAY
	    FROM [SCDATA].FQ67410
	    WHERE  
		    CHITM = ItemNumber AND
            CH$9INID = InstallationID
    );
		
	/*Copy header Lang Table	*/
	INSERT INTO [SCDATA].FQ67410L
	(
	    CLITM
        ,CL$9INID
        ,CL$9DS
        ,CLLNGP
        ,CLDSC1
        ,CLDSC2
        ,CLDSC3
        ,CLPGTX
        ,CLDL01
        ,CLDL02
        ,CLDL03
        ,CLDL04
        ,CLDL05
        ,CLDL06
        ,CLDL07
        ,CLDL08
        ,CLDL09
        ,CLDL10
        ,CLCOMMENTS
        ,CL$9HTML
        ,CLURCD
        ,CLURDT
        ,CLURAT
        ,CLURAB
        ,CLURRF
        ,CLUSER
        ,CLPID
        ,CLJOBN
        ,CLUPMJ
        ,CLTDAY
	)
	(
	    SELECT 
		   CLITM
          ,CL$9INID
          ,0
          ,CLLNGP
          ,CLDSC1
          ,CLDSC2
          ,CLDSC3
          ,CLPGTX
          ,CLDL01
          ,CLDL02
          ,CLDL03
          ,CLDL04
          ,CLDL05
          ,CLDL06
          ,CLDL07
          ,CLDL08
          ,CLDL09
          ,CLDL10
          ,CLCOMMENTS
          ,CL$9HTML  
          ,CLURCD
          ,CLURDT
          ,CLURAT
          ,CLURAB
          ,CLURRF
          ,CLUSER
          ,CLPID
          ,CLJOBN
          ,[SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE)
          ,CLTDAY
	    FROM [SCDATA].FQ67410L
	    WHERE  
		    CLITM = ItemNumber AND
            CL$9INID = InstallationID
    );
	
	/*Copy Detail Table*/
	INSERT INTO [SCDATA].FQ67411
	(
	    CDITM
        ,CDUKID
        ,CD$9INID
        ,CD$9DS
        ,CDSEQ
        ,CD$9PTL
        ,CD$9HTML
        ,CDASAI
        ,CDEFFF
        ,CDEFFT
        ,CDURCD
        ,CDURDT
        ,CDURAT
        ,CDURAB
        ,CDURRF
        ,CDUSER
        ,CDPID
        ,CDJOBN
        ,CDUPMJ
        ,CDTDAY
	)
	(
	    SELECT 
		    CDITM
		    ,CDUKID
		    ,CD$9INID
		    ,0
		    ,CDSEQ
		    ,CD$9PTL
		    ,CD$9HTML --Todo Put the field HTML Content
		    ,CDASAI
		    ,CDEFFF
		    ,CDEFFT
		    ,CDURCD
		    ,CDURDT
		    ,CDURAT
		    ,CDURAB
		    ,CDURRF
		    ,CDUSER
		    ,CDPID
		    ,CDJOBN
		    ,[SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE)
		    ,CDTDAY
	    FROM 
	        [SCDATA].FQ67411
	    WHERE  
		    CDITM = ItemNumber AND
            CD$9INID = InstallationID 
    );
	
	/*Copy Lang Detail Table*/
	INSERT INTO [SCDATA].FQ67411L
	(
	    CLITM
        ,CLUKID
        ,CL$9INID
        ,CL$9DS
        ,CLLNGP
        ,CL$9PTL
        ,CL$9HTML
        ,CLURCD
        ,CLURDT
        ,CLURAT
        ,CLURAB
        ,CLURRF
        ,CLUSER
        ,CLPID
        ,CLJOBN
        ,CLUPMJ
        ,CLTDAY
	)
	(
	    SELECT 
	       CLITM
          ,CLUKID
          ,CL$9INID
          ,0
          ,CLLNGP
          ,CL$9PTL
          ,CL$9HTML
          ,CLURCD
          ,CLURDT
          ,CLURAT
          ,CLURAB
          ,CLURRF
          ,CLUSER
          ,CLPID
          ,CLJOBN
          ,[SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE)
          ,CLTDAY
	    FROM 
	        [SCDATA].FQ67411L
	    WHERE  
		    CLITM = ItemNumber AND
            CL$9INID = InstallationID 
	);
	
	/*Delete design record when changing to live
	Delete main header table*/	
	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = ItemNumber AND
    CH$9INID = InstallationID AND
	CH$9DS = 1;
	/*Delete main header table language*/
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 1;
	/*Delete detail table*/
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = ItemNumber AND
    CD$9INID = InstallationID AND
	CD$9DS = 1;
	/*Delete detail table language*/
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 1;

END;
  /

-- #desc						Get Items Related to Branch Plants
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Stored ID
-- #param BranchPlant    		Branch Plant.
-- #param FilterTerm			Criteria to search by Item Number or Description
-- #param PageIndex				Page number
-- #param PageSize				Page size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetBranchPlantItemList
(
	StoreId			IN NCHAR,
	BranchPlant		IN NCHAR,
	FilterTerm		IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
	ResultData1     OUT GLOBALPKG.refcursor
)
AS
	/* Dynamic */
	SQL_DYNAMIC					VARCHAR2(4000);
	WHERE_DYNAMIC				NVARCHAR2(1000) := ' ';
	ShortItemNumber				NUMBER := NULL;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    RowEnd INT := (PageIndex * PageSize);

	BEGIN

		IF (BranchPlant <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND BP.MCMCU = :BranchPlant ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :BranchPlant = ''*'') ';
		END IF;

		IF (FilterTerm <> '*') THEN
			/* ISNUMERIC validation */
			IF (TRIM(FilterTerm) IS NOT NULL AND LENGTH(TRIM(TRANSLATE(FilterTerm, '0123456789', ' '))) IS NULL) THEN
				ShortItemNumber := TO_NUMBER(FilterTerm);
			END IF;
			WHERE_DYNAMIC := WHERE_DYNAMIC || 
			N' AND ((IM.IMITM = :ShortItemNumber) 
				OR	( IM.IMLITM LIKE ''%'' || :FilterTerm || ''%'')
				OR	( IM.IMAITM LIKE ''%'' || :FilterTerm || ''%'')
				OR  ( UPPER(IM.IMDSC1) LIKE ''%'' || :FilterTerm || ''%'')
				OR  ( UPPER(IM.IMDSC2) LIKE ''%'' || :FilterTerm || ''%'')
				OR  ( UPPER(IM.IMSRTX) LIKE ''%'' || :FilterTerm || ''%'')) ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || 
			N' AND ((1 = 1 OR :ShortItemNumber IS NULL)
				OR	(1 = 1 OR :FilterTerm = ''*'')
				OR	(1 = 1 OR :FilterTerm = ''*'')
				OR  (1 = 1 OR :FilterTerm = ''*'')
				OR  (1 = 1 OR :FilterTerm = ''*'')
				OR  (1 = 1 OR :FilterTerm = ''*'')) ';
		END IF;

		SQL_DYNAMIC := 
		N'WITH PAGING AS 
		(
		   SELECT
				IBO.BP$9INID AS StoreId,
				IBO.BPITM AS ShortItemNumber,
				IM.IMLITM AS LongItemNumber,
				IM.IMAITM AS AuxItemNumber,
				IM.IMDSC1 AS ItemDescription1,
				IM.IMDSC2 AS ItemDescription2,
				BP.MCMCU AS BranchPlant,
				NVL(BP.MCDL01,'' '') AS BranchPlantDescription,
				IBO.BPUPMJ AS DateUpdated, 
				ROW_NUMBER() OVER (ORDER BY IM.IMITM ASC) AS RNUM
			FROM [SCDATA].FQ670005 IBO
				INNER JOIN [SCDATA].F0006 BP
					ON IBO.BPMCU = BP.MCMCU
				INNER JOIN [SCDATA].F4101 IM
					ON IBO.BPITM = IM.IMITM 
			WHERE IBO.BP$9INID = :StoreId
				' || WHERE_DYNAMIC || '
			)
			SELECT PAGING.StoreId, PAGING.ShortItemNumber, PAGING.LongItemNumber, PAGING.AuxItemNumber, PAGING.ItemDescription1,
				PAGING.ItemDescription2, PAGING.BranchPlant, PAGING.BranchPlantDescription, PAGING.DateUpdated, 
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount 
			FROM PAGING
		WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';

		OPEN ResultData1 FOR SQL_DYNAMIC USING StoreId, BranchPlant, ShortItemNumber, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm,
											PageIndex, PageSize, RowStart, RowEnd;
	END;


  /

-- #desc				        Get Catalog.
-- #bl_class			        Premier.Inventory.Catalog.cs
-- #db_dependencies		        dbo.INV_GetCatalogLang
--						        dbo.INV_GetCatalogDetail
-- #db_references		        N/A

-- #param CatalogId			    Catalog Id.
-- #param InstallationID    	InstallationID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalog  
(
	InstallationID  IN NVARCHAR2,
	CatalogId		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor,
	ResultData3 OUT GLOBALPKG.refcursor,
	ResultData4 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT     CA$9CLGID AS CatalogId,
                   CA$9EFM   AS EffectiveModeFlag,
                   CAEFFF	 AS EffectiveFromDate,
                   CAEFFT	 AS EffectiveThruDate,
                   CADSC1	 AS Description,
                   CASEQ     AS SequenceNumber,
                   CA$9INID	 AS InstallationID,
				   CAMCU	 AS MCU,
				   CA$9CCFU  AS MCUBehavior,
				   CAUSER    AS UserID,
				   CAPID     AS ProgramID,
                   CAUPMJ    AS DateUpdated,
                   CAUPMT    AS TimeLastUpdated,
                   CAJOBN    AS WorkStationId             
        FROM 
            [SCDATA].FQ67412
        WHERE
            (TRIM(CA$9CLGID) =  TRIM(CatalogID)) AND
			(TRIM(InstallationID) = '*' OR CA$9INID  =  InstallationID);
    
    [SCLIBRARY].INV_GetCatalogLang(CatalogId,'*',ResultData2);
    [SCLIBRARY].INV_GetCatalogDetail(CatalogId,null,ResultData3,ResultData4);
END;
  /

-- #desc						Get Catalog Detail Info.
-- #bl_class					Premier.Inventory.CatalogDetailInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID    		UniqueKeyID (Node ID)
-- #param LangPref				Language Preference


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogDetailInfo
(
    CatalogId       IN NVARCHAR2,
	UniqueKeyID		IN DECIMAL,
	LangPref	    IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)	
AS
BEGIN
	OPEN ResultData1 FOR
        SELECT  
			A.CD$9CLGID		AS CatalogId,
			A.CDUKID		AS UniqueKeyID,
			A.CD$9PKID		AS ParentKeyID,
			NVL(B.CDDL01, A.CDDL01 ) AS Description,
			' '				AS NodePath,
			A.CD$9IIS		AS IncludeInSearch,
			A.CDDTAI		AS DataItem,
			A.CDKY			AS UserDefinedCode,
			A.CDIMGURL		AS ImageURL,
			CDTMPI			AS TemplateID,
			' '			    AS InstallationID,
			' '				AS InstallationDesc
        FROM [SCDATA].FQ67413 A
		LEFT JOIN [SCDATA].FQ67413L B
			ON B.CD$9CLGID = A.CD$9CLGID
			AND A.CDUKID = B.CDUKID
			AND TRIM(B.CDLNGP) = TRIM(LangPref)
		WHERE TRIM(A.CD$9CLGID) = TRIM(CatalogID)
		AND A.CDUKID = UniqueKeyID;
END;			        
  /

-- #desc						Get Catalog Detail Detail List
-- #bl_class					Premier.Inventory.CatalogDetailList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param CatalogID				Catalog ID	
-- #param ParentKeyID			Catalog Detail Node ID	
-- #param RetrieveAllTree		0 = Specific , 1 = ALL
-- #param EffectiveOnly			Effective Only 
-- #param LangPref				Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogDetailList
(
	CatalogID           IN NVARCHAR2,
	ParentKeyID			IN DECIMAL,
	RetrieveAllTree		IN DECIMAL,
	EffectiveOnly	    IN DECIMAL,
	LangPref		    IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)	
AS
    CurrentJulianDate INT;
BEGIN
    CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	OPEN ResultData1 FOR					 
        SELECT
			A.CDUKID		AS UniqueKeyID,
			A.CD$9CLGID		AS CatalogId,
			A.CD$9PKID		AS ParentKeyID,
			NVL(B.CDDL01, A.CDDL01) AS Description,
			' '				AS NodePath,
			A.CD$9IIS		AS IncludeInSearch,
			A.CDDTAI		AS DataItem,
			A.CDKY			AS UserDefinedCode,
			A.CDIMGURL		AS ImageURL,
			A.CDTMPI		AS TemplateID,
			' '				AS InstallationID,
			' '				AS InstallationDesc
		FROM [SCDATA].FQ67413 A			 
		LEFT JOIN [SCDATA].FQ67413L B
			ON B.CD$9CLGID = A.CD$9CLGID
			AND	A.CDUKID = B.CDUKID
			AND TRIM(B.CDLNGP) = TRIM(LangPref)		
		WHERE TRIM(A.CD$9CLGID)= TRIM(CatalogID)
		    AND (RetrieveAllTree > 0 OR A.CD$9PKID = ParentKeyID OR (ParentKeyID is null and (A.CD$9PKID is null OR A.CD$9PKID = 0)))
		    AND	(A.CD$9EFM = 0 OR  (EffectiveOnly = 0 OR (CurrentJulianDate >= A.CDEFFF and CurrentJulianDate <= A.CDEFFT)))
		ORDER BY CDSEQ;
END;
  /
-- #desc						Get Catalog Detail Detail List
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param CatalogID			    Catalog ID	
-- #param UniqueKeyID	        Unique Key ID	

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogDetails 
(
	CatalogId   IN NVARCHAR2,
	UniqueKeyID	IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)	
AS
BEGIN
    OPEN ResultData1 FOR					 
        SELECT     CD$9CLGID AS CatalogId,
                   CDUKID    AS UniqueKeyID,
                   CD$9PKID  AS ParentKeyID,
                   CD$9IIS   AS IncludeInSearch,
                   CDDTAI	 AS DataItem,
                   CDKY	     AS UserDefinedCode,
                   CDDL01	 AS Description,
                   CD$9EFM   AS EffectiveModeFlag,
		           CDEFFF	 AS EffectiveFromDate,
	               CDEFFT    AS EffectiveThruDate,
		           CDSEQ     AS SequenceNumber,
		           CDIMGURL	 AS	ImageName,
                   CDTMPI	 AS TemplateID
                    
        FROM [SCDATA].FQ67413
        WHERE
           (UPPER(TRIM(CD$9CLGID)) = UPPER(TRIM(CatalogID)) AND
            UniqueKeyID is null or CDUKID = UniqueKeyID);
END;			
  /

-- #desc						Get - Search Catalog Detail List by Installation
-- #bl_class					Premier.Inventory.CatalogDetailList.cs
-- #db_references				N/A		
-- #db_dependencies				INV_GetCatalogNodePathFnc

-- #param InstallationList		Installation List- optional	. For example "DV1, DV2"
-- #param FilterTerm			Filter Term to search nodes
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param TotalRowCount			Total Count of Rows


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogDetListByInst
(
	InstallationList    IN VARCHAR2,
	FilterTerm			IN NVARCHAR2,
	PageIndex		    IN DECIMAL,
    PageSize		    IN DECIMAL,    
    ResultData1			OUT   GLOBALPKG.refcursor
) AS
BEGIN    
    OPEN ResultData1 FOR					 
        SELECT UniqueKeyID, CatalogId, ParentKeyID, Description, INV_GetCatalogNodePathFnc(CatalogId, UniqueKeyID) AS NodePath, 
			   IncludeInSearch, DataItem, UserDefinedCode, ImageURL, TemplateID, InstallationID, InstallationDesc, TotalRowCount 
		FROM 
		(SELECT NODES.*, C.INDSC1 AS InstallationDesc, ROWNUM RNUM, COUNT(*) OVER () TotalRowCount  FROM       
			(SELECT
				A.CDUKID		AS UniqueKeyID,
				A.CD$9CLGID		AS CatalogId,
				A.CD$9PKID		AS ParentKeyID,
				A.CDDL01		AS Description,
				A.CD$9IIS		AS IncludeInSearch,				
				A.CDDTAI		AS DataItem,
				A.CDKY			AS UserDefinedCode,
				A.CDIMGURL		AS ImageURL,
				A.CDTMPI		AS TemplateID,				
				B.CA$9INID		AS InstallationID				
			FROM [SCDATA].FQ67413 A
			INNER JOIN [SCDATA].FQ67412 B
				ON A.CD$9CLGID = B.CA$9CLGID			
			WHERE (TRIM(InstallationList) = '*' OR InstallationList LIKE '%' || B.CA$9INID ||'%')
				AND (TRIM(FilterTerm)= '*' OR  TRIM(UPPER(A.CDDL01)) LIKE '%' || TRIM(UPPER(FilterTerm)) || '%')		    
			ORDER BY A.CDDL01) NODES
		INNER JOIN [SCDATA].FQ670001 C
			ON C.IN$9INID = InstallationID)		
		WHERE ((PageIndex = 0 OR PageSize = 0) OR (RNUM BETWEEN (PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize));
END;
  /

-- #desc						Get Catalog Info
-- #bl_class					Premier.Inventory.CatalogInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param CatalogID			    Catalog ID	
-- #param InstallationID        Installation ID	
-- #param LangPref			    Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogInfo  
(	
	InstallationID  IN NVARCHAR2,
	CatalogId		IN NVARCHAR2,
	LangPref		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR					 
        SELECT     
           A.CA$9CLGID AS CatalogId,
		   A.CADSC1    AS CatalogName,
           A.CA$9EFM   AS EffectiveModeFlag,
           A.CAEFFF    AS EffectiveFromDate,
           A.CAEFFT	 AS EffectiveThruDate,
           NVL(B.CADSC1 ,A.CADSC1 ) AS Description,
           A.CASEQ     AS SequenceNumber,
           A.CA$9INID	 AS InstallationID,
		   A.CAMCU AS MCU,
	       A.CA$9CCFU AS MCUBehavior     
        FROM 
            [SCDATA].FQ67412 A,
            [SCDATA].FQ67412L B 
        WHERE
                A.CA$9CLGID = B.CA$9CLGID(+)
			AND TRIM(B.CALNGP(+))= TRIM(LangPref)
            AND (TRIM(A.CA$9CLGID) = TRIM(CatalogID))
            AND A.CA$9INID  =  InstallationID;
END;
  /

-- #desc								Gets catalog List
-- #bl_class							Premier.Inventory.CatalogList.cs
-- #db_dependencies						N/A
-- #db_references						N/A		

-- #param CatalogID						Catalog ID
-- #param UniqueKey						Unique Key
-- #param ParentKey						Parent Key
-- #param EffectiveOnly					Retrieve only the effective catalogs for today or retrieve all catalogs
-- #param EffectiveFromDate				Effective From Date
-- #param EffectiveThruDate				Effective Thru Date
-- #param PageIndex						Paging - Current page
-- #param PageSize						Paging - Items to be shown	

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogList
(
	InstallationID			IN NVARCHAR2,
	CatalogID				IN NVARCHAR2,
	Description			    IN NVARCHAR2,
	EffectiveOnly			IN DECIMAL,
	EffectiveFromDate	    IN DECIMAL,
	EffectiveThruDate	    IN DECIMAL,
	PageIndex				IN DECIMAL,
    PageSize				IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
)	
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT  
				C.CatalogId,
				C.CatalogName,
				C.EffectiveModeFlag,
				C.EffectiveFromDate,
				C.EffectiveThruDate,
				C.Description,
				C.SequenceNumber,
				C.InstallationID,
				C.MCU,
				C.MCUBehavior,
				C.RNUM, 
				C.TotalRowCount
		FROM 
			(SELECT  
				   A.CA$9CLGID		AS CatalogId,
				   A.CADSC1			AS CatalogName,
				   A.CA$9EFM		AS EffectiveModeFlag,
				   A.CAEFFF			AS EffectiveFromDate,
				   A.CAEFFT			AS EffectiveThruDate,
				   A.CADSC1			AS Description,
				   A.CASEQ			AS SequenceNumber,
				   A.CA$9INID		AS InstallationID,
				   A.CAMCU			AS MCU,
				   A.CA$9CCFU		AS MCUBehavior,
				   ROWNUM			AS RNUM, 
				   COUNT(*) OVER () AS TotalRowCount  
			FROM  
				[SCDATA].FQ67412 A
			WHERE 
				(TRIM(InstallationID) = '*' OR A.CA$9INID = InstallationID) 
				AND (UPPER(TRIM(CatalogID))	 = '*' OR UPPER(TRIM(A.CA$9CLGID)) LIKE UPPER(TRIM( '%' || CatalogID || '%'))) 
				AND ((EffectiveFromDate = 0 AND EffectiveThruDate= 0) 
					OR (A.CAEFFF BETWEEN EffectiveFromDate AND EffectiveThruDate OR  A.CAEFFT BETWEEN EffectiveFromDate AND EffectiveThruDate) 
					OR A.CA$9EFM = 0)  
				AND (A.CA$9EFM = 0 OR (EffectiveOnly=0 OR [SCLIBRARY].CMM_GetCurrentJulianDate(SYSDATE) BETWEEN A.CAEFFF AND A.CAEFFT)) 
				AND (Description = '*' OR UPPER(TRIM(A.CADSC1)) LIKE UPPER((TRIM( '%' || Description || '%' ))))		
			ORDER BY A.CASEQ) C
		WHERE ((PageIndex = 0 OR PageSize = 0) OR (RNUM BETWEEN (PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize));

END;
  /

-- #desc								Gets Catalog Node Item List. 
-- #bl_class							Premier.Inventory.CatalogNodeItemList.cs
-- #db_dependencies						N/A
-- #db_references						N/A	

-- #param StoreId						Store Id
-- #param CatalogId						Catalog Id
-- #param CatalogDetailId				Catalog Detail Id (Node id)
-- #param CatalogMCU					Catalog MCU
-- #param SelectedProductsXML			Selected Products: used when the node is configured as a NodeItemList and the user is adding new items that haven't been saved
-- #param DeletedProductsXML			Products Removed: used when the node is configured as a NodeItemList and the user deleted items that haven't been saved
-- #param WhereCondition				Where Condition (Category code)
-- #param FilterByCategoryCodes			Filter By Category Codes (Y/N)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogNodeItemList
(
	StoreId		    IN NCHAR,
	CatalogId				IN NCHAR,
	CatalogDetailId			IN NUMBER,
	CatalogMCU				IN NCHAR,
	SelectedProductsXML		IN XMLType DEFAULT NULL,
	DeletedProductsXML			IN XMLType DEFAULT NULL,
	WhereCondition			IN NVARCHAR2,
	FilterByCategoryCodes	IN NVARCHAR2,
	
	ResultData  OUT GLOBALPKG.refcursor
)	
AS
	SQLTMP			VARCHAR(8000); ------------@SQL similar

	-- Declare the variables to store the values returned by FETCH.  
	DeletedProductsQuery		VARCHAR2(10000):='';
	WhereConditionQuery1	VARCHAR2(10000):='';
	WhereConditionQuery2	VARCHAR2(10000):='';
	SelectedProductsQuery		VARCHAR2(10000):='';

	FromCondition VARCHAR2(10000):='';	/*Created based on MCU filter setting*/

				
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCATNODEITEMLIST_A'; -- Items

	SelectedProductsQuery := ' ';
	IF (SelectedProductsXML IS NOT NULL) THEN
		--Quote Detail
		SelectedProductsQuery := ' INNER JOIN XMLTABLE (''/items/item'' 
				PASSING :SelectedProductsXML
				COLUMNS ShortItemNumber NUMBER PATH ''text()'') S
			ON S.ShortItemNumber = IM.IMITM ';
	END IF;	

	DeletedProductsQuery := ' ';
	IF (DeletedProductsXML IS NOT NULL) THEN
		--Quote Detail
		DeletedProductsQuery := ' INNER JOIN XMLTABLE (''/items/item'' 
				PASSING :DeletedProductsXML
				COLUMNS ShortItemNumber NUMBER PATH ''text()'') D
			ON D.ShortItemNumber <> A.INITM ';
	END IF;	
	
	--Insert Items by Category Code or by Node Item List
	IF FilterByCategoryCodes = 'Y' THEN
		IF (TRIM(WhereCondition) IS NOT NULL) THEN
			WhereConditionQuery1 := TRIM(WhereCondition) || ' AND (IM.IMSTKT <> ''N'' AND (C.LFIVI = ''Y'' OR C.LFIVI = ''D''))';
			WhereConditionQuery2 := TRIM(WhereCondition) || ' AND (IM.IMSTKT = ''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))';
		ELSE
			WhereConditionQuery1 := ' (IM.IMSTKT <> ''N'' AND (C.LFIVI = ''Y'' OR C.LFIVI = ''D''))';
			WhereConditionQuery2 := ' (IM.IMSTKT = ''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))';
		END IF;

		--Filter Matrix items children
		WhereConditionQuery1 := WhereConditionQuery1 || ' AND (IM.IMTMPL = '' '' OR IM.IMMIC IN (''1'', '' ''))';
		WhereConditionQuery2 := WhereConditionQuery2 || ' AND (IM.IMTMPL = '' '' OR IM.IMMIC IN (''1'', '' ''))';

		FromCondition := ' [SCDATA].F4101 IM 
								INNER JOIN [SCDATA].F40205 C
								ON C.LFLNTY = IM.IMLNTY
								INNER JOIN [SCDATA].FQ679910 E
								ON E.BI$9INID =  :StoreId 
								INNER JOIN [SCDATA].F4102 B
								ON B.IBITM = IM.IMITM
								AND B.IBMCU = E.BIMCU';

		SQLTMP :=
		  'INSERT INTO [SCLIBRARY].INV_GETCATNODEITEMLIST_A	
		   (
				ItemNumber,
				LongItemNumber,
				AuxItemNumber,
				Description1,
				Description2,
				SearchText,
				Template,
				Segment1,
				MatrixControlled
		   )
		   SELECT
				IM.IMITM ItemNumber,
				IM.IMLITM LongItemNumber,
				IM.IMAITM AuxItemNumber,
				IM.IMDSC1 Description1, /* Description 1 */
				IM.IMDSC2 Description2, /* Description 2*/
				IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
				IM.IMTMPL AS Template, 
				IM.IMSEG1 AS Segment1,
				IM.IMMIC  AS MatrixControlled
			FROM ' || FromCondition ||             
			' WHERE ' || WhereConditionQuery1
			|| ' UNION
			SELECT
				IM.IMITM ItemNumber,
				IM.IMLITM LongItemNumber,
				IM.IMAITM AuxItemNumber,
				IM.IMDSC1 Description1, /* Description 1 */
				IM.IMDSC2 Description2, /* Description 2 */
				IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
				IM.IMTMPL AS Template, 
				IM.IMSEG1 AS Segment1,
				IM.IMMIC  AS MatrixControlled
			FROM [SCDATA].F4101 IM
			INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = IM.IMLNTY
			WHERE ' || WhereConditionQuery2;
    ELSE --By Catalog Node Items

	  FromCondition := ' [SCDATA].FQ67413I A 
						  INNER JOIN [SCDATA].F4101 IM
							ON IM.IMITM = A.INITM
						  INNER JOIN [SCDATA].F40205 C
							ON C.LFLNTY = IM.IMLNTY					
						  INNER JOIN [SCDATA].FQ679910 E
							ON E.BI$9INID = :StoreId 
						  INNER JOIN [SCDATA].F4102 B
							ON B.IBITM = IM.IMITM
							AND B.IBMCU = E.BIMCU';

      SQLTMP := /*#ITEMS*/
      'INSERT INTO [SCLIBRARY].INV_GETCATNODEITEMLIST_A
      (
			ItemNumber,
			LongItemNumber,
			AuxItemNumber,
			Description1,
			Description2,
			SearchText,
			Template,
			Segment1,
			MatrixControlled
      )
      SELECT
			IM.IMITM ItemNumber,
			IM.IMLITM LongItemNumber,
			IM.IMAITM AuxItemNumber,
			IM.IMDSC1 Description1, /* Description 1 */
			IM.IMDSC2 Description2, /* Description 2 */
			IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
			IM.IMTMPL AS Template, 
			IM.IMSEG1 AS Segment1,
			IM.IMMIC  AS MatrixControlled
      FROM ' || FromCondition || ' ' || DeletedProductsQuery ||
      ' WHERE A.IN$9CLGID = :CatalogId
		AND A.INUKID = :CatalogDetailId 
		AND (IM.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D'')) 
        UNION 
      SELECT
			IM.IMITM ItemNumber,
			IM.IMLITM LongItemNumber,
			IM.IMAITM AuxItemNumber,
			IM.IMDSC1 Description1, /* Description 1 */
			IM.IMDSC2 Description2, /* Description 2 */
			IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
			IM.IMTMPL AS Template, 
			IM.IMSEG1 AS Segment1,
			IM.IMMIC  AS MatrixControlled
	  FROM [SCDATA].FQ67413I A
      INNER JOIN [SCDATA].F4101 IM
        ON IM.IMITM = A.INITM
      INNER JOIN [SCDATA].F40205 C
        ON C.LFLNTY = IM.IMLNTY 
		'|| DeletedProductsQuery ||'
      WHERE A.IN$9CLGID = :CatalogId 
        AND A.INUKID = :CatalogDetailId 
        AND (IM.IMSTKT =''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))';
      IF (SelectedProductsXML IS NOT NULL) THEN 
        SQLTMP := SQLTMP ||
        ' UNION 
          SELECT 
            IM.IMITM ItemNumber,
			IM.IMLITM LongItemNumber,
			IM.IMAITM AuxItemNumber,
            IM.IMDSC1 Description1, /*Description 1*/                            
			IM.IMDSC2 Description2, /*Description 2*/
			IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
			IM.IMTMPL AS Template, 
			IM.IMSEG1 AS Segment1,
			IM.IMMIC  AS MatrixControlled
		  FROM [SCDATA].F4101 IM ' || SelectedProductsQuery;
      END IF;      
    END IF;
	---------------------------------------------------------------------------------------------

	/* Items by Category Code */
	IF FilterByCategoryCodes = 'Y' THEN
		EXECUTE IMMEDIATE(SQLTMP) USING StoreId;
	ELSE	/* Items by Node Item List  */

		IF (DeletedProductsXML IS NULL AND SelectedProductsXML IS NULL) THEN
			EXECUTE IMMEDIATE(SQLTMP) USING StoreId, CatalogID, CatalogDetailID, CatalogID, CatalogDetailID;
		ELSE
			IF (DeletedProductsXML IS NOT NULL AND SelectedProductsXML IS NOT NULL) THEN /*All*/
				EXECUTE IMMEDIATE(SQLTMP) USING StoreId, DeletedProductsXML, CatalogId, CatalogDetailId, DeletedProductsXML, CatalogId, CatalogDetailId, SelectedProductsXML;
			ELSE
				IF (DeletedProductsXML IS NOT NULL AND SelectedProductsXML IS NULL) THEN /*Without SelectedProductsXML*/
					EXECUTE IMMEDIATE(SQLTMP) USING StoreId, DeletedProductsXML, CatalogId, CatalogDetailId, DeletedProductsXML, CatalogId, CatalogDetailId;
				ELSE /*Without DeletedProductsXML*/
					EXECUTE IMMEDIATE(SQLTMP) USING StoreId, CatalogId, CatalogDetailId, CatalogId, CatalogDetailId, SelectedProductsXML;
				END IF;
			END IF;
		END IF;
	END IF;

	SQLTMP := '';
			
	SQLTMP := 'SELECT
	A.ItemNumber AS ItemNumber,
	A.LongItemNumber,
	A.AuxItemNumber,
	NVL (CONTENTINS.CHDSC1, NVL( CONTENTBASE.CHDSC1, A.Description1)) Description1, --Description 1                            
	NVL (CONTENTINS.CHDSC2, NVL( CONTENTBASE.CHDSC2, A.Description2)) Description2,---Desciption 2
	NVL (NVL (CONTENTINS.CHDSC3, CONTENTBASE.CHDSC3), '' '') || SearchText SearchText,
	A.Template AS Template,
	A.Segment1 AS Segment1,
	A.MatrixControlled AS MatrixControlled 
	FROM [SCLIBRARY].INV_GETCATNODEITEMLIST_A A --#Items
	LEFT OUTER JOIN [SCDATA].FQ67410 CONTENTINS  --Contents by Installation
		ON CONTENTINS.CHITM = A.ItemNumber  
		AND CONTENTINS.CH$9INID = :StoreId 
		AND CONTENTINS.CH$9DS =0  
	LEFT OUTER JOIN [SCDATA].FQ67410 CONTENTBASE  --Contents Base
		ON CONTENTBASE.CHITM = A.ItemNumber  
		AND CONTENTBASE.CH$9INID = ''***''
		AND CONTENTBASE.CH$9DS =0 ';
    
    /* Return record:Item Values*/
	OPEN ResultData FOR SQLTMP USING StoreId;

END;
  /

-- #desc							Read Catalog Node Items by Installation
-- #bl_class						Premier.Inventory.CatalogNodeItems.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID.
-- #param ItemNumber				Short Item Number
-- #param Description				Description
-- #param CatalodId					CatalogId
-- #param CatalogMCU				Catalog MCU
-- #param CatalogDetailId			CatalogDetailId
-- #param RetrieveMatrixChildren	Retrieve Matrix children

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogNodeItems
(	
	InstallationID		    IN NCHAR,
	ItemNumber			    IN NUMBER,	 --ShortItemNumber
	Description			    IN NCHAR,
	CatalogId				IN NCHAR,
	CatalogDetailId			IN NUMBER,
	CatalogMCU				IN NCHAR,
	RetrieveMatrixChildren	IN INT,
	ResultData1     OUT   GLOBALPKG.refcursor
)
AS

BEGIN

    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCATALOGNODEITEMS_A';--FilterTable

	INSERT INTO [SCLIBRARY].INV_GETCATALOGNODEITEMS_A (CatalogId, UniqueKeyID, ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, SequenceNumber, InventoryFlag, StockingType, ScType, Template, Segment1)
	SELECT
		B.IN$9CLGID	AS CatalogId,
		B.INUKID	AS UniqueKeyID,
		A.IMITM		AS ItemNumber,
		A.IMLITM	AS LongItemNumber,
		A.IMAITM	AS AuxItemNumber,
		A.IMDSC1	AS Description1,
		A.IMDSC2	AS Description2,
		B.INSEQ		AS SequenceNumber,
		C.LFIVI		AS InventoryFlag,
		A.IMSTKT	AS StockingType,
		CASE 
			WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
			WHEN A.IMMIC = '1' AND A.IMTMPL <> ' ' THEN N'M'
			WHEN (A.IMSTKT <> N'N' AND (C.LFIVI = N'Y' OR C.LFIVI = N'D')) THEN N'S'
			ELSE N'N'
		END AS ScType,
		A.IMTMPL	AS Template,
		A.IMSEG1	AS Segment1
	FROM [SCDATA].FQ67413I B
	INNER JOIN [SCDATA].F4101 A						--Item Master
		ON B.INITM = A.IMITM
	INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
		ON C.LFLNTY = A.IMLNTY
	WHERE B.IN$9CLGID = CatalogId
		AND B.INUKID = CatalogDetailId
		AND (ItemNumber IS NULL OR A.IMITM = ItemNumber)-- Item Number filter
		AND (Description = '*' OR UPPER(A.IMDSC1) LIKE '%' || Description || '%') -- Description filter
	ORDER BY B.INSEQ ASC;

	/* Get Matrix children based in the setting */
	IF (RetrieveMatrixChildren = 1) THEN
		INSERT INTO [SCLIBRARY].INV_GETCATALOGNODEITEMS_A (CatalogId, UniqueKeyID, ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, SequenceNumber, InventoryFlag, StockingType, ScType, Template, Segment1)
		SELECT 
			B.CatalogId		AS CatalogId,
			B.UniqueKeyID	AS UniqueKeyID,
			A.IMITM			AS ItemNumber,
			A.IMLITM		AS LongItemNumber,
			A.IMAITM		AS AuxItemNumber,
			A.IMDSC1		AS Description1,
			A.IMDSC2		AS Description2,
			B.SequenceNumber		AS SequenceNumber,
			C.LFIVI			AS InventoryFlag,
			A.IMSTKT		AS StockingType,
			N'R'			AS ScType,
			A.IMTMPL		AS Template,
			A.IMSEG1		AS Segment1
		FROM [SCDATA].F4101 A						/* Item Master */
		INNER JOIN (SELECT DISTINCT FT.Template, FT.Segment1, CatalogId, UniqueKeyID, SequenceNumber FROM [SCLIBRARY].INV_GETCATALOGNODEITEMS_A FT WHERE FT.Template IS NOT NULL AND FT.ScType = 'M') B
			ON A.IMTMPL = B.Template AND A.IMSEG1 = B.Segment1 AND A.IMMIC = '2'
		INNER JOIN [SCDATA].F40205 C			/* Line Type Control Table */
			ON C.LFLNTY = A.IMLNTY
		WHERE (ItemNumber IS NULL OR A.IMITM = ItemNumber) /* Item Number filter */
			AND (Description = '*' OR UPPER(A.IMDSC1) LIKE '%' || Description || '%') /* Description filter */
			AND NOT EXISTS(SELECT 1 FROM [SCLIBRARY].INV_GETCATALOGNODEITEMS_A I WHERE I.ItemNumber = A.IMITM);
	END IF;
	
	OPEN ResultData1 FOR
	SELECT DISTINCT
		A.CatalogId,
		A.UniqueKeyID,
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		A.SequenceNumber AS SequenceNumber,
		A.StockingType,
		A.InventoryFlag,
		A.ScType,
		A.Template AS Template
	FROM [SCLIBRARY].INV_GETCATALOGNODEITEMS_A A
	INNER JOIN [SCDATA].FQ679910 E	--BranchPlant by Installation
		ON E.BI$9INID = InstallationID
	INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
		ON B.IBITM = A.ItemNumber
		AND B.IBMCU = E.BIMCU
	WHERE 
		(A.StockingType <>'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D'))			--Inventory Interface
	UNION
	SELECT
		A.CatalogId,
		A.UniqueKeyID,
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1, 
		A.Description2,
		A.SequenceNumber AS SequenceNumber,
		A.StockingType,
		A.InventoryFlag,
		A.ScType,
		A.Template AS Template
	FROM
		[SCLIBRARY].INV_GETCATALOGNODEITEMS_A A						
	WHERE 
		(A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D'))			--Inventory Interface
	ORDER BY SequenceNumber ASC;

END;
  /

-- #desc					Get Catalog Public List
-- #bl_class	 	 		Premier.Inventory.CatalogList.cs
-- #db_dependencies			N/A
-- #db_references			N/A					

-- #param InstallationID	Installation ID
-- #param LangPref			Language Pref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatalogPublicList  
(
	InstallationID	IN NCHAR,
	LangPref		IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate NUMBER(6,0);
BEGIN

	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate(SYSDATE);

    OPEN ResultData1 FOR
		 SELECT  
			   A.CA$9CLGID  AS CatalogId,
			   A.CADSC1		AS CatalogName,
			   A.CA$9EFM    AS EffectiveModeFlag,
			   A.CAEFFF     AS EffectiveFromDate,
			   A.CAEFFT	    AS EffectiveThruDate,
			   NVL(B.CADSC1 ,A.CADSC1) AS Description,
			   A.CASEQ		AS SequenceNumber,
			   A.CA$9INID	AS InstallationID,
			   A.CAMCU		AS MCU,
			   A.CA$9CCFU	AS MCUBehavior   
		FROM [SCDATA].FQ67412 A
		LEFT OUTER JOIN [SCDATA].FQ67412L B
			ON B.CA$9CLGID = A.CA$9CLGID
			AND B.CALNGP = LangPref 
		WHERE 
			A.CA$9INID  = InstallationID 
			AND (A.CA$9EFM = 0 OR CurrentJulianDate Between A.CAEFFF and A.CAEFFT) 
		ORDER BY 
			A.CASEQ;
END;
  /

-- #desc						Read Catalog Node Items by Installation
-- #bl_class					Premier.Inventory.CatalogNodeItems.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id.
-- #param FilterTerm			Filter Term
-- #param CatalogId				Catalog Id
-- #param CatalogDetailId		Catalog Detail Id
-- #param CatalogMCU			Catalog MCU
-- #param RemovedProductsXML	Products removed from the Detail in memory
-- #param DisplayItemSetting	Display Item Setting
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param TotalRowCount			Total Count of Rows

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCatNodeItemsNotRel
(	
	StoreId					IN NCHAR,
	FilterTerm				IN NCHAR,
	CatalogId				IN NCHAR,
	CatalogDetailId			IN NUMBER,
	CatalogMCU				IN NCHAR,
	RemovedProductsXML		IN XMLType DEFAULT NULL,
	DisplayItemSetting		IN VARCHAR2,
	PageIndex			    IN INT,
    PageSize			    IN INT,
    TotalRowCount		    OUT INT,
    ResultData1				OUT GLOBALPKG.refcursor
)
AS
    RowStart	INT;
	RowEnd		INT;
	SQLITEMS			VARCHAR2(8000);
	RemoveProductsSql	VARCHAR2(8000):= '';
	ItemNumberCondition VARCHAR2(850):= '';
	DISPLAYITEM_DYNAMIC NVARCHAR2(100):= ' ';
	ShortItemNumber		NUMBER := NULL;

BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A';--FilterTable
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_B';--PagingTable
	
	IF (DisplayItemSetting = 'LITM') THEN
		DISPLAYITEM_DYNAMIC := ' A.IMLITM AS DisplayItemNumber,';
	ELSIF (DisplayItemSetting = 'AITM') THEN
		DISPLAYITEM_DYNAMIC := ' A.IMAITM AS DisplayItemNumber,';
	ELSE
		DISPLAYITEM_DYNAMIC := ' TO_NCHAR(A.IMITM) AS DisplayItemNumber,';
	END IF;

	IF(LENGTH(TRIM(TRANSLATE(FilterTerm, ' ||-.0123456789', ' '))) IS NULL AND FilterTerm <> ' ') THEN
		ItemNumberCondition := ' (A.IMITM = :ShortItemNumber) OR ';
		ShortItemNumber := TO_NUMBER(FilterTerm);
	ELSE
		ItemNumberCondition := ' (1 = 1 OR :ShortItemNumber IS NULL) AND ';
	END IF;

	--Add the removed Items
	IF (RemovedProductsXML IS NOT NULL) THEN
		RemoveProductsSql := ' OR A.IMITM IN (SELECT ShortItemNumber FROM XMLTABLE (''/items/item'' PASSING :RemovedProductsXML COLUMNS ShortItemNumber NUMBER PATH ''text()''))';
	END IF;	

	SQLITEMS :=
	'
	INSERT INTO [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, DisplayItemNumber, InventoryFlag, StockingType, DesignStatus, ScType, Template)
	SELECT DISTINCT
		A.IMITM		AS ItemNumber,
		A.IMLITM	AS LongItemNumber,
		A.IMAITM	AS AuxItemNumber,
		NVL(B.CHDSC1 , NVL(D.CHDSC1 , A.IMDSC1 ) ) AS Description1,
		NVL(B.CHDSC2 , NVL(D.CHDSC2 , A.IMDSC2 ) ) AS Description2,
		'|| DISPLAYITEM_DYNAMIC || '
		C.LFIVI		AS InventoryFlag,
		A.IMSTKT	AS StockingType,
		NVL(B.CH$9DS, D.CH$9DS)	AS DesigStatus,
		CASE 
			WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
			WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '' '' THEN N''M''
			WHEN (A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'')) THEN N''S''
			ELSE N''N''
		END			AS ScType,
		A.IMTMPL	AS Template
	FROM
		[SCDATA].F4101 A						--Item Master
		INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
			ON (C.LFLNTY = A.IMLNTY)
		LEFT OUTER JOIN [SCDATA].FQ67410 B  --Contents by Installation
			ON B.CHITM = A.IMITM  
			AND B.CH$9INID = :StoreId
		LEFT OUTER JOIN [SCDATA].FQ67410 D  --Contents Base
			ON D.CHITM = A.IMITM  
			AND D.CH$9INID = ''***''
	WHERE 
		('||ItemNumberCondition||'
			A.IMLITM LIKE ''%'' || :FilterTerm || ''%''
			OR A.IMAITM LIKE ''%'' || :FilterTerm || ''%''
			OR UPPER(NVL(B.CHDSC1, NVL(D.CHDSC1, A.IMDSC1 ))) LIKE ''%'' || :FilterTerm || ''%''
			OR UPPER(NVL(B.CHDSC2, NVL(D.CHDSC2, A.IMDSC2 ))) LIKE ''%'' || :FilterTerm || ''%''
			OR UPPER(NVL(B.CHDSC3, NVL(D.CHDSC3, '' '' ))) LIKE ''%'' || :FilterTerm || ''%''
			OR UPPER(A.IMSRTX) LIKE ''%'' || :FilterTerm || ''%''
		)
		AND 
		( NOT EXISTS(SELECT 1 FROM [SCDATA].FQ67413I B WHERE B.IN$9CLGID = :CatalogId AND B.INUKID = :CatalogDetailId AND B.INITM = A.IMITM) 
			'||RemoveProductsSql||'
		)';
	
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A';   

	IF (RemovedProductsXML IS NOT NULL) THEN
		EXECUTE IMMEDIATE SQLITEMS USING StoreId, ShortItemNumber, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm, CatalogId, CatalogDetailId, RemovedProductsXML;	
	ELSE
		EXECUTE IMMEDIATE SQLITEMS USING StoreId, ShortItemNumber, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm, CatalogId, CatalogDetailId;	
	END IF;

	/* Removes the Draft version when item has both versions from [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A */
	DELETE FROM [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A 
		WHERE ItemNumber IN (SELECT I.ItemNumber 
								FROM (SELECT ItemNumber, COUNT(ItemNumber) CNT 
										FROM [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A GROUP BY (ItemNumber)) I WHERE I.CNT > 1) 
			AND DesignStatus = 1;

	INSERT INTO [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_B (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, DisplayItemNumber, InventoryFlag, StockingType, ScType, Template)
		SELECT DISTINCT 
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.Description1,
			A.Description2,
			A.DisplayItemNumber,
			A.InventoryFlag,
			A.StockingType,
			A.ScType,
			A.Template
		FROM
			[SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A A,
			[SCDATA].FQ679910 E,	--BranchPlant by Installation
			[SCDATA].F4102 B		--Item Master by BranchPlant
		WHERE 
				E.BI$9INID = StoreId
			AND B.IBITM = A.ItemNumber 
			AND B.IBMCU = E.BIMCU 
			AND (A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D'))			--Inventory Interface
		UNION
		SELECT  
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.Description1,
			A.Description2,
			A.DisplayItemNumber,
			A.InventoryFlag,
			A.StockingType,
			A.ScType,
			A.Template
		FROM
			[SCLIBRARY].INV_GETCATNODEITEMSNOTREL_A A						
		WHERE 
			A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')				--Inventory Interface
		;

	-------------------------------------------------------
	-- Obtain the total count of the result
	-------------------------------------------------------
	SELECT COUNT(1) INTO TotalRowCount FROM [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_B;

	-------------------------------------------------------
	-- Validate if paging is not required
	IF(PageIndex = 0 OR PageSize = 0)
	THEN
		-- Set the first row to be selected
		ROWSTART := 1;
		-- Set the last row to be selected
		ROWEND := TotalRowCount;
	ELSE
		-- Set the first row to be selected		
		ROWSTART := (PageSize * PageIndex) - PageSize + 1;
		-- Set the last row to be selected
		ROWEND := PageIndex * PageSize;
	END IF;

	-------------------------------------------------------
	-- Select the rows from temporary table between the
	-- range of ROWSTART and ROWEND
	-------------------------------------------------------
	OPEN ResultData1 FOR
	WITH CTE AS(
		SELECT 
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.Description1 AS Description1,
			A.Description2 AS Description2,
			A.InventoryFlag,
			A.StockingType,
			A.ScType,
			A.Template, 
			ROW_NUMBER() OVER(ORDER BY A.DisplayItemNumber ) AS ROWNU 
		FROM [SCLIBRARY].INV_GETCATNODEITEMSNOTREL_B A
	)
	SELECT 	
		CatalogId AS CatalogId,
		0  AS UniqueKeyID,
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		0 AS SequenceNumber,
		A.InventoryFlag,
		A.StockingType,
		A.ScType,
		A.Template
	FROM CTE A
	WHERE A.ROWNU BETWEEN RowStart AND RowEnd;
END;
  /
-- #desc						Get Cookie Crumb
-- #bl_class					Premier.Inventory.CookieCrumbList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogID			    Catalog ID
-- #param CatalodDetailId		Catalod Detail Id
-- #param LangPref				Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCookieCrumb
(
	CatalogId		    IN NVARCHAR2,
	CatalodDetailId	    IN DECIMAL,
	LangPref			IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS    
    Exist   DECIMAL; 
    CatalodDetailIdTPM DECIMAL := CatalodDetailId;
    ParentTmp DECIMAL;
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCOOKIECRUMB_A'; 
    
    WHILE(CatalodDetailIdTPM IS NOT NULL AND CatalodDetailIdTPM <> 0)
    LOOP
        BEGIN
            SELECT COUNT(*) INTO Exist 
            FROM [SCDATA].FQ67413 
			WHERE TRIM(CD$9CLGID) = TRIM(CatalogId) 
			AND TRIM(CDUKID) = TRIM(CatalodDetailIdTPM);
                
            IF(Exist > 0) THEN                
                INSERT INTO [SCLIBRARY].INV_GETCOOKIECRUMB_A
	            SELECT CD$9CLGID, CDUKID, CD$9PKID, CDDL01, CD$9IIS, CDDTAI, CDKY, CDTMPI
	            FROM [SCDATA].FQ67413 
	            WHERE TRIM(CD$9CLGID) = TRIM(CatalogId) 
	            AND TRIM(CDUKID) = TRIM(CatalodDetailIdTPM);
		
				ParentTmp := CatalodDetailIdTPM;
                BEGIN		            
		            SELECT CD$9PKID INTO CatalodDetailIdTPM 
					FROM [SCDATA].FQ67413
					WHERE TRIM(CD$9CLGID) = TRIM(CatalogId) 
					AND TRIM(CDUKID) = TRIM(CatalodDetailIdTPM);
		            EXCEPTION WHEN NO_DATA_FOUND THEN 
		            CatalodDetailIdTPM := NULL;
		        END;
		        IF (ParentTmp=CatalodDetailIdTPM) THEN
					CatalodDetailIdTPM := NULL;
					EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCOOKIECRUMB_A';
		        END IF;
            ELSE
                CatalodDetailIdTPM := NULL;
	            EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETCOOKIECRUMB_A';
	        END IF;
        END;
    END LOOP;
    
    OPEN ResultData1 FOR
        SELECT
	        CatalogID,
	        CatalogDetailId,
	        ParentKeyID,
	        NVL(B.CDDL01 ,A.Description) AS Description,
	        IncludeInSearch,
	        DataItem,
	        UserDefinedCode,
	        TemplateID
         FROM 
            [SCLIBRARY].INV_GETCOOKIECRUMB_A A,
	        [SCDATA].FQ67413L B 
        WHERE TRIM(B.CD$9CLGID(+)) = TRIM(A.CatalogID)
	    AND TRIM(A.CatalogDetailId) = TRIM(B.CDUKID(+))
	    AND TRIM(LangPref) = TRIM(B.CDLNGP(+));
END;
  /

-- #desc							Get Customer Cross Ref List
-- #bl_class						Premier.Inventory.ItemCrossReferenceList.cs	
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param ShortProductNumbersXML	Short Product Number List

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetCustCrossReferenceLst
(
	InstallationID		IN NCHAR,
	AddressNumber		IN NUMBER,
	ShortProductNumbersXML 	IN XMLType,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	-- Gets Cust Cross Type
	CustCrossRefType	NCHAR(2);
	CustCrossConstantINID NCHAR(3) := InstallationID;
BEGIN
    [SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossConstantINID, CustCrossRefType);

	OPEN ResultData1 FOR
		SELECT 
			X.ShortProductNumber	AS ShortProductNumber,
			NVL(I.IVCITM, '')	AS RefProductNumber
		FROM XMLTABLE ('/items/item' 
						PASSING ShortProductNumbersXML
						COLUMNS ShortProductNumber NUMBER PATH 'text()') X
		LEFT OUTER JOIN [SCDATA].F4104 I
			ON I.IVITM= X.ShortProductNumber
			AND I.IVAN8 = AddressNumber 
			AND I.IVXRT = CustCrossRefType 
			AND CurrentJulianDate BETWEEN I.IVEFTJ AND I.IVEXDJ;
END;
  /

-- #desc						Get Item Replacement Items
-- #bl_class					Premier.Inventory.ItemAssociatedList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param AddressNumber		    Address Number --It will be 0 when is called from POS or when the AN8 is a Consumer not has to return Cross-References items
-- #param ShortItemNumber		Short Item Number
-- #param RefProductNumber		Reference Product Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemAssociatedList
(
	InstallationID	    IN NCHAR,
	AddressNumber		IN NUMBER,
	ShortItemNumber	    IN NUMBER,
	RefType			    IN NCHAR,
	LangPref			IN NCHAR,
	RetrieveWebContentInfo IN NUMBER,
	PageIndex			IN INT,
    PageSize			IN INT,
    TotalRowCount		OUT INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    ROWSTART INT;
	ROWEND   INT;
	
	-- Gets Cust Cross Document Restrictions
	CustCrossRefType    NCHAR(2);
	CustCrossINID       NCHAR(3) := InstallationID;
	
	CurrentJulianDate NUMBER(6,0);
	
	 /* AddressNumbCustomerCrossRef is for read customer references information */
    AddressNumbCustomerCrossRef NUMBER := AddressNumber;
     /* AddressNumbCustomerCrossRef*/
    AddressNumberTMP NUMBER := AddressNumber;
    
    -- Get the Default Customer value constant
	DEFCUSTOMERCONSTANT NVARCHAR2(256);
	ConstantINID  NCHAR(3) := InstallationID;
	
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_A'; 
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_B'; 
	
    CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
    [SCLIBRARY].CMM_GetConstantValue('DEFCUSTOM', ConstantINID, DEFCUSTOMERCONSTANT);
    
    /* if addressNumber is equal to DefaultCustomer the user 
	    is consumer so does not read customer references information*/
	IF(AddressNumbCustomerCrossRef = DEFCUSTOMERCONSTANT) THEN	
	  AddressNumberTMP := 0;
    END IF;
    
	/*
		IF AddressNumber equal 0 does not read customer references 
		information (AN8 will be zero when the Stored Procedure 
		is called from POS or is an SmarterPages consumer)
	*/
	IF (AddressNumberTMP <> 0) 
	THEN
		[SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossINID, CustCrossRefType);
		INSERT INTO [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_A
		SELECT 
			IM2.IMITM AS ShortItemNumber,
			IM2.IMLITM AS LongItemNumber,
			IM2.IMAITM AS AuxItemNumber,		
			B.IVCITM AS RefProductNumber,
			IM2.IMDSC1 AS Description1,
			IM2.IMDSC2 AS Description2,		
			IM2.IMUOM1 AS PrimaryUnitOfMeasure,
			IM2.IMUOM2 AS SecondaryUnitOfMeasure,
			IM2.IMUOM4 AS PricingUnitOfMeasure,
			IM2.IMSTKT AS StockingType,
			IM2.IMLNTY AS LineType,
			C.LFIVI AS InventoryFlag
		FROM 
			[SCDATA].F4104 A						--CROSS REFERENCE
		INNER JOIN [SCDATA].F4101 IM1		--ITEM MASTER JOIN
			ON IM1.IMITM = A.IVITM
		INNER JOIN [SCDATA].F4101 IM2		--ITEM MASTER JOIN
			ON IM2.IMLITM = A.IVCITM
		INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
			ON C.LFLNTY = IM2.IMLNTY
		LEFT OUTER JOIN [SCDATA].F4104 B		--Customer/Item Cross Ref Table
			ON B.IVAN8 = AddressNumbCustomerCrossRef
			AND B.IVITM = IM2.IMITM
			AND B.IVXRT = CustCrossRefType
			AND CurrentJulianDate >= B.IVEFTJ AND CurrentJulianDate <= B.IVEXDJ
		WHERE A.IVITM = ShortItemNumber
			AND A.IVXRT = RefType
			AND ((CurrentJulianDate >=A.IVEFTJ AND CurrentJulianDate <= A.IVEXDJ) OR
				(CurrentJulianDate >=A.IVEFTJ AND A.IVEXDJ = 0))
			AND (A.IVAN8 =  AddressNumberTMP OR A.IVAN8 = 0)
		ORDER BY IM2.IMLITM ASC;
	ELSE
		INSERT INTO [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_A
		SELECT 
			IM2.IMITM AS ShortItemNumber,
			IM2.IMLITM AS LongItemNumber,
			IM2.IMAITM AS AuxItemNumber,		
			0 AS RefProductNumber,
			IM2.IMDSC1 AS Description1,
			IM2.IMDSC2 AS Description2,		
			IM2.IMUOM1 AS PrimaryUnitOfMeasure,
			IM2.IMUOM2 AS SecondaryUnitOfMeasure,
			IM2.IMUOM4 AS PricingUnitOfMeasure,
			IM2.IMSTKT AS StockingType,
			IM2.IMLNTY AS LineType,
			C.LFIVI AS InventoryFlag
		FROM 
			[SCDATA].F4104 A						--CROSS REFERENCE
		INNER JOIN [SCDATA].F4101 IM1		--ITEM MASTER JOIN
			ON IM1.IMITM = A.IVITM
		INNER JOIN [SCDATA].F4101 IM2		--ITEM MASTER JOIN
			ON IM2.IMLITM = A.IVCITM
		INNER JOIN [SCDATA].F40205 C			--Line Type Control Table			
			ON C.LFLNTY = IM2.IMLNTY
		WHERE 
			A.IVITM = ShortItemNumber
			AND A.IVXRT = RefType
			AND ((CurrentJulianDate >=A.IVEFTJ AND CurrentJulianDate <= A.IVEXDJ) OR
				(CurrentJulianDate >=A.IVEFTJ AND A.IVEXDJ = 0))
		ORDER BY IM2.IMLITM ASC;
	END IF;

	INSERT INTO [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_B(ItemNumber, LongItemNumber, AuxItemNumber, RefProductNumber, Description1, Description2,
	PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, StockingType, LineType, InventoryFlag )
	SELECT 
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.RefProductNumber,
		A.Description1,
		A.Description2,
		A.PrimaryUnitOfMeasure,
		A.SecondaryUnitOfMeasure,
		A.PricingUnitOfMeasure,
		A.StockingType,
		A.LineType,
		A.InventoryFlag 
	FROM 
	    [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_A A
	INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
		ON B.IBITM = A.ItemNumber 
	INNER JOIN [SCDATA].FQ679910 E	--BrachPlant by Installation
		ON E.BI$9INID = InstallationID
		AND E.BIMCU = B.IBMCU
	WHERE 
		(A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D'))		--Inventory Interface
	UNION
	SELECT 
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.RefProductNumber,
		A.Description1,
		A.Description2,
		A.PrimaryUnitOfMeasure,
		A.SecondaryUnitOfMeasure,
		A.PricingUnitOfMeasure,
		A.StockingType,
		A.LineType,
		A.InventoryFlag 
	FROM [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_A A
	WHERE 
		A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')			--Inventory Interface
	ORDER BY LongItemNumber ASC;
	
	/* Obtain the total count of the result */
	SELECT COUNT(1) INTO TotalRowCount FROM [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_B;

	/* Validate if paging is not required */
	IF(PageIndex = 0 OR PageSize = 0)
	THEN
		 ROWSTART := 1;
		 ROWEND := TotalRowCount;
	ELSE
		 ROWSTART := (PageSize * PageIndex) - PageSize + 1;
		 ROWEND := PageIndex * PageSize;	
	END IF;

	/* Retrieve web content */
	IF(RetrieveWebContentInfo = 1) THEN

		/* Select the rows from temporary table between the
		 * range of ROWSTART and ROWEND
		 */
	
		OPEN ResultData1 FOR
			SELECT 	
				ItemNumber,
				LongItemNumber,
				AuxItemNumber,
				RefProductNumber,
				NVL(ContenDesc.DESC1, Description1)	AS Description1,
				NVL(ContenDesc.DESC2, Description2)	AS Description2,
				ContenDesc.URL AS URL,
				PrimaryUnitOfMeasure,
				SecondaryUnitOfMeasure,
				PricingUnitOfMeasure,
				StockingType,
				LineType,
				InventoryFlag 
			FROM 
				(SELECT A.*, ROWNUM RNUM FROM [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_B A) B
			LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, B.ItemNumber, LangPref, 0) ) ContenDesc 
				ON ContenDesc.DESCITM = B.ItemNumber
			WHERE RNUM BETWEEN  ROWSTART AND ROWEND;
	ELSE
		OPEN ResultData1 FOR
		SELECT 	
			ItemNumber,
			LongItemNumber,
			AuxItemNumber,
			RefProductNumber,
			Description1 AS Description1, /* Retrieve Description 1 for Tracking lines */
			N' '	AS Description2,
			N' '	AS URL,
			PrimaryUnitOfMeasure,
			SecondaryUnitOfMeasure,
			PricingUnitOfMeasure,
			StockingType,
			LineType,
			InventoryFlag 
		FROM 
			(SELECT A.*, ROWNUM RNUM FROM [SCLIBRARY].INV_GETITEMASSOCIATEDLIST_B A) B
		WHERE RNUM BETWEEN  ROWSTART AND ROWEND;
	END IF;
END;
  /

-- #desc						Return the value of the cross reference
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumber		    ItemNumber
-- #param Type			        Type of the reference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemCrossRefCodes
(
	ItemNumber	DECIMAL,
	Type        NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor	
)

AS
    BEGIN
    OPEN ResultData1 FOR
	    SELECT LTRIM(RTRIM(IVCITM)) AS Code 
	    FROM [SCDATA].F4104 
	    WHERE IVITM=ItemNumber AND TRIM(IVXRT)= TRIM(Type);

END;
  /

-- #desc						Get Item Cross Ref List
-- #bl_class					Premier.Inventory.ItemCrossReferenceList.cs	
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param AddressNumber			Address Number
-- #param DisplayItemNumber		Display Item Number
-- #param RefProductNumber		Reference Product Number
-- #param Description			Description
-- #param DataFilterMode		Data Filter Mode
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param SortBy				Column to filter by ItemNumber, YourProductNumber, Description, DateFrom, DateTo
-- #param SortDir				Direction to filter (A = Ascendent, D = Descendent) 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemCrossReferenceList
(
	InstallationID		IN NCHAR,
	AddressNumber		IN NUMBER,
	DisplayItemNumber	IN NCHAR,
	RefProductNumber	IN NCHAR,
	Description		    IN NCHAR,
	DataFilterMode		IN NCHAR,
	DisplayItemSetting	IN NCHAR,
	PageIndex			IN INT,
    PageSize			IN INT,
    SortBy				IN NVARCHAR2,
	SortDir				IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	/* Dynamic */
	SQL_DYNAMIC			VARCHAR2(4000);
	WHERE_DYNAMIC		NVARCHAR2(1000) := ' ';
	SORT_DYNAMIC		NVARCHAR2(60);
	SORTDIR_DYNAMIC		NVARCHAR2(5);
	DISPLAYITEM_DYNAMIC	NVARCHAR2(50) := ' ';

    today INTEGER := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	SHORTITEMNUMBER NUMBER := NULL;
	
	-- Gets Cust Cross Type
	CustCrossRefType	NCHAR(2);
	CustCrossConstantINID NCHAR(3) := InstallationID;
	
	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);
BEGIN

	IF (DisplayItemSetting = N'LITM')THEN
		DISPLAYITEM_DYNAMIC := ' LongItemNumber ';
	ELSIF (DisplayItemSetting = N'AITM')THEN
		DISPLAYITEM_DYNAMIC := ' AuxItemNumber ';
	ELSE
		DISPLAYITEM_DYNAMIC := ' ShortItemNumber ';
	END IF;

	/* Dynamic sort direction statement */
    SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

    /* Dynamic sort statement */
    SORT_DYNAMIC := CASE SortBy 
        WHEN 'ProductNumber' THEN DISPLAYITEM_DYNAMIC || SORTDIR_DYNAMIC
        WHEN 'YourProductNumber' THEN 'RefProductNumber' || SORTDIR_DYNAMIC 
        WHEN 'Description' THEN 'Description1' || SORTDIR_DYNAMIC 
        WHEN 'DateFrom' THEN 'EffectiveDate' || SORTDIR_DYNAMIC
        WHEN 'DateTo' THEN 'ExpirationDate' || SORTDIR_DYNAMIC
        ELSE DISPLAYITEM_DYNAMIC || ' ASC'
    END;	
    
    [SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossConstantINID, CustCrossRefType);
	
	IF(DisplayItemNumber <> '*') THEN
        IF (DisplayItemSetting = 'ITM') THEN
            IF(LENGTH(TRIM(TRANSLATE(DisplayItemNumber, ' ||-.0123456789', ' '))) IS NULL) THEN
			    SHORTITEMNUMBER := TO_NUMBER(NVL(DisplayItemNumber, '0'));
			END IF;
		ELSE
			IF (DisplayItemSetting = 'LITM') THEN
			    BEGIN
			        SELECT NVL(IMITM,0) INTO SHORTITEMNUMBER FROM [SCDATA].F4101 WHERE IMLITM = DisplayItemNumber;
			        EXCEPTION WHEN NO_DATA_FOUND THEN 
			        SHORTITEMNUMBER := NULL;
			    END;
			ELSE
			    BEGIN
				    SELECT NVL(IMITM, 0) INTO SHORTITEMNUMBER FROM [SCDATA].F4101 WHERE IMAITM = DisplayItemNumber;
				    EXCEPTION WHEN NO_DATA_FOUND THEN 
			        SHORTITEMNUMBER := NULL;
                END;
		    END IF;
	    END IF;
	END IF;
		
	IF (DisplayItemNumber = '*' OR SHORTITEMNUMBER <> 0) THEN

		/* Dynamic query conditions */
		IF (SHORTITEMNUMBER IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND IVITM = :ShortItemNumber ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ShortItemNumber IS NULL) ';
		END IF;

		IF (RefProductNumber <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND IVCITM LIKE ''%'' || :RefProductNumber || ''%''';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :RefProductNumber = ''*'') ';
		END IF;

		IF (Description <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (UPPER(RTRIM(IVDSC1)) || '' '' || UPPER(IVDSC2) LIKE ''%'' || :Description || ''%'')';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Description = ''*'') ';
		END IF;

		IF (DataFilterMode <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || CASE DataFilterMode
									WHEN 'E' THEN N' AND IVEXDJ < ' || today
									WHEN 'A' THEN N' AND ' || today || ' >= IVEFTJ AND ' || today || ' <= IVEXDJ'
									WHEN 'F' THEN N' AND IVEFTJ > ' || today END;
		END IF;

		/* Dynamic query */
		SQL_DYNAMIC := 
		N'	WITH PAGING AS 
		(
			SELECT CrossReference.*, ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || N') AS RNUM FROM 
			(
				SELECT
					IVITM AS ShortItemNumber,
					IVLITM AS LongItemNumber,
					IVAITM AS AuxItemNumber,
					IVCITM AS RefProductNumber,
					IVXRT  AS CrossReferenceType,
					IVDSC1 AS Description1,
					IVDSC2 AS Description2,
					IVEFTJ AS EffectiveDate,
					IVEXDJ AS ExpirationDate
				FROM 
					[SCDATA].F4104 						/*CROSS REFERENCE*/
				WHERE 
					IVAN8 = :AddressNumber AND IVXRT = :CustCrossRefType ' || WHERE_DYNAMIC || N') CrossReference
		) 
		SELECT PAGING.ShortItemNumber, PAGING.LongItemNumber, PAGING.AuxItemNumber, PAGING.RefProductNumber, PAGING.CrossReferenceType, PAGING.Description1, PAGING.Description2, 
			PAGING.EffectiveDate, PAGING.ExpirationDate, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount 
		FROM PAGING
		WHERE 
			((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';
	
		OPEN ResultData1 FOR SQL_DYNAMIC USING AddressNumber, CustCrossRefType, ShortItemNumber, RefProductNumber, Description, 
												PageIndex, PageSize, RowStart, RowEnd;
		
		END IF;	
END;
  /

-- #desc						Get Item Cross Ref Info
-- #bl_class					Premier.Inventory.ItemCrossRefInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param AddressNumber		    Address Number
-- #param ShortItemNumber		Short Item Number
-- #param RefProductNumber		Reference Product Number
-- #param EffectiveOnly			Effective Only 
						
CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemCrossRefInfo
(
	InstallationID      IN NCHAR,
	AddressNumber		IN NUMBER,
	ShortItemNumber	    IN NUMBER,
	RefProductNumber	IN NCHAR,
	EffectiveOnly		IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	
	-- Gets Cust Cross Type
	CustCrossRefType	    NCHAR(2);
	CustCrossConstantINID   NCHAR(3);
	CurrentJulianDate NUMBER(6,0);
BEGIN

	CustCrossConstantINID := InstallationID;
    [SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossConstantINID, CustCrossRefType);
    CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	/* Filter by item number */
	IF (ShortItemNumber IS NOT NULL) THEN
		OPEN ResultData1 FOR
        SELECT 
	        IVITM AS ShortItemNumber,
	        IVLITM AS LongItemNumber,
			IVAITM AS AuxItemNumber,
	        IVCITM AS RefProductNumber,
	        IVXRT  AS CrossReferenceType,
	        IVDSC1 AS Description1,
	        IVDSC2 AS Description2,
	        IVEFTJ AS EffectiveDate,
	        IVEXDJ AS ExpirationDate
        FROM 
	        [SCDATA].F4104 						--CROSS REFERENCE
        WHERE 
	        IVITM = ShortItemNumber
	        AND IVAN8 = AddressNumber
	        AND IVXRT = CustCrossRefType
	        AND (EffectiveOnly = 0 OR (CurrentJulianDate>= IVEFTJ AND CurrentJulianDate <= IVEXDJ));
	ELSE
		/* Without item number,  import lines case */
		OPEN ResultData1 FOR
        SELECT 
	        IVITM AS ShortItemNumber,
	        IVLITM AS LongItemNumber,
			IVAITM AS AuxItemNumber,
	        IVCITM AS RefProductNumber,
	        IVXRT  AS CrossReferenceType,
	        IVDSC1 AS Description1,
	        IVDSC2 AS Description2,
	        IVEFTJ AS EffectiveDate,
	        IVEXDJ AS ExpirationDate
        FROM 
	        [SCDATA].F4104 						--CROSS REFERENCE
        WHERE 
	        IVAN8 = AddressNumber
	        AND IVXRT = CustCrossRefType
	        AND IVCITM = RefProductNumber
	        AND (EffectiveOnly = 0 OR (CurrentJulianDate>= IVEFTJ AND CurrentJulianDate <= IVEXDJ));
	END IF;

END;
  /

-- #bl_class					Premier.Inventory.GetItemPublishCommand.cs
-- #desc						Returns kit components
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumbersXML		Item Numbers XML

CREATE OR REPLACE  PROCEDURE   [SCLIBRARY].INV_GetItemKitChildren
(
  ItemNumbersXML		XMLType,
  ResultData1 OUT  GLOBALPKG.refcursor
)

AS
	
BEGIN 
	OPEN ResultData1 FOR
		SELECT
		KT.IXKIT	AS ParentItemNumber,
		KT.IXITM	AS ComponentItemNumber
	FROM 
		[SCDATA].F3002 KT 
	INNER JOIN XMLTABLE ('/items/item'
						PASSING ItemNumbersXML
						COLUMNS ShortItemNumber NUMBER PATH 'text()') items
										ON IXKIT = items.ShortItemNumber
	WHERE
		IXTBM = 'M'
		AND IXOPTK <> 'F'
	UNION
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		KT.IXITM	AS ComponentItemNumber
	FROM 
		[SCDATA].F3002 KT
	WHERE KT.IXKIT in (SELECT IXITM FROM [SCDATA].F3002 A 
						INNER JOIN XMLTABLE ('/items/item'
						PASSING ItemNumbersXML
						COLUMNS ShortItemNumber NUMBER PATH 'text()') items
										ON IXKIT = items.ShortItemNumber
						WHERE IXOPTK ='F'
							AND IXTBM = 'M')
							
	ORDER BY ParentItemNumber;
END;
  /

-- #desc				
-- #bl_class				Premier.Inventory.ItemLotList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number
-- #param BranchPlant		Branch Plant
-- #param LotNumber			Lot/Serial Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemLotList
(
    ItemNumber		IN DECIMAL,
    BranchPlant		IN NVARCHAR2,
    LotNumber		IN NVARCHAR2,
     ResultData1 OUT GLOBALPKG.refcursor    
)
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT 
			LIITM	AS	ItemNumber,
			LIMCU	AS	BranchPlant,
			LILOCN	AS	Location,
			LILOTN	AS	LotNumber,
			LILOTS	AS	LotStatus
		FROM [SCDATA].F41021
		WHERE LIITM = ItemNumber 
			AND (BranchPlant = '*' OR UPPER(RTRIM(LIMCU)) = UPPER(RTRIM(BranchPlant)))
			AND (LotNumber = '*' OR UPPER(TRIM(LILOTN)) LIKE '%' || UPPER(TRIM(LotNumber)) || '%');
END;
	

 
  /

-- #desc					Return Lot Required Flag from F4201.IMSRCE
-- #bl_class				Premier.Inventory.GetItemLotRequiredCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number
-- #param BranchPlant		Branch Plant

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemLotRequiredFlag
(
    ItemNumber	IN DECIMAL,
    BranchPlant	NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT 
			IBSRCE AS LotRequiredFlag
		FROM [SCDATA].F4102
		WHERE IBITM = ItemNumber
			  AND UPPER(RTRIM(IBMCU)) = UPPER(RTRIM(BranchPlant));
END; 
  /

-- #desc						Gets item info by item number
-- #bl_class					Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A         

-- #param InstallationID		Installation Id
-- #param ShortItemNumber		Short Item Number to Search For
-- #param LongItemNumber		Long Item Number to Search For
-- #param AuxItemNumber         Aux Item Number to Search For

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterBasicInfo
(
  InstallationID    IN NCHAR,
  ShortItemNumber   IN NUMBER,
  LongItemNumber    IN NCHAR, 
  AuxItemNumber     IN NCHAR,
  ResultData1       OUT GLOBALPKG.refcursor
)
AS
    InventoryFlag         NCHAR(1);
    ItemNumber            NUMBER;
BEGIN

    ItemNumber := ShortItemNumber;
  
	BEGIN
		IF ((ItemNumber IS NULL) OR (ItemNumber = 0))THEN
			IF (LongItemNumber <> '*' ) THEN           
				SELECT A.IMITM INTO ItemNumber /*SHORT ITEM NUMBER */
				FROM [SCDATA].F4101 A  /*ITEM MASTER*/
				WHERE A.IMLITM = LongItemNumber;                  
			ELSIF (AuxItemNumber <> '*') THEN         
				SELECT A.IMITM INTO ItemNumber   /*SHORT ITEM NUMBER */
				FROM [SCDATA].F4101 A  /*ITEM MASTER*/
				WHERE A.IMAITM = AuxItemNumber;       
			END IF;  
		END IF;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		ItemNumber:= 0;
    END;

    OPEN ResultData1 FOR
    SELECT 
		InstallationID AS InstallationID, 
		' ' AS BranchPlant, 
		' ' AS BranchPlantDesc, 
		A.IMITM ItemNumber, 
		A.IMLITM LongItemNumber, 
		A.IMAITM AuxItemNumber,
		A.IMDSC1 AS Description1,
		A.IMDSC2 AS Description2,
		' ' AS URL,
		A.IMUOM1 PrimaryUnitOfMeasure,
		A.IMUOM2 SecondaryUnitOfMeasure,
		A.IMUOM4 PricingUnitOfMeasure,
		A.IMSRTX SearchItemText,
		A.IMSTKT StockingType ,
		A.IMLNTY LineType ,
		B.LFIVI  AS InventoryFlag,
		A.IMIFLA AS ItemFlashMessage,
		A.IMTMPL AS MatrixTemplate,
		A.IMMIC  AS MatrixControlled,
		0		 AS MatrixParentItemNumber,
		0   AS AddressNumber,
		''  AS AllowPickup,
		IMCYCL AS CYCL,
		IMPRP0 AS PRP0,
		IMPRP1 AS PRP1,
		IMPRP2 AS PRP2,
		IMPRP3 AS PRP3,
		IMPRP4 AS PRP4,
		IMPRP5 AS PRP5,
		IMPRP6 AS PRP6,
		IMPRP7 AS PRP7,
		IMPRP8 AS PRP8,
		IMPRP9 AS PRP9,
		IMSHCM AS SHCM,
		IMSHCN AS SHCN,
		IMSRP0 AS SRP0,
		IMSRP1 AS SRP1,
		IMSRP2 AS SRP2,
		IMSRP3 AS SRP3,
		IMSRP4 AS SRP4,
		IMSRP5 AS SRP5,
		IMSRP6 AS SRP6,
		IMSRP7 AS SRP7,
		IMSRP8 AS SRP8,
		IMSRP9 AS SRP9
    FROM [SCDATA].F4101 A  /*Item Master*/
	INNER JOIN [SCDATA].F40205 B
		ON B.LFLNTY = A.IMLNTY           
    WHERE A.IMITM = ItemNumber;
END;
  /

-- #desc							Read Item Master list with branchplant information
-- #bl_class						Premier.Inventory.ItemMasterBranchList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID.
-- #param BranchPlant				Branch Plant (mcu)
-- #param ItemNumber				Short Item Number
-- #param LongItemNumber			Long Item Number
-- #param AuxItemNumber				Aux Item Number
-- #param RetrieveWebContentInfo	Retrieve Web Content Info


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterBranchList
(
	InstallationID  IN NCHAR,
	BranchPlant     IN NCHAR,
	ItemNumber		IN NUMBER,
	LongItemNumber  IN NCHAR,
	AuxItemNumber	IN NCHAR,
	RetrieveWebContentInfo IN INT,
	LangPref		IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
    ShortItemNumber			NUMBER;
    
BEGIN
	
	ShortItemNumber := ItemNumber;
	
	IF ((ShortItemNumber IS NULL) OR (ShortItemNumber = 0))THEN 	 
		    
		IF (LongItemNumber <> '*' ) THEN 
			BEGIN
			  SELECT A.IMITM INTO ShortItemNumber /*SHORT ITEM NUMBER */
			  FROM [SCDATA].F4101 A  /*ITEM MASTER*/
			  WHERE A.IMLITM = LongItemNumber;				
			EXCEPTION
			WHEN NO_DATA_FOUND THEN
			   ShortItemNumber:= 0;
			END;
		ELSIF (AuxItemNumber <> '*') THEN 
			BEGIN
				SELECT A.IMITM INTO ShortItemNumber	 /*SHORT ITEM NUMBER */
				FROM [SCDATA].F4101 A  /*ITEM MASTER*/
				WHERE A.IMAITM = AuxItemNumber; 
			EXCEPTION
			WHEN NO_DATA_FOUND THEN
			   ShortItemNumber:= 0;
			END;
		END	IF;
	END	IF;
	
	IF(RetrieveWebContentInfo = 1) THEN 
		OPEN ResultData1 FOR
			SELECT 
				E.BI$9INID InstallationID, 
				B.IBMCU BranchPlant, 
				C.MCDL01 BranchPlantDesc, 
				A.IMITM ItemNumber, 
				A.IMLITM LongItemNumber, 
				A.IMAITM AuxItemNumber,
				NVL(ContenDesc.DESC1, A.IMDSC1)	AS Description1,
				NVL(ContenDesc.DESC2, A.IMDSC2)	AS Description2,
				ContenDesc.URL AS URL,
				A.IMUOM1 PrimaryUnitOfMeasure,
				A.IMUOM2 SecondaryUnitOfMeasure,
				A.IMUOM4 PricingUnitOfMeasure,
				A.IMSRTX SearchItemText,
				A.IMSTKT StockingType ,
				A.IMLNTY LineType ,
				D.LFIVI	InventoryFlag,
				A.IMIFLA ItemFlashMessage,
				A.IMTMPL MatrixTemplate,
				A.IMMIC  MatrixControlled,
				0 AS MatrixParentItemNumber,
			   C.MCAN8	AddressNumber,
			   E.BILCNF	AllowPickup,
				IMCYCL AS CYCL,
				IMPRP0 AS PRP0,
				IMPRP1 AS PRP1,
				IMPRP2 AS PRP2,
				IMPRP3 AS PRP3,
				IMPRP4 AS PRP4,
				IMPRP5 AS PRP5,
				IMPRP6 AS PRP6,
				IMPRP7 AS PRP7,
				IMPRP8 AS PRP8,
				IMPRP9 AS PRP9,
				IMSHCM AS SHCM,
				IMSHCN AS SHCN,
				IMSRP0 AS SRP0,
				IMSRP1 AS SRP1,
				IMSRP2 AS SRP2,
				IMSRP3 AS SRP3,
				IMSRP4 AS SRP4,
				IMSRP5 AS SRP5,
				IMSRP6 AS SRP6,
				IMSRP7 AS SRP7,
				IMSRP8 AS SRP8,
				IMSRP9 AS SRP9
			FROM 
				[SCDATA].F4101 A		/*Item Master*/
			INNER JOIN [SCDATA].F4102 B		/*Item Master by BranchPlant*/
				ON B.IBITM = A.IMITM
			INNER JOIN [SCDATA].F0006 C		/*Branch Master*/
				ON C.MCMCU = B.IBMCU
			INNER JOIN [SCDATA].FQ679910 E		/* BrachPlant by Installation*/
				ON E.BI$9INID = InstallationID
				AND E.BIMCU = B.IBMCU
			INNER JOIN [SCDATA].F40205 D			/*Line Type Control Table*/
				ON D.LFLNTY = A.IMLNTY
			LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.IMITM, LangPref, 0) ) ContenDesc 
				ON ContenDesc.DESCITM = A.IMITM
			WHERE 
				(BranchPlant = '*' OR B.IBMCU = BranchPlant) 
				AND (A.IMITM = ShortItemNumber);
	ELSE
		OPEN ResultData1 FOR
		SELECT 
			E.BI$9INID InstallationID, 
			B.IBMCU BranchPlant, 
			C.MCDL01 BranchPlantDesc, 
			A.IMITM ItemNumber, 
			A.IMLITM LongItemNumber, 
			A.IMAITM AuxItemNumber,
			A.IMDSC1 AS Description1,	/* Retrieve Description 1 for Tracking lines */
			N' '	AS Description2,
			N' '	AS URL,
			A.IMUOM1 PrimaryUnitOfMeasure,
			A.IMUOM2 SecondaryUnitOfMeasure,
			A.IMUOM4 PricingUnitOfMeasure,
			A.IMSRTX SearchItemText,
			A.IMSTKT StockingType ,
			A.IMLNTY LineType ,
			D.LFIVI	InventoryFlag,
			A.IMIFLA ItemFlashMessage,
			A.IMTMPL MatrixTemplate,
			A.IMMIC  MatrixControlled,
			0 AS MatrixParentItemNumber,
			C.MCAN8	AddressNumber,
			E.BILCNF	AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A		/*Item Master*/
		INNER JOIN [SCDATA].F4102 B		/*Item Master by BranchPlant*/
			ON B.IBITM = A.IMITM
		INNER JOIN [SCDATA].F0006 C		/*Branch Master*/
			ON C.MCMCU = B.IBMCU
		INNER JOIN [SCDATA].FQ679910 E		/* BrachPlant by Installation*/
			ON E.BI$9INID = InstallationID
			AND E.BIMCU = B.IBMCU
		INNER JOIN [SCDATA].F40205 D			/*Line Type Control Table*/
			ON D.LFLNTY = A.IMLNTY
		WHERE 
			(BranchPlant = '*' OR B.IBMCU = BranchPlant) 
			AND (A.IMITM = ShortItemNumber);
	END IF;
END;
  /

-- #desc							Read Item Master Table with content information by Installation, read only info
-- #bl_class						Premier.Inventory.ItemMasterContentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID.
-- #param FilterTerm				Free Form Search Text
-- #param DesignStatus 				Decimal, -- Null = ALL, 0 = Design , 1 = Live
-- #param WithContent				Varchar(2), -- * = Any, Y = Yes, N = No.
-- #param PageIndex					Paging - Current page
-- #param PageSize					Paging - Items to be shown
-- #param TotalRowCount				Paging - Quantity of rows, result of search filter.
	
create or replace PROCEDURE [SCLIBRARY].INV_GetItemMasterContentList
(	
	InstallationID		IN NCHAR,
	FilterTerm			IN NCHAR,
	DesignStatus		IN NUMBER,
	WithContent			IN NVARCHAR2,
	PageIndex			IN INT,
	PageSize			IN INT,
	TotalRowCount		OUT INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	ROWSTART int;
	ROWEND int;

	ItemNumberTMP NUMBER;
	
BEGIN 
	
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMMASTERCONTLIST_A'; -- FilterTable
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMMASTERCONTLIST_B'; -- PagingTable
	
  	IF(LENGTH(TRIM(TRANSLATE(FilterTerm, '0123456789', ' '))) IS NULL) THEN
			ItemNumberTMP := CAST(NVL(FilterTerm, '0') AS NUMBER);
	END IF;
	
	INSERT INTO [SCLIBRARY].INV_GETITEMMASTERCONTLIST_A(ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, Description3, PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, ContentInstallationID, DesignStatus, ContainsContent)
	SELECT
		A.IMITM		AS ItemNumber,
		A.IMLITM	AS LongItemNumber,
		A.IMAITM	AS AuxItemNumber,
		NVL(B.CHDSC1, NVL(D.CHDSC1, A.IMDSC1))	AS Description1,		
		NVL(B.CHDSC2, NVL(D.CHDSC2, A.IMDSC2))	AS Description2,
		NVL(B.CHDSC3, NVL(D.CHDSC3, ''))	AS Description3,		
		A.IMUOM1	AS PrimaryUnitOfMeasure,
		A.IMUOM2	AS SecondaryUnitOfMeasure,
		A.IMUOM4	AS PricingUnitOfMeasure,
		A.IMSRTX	AS SearchItemText,
		A.IMSTKT	AS StockingType,
		A.IMLNTY	AS LineType,
		C.LFIVI		AS InventoryFlag,
		A.IMIFLA	AS ItemFlashMessage,
		NVL(B.CH$9INID,'***') AS ContentInstallationID,
		NVL(B.CH$9DS, NVL(D.CH$9DS, 0)) AS DesignStatus,
		CASE WHEN (B.CHITM IS NOT NULL OR D.CHITM IS NOT NULL) THEN 'Y' ELSE 'N' END AS ContainsContent

	FROM
		[SCDATA].F4101  A						      --Item Master
		INNER JOIN [SCDATA].F40205  C			--Line Type Control Table
		ON C.LFLNTY = A.IMLNTY
		LEFT OUTER JOIN [SCDATA].FQ67410  B
		ON B.CH$9INID = InstallationID
		AND B.CHITM = A.IMITM
		LEFT OUTER JOIN [SCDATA].FQ67410  D
		ON D.CH$9INID = '***'
		AND D.CHITM = A.IMITM	
	WHERE 
		(ItemNumberTMP IS NOT NULL AND A.IMITM = ItemNumberTMP)   -- Item Number filter
		OR (FilterTerm = '*'						  -- DB engine do not short-circuiting so it includes more posible matches here
			OR A.IMLITM LIKE '%' || FilterTerm || '%'  -- Second Item Number filter
			OR A.IMAITM LIKE '%' || FilterTerm || '%'  -- Third Item Number filter
			OR UPPER(NVL(B.CHDSC1, NVL(D.CHDSC1, A.IMDSC1 ))) LIKE '%' || FilterTerm || '%'  -- Description filter
			OR UPPER(NVL(B.CHDSC2, NVL(D.CHDSC2, A.IMDSC2 ))) LIKE '%' || FilterTerm || '%'  -- Description filter
			OR UPPER(NVL(B.CHDSC3, NVL(D.CHDSC3, '' ))) LIKE '%' || FilterTerm || '%'  -- Description filter
			OR UPPER(A.IMSRTX) LIKE '%' || FilterTerm || '%' )-- Search Text filter
	ORDER BY A.IMLITM ASC;

	--If DesignStatus is not specified we prefer Design over Live.
	IF DesignStatus IS NULL THEN 
    	DELETE FROM [SCLIBRARY].INV_GETITEMMASTERCONTLIST_A
          WHERE ItemNumber IN (SELECT ItemNumber 
          FROM [SCLIBRARY].INV_GETITEMMASTERCONTLIST_A
          GROUP BY ItemNumber 
          HAVING COUNT(ItemNumber) > 1)
      AND DesignStatus = 0; --live records
	END IF;
			
	INSERT INTO [SCLIBRARY].INV_GETITEMMASTERCONTLIST_B(ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, Description3, PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, ContentInstallationID, DesignStatus, ContainsContent)
	SELECT DISTINCT 
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,
		A.Description3,		
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.ContentInstallationID,
		A.DesignStatus,
		A.ContainsContent

	FROM
		[SCLIBRARY].INV_GETITEMMASTERCONTLIST_A A							
		INNER JOIN [SCDATA].FQ679910 E	--BranchPlant by Installation
		ON E.BI$9INID = InstallationID	
		INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
		ON B.IBITM = A.ItemNumber 
		AND B.IBMCU = E.BIMCU 
	WHERE 
		(A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')			--Inventory Interface
		AND (DesignStatus IS NULL OR A.DesignStatus = DesignStatus) 
		AND (WithContent = '*' OR A.ContainsContent = WithContent) 
	UNION ALL
	SELECT  
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,
    A.Description3,
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.ContentInstallationID,
		A.DesignStatus,
		A.ContainsContent
	FROM
		[SCLIBRARY].INV_GETITEMMASTERCONTLIST_A A						
	WHERE 
		(A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')				--Inventory Interface
		AND (DesignStatus IS NULL OR A.DesignStatus = DesignStatus) 
		AND (WithContent = '*' OR A.ContainsContent = WithContent);
		
	
	-------------------------------------------------------
	-- Obtain the total count of the result
	-------------------------------------------------------
	SELECT COUNT(1) INTO TotalRowCount
	  FROM [SCLIBRARY].INV_GETITEMMASTERCONTLIST_B;

	-------------------------------------------------------
	-- Validate if paging is not required
	-------------------------------------------------------
	IF(PageIndex = 0 OR PageSize = 0) THEN
	
		-------------------------------------------------------
		-- Set the first row to be selected
		-------------------------------------------------------
		ROWSTART := 1;
		-------------------------------------------------------
		-- Set the last row to be selected
		-------------------------------------------------------
		ROWEND := TotalRowCount;
	
	ELSE
		-------------------------------------------------------
		-- Set the first row to be selected
		-------------------------------------------------------
		ROWSTART := (PageSize * PageIndex) - PageSize + 1;
		-------------------------------------------------------
		-- Set the last row to be selected
		-------------------------------------------------------
		ROWEND := PageIndex * PageSize;	
	
	END IF;
	
	-------------------------------------------------------
	-- Select the rows from temporary table between the
	-- range of ROWSTART ans ROWEND
	-------------------------------------------------------
	OPEN ResultData1 FOR	
		SELECT 	 
			ItemNumber, 
			LongItemNumber, 
			AuxItemNumber, 	
			Description1,
			Description2,
			Description3,
			PrimaryUnitOfMeasure, 
			SecondaryUnitOfMeasure, 
			PricingUnitOfMeasure, 
			SearchItemText, 
			StockingType, 
			LineType, 
			InventoryFlag,
			ItemFlashMessage,
			ContentInstallationID,
			DesignStatus,
			ContainsContent

		FROM 
		(SELECT [SCLIBRARY].INV_GETITEMMASTERCONTLIST_B.*, ROWNUM ROWNU FROM [SCLIBRARY].INV_GETITEMMASTERCONTLIST_B)
	        WHERE ROWNU BETWEEN  ROWSTART AND ROWEND;
	END;
  /

-- #desc							Gets item info by item number
-- #bl_class						Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies					INV_GetItemMasterInfo
-- #db_references					N/A	

-- #param InstallationID			Installation Id
-- #param BranchPlant				Specific Branch Plant (mcu)
-- #param UnknownItemNumber		    Item Number to Search For
-- #param FirstSearchCriteria		First Search Criteria
-- #param SecondSearchCriteria		Second Search Criteria
-- #param ThirdSearchCriteria		Third Search Criteria
-- #param RetrieveWebContentInfo	If value=1 then return values of web content item, value =0 return the information from Item master

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterInfoUnknown
(
	InstallationID		    IN NCHAR,
	BranchPlant				IN NCHAR,
	UnknownItemNumber		IN NCHAR,
	FirstSearchCriteria		IN DECIMAL,
	SecondSearchCriteria	IN DECIMAL, 
	ThirdSearchCriteria		IN DECIMAL,
	RetrieveWebContentInfo	IN DECIMAL,
	LangPref			    IN NCHAR,
	ResultData1     OUT   GLOBALPKG.refcursor
)
AS
    ShortItemNumber NUMBER;
    ISNUMERIC NVARCHAR2(100) := NULL;
    InfoUnknownCursor  GLOBALPKG.refCursor;
    item   [SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A%rowtype;
    ITEMCONSTANT		NCHAR(2);
    ItemConstantINID	NCHAR(3);
    ShortINCrossRef		NUMBER;
	ShortInUPC		NUMBER;
    ROWCOUNTTMP INT;
	CurrentJulianDate NUMERIC(6,0); 
    
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A';
    CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	-- *********** FIRST Search Criteria Resolution ************
    IF (FirstSearchCriteria = 5) THEN -- Search by Universal Product Code 
	 BEGIN	
		BEGIN
			SELECT IMITM INTO ShortInUPC FROM [SCDATA].F4101 WHERE IMUPCN = UnknownItemNumber AND rownum = 1;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
				ShortInUPC := 0; 
		END;
		IF(ShortInUPC > 0)THEN
			[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortInUPC, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
		END IF;
	 END;	
    ELSE
		IF (FirstSearchCriteria = 3) THEN -- Search by Cross Reference		
			ItemConstantINID := InstallationID;
			[SCLIBRARY].CMM_GetConstantValue('ITM1STXREF', ItemConstantINID, ITEMCONSTANT);
			BEGIN	
				SELECT IVITM INTO ShortINCrossRef FROM [SCDATA].F4104 WHERE IVCITM = UnknownItemNumber AND IVXRT = ITEMCONSTANT AND rownum = 1 AND CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ;
				EXCEPTION WHEN NO_DATA_FOUND THEN 
					ShortINCrossRef := 0; 
			END;
			IF(ShortINCrossRef > 0)THEN
				[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortINCrossRef, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
			END IF;
			
		ELSE
			IF (FirstSearchCriteria = 2) THEN -- Search by Third Item Number
				[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, NULL, '*', UnknownItemNumber,RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
			ELSE
				IF (FirstSearchCriteria = 1) THEN -- Search by Second Item Number
					[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, NULL, UnknownItemNumber, '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
				ELSE	-- Search by First Item Number
					BEGIN
						ISNUMERIC := TO_CHAR(to_number(UnknownItemNumber));
						EXCEPTION WHEN others THEN
						ISNUMERIC := NULL;
					END;

					IF(ISNUMERIC IS NOT NULL) THEN
						ShortItemNumber := CAST(UnknownItemNumber AS NUMBER);
						[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortItemNumber, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
					END IF;
				END IF;
			END IF;
		END IF;
    END IF;

    IF(InfoUnknownCursor IS NOT NULL AND InfoUnknownCursor%ISOPEN) THEN
        BEGIN
            LOOP
                FETCH InfoUnknownCursor INTO item;
                    EXIT WHEN InfoUnknownCursor%NOTFOUND;
                      INSERT INTO [SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A
                      (
                        InstallationID, BranchPlant,BranchPlantDesc,ItemNumber,LongItemNumber,AuxItemNumber,
                        Description1,Description2,URL,PrimaryUnitOfMeasure,SecondaryUnitOfMeasure,
                        PricingUnitOfMeasure,SearchItemText,StockingType,LineType,InventoryFlag, ItemFlashMessage,MatrixTemplate, MatrixControlled, MatrixParentItemNumber, AddressNumber, AllowPickup,
						CYCL,
						PRP0,
						PRP1,
						PRP2,
						PRP3,
						PRP4,
						PRP5,
						PRP6,
						PRP7,
						PRP8,
						PRP9,
						SHCM,
						SHCN,
						SRP0,
						SRP1,
						SRP2,
						SRP3,
						SRP4,
						SRP5,
						SRP6,
						SRP7,
						SRP8,
						SRP9)
                      VALUES 
                      (
                          item.InstallationID,
                          item.BranchPlant,
                          item.BranchPlantDesc,
                          item.ItemNumber,
                          item.LongItemNumber,
                          item.AuxItemNumber,
                          item.Description1,
                          item.Description2,
                          item.URL,
                          item.PrimaryUnitOfMeasure,
                          item.SecondaryUnitOfMeasure,
                          item.PricingUnitOfMeasure,
                          item.SearchItemText,
                          item.StockingType,
                          item.LineType,
                          item.InventoryFlag,
                          item.ItemFlashMessage,
						  item.MatrixTemplate,
						  item.MatrixControlled,
						  item.MatrixParentItemNumber,
						  item.AddressNumber,
						  item.AllowPickup,
						  item.CYCL,
						  item.PRP0,
						  item.PRP1,
						  item.PRP2,
						  item.PRP3,
						  item.PRP4,
						  item.PRP5,
						  item.PRP6,
						  item.PRP7,
						  item.PRP8,
						  item.PRP9,
						  item.SHCM,
						  item.SHCN,
						  item.SRP0,
						  item.SRP1,
						  item.SRP2,
						  item.SRP3,
						  item.SRP4,
						  item.SRP5,
						  item.SRP6,
						  item.SRP7,
						  item.SRP8,
						  item.SRP9
                     );                       
                END LOOP;
            CLOSE InfoUnknownCursor;
        END;    
    END IF;
    
    -- *********** SECOND Search Criteria Resolution ************
    SELECT COUNT(*) INTO ROWCOUNTTMP FROM [SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A;
    
	IF (ROWCOUNTTMP = 0) THEN
	
		IF (SecondSearchCriteria IS NOT NULL) THEN
			IF (SecondSearchCriteria = 5) THEN -- Search by Universal Product Code 
				BEGIN
					SELECT IMITM INTO ShortInUPC FROM [SCDATA].F4101 WHERE IMUPCN = UnknownItemNumber AND rownum = 1;
					EXCEPTION WHEN NO_DATA_FOUND THEN 
						ShortInUPC := 0; 
				END;
				IF(ShortInUPC > 0)THEN
					[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortInUPC, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
				END IF;
			ELSE
				IF (SecondSearchCriteria = 3) THEN -- Search by Cross Reference				
					ItemConstantINID := InstallationID;
					[SCLIBRARY].CMM_GetConstantValue('ITM2NTXREF', ItemConstantINID, ITEMCONSTANT);
					BEGIN
						SELECT IVITM INTO ShortINCrossRef FROM [SCDATA].F4104 WHERE IVCITM = UnknownItemNumber AND IVXRT = ITEMCONSTANT AND rownum = 1 AND CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ;
						EXCEPTION WHEN NO_DATA_FOUND THEN 
							ShortINCrossRef := 0; 
					END;
					IF(ShortINCrossRef > 0)THEN
						[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortINCrossRef, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
					END IF;
				
				ELSE
					IF (SecondSearchCriteria = 2) THEN -- Search by Third Item Number
						[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, NULL, '*', UnknownItemNumber,RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
					ELSE
						IF (SecondSearchCriteria = 1) THEN -- Search by Second Item Number
							[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, NULL, UnknownItemNumber, '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
						ELSE	-- Search by First Item Number
							BEGIN
								ISNUMERIC := TO_CHAR(to_number(UnknownItemNumber));
								EXCEPTION WHEN others THEN
								ISNUMERIC := NULL;
							END;

							IF(ISNUMERIC IS NOT NULL) THEN
								ShortItemNumber := CAST(UnknownItemNumber AS NUMBER);
								[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortItemNumber, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
							END IF;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
	ELSE --ROWCOUNTTMP > 0
	    OPEN ResultData1 FOR
		    SELECT	* FROM	[SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A;
		RETURN;
    END IF;
    
    IF(InfoUnknownCursor IS NOT NULL AND InfoUnknownCursor%ISOPEN) THEN
    BEGIN
        LOOP
        FETCH InfoUnknownCursor INTO item;
            EXIT WHEN InfoUnknownCursor%NOTFOUND;
              INSERT INTO [SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A
              (
                InstallationID, BranchPlant,BranchPlantDesc,ItemNumber,LongItemNumber,AuxItemNumber,
                Description1,Description2,URL,PrimaryUnitOfMeasure,SecondaryUnitOfMeasure,
                PricingUnitOfMeasure,SearchItemText,StockingType,LineType,InventoryFlag, ItemFlashMessage,MatrixTemplate,MatrixControlled,MatrixParentItemNumber,AddressNumber,AllowPickup,
			    CYCL,
			    PRP0,
			    PRP1,
			    PRP2,
			    PRP3,
			    PRP4,
			    PRP5,
			    PRP6,
			    PRP7,
			    PRP8,
			    PRP9,
			    SHCM,
			    SHCN,
			    SRP0,
			    SRP1,
			    SRP2,
			    SRP3,
			    SRP4,
			    SRP5,
			    SRP6,
			    SRP7,
			    SRP8,
			    SRP9)
              VALUES 
              (
                  item.InstallationID,
                  item.BranchPlant,
                  item.BranchPlantDesc,
                  item.ItemNumber,
                  item.LongItemNumber,
                  item.AuxItemNumber,
                  item.Description1,
                  item.Description2,
                  item.URL,
                  item.PrimaryUnitOfMeasure,
                  item.SecondaryUnitOfMeasure,
                  item.PricingUnitOfMeasure,
                  item.SearchItemText,
                  item.StockingType,
                  item.LineType,
                  item.InventoryFlag,
                  item.ItemFlashMessage,
				  item.MatrixTemplate,
				  item.MatrixControlled,
				  item.MatrixParentItemNumber,
				  item.AddressNumber,
				  item.AllowPickup,
				  item.CYCL,
				  item.PRP0,
				  item.PRP1,
				  item.PRP2,
				  item.PRP3,
				  item.PRP4,
				  item.PRP5,
				  item.PRP6,
				  item.PRP7,
				  item.PRP8,
				  item.PRP9,
				  item.SHCM,
				  item.SHCN,
				  item.SRP0,
				  item.SRP1,
				  item.SRP2,
				  item.SRP3,
				  item.SRP4,
				  item.SRP5,
				  item.SRP6,
				  item.SRP7,
				  item.SRP8,
				  item.SRP9
             );                       
        END LOOP;
        CLOSE InfoUnknownCursor;
    END;    
    END IF;
    
    -- *********** THIRD Search Criteria Resolution ************
    SELECT COUNT(*) INTO ROWCOUNTTMP FROM [SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A;
    
	IF (ROWCOUNTTMP = 0) THEN
	
		IF (ThirdSearchCriteria IS NOT NULL) THEN
			IF (ThirdSearchCriteria = 5) THEN -- Search by Universal Product Code 
			 BEGIN	
				BEGIN
					SELECT IMITM INTO ShortInUPC FROM [SCDATA].F4101 WHERE IMUPCN = UnknownItemNumber AND rownum = 1;
					EXCEPTION WHEN NO_DATA_FOUND THEN 
						ShortInUPC := 0; 
				END;
				IF(ShortInUPC > 0)THEN
					[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortInUPC, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
				END IF;
			 END;	
			ELSE
				IF (ThirdSearchCriteria = 3) THEN -- Search by Cross Reference 				 
					ItemConstantINID := InstallationID;
					[SCLIBRARY].CMM_GetConstantValue('ITM3RTXREF', ItemConstantINID, ITEMCONSTANT);
					BEGIN
						SELECT IVITM INTO ShortINCrossRef FROM [SCDATA].F4104 WHERE IVCITM = UnknownItemNumber AND IVXRT = ITEMCONSTANT AND rownum = 1 AND CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ;
						EXCEPTION WHEN NO_DATA_FOUND THEN 
							ShortINCrossRef := 0; 
					END;	
					IF(ShortINCrossRef > 0)THEN
						[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortINCrossRef, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
					END IF;
				
				ELSE
					IF (ThirdSearchCriteria = 2) THEN -- Search by Third Item Number
						[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, NULL, '*', UnknownItemNumber,RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
					ELSE
						IF (ThirdSearchCriteria = 1) THEN -- Search by Second Item Number
							[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, NULL, UnknownItemNumber, '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
						ELSE	-- Search by First Item Number
							BEGIN
								ISNUMERIC := TO_CHAR(to_number(UnknownItemNumber));
								EXCEPTION WHEN others THEN
								ISNUMERIC := NULL;
							END;

							IF(ISNUMERIC IS NOT NULL) THEN
								ShortItemNumber := CAST(UnknownItemNumber AS NUMBER);
								[SCLIBRARY].INV_GetItemMasterInfo(InstallationID, BranchPlant, ShortItemNumber, '*', '*',RetrieveWebContentInfo,LangPref,InfoUnknownCursor);
							END IF;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;

		IF(InfoUnknownCursor IS NOT NULL AND InfoUnknownCursor%ISOPEN) THEN
		BEGIN
			LOOP
			FETCH InfoUnknownCursor INTO item;
				EXIT WHEN InfoUnknownCursor%NOTFOUND;
				  INSERT INTO [SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A
				  (
					InstallationID, BranchPlant,BranchPlantDesc,ItemNumber,LongItemNumber,AuxItemNumber,
					Description1,Description2,URL,PrimaryUnitOfMeasure,SecondaryUnitOfMeasure,
					PricingUnitOfMeasure,SearchItemText,StockingType,LineType,InventoryFlag, ItemFlashMessage,MatrixTemplate,MatrixControlled,MatrixParentItemNumber,AddressNumber,AllowPickup,
				    CYCL,
				    PRP0,
				    PRP1,
				    PRP2,
				    PRP3,
				    PRP4,
				    PRP5,
				    PRP6,
				    PRP7,
				    PRP8,
				    PRP9,
				    SHCM,
				    SHCN,
				    SRP0,
				    SRP1,
				    SRP2,
				    SRP3,
				    SRP4,
				    SRP5,
				    SRP6,
				    SRP7,
				    SRP8,
				    SRP9)
				  VALUES 
				  (
					  item.InstallationID,
					  item.BranchPlant,
					  item.BranchPlantDesc,
					  item.ItemNumber,
					  item.LongItemNumber,
					  item.AuxItemNumber,
					  item.Description1,
					  item.Description2,
					  item.URL,
					  item.PrimaryUnitOfMeasure,
					  item.SecondaryUnitOfMeasure,
					  item.PricingUnitOfMeasure,
					  item.SearchItemText,
					  item.StockingType,
					  item.LineType,
					  item.InventoryFlag,
					  item.ItemFlashMessage,
					  item.MatrixTemplate,
					  item.MatrixControlled,
					  item.MatrixParentItemNumber,
					  item.AddressNumber,
					  item.AllowPickup,
					  item.CYCL,
					  item.PRP0,
					  item.PRP1,
					  item.PRP2,
					  item.PRP3,
					  item.PRP4,
					  item.PRP5,
					  item.PRP6,
					  item.PRP7,
					  item.PRP8,
					  item.PRP9,
					  item.SHCM,
					  item.SHCN,
					  item.SRP0,
					  item.SRP1,
					  item.SRP2,
					  item.SRP3,
					  item.SRP4,
					  item.SRP5,
					  item.SRP6,
					  item.SRP7,
					  item.SRP8,
					  item.SRP9
				 );                       
			END LOOP;
			CLOSE InfoUnknownCursor;
		END;    
		END IF;
		
		OPEN ResultData1 FOR
		    SELECT	* FROM	[SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A;
		RETURN;    
    
	ELSE --ROWCOUNTTMP > 0
	    OPEN ResultData1 FOR
		    SELECT	* FROM	[SCLIBRARY].INV_GETITEMMASTINFUNKNOWN_A;
		RETURN;
    END IF;
    
END;
  /

-- #desc							Read Item Master Table by Installation, read only info
-- #bl_class						Premier.Inventory.ItemMasterList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID.
-- #param FilterTerm				Free Form Search Text
-- #param PageIndex					Paging - Current page
-- #param PageSize					Paging - Items to be shown
-- #param TotalRowCount				Paging - Quantity of rows, result of search filter.
-- #param RetrieveWebContentInfo	If value=1 then return values of web content item, value =0 return the information from Item master

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterList
(	
	InstallationID			IN NCHAR,
	FilterTerm				IN NCHAR,
	RetrieveWebContentInfo	IN NUMBER,
	BranchPlant				IN NCHAR,
    LangPref				IN NCHAR,
	PageIndex				IN INT,
    PageSize				IN INT,
	TotalRowCount			OUT INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	ROWSTART int;
	ROWEND int;
	
	ItemNumberTMP NUMBER;
	
BEGIN 
	
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMMASTERLIST_A'; -- FilterTable
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMMASTERLIST_B'; -- PagingTable
	
	IF(LENGTH(TRIM(TRANSLATE(FilterTerm, '0123456789', ' '))) IS NULL) THEN
			SELECT CAST(NVL(FilterTerm, '0') AS NUMBER) INTO ItemNumberTMP FROM dual;
	END IF;
	
	INSERT INTO [SCLIBRARY].INV_GETITEMMASTERLIST_A(ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2,PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, MatrixTemplate, MatrixControlled)
	SELECT
		A.IMITM		AS ItemNumber,
		A.IMLITM	AS LongItemNumber,
		A.IMAITM	AS AuxItemNumber,
		A.IMDSC1	AS Description1,		
		A.IMDSC2	AS Description2,		
		A.IMUOM1	AS PrimaryUnitOfMeasure,
		A.IMUOM2	AS SecondaryUnitOfMeasure,
		A.IMUOM4	AS PricingUnitOfMeasure,
		A.IMSRTX	AS SearchItemText,
		A.IMSTKT	AS StockingType,
		A.IMLNTY	AS LineType,
		C.LFIVI		AS InventoryFlag,
		A.IMIFLA	AS ItemFlashMessage,
		A.IMTMPL	AS MatrixTemplate,
		A.IMMIC		AS MatrixControlled
	FROM
		[SCDATA].F4101 A						--Item Master
		INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
		ON C.LFLNTY = A.IMLNTY		
	WHERE 
		(ItemNumberTMP IS NOT NULL AND A.IMITM = ItemNumberTMP)-- Item Number filter
		OR (FilterTerm = '*'						  -- DB engine do not short-circuiting so it includes more possible matches here
			OR A.IMLITM LIKE '%' || FilterTerm || '%'  -- Second Item Number filter
			OR A.IMAITM LIKE '%' || FilterTerm || '%'  -- Third Item Number filter
			OR UPPER(A.IMDSC1) LIKE '%' || FilterTerm || '%'  -- Description filter
			OR UPPER(A.IMDSC2) LIKE '%' || FilterTerm || '%'  -- Description filter
			OR UPPER(A.IMSRTX) LIKE '%' || FilterTerm || '%' )-- Search Text filter
	ORDER BY A.IMLITM ASC;
			
	INSERT INTO [SCLIBRARY].INV_GETITEMMASTERLIST_B(ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2,PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, MatrixTemplate, MatrixControlled)
	SELECT DISTINCT 
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,		
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.MatrixTemplate,
		A.MatrixControlled
	FROM
		[SCLIBRARY].INV_GETITEMMASTERLIST_A A							
		INNER JOIN [SCDATA].FQ679910 E	/*BranchPlant by Installation*/
			ON E.BI$9INID = InstallationID
		INNER JOIN [SCDATA].F4102 B		/*Item Master by BranchPlant*/
			ON B.IBITM = A.ItemNumber 
			AND B.IBMCU = E.BIMCU 
	WHERE 
		A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')			/*Inventory Interface: Stock items*/
		AND (BranchPlant = '*' OR E.BIMCU = BranchPlant)
	UNION ALL
	SELECT  
		A.ItemNumber, 
		A.LongItemNumber, 
		A.AuxItemNumber, 
		A.Description1, 
		A.Description2,
		A.PrimaryUnitOfMeasure, 
		A.SecondaryUnitOfMeasure, 
		A.PricingUnitOfMeasure, 
		A.SearchItemText, 
		A.StockingType, 
		A.LineType, 
		A.InventoryFlag, 
		A.ItemFlashMessage,
		A.MatrixTemplate,
		A.MatrixControlled
	FROM
		[SCLIBRARY].INV_GETITEMMASTERLIST_A A						
	WHERE 
		A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D');				/*Inventory Interface- Non stock items */
		
	
	/* Obtain the total count of the result */
	SELECT COUNT(1) INTO TotalRowCount
	  FROM [SCLIBRARY].INV_GETITEMMASTERLIST_B;

	IF(PageIndex = 0 OR PageSize = 0) THEN	
		ROWSTART := 1;
		ROWEND := TotalRowCount;	
	ELSE
		ROWSTART := (PageSize * PageIndex) - PageSize + 1;
		ROWEND := PageIndex * PageSize;		
	END IF;
	
	/* Select the rows from temporary table between the
	 * range of ROWSTART ans ROWEND
	 */
	OPEN ResultData1 FOR	
		SELECT 	
			InstallationID 		AS InstallationID, 
			'' 					AS BranchPlant, 
			'' 					AS BranchPlantDesc, 
			ItemNumber, 
			LongItemNumber, 
			AuxItemNumber, 	
			CASE RetrieveWebContentInfo
				WHEN 0 THEN Description1
				ELSE NVL(ContenDesc.DESC1, Description1) 
			END AS Description1,
			CASE RetrieveWebContentInfo
				WHEN 0 THEN Description2				
				ELSE NVL(ContenDesc.DESC2, Description2)
			END AS Description2,		
			ContenDesc.URL AS URL,
			PrimaryUnitOfMeasure, 
			SecondaryUnitOfMeasure, 
			PricingUnitOfMeasure, 
			SearchItemText, 
			StockingType, 
			LineType, 
			InventoryFlag,
			ItemFlashMessage,
			MatrixTemplate,
			MatrixControlled,
			0 AS MatrixParentItemNumber,
			0   AS AddressNumber,
			''  AS AllowPickup,
			''  AS CYCL,
			''  AS PRP0,
			''  AS PRP1,
			''  AS PRP2,
			''  AS PRP3,
			''  AS PRP4,
			''  AS PRP5,
			''  AS PRP6,
			''  AS PRP7,
			''  AS PRP8,
			''  AS PRP9,
			''  AS SHCM,
			''  AS SHCN,
			''  AS SRP0,
			''  AS SRP1,
			''  AS SRP2,
			''  AS SRP3,
			''  AS SRP4,
			''  AS SRP5,
			''  AS SRP6,
			''  AS SRP7,
			''  AS SRP8,
			''  AS SRP9
		FROM 
		(SELECT A.*, ROW_NUMBER() OVER(ORDER BY A.LongItemNumber) RNUM FROM [SCLIBRARY].INV_GETITEMMASTERLIST_B A ORDER BY A.LongItemNumber) B
		LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, B.ItemNumber, LangPref, 0) ) ContenDesc 
			ON ContenDesc.DESCITM = B.ItemNumber
	    WHERE RNUM BETWEEN  ROWSTART AND ROWEND;
	END;
  /

-- #bl_class					Premier.Inventory.GetItemPublishCommand.cs
-- #desc						Returns Matrix Children information
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumbersXML		Item Numbers XML

CREATE OR REPLACE  PROCEDURE   [SCLIBRARY].INV_GetItemMatrixChildren
(
  ItemNumbersXML		XMLType,
  ResultData1 OUT  GLOBALPKG.refcursor,
  ResultData2 OUT  GLOBALPKG.refcursor,
  ResultData3 OUT  GLOBALPKG.refcursor
)

AS
	
BEGIN --Region Data of Items	

	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMMATRIXCHILDREN_A';

	/* Gets matrix children and Inserts into INV_GETITEMMATRIXCHILDREN_A */
	INSERT INTO [SCLIBRARY].INV_GETITEMMATRIXCHILDREN_A (itemNumber, parentItemNumber)
	SELECT 
		A.IMITM, items.ITEMNUMBER
	FROM XMLTABLE ('/items/item'
					PASSING ItemNumbersXML
					COLUMNS ITEMNUMBER NUMBER PATH 'itemNumber',
							TEMPLATE NCHAR(20) PATH 'template',
							SEGMENT1 NCHAR(10) PATH 'segment1') items 
	INNER JOIN [SCDATA].F4101 A 
		ON A.IMTMPL = items.TEMPLATE AND A.IMSEG1 = items.SEGMENT1 AND A.IMMIC = '2';
	
	/* Gets matrix items children */
	OPEN ResultData1 FOR
		SELECT  
			A.itemNumber, 
			A.parentItemNumber,
			B.IMLITM AS LongItemNumber 
		FROM [SCLIBRARY].INV_GETITEMMATRIXCHILDREN_A A
		INNER JOIN [SCDATA].F4101 B
			ON B.IMITM = A.itemNumber;

	/*Gets Matrix segments */
	OPEN ResultData2 FOR
		SELECT 
			NM.parentItemNumber AS MatrixParentItem,
			S0.S0ITM	AS ShortItemNumber,
			S0.S0MRNO	AS RowNumber,
			S0.S0MCNO	AS ColumnNumber,
			S0.S0TMPL	AS Template,
			S0.S0SEG1   AS Segment1,
			S0.S0SGD1   AS Segment1Desc,
			S0.S0SEG2	AS Segment2,
			S0.S0SGD2	AS Segment2Desc,
			S0.S0SEG3	AS Segment3,
			S0.S0SGD3	AS Segment3Desc,
			S0.S0SEG4	AS Segment4,
			S0.S0SGD4	AS Segment4Desc,
			S0.S0SEG5	AS Segment5,
			S0.S0SGD5	AS Segment5Desc,
			S0.S0SEG6	AS Segment6,
			S0.S0SGD6	AS Segment6Desc,
			S0.S0SEG7	AS Segment7,
			S0.S0SGD7	AS Segment7Desc,
			S0.S0SEG8	AS Segment8,
			S0.S0SGD8	AS Segment8Desc,
			S0.S0SEG9	AS Segment9,
			S0.S0SGD9	AS Segment9Desc,
			S0.S0SEG0	AS Segment0,
			S0.S0SGD0	AS Segment0Desc
		FROM [SCDATA].F41008 S0
		INNER JOIN (SELECT DISTINCT itemNumber, parentItemNumber FROM [SCLIBRARY].INV_GETITEMMATRIXCHILDREN_A) NM
			ON NM.itemNumber= S0.S0ITM;

	/*Gets Matrix Template Master*/
	OPEN ResultData3 FOR
	WITH CTE AS (
		SELECT 
			MTM.T7TMPL AS Template,
			NM.parentItemNumber AS MatrixParentItem,
			MTM.T7MCU  AS BusinessUnit,
			MTM.T7HSEG AS HorizontalSegment,
			MTM.T7NSEG AS NumberofSegments,
			MTM.T7VSEG AS VerticalSegment,
			MTM.T7TDES AS TemplateDesc,
			MTM.T7SGD0 AS Segment0Desc,
			MTM.T7SGD1 AS Segment1Desc,
			MTM.T7SGD2 AS Segment2Desc,
			MTM.T7SGD3 AS Segment3Desc,
			MTM.T7SGD4 AS Segment4Desc,
			MTM.T7SGD5 AS Segment5Desc,
			MTM.T7SGD6 AS Segment6Desc,
			MTM.T7SGD7 AS Segment7Desc,
			MTM.T7SGD8 AS Segment8Desc,
			MTM.T7SGD9 AS Segment9Desc,
			ROW_NUMBER() OVER(PARTITION BY MTM.T7TMPL, NM.ParentItemNumber ORDER BY MTM.T7MCU) AS RNUM
		FROM [SCDATA].F410014 MTM
		INNER JOIN [SCDATA].F41008 S0
			ON S0.S0TMPL = MTM.T7TMPL
		INNER JOIN [SCLIBRARY].INV_GETITEMMATRIXCHILDREN_A NM
			ON NM.itemNumber= S0.S0ITM
	)
	SELECT 
		A.Template,
		A.MatrixParentItem,
		A.BusinessUnit,
		A.HorizontalSegment,
		A.NumberofSegments,
		A.VerticalSegment,
		A.TemplateDesc,
		A.Segment0Desc,
		A.Segment1Desc,
		A.Segment2Desc,
		A.Segment3Desc,
		A.Segment4Desc,
		A.Segment5Desc,
		A.Segment6Desc,
		A.Segment7Desc,
		A.Segment8Desc,
		A.Segment9Desc
	FROM CTE A
	WHERE RNUM = 1;

END; --End region of Data of Items
  /

-- #desc					Read UOM list by Item
-- #bl_class				Premier.Inventory.ItemUnitOfMeasureList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID		
-- #param ItemNumber		Short Item Number



CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemUnitOfMeasureList
(
	InstallationID  IN NVARCHAR2,
	ItemNumber		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	ItemFlag		NVARCHAR2(2);
	ItemPrimaryUOM  NVARCHAR2(3);
	ItemPricingUOM  NVARCHAR2(3);
BEGIN
	
	BEGIN
	    --Read the Item Using the short Item Number
	    SELECT 
	        A.IMTFLA , A.IMUOM1, A.IMUOM4 INTO ItemFlag, ItemPrimaryUOM, ItemPricingUOM 
	    FROM 
	        [SCDATA].F4101 A	--Item Master
	    WHERE 
	        A.IMITM = ItemNumber;
	    EXCEPTION WHEN NO_DATA_FOUND THEN
	    ItemFlag := NULL; ItemPrimaryUOM := NULL;ItemPricingUOM := NULL;
	END;
	
	--If the item F4101.IMTFLA = 1 
	IF(RTRIM(ItemFlag) = '1')
	    THEN
	        OPEN ResultData1 FOR
		        --Basic UOM table
		        SELECT DISTINCT 
		            UOM.UnitOfMeasure AS UnitOfMeasure, 
		            NVL(UOMLang.UMDSC1, UOMByInstallation.UMDSC1) AS Description
		        FROM(
			        SELECT CAST(A.UCUM AS NVARCHAR2(3)) AS UnitOfMeasure FROM [SCDATA].F41003 A 
			        WHERE A.UCRUM = ItemPrimaryUOM OR A.UCRUM = ItemPricingUOM
			        UNION
			        SELECT CAST(A.UCRUM AS NVARCHAR2(3)) AS UnitOfMeasure FROM [SCDATA].F41003 A 
			        WHERE A.UCUM = ItemPrimaryUOM OR A.UCUM = ItemPricingUOM
			        UNION
			        SELECT ItemPrimaryUOM AS UnitOfMeasure FROM SYS.DUAL
			        UNION
			        SELECT ItemPricingUOM AS UnitOfMeasure FROM SYS.DUAL) UOM,
		            [SCDATA].FQ67415  UOMByInstallation,
		            [SCDATA].FQ67415L  UOMLang
                WHERE 
                        UOMByInstallation.UMUOM = UOM.UnitOfMeasure
		            AND UOMByInstallation.UM$9INID = InstallationID
		            AND UOMLang.UMUOM(+) = UOMByInstallation.UMUOM
                    AND TRIM(UOMLang.UMLNGP(+)) = TRIM(LangPref)
		        ORDER BY UOM.UnitOfMeasure;
    ELSE
        OPEN ResultData1 FOR
	        --Item specific UOM Table
	        SELECT DISTINCT 
	            UOM.UnitOfMeasure AS UnitOfMeasure, 
	            NVL(UOMLang.UMDSC1, UOMByInstallation.UMDSC1) AS Description
	        FROM (
	              SELECT CAST(A.UMUM AS NVARCHAR2(3)) AS UnitOfMeasure FROM [SCDATA].F41002 A WHERE A.UMITM = ItemNumber
		          UNION
		          SELECT CAST(A.UMRUM AS NVARCHAR2(3)) AS UnitOfMeasure FROM [SCDATA].F41002 A WHERE A.UMITM = ItemNumber
		          UNION
		          SELECT ItemPrimaryUOM AS UnitOfMeasure FROM SYS.DUAL
		          UNION
		          SELECT ItemPricingUOM AS UnitOfMeasure FROM SYS.DUAL) UOM,
	              [SCDATA].FQ67415  UOMByInstallation,
	              [SCDATA].FQ67415L  UOMLang
            WHERE
                UOMLang.UMUOM(+) = UOMByInstallation.UMUOM
            AND TRIM(UOMLang.UMLNGP(+)) = TRIM(LangPref)
            AND UOMByInstallation.UMUOM = UOM.UnitOfMeasure
	        AND UOMByInstallation.UM$9INID = InstallationID
	        ORDER BY UOM.UnitOfMeasure;
	END IF;
END;
  /

-- #desc				    Get Web Content Detail
-- #bl_class			    Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies		    dbo.INV_GetItemWebContentDetLangs
-- #db_references			N/A

-- #param ItemNumber	    Item Number.
-- #param InstallationID    Installation ID.
-- #param DesignStatus      Desing Status.
-- #param UniqueKeyID       Unique Key ID.


CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetItemWebContentDetail
(
    InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL,
    DesignStatus    IN DECIMAL,
    UniqueKeyID     IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor,
    ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
	        CDITM AS ItemNumber
            ,CDUKID AS UniqueKeyID
            ,CD$9INID AS InstallationID
            ,CD$9DS AS DesignStatus
            ,CDSEQ AS SequenceNumber
            ,CD$9PTL AS ParagraphTitle
            ,CD$9HTML AS HtmlContent
            ,CDASAI AS ActiveInactive
            ,CDEFFF AS EffectiveFromDate
            ,CDEFFT AS EffectiveThruDate
            ,CDURDT AS UserReservedDate
            ,CDURAT AS UserReservedAmount
            ,CDURAB AS UserReservedNumber
            ,CDURRF AS UserReservedReference
            ,CDUSER AS UserId
            ,CDPID AS ProgramId
            ,CDJOBN AS WorkStationId
            ,CDUPMJ AS DateUpdated
            ,CDTDAY AS TimeOfDay
        FROM 
            [SCDATA].FQ67411
        WHERE 
                CDITM = ItemNumber 
	        AND CD$9INID = InstallationID 
            AND (DesignStatus IS NULL OR CD$9DS = DesignStatus) 
            AND CDUKID = UniqueKeyID;
          
       [SCLIBRARY].INV_GetItemWebContentDetLangs(InstallationID,ItemNumber,DesignStatus,UniqueKeyID,'*',ResultData2);
END;
  /

-- #desc					Get list of Details for Item number 
-- #bl_class				Premier.Inventory.ItemwebContentDetailList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number.
-- #param InstallationID	Installation ID.	
-- #param DesignStatus		Design Status. (Live Status = 0, Design Status = 1)
-- #param LangPref			Language Preference
-- #param Status			Active and Inactive, (Both = '*', Active= 'A', Inactive = 'I')
-- #param EffectiveOnly		Retrieve only the effective paragraphs for today or retrieve all paragraphs (0 = Off, 1 = ON)

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetItemWebContentDetList
(
    InstallationID  IN NVARCHAR2,
	ItemNumber      IN DECIMAL,
	DesignStatus    IN DECIMAL,
	LangPref        IN NVARCHAR2,
	Status			IN NVARCHAR2,
	EffectiveOnly	IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	COUNTTMP INT;
	InstallationIDTMP NVARCHAR2(3) := InstallationID;
	CurrentJulianDate decimal;
BEGIN
	
	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate(SYSDATE);
		
	IF(InstallationID <> '***')THEN
	SELECT COUNT(*) INTO COUNTTMP FROM [SCDATA].FQ67410 WHERE 
	    CH$9INID = InstallationID 
	    AND CHITM = ItemNumber 
	    AND CH$9DS = DesignStatus;
		    
		IF(COUNTTMP = 0) -- NOT EXISTS
		THEN
			InstallationIDTMP := '***';
		END IF;
	END IF;
	
    OPEN ResultData1 FOR
	    SELECT
		    A.CD$9INID AS InstallationID,
		    A.CDITM AS ItemNumber,
		    A.CDASAI AS ActiveInactive,
		    A.CD$9DS AS DesignStatus,
		    A.CDUKID   AS UniqueKeyID,
		    A.CDSEQ AS SequenceNumber,
		    NVL(B.CL$9PTL,A.CD$9PTL) AS ParagraphTitle,
		    NVL(B.CL$9HTML,A.CD$9HTML) AS HtmlContent,
		    A.CDEFFF AS EffectiveFromDate,
		    A.CDEFFT AS EffectiveThruDate
	    FROM
		    [SCDATA].FQ67411 A,
		    [SCDATA].FQ67411L B 
	    WHERE 
	            B.CL$9INID(+) = A.CD$9INID 
		    AND TRIM(B.CLLNGP(+)) = TRIM(LangPref)
		    AND B.CLITM(+) = A.CDITM 
		    AND B.CLUKID(+) = A.CDUKID 
		    AND B.CL$9DS(+) = A.CD$9DS
		    AND ItemNumber = CDITM 
		    AND CD$9INID = InstallationIDTMP
		    AND CD$9DS = DesignStatus
		    AND (TRIM(Status) = 'X' or TRIM(CDASAI) = TRIM(Status))		
			and (EffectiveOnly=0 OR(CurrentJulianDate >= A.CDEFFF AND CurrentJulianDate <= A.CDEFFT))  	
	    ORDER BY SequenceNumber ASC;
END;
  /
-- #desc				    Get Web Content Header
-- #bl_class			    Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies		    INV_GetItemWebContentHeadLangs
-- #db_references           N/A

-- #param ItemNumber	    Item Number.
-- #param InstallationID    Installation ID.
-- #param DesignStatus      Desing Status.

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetItemWebContentHeader
(
    InstallationID  IN NVARCHAR2,
	ItemNumber	    IN DECIMAL,
    DesignStatus    IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor,
    ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  CHITM AS ItemNumber
            , CH$9INID AS InstallationID
            , CH$9DS AS DesignStatus
            , CHDSC1 AS Description1
            , CHDSC2 AS Description2
            , CHDSC3 AS Description3
            , CH$9PRI AS MessagePriority
            , CH$9HTML AS HtmlContent
            , CHPTURL AS PortalUrl
            , CHURCD AS UserReservedCode
            , CHURDT AS UserReservedDate
            , CHURAT AS UserReservedAmount
            , CHURAB AS UserReservedNumber
            , CHURRF AS UserReservedReference
            , CHUSER AS UserId
            , CHPID AS ProgramId
            , CHJOBN AS WorkStationId
            , CHUPMJ AS DateUpdated
            , CHTDAY AS TimeOfDay
        FROM  
            [SCDATA].FQ67410
        WHERE  
            CHITM = ItemNumber
		    AND CH$9INID  =  InstallationID
		    AND (DesignStatus IS NULL OR CH$9DS = DesignStatus);
		
    [SCLIBRARY].INV_GetItemWebContentHeadLangs(InstallationID,ItemNumber,DesignStatus,'*', ResultData2);
END;



  /

-- #desc						Get Item Web Content Header Info Read Only
-- #bl_class					Premier.Inventory.ItemWebContentHeaderInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param ItemNumber			Item Number.
-- #param LangPref				Language Preference.
-- #param DesignStatus			Design Status


CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetItemWebContentHeadInfo
(
    InstallationID  IN NCHAR,
	ItemNumber      IN NUMBER,
	LangPref        IN NCHAR,	
	DesignStatus    IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	COUNTTMP INT;
	InstallationIDTMP NCHAR(3) := InstallationID;
BEGIN
	
	SELECT 
	    COUNT(1) INTO COUNTTMP 
	FROM 
	    [SCDATA].FQ67410 
	WHERE 
	        CH$9INID = InstallationID 
	    AND CHITM = ItemNumber 
	    AND CH$9DS = DesignStatus;
	    
    IF(COUNTTMP = 0) -- NOT EXISTS
	THEN
		InstallationIDTMP := '***';
	END IF;
    
    OPEN ResultData1 FOR
        SELECT  
		    IMITM AS ItemNumber,
			IMLITM AS LongItemNumber,
			IMAITM AS AuxItemNumber,
			CH$9INID AS InstallationID,
		    CH$9DS AS DesignStatus,
		    NVL(CLDSC1,CHDSC1) AS Description1,
		    NVL(CLDSC2,CHDSC2) AS Description2,
		    NVL(CLDSC3,CHDSC3) AS Description3,
		    CHUPMJ  AS PublishedSince,
		    0 AS DraftAndPublished,
		    NVL(CL$9HTML,CH$9HTML) AS HTML 
		FROM  
		    [SCDATA].FQ67410 CH
		INNER JOIN [SCDATA].F4101 IM
			ON IM.IMITM = CH.CHITM
		LEFT OUTER JOIN [SCDATA].FQ67410L CL
			ON CL.CLLNGP = LangPref
		    AND CL.CL$9INID = CH.CH$9INID 
		    AND CL.CLITM = CH.CHITM 
		    AND CL.CL$9DS = CH.CH$9DS
		WHERE CH$9INID = InstallationIDTMP 
		    AND CHITM = ItemNumber 
		    AND CH$9DS=DesignStatus;
END;
  /
-- #desc						Get Web Content Header List
-- #bl_class					Premier.Inventory.ItemWebContentHeaderList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param DesignStatus			Design STATUS.
-- #param FilterTerm			Filter Term.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemWebContentHeadList
(
      InstallationID    IN NCHAR,
      DesignStatus      IN NUMBER,
	  ItemNumber        IN NUMBER,
      FilterTerm        IN NCHAR,
	  ContentStatus	    IN DECIMAL,
      PageIndex		    IN INT,
      PageSize		    IN INT,
      TotalRowCount	    OUT INT,
      ResultData1		OUT   GLOBALPKG.refcursor
)
AS
	ROWSTART INT;
	ROWEND INT;
	
	/*Dynamic sql query*/
	SQL_DYNAMIC VARCHAR(8000);
	
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A';

	SQL_DYNAMIC := N'
    	INSERT INTO [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A( TBLItemNumber, TBLInstallationID, DesignStatus, LongItemNumber, AuxItemNumber, Description1, Description2, Description3, PublishedSince, DraftAndPublished) 
        WITH CTE AS (
		SELECT 
            ITEMS.CHITM,
			';
			IF(DesignStatus IS NULL) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N'
				NVL(DRAFT_INS.ch$9inid, NVL(LIVE_INS.ch$9inid, NVL(DRAFT_BASE.ch$9inid, LIVE_BASE.ch$9inid)))			TBLInstallationID,
				NVL(DRAFT_INS.Ch$9ds, NVL(LIVE_INS.Ch$9ds, NVL(DRAFT_BASE.Ch$9ds, LIVE_BASE.Ch$9ds) ))					DesignStatus,
				NVL(NVL(DRAFT_INS.CHDSC1, NVL(LIVE_INS.CHDSC1, NVL(DRAFT_BASE.CHDSC1, LIVE_BASE.CHDSC1))),'' '')		CHDSC1,
				NVL(NVL(DRAFT_INS.CHDSC2, NVL(LIVE_INS.CHDSC2, NVL(DRAFT_BASE.CHDSC2, LIVE_BASE.CHDSC2))),'' '')	CHDSC2,
				NVL(NVL(DRAFT_INS.CHDSC3, NVL(LIVE_INS.CHDSC3, NVL(DRAFT_BASE.CHDSC3, LIVE_BASE.CHDSC3))),'' '')		CHDSC3,
				';
			ELSIF(DesignStatus = 1) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N'
				CASE WHEN (DRAFT_INS.CH$9DS IS NOT NULL) THEN DRAFT_INS.CH$9INID ELSE DRAFT_BASE.CH$9INID END	TBLInstallationID,
				CASE WHEN (DRAFT_INS.CH$9DS IS NOT NULL) OR (DRAFT_BASE.CH$9DS IS NOT NULL AND LIVE_INS.CH$9DS IS NULL) THEN 1 ELSE 0 END	DesignStatus,
				NVL(NVL(DRAFT_INS.CHDSC1, DRAFT_BASE.CHDSC1), '' '')	CHDSC1,
				NVL(NVL(DRAFT_INS.CHDSC2, DRAFT_BASE.CHDSC2), '' '')	CHDSC2,
				NVL(NVL(DRAFT_INS.CHDSC3, DRAFT_BASE.CHDSC3), '' '')	CHDSC3,
				';
			ELSIF(DesignStatus = 0) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N'
				CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) THEN LIVE_INS.CH$9INID ELSE LIVE_BASE.CH$9INID END	TBLInstallationID,
				CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) OR  (LIVE_BASE.CH$9DS IS NOT NULL) THEN 0 ELSE 1 END	DesignStatus,
				NVL(NVL(LIVE_INS.CHDSC1, LIVE_BASE.CHDSC1), '' '')	CHDSC1,
				NVL(NVL(LIVE_INS.CHDSC2, LIVE_BASE.CHDSC2), '' '')	CHDSC2,
				NVL(NVL(LIVE_INS.CHDSC3, LIVE_BASE.CHDSC3), '' '')	CHDSC3,
				';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N'
				CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) THEN LIVE_INS.CH$9INID ELSE LIVE_BASE.CH$9INID END	TBLInstallationID,
				CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) OR  (LIVE_BASE.CH$9DS IS NOT NULL) THEN 0 ELSE 1 END	DesignStatus,
				NVL(NVL(DRAFT_INS.CHDSC1, NVL(LIVE_INS.CHDSC1, NVL(DRAFT_BASE.CHDSC1, LIVE_BASE.CHDSC1))),'' '')	CHDSC1,
				NVL(NVL(DRAFT_INS.CHDSC2, NVL(LIVE_INS.CHDSC2, NVL(DRAFT_BASE.CHDSC2, LIVE_BASE.CHDSC2))),'' '')	CHDSC2,
				NVL(NVL(DRAFT_INS.CHDSC3, NVL(LIVE_INS.CHDSC3, NVL(DRAFT_BASE.CHDSC3, LIVE_BASE.CHDSC3))),'' '')	CHDSC3,
				';
			END IF;

			SQL_DYNAMIC := SQL_DYNAMIC || N'
            CASE
				WHEN
                (DRAFT_INS.chitm is not null OR LIVE_INS.chitm is not null) THEN NVL(LIVE_INS.CHUPMJ,0 ) ELSE
				NVL(LIVE_BASE.CHUPMJ ,0)  
			END as PublishedSince,
			CASE 
				WHEN (DRAFT_INS.CHITM IS NOT NULL AND LIVE_INS.CHITM IS NOT NULL)THEN 1 
				WHEN (DRAFT_INS.CHITM IS NULL AND LIVE_INS.CHITM IS NULL AND DRAFT_BASE.CHITM IS NOT NULL AND LIVE_BASE.CHITM IS NOT NULL)THEN 1 
				WHEN (DRAFT_INS.CHITM IS NOT NULL AND LIVE_INS.CHITM IS NULL AND LIVE_BASE.CHITM IS NOT NULL) THEN 1
				ELSE 0
			END AS DraftAndPublished	
            
			FROM 
                (SELECT DISTINCT CHITM
                    FROM [SCDATA].FQ67410
                    WHERE 
                        CH$9INID IN (:InstallationID, ''***'' ) 
                        AND ( :DesignStatus IS NULL OR CH$9DS = :DesignStatus )) ITEMS
                
				LEFT OUTER JOIN [SCDATA].FQ67410 LIVE_INS
                    ON LIVE_INS.CHITM = ITEMS.CHITM
                        AND LIVE_INS.CH$9INID = :InstallationID
						AND LIVE_INS.CH$9DS = 0 

                LEFT OUTER JOIN [SCDATA].FQ67410 DRAFT_INS
					ON DRAFT_INS.CHITM = ITEMS.CHITM 
                        AND DRAFT_INS.CH$9INID = :InstallationID
                        AND DRAFT_INS.CH$9DS = 1

				LEFT OUTER JOIN [SCDATA].FQ67410 LIVE_BASE
					ON LIVE_BASE.CHITM = ITEMS.CHITM 
                        AND LIVE_BASE.CH$9INID = ''***''
						AND LIVE_BASE.CH$9DS = 0

				LEFT OUTER JOIN [SCDATA].FQ67410 DRAFT_BASE
                        ON DRAFT_BASE.CHITM = ITEMS.CHITM
                        AND DRAFT_BASE.CH$9INID = ''***'' 
                        AND DRAFT_BASE.CH$9DS = 1 
		)
		SELECT
			CHITM,
			TBLInstallationID,/*Installation ID*/
			A.DesignStatus,/*Design Status*/
			MAS.IMLITM,
			MAS.IMAITM,
			A.CHDSC1,
			A.CHDSC2,
			A.CHDSC3,	
			A.PublishedSince,
			A.DraftAndPublished
		FROM CTE A
		INNER JOIN [SCDATA].F4101 MAS
			ON A.CHITM = MAS.IMITM
		WHERE ';

		IF  (FilterTerm <> '*' OR ItemNumber IS NOT NULL) THEN  
			IF (ItemNumber IS NOT NULL) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N'
				(A.CHITM = :ItemNumber 
				OR ( UPPER( A.CHDSC1 || '' '' || A.CHDSC2 || '' '' || A.CHDSC3 || '' '' || MAS.IMLITM || '' '' || MAS.IMAITM) LIKE ''%'' || :FilterTerm || ''%'')) ';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N'
				((1 = 1 OR :ItemNumber IS NULL) 
				AND ( UPPER( A.CHDSC1 || '' '' || A.CHDSC2 || '' '' || A.CHDSC3 || '' '' || MAS.IMLITM || '' '' || MAS.IMAITM) LIKE ''%'' || :FilterTerm || ''%'')) ';
			END IF;
		ELSE
			SQL_DYNAMIC := SQL_DYNAMIC || N' (1 = 1 OR :ItemNumber IS NULL) AND (1 = 1 OR :FilterTerm = ''*'') ';
		END IF;


		EXECUTE IMMEDIATE SQL_DYNAMIC USING InstallationID, DesignStatus, DesignStatus, InstallationID, InstallationID, ItemNumber, FilterTerm;


	/*If the filter is ALL then delete Published version when the item has a draft copy*/
	IF (DesignStatus IS NULL OR DesignStatus = 2) THEN
		DELETE FROM [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A A 
		WHERE A.DESIGNSTATUS = 0 AND DraftAndPublished = 1;	
	/*If the filter is Design then delete Published records and viceversa*/
	ELSIF (DesignStatus = 0) THEN
		DELETE FROM [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A A
		WHERE  A.DesignStatus = 1;
	ELSIF (DesignStatus = 1) THEN
		DELETE FROM [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A A
		WHERE  A.DesignStatus = 0;
	END IF;


    IF (ContentStatus = 0) THEN
		DELETE FROM [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A A
		WHERE A.TBLInstallationID = '***';
	ELSIF (ContentStatus = 1) THEN
		DELETE FROM [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A A
		WHERE A.TBLInstallationID = InstallationID;
	END IF;
	
	-- Obtain the total count of the result
	-------------------------------------------------------
	SELECT COUNT(1) INTO TotalRowCount FROM [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A; 

	-------------------------------------------------------
	-- Validate if paging is not required
	-------------------------------------------------------
	IF(PageIndex = 0 OR PageSize = 0)
	THEN
		-------------------------------------------------------
		-- Set the first row to be selected
		-------------------------------------------------------
		ROWSTART := 1;
		-------------------------------------------------------
		-- Set the last row to be selected
		-------------------------------------------------------
		ROWEND := TotalRowCount;
	ELSE
		-------------------------------------------------------
		-- Set the first row to be selected
		-------------------------------------------------------
		ROWSTART := (PageSize * PageIndex) - PageSize + 1;
		-------------------------------------------------------
		-- Set the last row to be selected
		-------------------------------------------------------
		ROWEND := PageIndex * PageSize;
	END IF;

	OPEN ResultData1 FOR
	    --Select From Temporary Table
	    SELECT
			  TBLItemNumber AS ItemNumber,
			  LongItemNumber,
			  AuxItemNumber,
		      TBLInstallationID AS InstallationID
		      ,DesignStatus
		      ,Description1
		      ,Description2
		      ,Description3 
		      ,PublishedSince
          ,DraftAndPublished
		      ,'' AS HTML
	      FROM
			(SELECT A.*, ROW_NUMBER() OVER(ORDER BY TBLItemNumber) ROWNU FROM [SCLIBRARY].INV_GETITEMWEBCONHEADLIST_A A)
      WHERE ROWNU BETWEEN  ROWSTART AND ROWEND
	    ;
END;
  /

-- #desc					Reads installations that share the content
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetItemWebContSharedInst
(
	ItemNumber	    IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
			IN$9INID AS InstallationId,
			INDSC1 AS Description,
			IN$9APFL AS ApplicationUseFlag
		FROM 
			[SCDATA].FQ670001
		WHERE 
			IN$9INID NOT IN (SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE CHITM = ItemNumber);
END;



  /

-- #bl_class							Premier.Inventory.KitComponentList.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param InstallationID				InstallationID 
-- #param AddressNumber					AddressNumber
-- #param ItemNumber					Parent (short) Item Number
-- #param BranchPlant					BranchPlant
-- #param Company						Company
-- #param RetrieveWebContentInfo		Retrieve Web Content Info
-- #param LangPref						Language Preference


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetKitComponentsList
(
	InstallationID	IN NCHAR,
	AddressNumber	IN NUMBER,
	ItemNumber		IN NUMBER,
	BranchPlant		IN NCHAR,
	Company			IN NCHAR,
	RetrieveWebContentInfo	IN INT,
	LangPref		IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	ItemRestrictionsCode NCHAR(1) := NULL;
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETKITCOMPONENTSLIST_A';
	
	-- Get ItemRestrictionsCode
	BEGIN
		SELECT AIEDF2 INTO ItemRestrictionsCode FROM [SCDATA].F03012 WHERE AIAN8 = AddressNumber AND AICO = Company;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		ItemRestrictionsCode := NULL;	
	END;
	
	IF(ItemRestrictionsCode IS NULL)THEN
		BEGIN
			SELECT AIEDF2 INTO ItemRestrictionsCode FROM [SCDATA].F03012 WHERE AIAN8 = AddressNumber AND AICO = '00000';
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			ItemRestrictionsCode := NULL;
		END;
	END IF;

	
	INSERT INTO [SCLIBRARY].INV_GETKITCOMPONENTSLIST_A
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		0			AS FeatureParentItem,
		KT.IXITM	AS ComponentItemNumber,
		KT.IXCPNB	AS ComponentLineNumber,
		KT.IXOPTK	AS ComponentType,
		KT.IXFTRC	AS Required,
		KT.IXQNTY	AS Quantity,
		KT.IXUOM	AS UnitOfMeasure
	FROM 
		[SCDATA].F3002 KT
	WHERE
		KT.IXKIT = ItemNumber 
		AND IXMMCU = BranchPlant
		AND IXTBM = 'M'
	UNION
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		ItemNumber	AS FeatureParentItem,
		KT.IXITM	AS ComponentItemNumber,
		KT.IXCPNB	AS ComponentLineNumber,
		KT.IXOPTK	AS ComponentType,
		KT.IXFTRC	AS Required,
		KT.IXQNTY	AS Quantity,
		KT.IXUOM	AS UnitOfMeasure
	FROM 
		[SCDATA].F3002 KT
	WHERE KT.IXKIT in (SELECT IXITM FROM [SCDATA].F3002 WHERE
						IXKIT = ItemNumber
						AND IXMMCU = BranchPlant
						AND IXOPTK ='F'
						AND IXTBM = 'M');
	
	
	IF(ItemRestrictionsCode = 'E') THEN	--Exclude
		
		DELETE FROM [SCLIBRARY].INV_GETKITCOMPONENTSLIST_A A
		WHERE A.ComponentType = 'O' AND
		EXISTS(SELECT SXXRVF FROM [SCDATA].F4013 R
							WHERE R.SXXRVF = AddressNumber 
							AND R.SXXRVT = A.ComponentItemNumber
							AND R.SXEDF1 = 'S' AND R.SXXRTC = 'IR');
							
	ELSIF(ItemRestrictionsCode = 'I') THEN	--Include
	
		DELETE FROM [SCLIBRARY].INV_GETKITCOMPONENTSLIST_A A
		WHERE 
			A.ComponentType = 'O' AND
			A.ComponentItemNumber NOT IN (SELECT SXXRVT FROM [SCDATA].F4013 WHERE SXXRVF = AddressNumber AND SXEDF1 = 'S' AND SXXRTC = 'IR');
			
	END IF;
	
	IF(RetrieveWebContentInfo = 1) THEN  

		OPEN ResultData1 FOR
		SELECT
			KT.ParentItemNumber		AS ParentItemNumber,
			KT.FeatureParentItem	AS FeatureParentItem,
			KT.ComponentItemNumber	AS ComponentItemNumber,
			IM.IMLITM				AS LongItemNumber,
			IM.IMAITM				AS AuxItemNumber,
			KT.ComponentLineNumber	AS ComponentLineNumber,
			KT.ComponentType		AS ComponentType,
			KT.Required				AS Required,
			KT.Quantity				AS Quantity,
			KT.UnitOfMeasure		AS UnitOfMeasure,
			NVL(NVL(UOMLNG.UMDSC1, UOM.UMDSC1), KT.UnitOfMeasure)	AS UnitOfMeasureDesc,
			NVL(ContenDesc.DESC1, IM.IMDSC1)	AS ItemDescription1,
			NVL(ContenDesc.DESC2, IM.IMDSC2)	AS ItemDescription2,
			ContenDesc.URL AS URL
		FROM 
			[SCLIBRARY].INV_GETKITCOMPONENTSLIST_A KT
		INNER JOIN [SCDATA].F4101 IM	--ITEM MASTER
			ON IM.IMITM = KT.ComponentItemNumber 
		LEFT JOIN [SCDATA].FQ67415 UOM
			ON UOM.UMUOM = KT.UnitOfMeasure
			AND UOM.UM$9INID = InstallationID
		LEFT JOIN [SCDATA].FQ67415L UOMLNG
			ON UOMLNG.UMUOM = UOM.UMUOM
			AND UOMLNG.UMLNGP = LangPref
		LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, IM.IMITM, LangPref, 0) ) ContenDesc 
				ON ContenDesc.DESCITM = IM.IMITM
		ORDER BY KT.ParentItemNumber,KT.ComponentLineNumber;
		
	ELSE

		OPEN ResultData1 FOR
		SELECT
			KT.ParentItemNumber		AS ParentItemNumber,
			KT.FeatureParentItem	AS FeatureParentItem,
			KT.ComponentItemNumber	AS ComponentItemNumber,
			IM.IMLITM				AS LongItemNumber,
			IM.IMAITM				AS AuxItemNumber,
			KT.ComponentLineNumber	AS ComponentLineNumber,
			KT.ComponentType		AS ComponentType,
			KT.Required				AS Required,
			KT.Quantity				AS Quantity,
			KT.UnitOfMeasure		AS UnitOfMeasure,
			NVL(NVL(UOMLNG.UMDSC1, UOM.UMDSC1), KT.UnitOfMeasure)	AS UnitOfMeasureDesc,
			IM.IMDSC1				AS ItemDescription1, /* Retrieve Description 1 for Tracking lines */
			N''						AS ItemDescription2,
			N''						AS URL
		FROM 
			[SCLIBRARY].INV_GETKITCOMPONENTSLIST_A KT
		INNER JOIN [SCDATA].F4101 IM	--ITEM MASTER
			ON IM.IMITM = KT.ComponentItemNumber 
		LEFT JOIN [SCDATA].FQ67415 UOM
			ON UOM.UMUOM = KT.UnitOfMeasure
			AND UOM.UM$9INID = InstallationID
		LEFT JOIN [SCDATA].FQ67415L UOMLNG
			ON UOMLNG.UMUOM = UOM.UMUOM
			AND UOMLNG.UMLNGP = LangPref
		LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, IM.IMITM, LangPref, 0) ) ContenDesc 
				ON ContenDesc.DESCITM = IM.IMITM
		ORDER BY KT.ParentItemNumber,KT.ComponentLineNumber;
		
	END IF;

END;
  /

-- #desc						Get LineType Item info
-- #bl_class					Premier.Inventory.LineTypeInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LineType				Line Type Id

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetLineTypeInfo
(
	LineType    IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT
		    A.LFLNTY LineType, 
		    A.LFLNDS Description1, 
		    A.LFLND2 Description2,
			A.LFTX01 IsTaxable
	    FROM 
		    [SCDATA].F40205 A 
	    WHERE 
		    TRIM(A.LFLNTY) = TRIM(LineType);
END;
                 
  /

-- #desc					Gets itemNumber List
-- #bl_class				Premier.Inventory.LineTypeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param LineType			Line Type
-- #param Description1		Description1
-- #param Description2		Description2

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetLineTypeList
(
	LineType        IN NVARCHAR2,
	Description1	IN NVARCHAR2,
	Description2	IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT
		    A.LFLNTY LineType, 
		    A.LFLNDS Description1, 
		    A.LFLND2 Description2,
			A.LFTX01 IsTaxable
	    FROM 
		    [SCDATA].F40205 A 
	    WHERE 
		    (LineType = '*' OR UPPER(TRIM(A.LFLNTY)) = UPPER(TRIM(LineType))) 
		    AND (Description1 = '*' OR UPPER(TRIM(A.LFLNDS)) LIKE '%' || UPPER(TRIM(Description1)) || '%') 
		    AND (Description2 = '*' OR UPPER(TRIM(A.LFLND2)) LIKE '%' || UPPER(TRIM(Description2)) || '%');
END;
               
   
  /

-- #desc						Gets list of Matrix segment values for an specific segment
-- #bl_class					Premier.Inventory.MatrixAttributeValueList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Template				Template
-- #param Style					Style =  Segment 1
-- #param SegmentNumber			Segment Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetMatrixAttrValueList
(
	Template		IN NCHAR,
	Style			IN NCHAR,
	SegmentNumber	IN INT,
	ResultData1 OUT GLOBALPKG.refcursor    
)
AS
	VerticalSegment NUMBER(6,0) := 0;
	HorizontalSegment NUMBER(6,0) := 0;
BEGIN

    BEGIN
		/* Retrieve horizontal and vertical segment numbers */
        SELECT MTM.T7HSEG,			
            (CASE 
                WHEN MTM.T7HSEG =  MTM.T7NSEG THEN MTM.T7NSEG - 1 
                ELSE MTM.T7NSEG 
            END)   		
        INTO HorizontalSegment, VerticalSegment
        FROM [SCDATA].F410014 MTM
        WHERE MTM.T7TMPL= Template;
        EXCEPTION WHEN NO_DATA_FOUND THEN
        HorizontalSegment := 0;  
        VerticalSegment := 0;
    END;
	
	IF (Style = N'*') THEN
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				A.S0TMPL AS Template,
				CASE SegmentNumber
					WHEN 2 THEN A.S0SEG2
					WHEN 3 THEN A.S0SEG3
					WHEN 4 THEN A.S0SEG4
					WHEN 5 THEN A.S0SEG5
					WHEN 6 THEN A.S0SEG6
					WHEN 7 THEN A.S0SEG7
					WHEN 8 THEN A.S0SEG8
					WHEN 9 THEN A.S0SEG9
					WHEN 0 THEN A.S0SEG0
				END AS SegmentValue,
				CASE SegmentNumber
					WHEN 2 THEN A.S0SGD2
					WHEN 3 THEN A.S0SGD3
					WHEN 4 THEN A.S0SGD4
					WHEN 5 THEN A.S0SGD5
					WHEN 6 THEN A.S0SGD6
					WHEN 7 THEN A.S0SGD7
					WHEN 8 THEN A.S0SGD8
					WHEN 9 THEN A.S0SGD9
					WHEN 0 THEN A.S0SGD0
				END AS SegmentDescription,
				CASE 
					WHEN SegmentNumber = VerticalSegment THEN S0MRNO
					WHEN SegmentNumber = HorizontalSegment THEN S0MCNO
					ELSE 0
				END AS SegmentSequence
			FROM 
				[SCDATA].F41008 A
			WHERE
				A.S0TMPL = Template
		)
		/* Distinct without SegmentDescription to avoid same code with different description */
		SELECT 
			B.Template,
			Style	AS Style,
			SegmentNumber AS SegmentNumber, 
			B.SegmentValue, 
			MAX(B.SegmentDescription) AS SegmentDescription,
			MIN(B.SegmentSequence) AS SegmentSequence
		FROM 
			CTE B
		WHERE 
			B.SegmentValue <> N' '
		GROUP BY B.Template, B.SegmentValue;
	ELSE 
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				A.S0TMPL AS Template,
				CASE SegmentNumber
					WHEN 2 THEN A.S0SEG2
					WHEN 3 THEN A.S0SEG3
					WHEN 4 THEN A.S0SEG4
					WHEN 5 THEN A.S0SEG5
					WHEN 6 THEN A.S0SEG6
					WHEN 7 THEN A.S0SEG7
					WHEN 8 THEN A.S0SEG8
					WHEN 9 THEN A.S0SEG9
					WHEN 0 THEN A.S0SEG0
				END AS SegmentValue,
				CASE SegmentNumber
					WHEN 2 THEN A.S0SGD2
					WHEN 3 THEN A.S0SGD3
					WHEN 4 THEN A.S0SGD4
					WHEN 5 THEN A.S0SGD5
					WHEN 6 THEN A.S0SGD6
					WHEN 7 THEN A.S0SGD7
					WHEN 8 THEN A.S0SGD8
					WHEN 9 THEN A.S0SGD9
					WHEN 0 THEN A.S0SGD0
				END AS SegmentDescription,
				CASE 
					WHEN SegmentNumber = VerticalSegment THEN S0MRNO
					WHEN SegmentNumber = HorizontalSegment THEN S0MCNO
					ELSE 0
				END AS SegmentSequence
			FROM 
				[SCDATA].F41008 A
			WHERE  
				A.S0TMPL = Template 
				AND A.S0SEG1 = Style
		)
		/* Distinct without Description to avoid same code with different description */
		SELECT 
			B.Template,
			Style			AS Style,
			SegmentNumber	AS SegmentNumber, 
			B.SegmentValue, 
			MAX(B.SegmentDescription) AS SegmentDescription,
			MIN(B.SegmentSequence) AS SegmentSequence
		FROM 
			CTE B
		WHERE 
			B.SegmentValue <> N' '
		GROUP BY B.Template, B.SegmentValue;
	END IF;
END;
  /

-- #desc							
-- #bl_class						Premier.Inventory.MatrixItemList.cs
-- #db_dependencies					N/A
-- #db_references					N/A						

-- #param InstallationID			Installation Id
-- #param Template					Matrix Template

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetMatrixItemList
(
  InstallationID    IN NCHAR,
  ItemNumber		IN NUMBER,
  Template			IN NCHAR,
  ResultData1       OUT GLOBALPKG.refcursor
)
AS
	Segment1			  NCHAR(10);
BEGIN

	/*Get Segment 1*/
	BEGIN
		SELECT IMSEG1 INTO Segment1
		FROM [SCDATA].F4101 WHERE IMITM = ItemNumber AND IMTMPL = Template AND IMMIC = '1'; -- IMMIC = 1 Parent Matrix Item
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		Segment1 := NULL;
	END;

    OPEN ResultData1 FOR
		SELECT 
			InstallationID	AS InstallationID, 
			' '				AS BranchPlant, 
			' '				AS BranchPlantDesc, 
			A.IMITM			AS ItemNumber, 
			A.IMLITM		AS LongItemNumber, 
			A.IMAITM		AS AuxItemNumber,
			NVL(ContenDesc.DESC1, A.IMDSC1)	AS Description1,
			NVL(ContenDesc.DESC2, A.IMDSC2)	AS Description2,
			' '				AS URL,
			A.IMUOM1		AS PrimaryUnitOfMeasure,
			A.IMUOM2		AS SecondaryUnitOfMeasure,
			A.IMUOM4		AS PricingUnitOfMeasure,
			A.IMSRTX		AS SearchItemText,
			A.IMSTKT		AS StockingType ,
			A.IMLNTY		AS LineType ,
			' '				AS InventoryFlag,
			A.IMIFLA		AS ItemFlashMessage,
			A.IMTMPL		AS MatrixTemplate,
			A.IMMIC			AS MatrixControlled,
			0				AS MatrixParentItemNumber,
			0				AS AddressNumber,
			' '				AS AllowPickup,
			IMCYCL			AS CYCL,
			IMPRP0			AS PRP0,
			IMPRP1			AS PRP1,
			IMPRP2			AS PRP2,
			IMPRP3			AS PRP3,
			IMPRP4			AS PRP4,
			IMPRP5			AS PRP5,
			IMPRP6			AS PRP6,
			IMPRP7			AS PRP7,
			IMPRP8			AS PRP8,
			IMPRP9			AS PRP9,
			IMSHCM			AS SHCM,
			IMSHCN			AS SHCN,
			IMSRP0			AS SRP0,
			IMSRP1			AS SRP1,
			IMSRP2			AS SRP2,
			IMSRP3			AS SRP3,
			IMSRP4			AS SRP4,
			IMSRP5			AS SRP5,
			IMSRP6			AS SRP6,
			IMSRP7			AS SRP7,
			IMSRP8			AS SRP8,
			IMSRP9			AS SRP9
       FROM [SCDATA].F4101 A  /*Item Master*/
	   LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.IMITM, ' ', 0) ) ContenDesc 
			ON ContenDesc.DESCITM = A.IMITM
       WHERE A.IMTMPL = Template  AND A.IMSEG1 = Segment1 AND A.IMMIC = '2';
END;
  /

-- #bl_class								Premier.Inventory.MatrixTemplateItemList
-- #db_dependencies							N/A
-- #db_references							N/A

-- #param StoreId							Store Id
-- #param Template							Template
-- #param Style								Style =  Segment 1
-- #param ChildItemNumber					Optional Short Item Number
-- #param BranchPlant						Optional Branch Plant (MCU)
-- #param SearchValue						Optional Search Value
-- #param SearchCriteria					Optional Search Criteria
-- #param PageIndex							Optional Page Index
-- #param PageSize							Optional Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetMatrixTemplateItemList
(
	StoreId			IN NCHAR,
	Template		IN NCHAR,
	Style			IN NCHAR,
	ChildItemNumber	IN NUMBER,
	BranchPlant		IN NCHAR,
	SearchValue     IN NCHAR,
	SearchCriteria  IN NCHAR,
	PageIndex		IN INT,
	PageSize		IN INT,
	ResultData1 OUT GLOBALPKG.refcursor    
)
AS

	/* Dynamic */
	SQL_DYNAMIC			VARCHAR2(9000);
	WHERE_DYNAMIC		NVARCHAR2(5000) := ' ';

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    RowEnd INT := (PageIndex * PageSize);

BEGIN	

	/*Child Item Number conditions*/
	IF(ChildItemNumber IS NOT NULL) THEN		
		WHERE_DYNAMIC := N' AND M.S0ITM = :ChildItemNumber ';
	ELSE
		WHERE_DYNAMIC := N' AND (1 = 1 OR :ChildItemNumber IS NULL) ';
	END IF;	
	
	/*Branch Plant conditions*/
	IF(BranchPlant <> '*') THEN		
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND C.BIMCU = :BranchPlant ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :BranchPlant = ''*'') ';
	END IF;	

	/* Dynamic query conditions */
	IF (SearchValue <> '*') THEN
		IF(SearchCriteria = '0') THEN /*Product Number*/
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND D.IMLITM LIKE ''%'' || :SearchValue || ''%'' ';
		ELSIF (SearchCriteria = '1') THEN  /*Description*/
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(LTRIM(RTRIM(D.IMDSC1))) || '' '' || UPPER(D.IMDSC2) LIKE ''%'' || :SearchValue || ''%'' ';
		ELSE /*Product Number and Description*/
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND LTRIM(RTRIM(D.IMLITM)) || '' '' || UPPER(LTRIM(RTRIM(D.IMDSC1))) || '' '' || UPPER(D.IMDSC2) LIKE ''%'' || :SearchValue || ''%'' ';
		END IF;	
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :SearchValue = ''*'') ';
	END IF;

	SQL_DYNAMIC := N'
	WITH CTE AS (
		SELECT
			M.S0ITM		AS ItemNumber,
			D.IMLITM	AS LongItemNumber,
			D.IMAITM	AS AuxItemNumber,
			D.IMDSC1    AS Description1,
			D.IMDSC2    AS Description2,
			M.S0MRNO	AS RowNumber,
			M.S0MCNO	AS ColumnNumber,
			M.S0SEG1	AS Segment1,
			M.S0SGD1	AS Segment1Desc,
			M.S0SEG2	AS Segment2,
			M.S0SGD2	AS Segment2Desc,
			M.S0SEG3	AS Segment3,
			M.S0SGD3	AS Segment3Desc,
			M.S0SEG4	AS Segment4,
			M.S0SGD4	AS Segment4Desc,
			M.S0SEG5	AS Segment5,
			M.S0SGD5	AS Segment5Desc,
			M.S0SEG6	AS Segment6,
			M.S0SGD6	AS Segment6Desc,
			M.S0SEG7	AS Segment7,
			M.S0SGD7	AS Segment7Desc,
			M.S0SEG8	AS Segment8,
			M.S0SGD8	AS Segment8Desc,
			M.S0SEG9	AS Segment9,
			M.S0SGD9	AS Segment9Desc,
			M.S0SEG0	AS Segment10,
			M.S0SGD0	AS Segment10Desc,
			ROW_NUMBER() OVER(PARTITION BY M.S0ITM ORDER BY M.S0ITM) AS RNUM /* Top 1 */			
		FROM
			[SCDATA].F41008 M
		INNER JOIN [SCDATA].F4102 B
			ON B.IBITM = M.S0ITM
		INNER JOIN [SCDATA].F4101 D
			ON D.IMITM= M.S0ITM
		INNER JOIN [SCDATA].FQ679910 C
			ON C.BI$9INID = :StoreId
			AND C.BIMCU = B.IBMCU
		WHERE
			M.S0SEG1 = :Style 
			AND M.S0TMPL = :Template 	
			AND D.IMSTKT <> N''N''
			AND (D.IMTMPL = N'' '' OR (D.IMTMPL <> N'' '' AND D.IMMIC IN (N''1'', N''2'', N'' '')))
			'|| WHERE_DYNAMIC ||'
	UNION
		SELECT
			M.S0ITM		AS ItemNumber,
			D.IMLITM	AS LongItemNumber,
			D.IMAITM	AS AuxItemNumber,
			D.IMDSC1    AS Description1,
			D.IMDSC2    AS Description2,
			M.S0MRNO	AS RowNumber,
			M.S0MCNO	AS ColumnNumber,
			M.S0SEG1	AS Segment1,
			M.S0SGD1	AS Segment1Desc,
			M.S0SEG2	AS Segment2,
			M.S0SGD2	AS Segment2Desc,
			M.S0SEG3	AS Segment3,
			M.S0SGD3	AS Segment3Desc,
			M.S0SEG4	AS Segment4,
			M.S0SGD4	AS Segment4Desc,
			M.S0SEG5	AS Segment5,
			M.S0SGD5	AS Segment5Desc,
			M.S0SEG6	AS Segment6,
			M.S0SGD6	AS Segment6Desc,
			M.S0SEG7	AS Segment7,
			M.S0SGD7	AS Segment7Desc,
			M.S0SEG8	AS Segment8,
			M.S0SGD8	AS Segment8Desc,
			M.S0SEG9	AS Segment9,
			M.S0SGD9	AS Segment9Desc,
			M.S0SEG0	AS Segment10,
			M.S0SGD0	AS Segment10Desc,
			ROW_NUMBER() OVER(PARTITION BY M.S0ITM ORDER BY M.S0ITM) AS RNUM /* Top 1 */			
		FROM
			[SCDATA].F41008 M
		INNER JOIN [SCDATA].F4101 D
			ON D.IMITM= M.S0ITM
		WHERE
			M.S0SEG1 = :Style 
			AND M.S0TMPL = :Template 	
			AND D.IMSTKT = N''N''
			AND (D.IMTMPL = N'' '' OR (D.IMTMPL <> N'' '' AND D.IMMIC IN (N''1'', N''2'', N'' '')))
			'|| WHERE_DYNAMIC ||'
	), PAGING AS (
		SELECT 
		ItemNumber,
		LongItemNumber,
		AuxItemNumber,
		Description1,
		Description2,
		RowNumber,
		ColumnNumber,
		Segment1,
		Segment1Desc,
		Segment2,
		Segment2Desc,
		Segment3,
		Segment3Desc,
		Segment4,
		Segment4Desc,
		Segment5,
		Segment5Desc,
		Segment6,
		Segment6Desc,
		Segment7,
		Segment7Desc,
		Segment8,
		Segment8Desc,
		Segment9,
		Segment9Desc,
		Segment10,
		Segment10Desc,
		ROW_NUMBER() OVER(ORDER BY ItemNumber) AS PAGINATION
	FROM 
		CTE
	WHERE RNUM = 1	
	)
	SELECT 
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		A.RowNumber,
		A.ColumnNumber,
		A.Segment1,
		A.Segment1Desc,
		A.Segment2,
		A.Segment2Desc,
		A.Segment3,
		A.Segment3Desc,
		A.Segment4,
		A.Segment4Desc,
		A.Segment5,
		A.Segment5Desc,
		A.Segment6,
		A.Segment6Desc,
		A.Segment7,
		A.Segment7Desc,
		A.Segment8,
		A.Segment8Desc,
		A.Segment9,
		A.Segment9Desc,
		A.Segment10,
		A.Segment10Desc,
		(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
	FROM 
		PAGING A
	WHERE ((:PageIndex  = 0 OR :PageSize = 0) OR (PAGINATION BETWEEN :RowStart AND :RowEnd)) ';

	OPEN ResultData1 FOR SQL_DYNAMIC USING StoreId, Style, Template, ChildItemNumber, BranchPlant, SearchValue,
	PageIndex, PageSize, RowStart, RowEnd;	
END;
  /

-- #bl_class						Premier.Inventory.ProductCrossRefCodeList.cs
-- #desc							Returns Product list with the associated cross-reference
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param CrossReferenceTypesXML	Cross Reference Types (XRT) XML: <products><product>60011</product><product>60020</product></products>
-- #param ProductNumbersXML			Product Numbers (ITM) XML: <codes><code>C</code><code>R</code></codes>

CREATE OR REPLACE  PROCEDURE   [SCLIBRARY].INV_GetProdCrossRefCodeLst
(
	ProductNumbersXML	XMLType,
	CrossReferenceTypesXML	XMLType,
	ResultData1 OUT  GLOBALPKG.refcursor
)

AS
	
BEGIN --Region Data of Items	
	OPEN ResultData1 FOR
	SELECT
		A.IVITM		AS ShortProductNumber,
		A.IVCITM	AS CrossReference,
		A.IVXRT		AS CrossReferenceType
	FROM 
		[SCDATA].F4104 A
	INNER JOIN XMLTABLE ('/products/product'
					PASSING ProductNumbersXML
					COLUMNS shortItemNumber NUMBER PATH 'text()') products 
		ON A.IVITM = products.shortItemNumber 
	INNER JOIN XMLTABLE ('/codes/code'
					PASSING CrossReferenceTypesXML
					COLUMNS code NCHAR(2) PATH 'text()') codes 
		ON A.IVXRT = codes.code 
	ORDER BY A.IVITM ASC;		
END;
  /

-- #bl_class						Premier.Inventory.GetProdPublishBasicDetailCommand.cs
-- #desc							Returns the detail of all the items
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param StoreId					Store Id
-- #param WhereCondition			Where Condition
-- #param RetrieveNonStockProducts	Retrieve Non Stock Products
-- #param SortBy					Sort By Colum name
-- #param SortDir					Sort Dir ASC / DESC
-- #param PageIndex					Paging - Current page
-- #param PageSize					Paging - Items to be shown
-- #param PageIndex					Page Index
-- #param PageSize					Page Size

CREATE OR REPLACE  PROCEDURE   [SCLIBRARY].INV_GetProdPublishBasicDetail
(
	StoreId						NCHAR,
	WhereCondition				NVARCHAR2 DEFAULT NULL,
	RetrieveNonStockProducts	INT,
	PageIndex					IN INT,
	PageSize					IN INT,
    SortBy						IN NVARCHAR2,
	SortDir						IN NVARCHAR2,
	ResultData1 OUT  GLOBALPKG.refcursor,
	ResultData2 OUT  GLOBALPKG.refcursor
)

AS
	SQL_DYNAMIC					VARCHAR2(8000);
	WHERE_DYNAMIC				NVARCHAR2(4000) := ' ';
	SORT_DYNAMIC				NVARCHAR2(130):= ' ';
	SORTDIR_DYNAMIC				NVARCHAR2(5);

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    RowEnd INT := (PageIndex * PageSize);
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETPRODPUBLISHBASIC_A';


	/* Dynamic sort direction statement */
	SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	/* Dynamic sort statement */
	SORT_DYNAMIC := CASE SortBy
							WHEN 'ShortProductNumber' 		THEN 'A.IMITM'
							WHEN 'LongProductNumber' 		THEN 'A.IMLITM'
							WHEN 'AuxiliaryProductNumber' 	THEN 'A.IMAITM'
							WHEN 'Description1'  		THEN 'A.IMDSC1'
							WHEN 'Description2' 		THEN 'A.IMDSC2'
							WHEN 'StockingType'  		THEN 'A.IMSTKT'
							WHEN 'InventoryFlag' 		THEN 'A.LFIVI'
							WHEN 'LineType'				THEN 'A.IMLNTY'
							WHEN 'PrimaryUom' 			THEN 'A.IMUOM1'
							WHEN 'PricingUom'			THEN 'A.IMUOM4'
							WHEN 'ShippingUom' 			THEN 'A.IMUOM6'	
							WHEN 'AbcCodeSales' 		THEN 'A.IMABCS'
							WHEN 'AbcCodeMargin' 		THEN 'A.IMABCM'
							WHEN 'AbcCodeInvestment' 	THEN 'A.IMABCI'
							WHEN 'UpcNumber' 			THEN 'A.IMUPCN'
							WHEN 'TemplateName' 		THEN 'A.IMTMPL'
							WHEN 'MatrixControlled' 	THEN 'A.IMMIC'
							WHEN 'Style'	 			THEN 'A.IMSEG1'
							WHEN 'CycleCountCategory' 	THEN 'A.IMCYCL'
							WHEN 'CategoryCode10' 		THEN 'A.IMPRP0' 
							WHEN 'CategoryCode1' 		THEN 'A.IMPRP1'
							WHEN 'CategoryCode2' 		THEN 'A.IMPRP2'
							WHEN 'CategoryCode3' 		THEN 'A.IMPRP3'
							WHEN 'CategoryCode4' 		THEN 'A.IMPRP4'
							WHEN 'CategoryCode5' 		THEN 'A.IMPRP5'
							WHEN 'CategoryCode6' 		THEN 'A.IMPRP6'
							WHEN 'CategoryCode7' 		THEN 'A.IMPRP7'
							WHEN 'CategoryCode8' 		THEN 'A.IMPRP8'
							WHEN 'CategoryCode9' 		THEN 'A.IMPRP9'
							WHEN 'ShippingCommodityClass' THEN 'A.IMSHCM'
							WHEN 'ShippingConditionsCode' THEN 'A.IMSHCN'
							WHEN 'SalesCode10' 			THEN 'A.IMSRP0'
							WHEN 'SalesCode1' 			THEN 'A.IMSRP1'
							WHEN 'SalesCode2' 			THEN 'A.IMSRP2'
							WHEN 'SalesCode3' 			THEN 'A.IMSRP3'
							WHEN 'SalesCode4' 			THEN 'A.IMSRP4'
							WHEN 'SalesCode5' 			THEN 'A.IMSRP5'
							WHEN 'SalesCode6' 			THEN 'A.IMSRP6'
							WHEN 'SalesCode7' 			THEN 'A.IMSRP7'
							WHEN 'SalesCode8' 			THEN 'A.IMSRP8'
							WHEN 'SalesCode9' 			THEN 'A.IMSRP9'
							WHEN 'SearchText' 			THEN 'A.IMSRTX'
							WHEN 'StandardUnitOfMeasure'	THEN 'A.IMTFLA'
							ELSE 'A.IMITM'
					 END;
	SORT_DYNAMIC := SORT_DYNAMIC || SORTDIR_DYNAMIC;

	IF(WhereCondition IS NOT NULL AND WhereCondition <> '*') THEN 
		WHERE_DYNAMIC := N' AND ' || WhereCondition;
	END IF;

	/*Region Items Data*/
	SQL_DYNAMIC := 
		N' WITH CTE AS (
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN N''M''
					ELSE N''S''	/* Stock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
				INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = :StoreId
				INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE (A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'') AND 
				 (A.IMTMPL = N'' '' OR (A.IMTMPL <> N'' '' AND A.IMMIC IN (N''1'', N''2'', N'' '')))) ' || WHERE_DYNAMIC;

	/* UNION to retrieve NonStock products */
	IF (RetrieveNonStockProducts = 1) THEN
		SQL_DYNAMIC := SQL_DYNAMIC || N' 
			UNION
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN N''M''
					ELSE N''N''	/* NonStock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY 
				INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = :StoreId
				INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU 
			WHERE (A.IMSTKT = N''N'' OR (C.LFIVI <> N''Y'' AND C.LFIVI <> N''D'') AND 
				 (A.IMTMPL = N'' '' OR (A.IMTMPL <> N'' '' AND A.IMMIC IN (N''1'', N''2'', N'' '')))) ' || WHERE_DYNAMIC || ' 
		)';
		/* Group by to avoid duplicated products */
	ELSE	
		SQL_DYNAMIC := SQL_DYNAMIC || N'
			GROUP BY	A.IMITM,
						A.IMLITM,
						A.IMAITM,
						A.IMDSC1,
						A.IMDSC2,
						A.IMSTKT,
						C.LFIVI,
						A.IMLNTY,
						A.IMUOM1,
						A.IMUOM4,
						A.IMUOM6,
						A.IMABCS,
						A.IMABCM,
						A.IMABCI,
						A.IMUPCN,
						A.IMTMPL,
						A.IMMIC,
						A.IMSEG1,
						A.IMCYCL,
						A.IMPRP0,
						A.IMPRP1,
						A.IMPRP2,
						A.IMPRP3,
						A.IMPRP4,
						A.IMPRP5,
						A.IMPRP6,
						A.IMPRP7,
						A.IMPRP8,
						A.IMPRP9,
						A.IMSHCM,
						A.IMSHCN,
						A.IMSRP0,
						A.IMSRP1,
						A.IMSRP2,
						A.IMSRP3,
						A.IMSRP4,
						A.IMSRP5,
						A.IMSRP6,
						A.IMSRP7,
						A.IMSRP8,
						A.IMSRP9,
						A.IMSRTX,
						A.IMTFLA
			) ';
	END IF;


		/* Concat Row Count for paging scenario only */
		SQL_DYNAMIC := SQL_DYNAMIC || N', PAGING AS (SELECT 
				A.IMITM		AS ShortProductNumber,
				A.IMLITM	AS LongProductNumber,
				A.IMAITM	AS AuxiliaryProductNumber,
				A.IMDSC1	AS Description1,
				A.IMDSC2	AS Description2,
				A.IMSTKT	AS StockingType,
				A.LFIVI		AS InventoryFlag,
				A.IMLNTY	AS LineType,
				A.IMUOM1	AS PrimaryUom,
				A.IMUOM4	AS PricingUom,
				A.IMUOM6	AS ShippingUom,
				A.IMABCS	AS AbcCodeSales,
				A.IMABCM	AS AbcCodeMargin,
				A.IMABCI	AS AbcCodeInvestment,
				A.IMUPCN	AS UpcNumber,
				A.ScType,
				A.IMTMPL	AS MatrixTemplate,
				A.IMMIC		AS MatrixControlled,
				A.IMSEG1	AS Segment1,
				A.IMCYCL	AS CycleCountCategory,
				A.IMPRP0	AS CategoryCode10,
				A.IMPRP1	AS CategoryCode1,
				A.IMPRP2	AS CategoryCode2,
				A.IMPRP3	AS CategoryCode3,
				A.IMPRP4	AS CategoryCode4,
				A.IMPRP5	AS CategoryCode5,
				A.IMPRP6	AS CategoryCode6,
				A.IMPRP7	AS CategoryCode7,
				A.IMPRP8	AS CategoryCode8,
				A.IMPRP9	AS CategoryCode9,
				A.IMSHCM	AS ShippingCommodityClass,
				A.IMSHCN	AS ShippingConditionsCode,
				A.IMSRP0	AS SalesCode10,
				A.IMSRP1	AS SalesCode1,
				A.IMSRP2	AS SalesCode2,
				A.IMSRP3	AS SalesCode3,
				A.IMSRP4	AS SalesCode4,
				A.IMSRP5	AS SalesCode5,
				A.IMSRP6	AS SalesCode6,
				A.IMSRP7	AS SalesCode7,
				A.IMSRP8	AS SalesCode8,
				A.IMSRP9	AS SalesCode9,
				A.IMSRTX	AS SearchText,
				A.IMTFLA	AS StandardUnitOfMeasure,
				ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||') AS RNUM
		FROM CTE A 
			) 
		SELECT 
			A.ShortProductNumber,
			A.LongProductNumber,
			A.AuxiliaryProductNumber,
			A.Description1,
			A.Description2,
			A.StockingType,
			A.InventoryFlag,
			A.LineType,
			A.PrimaryUom,
			A.PricingUom,
			A.ShippingUom,
			A.AbcCodeSales,
			A.AbcCodeMargin,
			A.AbcCodeInvestment,
			A.UpcNumber,
			A.ScType,
			A.MatrixTemplate,
			A.MatrixControlled,
			A.Segment1,
			A.CycleCountCategory, 
			A.CategoryCode10, 
			A.CategoryCode1, 
			A.CategoryCode2, 
			A.CategoryCode3, 
			A.CategoryCode4, 
			A.CategoryCode5, 
			A.CategoryCode6, 
			A.CategoryCode7, 
			A.CategoryCode8, 
			A.CategoryCode9, 
			A.ShippingCommodityClass, 
			A.ShippingConditionsCode, 
			A.SalesCode10, 
			A.SalesCode1, 
			A.SalesCode2, 
			A.SalesCode3, 
			A.SalesCode4, 
			A.SalesCode5, 
			A.SalesCode6, 
			A.SalesCode7, 
			A.SalesCode8, 
			A.SalesCode9,
			A.SearchText,
			A.StandardUnitOfMeasure,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE (A.RNUM BETWEEN :RowStart AND :RowEnd)
		';

	SQL_DYNAMIC := N'INSERT INTO [SCLIBRARY].INV_GETPRODPUBLISHBASIC_A (ShortProductNumber, LongProductNumber, AuxiliaryProductNumber, Description1, Description2, StockingType, InventoryFlag, LineType, PrimaryUom, PricingUom, ShippingUom, AbcCodeSales, AbcCodeMargin, AbcCodeInvestment, UpcNumber, SCType, MatrixTemplate, MatrixControlled, Segment1, CycleCountCategory, CategoryCode10, CategoryCode1, CategoryCode2, CategoryCode3, CategoryCode4, CategoryCode5, CategoryCode6, CategoryCode7, CategoryCode8, CategoryCode9, ShippingCommodityClass, ShippingConditionsCode, SalesCode10, SalesCode1, SalesCode2, SalesCode3, SalesCode4, SalesCode5, SalesCode6, SalesCode7, SalesCode8, SalesCode9, SearchText, StandardUnitOfMeasure, TotalRowCount)' || SQL_DYNAMIC;
    
    EXECUTE IMMEDIATE (SQL_DYNAMIC) USING StoreId, StoreId, RowStart, RowEnd;


	-- Get the item information detail from the temporary table
	OPEN ResultData1 FOR
		SELECT 
		ShortProductNumber		AS ShortProductNumber, 
		LongProductNumber		AS LongProductNumber, 
		AuxiliaryProductNumber	AS AuxiliaryProductNumber, 
		B.IMITM					AS ParentProductNumber,
		Description1			AS Description1, 
		Description2			AS Description2, 
		StockingType			AS StockingType, 
		InventoryFlag			AS InventoryFlag, 
		LineType				AS LineType, 
		PrimaryUom				AS PrimaryUom, 
		PricingUom				AS PricingUom, 
		ShippingUom				AS ShippingUom, 
		AbcCodeSales			AS AbcCodeSales, 
		AbcCodeMargin			AS AbcCodeMargin, 
		AbcCodeInvestment		AS AbcCodeInvestment, 
		UpcNumber				AS UpcNumber, 
		SCType					AS SCType, 
		MatrixTemplate			AS MatrixTemplate, 
		MatrixControlled		AS MatrixControlled, 
		Segment1				AS Segment1, 
		CycleCountCategory		AS CycleCountCategory, 
		CategoryCode10			AS CategoryCode10, 
		CategoryCode1			AS CategoryCode1, 
		CategoryCode2			AS CategoryCode2, 
		CategoryCode3			AS CategoryCode3, 
		CategoryCode4			AS CategoryCode4, 
		CategoryCode5			AS CategoryCode5, 
		CategoryCode6			AS CategoryCode6, 
		CategoryCode7			AS CategoryCode7, 
		CategoryCode8			AS CategoryCode8, 
		CategoryCode9			AS CategoryCode9, 
		ShippingCommodityClass	AS ShippingCommodityClass, 
		ShippingConditionsCode	AS ShippingConditionsCode, 
		SalesCode10				AS SalesCode10, 
		SalesCode1				AS SalesCode1, 
		SalesCode2				AS SalesCode2, 
		SalesCode3				AS SalesCode3, 
		SalesCode4				AS SalesCode4, 
		SalesCode5				AS SalesCode5, 
		SalesCode6				AS SalesCode6, 
		SalesCode7				AS SalesCode7, 
		SalesCode8				AS SalesCode8, 
		SalesCode9				AS SalesCode9,
		SearchText				AS SearchText,
		StandardUnitOfMeasure	AS StandardUnitOfMeasure,
		TotalRowCount			AS TotalRowCount 
		FROM [SCLIBRARY].INV_GETPRODPUBLISHBASIC_A --#PRODUCTMASTERBASICDETAILTABLE
		LEFT OUTER JOIN [SCDATA].F4101 B	/* Resolve parent Product Number */	
		ON B.IMTMPL = MatrixTemplate 	
		AND B.IMSEG1 = Segment1 	
		AND B.IMMIC = '1'	
		AND MatrixControlled = '2';
	/* End Region Items Data */
  
	/* Region Get BranchPlants by item*/
	OPEN ResultData2 FOR
	SELECT
		D.ShortProductNumber	AS ShortProductNumber,
		A.MCMCU				AS BranchPlant
	FROM
		[SCLIBRARY].INV_GETPRODPUBLISHBASIC_A D 
	INNER JOIN [SCDATA].F4102 C ON
		C.IBITM = D.shortProductNumber
	INNER JOIN [SCDATA].F0006 A ON
		C.IBMCU = A.MCMCU;
	
	/* End Region Get BranchPlants by item */
END;
  /

-- #bl_class						Premier.Inventory.GetItemPublishDetailCommand.cs
-- #desc							Returns the detail of all the products
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param StoreId					Store Id
-- #param LongProductNumbersXML		Long Product Numbers XML
-- #param WhereCondition			Where Condition
-- #param RetrieveNonStockProducts	Retrieve Non Stock Products
-- #param IsPreviewMode				Is Preview mode: only return two result sets: Products and ProductsMCUs.
-- #param SortBy					Sort By Colum name
-- #param SortDir					Sort Dir ASC / DESC
-- #param PageIndex					Page Index
-- #param PageSize					Page Size

CREATE OR REPLACE  PROCEDURE   [SCLIBRARY].INV_GetProdPublishDetail
(
	StoreId						NCHAR,
	LongProductNumbersXML		XMLType DEFAULT NULL,
	WhereCondition				NVARCHAR2 DEFAULT NULL,
	RetrieveNonStockProducts	INT,
	IsPreviewMode				INT,
	SortBy						IN NVARCHAR2,
	SortDir						IN NVARCHAR2,
	PageIndex					IN INT,
	PageSize					IN INT,
	ResultData1 OUT  GLOBALPKG.refcursor,
	ResultData2 OUT  GLOBALPKG.refcursor,
	ResultData3 OUT  GLOBALPKG.refcursor,
	ResultData4 OUT  GLOBALPKG.refcursor,
	ResultData5 OUT  GLOBALPKG.refcursor
)

AS
	SQL_DYNAMIC		VARCHAR2(8000);
	WHERE_DYNAMIC	NVARCHAR2(4000) := ' ';
	SORT_DYNAMIC	NVARCHAR2(130):= ' ';
	SORTDIR_DYNAMIC				NVARCHAR2(5);

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    RowEnd INT := (PageIndex * PageSize);
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_A';
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_B';

	/* Dynamic sort direction statement */
	SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	/* Dynamic sort statement */
	SORT_DYNAMIC := CASE SortBy
							WHEN 'ShortProductNumber' 		THEN 'A.IMITM'
							WHEN 'LongProductNumber' 		THEN 'A.IMLITM'
							WHEN 'AuxiliaryProductNumber' 	THEN 'A.IMAITM'
							WHEN 'Description1'  		THEN 'A.IMDSC1'
							WHEN 'Description2' 		THEN 'A.IMDSC2'
							WHEN 'StockingType'  		THEN 'A.IMSTKT'
							WHEN 'InventoryFlag' 		THEN 'A.LFIVI'
							WHEN 'LineType'				THEN 'A.IMLNTY'
							WHEN 'PrimaryUom' 			THEN 'A.IMUOM1'
							WHEN 'PricingUom'			THEN 'A.IMUOM4'
							WHEN 'ShippingUom' 			THEN 'A.IMUOM6'	
							WHEN 'AbcCodeSales' 		THEN 'A.IMABCS'
							WHEN 'AbcCodeMargin' 		THEN 'A.IMABCM'
							WHEN 'AbcCodeInvestment' 	THEN 'A.IMABCI'
							WHEN 'UpcNumber' 			THEN 'A.IMUPCN'
							WHEN 'TemplateName' 		THEN 'A.IMTMPL'
							WHEN 'MatrixControlled' 	THEN 'A.IMMIC'
							WHEN 'Style'	 			THEN 'A.IMSEG1'
							WHEN 'CycleCountCategory' 	THEN 'A.IMCYCL'
							WHEN 'CategoryCode10' 		THEN 'A.IMPRP0' 
							WHEN 'CategoryCode1' 		THEN 'A.IMPRP1'
							WHEN 'CategoryCode2' 		THEN 'A.IMPRP2'
							WHEN 'CategoryCode3' 		THEN 'A.IMPRP3'
							WHEN 'CategoryCode4' 		THEN 'A.IMPRP4'
							WHEN 'CategoryCode5' 		THEN 'A.IMPRP5'
							WHEN 'CategoryCode6' 		THEN 'A.IMPRP6'
							WHEN 'CategoryCode7' 		THEN 'A.IMPRP7'
							WHEN 'CategoryCode8' 		THEN 'A.IMPRP8'
							WHEN 'CategoryCode9' 		THEN 'A.IMPRP9'
							WHEN 'ShippingCommodityClass' THEN 'A.IMSHCM'
							WHEN 'ShippingConditionsCode' THEN 'A.IMSHCN'
							WHEN 'SalesCode10' 			THEN 'A.IMSRP0'
							WHEN 'SalesCode1' 			THEN 'A.IMSRP1'
							WHEN 'SalesCode2' 			THEN 'A.IMSRP2'
							WHEN 'SalesCode3' 			THEN 'A.IMSRP3'
							WHEN 'SalesCode4' 			THEN 'A.IMSRP4'
							WHEN 'SalesCode5' 			THEN 'A.IMSRP5'
							WHEN 'SalesCode6' 			THEN 'A.IMSRP6'
							WHEN 'SalesCode7' 			THEN 'A.IMSRP7'
							WHEN 'SalesCode8' 			THEN 'A.IMSRP8'
							WHEN 'SalesCode9' 			THEN 'A.IMSRP9'
							WHEN 'SearchText' 			THEN 'A.IMSRTX'
							WHEN 'StandardUnitOfMeasure'	THEN 'A.IMTFLA'
							ELSE 'A.IMITM'
					 END;

	SORT_DYNAMIC := SORT_DYNAMIC || SORTDIR_DYNAMIC;

	/*Region Products Data*/
	SQL_DYNAMIC := 
		N' WITH CTE AS (
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN N''M''
					ELSE N''S''	/* Stock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
				INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = :StoreId
				INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'') AND 
				 (A.IMTMPL = N'' '' OR (A.IMTMPL <> N'' '' AND A.IMMIC IN (N''1'', N''2'', N'' '')))';

	/* UNION to retrieve NonStock products */
	IF (RetrieveNonStockProducts = 1) THEN
		SQL_DYNAMIC := SQL_DYNAMIC || N' 
			UNION
			SELECT  
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN N''M''
					ELSE N''N''	/* NonStock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY 
			WHERE A.IMSTKT = N''N'' OR (C.LFIVI <> N''Y'' AND C.LFIVI <> N''D'') AND 
				 (A.IMTMPL = N'' '' OR (A.IMTMPL <> N'' '' AND A.IMMIC IN (N''1'', N''2'', N'' '')))
		)';
		/* Group by to avoid duplicated products */
	ELSE	
		SQL_DYNAMIC := SQL_DYNAMIC || N'
			GROUP BY	A.IMITM,
						A.IMLITM,
						A.IMAITM,
						A.IMDSC1,
						A.IMDSC2,
						A.IMSTKT,
						C.LFIVI,
						A.IMLNTY,
						A.IMUOM1,
						A.IMUOM4,
						A.IMUOM6,
						A.IMABCS,
						A.IMABCM,
						A.IMABCI,
						A.IMUPCN,
						A.IMTMPL,
						A.IMMIC,
						A.IMSEG1,
						A.IMCYCL,
						A.IMPRP0,
						A.IMPRP1,
						A.IMPRP2,
						A.IMPRP3,
						A.IMPRP4,
						A.IMPRP5,
						A.IMPRP6,
						A.IMPRP7,
						A.IMPRP8,
						A.IMPRP9,
						A.IMSHCM,
						A.IMSHCN,
						A.IMSRP0,
						A.IMSRP1,
						A.IMSRP2,
						A.IMSRP3,
						A.IMSRP4,
						A.IMSRP5,
						A.IMSRP6,
						A.IMSRP7,
						A.IMSRP8,
						A.IMSRP9,
						A.IMSRTX,
						A.IMTFLA
			) ';
	END IF;

	IF(WhereCondition IS NOT NULL AND WhereCondition <> '*') THEN 
		WHERE_DYNAMIC := N' WHERE ' || WhereCondition;
	END IF;

	/* Paging won't be applied */
	IF(LongProductNumbersXML IS NOT NULL) THEN 
		SQL_DYNAMIC := SQL_DYNAMIC || N'
					SELECT 
						A.IMITM		AS ShortProductNumber,
						A.IMLITM	AS LongProductNumber,
						A.IMAITM	AS AuxiliaryProductNumber,
						A.IMDSC1	AS Description1,
						A.IMDSC2	AS Description2,
						A.IMSTKT	AS StockingType,
						A.LFIVI		AS InventoryFlag,
						A.IMLNTY	AS LineType,
						A.IMUOM1	AS PrimaryUom,
						A.IMUOM4	AS PricingUom,
						A.IMUOM6	AS ShippingUom,
						A.IMABCS	AS AbcCodeSales,
						A.IMABCM	AS AbcCodeMargin,
						A.IMABCI	AS AbcCodeInvestment,
						A.IMUPCN	AS UpcNumber,
						A.ScType,
						A.IMTMPL	AS MatrixTemplate,
						A.IMMIC		AS MatrixControlled,
						A.IMSEG1	AS Segment1,
						A.IMCYCL	AS CycleCountCategory, 
						A.IMPRP0	AS CategoryCode10, 
						A.IMPRP1	AS CategoryCode1, 
						A.IMPRP2	AS CategoryCode2, 
						A.IMPRP3	AS CategoryCode3, 
						A.IMPRP4	AS CategoryCode4, 
						A.IMPRP5	AS CategoryCode5, 
						A.IMPRP6	AS CategoryCode6, 
						A.IMPRP7	AS CategoryCode7, 
						A.IMPRP8	AS CategoryCode8, 
						A.IMPRP9	AS CategoryCode9, 
						A.IMSHCM	AS ShippingCommodityClass, 
						A.IMSHCN	AS ShippingConditionsCode, 
						A.IMSRP0	AS SalesCode10, 
						A.IMSRP1	AS SalesCode1, 
						A.IMSRP2	AS SalesCode2, 
						A.IMSRP3	AS SalesCode3, 
						A.IMSRP4	AS SalesCode4, 
						A.IMSRP5	AS SalesCode5, 
						A.IMSRP6	AS SalesCode6, 
						A.IMSRP7	AS SalesCode7, 
						A.IMSRP8	AS SalesCode8, 
						A.IMSRP9	AS SalesCode9,
						A.IMSRTX	AS SearchText,
						A.IMTFLA	AS StandardUnitOfMeasure,
						0 AS TotalRowCount
					FROM CTE A
					INNER JOIN XMLTABLE (''/items/item''
						PASSING :LongProductNumbersXML
						COLUMNS LongProductNumber NCHAR(25) PATH ''text()'') items
										ON items.LongProductNumber = A.IMLITM 
					' || WHERE_DYNAMIC;
		
	ELSE
		/* Concat Row Count for paging scenario only */
		SQL_DYNAMIC := SQL_DYNAMIC || N', PAGING AS (SELECT 
				A.IMITM		AS ShortProductNumber,
				A.IMLITM	AS LongProductNumber,
				A.IMAITM	AS AuxiliaryProductNumber,
				A.IMDSC1	AS Description1,
				A.IMDSC2	AS Description2,
				A.IMSTKT	AS StockingType,
				A.LFIVI		AS InventoryFlag,
				A.IMLNTY	AS LineType,
				A.IMUOM1	AS PrimaryUom,
				A.IMUOM4	AS PricingUom,
				A.IMUOM6	AS ShippingUom,
				A.IMABCS	AS AbcCodeSales,
				A.IMABCM	AS AbcCodeMargin,
				A.IMABCI	AS AbcCodeInvestment,
				A.IMUPCN	AS UpcNumber,
				A.ScType,
				A.IMTMPL	AS MatrixTemplate,
				A.IMMIC		AS MatrixControlled,
				A.IMSEG1	AS Segment1,
				A.IMCYCL	AS CycleCountCategory,
				A.IMPRP0	AS CategoryCode10,
				A.IMPRP1	AS CategoryCode1,
				A.IMPRP2	AS CategoryCode2,
				A.IMPRP3	AS CategoryCode3,
				A.IMPRP4	AS CategoryCode4,
				A.IMPRP5	AS CategoryCode5,
				A.IMPRP6	AS CategoryCode6,
				A.IMPRP7	AS CategoryCode7,
				A.IMPRP8	AS CategoryCode8,
				A.IMPRP9	AS CategoryCode9,
				A.IMSHCM	AS ShippingCommodityClass,
				A.IMSHCN	AS ShippingConditionsCode,
				A.IMSRP0	AS SalesCode10,
				A.IMSRP1	AS SalesCode1,
				A.IMSRP2	AS SalesCode2,
				A.IMSRP3	AS SalesCode3,
				A.IMSRP4	AS SalesCode4,
				A.IMSRP5	AS SalesCode5,
				A.IMSRP6	AS SalesCode6,
				A.IMSRP7	AS SalesCode7,
				A.IMSRP8	AS SalesCode8,
				A.IMSRP9	AS SalesCode9,
				A.IMSRTX	AS SearchText,
				A.IMTFLA	AS StandardUnitOfMeasure,
				ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||') AS RowCount 
		FROM CTE A 
			' || WHERE_DYNAMIC || ' ) 
		SELECT 
			A.ShortProductNumber,
			A.LongProductNumber,
			A.AuxiliaryProductNumber,
			A.Description1,
			A.Description2,
			A.StockingType,
			A.InventoryFlag,
			A.LineType,
			A.PrimaryUom,
			A.PricingUom,
			A.ShippingUom,
			A.AbcCodeSales,
			A.AbcCodeMargin,
			A.AbcCodeInvestment,
			A.UpcNumber,
			A.ScType,
			A.MatrixTemplate,
			A.MatrixControlled,
			A.Segment1,
			A.CycleCountCategory, 
			A.CategoryCode10, 
			A.CategoryCode1, 
			A.CategoryCode2, 
			A.CategoryCode3, 
			A.CategoryCode4, 
			A.CategoryCode5, 
			A.CategoryCode6, 
			A.CategoryCode7, 
			A.CategoryCode8, 
			A.CategoryCode9, 
			A.ShippingCommodityClass, 
			A.ShippingConditionsCode, 
			A.SalesCode10, 
			A.SalesCode1, 
			A.SalesCode2, 
			A.SalesCode3, 
			A.SalesCode4, 
			A.SalesCode5, 
			A.SalesCode6, 
			A.SalesCode7, 
			A.SalesCode8, 
			A.SalesCode9,
			A.SearchText,
			A.StandardUnitOfMeasure,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE (A.RowCount BETWEEN :RowStart AND :RowEnd)
		';
	END IF;
	SQL_DYNAMIC := N'INSERT INTO [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_A (ShortProductNumber, LongProductNumber, AuxiliaryProductNumber, Description1, Description2, StockingType, InventoryFlag, LineType, PrimaryUom, PricingUom, ShippingUom, AbcCodeSales, AbcCodeMargin, AbcCodeInvestment, UpcNumber, SCType, MatrixTemplate, MatrixControlled, Segment1, CycleCountCategory, CategoryCode10, CategoryCode1, CategoryCode2, CategoryCode3, CategoryCode4, CategoryCode5, CategoryCode6, CategoryCode7, CategoryCode8, CategoryCode9, ShippingCommodityClass, ShippingConditionsCode, SalesCode10, SalesCode1, SalesCode2, SalesCode3, SalesCode4, SalesCode5, SalesCode6, SalesCode7, SalesCode8, SalesCode9, SearchText, StandardUnitOfMeasure, TotalRowCount)' || SQL_DYNAMIC;
	IF(LongProductNumbersXML IS NULL) THEN 
        EXECUTE IMMEDIATE (SQL_DYNAMIC) USING StoreId, RowStart, RowEnd;
    ELSE
        EXECUTE IMMEDIATE (SQL_DYNAMIC) USING StoreId, LongProductNumbersXML;
    END IF;

	-- Get the product information detail from the temporary table
	OPEN ResultData1 FOR
		SELECT 
		ShortProductNumber		AS ShortProductNumber, 
		LongProductNumber		AS LongProductNumber, 
		AuxiliaryProductNumber	AS AuxiliaryProductNumber, 
		B.IMITM					AS ParentProductNumber,
		Description1			AS Description1, 
		Description2			AS Description2, 
		StockingType			AS StockingType, 
		InventoryFlag			AS InventoryFlag, 
		LineType				AS LineType, 
		PrimaryUom				AS PrimaryUom, 
		PricingUom				AS PricingUom, 
		ShippingUom				AS ShippingUom, 
		AbcCodeSales			AS AbcCodeSales, 
		AbcCodeMargin			AS AbcCodeMargin, 
		AbcCodeInvestment		AS AbcCodeInvestment, 
		UpcNumber				AS UpcNumber, 
		SCType					AS SCType, 
		MatrixTemplate			AS MatrixTemplate, 
		MatrixControlled		AS MatrixControlled, 
		Segment1				AS Segment1, 
		CycleCountCategory		AS CycleCountCategory, 
		CategoryCode10			AS CategoryCode10, 
		CategoryCode1			AS CategoryCode1, 
		CategoryCode2			AS CategoryCode2, 
		CategoryCode3			AS CategoryCode3, 
		CategoryCode4			AS CategoryCode4, 
		CategoryCode5			AS CategoryCode5, 
		CategoryCode6			AS CategoryCode6, 
		CategoryCode7			AS CategoryCode7, 
		CategoryCode8			AS CategoryCode8, 
		CategoryCode9			AS CategoryCode9, 
		ShippingCommodityClass	AS ShippingCommodityClass, 
		ShippingConditionsCode	AS ShippingConditionsCode, 
		SalesCode10				AS SalesCode10, 
		SalesCode1				AS SalesCode1, 
		SalesCode2				AS SalesCode2, 
		SalesCode3				AS SalesCode3, 
		SalesCode4				AS SalesCode4, 
		SalesCode5				AS SalesCode5, 
		SalesCode6				AS SalesCode6, 
		SalesCode7				AS SalesCode7, 
		SalesCode8				AS SalesCode8, 
		SalesCode9				AS SalesCode9,
		SearchText				AS SearchText,
		TotalRowCount			AS TotalRowCount 
		FROM [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_A --#PRODMASTERDETAILTABLE
		LEFT OUTER JOIN [SCDATA].F4101 B	/* Resolve parent Product Number */	
		ON B.IMTMPL = matrixTemplate 	
		AND B.IMSEG1 = segment1 	
		AND B.IMMIC = '1'	
		AND matrixControlled = '2';
	/* End Region Products Data */
  
	/* Region Get BranchPlants by product*/
	OPEN ResultData2 FOR
	SELECT
		D.ShortProductNumber	AS ShortProductNumber,
		A.MCMCU					AS BranchPlant
	FROM
		[SCLIBRARY].INV_GETPRODPUBLISHDETAIL_A D 
	INNER JOIN [SCDATA].F4102 C ON
		C.IBITM = D.ShortProductNumber
	INNER JOIN [SCDATA].F0006 A ON
		C.IBMCU = A.MCMCU;
	
	/* End Region Get BranchPlants by product */

	IF(IsPreviewMode = 0) THEN 
	/* Specific UOMs */
		INSERT INTO [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_B (ShortProductNumber, UnitOfMeasure)
		SELECT DISTINCT ShortProductNumber, UOM
		FROM 
			(SELECT A.PrimaryUom,
				A.PricingUom,
				UMRUM,
				UMUM,
				A.ShortProductNumber
			FROM [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_A A
			LEFT OUTER JOIN [SCDATA].F41002
				ON UMITM = A.ShortProductNumber
			WHERE A.StandardUnitOfMeasure = N' ') 
		      
			UNPIVOT (UOM FOR UM IN
			(PrimaryUom, PricingUom, UMRUM, UMUM))O;

		/* Global UOMs */
		INSERT INTO [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_B (ShortProductNumber, UnitOfMeasure)
		SELECT DISTINCT ShortProductNumber, UOM
		FROM 
			(SELECT A.PrimaryUom,
				A.PricingUom,
				UCRUM,
				UCUM,
				A.ShortProductNumber
			FROM [SCLIBRARY].INV_GETPRODPUBLISHDETAIL_A A
			LEFT OUTER JOIN [SCDATA].F41003 B
				ON B.UCRUM IN (A.PrimaryUom, A.PricingUom)
				OR B.UCUM IN (A.PrimaryUom, A.PricingUom)
			WHERE A.StandardUnitOfMeasure = N'1') 
		      
			UNPIVOT (UOM FOR UM IN
			(PrimaryUom, PricingUom, UCRUM, UCUM))O;

		OPEN ResultData3 FOR
			SELECT 
				shortProductNumber AS ShortProductNumber, 
				unitOfMeasure	AS UnitOfMeasure
			FROM
				[SCLIBRARY].INV_GETPRODPUBLISHDETAIL_B;
		
		/* Global UOMs */
		OPEN ResultData4 FOR
		SELECT
			A.UCUM	AS UnitOfMeasure,
			A.UCRUM AS UnitOfMeasureTo, 
			A.UCCONV AS ConversionFactor
		FROM
			[SCDATA].F41003 A;
		
		/* Unit of measure conversion Factory */
		OPEN ResultData5 FOR
		SELECT 
			A.ShortProductNumber AS ShortProductNumber, 
			B.UMMCU AS BranchPlant,
			B.UMUM	AS UnitOfMeasure,
			B.UMRUM AS UnitOfMeasureTo, 
			B.UMCONV AS ConversionFactor
		FROM
			[SCLIBRARY].INV_GETPRODPUBLISHDETAIL_A A
		INNER JOIN [SCDATA].F41002 B
			ON B.UMITM = A.ShortProductNumber
			AND (A.primaryUom IN (B.UMUM, B.UMRUM))
		WHERE A.StandardUnitOfMeasure = N' ';

	END IF; 	
END;
  /
-- #desc							Get PunchOut Product Info List
-- #bl_class						Premier.Inventory.PunchOutProductList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param ShortProductNumbersXML	Short Product Numbers XML	<punchOutProducts><punchOutProduct><![CDATA[60020]]></punchOutProduct></punchOutProducts>


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetPunchOutProductList
(
	ShortProductNumbersXML	IN XMLType,
	ResultData1 OUT GLOBALPKG.refcursor  
)
AS
	CurrentJulianDate NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN

	OPEN ResultData1 FOR
		SELECT 
			IM.IMITM  AS ProductNumber,		
			CF.IVCITM AS ManufacturerId,
			DR.DRDL01 AS ManufacturerName			
		FROM XMLTABLE ('/punchOutProducts/punchOutProduct' 
		PASSING ShortProductNumbersXML
		COLUMNS ShortProductNumber NUMBER PATH 'text()') X
		INNER JOIN [SCDATA].F4101 IM
			ON IM.IMITM = X.ShortProductNumber
		LEFT JOIN [SCCTL].F0005 DR
			ON TRIM(DR.DRKY) = TRIM(IM.IMSRP9)
			AND DRSY = '41' AND DRRT = '09'		
		LEFT OUTER JOIN [SCDATA].F4104 CF
            ON CF.IVXRT = 'M'
            AND CF.IVITM = IM.IMITM
			AND CurrentJulianDate BETWEEN CF.IVEFTJ AND CF.IVEXDJ;
END;
  /

-- #desc					Get Supplier Address Book Info
-- #bl_class				Premier.Inventory.SupplierAddressBookInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param ContactID			ContactID

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetSupplierAddressBookInfo
(
    AddressNumber	IN DECIMAL,
    ContactID		IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT
			WWAN8	AS AddressNumber,
			WWIDLN	AS ContactId,
			WWMLNM	AS MailingName		  
		FROM 
			[SCDATA].F0111
		WHERE
			WWAN8 = AddressNumber 
			AND WWIDLN = ContactID;
END;
  /

-- #desc					Gets list of Matrix Extended segments
-- #bl_class				Premier.Inventory.TemplateAndSegmentList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetTemplateAndSegmentList
(
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN 
	
	OPEN ResultData1 FOR
	WITH CTE AS (
		SELECT
			S0TMPL		AS TEMPLATE,
			S0SEG1		AS SEGMENT1,
			T7SGD1		AS Segment1Description,
			T7SGD2		AS Segment2Description,
			T7SGD3		AS Segment3Description,
			T7SGD4		AS Segment4Description,
			T7SGD5		AS Segment5Description,
			T7SGD6		AS Segment6Description,
			T7SGD7		AS Segment7Description,
			T7SGD8		AS Segment8Description,
			T7SGD9		AS Segment9Description,
			T7SGD0		AS Segment0Description,
			ROW_NUMBER() OVER(PARTITION BY A.S0TMPL, A.S0SEG1 ORDER BY B.T7MCU) AS RNUM
		FROM [SCDATA].F41008 A
		INNER JOIN  [SCDATA].F410014 B
			ON A.S0TMPL = B.T7TMPL
	)
	SELECT
		A.TEMPLATE,
		A.SEGMENT1,
		A.Segment1Description,
		A.Segment2Description,
		A.Segment3Description,
		A.Segment4Description,
		A.Segment5Description,
		A.Segment6Description,
		A.Segment7Description,
		A.Segment8Description,
		A.Segment9Description,
		A.Segment0Description
	FROM CTE A
	WHERE RNUM = 1;
END;
  /

-- #desc						Get Template Catalog Node List
-- #bl_class					Premier.Inventory.TemplateCatalogNodeList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param TemplateID			Template ID

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetTemplateCatalogNodeList
(
	TemplateID      IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT
		    A.CD$9CLGID		AS	CatalogID,
		    A.CDUKID		AS	UniqueKeyID,
		    B.CADSC1		AS	CatalogDescription,
		    A.CDDL01		AS	NodeDescription,
			B.CA$9INID		AS  InstallationID
	    FROM
		    [SCDATA].FQ67413 A,
		    [SCDATA].FQ67412 B 
	    WHERE
	        B.CA$9CLGID = A.CD$9CLGID	      
		    AND TRIM(A.CDTMPI) = TRIM(TemplateID);
END;
  /

-- #desc						Read UOM
-- #bl_class					Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UnitOfMeasure			Unit of measure
-- #param InstallationID		Installation ID.

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetUnitOfMeasure
(
	InstallationID  IN NVARCHAR2,
	UnitOfMeasure   IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
		    A.UM$9INID	InstallationID, 
		    A.UMUOM		UnitOfMeasure,
		    A.UMDSC1		Description
	    FROM 
	 	    -- Sales Unit of Measure Master
		    [SCDATA].FQ67415 A
	    WHERE 
		    -- Installation Id filter
		    A.UM$9INID = InstallationID AND 
		    -- Unit of Measure filter
		    TRIM(A.UMUOM) = TRIM(UnitOfMeasure);
    
    [SCLIBRARY].INV_GetUnitOfMeasureLangs(InstallationID, UnitOfMeasure, null, ResultData2);
END;

  /

-- #desc						Read UOM info
-- #bl_class					Premier.Inventory.UnitOfMeasureInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param UnitOfMeasure			Unit of Measure
-- #param LangPref				Language preference

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetUnitOfMeasureInfo
(
	InstallationID  IN NVARCHAR2,
	UnitOfMeasure   IN NVARCHAR2,
	LangPref	    IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CodeLength  INT := 0;
BEGIN
    IF (InstallationID = '***' ) THEN		
		BEGIN
			-- Get Code Length
			SELECT DTCDL INTO CodeLength 
			FROM [SCCTL].F0004
			WHERE 
				TRIM(DTSY) = '00' AND TRIM(DTRT) = 'UM';
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			CodeLength := 0;
		END;

		OPEN ResultData1 FOR
			SELECT 
				InstallationID  AS InstallationID, 
				A.DRKY			AS UnitOfMeasure,
				A.DRDL01		AS Description
			FROM [SCCTL].F0005 A --- UDC table			
			WHERE 
				TRIM(A.DRSY) = '00'
				AND TRIM(A.DRRT) = 'UM'
				AND SUBSTR(DRKY, 10 - CodeLength + 1, CodeLength) = TRIM(UnitOfMeasure);
	ELSE
		OPEN ResultData1 FOR
			SELECT 
				A.UM$9INID AS	InstallationID, 
				A.UMUOM	 AS		UnitOfMeasure,
				NVL(B.UMDSC1, A.UMDSC1) AS Description
			FROM 
	 			-- Sales Unit of Measure Master
				[SCDATA].FQ67415 A,
				[SCDATA].FQ67415L B	
			WHERE 
					B.UMUOM(+) = A.UMUOM
				AND TRIM(B.UMLNGP(+)) = TRIM(LangPref)
				-- Installation Id filter
				AND A.UM$9INID = InstallationID
				-- Unit of Measure filter
				AND TRIM(A.UMUOM) = TRIM(UnitOfMeasure);
	END IF;
END;
  /

-- #desc					Read UOM list
-- #bl_class				Premier.Inventory.UnitOfMeasureList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param UnitOfMeasure		Unit of Measure
-- #param Description		Description


CREATE OR REPLACE  PROCEDURE [SCLIBRARY].INV_GetUnitOfMeasureList
(
	InstallationID  IN NCHAR,
	UnitOfMeasure   IN NCHAR,
	Description     IN NCHAR,
	LangPref	    IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
		    A.UM$9INID AS	InstallationID, 
		    A.UMUOM	    AS		UnitOfMeasure,
		    NVL(B.UMDSC1, A.UMDSC1) AS Description
	    FROM 
	 	    /* Sales Unit of Measure Master */
		    [SCDATA].FQ67415 A
		LEFT OUTER JOIN [SCDATA].FQ67415L B
			ON B.UMUOM = A.UMUOM
            AND B.UMLNGP = LangPref
	    WHERE 
		    /* Installation Id filter */
		    A.UM$9INID = InstallationID
		    /* Unit of Measure filter */
		    AND (UnitOfMeasure = '*' OR A.UMUOM = UnitOfMeasure)
		    /* Description filter */
		    AND (Description = '*' OR
		    (B.UMDSC1 IS NULL AND UPPER(A.UMDSC1)  LIKE '%' || Description || '%' ) OR
		    (B.UMDSC1 IS NOT NULL AND UPPER(B.UMDSC1) LIKE '%' || Description || '%'))
	    ORDER BY A.UMUOM;
END;

  /

-- #desc						Get the UOM list of the not related
-- #bl_class					Premier.Inventory.UnitOfMeasureList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation Id
-- #param UnitOfMeasure			Unit Of Measure
-- #param Description			Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetUOMListNotRel
(
    InstallationID  IN NCHAR,
	UnitOfMeasure	IN NCHAR,
    Description		IN NCHAR,  
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
    CODELENGTH INT := 0;
BEGIN

	BEGIN
	    SELECT 
	        DTCDL INTO CODELENGTH 
	    FROM 
	        [SCCTL].F0004
	    WHERE 
	        DTSY = N'00' AND DTRT = N'UM';
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    CODELENGTH := 0;
	END;
    
    OPEN ResultData1 FOR
	SELECT			
			SUBSTR (A.DRKY,10-CODELENGTH+1 ,CODELENGTH) AS UnitOfMeasure, 
			A.DRDL01 	    AS Description
	FROM	
	    [SCCTL].F0005 A
	WHERE	    
	        A.DRSY = N'00'
	    AND	A.DRRT = N'UM'
    	AND SUBSTR(A.DRKY, 10 - CODELENGTH + 1, CODELENGTH) NOT IN (
    	SELECT SUBSTR(B.UMUOM, 0, CODELENGTH)
						  FROM	 [SCDATA].FQ67415 B
						  WHERE  B.UM$9INID = InstallationID)
		AND (UnitOfMeasure = N'*' OR SUBSTR(A.DRKY, 10 - CODELENGTH + 1, CODELENGTH) = UnitOfMeasure) 
		AND (Description = N'*' OR UPPER(A.DRDL01) LIKE N'%' || Description || '%') 
	ORDER BY A.DRKY;
END; 
  /

-- #desc						Update Catalog.
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param EffectiveModeFlag		Effective Mode Flag.		
-- #param EffectiveFromDate		Effective From Date.
-- #param EffectiveThruDate		Effective Thru Date.
-- #param Description			Description.
-- #param SequenceNumber		SequenceNumber.
-- #param InstallationID	    InstallationID.
-- #param MCU					MCU					
-- #param MCUBehavior			MCU Behavior
-- #param UserID				User Id
-- #param ProgramID				Program Id
-- #param WorkStationID			WorkStation ID		
-- #param DateUpdated			Date Updated			
-- #param TimeLastUpdated		Time Last Updated


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdCatalog  
(
	InstallationID			IN NVARCHAR2,
	CatalogId				IN NVARCHAR2,
	EffectiveModeFlag 		IN DECIMAL,
	EffectiveFromDate		IN DECIMAL,
	EffectiveThruDate		IN DECIMAL,
	Description				IN NVARCHAR2,
	SequenceNumber			IN DECIMAL,
	MCU						IN NVARCHAR2,	
	MCUBehavior				IN NVARCHAR2,	
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	WorkStationID			IN NVARCHAR2,
	DateUpdated				IN NUMERIC,
	TimeLastUpdated			IN NUMERIC
)	
AS
BEGIN
    UPDATE [SCDATA].FQ67412
            SET 
			    CA$9EFM = EffectiveModeFlag,
                CAEFFF  = EffectiveFromDate,
                CAEFFT  = EffectiveThruDate,
                CADSC1  = Description,
                CASEQ   = SequenceNumber,
				CAMCU	= MCU,
			    CA$9CCFU = MCUBehavior,
			    CAUSER  = UserID,
			    CAPID   = ProgramID,
			    CAUPMJ  = DateUpdated,
			    CAUPMT  = TimeLastUpdated,
			    CAJOBN  = WorkStationID   
         WHERE
               TRIM(CA$9CLGID) = TRIM(CatalogID) AND
			    CA$9INID = InstallationID;
END;
  /

-- #desc				        Update Catalog Detail
-- #bl_class				    Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param UniqueKeyID			UniqueKeyID
-- #param ParentKeyID    	    ParentKeyID.
-- #param IncludeInSearch		Include In Search.
-- #param DataItem				Data Item.
-- #param UserDefinedCode	    User Defined Code.
-- #param Description			Description.
-- #param EffectiveModeFlag	    Effective Mode Flag.		
-- #param EffectiveFromDate	    Effective From Date.
-- #param EffectiveThruDate	    Effective Thru Date.
-- #param SequenceNumber		SequenceNumber.
-- #param ImageName			    Image Name.
-- #param TemplateID			TemplateID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdCatalogDetail  
(
    CatalogId	        IN NVARCHAR2,
	UniqueKeyID         IN DECIMAL,
	ParentKeyID    	    IN DECIMAL,	
	IncludeInSearch	    IN DECIMAL,
	DataItem		    IN NVARCHAR2,
	UserDefinedCode	    IN NVARCHAR2,
	Description	        IN NVARCHAR2,
    EffectiveModeFlag 	IN DECIMAL,	
	EffectiveFromDate	IN DECIMAL,
	EffectiveThruDate	IN DECIMAL,
	SequenceNumber		IN DECIMAL,
	ImageName			IN NVARCHAR2,
	TemplateID			IN NVARCHAR2
)	
AS
BEGIN	
    UPDATE [SCDATA].FQ67413
        SET
           CD$9PKID =	ParentKeyID,
           CD$9IIS	=	IncludeInSearch,
           CDDTAI	=	DataItem,
           CDKY		=	UserDefinedCode,
           CDDL01	=	Description ,
           CD$9EFM	=	EffectiveModeFlag,
           CDEFFF	=	EffectiveFromDate,
           CDEFFT	=	EffectiveThruDate,   
           CDSEQ	=	SequenceNumber,
           CDIMGURL	=	ImageName,
           CDTMPI   =	TemplateID
    WHERE
           TRIM(CD$9CLGID) = TRIM(CatalogID) AND
			CDUKID    = UniqueKeyID;
END;  
  /

-- #desc					Update Catalog Detail Language
-- #bl_class				Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CatalogId			Catalog Id.
-- #param UniqueKeyID		UniqueKeyID.
-- #param LangPref	    	Language Preference.
-- #param Description		Description.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdCatalogDetailLang  
(
	CatalogId       IN NVARCHAR2,
	UniqueKeyID     IN DECIMAL,
	LangPref	    IN NVARCHAR2,
	Description	    IN NVARCHAR2
)	
AS
BEGIN
    UPDATE [SCDATA].FQ67413L
        SET CDDL01 = Description
    WHERE
        (TRIM(CD$9CLGID) = TRIM(CatalogID)    AND
		CDUKID    = UniqueKeyID  AND
		TRIM(CDLNGP)    = TRIM(LangPref));
END;
  /

-- #desc						Update the image reference of the nodes of catalog copied.
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param NewCatalogID			Catalog id to update
-- #param NodeImagesTrio		String of Trios with node id ~ the related old image id ~ new image id after copy

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdCatalogImages
(
	NewCatalogID IN NVARCHAR2,
	NodeImagesTrios IN NVARCHAR2
)
AS
	Pos INT;
	NextString NVARCHAR2(50);

	InnerPos INT := 0;
	NodeID NVARCHAR2(3) := '';
	Old_NewImagesStr NVARCHAR2(50) := '';
	OldImageID NVARCHAR2(50) := '';
	NewImageID NVARCHAR2(50) := '';
	NodeImagesTriosTMP NVARCHAR2(32767) := NodeImagesTrios;
  
BEGIN

	IF (TRIM(NodeImagesTriosTMP) IS NOT NULL) THEN
		Pos := INSTR(NodeImagesTriosTMP, '|@');
		WHILE (Pos <> 0)
		LOOP
			BEGIN
				NextString := SUBSTR(NodeImagesTriosTMP, 1, Pos - 1);
				NodeImagesTriosTMP := SUBSTR(NodeImagesTriosTMP,Pos + 2,LENGTH(NodeImagesTriosTMP));
				Pos := INSTR(NodeImagesTriosTMP, '|@');

				InnerPos := INSTR(NextString, '~');
				NodeID := SUBSTR(NextString, 1, InnerPos - 1);
				
				Old_NewImagesStr := SUBSTR(NextString, InnerPos + 1, LENGTH(NextString));
				InnerPos := INSTR(Old_NewImagesStr, '~');

				OldImageID := SUBSTR(Old_NewImagesStr, 1, InnerPos - 1);
				NewImageID := SUBSTR(Old_NewImagesStr, InnerPos + 1, LENGTH(Old_NewImagesStr));

				UPDATE [SCDATA].FQ67413 SET CDIMGURL = NewImageID
					WHERE TRIM(CD$9CLGID) = TRIM(NewCatalogID)
						AND CDUKID = NodeID;
			END; -- BEGIN WHILE
		END LOOP;
	END IF;--IF 

END;
  /

-- #desc						Update Catalog Language
-- #bl_class					Premier.Inventory.CatalogLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param LangPref	    	    Language Preference.
-- #param Description			Description.


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdCatalogLang  
(
	CatalogId       IN NVARCHAR2,
	LangPref	    IN NVARCHAR2,
	Description		IN NVARCHAR2
)
AS
BEGIN
    UPDATE [SCDATA].FQ67412L
        SET 
		   CADSC1 = Description
    WHERE
        TRIM(CA$9CLGID) = TRIM(CatalogID) AND
		TRIM(CALNGP)	= TRIM(LangPref);
END;
  /

-- #desc							Update Catalog Node Item
-- #bl_class						Premier.Inventory.CatalogNodeItem.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param CatalogId					Catalog Id
-- #param UniqueKeyID				UniqueKey ID
-- #param ItemNumber				Item Number
-- #param SequenceNumber			Sequence Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdCatalogNodeItem
(
	CatalogId				NVARCHAR2,
	UniqueKeyID				DECIMAL,
	ItemNumber				DECIMAL,
	SequenceNumber			DECIMAL,
	UserReservedNumber		DECIMAL,
	UserReservedAmount		DECIMAL,
	UserReservedCode		NVARCHAR2,
	UserReservedDate		DECIMAL,
	UserReservedReference	NVARCHAR2,
	UserID					NVARCHAR2,
	ProgramID				NVARCHAR2,
	DateUpdated				DECIMAL,
	TimeLastUpdated			DECIMAL,
	WorkStationID			NVARCHAR2
)
AS
BEGIN

	UPDATE
		[SCDATA].FQ67413I
	SET
		INSEQ	=	SequenceNumber,
		INURAB	=	UserReservedNumber,
		INURAT	=	UserReservedAmount,
		INURCD	=	UserReservedCode,
		INURDT	=	UserReservedDate,
		INURRF	=	UserReservedReference,
		INUSER	=	UserID,
		INPID	=	ProgramID,
		INUPMJ	=	DateUpdated,
		INUPMT	=	TimeLastUpdated,
		INJOBN	=	WorkStationID
	WHERE
		(TRIM(IN$9CLGID) =	TRIM(CatalogId)) AND
	    INUKID = UniqueKeyID AND
	    INITM  = ItemNumber;
END;
	    
  /
-- #desc				        Update the Item Web Content Detail Information (Paragraphs)
-- #bl_class				    Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID	    InstallationID.
-- #param ItemNumber			ItemNumber.
-- #param DesignStatus			DesignStatus.
-- #param UniqueKeyID			Unique Key ID.
-- #param SequenceNumber		SequenceNumber.
-- #param ParagraphTitle		ParagraphTitle.
-- #param HtmlContent			HtmlContent.
-- #param ActiveInactive		Active-Inactive.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdItemWebContentDetail 
(
	InstallationID      IN NVARCHAR2,
	ItemNumber          IN DECIMAL,
	DesignStatus        IN DECIMAL,
	UniqueKeyID         IN DECIMAL,
	SequenceNumber      IN DECIMAL,
	ParagraphTitle      IN NVARCHAR2,
	HtmlContent         IN NCLOB,
	ActiveInactive      IN NVARCHAR2,
	EffectiveFromDate   IN DECIMAL,
	EffectiveThruDate   IN DECIMAL,
	UserReservedDate    IN DECIMAL,
	UserReservedAmount  IN DECIMAL,
	UserReservedNumber  IN DECIMAL,
	UserReservedReference IN NVARCHAR2,
	UserId              IN NVARCHAR2,
	ProgramId           IN NVARCHAR2,
	WorkStationId       IN NVARCHAR2,
	DateUpdated         IN DECIMAL,
	TimeOfDay           IN DECIMAL
)
AS
BEGIN
    UPDATE [SCDATA].FQ67411
        SET 
	      CDSEQ = SequenceNumber,     
          CD$9PTL = ParagraphTitle,
          CD$9HTML = HtmlContent,
          CDASAI = ActiveInactive,
          CDEFFF = EffectiveFromDate,
          CDEFFT = EffectiveThruDate,
          CDURDT = UserReservedDate,
          CDURAT = UserReservedAmount,
          CDURAB = UserReservedNumber,
          CDURRF = UserReservedReference,
          CDUSER = UserId,
          CDPID = ProgramId,
          CDJOBN = WorkStationId,
          CDUPMJ = DateUpdated,
          CDTDAY = TimeOfDay
    WHERE 
            CDITM = ItemNumber
        AND	CD$9INID = InstallationID
        AND	CD$9DS = DesignStatus 
        AND	CDUKID = UniqueKeyID;
END;
  /
-- #desc				    Updates Item Web Content Detail/ Language (Paragraphs)
-- #bl_class				Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber	    Item number
-- #param UniqueKeyID	    Unique Key Id
-- #param InstallationID    Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdItemWebContentDetLang
(
	InstallationID      IN NVARCHAR2,
    ItemNumber          IN DECIMAL,
	UniqueKeyID         IN DECIMAL,
	DesignStatus        IN DECIMAL,
	LangPref            IN NVARCHAR2,
	ParagraphTitle      IN NVARCHAR2,
	HtmlContent         IN NCLOB,
	UserReservedCode    IN NVARCHAR2,
	UserReservedDate    IN DECIMAL,
	UserReservedAmount  IN DECIMAL,
	UserReservedNumber  IN DECIMAL,
	UserReservedReference IN NVARCHAR2,
	UserId              IN NVARCHAR2,
	ProgramId           IN NVARCHAR2,
	WorkStationId       IN NVARCHAR2,
	DateUpdated         IN DECIMAL,
	TimeOfDay           IN DECIMAL
)
AS
BEGIN
    UPDATE [SCDATA].FQ67411L
       SET  CL$9PTL = ParagraphTitle,
	        CLURCD = UserReservedCode,
            CLURDT = UserReservedDate,
            CLURAT = UserReservedAmount,
            CLURAB = UserReservedNumber,
            CLURRF = UserReservedReference,
            CLUSER = UserId,
            CLPID = ProgramId,
            CLJOBN = DateUpdated,
            CLUPMJ = DateUpdated,
            CLTDAY = TimeOfDay,
            CL$9HTML = HtmlContent
     WHERE CLITM = ItemNumber
         AND CL$9INID = InstallationID
         AND CLUKID = UniqueKeyID
         AND TRIM(CLLNGP) = TRIM(LangPref) 
         AND CL$9DS = DesignStatus;
END;
  /
-- #desc				    Updates Item Web Content Information
-- #bl_class			    Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item number
-- #param InstallationID	Installation ID		
-- #param DesignStatus		Item Content Design status

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdItemWebContentHeader 
(
		InstallationID      IN NVARCHAR2,	
        ItemNumber          IN DECIMAL,
		DesignStatus        IN DECIMAL,
		Description1        IN NVARCHAR2,
		Description2        IN NVARCHAR2,
		Description3        IN NVARCHAR2,
		MessagePriority     IN DECIMAL,
		HtmlContent         IN NCLOB,
		PortalUrl           IN NVARCHAR2,
		UserReservedCode    IN NVARCHAR2,
		UserReservedDate    IN DECIMAL,
		UserReservedAmount  IN DECIMAL,
		UserReservedNumber  IN DECIMAL,
		UserReservedReference IN NVARCHAR2,
		UserId              IN NVARCHAR2,
		ProgramId           IN NVARCHAR2,
		WorkStationId       IN NVARCHAR2,
		DateUpdated         IN DECIMAL,
		TimeOfDay           IN DECIMAL
)
AS
BEGIN	
	UPDATE [SCDATA].FQ67410
    SET CHDSC1 = Description1
      ,CHDSC2 = Description2
      ,CHDSC3 = Description3
      ,CH$9PRI = MessagePriority
      ,CHPTURL = PortalUrl
      ,CHURCD = UserReservedCode
      ,CHURDT = UserReservedDate
      ,CHURAT = UserReservedAmount
      ,CHURAB = UserReservedNumber
      ,CHURRF = UserReservedReference
      ,CHUSER = UserId
      ,CHPID =  ProgramId
      ,CHJOBN = WorkStationId
      ,CHUPMJ = DateUpdated
      ,CHTDAY = TimeOfDay
      ,CH$9HTML = HtmlContent
    WHERE  
        CHITM = ItemNumber AND
        CH$9INID = InstallationID  AND
        CH$9DS = DesignStatus;
END;


  /
-- #desc					Updates Item Content - Language
-- #bl_class				Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number
-- #param InstallationID	Installation ID		
-- #param DesignStatus		Item Design Status

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdItemWebContentHeadLang
(
		InstallationID      IN NVARCHAR2,	
        ItemNumber          IN DECIMAL,
		DesignStatus        IN DECIMAL,	
		LangPref            IN NVARCHAR2,
		Description1        IN NVARCHAR2,
		Description2        IN NVARCHAR2,
		Description3        IN NVARCHAR2,
		HtmlContent         IN NCLOB,
		UserReservedCode    IN NVARCHAR2,
		UserReservedDate    IN DECIMAL,
		UserReservedAmount  IN DECIMAL,
		UserReservedNumber  IN DECIMAL,
		UserReservedReference IN NVARCHAR2,
		UserId              IN NVARCHAR2,
		ProgramId           IN NVARCHAR2,
		WorkStationId       IN NVARCHAR2,
		DateUpdated         IN DECIMAL,
		TimeOfDay           IN DECIMAL		
)
AS
BEGIN
	UPDATE [SCDATA].FQ67410L
	SET CLDSC1 = Description1
      ,CLDSC2 = Description2
      ,CLDSC3 = Description3
      ,CLURCD = UserReservedCode
      ,CLURDT = UserReservedDate
      ,CLURAT = UserReservedAmount
      ,CLURAB = UserReservedNumber
      ,CLURRF = UserReservedReference
      ,CLUSER = UserId
      ,CLPID =  ProgramId
      ,CLJOBN = WorkStationId
      ,CLUPMJ = DateUpdated
      ,CLTDAY = TimeOfDay
      ,CL$9HTML = HtmlContent
    WHERE  
            CLITM = ItemNumber 
        AND CL$9INID = InstallationID 
        AND TRIM(CLLNGP) = TRIM(LangPref)
        AND CL$9DS = DesignStatus;
 END;
  /
-- #desc					Update UOM 
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdUnitOfMeasure
(
	InstallationID  IN NVARCHAR2,
	UnitOfMeasure   IN NVARCHAR2,
	Description     IN NVARCHAR2
)
AS
BEGIN
	UPDATE 
		[SCDATA].FQ67415
	SET  
		UMDSC1 = Description
	WHERE 
		UM$9INID = InstallationID
	    AND TRIM(UMUOM) = TRIM(UnitOfMeasure);
END;




  /
-- #desc						Update UOM Lang
-- #bl_class					Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UnitOfMeasure		    Unit of Measure	
-- #param LangPref				Language Preference
-- #param Description			Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdUnitOfMeasureLang
(
	UnitOfMeasure		IN NVARCHAR2,
	Description		    IN NVARCHAR2,
	LangPref			IN NVARCHAR2
)
AS
BEGIN
	UPDATE [SCDATA].FQ67415L
	  SET  UMDSC1 =	 Description
	WHERE 
	  TRIM(UMUOM) = TRIM(UnitOfMeasure)
	  AND TRIM(UMLNGP) =	 TRIM(LangPref);
END;


  
  /

-- #desc				    Creates "How you heard about us" options
-- #bl_class				Premier.Profile.AboutUs.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param AboutUsID		    How you heard about us id
-- #param Description		How you heard about description
-- #param AllowedOnESOM		N/A
-- #param AllowedOnPOS		N/A
-- #param AllowedOnWEB		N/A
-- #param ProgramID		    N/A
-- #param WorkStationID		N/A
-- #param UserID		    N/A
-- #param DateUpdated		N/A
-- #param TimeLastUpdated	N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_AddAboutUs 
(
    AboutUsID       IN  NVARCHAR2,
    Description     IN  NVARCHAR2,
    AllowedOnESOM   IN  DECIMAL,
    AllowedOnPOS    IN  DECIMAL,
    AllowedOnWEB    IN  DECIMAL,
    ProgramID       IN  NVARCHAR2,
    WorkStationID   IN  NVARCHAR2,
    UserID          IN  NVARCHAR2,
    DateUpdated     IN  DECIMAL,
    TimeLastUpdated IN  DECIMAL
)
AS
BEGIN
    INSERT INTO [SCDATA].FQ67102
    (
        HH$9HHA,  HHDSC1,  HH$9ESOM, HH$9POSA, HH$9WEBA,
        HHPID,    HHJOBN,  HHUSER,   HHUPMJ,   HHUPMT
    )
    VALUES
    (
        AboutUsID, Description, AllowedOnESOM, AllowedOnPOS, AllowedOnWEB, 
        ProgramID,   WorkStationID, UserID,   DateUpdated,   TimeLastUpdated
    );
END;

  /

-- #desc				    Create AboutUs language.
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AboutUsID		    AboutUs ID
-- #param LangPref			Language Preference
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_AddAboutUsLang
(
	AboutUsID		IN  NVARCHAR2,
	LangPref		IN  NVARCHAR2,
	Description	    IN  NVARCHAR2
)

AS
BEGIN

    INSERT INTO [SCDATA].FQ67102L
    (
         HH$9HHA,  
         HHLNGP,  
         HHDSC1
    )
    VALUES
    (
         AboutUsID,
         LangPref,
         Description 
    );
END;
  /

-- #desc						Create line of business.
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LineOfBusinessID		Line of business 
-- #param Description			Description
-- #param BranchPlant			Branch Plant
-- #param AddressBookType		Address type
-- #param PersonCorporationCode	Person Code
-- #param AdjustmentSchedule	Adjustment Schedule
-- #param PriceGroup			Price Group
-- #param SequenceNumber		Sequence Number
-- #param CategoryCode01		N/A
-- #param CategoryCode02		N/A
-- #param CategoryCode03		N/A
-- #param CategoryCode04		N/A
-- #param CategoryCode05		N/A
-- #param CategoryCode06		N/A
-- #param CategoryCode07		N/A
-- #param CategoryCode08		N/A
-- #param CategoryCode09		N/A
-- #param CategoryCode10		N/A
-- #param CategoryCode11		N/A
-- #param CategoryCode12		N/A
-- #param CategoryCode13		N/A
-- #param CategoryCode14		N/A
-- #param CategoryCode15		N/A
-- #param CategoryCode16		N/A
-- #param CategoryCode17		N/A
-- #param CategoryCode18		N/A
-- #param CategoryCode19		N/A
-- #param CategoryCode20		N/A
-- #param CategoryCode21		N/A
-- #param CategoryCode22		N/A
-- #param CategoryCode23		N/A
-- #param CategoryCode24		N/A
-- #param CategoryCode25		N/A	
-- #param CategoryCode26		N/A
-- #param CategoryCode27		N/A
-- #param CategoryCode28		N/A
-- #param CategoryCode29		N/A
-- #param CategoryCode30		N/A
-- #param ProgramID				Program ID
-- #param WorkStationID			WorkStation ID
-- #param UserID				User ID
-- #param DateUpdated			Last Date Update
-- #param TimeLastUpdated		Last Updated time

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_AddLineOfBusiness
(
    LineOfBusinessID IN NVARCHAR2,
	Description    IN NVARCHAR2,
	BranchPlant    IN NVARCHAR2,
	AddressBookType IN DECIMAL,
	PersonCorporationCode IN NVARCHAR2,
	AdjustmentSchedule IN NVARCHAR2,
	PriceGroup IN NVARCHAR2,
	SequenceNumber IN DECIMAL,
	CategoryCode01 IN NVARCHAR2,
	CategoryCode02 IN NVARCHAR2,
	CategoryCode03 IN NVARCHAR2,
	CategoryCode04 IN NVARCHAR2,
	CategoryCode05 IN NVARCHAR2,
	CategoryCode06 IN NVARCHAR2,
	CategoryCode07 IN NVARCHAR2,
	CategoryCode08 IN NVARCHAR2,
	CategoryCode09 IN NVARCHAR2,
	CategoryCode10 IN NVARCHAR2,
	CategoryCode11 IN NVARCHAR2,
	CategoryCode12 IN NVARCHAR2,
	CategoryCode13 IN NVARCHAR2,
	CategoryCode14 IN NVARCHAR2,
	CategoryCode15 IN NVARCHAR2,
	CategoryCode16 IN NVARCHAR2,
	CategoryCode17 IN NVARCHAR2,
	CategoryCode18 IN NVARCHAR2,
	CategoryCode19 IN NVARCHAR2,
	CategoryCode20 IN NVARCHAR2,
	CategoryCode21 IN NVARCHAR2,
	CategoryCode22 IN NVARCHAR2,
	CategoryCode23 IN NVARCHAR2,
	CategoryCode24 IN NVARCHAR2,
	CategoryCode25 IN NVARCHAR2,
	CategoryCode26 IN NVARCHAR2,
	CategoryCode27 IN NVARCHAR2,
	CategoryCode28 IN NVARCHAR2,
	CategoryCode29 IN NVARCHAR2,
	CategoryCode30 IN NVARCHAR2,
	UserID         IN NVARCHAR2,
	ProgramID      IN NVARCHAR2,
	DateUpdated    IN DECIMAL,
	WorkStationID  IN NVARCHAR2,
	TimeLastUpdated IN DECIMAL
)
AS
BEGIN
    INSERT INTO [SCDATA].FQ67103
    (
         LB$9LOB,  LBDSC1,  LBMCU,    LB$9TYP,
         LBTAXC,   LBASN,   LBCPGP,   LBSEQ, 
         LBAC01,   LBAC02,  LBAC03,   LBAC04, 
         LBAC05,   LBAC06,  LBAC07,   LBAC08, 
         LBAC09,   LBAC10,  LBAC11,   LBAC12, 
         LBAC13,   LBAC14,  LBAC15,   LBAC16, 
         LBAC17,   LBAC18,  LBAC19,   LBAC20, 
         LBAC21,   LBAC22,  LBAC23,   LBAC24, 
         LBAC25,   LBAC26,  LBAC27,   LBAC28, 
         LBAC29,   LBAC30,  LBPID,    LBJOBN,
         LBUSER,   LBUPMJ,  LBUPMT
    )
    VALUES
    (
         LineOfBusinessID, Description, BranchPlant,   AddressBookType, 
         PersonCorporationCode,  AdjustmentSchedule,  PriceGroup,  SequenceNumber, 
         CategoryCode01,  CategoryCode02, CategoryCode03,  CategoryCode04, 
         CategoryCode05,  CategoryCode06, CategoryCode07,  CategoryCode08, 
         CategoryCode09,  CategoryCode10, CategoryCode11,  CategoryCode12, 
         CategoryCode13,  CategoryCode14, CategoryCode15,  CategoryCode16, 
         CategoryCode17,  CategoryCode18, CategoryCode19,  CategoryCode20, 
         CategoryCode21,  CategoryCode22, CategoryCode23,  CategoryCode24, 
         CategoryCode25,  CategoryCode26, CategoryCode27,  CategoryCode28, 
         CategoryCode29,  CategoryCode30, ProgramID,   WorkStationID,
         UserID,  DateUpdated, TimeLastUpdated
    );
END;





  /

-- #desc					Create line of business language.
-- #bl_class				Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param LineOfBusinessID	Line of business 
-- #param LangPref			Language Preference
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_AddLineOfBusinessLang
(
	LineOfBusinessID    IN NVARCHAR2,
	LangPref			IN NVARCHAR2,
	Description		    IN NVARCHAR2
)
AS
BEGIN
    INSERT INTO [SCDATA].FQ67103L
	(
	     LB$9LOB,  
	     LBLNGP,  
	     LBDSC1
	)
	VALUES
	(
	     LineOfBusinessID,
	     LangPref,
	     Description 
	);
END;





  /

-- #desc					Delete AboutUs.
-- #bl_class				Premier.Profile.AboutUs.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AboutUsID			AboutUsID 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_DelAboutUs
(
   AboutUsID    IN NVARCHAR2
)
   
AS
BEGIN
	DELETE 
			[SCDATA].FQ67102 
	WHERE 
			TRIM(HH$9HHA) = TRIM(AboutUsID);
	[SCLIBRARY].PRO_DelAboutUsLang( AboutUsID,null);
END;
  /

-- #desc				    Delete Default Bank Account.
-- #bl_class				Premier.Profile.BankAccount
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param UniqueId			Unique Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_DelBankAccountDefault
(
	AddressNumber	IN NUMBER,
	UniqueId		IN NUMBER
)
AS
BEGIN
    UPDATE  [SCDATA].FQ670030 A
       SET  A.BA$9BADEF = N'0'
       WHERE exists(
        SELECT 1 FROM [SCDATA].F0030 B
         WHERE b.AYUKID = a.BAUKID AND
               b.AYAN8 = AddressNumber AND b.AYUKID = UniqueId);
END;

		 
  /

-- #desc					Delete line of business.
-- #bl_class				Premier.Profile.LineOfBusiness.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param LineOfBusinessID	Line of business 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_DelLineOfBusiness
(
	LineOfBusinessID IN NVARCHAR2
)

AS
BEGIN
	DELETE 
			[SCDATA].FQ67103 
	WHERE 
			TRIM(LB$9LOB)  = TRIM(LineOfBusinessID);
			
	[SCLIBRARY].PRO_DelLineOfBusinessLang(LineOfBusinessID,null);
END;

  /

-- #desc						Create a join between LOB and Installation
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param LineOfBusinessID		Line of business 
-- #param ProgramID				Program ID
-- #param WorkStationID			WorkStation ID
-- #param UserID				User ID
-- #param DateUpdated			Last Date Update
-- #param TimeLastUpdated		Last Updated time

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcAddLineOfBusinessByInst
(
	InstallationID      IN NVARCHAR2,
	LineOfBusinessID    IN NVARCHAR2,
	ProgramID           IN NVARCHAR2,
	WorkStationID       IN NVARCHAR2,
	UserID              IN NVARCHAR2,
	DateUpdated         IN DECIMAL,
	TimeLastUpdated     IN DECIMAL
)
AS
BEGIN

	INSERT INTO [SCDATA].FQ671031
	(
		LI$9LOB,  LI$9INID,  LIPID, 
		LIJOBN,   LIUSER,    LIUPMJ,  
		LIUPMT
	)
	VALUES
	(
		LineOfBusinessID, InstallationID, ProgramID, 
		WorkStationID,  UserID,   DateUpdated, 
		TimeLastUpdated
	);
END;
  /

-- #desc							Get ship tos count by address number AND status
-- #bl_class						Premier.Profile.GetShipToCountCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A
		
--�#param�StoreId					StoreId
-- #param Company					Company
-- #param AddressBookType			AddressBook Type 
-- #param ParentAddressNumber		Parent Address Number
-- #param Status					Status Active = 0 (AICUSTS <> 1), Inactive = 1, Any = 2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcGetShipToCount
(
    StoreId				IN NCHAR,
	Company				IN NVARCHAR2,
	AddressBookType		IN DECIMAL,    
    ParentAddressNumber	IN DECIMAL,
    Status				IN DECIMAL,
	ShipTosCount		OUT INT
) 
AS
	--------------------------Gets the Organization Structure Type
	OrgStrType	NCHAR(3);
	OrgStrTypeINID	NCHAR(3) := StoreId;
BEGIN   	
	[SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

	IF (AddressBookType = 0) THEN
		WITH SHIPTOS AS 
		(
			SELECT MAAN8 FROM [SCDATA].F0150 WHERE MAPA8 = ParentAddressNumber AND MAOSTP = OrgStrType
			UNION ALL 
			SELECT ParentAddressNumber MAAN8 FROM SYS.DUAL  
		),
		CUSTOMERS AS (
			SELECT NVL(B.AIBADT, A.AIBADT) BADT, NVL(B.AICUSTS,A.AICUSTS) CUSTS 
			FROM SHIPTOS
			INNER JOIN [SCDATA].F03012 A
				ON MAAN8 = A.AIAN8
			LEFT OUTER JOIN [SCDATA].F03012 B
				ON MAAN8 = B.AIAN8
				AND B.AICO = Company
			WHERE A.AICO = '00000'
		)
		SELECT COUNT(1) INTO ShipTosCount
		FROM CUSTOMERS
		WHERE BADT IN ('S', 'X')
		AND (Status = 2 OR (Status= 1 AND CUSTS ='1') OR (Status = 0 AND CUSTS <> '1'));
	ELSE			
		SELECT COUNT(1) INTO ShipTosCount
		FROM [SCDATA].FQ670302
		WHERE (PR$9PA8 = ParentAddressNumber OR  PR$9AN8 = ParentAddressNumber)
		AND PRBADT IN ('S', 'X')
		AND (Status = 2 
			OR (Status= 1 AND PR$9STS  ='1') 
			OR (Status = 0 AND PR$9STS  <> '1')
			);
	END IF;	
END;
 
  /

-- #desc						Gets Customer/Consumer look up information
-- #bl_class					Premier.Profile.LookUpCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param State 				State to search for
-- #param ZipCode 				ZipCode number to search for
-- #param CompressedName 		Compress name to search for
-- #param CompressedAddress1 	Compress Address 1 to search for
-- #param CompressedAddress2 	Compress Address 2 to search for
-- #param AddressType 		    Address Book Type - 0 Customer 1 Consumer

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcLookUp
 (
	State 		        IN NVARCHAR2,
	ZipCode	            IN NVARCHAR2,
	CompressedName      IN NVARCHAR2,
	CompressedAddress1  IN NVARCHAR2,
	CompressedAddress2  IN NVARCHAR2,
	AddressType         IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
    Counter INT;
BEGIN
    IF(AddressType = 0) --Customer
        THEN
            OPEN ResultData1 FOR
		        SELECT 
			        CC$9AN8 AS AddressNumber, 
			        CC$9TYP AS AddressType,  
			        CC$9PA8 AS ParentNumber,
			        NVL(PS$9ICF,-1) AS IndividualCompanyFlag,
			        ABTAXC AS PersonCorporateCode
		        FROM 
		            [SCDATA].FQ670312 CC,
		            [SCDATA].F03012 T0,				--Join Customer Master
		            [SCDATA].FQ67107 PS,
		            [SCDATA].F0101 AB
		        WHERE 
					TRIM(T0.AICO)  = '00000'
		        AND	T0.AIAN8 = CC.CC$9AN8
		        AND (TRIM(T0.AIBADT) = 'B' OR TRIM(T0.AIBADT) = 'X')	--Billing Type Filter
		        AND PS.PS$9AN8(+) = CC.CC$9AN8
		        AND PS.PS$9TYP(+) = 0
		        AND AB.ABAN8 = CC$9AN8
		        AND CC$9TYP = 0  -- Customers Only
		        AND NVL(TRIM(CCADDS), ' ') = NVL(TRIM(State), ' ')
		        AND NVL(TRIM(CCADDZ), ' ') = NVL(TRIM(ZipCode), ' ')  
		        AND TRIM(CC$9ADCN) = TRIM(CompressedName) 
		        AND TRIM(CC$9ADC1) = TRIM(CompressedAddress1) 
		        AND NVL(TRIM(CC$9ADC2), ' ') = NVL(TRIM(CompressedAddress2), ' ');
    ELSE 
        IF(AddressType = 1) --Consumer
            THEN
                BEGIN
                    SELECT COUNT(*) INTO Counter
	                FROM 
	                    [SCDATA].FQ670312 CC,
	                    [SCDATA].FQ670302 T0
	                WHERE 
	                        (CC.CC$9AN8 = T0.PR$9AN8)
	                    AND (TRIM(T0.PRBADT) = 'B' OR TRIM(T0.PRBADT) = 'X')	--Billing Type Filter
	                    AND (CC$9TYP = 1) -- Consumers Only
						AND NVL(TRIM(CCADDS), ' ') = NVL(TRIM(State), ' ')
						AND NVL(TRIM(CCADDZ), ' ') = NVL(TRIM(ZipCode), ' ')  
						AND TRIM(CC$9ADCN) = TRIM(CompressedName) 
						AND TRIM(CC$9ADC1) = TRIM(CompressedAddress1) 
						AND NVL(TRIM(CC$9ADC2), ' ') = NVL(TRIM(CompressedAddress2), ' ')
	                    AND (T0.PR$9AN8 <> T0.PR$9PA8);				--Exclude Parents
	                    EXCEPTION WHEN NO_DATA_FOUND THEN 
	                    Counter := 0;
	            END;	
		        
            IF(Counter > 0)
                THEN
                    OPEN ResultData1 FOR
	                    SELECT 
		                    CC$9AN8 AS AddressNumber, 
		                    CC$9TYP AS AddressType,  
		                    CC$9PA8 AS ParentNumber,
		                    NVL(PS$9ICF,-1) AS IndividualCompanyFlag,
		                    PRTAXC  AS PersonCorporateCode
	                    FROM 
	                        [SCDATA].FQ670312 CC,
	                        [SCDATA].FQ670302 T0, 				--Join Consumer Master
	                        [SCDATA].FQ67107 PS
	                    WHERE 
	                        (CC.CC$9AN8 = T0.PR$9AN8)
	                    AND (TRIM(T0.PRBADT) = 'B' OR TRIM(T0.PRBADT) = 'X')	--Billing Type Filter
	                    AND (PS.PS$9AN8(+) = CC.CC$9AN8)
	                    AND (PS.PS$9TYP(+) = 1)
	                    AND (CC$9TYP = 1) -- Consumers Only
	                    AND NVL(TRIM(CCADDS), ' ') = NVL(TRIM(State), ' ')
						AND NVL(TRIM(CCADDZ), ' ') = NVL(TRIM(ZipCode), ' ')  
						AND TRIM(CC$9ADCN) = TRIM(CompressedName) 
						AND TRIM(CC$9ADC1) = TRIM(CompressedAddress1) 
						AND NVL(TRIM(CC$9ADC2), ' ') = NVL(TRIM(CompressedAddress2), ' ')
	                    AND (T0.PR$9AN8 <> T0.PR$9PA8);					--Exclude Parents
	        END IF;
	        
	    ELSE
	        OPEN ResultData1 FOR
		        SELECT 
			        CC$9AN8 AS AddressNumber, 
			        CC$9TYP AS AddressType,  
			        CC$9PA8 AS ParentNumber,
			        NVL(PS$9ICF,-1) AS IndividualCompanyFlag,
			        PRTAXC AS PersonCorporateCode
		        FROM 
		            [SCDATA].FQ670312 CC,
		            [SCDATA].FQ670302 T0,				--Join Consumer Master
		            [SCDATA].FQ67107 PS
		        WHERE 
		            CC.CC$9AN8 = T0.PR$9AN8
		        AND (TRIM(T0.PRBADT) = 'B' OR TRIM(T0.PRBADT) = 'X')	--Billing Type Filter
		        AND PS.PS$9AN8(+) = CC.CC$9AN8
		        AND PS.PS$9TYP(+) = 1
		        AND CC$9TYP = 1  -- Consumers Only
		        AND NVL(TRIM(CCADDS), ' ') = NVL(TRIM(State), ' ')
				AND NVL(TRIM(CCADDZ), ' ') = NVL(TRIM(ZipCode), ' ')  
				AND TRIM(CC$9ADCN) = TRIM(CompressedName) 
				AND TRIM(CC$9ADC1) = TRIM(CompressedAddress1) 
				AND NVL(TRIM(CC$9ADC2), ' ') = NVL(TRIM(CompressedAddress2), ' ');
	    END IF;
	END IF;
 END;
  /

-- #desc						Remove a join between LOB and Installation
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param   InstallationID	    Installation ID
-- #param   LineOfBusinessID	Line of business 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcRemLineOfBusinessByInst
(
	InstallationID      IN NVARCHAR2,
	LineOfBusinessID    IN NVARCHAR2
)
AS
BEGIN
	DELETE 
	
	FROM  
		[SCDATA].FQ671031  
	WHERE 
		    TRIM(LI$9LOB) = TRIM(LineOfBusinessID) 
		AND LI$9INID = InstallationID;
END;
  /

-- #desc					Resolve P4210 Version Rule
-- #bl_class				Premier.Profile.ResolveP4210VersRuleCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param AddressBookType	Address Book Type
-- #param AddressNumber		Address Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcResolP4210VerRule
(
	InstallationID	IN NCHAR,
	AddressBookType	DECIMAL,
	AddressNumber	NUMBER,
	ResultData1		OUT GLOBALPKG.refcursor
)
AS
	P4210Version		NCHAR(10);
	RuleTypeHierarchy	NVARCHAR2(2);
	RuleUniqueId		NUMBER;
	CompareValue		NCHAR(12);
	RuleCategoryCode	NCHAR(2);
	NUM					INT;
	LocalInstallationID NCHAR(3) := InstallationID;
	/* Variable Customer/Consumer information */
	PricingGroup		NCHAR(8);
	AdjustmentSchedule	NCHAR(8);
	State				NCHAR(3);
	Country				NCHAR(3);
	BusinessUnit		NCHAR(12);
	CategoryCode01		NCHAR(3);
	CategoryCode02		NCHAR(3);
	CategoryCode03		NCHAR(3);
	CategoryCode04		NCHAR(3);
	CategoryCode05		NCHAR(3);
	CategoryCode06		NCHAR(3);
	CategoryCode07		NCHAR(3);
	CategoryCode08		NCHAR(3);
	CategoryCode09		NCHAR(3);
	CategoryCode10		NCHAR(3);
	CategoryCode11		NCHAR(3);
	CategoryCode12		NCHAR(3);
	CategoryCode13		NCHAR(3);
	CategoryCode14		NCHAR(3);
	CategoryCode15		NCHAR(3);
	CategoryCode16		NCHAR(3);
	CategoryCode17		NCHAR(3);
	CategoryCode18		NCHAR(3);
	CategoryCode19		NCHAR(3);
	CategoryCode20		NCHAR(3);
	CategoryCode21		NCHAR(3);
	CategoryCode22		NCHAR(3);
	CategoryCode23		NCHAR(3);
	CategoryCode24		NCHAR(3);
	CategoryCode25		NCHAR(3);
	CategoryCode26		NCHAR(3);
	CategoryCode27		NCHAR(3);
	CategoryCode28		NCHAR(3);
	CategoryCode29		NCHAR(3);
	CategoryCode30		NCHAR(3);

	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
		
	/* ------------------------------------------
	 * Used WHILE LOOP
	 * Cursor to SELECT the hierarchy of the P4210VersRule */
	CURSOR RuleCursor IS
	SELECT UNIQUEID, RULETYPE FROM [SCLIBRARY].PRO_EXCRESOLP4210VERRULE_A ORDER BY HIERARCHY;
	/*------------------------------------------*/

BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].PRO_EXCRESOLP4210VERRULE_A';
		
	/* Fill the tmp table with the rule type */
	INSERT INTO [SCLIBRARY].PRO_EXCRESOLP4210VERRULE_A
	SELECT
		RHUKID,
		RHSEQ,
		RHRUDTP
	FROM
		[SCDATA].FQ674230
	WHERE
		RH$9INID = LocalInstallationID
	ORDER BY RHSEQ;
		
	SELECT COUNT(1) INTO NUM FROM [SCLIBRARY].PRO_EXCRESOLP4210VERRULE_A;
		
	/* Get rule values from base installation */
	IF(NUM = 0) THEN
		BEGIN
			LocalInstallationID := '***';
			INSERT INTO [SCLIBRARY].PRO_EXCRESOLP4210VERRULE_A
			SELECT
				RHUKID,
				RHSEQ,
				RHRUDTP
			FROM
				[SCDATA].FQ674230
			WHERE
				RH$9INID = LocalInstallationID
			ORDER BY RHSEQ;
		END;
	END IF;
		
	P4210Version := '';
		
	SELECT COUNT(1) INTO NUM FROM [SCLIBRARY].PRO_EXCRESOLP4210VERRULE_A;
	/* Insert into variables (PricingGroup -  AdjustmentSchedule - State - Country - BusinessUnit - CategoryCode) */
	IF(NUM > 0) THEN
		IF(AddressBookType = 0) THEN /* CUSTOMER */
			SELECT
				B.AICPGP,B.AIASN,C.ALADDS,C.ALCTR,A.ABMCU,A.ABAC01,A.ABAC02,A.ABAC03,A.ABAC04,A.ABAC05,A.ABAC06,
				A.ABAC07,A.ABAC08,A.ABAC09,A.ABAC10,A.ABAC11,A.ABAC12,A.ABAC13,A.ABAC14,A.ABAC15,A.ABAC16,A.ABAC17,
				A.ABAC18,A.ABAC19,A.ABAC20,A.ABAC21,A.ABAC22,A.ABAC23,A.ABAC24,A.ABAC25,A.ABAC26,A.ABAC27,A.ABAC28,
				A.ABAC29,A.ABAC30
			INTO
				PricingGroup,AdjustmentSchedule,State,Country,BusinessUnit,CategoryCode01,CategoryCode02,CategoryCode03,
				CategoryCode04,CategoryCode05,CategoryCode06,CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,
				CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
				CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,
				CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,CategoryCode29,CategoryCode30
			FROM  [SCDATA].F0101 A
			LEFT OUTER JOIN [SCDATA].F03012 B
				ON B.AIAN8 = A.ABAN8
				AND B.AICO = N'00000'
			LEFT OUTER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.ABAN8, CurrentJulianDate)) C
				ON C.ALAN8 = A.ABAN8
			WHERE
				ABAN8 = AddressNumber;
		ELSIF (AddressBookType = 1) THEN /* CONSUMER */
			SELECT
				PRCPGP,PRASN,PRADDS,PRCTR,PRMCU,PR$9AC01,PR$9AC02,PR$9AC03,PR$9AC04,PR$9AC05,PR$9AC06,PR$9AC07,PR$9AC08,
				PR$9AC09,PR$9AC10,PR$9AC11,PR$9AC12,PR$9AC13,PR$9AC14,PR$9AC15,PR$9AC16,PR$9AC17,PR$9AC18,PR$9AC19,
				PR$9AC20,PR$9AC21,PR$9AC22,PR$9AC23,PR$9AC24,PR$9AC25,PR$9AC26,PR$9AC27,PR$9AC28,PR$9AC29,PR$9AC30
			INTO
				PricingGroup,AdjustmentSchedule,State,Country,BusinessUnit,CategoryCode01,CategoryCode02,CategoryCode03,
				CategoryCode04,CategoryCode05,CategoryCode06,CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,
				CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
				CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,
				CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,CategoryCode29,CategoryCode30
			FROM  [SCDATA].FQ670302
			WHERE
				PR$9AN8 = AddressNumber;
		END IF;
			
		BEGIN
			OPEN RuleCursor;
			LOOP
				FETCH RuleCursor INTO RuleUniqueId, RuleTypeHierarchy;
				EXIT WHEN RuleCursor%NOTFOUND;
		
				IF( RuleUniqueId > 0 ) THEN
					
					RuleTypeHierarchy := TRIM(RuleTypeHierarchy);
					/* ---------------------------------------------------------------------------- */
					/* pricing group, adjustment schedule, state, country, or category codes according to rule type */
					IF (RuleTypeHierarchy IN('PG','AS','ST','CN','AC','CC')) THEN
						BEGIN
							IF (RuleTypeHierarchy = 'PG') THEN
								CompareValue := PricingGroup;
							ELSIF (RuleTypeHierarchy = 'AS') THEN
								CompareValue := AdjustmentSchedule;
							ELSIF (RuleTypeHierarchy = 'ST') THEN
								CompareValue := State;
							ELSIF (RuleTypeHierarchy = 'CN')THEN
								CompareValue := Country;
							ELSIF (RuleTypeHierarchy = 'AC' OR RuleTypeHierarchy = 'CC') THEN
								SELECT RHRT INTO RuleCategoryCode FROM [SCDATA].FQ674230 WHERE RH$9INID = LocalInstallationID AND RHUKID = RuleUniqueId;
								SELECT
									CASE RuleCategoryCode
										WHEN N'01' THEN CategoryCode01
										WHEN N'02' THEN CategoryCode02
										WHEN N'03' THEN CategoryCode03
										WHEN N'04' THEN CategoryCode04
										WHEN N'05' THEN CategoryCode05
										WHEN N'06' THEN CategoryCode06
										WHEN N'07' THEN CategoryCode07
										WHEN N'08' THEN CategoryCode08
										WHEN N'09' THEN CategoryCode09
										WHEN N'10' THEN CategoryCode10
										WHEN N'11' THEN CategoryCode11
										WHEN N'12' THEN CategoryCode12
										WHEN N'13' THEN CategoryCode13
										WHEN N'14' THEN CategoryCode14
										WHEN N'15' THEN CategoryCode15
										WHEN N'16' THEN CategoryCode16
										WHEN N'17' THEN CategoryCode17
										WHEN N'18' THEN CategoryCode18
										WHEN N'19' THEN CategoryCode19
										WHEN N'20' THEN CategoryCode20
										WHEN N'21' THEN CategoryCode21
										WHEN N'22' THEN CategoryCode22
										WHEN N'23' THEN CategoryCode23
										WHEN N'24' THEN CategoryCode24
										WHEN N'25' THEN CategoryCode25
										WHEN N'26' THEN CategoryCode26
										WHEN N'27' THEN CategoryCode27
										WHEN N'28' THEN CategoryCode28
										WHEN N'29' THEN CategoryCode29
										WHEN N'30' THEN CategoryCode30
									END CASE
								INTO CompareValue
								FROM SYS.DUAL;
							END IF;
							
								
							IF ((RuleTypeHierarchy = 'AC' AND AddressBookType = 0) OR (RuleTypeHierarchy = 'CC' AND AddressBookType = 1) OR (RuleTypeHierarchy <> 'AC' AND RuleTypeHierarchy <>'CC') )THEN
								BEGIN
									SELECT RHVER
									INTO P4210Version
									FROM [SCDATA].FQ674230,
										[SCDATA].FQ674231
									WHERE
										RH$9INID = LocalInstallationID
										AND RHUKID = RuleUniqueId
										AND RDUKID = RHUKID
										AND RD$9INID = RH$9INID
										AND RDKY = CompareValue;
									EXCEPTION WHEN NO_DATA_FOUND THEN 
									P4210Version := NULL;
								END;
							END IF;
							/* ---------------------------------------------- */
								
					    END;
					END IF;
						
					/* ---------------------------------------------------------------------------- */
					/* Business Unit */
					IF (RuleTypeHierarchy IN('BU')) THEN							
						CompareValue := BusinessUnit;
						BEGIN
							SELECT RHVER
							INTO P4210Version
							FROM [SCDATA].FQ674230,
									[SCDATA].FQ674231
							WHERE 
								RH$9INID = LocalInstallationID
								AND RHUKID = RuleUniqueId
								AND RDUKID = RHUKID
								AND RD$9INID = RH$9INID
								AND RDMCU = CompareValue;
							EXCEPTION WHEN NO_DATA_FOUND THEN 
							P4210Version := NULL;
						END;
					END IF;
						
					/* ---------------------------------------------------------------------------- */
					/* Address Number */
					IF (RuleTypeHierarchy IN('AB','CS')) THEN
							
						/* ----------------AddressBookType---------------- */
						IF (AddressBookType = 0) THEN
							CompareValue := 'AB';
						ELSIF (AddressBookType = 1) THEN
							CompareValue := 'CS';
						END IF;
						/* ---------------------------------------------- */
						BEGIN
							SELECT RHVER
							INTO P4210Version
							FROM [SCDATA].FQ674230, 
									[SCDATA].FQ674231
							WHERE RHRUDTP = CompareValue
									AND RH$9INID = LocalInstallationID
									AND RHUKID = RuleUniqueId
									AND RDUKID = RHUKID
									AND RD$9INID = RH$9INID
									AND RD$9AN8 = AddressNumber;
							EXCEPTION WHEN NO_DATA_FOUND THEN 
							P4210Version := NULL;
						END;
					END IF;
						
				END IF; /* PRINCIPAL IF */
			
			/* Return the P4210 Version */
			IF (TRIM(P4210Version) IS NOT NULL) THEN
			    EXIT;
		    END IF;
		        
			END LOOP;
			CLOSE RuleCursor;
		END;
	END IF;/* no rule values */
		
	OPEN ResultData1 FOR		
		SELECT P4210Version AS P4210Version FROM SYS.DUAL;
		EXCEPTION  WHEN NO_DATA_FOUND THEN
  			ResultData1:=NULL;
END;
  /

-- #desc					Set Default Bank Account.
-- #bl_class				Premier.Profile.BankAccount
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param UniqueId			Unique Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcSetBankAccountDefault
(
	AddressNumber	IN NUMBER,
	UniqueId		IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	/* Clear default BA */
	UPDATE 
		[SCDATA].FQ670030 A
	SET  
	    BA$9BADEF = N'0'
	WHERE EXISTS (SELECT 1 FROM [SCDATA].F0030 B WHERE B.AYUKID = A.BAUKID AND B.AYAN8 = AddressNumber);

	/* Set default BA */
	UPDATE 
		[SCDATA].FQ670030 A
	SET  
	    BA$9BADEF = N'1'
	WHERE EXISTS(SELECT 1 FROM [SCDATA].F0030 B WHERE B.AYUKID = A.BAUKID AND B.AYAN8 = AddressNumber AND B.AYUKID = UniqueId);

END;
  /

-- #desc							Update Line Of Business Sequence
-- #bl_class						Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param LineOfBusinessIDs 		Line Of Business IDs

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcUpdLOBSequence
(
	LineOfBusinessIDs IN NVARCHAR2
)
AS
	Pos INT;
	NextString NVARCHAR2(6);
	SequenceNumb DECIMAL := 0;
	LineOfBusinessIDsTMP NVARCHAR2(8000) := LineOfBusinessIDs;

BEGIN
	IF (TRIM(LineOfBusinessIDsTMP) IS NOT NULL) THEN
		BEGIN
			Pos := INSTR(LineOfBusinessIDsTMP, '|@');
			WHILE (Pos <> 0)
			LOOP
				BEGIN
					NextString := SUBSTR(LineOfBusinessIDsTMP, 1, Pos - 1);
					LineOfBusinessIDsTMP := SUBSTR(LineOfBusinessIDsTMP,Pos + 2,LENGTH(LineOfBusinessIDsTMP));
					Pos := INSTR(LineOfBusinessIDsTMP, '|@');
					SequenceNumb := SequenceNumb + 1;

					UPDATE
						[SCDATA].FQ67103
					SET
						LBSEQ   = SequenceNumb
					WHERE 
						TRIM(LB$9LOB) = TRIM(NextString);

				END; -- BEGIN WHILE  
			END LOOP;		
		
		END; --BEGIN PRINCIPAL IF
	END IF;
END;
  /

-- #desc				Reads "How you heard about us" options.
-- #bl_class			Premier.Profile.AboutUs
-- #db_dependencies		N/A
-- #db_references		N/A		

-- #param AboutUsID		How you heard about us id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAboutUs
(
    AboutUsID   IN  NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor,
    ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
            A.HH$9HHA AS AboutUsID,
            A.HHDSC1 AS Description,
            A.HH$9ESOM AS AllowedOnESOM, 
            A.HH$9POSA AS AllowedOnPOS, 
            A.HH$9WEBA AS AllowedOnWEB, 
            A.HHPID AS ProgramID,    
            A.HHJOBN AS WorkStationID,   
            A.HHUSER AS UserID,   
   			A.HHUPMJ AS DateUpdated,   
   			A.HHUPMT AS TimeLastUpdated
    FROM 
        [SCDATA].FQ67102 A
    WHERE 
        TRIM(A.HH$9HHA) = TRIM(AboutUsID);
        
    [SCLIBRARY].PRO_GetAboutUsLangs(AboutUsID, null, ResultData2);
END;

  /

-- #desc				    Reads "How you heard about us" options.
-- #bl_class			    Premier.Profile.AboutUsList.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param AboutUsID		    How you heard about us id
-- #param Description		How you heard about description
-- #param AllowedOnESOM	    N/A
-- #param AllowedOnPOS		N/A
-- #param AllowedOnWEB		N/A
-- #param LangPref			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAboutUsList
(
    AboutUsID		IN NCHAR,
    Description		IN NCHAR,
    AllowedOnESOM	IN NUMBER,
    AllowedOnPOS	IN NUMBER,
    AllowedOnWEB	IN NUMBER,
    LangPref	    IN NCHAR,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
            HHHED.HH$9HHA AS AboutUsID,
            NVL(HHLNGHED.HHDSC1,HHHED.HHDSC1) AS Description,
            HHHED.HH$9ESOM AS AllowedOnESOM, 
            HHHED.HH$9POSA AS AllowedOnPOS, 
            HHHED.HH$9WEBA AS AllowedOnWEB, 
            HHHED.HHPID AS ProgramID,    
            HHHED.HHJOBN AS WorkStationID,   
            HHHED.HHUSER AS UserID,   
		    HHHED.HHUPMJ AS DateUpdated,   
		    HHHED.HHUPMT AS TimeLastUpdated
        FROM 
            [SCDATA].FQ67102 HHHED
	    LEFT OUTER JOIN [SCDATA].FQ67102L HHLNGHED
            ON HHLNGHED.HH$9HHA = HHHED.HH$9HHA
            AND HHLNGHED.HHLNGP = LangPref
        WHERE 
            (AboutUsID = '*' OR UPPER(HHHED.HH$9HHA) LIKE '%' || AboutUsID || '%')
            AND (Description = '*' OR
		        (HHLNGHED.HHDSC1 IS NULL AND UPPER(HHHED.HHDSC1) LIKE '%' || Description || '%') OR
		        (HHLNGHED.HHDSC1 IS NOT NULL AND UPPER(HHLNGHED.HHDSC1) LIKE '%' || Description || '%'))
	        AND (AllowedOnESOM = 2 OR HHHED.HH$9ESOM = AllowedOnESOM)
	        AND (AllowedOnPOS = 2 OR HHHED.HH$9POSA = AllowedOnPOS)
	        AND (AllowedOnWEB = 2 OR HHHED.HH$9WEBA = AllowedOnWEB)
        ORDER BY HHHED.HH$9HHA, Description;
END;
  /

-- #desc					Get Category Code value list for Customer/Consumer by Address number.
-- #bl_class				Premier.Profile.AddressBookCategoryCodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param AddressBookType	Address Book Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAddressBookCatCodeList
(
	AddressNumber		IN	NUMBER,
	AddressBookType		IN	DECIMAL,	
	ResultData1			OUT GLOBALPKG.refcursor
)
AS		
BEGIN

	IF(AddressBookType = 1) THEN  /*CONSUMER*/
		OPEN ResultData1 FOR
		SELECT PRDTAI as Code, PRKY as Value
        FROM 
        (SELECT PR$9AC01 "$9AC01",PR$9AC02 "$9AC02",PR$9AC03 "$9AC03",PR$9AC04 "$9AC04",PR$9AC05 "$9AC05",PR$9AC06 "$9AC06",PR$9AC07 "$9AC07",PR$9AC08 "$9AC08",PR$9AC09 "$9AC09",PR$9AC10 "$9AC10",
                PR$9AC11 "$9AC11",PR$9AC12 "$9AC12",PR$9AC13 "$9AC13",PR$9AC14 "$9AC14",PR$9AC15 "$9AC15",PR$9AC16 "$9AC16",PR$9AC17 "$9AC17",PR$9AC18 "$9AC18",PR$9AC19 "$9AC19",PR$9AC20 "$9AC20",
                PR$9AC21 "$9AC21",PR$9AC22 "$9AC22",PR$9AC23 "$9AC23",PR$9AC24 "$9AC24",PR$9AC25 "$9AC25",PR$9AC26 "$9AC26",PR$9AC27 "$9AC27",PR$9AC28 "$9AC28",PR$9AC29 "$9AC29",PR$9AC30 "$9AC30"
          FROM [SCDATA].FQ670302 WHERE PR$9AN8 = AddressNumber) 
          UNPIVOT (PRKY FOR PRDTAI IN
            ("$9AC01", "$9AC02", "$9AC03", "$9AC04", "$9AC05", "$9AC06", "$9AC07", "$9AC08", "$9AC09", "$9AC10", "$9AC11", "$9AC12", "$9AC13", "$9AC14", "$9AC15", 
             "$9AC16", "$9AC17", "$9AC18", "$9AC19", "$9AC20", "$9AC21", "$9AC22", "$9AC23", "$9AC24", "$9AC25", "$9AC26", "$9AC27", "$9AC28", "$9AC29", "$9AC30"));
		
	ELSIF(AddressBookType = 0 OR AddressBookType = 2) THEN /*CUSTOMER*/
			OPEN ResultData1 FOR
			SELECT ABDTAI as Code, ABKY as Value
			  	FROM 
						(SELECT  ABAC01 AC01, ABAC02 AC02,ABAC03 AC03,ABAC04 AC04, ABAC05 AC05, ABAC06 AC06,ABAC07 AC07,ABAC08 AC08,ABAC09 AC09,ABAC10 AC10,
			              ABAC11 AC11,ABAC12 AC12,ABAC13 AC13,ABAC14 AC14,ABAC15 AC15,ABAC16 AC16,ABAC17 AC17,ABAC18 AC18, ABAC19 AC19, ABAC20 AC20,
			              ABAC21 AC21,ABAC22 AC22,ABAC23 AC23, ABAC24 AC24,ABAC25 AC25,ABAC26 AC26,ABAC27 AC27,ABAC28 AC28,ABAC29 AC29,ABAC30 AC30
			      FROM [SCDATA].F0101 WHERE ABAN8 = AddressNumber)
						UNPIVOT (ABKY FOR ABDTAI IN
								(AC01, AC02, AC03, AC04, AC05, AC06, AC07, AC08, AC09, AC10, AC11, AC12, AC13, AC14, AC15, 
								AC16, AC17, AC18, AC19, AC20, AC21, AC22, AC23, AC24, AC25,AC26,AC27,AC28,AC29,AC30));
	END IF; /*CAT CODE */		
END;
  /

-- #desc					Read Address Book record, read only info
-- #bl_class				Premier.Common.AddressBookInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAddressBookInfo
(
	AddressNumber   IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
    OPEN ResultData1 FOR
        SELECT
	        A.ABAN8	 AS AddressNumber,
	        A.ABALPH AS AlphaName,
	        A.ABAT1  AS SearchType,
	        A.ABMCU AS BranchPlant,
			A.ABTAXC AS PersonCorporateCode,
	        B.ALADD1 AS AddressLine1, 
	        B.ALADD2 AS AddressLine2, 
	        B.ALCTY1 AS City,
	        B.ALADDS AS State,
	        B.ALADDZ AS ZipCode,
	        B.ALCTR  AS Country
        FROM
	        [SCDATA].F0101 A				-- Address Book Master
        INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.ABAN8, CurrentJulianDate)) B		-- Address Book Detail
			ON B.ALAN8 = A.ABAN8
        WHERE 
			A.ABAN8 = AddressNumber; -- AddressNumber filter	
END;
  /

-- #desc					Read Address Book, read only info
-- #bl_class				Premier.Common.AddressBookList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param AddressNumber	    AddressNumber
-- #param AlphaName		    Alpha Name.
-- #param SearchType		Search Type
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAddressBookList
(
	InstallationID	IN NCHAR,
	AddressNumber	IN NUMBER,
	AlphaName 		IN NCHAR,
	SearchType		IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1     OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				A.ABAN8	 AS AddressNumber,
				A.ABALPH AS AlphaName,
				A.ABAT1  AS SearchType,
				A.ABMCU  AS BranchPlant,
				A.ABTAXC AS PersonCorporateCode,
				B.ALADD1 AS AddressLine1, 
				B.ALADD2 AS AddressLine2, 
				B.ALCTY1 AS City,
				B.ALADDS AS State,
				B.ALADDZ AS ZipCode,
				B.ALCTR  AS Country,
				ROW_NUMBER() OVER (ORDER BY A.ABAN8) AS RNUM
			FROM
				[SCDATA].F0101 A				-- Address Book Master
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.ABAN8, CurrentJulianDate)) B		-- Address Book Detail
				ON B.ALAN8 = A.ABAN8
			WHERE 
				(AddressNumber = 0 OR A.ABAN8 = AddressNumber)-- AddressNumber filter
				AND	(AlphaName = '*' OR UPPER(A.ABALPH) LIKE '%' || AlphaName || '%')	 -- AlphaName filter
				AND (SearchType = '*' OR A.ABAT1 = SearchType)	-- Search Type filter
		)
		SELECT 
			A.AddressNumber,
			A.AlphaName,
			A.SearchType, 
			A.BranchPlant,
			A.PersonCorporateCode,
			A.AddressLine1, 
			A.AddressLine2, 
			A.City, 
			A.State, 
			A.ZipCode, 
			A.Country,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

END;
  /

-- #desc						Get Bank Account Info
-- #bl_class					Premier.Profile.BankAccountInfo
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param SequenceNumber		SequenceNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetBankAccountInfo
(
	SequenceNumber   IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
    SELECT 
		AY.AYUKID		AS UniqueId,
		AY.AYAN8		AS AddressNumber,
		AY.AYTNST		AS MaskedBankRouting,
		AY.AYCBNK		AS MaskedBankAccount,
		AY.AYBKTP		AS AccountType,
		AY.AYAID		AS AccountId,
		BA.BAADD1		AS AddressLine1,
		BA.BAADD2		AS AddressLine2,
		BA.BACTY1		AS City,
		BA.BACTR		AS Country,
		BA.BAADDS		AS "State",
		BA.BAADDZ		AS ZipCode,
		BA.BA$9COMMT	AS "Comment",
		BA.BA$9RTENC	AS EncryptedBankRouting,
		BA.BA$9BAENC	AS EncryptedBankAccount,
		AY.AYCKSV		AS CheckType,
		BA.BAGNNM		AS FirstName,
		BA.BASRNM		AS LastName,
		BA.BAALPH		AS CompanyName,
		CASE WHEN BA.BAALPH = N' ' THEN '0' ELSE '1' END AS	ACHCheckType,
		BA.BA$9BADEF	AS IsDefault,
		AY.AYDL01		AS BankName
	FROM [SCDATA].F0030 AY
	INNER JOIN [SCDATA].FQ670030 BA
		ON BA.BAUKID = AY.AYUKID 
	WHERE AY.AYUKID = SequenceNumber;

END;
  /

-- #desc					Get Bank Accounts
-- #bl_class				Premier.Profile.BankAccounts.cs/BankAccountList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			StoreId
-- #param AddressNumber		AddressNumber
-- #param Type				Account Type
-- #param BankAccount		Bank Account
-- #param BankName			Bank Name
-- #param SortBy			Column to filter by
-- #param SortDir			Direction to filter (A = Ascendant, D = Descendant)
-- #param PageIndex			Page Index 
-- #param PageSize			Page Size 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetBankAccounts
(
	StoreId			IN NCHAR,
	AddressNumber   IN NUMBER,
	Type			IN NCHAR,
	BankAccount		IN NCHAR,
	BankName		IN NCHAR,
	SortBy			IN NCHAR,
	SortDir			IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	BA_Type						NCHAR(1);
    BAINID						NCHAR(3) := StoreId;
	BankAccountTypeSetting		NCHAR(10) := N'BA_TYPE';

	/* Dynamic */
	SQL_DYNAMIC			VARCHAR2(4000);
	WHERE_DYNAMIC		NVARCHAR2(1000) := N' ';
	SORT_DYNAMIC		NVARCHAR2(60);
	SORTDIR_DYNAMIC		NVARCHAR2(5);

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    RowEnd INT := (PageIndex * PageSize);
BEGIN
	[SCLIBRARY].CMM_GetConstantValue( BankAccountTypeSetting, BAINID, BA_Type );

	/* Dynamic sort direction statement */
    SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	/* Dynamic sort statement */
    SORT_DYNAMIC := CASE SortBy
						WHEN 'BankAccount' THEN 'AY.AYCBNK'
						WHEN 'BankTransit' THEN 'AY.AYTNST'
						WHEN 'BankName' THEN 'UPPER(AY.AYDL01)'
						ELSE 'AY.AYCBNK'
					END;
	SORT_DYNAMIC := SORT_DYNAMIC || SORTDIR_DYNAMIC;

	IF (BankAccount <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AY.AYCBNK LIKE N''%'' || :BankAccount || ''%'' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :BankAccount = N''*'') ';
	END IF;

	IF (BankName <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(AY.AYDL01) LIKE N''%'' || :BankName || ''%'' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :BankName = N''*'') ';
	END IF;

	IF (Type = 'S') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AY.AYCKSV = N''1'' ';
	ELSIF (Type = 'C') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AY.AYCKSV = N''0'' ';
	END IF;

	SQL_DYNAMIC := N' 
		WITH BC  AS (
			SELECT 
				AY.AYUKID		AS UniqueId,
				AY.AYAN8		AS AddressNumber,
				AY.AYTNST		AS MaskedBankRouting,
				AY.AYCBNK		AS MaskedBankAccount,
				AY.AYBKTP		AS AccountType,
				AY.AYAID		AS AccountId,
				BA.BAADD1		AS AddressLine1,
				BA.BAADD2		AS AddressLine2,
				BA.BACTY1		AS City,
				BA.BACTR		AS Country,
				BA.BAADDS		AS State,
				BA.BAADDZ		AS ZipCode,
				BA.BA$9COMMT	AS "Comment",
				BA.BA$9RTENC	AS EncryptedBankRouting,
				BA.BA$9BAENC	AS EncryptedBankAccount,
				AY.AYCKSV		AS CheckType,
				BA.BAGNNM		AS FirstName,
				BA.BASRNM		AS LastName,
				BA.BAALPH		AS CompanyName,
				CASE WHEN BA.BAALPH = N'' '' THEN ''0'' ELSE ''1'' END AS	ACHCheckType,
				BA.BA$9BADEF	AS IsDefault,
				AY.AYDL01		AS BankName,
				BA.BA$9DPT		AS Department,
				ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||') AS RNUM
			FROM [SCDATA].F0030 AY
			INNER JOIN [SCDATA].FQ670030 BA
				ON BA.BAUKID = AY.AYUKID 
			WHERE AY.AYAN8 = :AddressNumber 
				AND AY.AYBKTP = :BA_Type
			'|| WHERE_DYNAMIC ||' 
		) 
		SELECT UniqueId, AddressNumber, MaskedBankRouting, MaskedBankAccount, AccountType, AccountId, AddressLine1, AddressLine2, 
			City, Country, State, ZipCode, "Comment", EncryptedBankRouting, EncryptedBankAccount, CheckType, FirstName, LastName, 
			A.CompanyName, A.ACHCheckType, IsDefault, BankName, Department, (SELECT COUNT(1) FROM BC) AS TotalRowCount
		FROM BC A
		WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';

    OPEN ResultData1 FOR SQL_DYNAMIC USING AddressNumber, BA_Type, BankAccount, BankName, 
		PageIndex, PageSize, RowStart, RowEnd;
END;
  /

-- #desc					Get Bank Accounts Summary
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			StoreId
-- #param AddressNumber		AddressNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetBankAccountsSummary
(
	StoreId			IN NCHAR,
	AddressNumber   IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	BankAccountsCount INT;
	DefaultBankAccount INT;

	BA_Type						NCHAR(1);
    BAINID						NCHAR(3) := StoreId;
	BankAccountTypeSetting		NCHAR(10) := N'BA_TYPE';
BEGIN
	[SCLIBRARY].CMM_GetConstantValue( BankAccountTypeSetting, BAINID, BA_Type );

	SELECT COUNT(1) INTO BankAccountsCount FROM [SCDATA].F0030 INNER JOIN [SCDATA].FQ670030 ON AYUKID = BAUKID WHERE AYAN8 = AddressNumber AND AYBKTP = BA_Type;
		BEGIN
			SELECT AYUKID INTO DefaultBankAccount FROM [SCDATA].F0030 INNER JOIN [SCDATA].FQ670030 ON AYUKID = BAUKID WHERE ROWNUM < 2 AND AYAN8 = AddressNumber and BA$9BADEF = N'1';
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			DefaultBankAccount := 0; 
		END;

	OPEN ResultData1 FOR
	SELECT 
		BankAccountsCount AS BankAccountCount,
		DefaultBankAccount AS DefaultBankAccount
	FROM SYS.DUAL;
END;
  /

-- #desc				Read specific Policy or all the table info
-- #bl_class			Premier.Profile.CompanyPolicyList.cs / CompanyPolicyInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param PolicyId		ID for specific. * to retrieve all the table info.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetCompanyPolicyList
(
	PolicyId    IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
		SELECT 
			P.RFPLY as PolicyId,
			P.RFCO as PolicyCompany,
			P.RFPLYN as PolicyName,
			P.RFPLYD as PolicyDescription
		FROM 
			[SCDATA].F03B25 P
		WHERE 
			PolicyId IS NULL OR TRIM(P.RFPLY) = PolicyId;
END;

  /

-- #desc					Get Contact and Ext Information
-- #bl_class	 	 		Premier.Profile.ContactInfo
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetConsumerContactInfo
(
	AddressNumber   IN DECIMAL,
	ContactID       IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
		    PC$9AN8 AS AddressNumber,   
		    PCIDLN  AS ContactID,    
		    PCMLNM  AS MailingName,
		    PCEMAL  AS EmailAddress,
		    NVL(AB$9CRS,0) AS IsCrossRefOn,--Default Off
		    NVL(ABAURCH1,'') AS UserReservedChar, --Display Images
		    AB$9EMYN AS EmailPreference
        FROM 
            [SCDATA].FQ67303   PC,
            [SCDATA].FQ67104 AB --Extended Information
        WHERE	
            PC.PC$9AN8 = AB.AB$9AN8(+) 
	    AND PC.PCIDLN = AB.ABIDLN(+) 
	    AND AB.AB$9TYP(+) = 1
        AND PC$9AN8 = AddressNumber
		AND PCIDLN = ContactID;
END;
  /

-- #desc					Get Contact and Ext Information
-- #bl_class	 	 		Premier.Profile.ContactInfo
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetCustomerContactInfo
(
	AddressNumber   IN  DECIMAL,
	ContactID       IN  DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
	        WWAN8 AS AddressNumber, 
	        WWIDLN AS ContactID,
	        WWMLNM AS MailingName,
	        [SCLIBRARY].CST_GetPrimaryElectAddressFnc(WWAN8,WWIDLN,'E') AS EmailAddress,
	        NVL(AB$9CRS,0) AS IsCrossRefOn,--Default Off
	        NVL(ABAURCH1,'') AS UserReservedChar, --Display Images
	        NVL(AB$9EMYN,1) AS EmailPreference
	    FROM 
	        [SCDATA].F0111	WW,
	        [SCDATA].FQ67104 AB--Extended Information
	    WHERE	
	            WW.WWAN8 = AB.AB$9AN8(+) 
		    AND WW.WWIDLN = AB.ABIDLN(+)  
		    AND AB.AB$9TYP(+) = 0
		    AND WWAN8 = AddressNumber  
		    AND WWIDLN = ContactID;
END;


  
  /

-- #desc					Create line of business.
-- #bl_class				Premier.Profile.LineOfBusiness.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param LineOfBusinessID	Line of business 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetLineOfBusiness
(
	LineOfBusinessID    IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)

AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        A.LB$9LOB 	LineOfBusinessID,
	        A.LBDSC1	Description,	
	        A.LBMCU		BranchPlant,	
	        A.LB$9TYP	AddressBookType,  
	        A.LBTAXC	PersonCorporationCode,    
	        A.LBASN		AdjustmentSchedule,  
	        A.LBCPGP	PriceGroup	,
	        A.LBSEQ		SequenceNumber,   
	        A.LBAC01	CategoryCode01,   
	        A.LBAC02	CategoryCode02, 
	        A.LBAC03	CategoryCode03,	
	        A.LBAC04	CategoryCode04,	   
	        A.LBAC05	CategoryCode05,	    
	        A.LBAC06	CategoryCode06,	  
	        A.LBAC07	CategoryCode07,	
	        A.LBAC08	CategoryCode08,	   
	        A.LBAC09	CategoryCode09,	    
	        A.LBAC10	CategoryCode10,	  
	        A.LBAC11	CategoryCode11,	
	        A.LBAC12	CategoryCode12,	   
	        A.LBAC13	CategoryCode13,	    
	        A.LBAC14	CategoryCode14,	  
	        A.LBAC15	CategoryCode15,	
	        A.LBAC16	CategoryCode16,	   
	        A.LBAC17	CategoryCode17,	    
	        A.LBAC18	CategoryCode18,	  
	        A.LBAC19	CategoryCode19,	
	        A.LBAC20	CategoryCode20,	   
	        A.LBAC21	CategoryCode21,	    
	        A.LBAC22	CategoryCode22,	  
	        A.LBAC23	CategoryCode23,	
	        A.LBAC24	CategoryCode24,	   
	        A.LBAC25	CategoryCode25,	    
	        A.LBAC26	CategoryCode26,	  
	        A.LBAC27	CategoryCode27,	
	        A.LBAC28	CategoryCode28,	   
	        A.LBAC29	CategoryCode29,	    
	        A.LBAC30	CategoryCode30,	  
	        A.LBPID		ProgramID,	
	        A.LBJOBN	WorkStationID,	   
	        A.LBUSER	UserID,	    
	        A.LBUPMJ	DateUpdated	,	  
	        A.LBUPMT	TimeLastUpdated	
        FROM 
	        [SCDATA].FQ67103 A
	    WHERE 
            TRIM(A.LB$9LOB)  = TRIM(LineOfBusinessID);
    			
    [SCLIBRARY].PRO_GetLineOfBusinessLangs(LineOfBusinessID, null, ResultData2);
END;

  /

-- #desc					Read one line of business by installation.
-- #bl_class				Premier.Profile.LineOfBusinessInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation Id
-- #param LineOfBusinessID	Line of business 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetLineOfBusinessInfo
(
	InstallationID      IN NVARCHAR2,
	LineOfBusinessID    IN NVARCHAR2,
	LangPref	        IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        A.LB$9LOB   AS LineOfBusinessID,    
	        NVL(C.LBDSC1,A.LBDSC1) AS Description,
	        A.LBMCU     AS BranchPlant,
	        A.LB$9TYP   AS AddressBookType
         FROM 
	        [SCDATA].FQ671031 B, --By Installation
            [SCDATA].FQ67103 A, --Master
		    [SCDATA].FQ67103L C --Language
                 
        WHERE
                A.LB$9LOB  = B.LI$9LOB  
            AND A.LB$9LOB = C.LB$9LOB(+)
            AND TRIM(C.LBLNGP(+)) = TRIM(LangPref)     
	        AND B.LI$9INID = InstallationID 
	        AND TRIM(A.LB$9LOB) = TRIM(LineOfBusinessID);
END;
	 
  /

-- #desc					Read line of business
-- #bl_class				Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param LineOfBusinessID	Line of business 
-- #param Description		Description
-- #param LangPref			Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetLineOfBusinessList
(
	LineOfBusinessID    IN NCHAR,
	Description         IN NCHAR,
	LangPref	        IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
		    A.LB$9LOB as LineOfBusinessID,    
		    NVL(B.LBDSC1,A.LBDSC1) AS Description,
		    A.LBMCU as BranchPlant,
		    A.LB$9TYP as AddressBookType	
	    FROM 
		    [SCDATA].FQ67103 A
	    LEFT OUTER JOIN [SCDATA].FQ67103L B
			ON B.LB$9LOB = A.LB$9LOB
            AND B.LBLNGP = LangPref
	    WHERE 
			(LineOfBusinessID = '*' OR A.LB$9LOB = LineOfBusinessID) 
		    AND (Description = '*' OR
				(B.LBDSC1 IS NULL AND UPPER(A.LBDSC1)  LIKE '%' || Description || '%' ) OR
				(B.LBDSC1 IS NOT NULL AND UPPER(B.LBDSC1) LIKE '%' || Description || '%'));
END;

  /

-- #desc					Read line of business by installation.
-- #bl_class				Premier.Profile.LineOfBusinessValueListByInst.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation Id
-- #param LineOfBusinessID	Line of business 
-- #param Description		Description
-- #param LangPref			Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetLOBListByInst
(
	InstallationID      IN NCHAR,
	LineOfBusinessID    IN NCHAR,
	Description         IN NCHAR,
	LangPref	        IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        A.LB$9LOB as LineOfBusinessID,    
	        NVL(C.LBDSC1,A.LBDSC1) AS Description,
	        A.LBMCU as BranchPlant,
	        A.LB$9TYP as AddressBookType
        FROM 
	        [SCDATA].FQ671031 B --By Installation
        INNER JOIN [SCDATA].FQ67103 A --Master
			ON A.LB$9LOB  = B.LI$9LOB 
	    LEFT OUTER JOIN [SCDATA].FQ67103L C --Language
			ON C.LB$9LOB = A.LB$9LOB
            AND C.LBLNGP = LangPref
        WHERE 
            B.LI$9INID = InstallationID
	        AND (LineOfBusinessID = '*' OR UPPER(A.LB$9LOB) LIKE '%' || LineOfBusinessID ||'%') 
	        AND (Description = '*' OR
				(C.LBDSC1 IS NULL AND UPPER(A.LBDSC1)  LIKE '%' || Description || '%' ) OR
				(C.LBDSC1 IS NOT NULL AND UPPER(C.LBDSC1) LIKE '%' || Description || '%'))
		ORDER BY LBSEQ;
END;
        	
	

 
  /

-- #desc					Read line of business list not related.
-- #bl_class				Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation Id
-- #param LineOfBusinessID	Line of business 
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetLOBListNotRel
(
	InstallationID      IN NCHAR,
	LineOfBusinessID    IN NCHAR,
	Description         IN NCHAR,
	LangPref	        IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
 	        A.LB$9LOB as LineOfBusinessID,    
	        NVL(B.LBDSC1,A.LBDSC1) AS Description,
	        A.LBMCU as BranchPlant,
	        A.LB$9TYP as AddressBookType
        FROM 
	        [SCDATA].FQ67103 A
	    LEFT OUTER JOIN [SCDATA].FQ67103L B
			ON B.LB$9LOB = A.LB$9LOB
			AND B.LBLNGP = LangPref
        WHERE 
			NOT EXISTS (SELECT 1 FROM [SCDATA].FQ671031 Z WHERE Z.LI$9LOB = A.LB$9LOB AND Z.LI$9INID = InstallationID)
	        AND (LineOfBusinessID = N'*' OR UPPER(A.LB$9LOB) LIKE N'%' || LineOfBusinessID || '%') 
	        AND (Description = N'*' OR
				(B.LBDSC1 IS NULL AND UPPER(A.LBDSC1) LIKE N'%' || Description || '%' ) OR
				(B.LBDSC1 IS NOT NULL AND UPPER(B.LBDSC1) LIKE N'%' || Description || '%'));
END;

  /

-- #desc						Get Personalization Info
-- #bl_class					Premier.Profile.ProfilePersonalizationInformation.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Company				Company ID
-- #param AddressBookType		Address Book Type
-- #param AddressNumber			Address Number
-- #param ContactId				Contact Id


CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetPersonalizationInfo
(
    Company				IN  NVARCHAR2,
	AddressBookType		IN	DECIMAL,
	AddressNumber		IN	DECIMAL,
	ContactId           IN  NUMBER,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
	
	IF(AddressBookType = 0) /*CUSTOMER*/
	THEN
		IF(ContactId = 0)
		THEN
		OPEN ResultData1 FOR
			SELECT
				AB.ABAT1 AS SearchType,
				AB.ABMCU AS BusinessUnit,
				AB.ABSIC AS Industry,
				AB.ABTAXC AS PersonCorpCode,
				AB.ABAC01 AS CategoryCode01,	AB.ABAC02 AS CategoryCode02,	AB.ABAC03 AS CategoryCode03,	AB.ABAC04 AS CategoryCode04,	AB.ABAC05 AS CategoryCode05,
				AB.ABAC06 AS CategoryCode06,	AB.ABAC07 AS CategoryCode07,	AB.ABAC08 AS CategoryCode08,	AB.ABAC09 AS CategoryCode09,	AB.ABAC10 AS CategoryCode10,
				AB.ABAC11 AS CategoryCode11,	AB.ABAC12 AS CategoryCode12,	AB.ABAC13 AS CategoryCode13,	AB.ABAC14 AS CategoryCode14,	AB.ABAC15 AS CategoryCode15,
				AB.ABAC16 AS CategoryCode16,	AB.ABAC17 AS CategoryCode17,	AB.ABAC18 AS CategoryCode18,	AB.ABAC19 AS CategoryCode19,	AB.ABAC20 AS CategoryCode20,
				AB.ABAC21 AS CategoryCode21,	AB.ABAC22 AS CategoryCode22,	AB.ABAC23 AS CategoryCode23,	AB.ABAC24 AS CategoryCode24,	AB.ABAC25 AS CategoryCode25,
				AB.ABAC26 AS CategoryCode26,	AB.ABAC27 AS CategoryCode27,	AB.ABAC28 AS CategoryCode28,	AB.ABAC29 AS CategoryCode29,	AB.ABAC30 AS CategoryCode30,
				AL.ALCTY1 AS City,
				AL.ALADDS AS State,
				AL.ALCTR AS Country,
				AL.ALCOUN AS County,
				MN.WWMLNM AS CompanyName,
				MN.WWMLNM AS MailingName,
				NVL(OVERRIDECOMPANY.AIASN, DEFAULTCOMPANY.AIASN) AS Adjustment,
				NVL(OVERRIDECOMPANY.AICPGP, DEFAULTCOMPANY.AICPGP) AS PriceGroup,
				NVL(OVERRIDECOMPANY.AIABC1, DEFAULTCOMPANY.AIABC1) AS ABCCodes1,
				NVL(OVERRIDECOMPANY.AIABC2, DEFAULTCOMPANY.AIABC2) AS ABCCodes2,
				NVL(OVERRIDECOMPANY.AIABC3, DEFAULTCOMPANY.AIABC3) AS ABCCodes3
			FROM [SCDATA].F0101 AB	/*Address Book Master*/
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	/*Address Book Join*/
				ON	AL.ALAN8 = AB.ABAN8
			LEFT OUTER JOIN [SCDATA].F03012 OVERRIDECOMPANY  /*Address Book Join Customer Master */                                                                                 
				ON	OVERRIDECOMPANY.AIAN8 = AB.ABAN8                                                                               
				AND TRIM(OVERRIDECOMPANY.AICO)  = TRIM(Company)                                                                        				
			INNER JOIN [SCDATA].F03012 DEFAULTCOMPANY       /*Address Book Join Customer Master */
				ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
				AND TRIM(DEFAULTCOMPANY.AICO) = '00000'
			INNER JOIN [SCDATA].F0111 MN       /*Mailing Name */
				ON	MN.WWAN8 = AB.ABAN8                                                                                
				AND MN.WWIDLN = ContactId
			WHERE 
				AB.ABAN8 = AddressNumber;
         ELSE 
		 OPEN ResultData1 FOR
			SELECT
				AB.ABAT1 AS SearchType,
				AB.ABMCU AS BusinessUnit,
				AB.ABSIC AS Industry,
				AB.ABTAXC AS PersonCorpCode,
				AB.ABAC01 AS CategoryCode01,	AB.ABAC02 AS CategoryCode02,	AB.ABAC03 AS CategoryCode03,	AB.ABAC04 AS CategoryCode04,	AB.ABAC05 AS CategoryCode05,
				AB.ABAC06 AS CategoryCode06,	AB.ABAC07 AS CategoryCode07,	AB.ABAC08 AS CategoryCode08,	AB.ABAC09 AS CategoryCode09,	AB.ABAC10 AS CategoryCode10,
				AB.ABAC11 AS CategoryCode11,	AB.ABAC12 AS CategoryCode12,	AB.ABAC13 AS CategoryCode13,	AB.ABAC14 AS CategoryCode14,	AB.ABAC15 AS CategoryCode15,
				AB.ABAC16 AS CategoryCode16,	AB.ABAC17 AS CategoryCode17,	AB.ABAC18 AS CategoryCode18,	AB.ABAC19 AS CategoryCode19,	AB.ABAC20 AS CategoryCode20,
				AB.ABAC21 AS CategoryCode21,	AB.ABAC22 AS CategoryCode22,	AB.ABAC23 AS CategoryCode23,	AB.ABAC24 AS CategoryCode24,	AB.ABAC25 AS CategoryCode25,
				AB.ABAC26 AS CategoryCode26,	AB.ABAC27 AS CategoryCode27,	AB.ABAC28 AS CategoryCode28,	AB.ABAC29 AS CategoryCode29,	AB.ABAC30 AS CategoryCode30,
				AL.ALCTY1 AS City,
				AL.ALADDS AS State,
				AL.ALCTR AS Country,
				AL.ALCOUN AS County,
				CN.WWMLNM AS CompanyName,
				MN.WWMLNM AS MailingName,
				NVL(OVERRIDECOMPANY.AIASN, DEFAULTCOMPANY.AIASN) AS Adjustment,
				NVL(OVERRIDECOMPANY.AICPGP, DEFAULTCOMPANY.AICPGP) AS PriceGroup,
				NVL(OVERRIDECOMPANY.AIABC1, DEFAULTCOMPANY.AIABC1) AS ABCCodes1,
				NVL(OVERRIDECOMPANY.AIABC2, DEFAULTCOMPANY.AIABC2) AS ABCCodes2,
				NVL(OVERRIDECOMPANY.AIABC3, DEFAULTCOMPANY.AIABC3) AS ABCCodes3
			FROM [SCDATA].F0101 AB	/*Address Book Master*/
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	/*Address Book Join*/
				ON	AL.ALAN8 = AB.ABAN8
			LEFT OUTER JOIN [SCDATA].F03012 OVERRIDECOMPANY  /*Address Book Join Customer Master */                                                                                 
				ON	OVERRIDECOMPANY.AIAN8 = AB.ABAN8                                                                               
				AND TRIM(OVERRIDECOMPANY.AICO)  = TRIM(Company)                                                                        				
			INNER JOIN [SCDATA].F03012 DEFAULTCOMPANY       /*Address Book Join Customer Master */
				ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
				AND TRIM(DEFAULTCOMPANY.AICO) = '00000'
			INNER JOIN [SCDATA].F0111 CN       /*Company Name */
				ON	CN.WWAN8 = AB.ABAN8                                                                                
				AND CN.WWIDLN = 0
			INNER JOIN [SCDATA].F0111 MN       /*Mailing Name */
				ON	MN.WWAN8 = AB.ABAN8                                                                                
				AND MN.WWIDLN = ContactId
			WHERE 
				AB.ABAN8 = AddressNumber;
		 END IF;
	ELSIF(AddressBookType = 1) THEN /*CONSUMER*/
	IF(ContactId = 0)
		THEN
		OPEN ResultData1 FOR
			SELECT
				CM.PR$9AT1 AS SearchType,
				CM.PRMCU AS BusinessUnit ,
				' ' AS Industry,
				CM.PRTAXC AS PersonCorpCode,
				CM.PR$9AC01 AS CategoryCode01,	CM.PR$9AC02 AS CategoryCode02,	CM.PR$9AC03 AS CategoryCode03,	CM.PR$9AC04 AS CategoryCode04,	CM.PR$9AC05 AS CategoryCode05,
				CM.PR$9AC06 AS CategoryCode06,	CM.PR$9AC07 AS CategoryCode07,	CM.PR$9AC08 AS CategoryCode08,	CM.PR$9AC09 AS CategoryCode09,	CM.PR$9AC10 AS CategoryCode10,
				CM.PR$9AC11 AS CategoryCode11,	CM.PR$9AC12 AS CategoryCode12,	CM.PR$9AC13 AS CategoryCode13,	CM.PR$9AC14 AS CategoryCode14,	CM.PR$9AC15 AS CategoryCode15,
				CM.PR$9AC16 AS CategoryCode16,	CM.PR$9AC17 AS CategoryCode17,	CM.PR$9AC18 AS CategoryCode18,	CM.PR$9AC19 AS CategoryCode19,	CM.PR$9AC20 AS CategoryCode20,
				CM.PR$9AC21 AS CategoryCode21,	CM.PR$9AC22 AS CategoryCode22,	CM.PR$9AC23 AS CategoryCode23,	CM.PR$9AC24 AS CategoryCode24,	CM.PR$9AC25 AS CategoryCode25,
				CM.PR$9AC26 AS CategoryCode26,	CM.PR$9AC27 AS CategoryCode27,	CM.PR$9AC28 AS CategoryCode28,	CM.PR$9AC29 AS CategoryCode29,	CM.PR$9AC30 AS CategoryCode30,
				CM.PRCTY1 AS City,
				CM.PRADDS AS State,
				CM.PRCTR AS Country,
				CM.PRCOUN AS County,
				CM.PRASN AS Adjustment,
				CM.PRCPGP AS PriceGroup,
				' ' AS ABCCodes1,
				' ' AS ABCCodes2,
				' ' AS ABCCodes3,
				MNC.PCMLNM AS CompanyName,
				MNC.PCMLNM AS MailingName
			FROM [SCDATA].FQ670302 CM
			INNER JOIN [SCDATA].FQ67303 MNC      /*Mailing Name */
				ON	MNC.PC$9AN8 = CM.PR$9AN8                                                                                
				AND MNC.PCIDLN = ContactId
			WHERE 
				CM.PR$9AN8 = AddressNumber;

		ELSE
		OPEN ResultData1 FOR
			SELECT
				CM.PR$9AT1 AS SearchType,
				CM.PRMCU AS BusinessUnit ,
				' ' AS Industry,
				CM.PRTAXC AS PersonCorpCode,
				CM.PR$9AC01 AS CategoryCode01,	CM.PR$9AC02 AS CategoryCode02,	CM.PR$9AC03 AS CategoryCode03,	CM.PR$9AC04 AS CategoryCode04,	CM.PR$9AC05 AS CategoryCode05,
				CM.PR$9AC06 AS CategoryCode06,	CM.PR$9AC07 AS CategoryCode07,	CM.PR$9AC08 AS CategoryCode08,	CM.PR$9AC09 AS CategoryCode09,	CM.PR$9AC10 AS CategoryCode10,
				CM.PR$9AC11 AS CategoryCode11,	CM.PR$9AC12 AS CategoryCode12,	CM.PR$9AC13 AS CategoryCode13,	CM.PR$9AC14 AS CategoryCode14,	CM.PR$9AC15 AS CategoryCode15,
				CM.PR$9AC16 AS CategoryCode16,	CM.PR$9AC17 AS CategoryCode17,	CM.PR$9AC18 AS CategoryCode18,	CM.PR$9AC19 AS CategoryCode19,	CM.PR$9AC20 AS CategoryCode20,
				CM.PR$9AC21 AS CategoryCode21,	CM.PR$9AC22 AS CategoryCode22,	CM.PR$9AC23 AS CategoryCode23,	CM.PR$9AC24 AS CategoryCode24,	CM.PR$9AC25 AS CategoryCode25,
				CM.PR$9AC26 AS CategoryCode26,	CM.PR$9AC27 AS CategoryCode27,	CM.PR$9AC28 AS CategoryCode28,	CM.PR$9AC29 AS CategoryCode29,	CM.PR$9AC30 AS CategoryCode30,
				CM.PRCTY1 AS City,
				CM.PRADDS AS State,
				CM.PRCTR AS Country,
				CM.PRCOUN AS County,
				CM.PRASN AS Adjustment,
				CM.PRCPGP AS PriceGroup,
				' ' AS ABCCodes1,
				' ' AS ABCCodes2,
				' ' AS ABCCodes3,
				CNC.PCMLNM AS CompanyName,
				MNC.PCMLNM AS MailingName
			FROM [SCDATA].FQ670302 CM
			INNER JOIN [SCDATA].FQ67303 CNC      /*Company Name */
				ON	CNC.PC$9AN8 = CM.PR$9AN8                                                                                
				AND CNC.PCIDLN = 0
			INNER JOIN [SCDATA].FQ67303 MNC      /*Mailing Name */
				ON	MNC.PC$9AN8 = CM.PR$9AN8                                                                                
				AND MNC.PCIDLN = ContactId
			WHERE 
				CM.PR$9AN8 = AddressNumber;
		END IF;
	END IF;        
        
END;

  /

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber 		Address number to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index


CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetProfileListByAddressNo
(
	AddressNumber 	IN NUMBER,
	AddressBookType IN INT,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1     OUT GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	IF(AddressBookType = 9) THEN  --NotUsed
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,  
				A.CCCTY1	AS City,   
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		     
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 0 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7			
			INNER JOIN [SCDATA].F03012 AI /*INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,  
				A.CCCTY1	AS City,   
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    			 
				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 1 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	 /*CONSUMER MASTER */
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber,
				A.AddressType,
				A.ContactID,
				A.ParentAddressNumber,
				A.AlphaName,
				A.MailingName,
				A.AddressLine1,
				A.City,
				A.State,
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM 
			FROM CTE A
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
        FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF(AddressBookType = 0) THEN	-- CUSTOMER
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,  
				A.CCCTY1	AS City,   
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		     
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 0 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7			
			INNER JOIN [SCDATA].F03012 AI /*INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount 
        FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF (AddressBookType = 1) THEN -- CONSUMER
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,  
				A.CCCTY1	AS City,   
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    			 
				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM [SCDATA].FQ670312 A 
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 1 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	 /*CONSUMER MASTER */
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
        FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	END IF;
	
END;


  /

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AlternateAddressKey	N/A
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index
-- #param TotalRowCount			Total Row Count


CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetProfileListByAltAddKey
(
	AlternateAddressKey     IN NCHAR,
	AddressBookType			IN INT,
	PageIndex				IN INT,
    PageSize				IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN

	IF(AddressBookType = 9) THEN  /* NotUsed */
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  		
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      	
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].F03012 AI	 -- INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER 
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      	  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,
				A.MailingName,			
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		    
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM 
			FROM CTE A
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
        FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	ELSIF(AddressBookType = 0) THEN	-- CUSTOMER
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,				
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      	
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].F03012 AI	 -- INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER 
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount 
        FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));	
	ELSIF (AddressBookType = 1) THEN -- CONSUMER
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
        FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	END IF;

END;
  /

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Email					Email to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetProfileListByEmail
(
	Email			IN NVARCHAR2,
	AddressBookType IN INT,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	IF(AddressBookType = 9) THEN  /* NotUsed */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || Email || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || Email || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,
				A.MailingName,			
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		    
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM 
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,			
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF(AddressBookType = 0) THEN	/* CUSTOMER */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || Email || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount 
        FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF (AddressBookType = 1) THEN /* CONSUMER */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || Email || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,			
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount 
        FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	END IF;

END;
  /

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AlphaName				Alpha name to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetProfileListByName
(
	AlphaName			IN NCHAR,
	AddressBookType		IN INT,
	PageIndex			IN INT,
    PageSize			IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	IF(AddressBookType = 9) THEN  --NotUsed
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		     		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName, 
				A.MailingName,			
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		    
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM 
			FROM CTE A
		)
		SELECT
			A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName, 
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF(AddressBookType = 0) THEN	-- CUSTOMER
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT
			A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName, 
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF (AddressBookType = 1) THEN -- CONSUMER
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,   
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		     		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT
			A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName, 
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	END IF;

END;
  /

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param PhoneNumber			Phone Number to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetProfileListByPhoneNo
(
	PhoneNumber			IN NCHAR,
	AddressBookType		IN INT,
	PageIndex			IN INT,
    PageSize		    IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	IF(AddressBookType = 9) THEN  /* NotUsed */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		),PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,
				A.MailingName,			
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		    
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM 
			FROM CTE A 
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd)); 

	ELSIF(AddressBookType = 0) THEN	/* CUSTOMER */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF (AddressBookType = 1) THEN /* CONSUMER */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT
			A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName,
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	END IF;
	
END;
  /

-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ZipCode				Zip Code to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetProfileListByZipCode
(
	ZipCode				IN NCHAR,
	AddressBookType		IN INT,
	PageIndex			IN INT,
    PageSize			IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	IF(AddressBookType = 9) THEN  /* NotUsed */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCADDZ LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCADDZ LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName, 
				A.MailingName,			
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		    
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM 
			FROM CTE A 
		)
		SELECT 
		    A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName, 
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd)); 

	ELSIF(AddressBookType = 0) THEN	/* CUSTOMER */
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT    
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		    
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCADDZ LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT
			A.AddressNumber, 
		    A.AddressType, 
		    A.ContactID, 
		    A.ParentAddressNumber, 
		    A.AlphaName, 
			A.MailingName,			
		    A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		    
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	ELSIF (AddressBookType = 1) THEN -- CONSUMER
		
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1, 
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		      		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCADDZ LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT
			A.AddressNumber,
		    A.AddressType,
		    A.ContactID,
		    A.ParentAddressNumber,
		    A.AlphaName,
			A.MailingName,
		    A.AddressLine1,
			A.City,
			A.State,
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,
		    A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	END IF;
	
END;
  /

-- #desc						Get Sales Person List by Client
-- #bl_class	 	 			Premier.Profile.SalesPersonList
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID	    InstallationID
-- #param AddressNumber			Address Number
-- #param ContactID     		Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetSalesPersnLstByClient
(
	InstallationID	NCHAR,
	AddressNumber	NUMBER,
	ContactID		NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
OPEN ResultData1 FOR
WITH CTE AS (
	SELECT 
		WA$9AN8,
		emails.EAEMAL,
		WAIDLN,
		(CASE WHEN C.UP$9ALLOW IS NULL OR C.UP$9ALLOW = 1 THEN 'N' ELSE 'Y' END) AS Notify,
		ROW_NUMBER() OVER(PARTITION BY B.WA$9WAN8, B.WAIDLN ORDER BY emails.EAEHIER DESC, emails.EARCK7 DESC) AS ERNUM
	FROM [SCDATA].FQ67125 A 
	INNER JOIN [SCDATA].FQ67101 B
		ON WA$9WAN8= A.SP$9WAN8 AND B.WA$9INID = A.SP$9INID
	LEFT OUTER JOIN [SCDATA].FQ67997 C 
		ON C.UP$9USER = B.WA$9USER AND UP$9PCD='ESPRE'
	LEFT OUTER JOIN [SCDATA].F01151 emails
	    ON emails.EAAN8 = B.WA$9AN8 AND emails.EAIDLN = B.WAIDLN AND emails.EAETP = 'E'
	WHERE  A.SP$9INID=InstallationID AND A.SP$9AN8=AddressNumber AND A.SPIDLN=ContactID)
	SELECT
		 WA$9AN8 AS AddressNumber,
		 WAIDLN AS ContactID,
		 EAEMAL AS EmailAddress,
		 Notify
	FROM CTE 
	WHERE ERNUM = 1; 
END;
  /

-- #desc						Read Tax Rate Area.
-- #bl_class					Premier.Profile.TaxRateAreaList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param TaxRateAreaCode		Tax Area Code.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetTaxRateAreaList
(
	TaxRateAreaCode IN  NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)


AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
		    RTRIM(TATXA1) as TaxRateAreaCode ,  
		    TATAXA as Description 
	    FROM 
		    [SCDATA].F4008  
	    WHERE 
		    (TRIM(TaxRateAreaCode) IS NULL OR TRIM(TATXA1) = TRIM(TaxRateAreaCode) OR TRIM(TaxRateAreaCode) = '*')
	    ORDER BY TATXA1 ASC;
END;

  /

-- #desc						Search existing web account
-- #bl_class					Premier.Profile.RequestAccessValidationCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber 		Address number to search for
-- #param Email					Email Address	

create or replace PROCEDURE [SCLIBRARY].PRO_RequestAccessEmail
(
	AddressNumber		IN NUMBER,
	Email				IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
		    EAAN8	AS AddressNumber,
			EAIDLN  AS ContactId,
			EAEMAL	AS Address
	    FROM 
		    [SCDATA].F01151 
	    WHERE 
		    EAAN8 =  AddressNumber AND  UPPER(EAEMAL) =  UPPER(Email) AND EAETP = 'E';
END;
  /

-- #desc						Search existing web account
-- #bl_class					Premier.Profile.RequestAccessValidationCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber 		Address number to search for
-- #param InvoiceNumber			Invoice Number	

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_RequestAccessValidation
(
	AddressNumber		IN NUMBER,
	InvoiceNumber		IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
		   AIAN8 AS CustomerNumber
	    FROM 
		    [SCDATA].F03012 AI
			INNER JOIN [SCDATA].F03B11 
			ON AIAN8 = RPAN8
	    WHERE 
		   AIAN8 = AddressNumber AND RPDOC = InvoiceNumber AND  AI.AICUSTS <> '1' AND AICO = '00000';
END;

  /

-- #desc						Search existing web account
-- #bl_class					Premier.Profile.SearchWebAccountCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation id
-- #param AddressNumber 		Address number to search for
-- #param AddressType			Address Type 		
-- #param ContactId 			Contact Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_SearchWebAccount
(
	InstallationID  IN NVARCHAR2,
	AddressNumber	IN DECIMAL,
	AddressType	    IN DECIMAL,
	ContactId		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT COUNT(*)
        FROM 
	        [SCDATA].FQ67101 A,
            [SCDATA].FQ67996 B	--Installation By User
        WHERE 
                A.WA$9USER = B.UI$9USER
	        AND B.UI$9INID = InstallationID
	        AND A.WA$9AN8 = AddressNumber 
            AND A.WA$9TYP = AddressType  
            AND A.WAIDLN = ContactId;
END;
  /

-- #desc				        Update AboutUs.
-- #bl_class				    Premier.Profile.AboutUs.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AboutUsID	            AboutUsID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_UpdAboutUs
(
    AboutUsID       IN NVARCHAR2,
    Description	    IN NVARCHAR2,
    AllowedOnESOM	IN DECIMAL,
    AllowedOnPOS	IN DECIMAL,
    AllowedOnWEB	IN DECIMAL,
    ProgramID		IN NVARCHAR2,
    WorkStationID	IN NVARCHAR2,
    UserID			IN NVARCHAR2,
    DateUpdated	    IN DECIMAL,
    TimeLastUpdated IN DECIMAL
)
AS
BEGIN
	UPDATE 
		[SCDATA].FQ67102
	SET  
	    HHDSC1 		= Description,
        HH$9ESOM	= AllowedOnESOM, 
        HH$9POSA	= AllowedOnPOS, 
        HH$9WEBA	= AllowedOnWEB, 
		HHPID		= ProgramID,    
        HHJOBN		= WorkStationID,   
        HHUSER		= UserID,   
		HHUPMJ		= DateUpdated,   
		HHUPMT		= TimeLastUpdated
	WHERE 
		TRIM(HH$9HHA) = TRIM(AboutUsID);
END;
		 
  /

-- #desc					Update line of business Lang
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AboutUsID		    AboutUsLangID
-- #param LangPref			Language Preference
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_UpdAboutUsLang
(
	AboutUsID	IN NVARCHAR2,
	LangPref	IN NVARCHAR2,
	Description	IN NVARCHAR2
)
AS
BEGIN 
	UPDATE 
		  [SCDATA].FQ67102L
	  SET HHDSC1  =	 Description
	WHERE 
		        TRIM(HH$9HHA)  =  TRIM(AboutUsID)
	      AND   TRIM(HHLNGP)   =  TRIM(LangPref);
END;
  /
-- #desc						Update Allowed Ship To's For a Web Account
-- #bl_class					Premier.Profile.UpdateAllowedShiptoCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A			

-- #param StoreId				Store Id	
-- #param WebAccountId			Web Account Id	
-- #param AddressType			Address Book Type	
-- #param SelectedShipTosXML	XML with Selected Ship To's List
-- #param DeselectedShipTosXML	XML with Deselected Ship To's List

-- #param UserReservedNumber	User Reserved Number	
-- #param UserReservedAmount	User Reserved Amount	
-- #param UserReservedCode		User Reserved Code		
-- #param UserReservedDate		User Reserved Date		
-- #param UserReservedReference User Reserved Reference
-- #param UserID				User Id
-- #param ProgramID				Program Id
-- #param WorkStationID			WorkStation ID		
-- #param DateUpdated			Date Updated			
-- #param TimeLastUpdated		Time Last Updated

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_UpdAllowedShipto  
(
		StoreId					IN NCHAR,
		WebAccountId			IN NUMBER,
		AddressNumber			IN NUMBER,
		AddressType				IN NUMBER,
		SelectedShipTosXML		IN XMLType DEFAULT NULL,
		DeselectedShipTosXML	IN XMLType DEFAULT NULL,		
		UserReservedNumber		IN DECIMAL,
		UserReservedAmount		IN DECIMAL,
		UserReservedCode		IN NVARCHAR2,
		UserReservedDate		IN DECIMAL,
		UserReservedReference	IN NVARCHAR2,
		UserID					IN NVARCHAR2,
		ProgramID				IN NVARCHAR2,
		WorkStationID			IN NVARCHAR2,
		DateUpdated				IN DECIMAL,
		TimeLastUpdated			IN DECIMAL
)
AS
	BEGIN
		 -- Start the transaction
		 SAVEPOINT sp_begin;

		-- Delete Deselected Ship To's
		IF (DeselectedShipTosXML IS NOT NULL) THEN
        DELETE FROM [SCDATA].FQ67101S S
        WHERE S.WS$9INID = StoreId 
          AND S.WS$9WAN8 = WebAccountId 
          AND S.WS$9AN8 = AddressNumber 
          AND S.WS$9SHAN IN (
              SELECT ShipToNumber 
              FROM XMLTABLE ('/items/item' PASSING DeselectedShipTosXML COLUMNS ShipToNumber NUMBER PATH 'text()') X
          );
		END IF;

	    -- Insert Selected Ship To's
	    IF (SelectedShipTosXML IS NOT NULL) THEN
	        INSERT INTO [SCDATA].FQ67101S
	               (WS$9WAN8, WS$9AN8, WS$9TYP, WS$9SHAN, WS$9INID,
	                WSURAB, WSURAT, WSURCD, WSURDT, WSURRF,
	                WSUSER, WSPID, WSUPMJ, WSUPMT, WSJOBN)
	        SELECT WebAccountId,
	               AddressNumber,
	               AddressType,
	               X.ShipToNumber,
	               StoreId,
	               UserReservedNumber,
	               UserReservedAmount,
	               UserReservedCode,
	               UserReservedDate,
	               UserReservedReference,
	               UserID,
	               ProgramID,
	               DateUpdated,
	               TimeLastUpdated,
	               WorkStationID
	        FROM XMLTABLE ('/items/item' PASSING SelectedShipTosXML COLUMNS ShipToNumber NUMBER PATH 'text()') X
	        WHERE X.ShipToNumber NOT IN (
	            SELECT S.WS$9SHAN
	            FROM [SCDATA].FQ67101S S
	            WHERE S.WS$9SHAN = X.ShipToNumber
				  AND S.WS$9INID = StoreId 
	              AND S.WS$9AN8 = AddressNumber 
	              AND S.WS$9WAN8 = WebAccountId
	        );
	    END IF;
		-- Commit the transaction
		COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK TO sp_begin;
        RAISE;
END;
	
	
  /

-- #desc						Update line of business.
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LineOfBusinessID		Line of business 
-- #param Description			Description
-- #param BranchPlant			Branch Plant
-- #param AddressBookType		Address type
-- #param PersonCorporationCode	Person Code
-- #param AdjustmentSchedule	Adjustment Schedule
-- #param PriceGroup			Price Group
-- #param SequenceNumber		Sequence Number
-- #param CategoryCode01		N/A
-- #param CategoryCode02		N/A
-- #param CategoryCode03		N/A
-- #param CategoryCode04		N/A
-- #param CategoryCode05		N/A
-- #param CategoryCode06		N/A
-- #param CategoryCode07		N/A
-- #param CategoryCode08		N/A
-- #param CategoryCode09		N/A
-- #param CategoryCode10		N/A
-- #param CategoryCode11		N/A
-- #param CategoryCode12		N/A
-- #param CategoryCode13		N/A
-- #param CategoryCode14		N/A
-- #param CategoryCode15		N/A
-- #param CategoryCode16		N/A
-- #param CategoryCode17		N/A
-- #param CategoryCode18		N/A
-- #param CategoryCode19		N/A
-- #param CategoryCode20		N/A
-- #param CategoryCode21		N/A
-- #param CategoryCode22		N/A
-- #param CategoryCode23		N/A
-- #param CategoryCode24		N/A
-- #param CategoryCode25		N/A	
-- #param CategoryCode26		N/A
-- #param CategoryCode27		N/A
-- #param CategoryCode28		N/A
-- #param CategoryCode29		N/A
-- #param CategoryCode30		N/A
-- #param ProgramID				Program ID
-- #param WorkStationID			WorkStation ID
-- #param UserID				User ID
-- #param DateUpdated			Last Date Update
-- #param TimeLastUpdated		Last Updated time

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_UpdLineOfBusiness
(
		LineOfBusinessID    IN NVARCHAR2,
		Description     IN NVARCHAR2,
		BranchPlant     IN NVARCHAR2,
		AddressBookType IN DECIMAL,
		PersonCorporationCode IN NVARCHAR2,
		AdjustmentSchedule IN NVARCHAR2,
		PriceGroup     IN NVARCHAR2,
		SequenceNumber IN DECIMAL,
		CategoryCode01 IN NVARCHAR2,
		CategoryCode02 IN NVARCHAR2,
		CategoryCode03 IN NVARCHAR2,
		CategoryCode04 IN NVARCHAR2,
		CategoryCode05 IN NVARCHAR2,
		CategoryCode06 IN NVARCHAR2,
		CategoryCode07 IN NVARCHAR2,
		CategoryCode08 IN NVARCHAR2,
		CategoryCode09 IN NVARCHAR2,
		CategoryCode10 IN NVARCHAR2,
		CategoryCode11 IN NVARCHAR2,
		CategoryCode12 IN NVARCHAR2,
		CategoryCode13 IN NVARCHAR2,
		CategoryCode14 IN NVARCHAR2,
		CategoryCode15 IN NVARCHAR2,
		CategoryCode16 IN NVARCHAR2,
		CategoryCode17 IN NVARCHAR2,
		CategoryCode18 IN NVARCHAR2,
		CategoryCode19 IN NVARCHAR2,
		CategoryCode20 IN NVARCHAR2,
		CategoryCode21 IN NVARCHAR2,
		CategoryCode22 IN NVARCHAR2,
		CategoryCode23 IN NVARCHAR2,
		CategoryCode24 IN NVARCHAR2,
		CategoryCode25 IN NVARCHAR2,
		CategoryCode26 IN NVARCHAR2,
		CategoryCode27 IN NVARCHAR2,
		CategoryCode28 IN NVARCHAR2,
		CategoryCode29 IN NVARCHAR2,
		CategoryCode30 IN NVARCHAR2,
		ProgramID      IN NVARCHAR2,
		WorkStationID  IN NVARCHAR2,
		UserID         IN NVARCHAR2,
		DateUpdated    IN DECIMAL,
		TimeLastUpdated IN DECIMAL
)
AS
BEGIN

	UPDATE 
		[SCDATA].FQ67103
	SET  
		LBDSC1  = Description,
	    LBMCU   = BranchPlant,
	    LB$9TYP = AddressBookType,
	    LBTAXC  = PersonCorporationCode,
	    LBASN   = AdjustmentSchedule,
	    LBCPGP  = PriceGroup,
	    LBSEQ   = SequenceNumber,
	    LBAC01  = CategoryCode01,
	    LBAC02  = CategoryCode02,
	    LBAC03  = CategoryCode03,
	    LBAC04  = CategoryCode04,
	    LBAC05  = CategoryCode05,
	    LBAC06  = CategoryCode06,
	    LBAC07  = CategoryCode07,
	    LBAC08  = CategoryCode08,
	    LBAC09  = CategoryCode09,
	    LBAC10  = CategoryCode10,
	    LBAC11  = CategoryCode11,
	    LBAC12  = CategoryCode12,
	    LBAC13  = CategoryCode13,
	    LBAC14  = CategoryCode14,
	    LBAC15  = CategoryCode15,
	    LBAC16  = CategoryCode16,
	    LBAC17  = CategoryCode17,
	    LBAC18  = CategoryCode18,
	    LBAC19  = CategoryCode19,
	    LBAC20  = CategoryCode20,
	    LBAC21  = CategoryCode21,
	    LBAC22  = CategoryCode22,
	    LBAC23  = CategoryCode23,
	    LBAC24  = CategoryCode24,
	    LBAC25  = CategoryCode25,
	    LBAC26  = CategoryCode26,
	    LBAC27  = CategoryCode27,
	    LBAC28  = CategoryCode28,
	    LBAC29  = CategoryCode29,
	    LBAC30  = CategoryCode30,
	    LBPID   = ProgramID,
	    LBJOBN  = WorkStationID,
	    LBUSER  = UserID,
	    LBUPMJ  = DateUpdated,
	    LBUPMT  = TimeLastUpdated
	WHERE 
		TRIM(LB$9LOB) = TRIM(LineOfBusinessID);
END;
		
  /

-- #desc						Update line of business Lang
-- #bl_class					Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LineOfBusinessID		LineOfBusinessID
-- #param LangPref				Language Preference
-- #param Description			Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_UpdLineOfBusinessLang
(
	LineOfBusinessID    IN NVARCHAR2,
	LangPref			IN NVARCHAR2,
	Description		    IN NVARCHAR2
)
AS
BEGIN
	UPDATE 
		  [SCDATA].FQ67103L
	  SET LBDSC1  =	 Description
	WHERE 
            TRIM(LB$9LOB) =  TRIM(LineOfBusinessID)
	    AND TRIM(LBLNGP)   =  TRIM(LangPref);
END;


    
  /

-- #desc							Add a entry for the User Password History.
-- #bl_class						Premier.Security.UserPasswordHistory.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param UserID					User ID
-- #param Password					Password
-- #param LastDatePwdChanged		Last Date Password Changed
-- #param LastTimePwdChanged		Last Time Password Changed

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_AddPasswordHistory
(
	UserID		IN decimal,
	Password	IN NVARCHAR2,
	LastDatePwdChanged IN decimal,
	LastTimePwdChanged IN decimal
)
AS

BEGIN

	INSERT INTO [SCDATA].FQ679911
	(
	 PH$9USER, PH$9PWD, 
	 PH$9LDPC, PH$9LTPC
	)
	VALUES
	(
	 UserID, Password, 
	 LastDatePwdChanged, 
	 LastTimePwdChanged
	);

END;
  /
-- #desc					Add User by Installation Table 
-- #bl_class				Premier.Security.StoreByUserList.cs/UserStore.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param UserID			User ID number.
-- #param InstallationID	Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_AddUserByInst
(
	UserID			IN decimal,
	InstallationID	IN NVARCHAR2
)
AS

BEGIN

	INSERT INTO [SCDATA].FQ67996
	(
		UI$9USER,  
		UI$9INID   
	)
	VALUES
	(
		 UserID, 
		 InstallationID 
	);
	
END;

  /

-- #desc					Creates a User Permission.
-- #bl_class				Premier.Security.UserPermission.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param userID			User ID number.
-- #param PermissionCode	Permission Code.
-- #param ActionAllowed		Allow to do action.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_AddUserPermission
(
	UserID			IN decimal,
	PermissionCode	IN NVARCHAR2,
	ActionAllowed	IN decimal
)
AS

BEGIN

	INSERT INTO 
		[SCDATA].FQ67997
		(
		 UP$9USER,  
		 UP$9PCD,  
		 UP$9ALLOW
		)
		VALUES
		(
		 UserID, 
		 PermissionCode, 
		 ActionAllowed
		);

END;
  /

-- #desc				Delete an User. Uses procedures: .
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_DelUserPermission, SEC_DelPasswordHistory and SEC_DelUserByInst
-- #db_references		N/A

-- #param UserID		User ID number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_DelUser
(
	UserID	IN decimal
)
AS

BEGIN 

--Delete children
 [SCLIBRARY].SEC_DelUserPermission(UserID,null);
 [SCLIBRARY].SEC_DelPasswordHistory(UserID);
 [SCLIBRARY].SEC_DelUserByInst(UserID,'*');--All related Installations

DELETE  

FROM  
	[SCDATA].FQ67991
WHERE 
	US$9USER = UserID;

END;



  /

-- #desc					Update the Account disable status.
-- #bl_class				Premier.Security.User.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserID			User id number.
-- #param AccountDisable	Enable o disable account.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_ExcChangeAccountDisable
(
	UserID						decimal,	
	AccountDisable				decimal	
)	
AS

BEGIN	
	UPDATE 
		[SCDATA].FQ67991
	SET 		 
		US$9SFAD = AccountDisable
	WHERE 
		US$9USER = UserID;

END;
  /
-- #desc								Change User Password
-- #bl_class							Premier.Security.User.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param UserID						User ID
-- #param Password						Password
-- #param LastDatePasswordChanged		Last Date Password Changed

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_ExcChangeUserPassword
(
	UserID						IN DECIMAL,
	Password					IN NVARCHAR2,	
	LastDatePasswordChanged	    IN DECIMAL	
)
AS
BEGIN
    UPDATE 
	    [SCDATA].FQ67991	
    SET
	    US$9PWD  = Password,
        US$9LDPC = LastDatePasswordChanged, 
        US$9SFCP = 1
    WHERE 
	    US$9USER = UserID;
END;



  /

-- #desc				    Search a password in the password history.
-- #bl_class			    Premier.Security.UserPasswordHistory.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserID	        User ID number.
-- #param Password	        New password to validate.
-- #param Reviews	        Number of old passwords in with look for.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_ExcCheckPasswordHistory
(
	UserID	IN decimal,
	Reviews IN int,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN	

	OPEN ResultData1 FOR
    SELECT ROWNUM, UserPassword FROM(
      SELECT PH$9USER AS UserID, 
        PH$9PWD AS UserPassword
        FROM [SCDATA].FQ679911
        WHERE  PH$9USER = UserID
        ORDER BY PH$9LDPC DESC ,PH$9LTPC DESC)  
    WHERE ROWNUM <= Reviews;

END;
  /

-- #desc					Copy all the e-Commerce Default Privileges from an Intallation to another.
-- #bl_class				Premier.Security.DefaultPrivileges.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param sourceInstallationID 
-- #param destinationInstallationID 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_ExcCopyDefaultPrivileges
(
	sourceInstallationID	IN NVARCHAR2,
	destinationInstallationID IN NVARCHAR2
)
AS
BEGIN
	
	DELETE FROM [SCDATA].FQ67994E WHERE PE$9INID = destinationInstallationID;
	
	INSERT INTO [SCDATA].FQ67994E
	(
		PE$9INID,
		PE$9PCD,
		PE$9ICF,
		PE$9ALLOW,
		PE$9WEBA
	)
	SELECT 
		destinationInstallationID,
		PE$9PCD,
		PE$9ICF,
		PE$9ALLOW,
		PE$9WEBA
	FROM [SCDATA].FQ67994E
	WHERE PE$9INID = sourceInstallationID;
	
END;



  /

-- #desc					Delete a Default Privileges.
-- #bl_class				Premier.Security.DefaultPrivileges.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_ExcDeleteDefaultPrivileges
(
	InstallationID	IN NVARCHAR2
)
AS

BEGIN

	DELETE  
	FROM  
		[SCDATA].FQ67994E
	WHERE 
		PE$9INID = InstallationID;		
END;


  /
-- #desc				                Change Web Users Password
-- #bl_class				            Premier.Security.WebAccountSyncPasswordCommand.cs
-- #db_dependencies				        N/A
-- #db_references				        N/A

-- #param WebUserName					Web UserName
-- #param StoreListXML					Store ID List in XML Format
-- #param Password						Password
-- #param LastDatePasswordChanged		Last Date Password Changed

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_ExcSyncWebAcctPassword
(
	WebUserName					IN NVARCHAR2,
	StoreListXML				IN XMLType,
	Password					IN NVARCHAR2,	
	LastDatePasswordChanged	    IN NUMBER	
)
AS
BEGIN
      UPDATE [SCDATA].FQ67991 USR
      SET 
          USR.US$9PWD  = Password,
          USR.US$9LDPC = LastDatePasswordChanged,
          USR.US$9SFCP = 1
      WHERE
          EXISTS 
          (SELECT 1
           FROM [SCDATA].FQ67101 WUSR /*Web Account User*/
           INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
              ON INBU.UI$9USER = WUSR.WA$9USER
           INNER JOIN XMLTABLE ('/stores/storeID' 
              PASSING StoreListXML
              COLUMNS StoreID NCHAR(3) PATH 'text()') X
              ON X.StoreID = INBU.UI$9INID 
            WHERE
              WUSR.WA$9USER = USR.US$9USER
              AND WUSR.WAEMAL = WebUserName);
END;
  /

-- #desc					Get the Individual or Company e-Commerce Default Privileges List.
-- #bl_class				Premier.Security.DefaultPrivileges.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID 
-- #param IndividualCompanyFlag 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetDefaultPrivileges
(
	InstallationID IN NVARCHAR2,
	IndividualCompanyFlag IN decimal,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT  
		A.PE$9PCD AS PermissionCode,
		NVL(B.PE$9ALLOW, 1) AS ActionAllowed,--0 is True, 1 is False
        NVL(B.PE$9WEBA, 0)  AS WebAllowed,--0 is True, 1 is False
		Case when B.PE$9PCD IS NULL then 'N' else 'Y' end AS Exist
	FROM [SCDATA].FQ67994 A
	LEFT OUTER JOIN 
              [SCDATA].FQ67994E B
              ON A.PE$9PCD = B.PE$9PCD 
              and B.PE$9INID = InstallationID
              and (IndividualCompanyFlag IS NULL OR B.PE$9ICF = IndividualCompanyFlag)
       WHERE 
			PECLS='ECOM';  

END;





  /


-- #desc						Read not related Installation list by UserID and Installation type.
-- #bl_class					Premier.Security.StoreByUserList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UserID				User ID
-- #param ApplicationUseFlag	Installation type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetInstByUserListNotRel
(
	UserID				IN decimal,
	ApplicationUseFlag	IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT 
		DISTINCT A.IN$9INID as InstallationID,
		UserID as UserID, 
		INDSC1 as Description,
		IN$9APFL as ApplicationUseFlag
	FROM  	
		[SCDATA].FQ670001 A,
		[SCDATA].FQ67996 B --User by Installation		
	WHERE 	
		(ApplicationUseFlag = '*' OR TRIM(IN$9APFL) = TRIM(ApplicationUseFlag))
		AND 	 	
		A.IN$9INID NOT IN (SELECT UI$9INID FROM [SCDATA].FQ67996 WHERE UI$9USER = UserID)
		AND A.IN$9INID = B.UI$9INID(+)
		ORDER BY  IN$9APFL ASC,
		INDSC1 ASC;

end;
					
					
  /
-- #desc					Read permission list filtered by permission id or description.
-- #bl_class				Premier.Security.PermisionList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param PermissionID		Permission ID number.
-- #param Description		Permission Description.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetPermissionList
(
	PermissionID        IN NCHAR,
	Description         IN NCHAR,
	ApplicationUseFlag  IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
	        A.PE$9PCD as PermissionID, 
	        A.PEDSC1 as Description, 
	        A.PESYS as InstallationType
        FROM  
	        [SCDATA].FQ67994 A
        WHERE 
	        (PermissionID = '*' OR UPPER(A.PE$9PCD) LIKE '%' || PermissionID || '%') and
	        (Description = '*' OR UPPER(A.PEDSC1) LIKE '%' || Description || '%') and
	        (ApplicationUseFlag = '*' OR A.PECLS = ApplicationUseFlag);
END;

  /
-- #desc				Read all user information.  Uses procedures:  
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_GetUser
-- #db_references       N/A

-- #param UserName		User Name number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUserByName
(
    -- User Name search criteria
    InstallationID  IN NCHAR,
    UserName		IN NCHAR,
    ResultData1 OUT GLOBALPKG.refcursor,
    ResultData2 OUT GLOBALPKG.refcursor,
    ResultData3 OUT GLOBALPKG.refcursor,
    ResultData4 OUT GLOBALPKG.refcursor
)
AS
    UserId DECIMAL;
BEGIN
    BEGIN
        SELECT US$9USER INTO UserId 
        FROM 
            [SCDATA].FQ67991 A
        INNER JOIN [SCDATA].FQ67996 B -- User by Installation Table
            ON B.UI$9USER = A.US$9USER
            AND B.UI$9INID = InstallationID
        WHERE 
                ROWNUM < 2
            AND UPPER(US$9USRN) = UserName;  -- User Name filter
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        UserId := NULL;
    END;
    
        	
    --call main SP
    IF(UserId IS NOT NULL)
    THEN
        SEC_GetUser(UserId, ResultData1, ResultData2, ResultData3);
    END IF;
END;

  /
-- #desc				Read user information by UserId.
-- #bl_class			Premier.Security.UserInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param UserID	    User ID number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUserInfo
(
    -- User Id search criteria
    UserID IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
) 
AS
BEGIN
    OPEN ResultData1 FOR	
        SELECT 
	        US$9USER	as UserID , 
	        US$9USRN	as UserName ,   
	        USLNGP		as LanguagePreference ,
	        [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',USLNGP,'*')		as LanguagePrefDesc ,       
            US$9LDPC	as LastDatePasswordChanged,  
            US$9SFAD	as AccountDisable , 
            US$9SFAL	as AccountLockout
        FROM 
	        [SCDATA].FQ67991
        WHERE 
	        -- User Id filter	
            US$9USER = UserID;
END; 
        
  /
-- #desc				    Read user information by UserName.
-- #bl_class			    Premier.Security.UserInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UserName	        User Name.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUserInfoByName
(
    -- User Id search criteria
    UserName IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR	
        SELECT 
	        US$9USER	as UserID , 
	        US$9USRN	as UserName ,   
	        USLNGP		as LanguagePreference ,
	        [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',USLNGP,'*')		as LanguagePrefDesc ,
            US$9LDPC	as LastDatePasswordChanged,  
            US$9SFAD	as AccountDisable , 
            US$9SFAL	as AccountLockout
        FROM 
	        [SCDATA].FQ67991
        WHERE 
	        -- User Name filter	
           TRIM(US$9USRN) = TRIM(UserName);
END;
    
  /
-- #desc					Read user permissions(FQ67997,FQ67994). 
-- #bl_class				Premier.Security.UserPermissionList.cs
-- #db_dependencies			N/A
-- #db_references			N/A		


-- #param UserID			User ID number.
-- #param PermissionCode	Permission code.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUserPermissionList
(
    UserID  IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor	
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT   
		    A.UP$9PCD as PermissionCode, 
		    B.PEDSC1 as Description
	    FROM  
		    [SCDATA].FQ67997 A,
		    [SCDATA].FQ67994 B
	    WHERE 
	            A.UP$9PCD = B.PE$9PCD
		    AND A.UP$9USER = UserID 
		    AND A.UP$9ALLOW = 0; -- ALLOWED = YES    	
END;


  /
-- #desc						Read not related Installation list by UserID and Installation type.
-- #bl_class					Premier.Security.UserPermissionList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param UserID				User ID
-- #param ApplicationUseFlag	Installation type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUserPermissListNotRel
(
    UserID		        IN DECIMAL,
	ApplicationUseFlag  IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        PE$9PCD as PermissionCode,
	        PEDSC1 as Description
        FROM  	
	        [SCDATA].FQ67994 A
    WHERE 	
	    (ApplicationUseFlag = '*' OR TRIM(PECLS) = TRIM(ApplicationUseFlag)) AND
	    A.PE$9PCD NOT IN (SELECT UP$9PCD FROM [SCDATA].FQ67997 WHERE UP$9USER=UserID);
END;
  /
-- #desc					Update e-Commerce Default Privileges.
-- #bl_class				Premier.Security.DefaultPrivilege.cs

-- #param InstallationID 
-- #param PermissionCode 
-- #param IndividualCompanyFlag 
-- #param ActionAllowed		
-- #param WebAllowed

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_UpdDefaultPrivilege
(
	InstallationID      IN NVARCHAR2,
	PermissionCode      IN NVARCHAR2,
	IndividualCompanyFlag   IN DECIMAL,
	ActionAllowed	    IN DECIMAL,	
	WebAllowed		    IN DECIMAL
)
AS
BEGIN
	UPDATE [SCDATA].FQ67994E
		SET 
			PE$9ALLOW = ActionAllowed,
			PE$9WEBA = WebAllowed	
	WHERE 
		PE$9INID = InstallationID AND 
		TRIM(PE$9PCD) = TRIM(PermissionCode) AND
		PE$9ICF = IndividualCompanyFlag;
END;
  /
-- #desc							Updates an User.
-- #bl_class						Premier.Security.User.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param userID					User id number.
-- #param userName					User name.
-- #param languagePreference		Language preference.
-- #param secretQuestion			Encrypted Question.
-- #param secretAnswer				Encrypetd Answer.
-- #param changePassword			Change password indicator.
-- #param noPasswordChange			No change password.
-- #param passwordExpires			Indicate when password expire.
-- #param accountDisable			Enable o disable account.
-- #param accountLockout			Lock account when is necesary.
-- #param lastDateAccountLocked		Last date when account was locked.
-- #param lastTimeAccountLocked		Last time when account was locked.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_UpdUser
(
	userID						IN DECIMAL,
	userName					IN NVARCHAR2,
	languagePreference			IN NVARCHAR2,
	secretQuestion				IN NVARCHAR2,
	secretAnswer				IN NVARCHAR2,
	changePassword				IN DECIMAL,
	noPasswordChange			IN DECIMAL,
	PasswordExpires				IN DECIMAL,
	accountDisable				IN DECIMAL,
	accountLockout				IN DECIMAL,
	lastDateAccountLocked		IN DECIMAL,
	lastTimeAccountLocked		IN DECIMAL
)
AS
BEGIN
    UPDATE 
	    [SCDATA].FQ67991	
    SET 	
	    US$9USRN	= userName , 
	    USLNGP		= languagePreference , 
        US$9SQ		= secretQuestion ,   
        US$9ANS		= secretAnswer ,  
        US$9SFCP	= changePassword ,  
        US$9SFNP	= noPasswordChange , 
        US$9SFNE	= PasswordExpires , 
        US$9SFAD	= accountDisable , 
        US$9SFAL	= accountLockout ,
	    US$9LDAL	= lastDateAccountLocked, 
	    US$9LTAL	= lastTimeAccountLocked
    WHERE 
	    US$9USER = userID;
END;



  /
-- #desc				    Add Brand Mailing
-- #bl_class	 	 		Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies		    N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param AddressBookType	AddressBookType
-- #param ContactID			ContactID
-- #param Brand				Brand

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_AddBrandMailSubscription
(
	AddressNumber				IN DECIMAL,
	AddressBookType			    IN DECIMAL,
	ContactID					IN DECIMAL,
	Brand						IN NVARCHAR2,
	MailPreference				IN NVARCHAR2,
	EmailPreference			    IN DECIMAL,
	EmailFormat				    IN DECIMAL,
	MailContentPreference		IN NVARCHAR2,
	PartnerMail  				IN NVARCHAR2,
	ShareEmail					IN NVARCHAR2,

	MailingFlag1				IN NVARCHAR2,
	MailingFlag2				IN NVARCHAR2,
	MailingFlag3				IN NVARCHAR2,
	MailingFlag4				IN NVARCHAR2,
	MailingFlag5				IN NVARCHAR2,
	MailingFlag6				IN NVARCHAR2,
	MailingFlag7				IN NVARCHAR2,
	MailingFlag8				IN NVARCHAR2,
	MailingFlag9				IN NVARCHAR2,
	MailingFlag10				IN NVARCHAR2,
	MailingCatCode1			    IN NVARCHAR2,
	MailingCatCode2			    IN NVARCHAR2,
	MailingCatCode3			    IN NVARCHAR2,
	MailingCatCode4			    IN NVARCHAR2,
	MailingCatCode5			    IN NVARCHAR2,
	MailingCatCode6			    IN NVARCHAR2,
	MailingCatCode7			    IN NVARCHAR2,
	MailingCatCode8			    IN NVARCHAR2,
	MailingCatCode9			    IN NVARCHAR2,
	MailingCatCode10			IN NVARCHAR2,

	UserReserveCode1			IN NVARCHAR2,
	UserReserveCode2			IN NVARCHAR2,
	UserReservedReference		IN NVARCHAR2,
	UserReservedNumber			IN DECIMAL,
	UserReservedDate			IN DECIMAL,
	UserReservedAmount			IN DECIMAL,
	UserReservedChar			IN NVARCHAR2,
	UserId						IN NVARCHAR2,
	ProgramId					IN NVARCHAR2,
	DateUpdated				    IN DECIMAL,
	WorkStationId				IN NVARCHAR2,
	TimeLastUpdated			    IN DECIMAL
)
AS
BEGIN
    INSERT INTO 
    [SCDATA].FQ671041
	(
	    PR$9AN8,    PR$9TYP,   PRIDLN,
        PR$9SRP1,   PR$9MAIL,  PR$9EMYN,   PR$9EMFP,
        PR$9MLCP,   PR$9MLP,   PR$9EMALS,  PR$9MLF1,
        PR$9MLF2,   PR$9MLF3,  PR$9MLF4,   PR$9MLF5,
        PR$9MLF6,   PR$9MLF7,  PR$9MLF8,   PR$9MLF9,
        PR$9MLF10,  PR$9MLC1,  PR$9MLC2,   PR$9MLC3,
        PR$9MLC4,   PR$9MLC5,  PR$9MLC6,   PR$9MLC7,
        PR$9MLC8,   PR$9MLC9,  PR$9MLC10,  PRURC1,
        PRURC2,     PRURRF,    PRURAB,     PRURDT,
        PRURAT,     PRAURCH1,  PRUSER,     PRPID,
        PRUPMJ,     PRJOBN,    PRUPMT
	)
	VALUES
	(
	    AddressNumber,		AddressBookType,		ContactID,
	    Brand,				MailPreference,			EmailPreference,
	    EmailFormat,		MailContentPreference ,	PartnerMail,
	    ShareEmail ,		MailingFlag1,			MailingFlag2,
	    MailingFlag3,		MailingFlag4,			MailingFlag5,
	    MailingFlag6,		MailingFlag7,			MailingFlag8,
	    MailingFlag9, 		MailingFlag10,			MailingCatCode1,
	    MailingCatCode2,	MailingCatCode3,		MailingCatCode4,
	    MailingCatCode5,	MailingCatCode6,		MailingCatCode7,
	    MailingCatCode8,	MailingCatCode9,		MailingCatCode10,
	    UserReserveCode1,	UserReserveCode2,		UserReservedReference,
	    UserReservedNumber,UserReservedDate,		UserReservedAmount,
	    UserReservedChar,	UserId,					ProgramId,
	    DateUpdated,		WorkStationId,			TimeLastUpdated
	);
END;
  /
-- #desc						Read Master info from Consumer
-- #bl_class					Premier.Consumer.ConsumerMasterList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param AlphaName				AlphaName
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_ConsumerMasterList
(
	AddressNumber	IN NUMBER,
	AlphaName	 	IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1     OUT GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	OPEN ResultData1 FOR
	WITH CTE AS (
		SELECT							  
			PR$9AN8,
			PRALPH,
			PRADD1,
			ROW_NUMBER() OVER(ORDER BY PR$9AN8) RNUM
		FROM 
			[SCDATA].FQ670302	/* Consumer Master */
		WHERE (AddressNumber = 0 OR PR$9AN8 = AddressNumber)/* AddressNumber filter */
			AND (PR$9AN8 <> PR$9PA8) /* Exclude Parents */
			AND	(AlphaName = '*' OR UPPER(PRALPH) LIKE '%' || AlphaName || '%')	 /* AlphaName filter */
	)
	SELECT 
		PR$9AN8 AS AddressNumber,
		PRALPH AS AlphaName,
		PRADD1 AS AddressLine1,
		(SELECT COUNT (1) FROM CTE) AS TotalRowCount
	FROM CTE A
    WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
END;
  /
-- #desc					Delete Brand Mailing
-- #bl_class	 	 		Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param AddressBookType	AddressBookType
-- #param ContactID			ContactID
-- #param Brand				Brand

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_DelBrandMailSubscription
(
	AddressNumber   IN DECIMAL,
	AddressBookType	IN DECIMAL,
	ContactID		IN DECIMAL,
	Brand			IN NVARCHAR2
)
AS
BEGIN
    DELETE FROM
        [SCDATA].FQ671041
    WHERE 
		PR$9AN8  = AddressNumber
	AND PR$9TYP  = AddressBookType
	AND PRIDLN   = ContactID
	AND TRIM(PR$9SRP1) = TRIM(Brand);
 END;
 
  /

-- #desc					Check Consumer Status
-- #bl_class				Premier.Consumer.Consumer.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param AddressNumber		 Address Number (consumer)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_ExcCheckConsumerStatus
(
	AddressNumber IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
	        PR$9STS AS Status
        FROM
	        [SCDATA].FQ670302
        WHERE
	        PR$9AN8 = AddressNumber;
END;
  /
-- #desc					Add ShipTo relation
-- #bl_class	 	 		Premier.Consumer.ShipToList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ParentAddress		Parent Address Number
-- #param ShipToID			Address number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_ExcRelateShipTo
(
	ParentAddress  IN DECIMAL,
	ShipToID       IN DECIMAL
)
AS
BEGIN
	UPDATE
		[SCDATA].FQ670302
	SET
		PR$9PA8 = ParentAddress
	WHERE
		PR$9AN8 = ShipToID;
END;


  /

-- #desc					Validate if consumer/contact exists.
-- #bl_class				Premier.Consumer.ConsumerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID  

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_ExcValidateConsumerInfo
(
	AddressNumber   IN  DECIMAL,
	ContactID       IN  DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        -- Read Consumer Information
        SELECT 
	        PCMLNM AS MailingName,
			PCEMAL AS EmailAddress
        FROM 
            [SCDATA].FQ670302 PR,
            [SCDATA].FQ67303 PC
        WHERE 
                PC.PC$9AN8 = PR.PR$9AN8 
		    AND PC.PCIDLN = ContactID
	        AND PR.PR$9AN8 = AddressNumber;
END;
	
  /

-- #desc						Read if address Number is valid
-- #bl_class					Premier.Consumer.ValidateConsumerRecordCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			AddressNumber
-- #param IsBillTo 				Specific Is Bill To  /*1 when is Billto,0 when is Shipto*/
-- #param ValidAddressNumber	When is B is valid Billto, S is valid Shipto when is * is invalid address number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_ExcValidateConsumerRecord
(
	AddressNumber IN DECIMAL,
	IsBillTo IN DECIMAL, /*1 when is Billto, 0 when is Shipto*/
	ValidAddressNumber OUT	NVARCHAR2
)
AS
	BillToType NVARCHAR2(2);
BEGIN	
	BEGIN
		SELECT DISTINCT PRBADT INTO BillToType
		FROM [SCDATA].FQ670302
		WHERE
			PR$9AN8 = AddressNumber
			AND TRIM(PR$9STS) <> '1'; /* is active*/ 
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			BillToType := '';
	END;
	
	IF(IsBillTo = 1 AND BillToType IN ('B','X'))THEN  /* Is BillTo Only and Billto-Shipto(X)*/
		ValidAddressNumber := 'B';			/*Valid Bill to*/
	ELSIF(IsBillTo = 0 AND BillToType IN ('S','X')) THEN /* Is Shito Only and Shipto-Billto(X)*/
		ValidAddressNumber := 'S';			/*Valid Ship to*/
	ELSE
		ValidAddressNumber := '*';			/*Not valid AddressNumber*/
	END IF;
	
END;

  /
-- #desc				    Fetch Consumer Additional and Children information
-- #bl_class			    N/A
-- #db_dependencies		    PRO_GetProfileExtInformation, CSM_GetContacts
-- #db_references		    CSM_GetConsumer

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetConsumerChildren
(
	AddressNumber   IN DECIMAL,
	ContactID       IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
    AddressType DECIMAL := 1;
    CONTACTTMP  DECIMAL; 
BEGIN
    CONTACTTMP := NVL(ContactID,0);

    --Get Consumer Contact List excluding main ContactId
    [SCLIBRARY].CSM_GetConsumerContacts(AddressNumber , CONTACTTMP, ResultData1);
END;



  /

-- #desc					Fetch Consumer minimal information
-- #bl_class				Premier.Consumer.ConsumerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param AddressNumber		Cunsumer Number
-- #param ContactID			First ContactID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetConsumerInfo
(
	AddressNumber   DECIMAL,
	ContactID       DECIMAL,
	LangPref        NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor	
)
AS

BEGIN 
    OPEN ResultData1 FOR
        --Read Consumer Information
        SELECT 
	        PR$9AN8 AS AddressNumber,
	        PCIDLN AS ContactID,
	        PCGNNM AS FirstName, 
	        PCMDNM AS MiddleName, 
	        PCSRNM AS LastName,
	        PCMLNM AS MailingName,
	        PRBADT AS BillingAddressType,
	        PRADD1 AS AddressLine1,
	        PRADD2 AS AddressLine2,
	        PRADD3 AS AddressLine3,
	        PRADD4 AS AddressLine4,
	        PRCTY1 AS City,
	        PRCOUN AS County,
	        PRADDS AS State,
	        PRADDZ AS ZipCode,
	        PRCTR AS Country,
	        PCEMAL AS EmailAddress,
	        PREXR1 AS TaxExplanationCode,
	        PRTXA1 AS TaxArea,
	        PS$9ICF AS IndividualCompanyFlag,
	        PR$9STS AS Status,
	        PRMCU AS BranchPlant
        FROM 
            [SCDATA].FQ670302 PR,
	        [SCDATA].FQ67303 PC,
	        [SCDATA].FQ67107 PS
        WHERE 
                (PR.PR$9AN8 = PC.PC$9AN8)
            AND (PS.PS$9AN8(+) = PR.PR$9AN8)
		    AND (PS.PS$9TYP(+) = 1)
	        AND (PR$9AN8 = AddressNumber)
	        AND (PCIDLN = ContactID);
	        
        --Get Customer Phone List
        [SCLIBRARY].CSM_GetPhones(AddressNumber, ContactID, null,LangPref,ResultData2);
END;
  /

-- #desc					Read Customer read only info
-- #bl_class				Premier.Consumer.ConsumerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param MailingName	    AlphaName
-- #param SearchType		Search Type
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetConsumerList
(
	AddressNumber	IN NUMBER,
	MailingName 	IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1     OUT GLOBALPKG.refcursor
)
AS
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	OPEN ResultData1 FOR
	WITH CTE AS (
		SELECT							  
			PR$9AN8,
			PCIDLN,
			PCGNNM, 
			PCMDNM, 
			PCSRNM,
			PCMLNM,
			PRBADT, 		
			PRADD1, 
			PRADD2, 
			PRADD3,
			PRADD4,
			PRCTY1,
			PRCOUN,
			PRADDS,
			PRADDZ,
			PRCTR,
			PCEMAL,
			PREXR1,
			PRTXA1,
			PR$9STS,
			PRMCU,
			ROW_NUMBER() OVER(ORDER BY PR$9AN8) RNUM
		FROM 
			[SCDATA].FQ670302 PR	/* Consumer Master */
		INNER JOIN [SCDATA].FQ67303 PC /* Contact Master */
			ON PC$9AN8 = PR$9AN8
		WHERE (AddressNumber = 0 OR PR$9AN8 = AddressNumber)/* AddressNumber filter */
			AND (PR$9AN8 <> PR$9PA8)
			AND	(MailingName = '*' OR UPPER(PCMLNM) LIKE '%' || MailingName || '%')	 /* AlphaName filter */
	)
	SELECT 
		PR$9AN8 AS AddressNumber,
		PCIDLN AS ContactID,
		PCGNNM AS FirstName, 
		PCMDNM AS MiddleName, 
		PCSRNM AS LastName,
		PCMLNM AS MailingName,
		PRBADT AS BillingAddressType,
		PRADD1 AS AddressLine1,
		PRADD2 AS AddressLine2,
		PRADD3 AS AddressLine3,
		PRADD4 AS AddressLine4,
		PRCTY1 AS City,
		PRCOUN AS County,
		PRADDS AS State,
		PRADDZ AS ZipCode,
		PRCTR AS Country,
		PCEMAL AS emailAddress,
		PREXR1 AS TaxExplanationCode,
		PRTXA1 AS TaxArea,
		PR$9STS AS Status,
		-1 AS IndividualCompanyFlag,
		PRMCU AS BranchPlant,
		(SELECT COUNT (1) FROM CTE) AS TotalRowCount
	FROM CTE A
    WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
END;
  /
-- #desc					Fetch Contact Additional and Children Information
-- #bl_class	 	 		Premier.Customer.Contact.cs
-- #db_dependencies			PRO_GetContactExtInformation, CSM_GetPhones, PRO_GetCreditCards
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID
-- #param LangPref			LangPref
-- #param ConnectionName	The Parameter envoy is only from Ecommerce (POS and MC send empty)
-- #param IsShipTo			Is ShipTo Y/N, N to retrieve additional information 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetContactChildren
(
	AddressNumber	IN DECIMAL,
	ContactID		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	IsShipTo		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor,
	ResultData3 OUT GLOBALPKG.refcursor,
	ResultData4 OUT GLOBALPKG.refcursor
)
AS
    AddressType DECIMAL := 1;   /* CONSUMER */
BEGIN
	/* Get Contact Extended Information */
	IF (IsShipTo = 'N') THEN
		[SCLIBRARY].PRO_GetContactExtInformation(AddressNumber, AddressType , ContactID, ResultData1);

		/* Get Contact Phone List */
		[SCLIBRARY].CSM_GetPhones(AddressNumber, ContactID, null, LangPref, ResultData2);

		/* Get CreditCard List */
		[SCLIBRARY].PRO_GetCreditCards(AddressNumber , AddressType , null, null, '*', '*', '*', '*', '*', 'ExpDate', 'A', 0, 0, LangPref, ResultData3);

		/* Get BrandMailing List */
		[SCLIBRARY].CSM_GetBrandMailSubscriptions(AddressNumber , AddressType , ContactID,ResultData4);
	ELSE	/* Retieve the phones in the result set 1 */
		/* Get Contact Phone List */
		[SCLIBRARY].CSM_GetPhones(AddressNumber, ContactID, null, LangPref, ResultData1);
	END IF;

END;


  /
-- #desc					Get Non related consumer Shiptos 
-- #bl_class	 	 		Premier.Consumer.NonRelatedShipToList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param MailingName		Mailing Name
-- #param EmailUrl			Email Url
-- #param ZipCode			Zip Code
-- #param PhoneNumber		Phone Number
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown
-- #param TotalRowCount		Paging - Quantity of rows, result of search filter.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetNonRelatedShipToList
(
	AddressNumber   IN NUMBER,
	MailingName		IN NCHAR,
	EmailUrl		IN NVARCHAR2,
	ZipCode			IN NCHAR,
	PhoneNumber		IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
	OPEN ResultData1 FOR
	WITH CTE AS (
		SELECT
			PR$9AN8		AddressNumber,
			PCMLNM		MailingName,
			PCEMAL		EmailUrl,
			PRADD1		AddressLine1,
			PRADD2		AddressLine2,
			PRCTY1		City,
			PRADDS		State,
			PRADDZ		ZipCodePostal,
			PRMCU		BranchPlant,
			PRASN		AdjustmentSchedule,
			PR$9STS		Status,
			ROW_NUMBER() OVER(ORDER BY PCMLNM) RNUM
		FROM
			[SCDATA].FQ670302 T0		
			JOIN [SCDATA].FQ67303 T1
				ON  T0.PR$9AN8 = T1.PC$9AN8
				AND T0.PR$9PA8 = 0
				AND T0.PRBADT IN ('S', 'X')
			LEFT OUTER JOIN [SCDATA].FQ67304 T2
				ON  T2.PP$9AN8 = T0.PR$9AN8
				AND T2.PPIDLN = 0
				AND T2.PPRCK7 = 1 
		WHERE
				(AddressNumber IS NULL OR T0.PR$9AN8 = AddressNumber)
			AND	(MailingName = '*' OR UPPER(T1.PCMLNM) LIKE '%' || MailingName || '%')	-- Contact Name filter
			AND (EmailUrl = '*' OR UPPER(PCEMAL) LIKE '%' || EmailUrl || '%')				-- Email Address filter	
			AND	(ZipCode = '*' OR UPPER(PRADDZ) LIKE  '%' || ZipCode || '%')
			AND	(PhoneNumber = '*' OR UPPER(PPPH1) LIKE '%' || PhoneNumber || '%')
	)
	SELECT
		A.AddressNumber,		
		A.MailingName,			
		A.EmailUrl,			
		A.AddressLine1,		
		A.AddressLine2,		
		A.City,				
		A.State,				
		A.ZipCodePostal,	
		A.BranchPlant,			
		A.AdjustmentSchedule,
		A.Status,
		(SELECT COUNT (1) FROM CTE) AS TotalRowCount
	FROM CTE A 
	WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

END;
  /
-- #desc					Get Non related consumer Shiptos 
-- #bl_class	 	 		Premier.Consumer.NonRelatedShipToList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param FilterTerm		Free Form Search Text
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetNonRelatedShipToSrchLst
(
	FilterTerm		IN  NCHAR,
	PageIndex		IN	INT,
    PageSize		IN	INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
	AddressNumberTMP NUMBER;
BEGIN

	IF(LENGTH(TRIM(TRANSLATE(FilterTerm, '0123456789', ' '))) IS NULL) THEN
			SELECT CAST(NVL(FilterTerm, '0') AS NUMBER) INTO AddressNumberTMP FROM dual;
	END IF;

	IF(FilterTerm = '*') THEN
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				PR$9AN8		AddressNumber,
				PCMLNM		MailingName,
				PCEMAL		EmailUrl,
				PRADD1		AddressLine1,
				PRADD2		AddressLine2,
				PRCTY1		City,
				PRADDS		State,
				PRADDZ		ZipCodePostal,
				PRMCU		BranchPlant,
				PRASN		AdjustmentSchedule,
				PR$9STS		Status,
				ROW_NUMBER() OVER(ORDER BY PCMLNM) RNUM
			FROM
				[SCDATA].FQ670302 T0		
				INNER JOIN [SCDATA].FQ67303 T1
					ON  T0.PR$9AN8 = T1.PC$9AN8
					AND T0.PR$9PA8 = 0
					AND T0.PRBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].FQ67304 T2
					ON  T2.PP$9AN8 = T0.PR$9AN8
					AND T2.PPIDLN = 0
					AND T2.PPRCK7 = 1
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.EmailUrl,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT (1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	ELSE 
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				PR$9AN8		AddressNumber,
				PCMLNM		MailingName,
				PCEMAL		EmailUrl,
				PRADD1		AddressLine1,
				PRADD2		AddressLine2,
				PRCTY1		City,
				PRADDS		State,
				PRADDZ		ZipCodePostal,
				PRMCU		BranchPlant,
				PRASN		AdjustmentSchedule,
				PR$9STS		Status,
				ROW_NUMBER() OVER(ORDER BY PCMLNM) RNUM
			FROM
				[SCDATA].FQ670302 T0		
				INNER JOIN [SCDATA].FQ67303 T1
					ON  T0.PR$9AN8 = T1.PC$9AN8
					AND T0.PR$9PA8 = 0
					AND T0.PRBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].FQ67304 T2
					ON  T2.PP$9AN8 = T0.PR$9AN8
					AND T2.PPIDLN = 0
					AND T2.PPRCK7 = 1 
			WHERE
				(AddressNumberTMP IS NOT NULL AND T0.PR$9AN8 = AddressNumberTMP)-- Address Number filter
				OR (UPPER(T1.PCMLNM) LIKE '%' || FilterTerm || '%'-- Contact Name filter
					OR UPPER(PCEMAL) LIKE '%' || FilterTerm || '%'-- Email Address filter	
					OR PRADDZ LIKE  '%' || FilterTerm || '%'-- Zip Code filter
					OR PPPH1 LIKE '%' || FilterTerm || '%')--Phone filter
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.EmailUrl,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT (1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	END IF;

END;
  /

-- #desc					Read ShipTo info
-- #bl_class				Premier.Consumer.ShipToInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param AddressNumber		AddressNumber
-- #param ContactID			specific contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_GetShipToInfo
(	
	InstallationID  NCHAR,
	AddressNumber	NUMBER,
	ContactID	    NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS
    /* Get the PhoneType value constant*/
	PhoneConstantCmp NCHAR(4);
	PhoneConstantInd NCHAR(4);	
	PhoneCmpInsta     NCHAR(3) := InstallationID;
	PhoneIndInsta     NCHAR(3) := InstallationID;
	
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue('CMP_PHTY01', PhoneCmpInsta, PhoneConstantCmp);
	[SCLIBRARY].CMM_GetConstantValue('IND_PHTY01', PhoneIndInsta, PhoneConstantInd);
	
    OPEN ResultData1 FOR
        SELECT 	
		        PR$9AN8		AS AddressNumber,		-- Address Number
		        PR$9PA8		AS ParentAddressNumber,	-- Parent Address
		        PRALPH		AS AlphaName,			-- Alpha Name
		        PCMLNM		AS MailingName,			-- Mailing Name
		        PRADD1		AS AddressLine1,		-- Address Line 1
		        PRADD2		AS AddressLine2,		-- Address Line 2
		        PRADD3		AS AddressLine3,		-- Address Line 3
		        PRADD4		AS AddressLine4,		-- Address Line 4
		        PRCTY1		AS City,				-- City
		        PRADDS		AS State, 				-- State
		        PRADDZ		AS ZipCode, 			-- Zip Code
		        PRCTR		AS Country,				-- Country
		        PCIDLN		AS ContactID,		    -- Contact ID
		        PCGNNM		AS Firstname,			-- First Name
		        PCMDNM		AS Middlename,			-- Middle Name
		        PCSRNM		AS Lastname,			-- Last Name
		        PRURRF		AS Nickname,			-- Nick Name
		        PS$9POBX	AS PoBoxFlag,			-- PoBoxFlag
		        PRDEL1		AS DeliveryInstructions1,--DeliveryInstructions1
		        PRDEL2		AS DeliveryInstructions2,--DeliveryInstructions2
		        PR$9STS		AS Status,				-- Status
		        CASE 
					WHEN TRIM(PPAR1) IS NULL THEN  PPPH1
					ELSE '(' || TRIM(PPAR1) || ') ' || PPPH1 
				END AS Phone,  
				0 as Selected 
	        FROM 
		        [SCDATA].FQ670302 T0
		        INNER JOIN [SCDATA].FQ67303 T1
					ON T0.PR$9AN8 = T1.PC$9AN8
		        INNER JOIN [SCDATA].FQ67107 PS					/* Profile Extended Information */
					ON PS.PS$9AN8 = T1.PC$9AN8
						AND PS.PS$9TYP = 1 /* CONSUMER */
				LEFT OUTER JOIN [SCDATA].FQ67304
					ON PP$9AN8 = PR$9AN8
					AND PPIDLN = 0
					AND PPPHTP = (CASE WHEN PS$9ICF = 0 THEN PHONECONSTANTIND WHEN PS$9ICF = 1 THEN PHONECONSTANTCMP END)
	        WHERE 
		        PS.PS$9AN8 = AddressNumber 
		        AND PCIDLN = ContactID
				AND ROWNUM < 2;/* Get top 1 when the shipto has 2 or more Phones */
END;
  /
-- #desc					Update Brand Mailing
-- #bl_class	 	 		Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param AddressBookType	AddressBookType
-- #param ContactID			ContactID
-- #param Brand				Brand

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CSM_UpdBrandMailSubscription
(
	AddressNumber			    IN DECIMAL,
	AddressBookType			    IN DECIMAL,
	ContactID					IN DECIMAL,
	Brand						IN NVARCHAR2,
	MailPreference				IN NVARCHAR2,
	EmailPreference			    IN DECIMAL,
	EmailFormat				    IN DECIMAL,
	MailContentPreference		IN NVARCHAR2,
	PartnerMail  				IN NVARCHAR2,
	ShareEmail					IN NVARCHAR2,

	MailingFlag1				IN NVARCHAR2,
	MailingFlag2				IN NVARCHAR2,
	MailingFlag3				IN NVARCHAR2,
	MailingFlag4				IN NVARCHAR2,
	MailingFlag5				IN NVARCHAR2,
	MailingFlag6				IN NVARCHAR2,
	MailingFlag7				IN NVARCHAR2,
	MailingFlag8				IN NVARCHAR2,
	MailingFlag9				IN NVARCHAR2,
	MailingFlag10				IN NVARCHAR2,
	MailingCatCode1			    IN NVARCHAR2,
	MailingCatCode2			    IN NVARCHAR2,
	MailingCatCode3			    IN NVARCHAR2,
	MailingCatCode4			    IN NVARCHAR2,
	MailingCatCode5			    IN NVARCHAR2,
	MailingCatCode6			    IN NVARCHAR2,
	MailingCatCode7			    IN NVARCHAR2,
	MailingCatCode8			    IN NVARCHAR2,
	MailingCatCode9			    IN NVARCHAR2,
	MailingCatCode10			IN NVARCHAR2,

	UserReserveCode1			IN NVARCHAR2,
	UserReserveCode2			IN NVARCHAR2,
	UserReservedReference		IN NVARCHAR2,
	UserReservedNumber			IN DECIMAL,
	UserReservedDate			IN DECIMAL,
	UserReservedAmount			IN DECIMAL,
	UserReservedChar			IN NVARCHAR2,
	UserId						IN NVARCHAR2,
	ProgramId					IN NVARCHAR2,
	DateUpdated				    IN DECIMAL,
	WorkStationId				IN NVARCHAR2,
	TimeLastUpdated			    IN DECIMAL
)
AS
BEGIN
    UPDATE 
	    [SCDATA].FQ671041
    SET
	     PR$9MAIL	=	MailPreference,
	     PR$9EMYN	=	EmailPreference,
	     PR$9EMFP	=	EmailFormat,
	     PR$9MLCP	=	MailContentPreference,
	     PR$9MLP	=	PartnerMail,
	     PR$9EMALS	=	ShareEmail,
	     PR$9MLF1	=	MailingFlag1,
	     PR$9MLF2	=	MailingFlag2,
	     PR$9MLF3	=	MailingFlag3,
	     PR$9MLF4	=	MailingFlag4,
	     PR$9MLF5	=	MailingFlag5,
	     PR$9MLF6	=	MailingFlag6,
	     PR$9MLF7	=	MailingFlag7,
	     PR$9MLF8	=	MailingFlag8,
	     PR$9MLF9	=	MailingFlag9,
	     PR$9MLF10	=	MailingFlag10,
	     PR$9MLC1	=	MailingCatCode1,
	     PR$9MLC2	=	MailingCatCode2,
	     PR$9MLC3	=	MailingCatCode3,
	     PR$9MLC4	=	MailingCatCode4,
	     PR$9MLC5	=	MailingCatCode5,
	     PR$9MLC6	=	MailingCatCode6,
	     PR$9MLC7	=	MailingCatCode7,
	     PR$9MLC8	=	MailingCatCode8,
	     PR$9MLC9	=	MailingCatCode9,
	     PR$9MLC10	=	MailingCatCode10,
	     PRURC1		=	UserReserveCode1,
	     PRURC2		=	UserReserveCode2,
	     PRURRF		=	UserReservedReference,
	     PRURAB		=	UserReservedNumber,
	     PRURDT		=	UserReservedDate,
	     PRURAT		=	UserReservedAmount,
	     PRAURCH1	=	UserReservedChar,
	     PRUSER		=	UserId,
	     PRPID		=	ProgramId,
	     PRUPMJ		=	DateUpdated,
	     PRJOBN		=	WorkStationId,
	     PRUPMT		=	TimeLastUpdated
    	
    WHERE 
		    PR$9AN8  = AddressNumber
        AND PR$9TYP  = AddressBookType
        AND PRIDLN	 = ContactID
        AND TRIM(PR$9SRP1) = TRIM(Brand);
END;
  /

-- #desc					Check Customer status.
-- #bl_class				Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_ExcCheckCustomerStatus
(
	AddressNumber IN decimal,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN

OPEN ResultData1 FOR
SELECT
	AICUSTS AS Status
FROM
	[SCDATA].F03012
WHERE
	    AIAN8 = AddressNumber
	AND	TRIM(AICO) = '00000';

END;
  /

-- #desc						Validate if Customer/Contact Exist.
-- #bl_class					Premier.Customer.CustomerInfo.cs(ValidateCustomerInfoCommand)
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			AddressNumber
-- #param ContactID				Specific contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_ExcValidateCustomerInfo
(
	AddressNumber	IN DECIMAL,
	ContactID		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS

BEGIN

OPEN ResultData1 FOR
	SELECT 
		  WWMLNM AS MailingName,
		  TO_CHAR(SCLIBRARY.CST_GetPrimaryElectAddressFnc(WW.WWAN8,WW.WWIDLN,'E')) AS EmailAddress
	FROM [SCDATA].F0101 AB,	    /* Address Book Master*/
	[SCDATA].F0111 WW			/*Contact Information PS$9ICF*/
	WHERE 
		ABAN8 = AddressNumber
		AND WWAN8 = ABAN8
		AND WWIDLN = ContactID;	
END;




  /

-- #desc						Validate if address Number is Active customer
-- #bl_class					Premier.Customer.ValidateCustomerRecordCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			AddressNumber
-- #param IsBillTo 				Validation type. 1 = Billto, 0 = Shipto
-- #param ValidAddressNumber	Output validation result. B = Valid Billto, S = Valid Shipto, * = Invalid Address Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_ExcValidateCustomerRecord
(
	AddressNumber IN DECIMAL,
	IsBillTo IN DECIMAL, /*1 when is Billto, 0 when is Shipto*/
	ValidAddressNumber OUT	NVARCHAR2
)
AS
	BillToType NVARCHAR2(2);
BEGIN	
	BEGIN
		SELECT DISTINCT AIBADT INTO BillToType
		FROM [SCDATA].F03012
		WHERE
			AIAN8 = AddressNumber
			AND AICO = '00000'
			AND AICUSTS <> '1';  /* is active */
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			BillToType := '';
	END;
	
	IF(IsBillTo = 1 AND BillToType IN ('B','X'))THEN  /* Is BillTo Only and Billto-Shipto(X)*/
		ValidAddressNumber := 'B';			/*Valid Bill to*/
	ELSIF(IsBillTo = 0 AND BillToType IN ('S','X')) THEN /* Is Shito Only and Shipto-Billto(X)*/
		ValidAddressNumber := 'S';			/*Valid Ship to*/
	ELSE
		ValidAddressNumber := '*';			/*Not valid AddressNumber*/
	END IF;
	
END;
 
  /

-- #desc					Return the "Billto(B) and Shillto/Shipto(X)" actives
-- #bl_class				Premier.Customer.CustomerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID    Installation ID
-- #param AddressNumber		AddressNumber
-- #param MailingName		Mailing Name
-- #param State				State
-- #param ZipCode			Zip Code
-- #param Country			Country
-- #param AddressLine1      Address Line 1
-- #param City				City
-- #param SortBy			Sort By Colum name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageIndex			Page Index
-- #param PageSize			Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetBillToList
(
	InstallationID		IN NCHAR,
	AddressNumber		IN NUMBER,
	MailingName 		IN NCHAR,
	State				IN NCHAR,
	ZipCode				IN NCHAR,
	Country				IN NCHAR,
	AddressLine1		IN NCHAR,
    City				IN NCHAR,
	SortBy				IN NVARCHAR2,
	SortDir				IN NVARCHAR2,
	PageIndex			IN INT,
    PageSize			IN INT,
    ResultData1		OUT GLOBALPKG.refcursor
)
AS  
	SQL_DYNAMIC			VARCHAR2(8000);
	WHERE_DYNAMIC		NVARCHAR2(8000) := ' ';
	SORT_DYNAMIC		NVARCHAR2(40);
	INNER_DYNAMIC		NVARCHAR2(500) := ' ';
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	/* Gets the Document Restrictions Parameters */
	CtRestric  VARCHAR2(1);
	CtINID     NCHAR(3) := InstallationID;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);
BEGIN	
	[SCLIBRARY].CMM_GetConstantValue('CT_RESTRIC', CtINID, CtRestric);

	/* Dynamic sort statement */
	SORT_DYNAMIC := CASE SortBy
						WHEN 'AddressNumber' THEN 'A.AIAN8' 
						WHEN 'City' THEN 'UPPER(AL.ALCTY1)' 
						WHEN 'State' THEN 'AL.ALADDS' 
						WHEN 'ZipCode' THEN 'AL.ALADDZ' 
						WHEN 'AddressLine1' THEN 'UPPER(AL.ALADD1)' 
						ELSE 'UPPER(WW.WWMLNM)' END;

	/* Dynamic sort direction statement */
	SORT_DYNAMIC := SORT_DYNAMIC || ' ' || CASE SortDir WHEN 'A' THEN 'ASC' WHEN 'D' THEN 'DESC' ELSE '' END;
	
	/* Dynamic query condition */
	IF (MailingName <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(WW.WWMLNM) LIKE ''%'' || :MailingName || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :MailingName = ''*'') ';
	END IF;
	
	IF (ZipCode <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AL.ALADDZ LIKE ''%'' || :ZipCode || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ZipCode = ''*'') ';
	END IF;
	
	IF (State <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AL.ALADDS = :State ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :State = ''*'') ';
	END IF;
	
	IF (Country <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AL.ALCTR = :Country ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Country = ''*'') ';
	END IF;
	
	IF (AddressNumber <> 0) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.AIAN8 = :AddressNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AddressNumber = 0) ';
	END IF;
	
	IF (AddressLine1 <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(AL.ALADD1) LIKE ''%'' || :AddressLine1 || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AddressLine1 = ''*'') ';
	END IF;
	
	IF (City <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(AL.ALCTY1) LIKE ''%'' || :City || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :City = ''*'') ';
	END IF;
	
	IF (CtRestric = '1') THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
											 ON DR.DR$9INID = ''' || CtINID || N''' 
												AND DR.DR$9CNST = ''CT_RESTRIC''
												AND DR.DRKY = WW.WWTYC ';
	END IF;

	WHERE_DYNAMIC := N' WHERE A.AICO = ''00000'' AND A.AIBADT IN (''X'',''B'') AND A.AICUSTS <> ''1''' || WHERE_DYNAMIC;

	/* Dynamic query */

	SQL_DYNAMIC :=
	N'  WITH PAGING AS 
		(
		   SELECT
				A.AICO      AS Company,
				A.AIAN8     AS AddressNumber,
				WW.WWTYC    AS WWTYC,            
				WW.WWIDLN   AS ContactID,
				WW.WWGNNM   AS FirstName,
				WW.WWMDNM   AS MiddleName,
				WW.WWSRNM   AS LastName,
				WW.WWMLNM   AS MailingName,                   
				AL.ALADD1   AS AddressLine1, 
				AL.ALADD2   AS AddressLine2, 
				AL.ALADD3   AS AddressLine3,
				AL.ALADD4   AS AddressLine4,
				AL.ALADDZ   AS ZipCode,
				AL.ALCTY1   AS City,
				AL.ALADDS   AS State,
				AL.ALCOUN   AS County,
				AL.ALCTR    AS Country,
				A.AITXA1    AS TaxAreaCode,
				A.AIEXR1    AS TaxExplanationCode,
				AB.ABTXCT   AS Certificate,
				AB.ABCM		AS CreditMessage,                 
				A.AIEDF2    AS ItemRestrictionsCode,
				AB.ABMCU    AS BranchPlant,
				COUNT(1) OVER () AS TotalRowCount, 
				ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM
			FROM [SCDATA].F03012 A
			INNER JOIN [SCDATA].F0111 WW
				ON A.AIAN8 = WW.WWAN8
			INNER JOIN [SCDATA].F0101 AB      /*Address Book*/
				ON A.AIAN8 = AB.ABAN8      
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, :CurrentJulianDate)) AL      /*Address*/
				ON AL.ALAN8 = AB.ABAN8 ' 
			|| INNER_DYNAMIC 
			|| WHERE_DYNAMIC 
	|| N' )
	SELECT PAGING.Company, PAGING.AddressNumber, PAGING.ContactID, PAGING.FirstName, PAGING.MiddleName, PAGING.LastName, PAGING.MailingName,
			'''' AS BillingAddressType, PAGING.AddressLine1, PAGING.AddressLine2, PAGING.AddressLine3, PAGING.AddressLine4, PAGING.ZipCode, 
			PAGING.City, PAGING.State, PAGING.County, PAGING.Country, '''' AS AccountRepresentative, 0 AS Carrier, PAGING.TaxAreaCode, 
			PAGING.TaxExplanationCode, PAGING.Certificate, PAGING.CreditMessage, '''' AS Email, '''' AS Url, -1 AS IndividualCompanyFlag, 
			'''' AS modeOfTransport, '''' AS CustomerPORequired, PAGING.ItemRestrictionsCode, PAGING.BranchPlant, 
			0 AS MinimumOrderAmount, 0 AS MaximumOrderAmount, PAGING.TotalRowCount 
	FROM PAGING
	WHERE 
		((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';

	OPEN ResultData1 FOR SQL_DYNAMIC USING CurrentJulianDate, MailingName, ZipCode, State, Country, AddressNumber, AddressLine1, City, PageIndex, PageSize, RowStart, RowEnd;

END;
  /

-- #desc					Fetch Contact Additional and Children Information
-- #bl_class	 	 		Premier.Customer.Contact.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID
-- #param ConnectionName	The Parameter envoy is only from Ecommerce (POS and MC send empty)
-- #param IsShipTo			Is ShipTo Y/N, N to retrieve additional information 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetContactChildren
(
	AddressNumber	IN DECIMAL,
	ContactID		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	IsShipTo		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor,
	ResultData3 OUT GLOBALPKG.refcursor,
	ResultData4 OUT GLOBALPKG.refcursor
)
AS

 AddressType DECIMAL := 0; /* CUSTOMER */

BEGIN

	/* Get Contact Extended Information */
	IF (IsShipTo = 'N') THEN
		[SCLIBRARY].PRO_GetContactExtInformation(AddressNumber, AddressType , ContactID,ResultData1);

		/* Get Contact Phone List */
		[SCLIBRARY].CST_GetPhones(AddressNumber, ContactID, null,LangPref,ResultData2);

		/* Get CreditCard List */
		[SCLIBRARY].PRO_GetCreditCards(AddressNumber , AddressType , null, null, '*', '*', '*', '*', '*', 'ExpDate', 'A', 0, 0, LangPref, ResultData3);

		/* Get Electronic Address */
		[SCLIBRARY].CST_GetElectronicAddress(AddressNumber , ContactID,NULL,NULL,ResultData4);
	ELSE	/* Retieve the phones in the result set 1 */
		/* Get Contact Phone List */
		[SCLIBRARY].CST_GetPhones(AddressNumber, ContactID, null,LangPref,ResultData1);
	END IF;


END;

  /

-- #desc					Fetch Customer Additional and Children information
-- #bl_class	 	 		Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetCustomerChildren
(
	AddressNumber decimal,
	ContactID decimal,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
	AddressType DECIMAL := 0;-- CUSTOMER
	Contact DECIMAL := 0;
BEGIN

	Contact := NVL(ContactID,0);
	
	--Get Customer Contact List excluding main ContactId
	[SCLIBRARY].CST_GetCustomerContacts(AddressNumber , Contact,ResultData1);

END;


  /

-- #desc					Get the companies for the AN8. These are the companies where the Address exists (F03012)
-- #bl_class	 	 		Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param StoreId			Store Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetCustomerCompanyByInst
(
	AddressNumber    DECIMAL,
	StoreId		  IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	SINID      NCHAR(3) := StoreId;
    CompanyConstant		NVARCHAR2(1);
BEGIN
	SINID := StoreId;
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', SINID, CompanyConstant);

	IF CompanyConstant = 'L' THEN
		OPEN ResultData1 FOR
			SELECT 
				AICO AS CompanyID,
				CCNAME AS Description
			FROM
				[SCDATA].F03012
			INNER JOIN [SCDATA].F0010
				ON CCCO = AICO
			WHERE
				AIAN8 = AddressNumber
			AND (AICO IN (SELECT CICO FROM [SCDATA].FQ679912 WHERE CI$9INID = StoreId) OR AICO = '00000');
	ELSE
		OPEN ResultData1 FOR
			SELECT 
				AICO AS CompanyID,
				CCNAME AS Description
			FROM
				[SCDATA].F03012
			INNER JOIN [SCDATA].F0010
				ON CCCO = AICO
			WHERE
				AIAN8 = AddressNumber;
	END IF;
END;
  /

-- #desc					Read Customer read only info
-- #bl_class				Premier.Customer.CustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param Company			Company number.
-- #param ContactID			Specific contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetCustomerInfo
(
	Company			IN NVARCHAR2:= null,
	AddressNumber	IN DECIMAL,
	ContactID		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)

AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	TMPVAR      NVARCHAR2(2);

BEGIN
	TMPVAR := [SCLIBRARY].CST_GetCustomerInfoFnc(Company, AddressNumber);

	OPEN ResultData1 FOR
	SELECT 
		AI.AICO		AS Company,
		AI.AIAN8	AS AddressNumber,
		WW.WWIDLN	AS ContactID,
		WW.WWGNNM	AS FirstName,
		WW.WWMDNM	AS MiddleName,
		WW.WWSRNM	AS LastName,
		WW.WWMLNM	AS MailingName,
		AI.AIBADT	AS BillingAddressType,
		AL.ALADD1	AS AddressLine1, 
		AL.ALADD2	AS AddressLine2, 
		AL.ALADD3	AS AddressLine3,
		AL.ALADD4	AS AddressLine4,
		AL.ALADDZ	AS ZipCode,
		AL.ALCTY1	AS City,
		AL.ALADDS	AS State,
		AL.ALCOUN	AS County,
		AL.ALCTR	AS Country,
		--AS BusinessPhone,
		--AS FaxPhone,
		--AS HomePhone,
		AI.AICMGR	AS AccountRepresentative,
		AI.AICARS	AS Carrier,
		AI.AITXA1	AS TaxAreaCode,
		AI.AIEXR1	AS TaxExplanationCode,
		AB.ABTXCT	AS Certificate,
		AB.ABCM		AS CreditMessage,	
		TO_CHAR(SCLIBRARY.CST_GetPrimaryElectAddressFnc(AddressNumber,ContactID,'E')) AS Email,
		TO_CHAR(SCLIBRARY.CST_GetPrimaryElectAddressFnc(AddressNumber,ContactID,'I')) AS Url,
		PS.PS$9ICF	AS IndividualCompanyFlag,
		''			AS modeOfTransport,
		AI.AIPORQ	AS CustomerPORequired,
		AI.AIEDF2	AS ItemRestrictionsCode,
		AB.ABMCU	AS BranchPlant,
		AI.AIMINO	AS MinimumOrderAmount,
		AI.AIMAXO	AS MaximumOrderAmount
	FROM [SCDATA].F0101 AB	 -- Address Book Master
	INNER JOIN [SCLIBRARY].CST_GETCUSTOMERINFOFNC_A AI 	  -- Customer Master
		ON AI.AIAN8 = AB.ABAN8
	INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL 	  -- Address Book Join
		ON AL.ALAN8 = AB.ABAN8
	INNER JOIN [SCDATA].F0111 WW 	  --Contact Information PS$9ICF
		ON WW.WWAN8 = AB.ABAN8
		AND WW.WWIDLN = ContactID
	LEFT OUTER JOIN [SCDATA].FQ67107 PS 
		ON PS.PS$9AN8 = AB.ABAN8
		AND PS.PS$9TYP = 0
	WHERE 
		AB.ABAN8 = AddressNumber;
	
	--Get Customer Phone List
	[SCLIBRARY].CST_GetPhones(AddressNumber, ContactID, null,LangPref,ResultData2);
	
END;




  /
-- #desc					Read Customer read only list
-- #bl_class				Premier.Customer.CustomerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param MailingName		MailingName
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown
-- #param InstallationID	Installation Id.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetCustomerList
(
	InstallationID  IN NCHAR,
	AddressNumber	IN NUMBER,
	MailingName 	IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);

BEGIN
	
	IF (AddressNumber > 0) THEN
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT							      
				AB.ABAN8,
				WW.WWIDLN,
				WW.WWGNNM	AS FirstName,
				WW.WWMDNM	AS MiddleName,
				WW.WWSRNM	AS LastName,
				WW.WWMLNM	AS MailingName,
				AL.ALADD1	AS AddressLine1, 
				AL.ALADD2	AS AddressLine2, 
				AL.ALADD3	AS AddressLine3,
				AL.ALADD4	AS AddressLine4,
				AL.ALADDZ	AS ZipCode,
				AL.ALCTY1	AS City,
				AL.ALADDS	AS State,
				AL.ALCOUN	AS County,
				AL.ALCTR	AS Country,
				AB.ABTXCT	AS Certificate,
				AB.ABCM		AS CreditMessage,
				AB.ABMCU	AS BranchPlant,
				ROW_NUMBER() OVER(ORDER BY ABAN8) RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM 
				[SCDATA].F0101 AB	-- Address Book Master
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	-- Address Book Join
				ON AL.ALAN8 = AB.ABAN8
			INNER JOIN [SCDATA].F0111 WW	--Contact Information PS$9ICF
				ON WW.WWAN8 = AB.ABAN8	
			WHERE
				ABAN8 = AddressNumber
		)
		SELECT
			'00000'		AS Company,
			ABAN8		AS AddressNumber,
			WWIDLN		AS ContactID,
			A.FirstName,
			A.MiddleName,
			A.LastName,
			A.MailingName,
			''			AS BillingAddressType,
			A.AddressLine1, 
			A.AddressLine2, 
			A.AddressLine3,
			A.AddressLine4,
			A.ZipCode,
			A.City,
			A.State,
			A.County,
			A.Country,
			''			AS AccountRepresentative,
			0			AS Carrier,
			''			AS TaxAreaCode,
			''			AS TaxExplanationCode,
			A.Certificate,
			A.CreditMessage,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(A.ABAN8, A.WWIDLN, N'E') AS Email,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(A.ABAN8, A.WWIDLN, N'I') AS Url,
			-1			AS IndividualCompanyFlag,
			''			AS modeOfTransport,
			''			AS CustomerPORequired,
			' '			AS ItemRestrictionsCode,
			A.BranchPlant,
			0			AS MinimumOrderAmount,
			0			AS MaximumOrderAmount,
			A.TotalRowCount
		FROM 
			CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	ELSE
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT							      
				AB.ABAN8,
				WW.WWIDLN,
				WW.WWGNNM	AS FirstName,
				WW.WWMDNM	AS MiddleName,
				WW.WWSRNM	AS LastName,
				WW.WWMLNM	AS MailingName,
				AL.ALADD1	AS AddressLine1, 
				AL.ALADD2	AS AddressLine2, 
				AL.ALADD3	AS AddressLine3,
				AL.ALADD4	AS AddressLine4,
				AL.ALADDZ	AS ZipCode,
				AL.ALCTY1	AS City,
				AL.ALADDS	AS State,
				AL.ALCOUN	AS County,
				AL.ALCTR	AS Country,
				AB.ABTXCT	AS Certificate,
				AB.ABCM		AS CreditMessage,
				AB.ABMCU	AS BranchPlant,
				ROW_NUMBER() OVER(ORDER BY ABAN8) RNUM,
				COUNT(1) OVER() AS TotalRowCount
			FROM 
				[SCDATA].F0101 AB	-- Address Book Master
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	-- Address Book Join
				ON AL.ALAN8 = AB.ABAN8
			INNER JOIN [SCDATA].F0111 WW	--Contact Information PS$9ICF
				ON WW.WWAN8 = AB.ABAN8	
			WHERE
				UPPER(WW.WWMLNM) LIKE N'%' || MailingName || N'%'
		)
		SELECT
			'00000'		AS Company,
			ABAN8		AS AddressNumber,
			WWIDLN		AS ContactID,
			A.FirstName,
			A.MiddleName,
			A.LastName,
			A.MailingName,
			''			AS BillingAddressType,
			A.AddressLine1, 
			A.AddressLine2, 
			A.AddressLine3,
			A.AddressLine4,
			A.ZipCode,
			A.City,
			A.State,
			A.County,
			A.Country,
			''			AS AccountRepresentative,
			0			AS Carrier,
			''			AS TaxAreaCode,
			''			AS TaxExplanationCode,
			A.Certificate,
			A.CreditMessage,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(A.ABAN8, A.WWIDLN, N'E') AS Email,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(A.ABAN8, A.WWIDLN, N'I') AS Url,
			-1			AS IndividualCompanyFlag,
			''			AS modeOfTransport,
			''			AS CustomerPORequired,
			' '			AS ItemRestrictionsCode,
			A.BranchPlant,
			0			AS MinimumOrderAmount,
			0			AS MaximumOrderAmount,
			A.TotalRowCount
		FROM 
			CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	END IF;
END;
  /

-- #desc					Read Customer Parent Name
-- #bl_class				Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetCustomerParentName
(
	AddressNumber	IN decimal,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS

BEGIN

OPEN ResultData1 FOR
	SELECT 
		TRIM(ABALPH)  AS ParentName
	FROM 
		[SCDATA].F0101
	WHERE
		ABAN8 = AddressNumber;

END;

  /
-- #desc					Read Customer Stadistical Information
-- #bl_class				Premier.Customer.CustomerStatInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

--�#param�StoreId			StoreId
-- #param AddressNumber		AddressNumber
-- #param Company			Company number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetCustomerStatInfo
(
	StoreId	IN NCHAR,
	AddressNumber  IN NUMBER,
	Company		   IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor

)
AS

	CreditCheckLevel	NCHAR(1);
	CreditCheckLevelVal	NCHAR(1);
	AN8					NUMBER := AddressNumber;
	SeparatorFlex		NCHAR(1);
    Exist				INT;
    CustomerCompany		NCHAR(5);
	--------------------------Gets the Organization Structure Type
	OrgStrType	NCHAR(3);
	OrgStrTypeINID	NCHAR(3) := StoreId;	

BEGIN	
	[SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);
    BEGIN
	    SELECT GCSEPF INTO SeparatorFlex
	    FROM [SCDATA].F0009
	    WHERE ROWNUM < 2;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    SeparatorFlex := ' ';
	END;
	 
	--If Separator Flex is equal to 2
	IF(SeparatorFlex = '2') THEN
		 CustomerCompany := Company;
		 
		SELECT count(1) INTO Exist 
		FROM [SCDATA].F03012 
		WHERE AIAN8 = AddressNumber
		AND AICO = CustomerCompany;
		
		IF (Exist=0) THEN
			CustomerCompany := N'00000';
		END	IF;
		
	ELSE
		 CustomerCompany := N'00000'; 
	END IF;
	
	BEGIN
		SELECT AIARTO INTO CreditCheckLevel FROM [SCDATA].F03012 WHERE AIAN8 = AddressNumber AND AICO = CustomerCompany;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		CreditCheckLevel := ' ';
	END;	
	----P   Credit check based on the customer's parent number (P for Parent)
	IF (CreditCheckLevel = 'P') THEN
		BEGIN
			--Set Parent AN8 from F0150
			SELECT MAPA8 INTO AN8 FROM [SCDATA].F0150 WHERE MAAN8 = AddressNumber AND MAOSTP = OrgStrType AND ROWNUM < 2;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			AN8 := AddressNumber;
		END;
		CreditCheckLevelVal := N'P';
	ELSE 
		CreditCheckLevelVal := N'C';
	END	IF;
	
	
OPEN ResultData1 FOR
	SELECT
		AN8 AS AddressNumber,
		CustomerCompany AS Company,
		NVL(A.RTDAG,0) AS DateAgeAsOf , -- or cutoff date
		NVL(A.RTAAP,0) AS AccountBalanceDue,
		NVL(A.RTPDA,0)  AS AccountBalancePastDue,
		B.AIAPRC AS OpenOrders,
		B.AIEXHD AS ExemptCreditHold,
		B.AIACL AS CreditLimit,
		B.AIDAOJ AS DateAccountOpened,
		B.AITRAR AS PaymentTermsCode,
		C.PNPTD AS PaymentsTermsDesc,
		B.AIASTY AS InvoicedYTD,
		B.AISPYE AS InvoicedPriorYear,
		NVL(A.RTCRCD, '') AS CurrencyCode,
		D.CVDL01 AS CurrencyDesc,
		NVL(A.RTDAG,0) AS DateLastUpdated,
		NVL(E.RSALP,0) AS LastPaymentApplied,
		NVL(E.RSDLP,0) AS DateOfLastPayment,
		NVL(A.RTFTR,0) AS AgingFuture,
		NVL(A.RTCURR,0) AS AgingCurrent,
		NVL(A.RTAG1,0) AS AgingCategory1,
		NVL(A.RTAG2,0) AS AgingCategory2,
		NVL(A.RTAG3,0) AS AgingCategory3,
		NVL(A.RTAG4,0) AS AgingCategory4,
		NVL(A.RTAG5,0) AS AgingCategory5,
		NVL(A.RTAG6,0) AS AgingCategory6,
		NVL(A.RTAG7,0) AS AgingCategory7
	FROM [SCDATA].F03012 B
	INNER JOIN [SCDATA].F0014 C --Payment Terms
		ON C.PNPTC = B.AITRAR
	LEFT OUTER JOIN [SCDATA].F03B15 A	--Credit and Cash Management		
		ON A.RTAN8 = B.AIAN8
		AND A.RTCO = Company 
		AND A.RTPART = CreditCheckLevelVal
	LEFT OUTER JOIN [SCDATA].F0013 D
		ON D.CVCRCD = A.RTCRCD
	LEFT OUTER JOIN [SCDATA].F03B16S E --A/R Statistical Summary file
		ON E.RSAN8 = A.RTAN8
		AND E.RSCO = A.RTCO 
		AND E.RSPART = CreditCheckLevelVal
	WHERE
		B.AIAN8 = AN8
		AND B.AICO = CustomerCompany;
END;
  /

-- #desc					Read Customer Info by AddressNumber
-- #bl_class				Premier.Customer.DefaultCustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetDefaultCustomerInfo
(
	AddressNumber	IN decimal,
	ResultData1 OUT GLOBALPKG.refcursor

)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

BEGIN

OPEN ResultData1 FOR
	SELECT 
		AI.AIAN8  AS AddressNumber,
		AB.ABALPH AS AlphaName, 
		AB.ABAT1  AS SearchType,
		AL.ALADD1 AS AddressLine1, 
		AL.ALADD2 AS AddressLine2, 
		AL.ALCTY1 AS City,
		AL.ALADDS AS State,
		AL.ALADDZ AS ZipCode,
		AL.ALCTR  AS Country
		
	FROM 
		[SCDATA].F03012 AI -- Customer Master
	INNER JOIN [SCDATA].F0101 AB	-- Address Book Master
		ON ABAN8 = AIAN8
	INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AI.AIAN8, CurrentJulianDate)) AL -- Address Book Join
		ON AL.ALAN8 = AI.AIAN8
	WHERE 
		(AIAN8 = AddressNumber)-- AddressNumber filter	
		AND AI.AIBADT IN (N'B', N'X')
		AND AI.AICO = N'00000'; -- Company
			
END;
  /
-- #desc					Read Customer read only info
-- #bl_class				Premier.Customer.DefaultCustomerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param AlphaName			AlphaName
-- #param SearchType		Search Type
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetDefaultCustomerList
(
	AddressNumber	IN NUMBER,
	AlphaName 		IN NCHAR,
	SearchType		IN NCHAR,
	PageIndex		IN INT,
    PageSize		IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	SQL_DYNAMIC		VARCHAR2(8000);
	WHERE_DYNAMIC	NVARCHAR2(1000) := ' ';

    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
	
	IF (AddressNumber > 0) THEN
		WHERE_DYNAMIC := N' AIAN8 = :AddressNumber ';
	ELSE
		WHERE_DYNAMIC := N' (1 = 1 OR :AddressNumber = 0) ';
	END IF;

	IF (AlphaName <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(AB.ABALPH) LIKE N''%'' || :AlphaName || ''%'' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AlphaName = ''*'') ';
	END IF;

	IF (SearchType <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AB.ABAT1 = :SearchType ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :SearchType = ''*'') ';
	END IF;

	SQL_DYNAMIC := N'
	WITH CTE AS (
		SELECT 
			AI.AIAN8,
			AB.ABALPH, 
			AB.ABAT1,
			AL.ALADD1, 
			AL.ALADD2, 
			AL.ALCTY1,
			AL.ALADDS,
			AL.ALADDZ,
			AL.ALCTR,
			ROW_NUMBER() OVER(ORDER BY AI.AIAN8) RNUM
		FROM 
			[SCDATA].F03012 AI /* Customer Master*/
		INNER JOIN [SCDATA].F0101 AB	/* Address Book Master*/
			ON ABAN8 = AIAN8
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AI.AIAN8, :CurrentJulianDate)) AL	/* Address Book Join*/
			ON AL.ALAN8 = AI.AIAN8
		WHERE '||WHERE_DYNAMIC||N'
			AND AI.AIBADT IN (N''B'',N''X'')
			AND AI.AICO = N''00000''
	)
	SELECT 
		AIAN8  AS AddressNumber,
		ABALPH AS AlphaName, 
		ABAT1  AS SearchType,
		ALADD1 AS AddressLine1, 
		ALADD2 AS AddressLine2, 
		ALCTY1 AS City,
		ALADDS AS State,
		ALADDZ AS ZipCode,
		ALCTR  AS Country,
		(SELECT COUNT (1) FROM CTE) AS TotalRowCount
    FROM 
        CTE A
    WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))
	';

    OPEN ResultData1 FOR SQL_DYNAMIC USING CurrentJulianDate, AddressNumber, AlphaName, SearchType, PageIndex, PageSize, RowStart, RowEnd;


END;
  /
-- #desc						Get Non related customer Shiptos 
-- #bl_class	 	 			Premier.Customer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param AddressNumber			Address Number
-- #param MailingName			Mailing Name
-- #param EmailUrl				Email Url
-- #param ZipCode				Zip Code
-- #param PhoneNumber			Phone Number
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetNonRelatedShipToList
(
	InstallationID		IN NCHAR,
	AddressNumber		IN NUMBER:= null,
	MailingName			IN NCHAR,
	EmailUrl			IN NVARCHAR2,
	ZipCode				IN NCHAR,
	PhoneNumber			IN NCHAR,
	PageIndex			IN INT,
    PageSize			IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);

	--------------------------Gets the Organization Structure Type
	OrgStrType	NCHAR(3);
	OrgStrTypeINID	NCHAR(3) := InstallationID;	
BEGIN
	[SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

	OPEN ResultData1 FOR
	WITH CTE AS (
		SELECT DISTINCT
			ABAN8  AS AddressNumber,        	-- Address Number
			WWMLNM AS MailingName,				-- Mailing Name
			NVL(EAEMAL,'') AS EmailUrl,
			ALADD1 AS AddressLine1,            	-- Address Line 1
			ALADD2 AS AddressLine2,             -- Address Line 2
			ALCTY1 AS City,                     -- City
			ALADDS AS State,                    -- State
			ALADDZ AS ZipCodePostal,            -- Zip Code
			ABMCU AS BranchPlant,				-- Branch plant
			AIASN AS AdjustmentSchedule,		-- Adjustment Schedule
			AICUSTS AS Status					-- Status
		FROM    
			[SCDATA].F0101
			LEFT OUTER JOIN [SCDATA].F0150 					-- Address Book Join Address Organization Structure
				ON  MAAN8 = ABAN8
				AND MAOSTP = OrgStrType
			INNER JOIN [SCDATA].F0111 							-- Address Book Join Who's Who (Contacts)
				ON  WWAN8 = ABAN8
				AND WWIDLN = 0		   
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL	-- Address Book Join Address File
				ON 	AL.ALAN8 = ABAN8	   
			INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
				ON  AIAN8 = ABAN8
				AND AICO = N'00000'
				AND AIBADT IN (N'S', N'X')
			LEFT OUTER JOIN [SCDATA].F01151
				ON  EAAN8 = ABAN8
				AND EAIDLN = 0
				AND EAETP = N'E'
			LEFT OUTER JOIN [SCDATA].F0115							-- Phone
				ON  WPAN8 = ABAN8
				AND WPIDLN = 0
	WHERE	
		(AddressNumber IS NULL OR ABAN8 = AddressNumber)		-- Address Number filter
		AND (MailingName = '*' OR UPPER(WWMLNM) LIKE '%' || MailingName || '%')	-- Contact Name filter
		AND (EmailUrl = '*' OR UPPER(EAEMAL) LIKE '%' || EmailUrl || '%')			-- Email Address filter	
		AND (ZipCode = '*' OR ALADDZ LIKE  '%' || ZipCode || '%')		-- Zip Code filter
		AND (PhoneNumber = '*' OR WPPH1 LIKE '%' || PhoneNumber || '%')							
		AND MAAN8 IS NULL				
	),
	PAGING AS (
		SELECT
			A.AddressNumber,
			A.MailingName,	
			A.EmailUrl,
			A.AddressLine1, 
			A.AddressLine2, 
			A.City,         
			A.State,        
			A.ZipCodePostal,
			A.BranchPlant,
			A.AdjustmentSchedule,
			A.Status,
			ROW_NUMBER() OVER (ORDER BY A.AddressNumber) AS RNUM 
		FROM 
			CTE A   
	)
	SELECT
		A.AddressNumber,
		A.MailingName,	
		A.EmailUrl,
		A.AddressLine1, 
		A.AddressLine2, 
		A.City,         
		A.State,        
		A.ZipCodePostal,
		A.BranchPlant,
		A.AdjustmentSchedule,
		A.Status,
		(SELECT COUNT(1) FROM PAGING ) AS TotalRowCount
	FROM 
		PAGING A
	WHERE
		((PageIndex = 0 OR PageSize = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

END;
  /
-- #desc						Get Non related customer Shiptos 
-- #bl_class	 	 			Premier.Customer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param FilterTerm			Free Form Search Text
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetNonRelatedShipToSrchLst
(
	InstallationID		IN NCHAR,
	FilterTerm			IN NCHAR,
	PageIndex			IN INT,
    PageSize			IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
	AddressNumberTMP NUMBER;
	--------------------------Gets the Organization Structure Type
	OrgStrType	NCHAR(3);
	OrgStrTypeINID	NCHAR(3) := InstallationID;	
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);
	
	IF(LENGTH(TRIM(TRANSLATE(FilterTerm, '0123456789', ' '))) IS NULL) THEN
		SELECT TO_NUMBER(NVL(FilterTerm, '0')) INTO AddressNumberTMP FROM SYS.DUAL;
	END IF;

	IF(FilterTerm <> '*') THEN 

		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				ABAN8  AS AddressNumber,        	-- Address Number
				WWMLNM AS MailingName,				-- Mailing Name				
				ALADD1 AS AddressLine1,            	-- Address Line 1
				ALADD2 AS AddressLine2,             -- Address Line 2
				ALCTY1 AS City,                     -- City
				ALADDS AS State,                    -- State
				ALADDZ AS ZipCodePostal,            -- Zip Code
				ABMCU AS BranchPlant,				-- Branch plant
				AIASN AS AdjustmentSchedule,		-- Adjustment Schedule
				AICUSTS AS Status,					-- Status
				ROW_NUMBER() OVER(ORDER BY WWMLNM) RNUM
			FROM    
				[SCDATA].F0101
				LEFT OUTER JOIN [SCDATA].F0150 					-- Address Book Join Address Organization Structure
					ON  ABAN8 = MAAN8
					AND MAOSTP = OrgStrType
				INNER JOIN [SCDATA].F0111 							-- Address Book Join Who's Who (Contacts)
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0		   
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL	-- Address Book Join Address File
					ON AL.ALAN8 = ABAN8
				INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
					ON  AIAN8 = ABAN8
					AND AICO = '00000'
					AND AIBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].F01151
					ON  EAAN8 = ABAN8
					AND EAIDLN = 0
					AND EAETP = 'E'
				LEFT OUTER JOIN [SCDATA].F0115							-- Phone
					ON  WPAN8 = ABAN8
					AND WPIDLN = 0
			WHERE	
				((AddressNumberTMP IS NOT NULL AND ABAN8 = AddressNumberTMP)-- Address Number filter
				OR (UPPER(WWMLNM) LIKE '%' || FilterTerm || '%'-- Contact Name filter
					OR UPPER(EAEMAL) LIKE '%' || FilterTerm || '%'-- Email Address filter	
					OR ALADDZ LIKE  '%' || FilterTerm || '%'-- Zip Code filter
					OR WPPH1 LIKE '%' || FilterTerm || '%')--Phone filter					
				)
				AND	MAAN8 IS NULL
			GROUP BY ABAN8, WWMLNM, ALADD1, ALADD2, ALCTY1, ALADDS, ALADDZ, ABMCU, AIASN, AICUSTS
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT (1) FROM CTE) AS TotalRowCount
		FROM
			CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	ELSE
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT
				ABAN8  AS AddressNumber,        	-- Address Number
				WWMLNM AS MailingName,				-- Mailing Name
				ALADD1 AS AddressLine1,            	-- Address Line 1
				ALADD2 AS AddressLine2,             -- Address Line 2
				ALCTY1 AS City,                     -- City
				ALADDS AS State,                    -- State
				ALADDZ AS ZipCodePostal,            -- Zip Code
				ABMCU AS BranchPlant,				-- Branch plant
				AIASN AS AdjustmentSchedule,		-- Adjustment Schedule
				AICUSTS AS Status,					-- Status
				ROW_NUMBER() OVER(ORDER BY WWMLNM) RNUM
			FROM    
				[SCDATA].F0101
				LEFT OUTER JOIN [SCDATA].F0150 					-- Address Book Join Address Organization Structure
					ON  ABAN8 = MAAN8
					AND MAOSTP = OrgStrType
				INNER JOIN [SCDATA].F0111 							-- Address Book Join Who's Who (Contacts)
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0		   
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL							-- Address Book Join Address File
					ON AL.ALAN8 = ABAN8
				INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
					ON  AIAN8 = ABAN8
					AND AICO = '00000'
					AND AIBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].F01151
					ON  EAAN8 = ABAN8
					AND EAIDLN = 0
					AND EAETP = 'E'
			WHERE	
				MAAN8 IS NULL
			GROUP BY ABAN8, WWMLNM, ALADD1, ALADD2, ALCTY1, ALADDS, ALADDZ, ABMCU, AIASN, AICUSTS
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT (1) FROM CTE) AS TotalRowCount
		FROM
			CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	END IF;
END;
  /
-- #desc					Read Punchout Customer read only info
-- #bl_class				Premier.Customer.PunchOutCustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			Store Id
-- #param AddressNumber		Address Number
-- #param DunsNumber		Duns Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetPunchOutCustomerInfo
(
	StoreId				IN NCHAR,
	AddressNumber		IN DECIMAL,
	DunsNumber			IN NVARCHAR2:= null,	
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	-- Get the PhoneType value constant
	 PHONECONSTANTCMP NCHAR(4);	
	 PHONECMPINSTA     NCHAR(3) := StoreId;		 

	/* Dynamic */
	SQL_DYNAMIC			VARCHAR2(4000);
	WHERE_DYNAMIC		NVARCHAR2(1000) := ' ';
BEGIN

	[SCLIBRARY].CMM_GetConstantValue('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);

	IF (AddressNumber > 0) THEN -- AN8 filter
		WHERE_DYNAMIC := N' A.ABAN8 = :AddressNumber ';
	ELSE
		WHERE_DYNAMIC := N' (1 = 1 OR :AddressNumber = 0) ';
	END IF;

	IF (DunsNumber <> '*') THEN -- DUNS Number filter
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.ABDUNS = ''' || DunsNumber || ''' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1) ';
	END IF;

	SQL_DYNAMIC := N'
		SELECT
	        A.ABAN8	 AS AddressNumber,
			A.ABDUNS AS DunsNumber,
			A.ABAN82 AS RelationShipManagerNumber,
			(SELECT ABALPH FROM [SCDATA].F0101 WHERE ABAN8 = A.ABAN82) AS RelationShipManager,
	        A.ABALPH AS AlphaName,
	        (TRIM(NVL(B.ALADD1,'''')) || '' '' || TRIM(NVL(B.ALADD2,'''')) || '' '' || TRIM(NVL(B.ALADD3,'''')) || '' '' || TRIM(NVL(B.ALADD4,''''))) AS AddressLines, 
	        B.ALCTY1 AS City,
	        B.ALADDS AS State,
	        B.ALADDZ AS ZipCode,
	        B.ALCTR  AS Country,           
            PH.Phone AS Phone
        FROM
	        [SCDATA].F0101 A				/* Address Book Master */    
		INNER JOIN [SCDATA].F0111 WW --Contact Information PS$9ICF
			ON WW.WWAN8 = A.ABAN8
        INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc(A.ABAN8, :CurrentJulianDate)) B		/* Address Book Detail */
			ON B.ALAN8 = A.ABAN8
		LEFT JOIN 
			(SELECT ROW_NUMBER() OVER (PARTITION BY WPAN8 ORDER BY WPAN8 DESC) AS RowNumber,
			(CASE  WHEN TRIM(WPAR1) IS NULL THEN  WPPH1 ELSE ''('' || TRIM(WPAR1) || '') '' || WPPH1 END) AS Phone,
			WPAN8, WPIDLN, WPPHTP
			FROM
			[SCDATA].F0115 P		
            WHERE P.WPPHTP = ''' || PHONECONSTANTCMP || '''
			) PH
			ON PH.WPAN8 = A.ABAN8
			AND PH.WPIDLN = 0			
			AND PH.RowNumber = 1 
        WHERE '|| WHERE_DYNAMIC || ' AND WW.WWIDLN = 0';

    OPEN ResultData1 FOR SQL_DYNAMIC USING CurrentJulianDate, AddressNumber;
END;
  /

-- #desc				Read ShipTo info
-- #bl_class			Premier.ShipTo.ShipToInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param AddressNumber	AddressNumber
-- #param Company		Company number.
-- #param ContactID		specific contact ID



CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetShipToInfo
(
	StoreId  IN NCHAR,
	Company		    IN NCHAR,
	AddressNumber	IN NUMBER,
	ContactID		IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	/* Declare variables to compare directly with the column WPPHTP and do not use TRIM() function */
	/* Get the PhoneType value constant */
	 PHONECONSTANTCMP NCHAR(4);
	 PHONECONSTANTIND NCHAR(4);

	 TMPVAR      NVARCHAR2(2);
	 PHONECMPINSTA  NCHAR(3):= StoreId;
	 PHONEINDINSTA  NCHAR(3):= StoreId;
	 
	/* Get Code Length */
     CodeLength INT := 0;

	--------------------------Gets the Organization Structure Type
	OrgStrType	NCHAR(3);
	OrgStrTypeINID	NCHAR(3) := StoreId;	
	
BEGIN
	SELECT DTCDL INTO CodeLength FROM [SCCTL].F0004
	WHERE DTSY = N'H00' AND DTRT = N'TA';
	
	 [SCLIBRARY].CMM_GetConstantValue('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	 [SCLIBRARY].CMM_GetConstantValue('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);
	 [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

	 TMPVAR := [SCLIBRARY].CST_GetCustomerInfoFnc(Company, AddressNumber);
	 
OPEN ResultData1 FOR
	SELECT	
			ABAN8  AS AddressNumber,		-- Address Number
			NVL(MAPA8,ABAN8) AS ParentAddressNumber,	-- Parent Address Number
			WWALPH AS AlphaName,			-- Alpha Name
			WWMLNM AS MailingName,			-- Mailing Name
			ALADD1 AS AddressLine1,			-- Address Line 1
			ALADD2 AS AddressLine2,			-- Address Line 2
			ALADD3 AS AddressLine3,			-- Address Line 3
			ALADD4 AS AddressLine4,			-- Address Line 4
			ALCTY1 AS City,					-- City
			ALADDS AS State,				-- State
			ALADDZ AS ZipCode,				-- Zip Code
			ALCTR  AS Country,				-- Country
			WWIDLN AS ContactId,			-- Contact ID
			WWGNNM AS Firstname,			-- First Name
			WWMDNM AS Middlename,			-- Middle Name
			WWSRNM AS Lastname,				-- Last Name
			WWNICK AS Nickname,				-- Nick Name
			NVL(PS$9POBX,0) AS PoBoxFlag,-- PoBoxFlag
			AIDEL1 AS DeliveryInstructions1,--DeliveryInstructions1
			AIDEL2 AS DeliveryInstructions2,--DeliveryInstructions2
			AICUSTS AS Status,					-- Status Active
			CASE WHEN 
				TRIM(PH.WPAR1) IS NULL THEN PH.WPPH1
				ELSE '(' || TRIM(PH.WPAR1) || ') ' || PH.WPPH1 
			END AS Phone,
			0 as Selected,
			ABALKY  AS AlternateAddressKey

	FROM [SCLIBRARY].CST_GETCUSTOMERINFOFNC_A
		INNER JOIN [SCDATA].F0101		/* Address Book Join Customer Master */
			ON ABAN8 = AIAN8
		INNER JOIN [SCDATA].F0111		/* Address Book Join Who's Who (Contacts) */
			ON WWAN8 = AIAN8
			AND WWIDLN = ContactID
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AIAN8, CurrentJulianDate))		/* Address Book Join Address File  */
			ON	ALAN8 = AIAN8
		LEFT OUTER JOIN [SCDATA].F0150 	/* Address Book Join Address Organization Structure */
			ON MAAN8 = AIAN8
			AND MAOSTP = OrgStrType
		LEFT OUTER JOIN [SCDATA].FQ67107	/* Profile Extended Information */
			ON PS$9AN8 = AIAN8
			AND PS$9TYP = 0 /* CUSTOMER */
		LEFT OUTER JOIN [SCCTL].F0005
			ON PS$9AN8 IS NULL
			AND DRSY = 'H00'
			AND DRRT = 'TA'
			AND SUBSTR(DRKY, 10 - CodeLength + 1, CodeLength) = ABTAXC
		LEFT OUTER JOIN [SCDATA].F0115 PH
			ON WPAN8 = ABAN8
			AND WPIDLN = 0
			AND (WPPHTP = (CASE WHEN PS$9ICF = 0 THEN PHONECONSTANTIND WHEN PS$9ICF = 1 THEN PHONECONSTANTCMP WHEN TRIM(DRSPHD) = '0' THEN PHONECONSTANTIND ELSE PHONECONSTANTCMP END)) 
	WHERE AIAN8 = AddressNumber
		AND ROWNUM < 2;/* Get top 1 when the shipto has 2 or more Phones */
END;
  /
-- #desc						Add a membership alternative kit item
-- #bl_class					Premier.Club.MembershipAltKitItem.cs
-- #db_dependencies				N/A
-- #db_references				N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_AddMembershipAltKitItem
(	
	ItemNumberShortKit		IN DECIMAL,
	BranchPlant				IN NVARCHAR2,
	AddressNumber			IN DECIMAL,
	MembershipID			IN DECIMAL,
	ItemNumber				IN DECIMAL,
	ComponentLineNumber		IN DECIMAL,
	QtyRequiredStandard		IN DECIMAL,
	ChangeQuantity			IN NVARCHAR2,
	UnitOfMeasure			IN NVARCHAR2,
	EffectiveFromDate		IN DECIMAL,
	EffectiveThruDate		IN DECIMAL,
	OptionaItemKit			IN NVARCHAR2,
	LineType				IN NVARCHAR2,
	UnitPrice				IN DECIMAL,
	ChangePrice				IN NVARCHAR2,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedNumber		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserId					IN NVARCHAR2,
	ProgramId				IN NVARCHAR2,
	WorkstationId			IN NVARCHAR2,
	DateUpdated				IN DECIMAL,
	TimeOfDay				IN DECIMAL
)
AS
BEGIN 

	INSERT INTO [SCDATA].FQ67302
	(
		 IXKIT, IXMMCU, IX$9AN8, 
		 IX$9MMID, IXITM, IXCPNT, IXQNTY, 
		 IX$9MQTY, IXUM, IXEFFF, IXEFFT, 
		 IX$9OPTK, IXLNTY, IXPRIC, IX$9MPRC, 
		 IXURCD, IXURDT, IXURAT, IXURRF, 
		 IXURAB, IXUSER, IXPID, IXJOBN, 
		 IXUPMJ, IXTDAY
	)
	VALUES
	(
		 ItemNumberShortKit, BranchPlant, AddressNumber, 
		 MembershipID, ItemNumber, ComponentLineNumber, QtyRequiredStandard, 
		 ChangeQuantity, UnitOfMeasure, EffectiveFromDate, EffectiveThruDate, 
		 OptionaItemKit, LineType, UnitPrice, ChangePrice, 
		 UserReservedCode, UserReservedDate, UserReservedAmount, UserReservedReference, 
		 UserReservedNumber, UserId, ProgramId, WorkstationId, 
		 DateUpdated, TimeOfDay
	);
END;


  /
-- #desc					Checks whether a ship to's state is allowed for join clubs.
-- #bl_class				Premier.Club.BillToMembership.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ShipToId			Ship To number id
-- #param AddressType		AddressType 0 = CUSTOMER, 1 = CONSUMER

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].CLB_ExcCheckShipToForJoinClubs
(
	InstallationID IN NVARCHAR2,
	ShipToId       IN NUMBER, 
	AddressType	   IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS	
	State  NCHAR(3);
	InstallationTemp NVARCHAR2(3) := InstallationID;
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
	
	IF(AddressType = 0)		-- CUSTOMER
	    THEN
	        BEGIN
		        SELECT 
		            A.ALADDS INTO STATE 
		        FROM 
		            [SCDATA].F0101 B
		        INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (B.ABAN8, CurrentJulianDate)) A
					ON A.ALAN8 = B.ABAN8
		        WHERE
					(ABAN8 = ShipToId);
		        EXCEPTION WHEN NO_DATA_FOUND THEN 
		        STATE := NULL;
		    END;
	    ELSE						-- CONSUMER
	        BEGIN	
				SELECT 
					STADDS INTO State 
				FROM	
					[SCDATA].FQ6755A1 
				WHERE  	
					ST$9SHAN = ShipToId;
				EXCEPTION WHEN NO_DATA_FOUND THEN 
				STATE := NULL;	
		     END;	 
	    END IF;
	    
	    OPEN ResultData1 FOR
	    SELECT	
	        COUNT(1)
	    FROM	
	        [SCDATA].FQ675520					
	    WHERE  	
	            (SCADDS = State)
	        AND (SC$9CP1 = N'1');
END;


  /
-- #desc								Reads the Club Attributes
-- #bl_class							Premier.Club.ClubAttributeList.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param ClubId						Club Id to search for

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].CLB_GetClubAttributeList
(
	ClubId      IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	SELECT	A.CASEQ			AS SequenceNo,
			A.CA$9AID		AS AttributeId,
			B.AMDSC1		AS Description1,
			B.AMDSC2		AS Description2,
			A.CA$9DASN		AS AttributeSelection, -- Default Value
			A.CA$9FASN		AS SelectionCriteria, --0 = Default or 1 = Force Selection
			A.CA$9ADRV		AS AttributeDriver,
			B.AM$9DTY		AS AttributeType,
			B.AMSY			AS ProductCode,
			B.AMRT			AS UserDefinedCodes
	FROM	[SCDATA].FQ675911 A
	INNER JOIN [SCDATA].FQ675950 B
		ON  B.AM$9AID = A.CA$9AID
	WHERE 
	    A.CA$9CLUB = ClubId
	    AND A.CADISPO <> N'1' -- 1 = Do not display
	ORDER BY A.CASEQ ASC;
END;

  /
-- #desc						Gets the club list
-- #bl_class					Premier.Club.ClubList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressType			Address book type
-- #param AddressNumber			Address Number
-- #param ClubId				Club Id
-- #param LangPref				Language preference

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].CLB_GetClubList
(	
	AddressType     IN  DECIMAL,
	AddressNumber	IN  NUMBER,
	ClubId			IN  NCHAR,
	LangPref		IN  NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
	PRICINGGROUP NCHAR(8) := '';
	CurrentJulianDate NUMBER(6,0);
BEGIN	
	
	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	
	IF(AddressType = 0)
	THEN
	    BEGIN
	        --CUSTOMER
	        SELECT 
	            AICPGP INTO PRICINGGROUP 
	        FROM 
	            [SCDATA].F03012 
	        WHERE  
	                ROWNUM < 2
	            AND AIAN8 = AddressNumber AND AICO = N'00000';		
	        EXCEPTION WHEN NO_DATA_FOUND THEN 
	        PRICINGGROUP := NULL;
        END;
	ELSE
	    BEGIN
		    --CONSUMER
		    SELECT 
		        PRCPGP INTO PRICINGGROUP 
		    FROM
		        [SCDATA].FQ670302 
		    WHERE 
		            ROWNUM < 2
		        AND PR$9AN8 = AddressNumber;
		    EXCEPTION WHEN NO_DATA_FOUND THEN 
		    PRICINGGROUP := NULL;
		END;
	END IF;
	
    OPEN ResultData1 FOR	
	    SELECT	A.CM$9CLUB		AS ClubId, 
			    A.CMDSC1		AS Description1, 
			    A.CMDSC2		AS Description2,
			    NVL(B.ST$9STAS, '') AS StatusId,
			    [SCLIBRARY].CMM_GetUserDefinedCodeFnc('59','ST',B.ST$9STAS,LangPref) AS StatusDescription
	    FROM	
		    [SCDATA].FQ675910 A
		LEFT OUTER JOIN [SCDATA].FQ675980 B
			ON B.ST$9CLUB = A.CM$9CLUB
	    WHERE
		    (CMASAI <> N'1') -- 1 = Inactive	
		    AND 
		    (
		        (CM$9APTO = 0 OR CM$9APTO IS NULL) OR     -- (0,'' = everyone) 
		        (CM$9APTO = 1 AND CMCPGP = PRICINGGROUP) OR				 -- (1 = CustomerPricingGroup)
		        (CM$9APTO = 2 AND CM$9AN8 = AddressNumber)				 -- (2 = Specific Customer)
		    )
	        AND A.CMEFTB <= CurrentJulianDate
	        AND (ClubId = N'*' OR A.CM$9CLUB = ClubId)
	    ORDER BY A.CMEFTB DESC;
END;
  /
-- #desc						Gets Consumer/Costumer Membership
-- #bl_class					Premier.Club.Membership.cs
-- #db_dependencies				N/A
-- #db_references				CLB_GetMembershipAttributes

-- #param AddressNumber		    Address Number
-- #param MembershipUniqueId	MembershipUniqueId

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].CLB_GetMembership
(
	AddressNumber			IN DECIMAL,
	MembershipUniqueID		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)

AS
BEGIN
    OPEN ResultData1 FOR
	SELECT 
		A.MM$9AN8	AS  AddressNumber, 
		A.MMUKID	AS  MembershipUniqueId,   
		A.MM$9MMID	AS  MembershipId, 
		A.MM$9CLUB	AS  ClubId, 
		A.MM$9STAS	AS  ClubStatusId,
		A.MMDAOJ	AS  DateAccountOpened,  
		A.MMEFTJ	AS  DateEffective,   
		A.MMEXDJ	AS  DateExpired,   
		A.MMEFTE	AS  DateEndingEffective,   
		A.MM$9ARNW	AS  AutoRenewYN,
		A.MMASN		AS  PriceAdjustmentSchedule,   
		A.MMCPGP	AS  GroupCustomerPriceGroup,   
		A.MMDTYS	AS  DutyStatus,   
		A.MMEUSE	AS  EndUse,   
		A.MMLOB		AS  LineOfBusiness,
		A.MMMOT		AS  ModeOfTransportation,   
		A.MMPTC		AS  PaymentTermsCode,    
		A.MMUPC1	AS  PriceCode1,   
		A.MMUPC2	AS  PriceCode2,   
		A.MMUPC3	AS  PriceCode3,
		A.MMDMCT	AS  ContractNumberDistribution,  
		A.MM$9CKIT	AS  ItemNumber, 
		A.MM$9CMCU	AS  BranchPlant, 
		A.MM$9SHAN	AS  ShipToNumber, 
		A.MMIDLN	AS  ShipToContactId,
		A.MMSHPJ	AS  DateShipped,  
		A.MMPDDJ	AS  PromiseDeliveryDate,   
		A.MMDRQJ	AS  DateRequested,   
		A.MMRHLD	AS  DateReleaseHold,   
		A.MM$9RCD	AS  HoldReasonCode,
		A.MMASAI	AS  ActiveInactive,  
		A.MM$9MSDJ	AS  DateMemberSince, 
		A.MM$9HSOT	AS  HighestStatus, 
		A.MMURCD	AS  UserReservedCode,   
		A.MMURDT	AS  UserReservedDate,
		A.MMURAT	AS  UserReservedAmount,  
		A.MMURAB	AS  UserReservedNumber,   
		A.MMURRF	AS  UserReservedReference,   
		A.MMUSER	AS  UserId,   
		A.MMPID		AS  ProgramId,
		A.MMJOBN	AS  WorkstationId,  
		A.MMUPMJ	AS  DateUpdated,   
		A.MMTDAY	AS  TimeOfDay,   
		A.MMAN80	AS  PickUpAddressNumber,   
		A.MM$9PUWC	AS  PickUpFlag, 
		(SELECT 
			IMDSC1
		 FROM 
			[SCDATA].F4101
		 WHERE IMITM = A.MM$9CKIT) as ItemNumberDescription,
		 (SELECT 
			MCDL01
		  FROM 
			[SCDATA].F0006
		  WHERE 
			MCMCU = A.MM$9CMCU) as BranchPlantDescription,
		 (SELECT 
			LTRIM(RTRIM(CNGNNM)) + ' ' + LTRIM(RTRIM(CNSRNM))
		  FROM 
			[SCDATA].FQ6755B0
		  WHERE 
			CN$9SHAN = A.MM$9SHAN 
			AND CNIDLN = A.MMIDLN) as ShipToName,
		B.MSDSC1 MembershipDescription1,  
		B.MSDSC2 MembershipDescription2
	FROM 
		[SCDATA].FQ6759B0 A,
		[SCDATA].FQ6759A0 B
	WHERE 
	    (A.MM$9MMID = B.MS$9MMID)
		AND (AddressNumber IS NULL OR A.MM$9AN8 = AddressNumber)
		AND (MembershipUniqueID IS NULL OR MMUKID = MembershipUniqueID);
	
	--Get Membership Attributes	
	[SCLIBRARY].CLB_GetMembershipAttributes(AddressNumber, MembershipUniqueID, ResultData2);
END;
  /
-- #desc						Get the alternative kit selection list
-- #bl_class					Premier.Club.MembershipAltKitList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param MembershipID			Membership ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetMembershipAltKitList
(
	MembershipID IN DECIMAL,
	ResultData1   OUT   GLOBALPKG.refcursor
)
AS

	CurrentJulianDate INT;
BEGIN
	
		CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	
		OPEN ResultData1 FOR
			SELECT	
				IX.IXKIT	AS ItemNumberShortKit, 
				IX.IXMMCU	AS BranchPlant,
				IX.IXITM	AS ItemNumber,
				IX.IXCPNT	AS ComponentLineNumber,
				IX.IXQNTY	AS QtyRequiredStandard,
				IX.IX$9MQTY	AS ChangeQuantity,
				IX.IXUM		AS UnitOfMeasure,
				IX.IXEFFF	AS EffectiveFromDate,
				IX.IXEFFT	AS EffectiveThruDate,
				IX.IX$9OPTK	AS OptionaItemKit,
				IX.IXLNTY	AS LineType,
				IX.IXPRIC	AS UnitPrice,
				IX.IX$9MPRC	AS ChangePrice
			FROM [SCDATA].FQ67302 IX ,
				 [SCDATA].FQ6759A0 MS
			WHERE	
				MS.MS$9MMID = MembershipID
				AND MS.MS$9CKIT = IX.IXKIT
				AND MS.MS$9CMCU = IX.IXMMCU
				AND	IX.IX$9AN8 = 0
				AND	IX.IXEFFF <= CurrentJulianDate
				AND	IX.IXEFFT >= CurrentJulianDate;
END;
  /
-- #desc						Gets the membership information to send email
-- #bl_class					Premier.Club.MembershipEmailInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Bill to number to search for
-- #param MembershipUniqueID	Unique ID for membership by AN8

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetMembershipEmailInfo
(
	AddressNumber		DECIMAL,
	MembershipUniqueID	DECIMAL,
	ResultData1     OUT   GLOBALPKG.refcursor
)
AS
BEGIN	 
	 
	 OPEN ResultData1 FOR
		SELECT	A.MM$9AN8		AS AddressNumber,  
				A.MMUKID		AS MembershipUniqueId,  
				A.MM$9MMID		AS MembershipId, 
				A.MM$9CLUB		AS ClubId, 
				A.MM$9SHAN		AS ShipToNumber,
				A.MMEXDJ		AS ExpirationDate,
				A.MMEFTJ		AS EffectiveDate,
				B.MSDSC1		AS Description1,
				B.MSDSC2		AS Description2,
				CLB.CMDSC1		AS ClubDescription1,
				CLB.CMDSC2		AS ClubDescription2
		FROM	[SCDATA].FQ6759B0 A,
				[SCDATA].FQ6759A0 B,
				[SCDATA].FQ675910 CLB
		WHERE	
			A.MM$9MMID = B.MS$9MMID
			AND	A.MM$9CLUB = CLB.CM$9CLUB
			AND	A.MM$9AN8 = AddressNumber
			AND	MMUKID = MembershipUniqueID;

END;
  /
-- #desc						Gets the membership info for a given address number
-- #bl_class					Premier.Club.MembershipInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Bill to number to search for
-- #param MembershipUniqueID	Unique ID for membership by AN8

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetMembershipInfo
(
	AddressNumber		DECIMAL,
	MembershipUniqueID	DECIMAL,
	ResultData1     OUT   GLOBALPKG.refcursor
)
AS
BEGIN	 
	 
	 OPEN ResultData1 FOR
		SELECT	
			A.MM$9AN8		AS BillToNumber,  
			A.MMUKID		AS MembershipUniqueId,  
			A.MM$9MMID		AS MembershipId, 
			A.MM$9CLUB		AS ClubId, 
			A.MM$9STAS		AS ClubStatusId,
			A.MM$9SHAN		AS ShipToNumber,
			A.MMEXDJ		AS ExpirationDate,
			A.MMEFTJ		AS EffectiveDate,
			A.MM$9MSDJ		AS DateMemberSince,
			A.MMSHPJ		AS DateShipped,  
			A.MMPDDJ		AS PromiseDeliveryDate,
			A.MMASAI		AS ActiveStatus,
			''				AS ClubStatusDescription,
			B.MSDSC1		AS Description,
			B.MSDSC2		AS Description2,
			''				AS MailingName,
			CLB.CMDSC1		AS ClubDescription1,
			CLB.CMDSC2		AS ClubDescription2
		FROM	[SCDATA].FQ6759B0 A,
				[SCDATA].FQ6759A0 B,
				[SCDATA].FQ675910 CLB
		WHERE	
			A.MM$9MMID = B.MS$9MMID
			AND	A.MM$9CLUB = CLB.CM$9CLUB
			AND	A.MM$9AN8 = AddressNumber
			AND	MMUKID = MembershipUniqueID;

END;
  /
-- #desc						Gets the membership list for a given address number
-- #bl_class					Premier.Club.MembershipList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param BillToNumber			Bill to number to search for
-- #param AddressType			Address Type to search for
-- #param ActiveStatus			Status
-- #param ExpirationStatus		Expiration Status
--								'*'	Any
--								'0'	Valid	(ExpirationDate = 0 OR CurrentJulianDate >= EffectiveDate and CurrentJulianDate < ExpirationDate)
--								'1'	Expired	(ActiveStatus = 0 and ExpirationDate > 0 and CurrentJulianDate >= ExpirationDate)
-- #param LangPref				Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetMembershipList
(
	InstallationID  IN NCHAR,
	BillToNumber    IN NUMBER,
	AddressType     IN NUMBER,
	ActiveStatus	IN NCHAR,
	ExpirationStatus IN NVARCHAR2,
	LangPref		IN NCHAR,
	ResultData1     OUT   GLOBALPKG.refcursor
)
AS
    shiptos  GLOBALPKG.refCursor;
    item   [SCLIBRARY].CLB_GETMEMBERSHIPLIST_A%rowtype;
    
	CurrentJulianDate NUMBER(6,0);

	/* Dynamic */
	SQL_DYNAMIC			VARCHAR2(4000);
	WHERE_DYNAMIC		NVARCHAR2(1000) := ' ';
	
BEGIN

	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].CLB_GETMEMBERSHIPLIST_A';
    
    IF(AddressType = 0) THEN
            [SCLIBRARY].CST_GetShipToList(InstallationID, '00000', BillToNumber, 0, 0, '*', '*', '*', '*', '*', '*', '*', '*', '*', 0, 0, 0, shiptos);
    ELSE
			[SCLIBRARY].CSM_GetShipToList(InstallationID, BillToNumber, 0, 0, '*', '*', '*', '*', '*', '*', '*', '*', '*', 0, 0, 0, shiptos);
    END IF;
    
    BEGIN
        LOOP
            FETCH shiptos INTO item;
                EXIT WHEN shiptos%NOTFOUND;
                  INSERT INTO [SCLIBRARY].CLB_GETMEMBERSHIPLIST_A(AddressNumber, MLNAM)
                  VALUES 
                  (
                      item.AddressNumber,
                      item.MLNAM
                  );
            END LOOP;
        CLOSE shiptos;
    END;
	
	/* Dynamic query conditions */
	IF (BillToNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := N' AND A.MM$9AN8 = :BillToNumber ';
	ELSE
		WHERE_DYNAMIC := N' AND (1 = 1 OR :BillToNumber IS NULL) ';
	END IF;
	IF (ActiveStatus <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.MMASAI = :ActiveStatus ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ActiveStatus = ''*'') ';
	END IF;
	IF (ExpirationStatus <> '*') THEN
		IF (ExpirationStatus = '0') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (A.MMEXDJ = 0 OR (:CurrentJulianDate BETWEEN A.MMEFTJ AND A.MMEXDJ)) ';
		ELSIF(ExpirationStatus = '1') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (A.MMASAI = 0 AND A.MMEXDJ > 0 AND :CurrentJulianDate >= A.MMEXDJ) ';
		END IF;
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :CurrentJulianDate IS NOT NULL) ';
	END IF;

	SQL_DYNAMIC := N'
	    SELECT	
	        A.MM$9AN8		AS BillToNumber,  
		    A.MMUKID		AS MembershipUniqueId,  
		    A.MM$9MMID		AS MembershipId, 
		    A.MM$9CLUB		AS ClubId, 
		    A.MM$9STAS		AS ClubStatusId,
		    A.MM$9SHAN		AS ShipToNumber,
		    A.MMEXDJ		AS ExpirationDate,
		    A.MMEFTJ		AS EffectiveDate,
		    A.MM$9MSDJ		AS DateMemberSince,
			A.MMSHPJ		AS DateShipped,  
			A.MMPDDJ		AS PromiseDeliveryDate,
		    A.MMASAI		AS ActiveStatus,
		    [SCLIBRARY].CMM_GetUserDefinedCodeFnc(''59'',''ST'',A.MM$9STAS, :LangPref) AS ClubStatusDescription,
		    B.MSDSC1		AS Description,
		    B.MSDSC2		AS Description2,
		    S.MLNAM			AS MailingName,
		    CLB.CMDSC1		AS ClubDescription1,
		    CLB.CMDSC2		AS ClubDescription2,
			S.SELECTED		AS Selected
        FROM	
            [SCDATA].FQ6759B0 A,
			[SCDATA].FQ6759A0 B,     
			[SCDATA].FQ67104 X,     
			[SCDATA].FQ675910 CLB,    
			[SCLIBRARY].CLB_GETMEMBERSHIPLIST_A S /*GET MAILING NAME FROM MEMBERSHIP SHIPTO*/
	    WHERE	
	            A.MM$9MMID = B.MS$9MMID
	        AND A.MM$9AN8 = X.AB$9AN8
	        AND X.ABIDLN = 0
		    AND A.MM$9CLUB = CLB.CM$9CLUB
			AND S.AddressNumber =   CASE	WHEN A.MM$9SHAN = 0.0 
											    THEN X.AB$9SHAN 
											    ELSE A.MM$9SHAN 
								    END
		'|| WHERE_DYNAMIC ||'
		ORDER BY A.MMUKID ';

    OPEN ResultData1 FOR SQL_DYNAMIC USING LangPref, BillToNumber, ActiveStatus, CurrentJulianDate;
END;
  /
-- #desc						Gets the membership information
-- #bl_class					Premier.Club.MembershipMasterInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param MembershipID			MembershipID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetMembershipMasterInfo
(
	MembershipID IN DECIMAL,
	ResultData1   OUT   GLOBALPKG.refcursor
)
AS
BEGIN

		OPEN ResultData1 FOR
			SELECT	
				A.MS$9MMID		AS MembershipId, 
				A.MSDSC1		AS Description1,
				A.MSDSC2		AS Description2,
				A.MS$9CLUB		AS ClubId, 
				B.CMDSC1		AS ClubDescription1,
				B.CMDSC2		AS ClubDescription2,
				A.MS$9CKIT		AS ClubKitItemNumber,
				A.MS$9ADV1		AS AttributeDriver1,
				A.MS$9ADV2		AS AttributeDriver2,
				A.MS$9ADV3		AS AttributeDriver3,
				A.MS$9ADV4		AS AttributeDriver4,
				A.MS$9ADV5		AS AttributeDriver5,
				A.MS$9ADV6		AS AttributeDriver6,
				A.MS$9ADV7		AS AttributeDriver7,
				A.MS$9ADV8		AS AttributeDriver8,
				A.MS$9ADV9		AS AttributeDriver9,
				A.MSAC30		AS CategoryCode30, 
				A.MS$9CKOF		AS ClubKitOverrideFlag
			FROM	[SCDATA].FQ6759A0 A, 
					[SCDATA].FQ675910 B
			WHERE 
				    A.MS$9CLUB = B.CM$9CLUB
				AND MS$9MMID = MembershipID;
END;
  /
-- #desc				Read Customer/Consumer MemberShip Pricing Keys
-- #bl_class			Premier.Club.MembershipPricingKeysInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param AddressNumber	AddressNumber Code  search criteria
-- #param UniqueID		Unique Key search criteria


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetMembershipPriceKeysInfo
(
	AddressNumber IN DECIMAL,
	UniqueKeyID IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        MM$9AN8 AS AddressNumber,
	        MMUKID AS UniqueKeyID,
	        MMASN AS PriceAdjustmentScheduleN,
	        MMCPGP AS PricingGroup,
	        MMDTYS AS DutyStatus,
	        MMEUSE AS EndUse,
	        MMLOB AS LineOfBusiness,
	        MMMOT AS ModeOfTransport,
	        MMPTC AS PaymentTerms,
	        MMDMCT AS AgreementNumber,
	        MMUPC1 AS priceCode1,
	        MMUPC2 AS priceCode2,
	        MMUPC3 AS priceCode3
        FROM 
            [SCDATA].FQ6759B0
        WHERE 
	        MM$9AN8 = AddressNumber AND
	        MMUKID = UniqueKeyID;
END;



  /
-- #desc						Loads allowed states for a given membershipid
-- #bl_class					Premier.Club.WineClubStateList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ClubKitItemNumber		Item number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetWineClubKitStateList 
(
	ClubKitItemNumber	IN NUMBER,
	ResultData1   OUT   GLOBALPKG.refcursor
)
AS 
	CodeLength  INT := 0;
	LICENSE NCHAR(3);
BEGIN 

	BEGIN
	    -- Get Code Length
	    SELECT 
	        DTCDL INTO CodeLength 
	    FROM 
	        [SCCTL].F0004
	    WHERE 
	        DTSY = N'00' AND DTRT = N'S';
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        CodeLength := 0;
    END;
    
	BEGIN
	    SELECT	IMSRP1 INTO LICENSE 
	    FROM [SCDATA].F4101 
	    WHERE IMITM = ClubKitItemNumber;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
        LICENSE := NULL;
    END;
			
	IF (TRIM(LICENSE) IS NULL ) THEN
		OPEN ResultData1 FOR
		SELECT	SUBSTR(SCADDS, 0, CodeLength) AS State,
				DRDL01	AS StateDescription
		FROM [SCDATA].FQ675520
		INNER JOIN [SCCTL].F0005
			ON SUBSTR(DRKY, 10 - CodeLength + 1, CodeLength) = SUBSTR(SCADDS, 0, CodeLength)
			AND DRSY = N'00'
			AND	DRRT = N'S'
		WHERE	
			SC$9CP1 = N'1'
		ORDER BY DRDL01;
	ELSE
		OPEN ResultData1 FOR
		SELECT	
			SUBSTR(LDADDS, 0, CodeLength) AS State ,  				-- STATE CODE
			DRDL01 AS StateDescription 				-- STATE DESCRIPTION
		FROM [SCDATA].FQ675511
		INNER JOIN [SCDATA].FQ675520		-- SELECT STATES ALLOWED JOIN CLUB 
			ON SCADDS = LDADDS 
			AND SC$9CP1 = N'1'  			--HARDCODE VALUE
		INNER JOIN [SCCTL].F0005 		-- GET STATES DESCRIPTION
			ON DRSY = N'00'
			AND	DRRT = N'S'
			AND SUBSTR(DRKY, 10 - CodeLength + 1, CodeLength) = SUBSTR(LDADDS, 0, CodeLength)
		WHERE
			LD$9SRP1 = LICENSE
		ORDER BY DRDL01 ASC;
	END IF;
END;


  /
-- #desc						Update the membership
-- #bl_class					Premier.Club.Membership.cs
-- #db_dependencies				N/A
-- #db_references				N/A

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].CLB_UpdMembership 
(
    AddressNumber           IN  DECIMAL, 
	MembershipUniqueId      IN	DECIMAL,   
	MembershipId            IN	DECIMAL, 
	ClubId                  IN 	NVARCHAR2 , 
	ClubStatusId            IN	NVARCHAR2,
	DateAccountOpened       IN	DECIMAL,  
	DateEffective           IN	DECIMAL,   
	DateExpired             IN	DECIMAL,   
	DateEndingEffective     IN	DECIMAL,   
	AutoRenewYN             IN 	NVARCHAR2,
	PriceAdjustmentSchedule IN	NVARCHAR2,   
	GroupCustomerPriceGroup IN	NVARCHAR2,   
	DutyStatus              IN 	NVARCHAR2,   
	EndUse                  IN	NVARCHAR2,	
	LineOfBusiness          IN	NVARCHAR2,
	ModeOfTransportation    IN	NVARCHAR2,
	PaymentTermsCode        IN	NVARCHAR2,
	PriceCode1              IN 	NVARCHAR2,
	PriceCode2              IN	NVARCHAR2,
	PriceCode3              IN	NVARCHAR2,
	ContractNumberDistribution	IN NVARCHAR2,
	ItemNumber              IN	DECIMAL, 
	BranchPlant             IN	NVARCHAR2, 
	ShipToNumber            IN	DECIMAL, 
	ShipToContactId         IN	DECIMAL,
	DateShipped             IN	DECIMAL,  
	PromiseDeliveryDate     IN	DECIMAL,   
	DateRequested           IN	DECIMAL,   
	DateReleaseHold         IN	DECIMAL,   
	HoldReasonCode          IN	NVARCHAR2,
	ActiveInactive          IN	NVARCHAR2,
	DateMemberSince         IN	DECIMAL, 
	HighestStatus           IN	DECIMAL, 
	UserReservedCode        IN	NVARCHAR2,   
	UserReservedDate        IN	DECIMAL,
	UserReservedAmount      IN	DECIMAL,  
	UserReservedNumber      IN	DECIMAL,   
	UserReservedReference   IN	NVARCHAR2,  
	UserId                  IN	NVARCHAR2, 
	ProgramId               IN	NVARCHAR2,
	WorkstationId           IN	NVARCHAR2,
	DateUpdated             IN	DECIMAL,   
	TimeOfDay               IN	DECIMAL,   
	PickUpAddressNumber     IN	DECIMAL,   
	PickUpFlag              IN	DECIMAL
)
AS
BEGIN

	UPDATE 
		[SCDATA].FQ6759B0
	SET 
	   MM$9MMID =	MembershipId,			
       MM$9CLUB =	ClubId,				
       MM$9STAS =	ClubStatusId,		
   	   MMDAOJ =		DateAccountOpened,	
       MMEFTJ =		DateEffective,		
       MMEXDJ =		DateExpired,		
       MMEFTE =		DateEndingEffective,	
       MM$9ARNW =	AutoRenewYN,			
       MMASN =		PriceAdjustmentSchedule,
       MMCPGP =		GroupCustomerPriceGroup,
       MMDTYS =		DutyStatus,			
       MMEUSE =		EndUse,				
       MMLOB =		LineOfBusiness,			
       MMMOT =		ModeOfTransportation,	
       MMPTC =		PaymentTermsCode,		
       MMUPC1 =		PriceCode1,				
       MMUPC2 =		PriceCode2,				
       MMUPC3 =		PriceCode3,			
       MMDMCT =		ContractNumberDistribution,
       MM$9CKIT =	ItemNumber,				
       MM$9CMCU =	BranchPlant,			
       MM$9SHAN =	ShipToNumber,		
       MMIDLN =		ShipToContactId,		
       MMSHPJ =		DateShipped,			
       MMPDDJ =		PromiseDeliveryDate,	
       MMDRQJ =		DateRequested,		
       MMRHLD =		DateReleaseHold,		
       MM$9RCD =	HoldReasonCode,		
       MMASAI =		ActiveInactive,			
       MM$9MSDJ =	DateMemberSince,		
       MM$9HSOT =	HighestStatus,		
       MMURCD =		UserReservedCode,	
       MMURDT =		UserReservedDate,		
       MMURAT =		UserReservedAmount,	
       MMURAB =		UserReservedNumber,	
       MMURRF =		UserReservedReference,	
       MMUSER =		UserId,				
       MMPID =		ProgramId,			
       MMJOBN =		WorkstationId,			
       MMUPMJ =		DateUpdated,			
       MMTDAY =		TimeOfDay,				
       MM$9PUWC =	PickUpAddressNumber,	
       MMAN80 =		PickUpFlag				
    WHERE 
 		MM$9AN8 =	AddressNumber  AND 
 		MMUKID =	MembershipUniqueId;
END;
  /
-- #desc					Creates marketing code Restric
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs

-- #param Installation		Installation Id
-- #param OrderType			Order Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddAllMarketingCodeRestric
(
    MarketingCode			    IN NVARCHAR2,
    UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN Decimal,
	UserReservedAmount			IN Decimal, 
	UserReservedNumber			IN Decimal, 
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,
	WorkStationID				IN NVARCHAR2,
	DateUpdated				    IN Decimal,
	TimeOfDay					IN Decimal
)
AS
	CodeLength INT := 0;
	
BEGIN		

	BEGIN
	SELECT DTCDL into CodeLength FROM [SCCTL].F0004
						WHERE TRIM(DTSY) = '00' AND TRIM(DTRT) = 'DT';
	EXCEPTION WHEN NO_DATA_FOUND THEN 
    CodeLength := 0; 	
	END;				
						
	DELETE  FROM [SCDATA].FQ674210 WHERE TRIM(MR$9MKT) = TRIM(MarketingCode);
	
	INSERT INTO [SCDATA].FQ674210
	(	
		MR$9MKT,--MarketingCode
		MRDCTO, --DocumentType
		MRURCD, --UserReservedCode
		MRURDT, --UserReservedDate
		MRURAT, --UserReservedAmount
		MRURAB, --UserReservedNumber 
		MRURRF, --UserReservedReference
		MRUSER, --UserId
		MRPID,	--ProgramId
		MRJOBN,	--WorkstationId
		MRUPMJ, --DateUpdated
		MRTDAY --TimeOfDay

	)	
	SELECT	
			MarketingCode,
			SUBSTR(A.DRKY , 10 - CodeLength + 1 , CodeLength),
			UserReservedCode,
			UserReservedDate,
			UserReservedAmount,
			UserReservedNumber,
			UserReservedReference,
			UserID,
			ProgramID,
			WorkStationID,
			DateUpdated,
			TimeOfDay
			FROM	[SCCTL].F0005 A
			WHERE	TRIM(A.DRSY) = '00' 
			AND		TRIM(A.DRRT) = 'DT'
	ORDER BY DRKY;

END;

  /
-- #desc					Creates Carrier Tracking 
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CarrierID			Carrier ID
-- #param TrackingURL		Tracking URL
-- #param ProgramID			Program ID
-- #param WorkStationID		WorkStation ID
-- #param UserID			User ID
-- #param DateUpdated		Last Date Update
-- #param TimeLastUpdated	Last Updated time

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddCarrierTracking
(
	CarrierID   IN decimal,
	TrackingURL IN NVARCHAR2,
	UserID      IN NVARCHAR2,
	ProgramID   IN NVARCHAR2,
	WorkStationID IN NVARCHAR2,	
	DateUpdated IN decimal,
	TimeLastUpdated IN decimal
)
AS
BEGIN

	INSERT INTO [SCDATA].FQ67CARS
	(
		CRAN8,  CREMAL,   CRUSER, 
		CRPID,  CRJOBN,   CRUPMJ, 
		CRUPMT
	)
	VALUES
	(
		CarrierID, TrackingURL,  UserID,
		ProgramID, WorkStationID, DateUpdated, 
		TimeLastUpdated
	);
	
END;
  /
-- #desc					Creates marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Constant ID
-- #param BranchPlant		Branch plant
-- #param Description1		Description 1
-- #param Description2		Description 2
-- #param EffectiveDate		Effective date
-- #param ExpirationDate	Expiration date
-- #param UsageMode			Usage Mode flag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddMarketingCode
(
	MarketingCode  IN NVARCHAR2,
	BranchPlant    IN NVARCHAR2,
	Description1   IN NVARCHAR2,
	Description2   IN NVARCHAR2,
	EffectiveDate  IN decimal,
	ExpirationDate IN decimal,
	UsageMode	   IN NVARCHAR2
)
AS

BEGIN

	INSERT INTO [SCDATA].FQ674204
	(
	 MK$9MKT,  MKMCU,   MKDSC1, 
	 MKDSC2,   MKEFTJ,  MKEXDJ, 
	 MK$9WEB
	)
	VALUES
	(
	 MarketingCode, BranchPlant,  Description1, 
	 Description2,  EffectiveDate, ExpirationDate, 
	 UsageMode
	);

END;

  /
-- #desc					Creates marketing code Restric
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddMarketingCodeRestric
(
    MarketingCode			    IN NVARCHAR2,
    DocumentType				IN NVARCHAR2,
    UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN Decimal,
	UserReservedAmount			IN Decimal, 
	UserReservedNumber			IN Decimal, 
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,
	WorkStationID				IN NVARCHAR2,
	DateUpdated					IN Decimal,
	TimeOfDay					IN Decimal
)
AS
BEGIN

	INSERT INTO [SCDATA].FQ674210
	(
		MR$9MKT,--MarketingCode
		MRDCTO, --DocumentType
		MRURCD, --UserReservedCode
		MRURDT, --UserReservedDate
		MRURAT, --UserReservedAmount
		MRURAB, --UserReservedNumber 
		MRURRF, --UserReservedReference
		MRUSER, --UserId
		MRPID,	--ProgramId
		MRJOBN,	--WorkstationId
		MRUPMJ, --DateUpdated
		MRTDAY --TimeOfDay 
	)
	VALUES
	(
			MarketingCode,
			DocumentType,
			UserReservedCode,
			UserReservedDate,
			UserReservedAmount,
			UserReservedNumber,
			UserReservedReference,
			UserID,
			ProgramID,
			WorkStationID,
			DateUpdated,
			TimeOfDay
	);
	
END;
  /
-- #desc					Creates marketing code 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code
-- #param PriceKey			Price Key
-- #param PriceKeyValue		Price Key Value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddMarketingCodeValue
(
	MarketingCode IN NVARCHAR2,
	PriceKey	  IN NVARCHAR2,
	PriceKeyValue IN NVARCHAR2
)
AS

	BEGIN

	INSERT INTO [SCDATA].FQ674205
	(
	 MK$9MKT,  MK$9MCOL,   MK$9MVAL 
	)
	VALUES
	(
	 MarketingCode, PriceKey,  PriceKeyValue
	);
	
END;


  /
-- #desc					Add extended information to regular order.
-- #bl_class				Premier.Commerce.SalesOrderAddExtendedInfoCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param OrderNumber		Order Number
-- #param OrderCompany		Order Company
-- #param OrderType			Order Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddOrderExtendedInfo
(
	OrderNumber	   IN DECIMAL,
    OrderCompany   IN NVARCHAR2,
	OrderType	   IN NVARCHAR2	
)
AS
	IsFreight int;
	CountHeader int;	
BEGIN		

	SELECT COUNT(*) INTO IsFreight FROM [SCDATA].FQ67496 WHERE TRIM(FRKCOO) = TRIM(OrderCompany) AND FRDOCO = OrderNumber AND TRIM(FRDCTO) = TRIM(OrderType);
		
	IF(IsFreight = 0) THEN /* Freight OFF */
		/*HEADER*/
		SELECT COUNT(*) INTO CountHeader FROM [SCDATA].FQ674201 WHERE TRIM(SHKCOO) = TRIM(OrderCompany) AND SHDOCO = OrderNumber AND TRIM(SHDCTO) = TRIM(OrderType);
		
		IF (CountHeader = 0) THEN
			INSERT INTO [SCDATA].FQ674201
			(
				SHKCOO,
				SHDOCO,
				SHDCTO,
				SH$9AN8,
				SHIDLN,
				SH$9TYP,
				SH$9SHAN,
				SHRCK7,
				SH$9WHI,
				SH$9MKT,
				SH$9MMID,
				SH$9PD,
				SH$9DT,
				SHPID,
				SHJOBN,
				SHUSER,
				SHUPMJ,
				SHUPMT
			)
			SELECT      
				SHKCOO	AS SHKCOO,
				SHDOCO	AS SHDOCO,
				SHDCTO	AS SHDCTO,
				SHAN8	AS SH$9AN8,
				0		AS SHIDLN,
				0		AS SH$9TYP,
				SHSHAN	AS SH$9SHAN,
				0		AS SHRCK7,
				' '		AS SH$9WHI,
				' '		AS SH$9MKT,
				0		AS SH$9MMID,
				0		AS SH$9PD,
				0		AS SH$9DT,
				SHPID	AS SHPID,
				SHJOBN	AS SHJOBN,
				SHUSER	AS SHUSER,
				SHUPMJ	AS SHUPMJ,
				SHTDAY	AS SHUPMT
			FROM [SCDATA].F4201
			WHERE SHDOCO = OrderNumber AND 
				  TRIM(SHKCOO) = TRIM(OrderCompany) AND 
				  TRIM(SHDCTO) = TRIM(OrderType);
		END IF;		  

		/*DETAIL*/
		INSERT INTO [SCDATA].FQ674211
		(
			SDKCOO,
			SDDOCO,
			SDDCTO,
			SDLNID,
			SD$9AN8,
			SDIDLN,
			SD$9TYP,
			SD$9SHAN,
			SDRCK7,
			SD$9MKTG,
			SD$9IGPR,
			SDKIT,
			SDMMCU,
			SDCPNT,
			SDKTLN,
			SD$9SLN,
			SD$9FQTY,
			SD$9IID,
			SD$9STS,
			SDQNTY,
			SD$9UOM,
			SDPID,
			SDJOBN,
			SDUSER,
			SDUPMJ,
			SDUPMT
		)
		SELECT
			A.SDKCOO AS SDKCOO,
			A.SDDOCO AS SDDOCO,
			A.SDDCTO AS SDDCTO,
			A.SDLNID AS SDLNID,
			A.SDAN8  AS SD$9AN8,
			0   AS SDIDLN,
			0   AS SD$9TYP,
			A.SDSHAN AS SD$9SHAN,
			0   AS SDRCK7,
			' '   AS SD$9MKTG,
			0   AS SD$9IGPR,
			0   AS SDKIT,
			' '   AS SDMMCU,
			0   AS SDCPNT,
			0   AS SDKTLN,
			0   AS SD$9SLN,
			0   AS SD$9FQTY,
			0   AS SD$9IID,
			'A'   AS SD$9STS,
			0   AS SDQNTY,
			' '   AS SD$9UOM,
			A.SDPID  AS SDPID,
			A.SDJOBN AS SDJOBN,
			A.SDUSER AS SDUSER,
			A.SDUPMJ AS SDUPMJ,
			A.SDTDAY AS SDUPMT
		FROM [SCDATA].F4211 A
		WHERE A.SDDOCO = OrderNumber AND 
			   TRIM(A.SDKCOO) = TRIM(OrderCompany) AND 
			   TRIM(A.SDDCTO) = TRIM(OrderType) AND
			   ((SELECT COUNT(*) FROM [SCDATA].FQ674211 B WHERE TRIM(B.SDKCOO) = TRIM(OrderCompany) AND B.SDDOCO = OrderNumber AND TRIM(B.SDDCTO) = TRIM(OrderType) AND B.SDLNID = A.SDLNID) = 0);	
	END IF;						

END;
 
  /
-- #desc					Creates P4210 Version Rule Detail
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID.
-- #param RuleUniqueID		Rule Unique ID
-- #param LineID			Line ID
-- #param UserDefinedKey	User Defined Key
-- #param BranchPlant		Branch Plant
-- #param AddressNumber		Address Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddP4210VersRuleDetail
(
    InstallationID			IN  NVARCHAR2,
	RuleUniqueID			IN	DECIMAL,
	LineID					OUT	DECIMAL,
	UserDefinedKey			IN	NVARCHAR2,
	BranchPlant				IN	NVARCHAR2,
	AddressNumber			IN	DECIMAL,
	UserReservedNumber		IN	DECIMAL,
	UserReservedAmount		IN	DECIMAL,
	UserReservedCode		IN	NVARCHAR2,
	UserReservedDate		IN	DECIMAL,
	UserReservedReference	IN	NVARCHAR2,
	UserID					IN	NVARCHAR2,
	ProgramID				IN	NVARCHAR2,
	DateUpdated				IN	DECIMAL,
	TimeLastUpdated			IN	DECIMAL,
	WorkStationID			IN	NVARCHAR2
)

AS

BEGIN
	--Get max sequence number
	BEGIN
	    SELECT NVL(MAX(RDLNID),0) + 1 INTO LineID
	    FROM [SCDATA].FQ674231
	    WHERE RDUKID = RuleUniqueID AND RD$9INID = InstallationID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    LineID := NULL;
	END;

	INSERT INTO [SCDATA].FQ674231
	(
		RD$9INID,
		RDUKID,
		RDLNID,
		RDKY,
		RDMCU,
		RD$9AN8,
		RDURAB,
		RDURAT,
		RDURCD,
		RDURDT,
		RDURRF,
		RDUSER,
		RDPID,
		RDUPMJ,
		RDUPMT,
		RDJOBN
	)
	VALUES
	(
		InstallationID,
		RuleUniqueID,
		LineID,
		UserDefinedKey,
		BranchPlant,
		AddressNumber,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);
END;
  /
-- #desc					Creates P4210 Version Rule Header
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param Description		Description
-- #param P4210Version		P4210 Version
-- #param Hierarchy			Hierarchy
-- #param RuleType			Rule Type
-- #param CategoryCode		Category Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddP4210VersRuleHeader
(
	InstallationID			IN	NVARCHAR2,
	RuleUniqueID			OUT	DECIMAL,
	Description				IN	NVARCHAR2,
	P4210Version			IN	NVARCHAR2,
	Hierarchy				IN	DECIMAL,
	RuleType				IN	NVARCHAR2,
	CategoryCode			IN	NVARCHAR2,
	UserReservedNumber		IN	DECIMAL,
	UserReservedAmount		IN	DECIMAL,
	UserReservedCode		IN	NVARCHAR2,
	UserReservedDate		IN	DECIMAL,
	UserReservedReference	IN	NVARCHAR2,
	UserID					IN	NVARCHAR2,
	ProgramID				IN	NVARCHAR2,
	DateUpdated				IN	DECIMAL,
	TimeLastUpdated			IN	DECIMAL,
	WorkStationID			IN	NVARCHAR2
)

AS

BEGIN
	--Get max sequence number
	BEGIN
	    SELECT NVL(MAX(RHUKID),0) + 1 INTO RuleUniqueID
	    FROM [SCDATA].FQ674230;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    RuleUniqueID := NULL;
	END;
	
	INSERT INTO [SCDATA].FQ674230
	(
		RH$9INID,
		RHUKID,
		RHDSC1,
		RHVER,
		RHSEQ,
		RHRUDTP,
		RHRT,
		RHURAB,
		RHURAT,
		RHURCD,
		RHURDT,
		RHURRF,
		RHUSER,
		RHPID,
		RHUPMJ,
		RHUPMT,
		RHJOBN
	)
	VALUES
	(
		InstallationID,
		RuleUniqueID,
		Description,
		P4210Version,
		Hierarchy,
		RuleType,
		CategoryCode,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);	
END;
  /

-- #desc						Validate if PO Customer Reference is already used.
-- #bl_class					Premier.Commerce.CheckOrderCustomerRefCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param LangPref				LangPref
-- #param Description			Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_CheckOrderCustomerRef
(
	AddressNumber	IN NUMBER,
	CustReference	IN NCHAR,
	OrderCompany	IN NCHAR,
	OrderType		IN NCHAR,
	OrderNumber		IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
	WITH CTE AS (
		SELECT SHDOCO FROM [SCDATA].F4201
		WHERE SHAN8 = AddressNumber AND SHVR01 = CustReference
			AND (OrderCompany = '*' OR SHKCOO <> OrderCompany) 
			AND (OrderType = '*' OR SHDCTO <> OrderType) 
			AND (OrderNumber IS NULL  OR SHDOCO <> OrderNumber)
		UNION ALL
		SELECT SHDOCO FROM [SCDATA].F42019
		WHERE SHAN8 = AddressNumber AND SHVR01 = CustReference
			AND (OrderCompany = '*' OR SHKCOO <> OrderCompany) 
			AND (OrderType = '*' OR SHDCTO <> OrderType) 
			AND (OrderNumber IS NULL  OR SHDOCO <> OrderNumber)
	)
	SELECT COUNT(1) AS RefUsed FROM CTE A;
END;



  /
-- #desc						Delete marketing code restric
-- #bl_class					Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param MarketingCode			Marketing Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_DelAllMarketingCodeRestric 
(
    MarketingCode IN NVARCHAR2
 )
AS

BEGIN

	DELETE 	FROM [SCDATA].FQ674210
	WHERE	TRIM(MR$9MKT) = TRIM(MarketingCode);
	
END;
  
  /
-- #desc				Deletes Carrier Tracking 
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param CarrierID		Carrier ID

CREATE or REPLACE PROCEDURE [SCLIBRARY].COM_DelCarrierTracking
(
	CarrierID decimal
)		
AS

BEGIN

	DELETE FROM
			[SCDATA].FQ67CARS
	WHERE 
			CRAN8 = CarrierID; 
			
 END;
  /
-- #desc					Delete marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Constant ID


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_DelMarketingCode
(
	MarketingCode  NVARCHAR2
)
AS

BEGIN

--Delete from FQ674204

DELETE  FROM  
	[SCDATA].FQ674204
WHERE 
	TRIM(MK$9MKT) = TRIM(MarketingCode);

--Delete from FQ674205

DELETE  FROM  
	[SCDATA].FQ674205
WHERE 
	TRIM(MK$9MKT) = TRIM(MarketingCode);

--Delete from FQ674210
DELETE  FROM  
	[SCDATA].FQ674210
WHERE 
	TRIM(MR$9MKT) = TRIM(MarketingCode);

--Delete from FQ674240
[SCLIBRARY].COM_DelMarketingCodeTracking(MarketingCode);

END;

  /
-- #desc						Delete marketing code restric
-- #bl_class					Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param MarketingCode			Marketing Code
-- #param DocumentType			Document Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_DelMarketingCodeRestric 
(
  MarketingCode	NVARCHAR2,
  DocumentType 	NVARCHAR2
  )
AS
BEGIN
	DELETE 	FROM [SCDATA].FQ674210
	WHERE	TRIM(MR$9MKT) = TRIM(MarketingCode)
	AND		TRIM(MRDCTO) =  TRIM(DocumentType);
END;
	
 
  /

-- #desc					Delete marketing code value 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code
-- #param PriceKey			Price Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_DelMarketingCodeValue
(
	MarketingCode  NVARCHAR2,
	PriceKey NVARCHAR2
)
AS

BEGIN

DELETE  FROM  
	[SCDATA].FQ674205
WHERE 
	TRIM(MK$9MKT) = TRIM(MarketingCode) AND
	TRIM(MK$9MCOL) = TRIM(PriceKey);
END;

  /
-- #desc					Delete P4210 Version Rule Detail 
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param LineID			Line ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_DelP4210VersRuleDetail
(
	InstallationID	NVARCHAR2,
	RuleUniqueID	IN DECIMAL,
	LineID			IN DECIMAL
)

AS

BEGIN
	
	DELETE  FROM
		[SCDATA].FQ674231
	WHERE 
		RD$9INID = InstallationID AND
		RDUKID = RuleUniqueID AND
		RDLNID = LineID;
END;
  /
-- #desc					Delete P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		RuleUnique ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_DelP4210VersRuleHeader
(
	InstallationID	IN NVARCHAR2,
	RuleUniqueID	IN DECIMAL
)

AS

BEGIN

	DELETE  FROM
		[SCDATA].FQ674230
	WHERE 
		RH$9INID = InstallationID AND
		RHUKID = RuleUniqueID;

	DELETE  FROM
		[SCDATA].FQ674231
	WHERE 
		RD$9INID = InstallationID AND
		RDUKID = RuleUniqueID;
END;
  /
-- #desc						Load line base price information
-- #bl_class					Premier.Commerce.GetLineBasePriceInfCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param OrderCompany			Company ID
-- #param OrderType				Document Type
-- #param OrderNumber			OrderNumber
-- #param LineNumberID			Line Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_ExcGetLineBasePriceInf
(
	OrderCompany	IN	NVARCHAR2,
	OrderType		IN	NVARCHAR2,
	OrderNumber		IN	DECIMAL,
	LineNumberID	IN	DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
	OPEN ResultData1 FOR 
	SELECT 
		ALUPRC AS BasePrice
	FROM [SCDATA].F4074
	WHERE 
		TRIM(ALKCOO) = TRIM(OrderCompany)
		AND TRIM(ALDCTO) = TRIM(OrderType)
		AND ALDOCO = OrderNumber
		AND ALLNID = LineNumberID
		AND ALOSEQ = 100;

END;
  /
-- #desc							Insert marketing code tracking 
-- #bl_class						Premier.Commerce.MarketingCodeRedemptionCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param MarketingCode				Marketing Code
-- #param InstallationID			Installation ID
-- #param AddressBookType			Address Book Type
-- #param AddressNumber				Address Number
-- #param ContactID					Contact ID
-- #param WebAccountID				WebAccount ID
-- #param TransactionDate			Transaction Date
-- #param OrderCompany				Order Company
-- #param DocumentType				Document Type 
-- #param DocumentNumber			Document Number
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param WorkStationID				WorkStation ID
-- #param DateUpdated				Date Updated 
-- #param TimeLastUpdated			Time Last Updated

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_ExcMKTCodeRedemption
(
	MarketingCode			IN NVARCHAR2,
	InstallationID			IN NVARCHAR2,
	AddressBookType			IN DECIMAL,
	AddressNumber			IN DECIMAL,
	ContactID				IN DECIMAL,
	WebAccountID			IN DECIMAL,
	TransactionDate			IN DECIMAL,
	OrderCompany			IN NVARCHAR2,
	DocumentType			IN NVARCHAR2,
	DocumentNumber			IN DECIMAL,
	UserReservedNumber		IN DECIMAL, 
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,	
	WorkStationID			IN NVARCHAR2,
	DateUpdated				IN DECIMAL,
	TimeLastUpdated			IN DECIMAL
)
AS

BEGIN

	INSERT INTO [SCDATA].FQ674240
	(
	 MK$9MKT, MK$9INID, MK$9TYP, MK$9AN8,
	 MKIDLN, MK$9WAN8, MKTRDJ, MKKCOO,
	 MKDCTO, MKDOCO, MKURAB, MKURAT,
	 MKURCD, MKURDT, MKURRF, MKUSER,
	 MKPID, MKJOBN, MKUPMJ, MKUPMT
	)
	VALUES
	(
	 MarketingCode, InstallationID, AddressBookType, AddressNumber,
	 ContactID, WebAccountID, TransactionDate, OrderCompany,
	 DocumentType, DocumentNumber, UserReservedNumber, UserReservedAmount,
	 UserReservedCode, UserReservedDate, UserReservedReference, UserID,
	 ProgramID, WorkStationID, DateUpdated, TimeLastUpdated
	);

END;

  /
-- #desc						Execute Update EDI Invoice status
-- #bl_class					Premier.Commerce.PunchOutUpdateInvoiceStatusCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- param EDIType				EDI Document Type
-- param EDINumber				EDI Document Number
-- param EDICompany				EDI Document Company

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_ExcUpdPunchInvoiceStatus
(
	EDIType			IN	NVARCHAR2,
	EDINumber		IN	DECIMAL,
	EDICompany		IN	NVARCHAR2
)
AS
BEGIN

	/*EDI Invoice Header (Sales) - Outbound*/
	UPDATE [SCDATA].F47046 
	SET SYEDSP = 'Y'
    WHERE SYEDOC = EDINumber AND SYEDCT = EDIType AND SYEKCO = EDICompany;
	
	/*EDI Invoice Additional Header - Outbound*/
	UPDATE [SCDATA].F470461
	SET S3EDSP = 'Y'
    WHERE S3EDOC = EDINumber AND S3EDCT = EDIType AND S3EKCO = EDICompany;

	/*EDI Invoice Expanded Header (Sales)*/
	UPDATE [SCDATA].F470462
	SET S5EDSP = 'Y'
    WHERE S5EDOC = EDINumber AND S5EDCT = EDIType AND S5EKCO = EDICompany;

	/*EDI Invoice Detail (Sales) - Outbound*/
	UPDATE [SCDATA].F47047
	SET SZEDSP = 'Y'
    WHERE SZEDOC = EDINumber AND SZEDCT = EDIType AND SZEKCO = EDICompany;

	/*EDI Invoice Additional Detail - Outbound*/
	UPDATE [SCDATA].F470471
	SET S4EDSP = 'Y'
    WHERE S4EDOC = EDINumber AND S4EDCT = EDIType AND S4EKCO = EDICompany;

	/*EDI Invoice Expanded Detail (Sales)*/
	UPDATE [SCDATA].F470472
	SET S6EDSP = 'Y'
    WHERE S6EDOC = EDINumber AND S6EDCT = EDIType AND S6EKCO = EDICompany;

	/*EDI Invoice Detail Charges*/
	UPDATE [SCDATA].F470473
	SET S7EDSP = 'Y'
    WHERE S7EDOC = EDINumber AND S7EDCT = EDIType AND S7EKCO = EDICompany;

	/*EDI Order Address Information*/
	UPDATE [SCDATA].F4706
	SET ZAEDSP = 'Y'
    WHERE ZAEDOC = EDINumber AND ZAEDCT = EDIType AND ZAEKCO = EDICompany;

	/*EDI Order Text Lines - Header*/
	UPDATE [SCDATA].F4714
	SET ZTEDSP = 'Y'
    WHERE ZTEDOC = EDINumber AND ZTEDCT = EDIType AND ZTEKCO = EDICompany;

	/*EDI Order Text Lines - Detail*/
	UPDATE [SCDATA].F4715
	SET ZDEDSP = 'Y'
    WHERE ZDEDOC = EDINumber AND ZDEDCT = EDIType AND ZDEKCO = EDICompany;

END;
  /
 -- #desc					Validate Marketing Code
-- #bl_class				Premier.Commerce.MarketingCodeInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param MarketingCode		Marketing Code
-- #param DocumentType		Document Types
-- #param WebEnabledOnly	if On return only webEnabled Marketing Codes
-- #param AddressBookType	Address Book Type
-- #param AddressNumber		Address Number
-- #param WebAccountID		Web Account ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_ExcValidateMKTCodeInfo
(
	InstallationID		IN NVARCHAR2,
	MarketingCode		IN NVARCHAR2,
	DocumentType		IN NVARCHAR2,
	WebEnabledOnly		IN NVARCHAR2,
	AddressBookType		IN DECIMAL,
	AddressNumber		IN DECIMAL,
	WebAccountID		IN DECIMAL,
	ResultData1  OUT GLOBALPKG.refcursor
)
AS
	-- 1 Yes , 0 No
	isRestricted NVARCHAR2(1);
	MarketingCodeCount int;
	MarketingCodeCount2 int;
	-- 0 No, > 0 Yes
	Redeemed DECIMAL := 0;
	-- N WebDisabledMultiUse, S WebDisabledSingleAN8, Y WebEnabledMultiUse, A WebEnabledSingleAN8, W WebEnabledSingleWebAcct
	MKTUsageMode NVARCHAR2(1);
BEGIN
	--Validate if Marketing Code has restricted
	isRestricted := 'N';
	SELECT COUNT(*) INTO MarketingCodeCount FROM [SCDATA].FQ674210 WHERE TRIM(MR$9MKT) = TRIM(MarketingCode);
	IF(MarketingCodeCount > 0) THEN
		SELECT COUNT(*) INTO MarketingCodeCount2 FROM [SCDATA].FQ674210 WHERE TRIM(MR$9MKT) = TRIM(MarketingCode) AND TRIM(MRDCTO) = TRIM(DocumentType);
		IF(MarketingCodeCount2 > 0) THEN
				isRestricted := 'N';
		ELSE
				isRestricted := 'Y';
		END IF;
	ELSE
		isRestricted := 'N';
	END IF;
    
	--Validate if Marketing Code was redeemed
	BEGIN
		SELECT A.MK$9WEB INTO MKTUsageMode FROM [SCDATA].FQ674204 A, [SCDATA].FQ679910 B
		WHERE A.MKMCU = B.BIMCU AND TRIM(A.MK$9MKT) = TRIM(MarketingCode) AND B.BI$9INID = InstallationID;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		MKTUsageMode := NULL;
	END;

	IF(TRIM(MKTUsageMode) = 'S')
	THEN
		SELECT COUNT(*) INTO Redeemed FROM [SCDATA].FQ674240
		WHERE TRIM(MK$9MKT) = TRIM(MarketingCode) AND MK$9INID = InstallationID
		AND MK$9TYP = AddressBookType AND MK$9AN8 = AddressNumber;
	ELSIF(TRIM(MKTUsageMode) = 'A')
	THEN
		SELECT COUNT(*) INTO Redeemed FROM [SCDATA].FQ674240
		WHERE TRIM(MK$9MKT) = TRIM(MarketingCode) AND MK$9INID = InstallationID
		AND MK$9TYP = AddressBookType AND MK$9AN8 = AddressNumber;
	ELSIF(TRIM(MKTUsageMode) = 'W')
	THEN
		SELECT COUNT(*) INTO Redeemed FROM [SCDATA].FQ674240
		WHERE TRIM(MK$9MKT) = TRIM(MarketingCode) AND MK$9INID = InstallationID
		AND MK$9WAN8 = WebAccountID;
	END IF;

    OPEN ResultData1 FOR
	    SELECT   
		A.MK$9MKT	 AS	MarketingCode,
		A.MKDSC1	 AS	Description1,
		A.MKDSC2	 AS	Description2,
		A.MKEFTJ	 AS	EffectiveDate,
		A.MKEXDJ	 AS	ExpirationDate,
		A.MK$9WEB	 AS	UsageMode,
		isRestricted AS	IsRestricted,
		Redeemed	 AS Redeemed
	FROM
		[SCDATA].FQ674204 A,
		[SCDATA].FQ679910 B
	WHERE
		A.MKMCU = B.BIMCU
		AND TRIM(A.MK$9MKT) = TRIM(MarketingCode)
		AND B.BI$9INID = InstallationID
		AND (WebEnabledOnly = '*' OR TRIM(A.MK$9WEB)  <> 'N' OR TRIM(A.MK$9WEB) <> 'S');
 END;
  /
-- #desc						Validate if the order belongs to the address number 
-- #bl_class					Premier.Commerce.ValidateOrderByAddressNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param OrderCompany			Order Company
-- #param OrderType				Document type to search for.
-- #param OrderNumber			Order Number
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_ExcValidateOrderByAddrNo
(
	InstallationID			IN NCHAR,
	OrderCompany			IN NCHAR,
	OrderType				IN NCHAR,
	OrderNumber				IN NUMBER,
	AddressNumber			IN NUMBER,
	AddressBookType			IN NUMBER,
	ValidOrder				OUT INT
)
AS
	/* Gets the Sales Order Document Restrictions */
	SOrderConstant	NCHAR(10) := N'SO_RESTRIC';
	SOrderRestric	NCHAR(1);
	SOrderINID		NCHAR(3) := InstallationID;

	/* Gets Account Receivable Installation Companies constant */
	CompanyRestric	NCHAR(1);
	CompanyINID		NCHAR(3) := InstallationID;



BEGIN	

	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', CompanyINID, CompanyRestric);

	/* Customer */
	IF(AddressBookType = 0)THEN
		WITH CTE AS ( 
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				A.SHCO 
			FROM [SCDATA].F4201 A		/* Sales Order Header */
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND A.SHAN8 = AddressNumber
			UNION ALL
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				A.SHCO 
			FROM [SCDATA].F42019 A	/* Historical Sales Order Header */
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND A.SHAN8 = AddressNumber
		) 
		SELECT 
			COUNT(1) INTO ValidOrder
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DR$9INID = SOrderINID
			AND SOR.DR$9CNST = SOrderConstant
			AND SOR.DRKY = A.SHDCTO 
		LEFT OUTER JOIN [SCDATA].FQ679912 CR /* Extended Sales Order Header */
			ON CR.CI$9INID = CompanyINID
			AND CR.CICO = A.SHCO
		WHERE (SOrderRestric = N'0' OR SOR.DRKY IS NOT NULL)
			AND (CompanyRestric = N'A' OR CR.CICO IS NOT NULL);
	ELSE
		WITH CTE AS ( 
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				A.SHCO 
			FROM [SCDATA].F4201 A		/* Sales Order Header */
			INNER JOIN [SCDATA].FQ674201 B	/* Extended Sales Order Header */
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND B.SH$9AN8 = AddressNumber
				AND B.SH$9TYP = AddressBookType 
			UNION ALL
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				A.SHCO 
			FROM [SCDATA].F42019 A	/* Historical Sales Order Header */
			INNER JOIN [SCDATA].FQ674201 B	/* Extended Sales Order Header */
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND B.SH$9AN8 = AddressNumber
				AND B.SH$9TYP = AddressBookType 
		) 
		SELECT 
			COUNT(1) INTO ValidOrder
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DR$9INID = SOrderINID
			AND SOR.DR$9CNST = SOrderConstant
			AND SOR.DRKY = A.SHDCTO 
		LEFT OUTER JOIN [SCDATA].FQ679912 CR
			ON CR.CI$9INID = CompanyINID
			AND CR.CICO = A.SHCO
		WHERE (SOrderRestric = N'0' OR SOR.DRKY IS NOT NULL)
			AND (CompanyRestric = N'A' OR CR.CICO IS NOT NULL);
	END IF;
	
END;



  /
-- #desc					Get Bank Account List
-- #bl_class				Premier.Commerce.BankAccountInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param BankAccountID		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetBankAccountInfo
(
	 BankAccountID	NCHAR,
	 ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
OPEN ResultData1 FOR
	SELECT  
		T1.GMAID	AS BankAccountID, 
		T1.GMCO		AS Company, 
		T1.GMMCU	AS BranchPlant, 
		T1.GMOBJ	AS ObjectAccount,
		T1.GMSUB	AS Subsidiary, 
		T1.GMDL01	AS Description
	FROM  
		[SCDATA].F0006 T0,
		[SCDATA].F0901 T1			-- Account Master
			
	WHERE  
		(T1.GMAID = BankAccountID)
		AND T0.MCMCU = T1.GMMCU 
		ORDER BY T1.GMMCU ASC,T1.GMOBJ ASC,T1.GMSUB ASC,T1.GMAID,T1.GMDL01 ASC;
	
END;
 
  /

-- #desc					Get Bank Account List
-- #bl_class				Premier.Commerce.BankAccountList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param FilterTerm		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetBankAccountList 
(
	 FilterTerm		IN NCHAR,
	 PageIndex		IN INT,
	 PageSize		IN INT,
     ResultData1 OUT GLOBALPKG.refcursor
  )
AS
	 RowStart INT;
	 RowEnd INT;

BEGIN
	/*Paging */ 
    RowStart := ((PageSize * PageIndex ) - PageSize + 1); 

    RowEnd := (PageIndex * PageSize ); 

	IF ( FilterTerm = '*') THEN
		OPEN ResultData1 FOR
		WITH PAGING AS (
			SELECT  
				T1.GMAID	AS BankAccountID, 
				T1.GMCO		AS Company, 
				T1.GMMCU	AS BranchPlant, 
				T1.GMOBJ	AS ObjectAccount,
				T1.GMSUB	AS Subsidiary, 
				T1.GMDL01	AS Description,
				ROW_NUMBER() OVER(ORDER BY T1.GMMCU ASC, T1.GMOBJ ASC, T1.GMSUB ASC, T1.GMAID, T1.GMDL01 ASC) AS RNUM 
			FROM  
				[SCDATA].F0901 T1 
			INNER JOIN [SCDATA].F0006 T0 		-- Business Unit
				ON T0.MCMCU = T1.GMMCU 			-- Account Master
		)
		SELECT 
			BankAccountID, Company, BranchPlant, ObjectAccount, Subsidiary, Description, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING
			WHERE ((PageIndex  = 0 OR PageSize = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
	ELSE
		OPEN ResultData1 FOR
		WITH PAGING AS (
			SELECT  
				T1.GMAID	AS BankAccountID, 
				T1.GMCO		AS Company, 
				T1.GMMCU	AS BranchPlant, 
				T1.GMOBJ	AS ObjectAccount,
				T1.GMSUB	AS Subsidiary, 
				T1.GMDL01	AS Description,
				ROW_NUMBER() OVER(ORDER BY T1.GMMCU ASC, T1.GMOBJ ASC, T1.GMSUB ASC, T1.GMAID, T1.GMDL01 ASC) AS RNUM 
			FROM  
				[SCDATA].F0901 T1				/* Account Master */
			INNER JOIN [SCDATA].F0006 T0 		/* Business Unit */
				ON T0.MCMCU = T1.GMMCU 			
			WHERE  
				(T1.GMAID LIKE '%' || FilterTerm || '%'
				OR T1.GMOBJ LIKE '%' || FilterTerm || '%'
				OR T1.GMSUB LIKE '%' || FilterTerm || '%'
				OR T1.GMDL01 LIKE '%' || FilterTerm || '%')
		)
		SELECT 
			BankAccountID, Company, BranchPlant, ObjectAccount, Subsidiary, Description, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING
			WHERE ((PageIndex  = 0 OR PageSize = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

	END IF;
END;
 
  
  /

-- #desc						Load Carrier Freight Method List
-- #bl_class					Premier.Commerce.FreightMethodList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CostCenter			N/A
-- #param ShipmentPriority		N/A
-- #param CustomerGroupKeyID 	N/A
-- #param CountryFreight 		N/A
-- #param ZipCodePostal			N/A
-- #param LangPref				N/A


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCarrierFreightMethods
(
	CostCenter	  			IN NVARCHAR2,
	ShipmentPriority 		IN decimal,
	CustomerGroupKeyID		IN decimal,
	CountryFreight 		    IN NVARCHAR2,
    ZipCodePostal 			IN NVARCHAR2,
    LangPref				IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
 )
AS
 BEGIN
 OPEN ResultData1 FOR
    SELECT
	   ZNMCU	AS CostCenter, 
	   ZNCARS	AS Carrier, 
	   ABALPH	AS CarrierAlphaName,
	   ZN$9CTR	AS CountryFreight, 
	   ZN$9ZTO	AS PostalCodeFrom, 
	   ZN$9ZTH	AS PostalCodeThru, 
	   ZNMOT	AS ModeOfTransport, 
	   ZN$9SHPR AS ShipmentPriority, 
	   ZN$9CID	AS CustomerGroupKeyID, 
	   ZN$9ZON	AS ShipToZone, 
	   ZN$9STAT AS Status, 
	   ZN$9DEF	AS DefaultMode, 
	   ZN$9FF	AS FixedFeeRate, 
	   ZN$9MIN	AS MinimunChargeRate, 
	   ZN$9SUR	AS Surcharge, 
	   ZN$9PBXA AS PostalBoxAllowed, 
	   ZN$9CODA AS CODAllowed, 
	   (CASE CA$9WEBA 
		WHEN 0 then ZN$9WEBA
		ELSE 	CA$9WEBA
		END
	   )		AS WebAllowed,
	   ZN$9COD	AS CODSurcharge, 
	   ZN$9WCFLG AS WeightControlFlag, 
	   ZN$9WLMT AS WeightLimit, 
	   NVL(IS$9CRESP,0) AS InsuranceResponsability,
	   NVL(IS$9DIV,0) AS InsuranceDivider,
	   NVL(IS$9IFACT,0) AS InsuranceFactor,
	   ZN$9CST	AS CostType, 
	   ZNURCD	AS UserReservedCode, 
	   ZNURDT	AS UserReservedDate, 
	   ZNURAT	AS UserReservedAmount, 
	   ZNURAB	AS UserReservedNumber, 
	   ZNURRF	AS UserReservedReference, 
	   ZNUSER	AS UserId, 
	   ZNJOBN	AS WorkStationId, 
	   ZNPID	AS ProgramId, 
	   ZNUPMJ	AS DateUpdated, 
	   ZNTDAY	AS TimeOfDay,
	   [SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','TM',ZNMOT,LangPref) AS MOTDescription
    FROM [SCDATA].FQ67491 A, 
		 [SCDATA].FQ67493 B,
		 [SCDATA].F0101 C, 
		 [SCDATA].FQ67492 D
		 
	WHERE   (TRIM(CostCenter) IS NULL OR RTRIM(B.ZNMCU) = RTRIM(CostCenter)) 
       AND  (ShipmentPriority IS NULL OR B.ZN$9SHPR = ShipmentPriority)
       AND  (TRIM(ZipCodePostal) IS NULL OR TRIM(B.ZN$9ZTH) >= TRIM(ZipCodePostal)) 
       AND  (TRIM(ZipCodePostal) IS NULL OR TRIM(B.ZN$9ZTO) <= TRIM(ZipCodePostal)) 
       AND  (CustomerGroupKeyID IS NULL OR B.ZN$9CID = CustomerGroupKeyID)
       AND  (TRIM(CountryFreight) IS NULL OR TRIM(B.ZN$9CTR) = TRIM(CountryFreight)) 
       AND  B.ZN$9STAT = 0 
       AND  A.CA$9STAT = 0 
       AND	A.CAMCU = B.ZNMCU 
	   AND  A.CACARS=B.ZNCARS
	   AND  A.CACARS = C.ABAN8
	   AND  A.CACARS = D.ISCARS(+);
END;
  /

-- #desc						Load Carrier List
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param SearchType			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCarrierList
(
	SearchType IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS

BEGIN
OPEN ResultData1 FOR
	SELECT	
		ABAN8 AS AddressNumber,
		ABALPH AS AlphaName
	FROM 
		-- Address Book Master Table
		[SCDATA].F0101
	WHERE          
		-- Search Type filter
		TRIM(ABAT1) = TRIM(SearchType);

END;



  /

-- #desc						Load Carrier List
-- #bl_class					Premier.Commerce.CarrierList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param SearchType			Search Type for Carriers
-- #param AddressNumber			Optional specific Carrier Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCarriers
(
	SearchType    IN NVARCHAR2,
	AddressNumber IN decimal:= null,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
OPEN ResultData1 FOR
	SELECT	
		ABAN8 AS AddressNumber,
		ABALPH AS AlphaName
	FROM 
		-- Address Book Master Table
		[SCDATA].F0101
	WHERE          
		-- Search Type filter
		TRIM(ABAT1) = TRIM(SearchType)
		-- Optional specific Carrier Number
		AND (AddressNumber IS NULL OR ABAN8 = AddressNumber);
    
END;



  /

-- #desc				Get Carrier Tracking
-- #bl_class			Premier.Commerce.CarrierTracking.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param CarrierID		Carrier Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCarrierTracking
(
	CarrierID   IN decimal,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
OPEN ResultData1 FOR

	SELECT	
		A.CRAN8 AS CarrierID,
		NVL(B.ABALPH,'') AS AlphaName,
		A.CREMAL AS TrackingURL
	FROM 
	 [SCDATA].FQ67CARS A,
	 [SCDATA].F0101 B 
	WHERE
		A.CRAN8 = CarrierID
		AND 
		A.CRAN8 = B.ABAN8(+);
END;	
  /

-- #desc				Load Carrier Tracking List
-- #bl_class			Premier.Commerce.CarrierTrackingList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCarrierTrackingList
(
ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
OPEN ResultData1 FOR

SELECT	
	A.CRAN8 AS CarrierID,
	B.ABALPH AS AlphaName
FROM
	[SCDATA].FQ67CARS A,
	[SCDATA].F0101 B -- Address Book Master Table
	WHERE
	A.CRAN8 = B.ABAN8;
	
END;
  /

-- #desc							Returns the last OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.SalesOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param OrdersToDisplay			Quantity of rows to be returned
-- #param Company					Company if is 00000 is '*'
-- #param LastDays					Filter orders in last N days

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetConsumerRecentSOList
(
	InstallationID			    IN NCHAR,
	AddressNumber			    IN NUMBER,
	OrdersToDisplay			    IN INT,
	Company       				IN NCHAR,
	LastDays					IN INT,
	ResultData1 OUT GLOBALPKG.refcursor     
)
AS
		CompanyTemp NCHAR(5) := Company;
		
		SOrderRestric	NVARCHAR2(256);
		SOrderINID		NCHAR(3):=InstallationID;
		SOrderConstant	NCHAR(10):= 'SO_RESTRIC';
		-- Gets the Sales Order Document Restrictions	
		FreightLineType	NCHAR(2);
		FreightINID	    NCHAR(3):=InstallationID;
		-- Gets the Freight Line Type
		DiscountLineType	NCHAR(2);
		DiscountINID	    NCHAR(3):=InstallationID;
		DiscountConstant	NCHAR(10):='DISCOUNTLN';
		-- Gets the Surcharge Line Type
		SurchargeLineType	NCHAR(2);
		SurchargeINID	    NCHAR(3):=InstallationID;
		SurchargeConstant	NCHAR(10):='SURCHARGLN';
		-- Gets the Order History Status
		OpenLnStatus			NCHAR(3);
		OpenLnStatusINID	    NCHAR(3):=InstallationID;
		OpenLnStatusConstant	NCHAR(10) := 'ORD_SCHOPN';
		
		CompanyConstant		NVARCHAR2(256);
		ConstantInstallation NCHAR(3):= InstallationID;

		/* Filter last N days */
		DateFrom NUMBER(6,0);
		DateTo NUMBER(6,0);
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);
	[SCLIBRARY].CMM_GetConstantValue('FREIGHTLN', FreightINID, FreightLineType);
	[SCLIBRARY].CMM_GetConstantValue(DiscountConstant, DiscountINID, DiscountLineType);
	[SCLIBRARY].CMM_GetConstantValue(SurchargeConstant, SurchargeINID, SurchargeLineType);
	[SCLIBRARY].CMM_GetConstantValue(OpenLnStatusConstant, OpenLnStatusINID, OpenLnStatus);
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
	
	/* Filter last N days */
	DateFrom := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - LastDays);
	DateTo := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	IF (CompanyTemp = '00000') THEN 
		CompanyTemp := '*';
	END IF;

	IF(LastDays = 0) THEN 
		OPEN ResultData1 FOR
		SELECT 
			A.SHDOCO			AS OrderNumber, 
			A.SHDCTO			AS OrderType,
			A.SHKCOO			AS OrderCompany, 
			A.SHTRDJ			AS OrderDate,
			A.SHCRCD			AS CurrencyCode,
			A.SHCRRM			AS CurrencyMode,
			A.SHHOLD			AS HoldCode,
			A.SHOTOT			AS ProductTotal,
			A.SHFAP			AS ProductTotalForeign,
			[SCLIBRARY].COM_GetSalesOrderStatusFnc (A.SHDOCO, A.SHKCOO, A.SHDCTO, OpenLnStatus, FreightLineType, DiscountLineType, SurchargeLineType) as OrderStatus,
			TB.CCCRCD	    AS BaseCurrencyCode
		FROM TABLE(SCLIBRARY.COM_GetRecentDocExtendedFnc (CompanyTemp, SOrderINID, SOrderConstant, ConstantInstallation, CompanyConstant, SOrderRestric, AddressNumber) ) A
			INNER JOIN [SCDATA].F0010 TB
				ON TB.CCCO = A.SHKCOO
		WHERE
			(RNUM BETWEEN 1 AND OrdersToDisplay)
		ORDER BY RNUM;
	ELSE	
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.SHDOCO,
				A.SHDCTO,
				A.SHKCOO,
				A.SHTRDJ			AS OrderDate,
				A.SHCRCD			AS CurrencyCode,
				A.SHCRRM			AS CurrencyMode,
				A.SHHOLD			AS HoldCode,
				A.SHOTOT			AS ProductTotal,
				A.SHFAP			AS ProductTotalForeign,
				TB.CCCRCD	    AS BaseCurrencyCode,
				ROW_NUMBER() OVER (ORDER BY A.SHTRDJ DESC, A.SHDOCO DESC) AS RNUM
			FROM TABLE(SCLIBRARY.COM_GetRecentDocExtendedFnc (CompanyTemp, SOrderINID, SOrderConstant, ConstantInstallation, CompanyConstant, SOrderRestric, AddressNumber) ) A
				INNER JOIN [SCDATA].F0010 TB
					ON TB.CCCO = A.SHKCOO
			WHERE SHTRDJ BETWEEN DateFrom AND DateTo /* Filter last N days */
		)
		SELECT 
			A.SHDOCO			AS OrderNumber, 
			A.SHDCTO			AS OrderType,
			A.SHKCOO			AS OrderCompany, 
			A.OrderDate,
			A.CurrencyCode,
			A.CurrencyMode,
			A.HoldCode,
			A.ProductTotal,
			A.ProductTotalForeign,
			[SCLIBRARY].COM_GetSalesOrderStatusFnc (A.SHDOCO, A.SHKCOO, A.SHDCTO, OpenLnStatus, FreightLineType, DiscountLineType, SurchargeLineType) as OrderStatus,
			A.BaseCurrencyCode
		FROM CTE A
		WHERE
			(RNUM BETWEEN 1 AND OrdersToDisplay)
		ORDER BY RNUM;
	END IF;
END;
  /

-- #desc							Cross Segment Rules List
-- #bl_class						Premier.Commerce.GetCrossSegmentRulesList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param ItemNumberList			N/A
-- #param BranchPlantList			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCrossSegmentRulesList
(
	ItemNumberList 		IN NVARCHAR2,
	BranchPlantList	    IN NVARCHAR2,
	ResultData1  OUT GLOBALPKG.refcursor
)

AS
	TMPVAR      		NCHAR(1);
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

BEGIN

	TMPVAR := [SCLIBRARY].CMM_AssocItemBranchPlantFnc(ItemNumberList, BranchPlantList, N',');
	
	OPEN ResultData1 FOR
	WITH ALLRULES AS 
	(
		SELECT 
			KUATO# AS RuleNumber,
			CIF.BranchPlant AS ItemBranchPlant,
			KUKIT AS ItemNumber,
			KUATOS AS SequenceNumber,
			KUAO AS Operation,
			(CASE WHEN(KUAO5B = '(') THEN 1 ELSE 0 END) AS IsBeginBracket,
			KUPEL AS SegmentNumber,
			KUCEL AS RightSegmentNumber,
			KUVALR AS Relationship,
			(CASE KUATIV
				WHEN N'' THEN 'SEGMENT'
				WHEN N'*ALL' THEN 'ALL'
				WHEN N'*VALUES' THEN 'VALUES'
				WHEN N'*BLANK' THEN 'BLANK'
				WHEN N'*RANGE' THEN 'RANGE'
				WHEN N'*ZERO' THEN 'ZERO'
				WHEN N'*REQ' THEN 'REQUIRED'
				WHEN N'*OPT' THEN 'OPTIONAL'
				ELSE 'SIMPLE'
			END) AS ValueType,
			(CASE 
				WHEN (KUATIV = '*VALUES')
					THEN
					( 
						SELECT RTRIM (XMLAGG (XMLELEMENT (e, TRIM(RV.KXSGVL) || ',')).EXTRACT ('//text()'), ',')
						FROM [SCDATA].F32921 RV
						WHERE RV.KXKIT = R.KUKIT
							AND RV.KXMCU = R.KUMCU
							AND RV.KXATO# = R.KUATO#
							AND RV.KXATOS = R.KUATOS
						GROUP BY RV.KXKIT, RV.KXMCU, RV.KXATO#, RV.KXATOS
					)
				WHEN (KUATIV = '*RANGE')
					THEN
					(
						SELECT TO_CHAR(TRIM(RR.KVSRFV) ||  '-' || TRIM(RR.KVSRTV))
						FROM [SCDATA].F32922 RR
						WHERE RR.KVKIT = R.KUKIT
							AND RR.KVMCU = R.KUMCU
							AND RR.KVATO# = R.KUATO#
							AND RR.KVATOS = R.KUATOS
					)
				ELSE 
					TO_CHAR(R.KUATIV) END
			) AS SegmentValues,
			(CASE WHEN(KUAO5E = ')') THEN 1 ELSE 0 END) AS IsEndBracket,
			KUPSIN AS LeftItemNumber,
			KUEMCU AS LeftBranchPlant,
			KUITMRIGHT AS RightItemNumber,
			KUMCURIGHT AS RightBranchPlant
		FROM 
			[SCDATA].F3292 R
		INNER JOIN [SCLIBRARY].COM_GETCROSSSEGMENTRULESLIST_A CIF
			ON CIF.ItemNumber = KUKIT
			AND CIF.BranchPlant = KUMCU
			AND ((CurrentJulianDate BETWEEN KUEFFF AND KUEFFT) OR (KUEFFF = 0 AND KUEFFT = 0 AND KUAO IN ('I','A','O')))
	),

	RULESFILTERED AS
	(
		SELECT A.RuleNumber, A.ItemNumber
		FROM ALLRULES A
		WHERE Operation IN ('*', 'E')
		GROUP BY A.RuleNumber, A.ItemNumber
	)

	SELECT R.RuleNumber || R.ItemNumber AS RuleID,
		   R.ItemNumber,
		   R.ItemBranchPlant,
		   R.SequenceNumber,
		   R.Operation,
		   R.IsBeginBracket,
		   R.SegmentNumber,
		   R.RightSegmentNumber,
		   R.Relationship,
		   R.ValueType,
		   R.SegmentValues,
		   R.IsEndBracket,
		   R.LeftItemNumber,
		   R.LeftBranchPlant,
		   R.RightItemNumber,
		   R.RightBranchPlant
	FROM 
		ALLRULES R
	INNER JOIN RULESFILTERED F
		ON F.RuleNumber = R.RuleNumber
		AND F.ItemNumber = R.ItemNumber
	ORDER BY RuleID, R.SequenceNumber;

END;
	
  /

-- #desc							Returns the last OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.SalesOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param OrdersToDisplay			Quantity of rows to be returned
-- #param Company					Company if is 00000 is '*'
-- #param LastDays					Filter orders in last N days

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCustomerRecentSOList
(
	InstallationID			    IN NCHAR,
	AddressNumber			    IN NUMBER,
	OrdersToDisplay			    IN INT,
	Company       				IN NCHAR,
	LastDays					IN INT,
	ResultData1 OUT GLOBALPKG.refcursor     
)
AS
		CompanyTemp NCHAR(5) := Company;
		
		SOrderRestric	NVARCHAR2(256);
		SOrderINID		NCHAR(3):=InstallationID;
		SOrderConstant	NCHAR(10):= 'SO_RESTRIC';
		-- Gets the Sales Order Document Restrictions	
		FreightLineType	NCHAR(2);
		FreightINID	    NCHAR(3):=InstallationID;
		-- Gets the Discount Line Type
		DiscountLineType	NCHAR(2);
		DiscountINID	    NCHAR(3):=InstallationID;
		DiscountConstant	NCHAR(10):='DISCOUNTLN';
		-- Gets the Surcharge Line Type
		SurchargeLineType	NCHAR(2);
		SurchargeINID	    NCHAR(3):=InstallationID;
		SurchargeConstant	NCHAR(10):='SURCHARGLN';
		-- Gets the Order History Status
		OpenLnStatus			NCHAR(3);
		OpenLnStatusINID	    NCHAR(3):=InstallationID;
		OpenLnStatusConstant	NCHAR(10) := 'ORD_SCHOPN';
		
		CompanyConstant		NVARCHAR2(256);
		ConstantInstallation NCHAR(3):= InstallationID;

		/* Filter last N days */
		DateFrom NUMBER(6,0);
		DateTo NUMBER(6,0);
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);
	[SCLIBRARY].CMM_GetConstantValue('FREIGHTLN', FreightINID, FreightLineType);
	[SCLIBRARY].CMM_GetConstantValue(DiscountConstant, DiscountINID, DiscountLineType);
	[SCLIBRARY].CMM_GetConstantValue(SurchargeConstant, SurchargeINID, SurchargeLineType);
	[SCLIBRARY].CMM_GetConstantValue(OpenLnStatusConstant, OpenLnStatusINID, OpenLnStatus);
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
	
	/* Filter last N days */
	DateFrom := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - LastDays);
	DateTo := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	IF (CompanyTemp = '00000') THEN 
		CompanyTemp := '*';
	END IF;

	IF(LastDays = 0) THEN
		OPEN ResultData1 FOR
		SELECT 
			A.SHDOCO		AS OrderNumber, 
			A.SHDCTO		AS OrderType,
			A.SHKCOO		AS OrderCompany, 
			A.SHTRDJ		AS OrderDate,
			A.SHCRCD		AS CurrencyCode,
			A.SHCRRM		AS CurrencyMode,
			A.SHHOLD		AS HoldCode,
			A.SHOTOT		AS ProductTotal,
			A.SHFAP			AS ProductTotalForeign,
			[SCLIBRARY].COM_GetSalesOrderStatusFnc (A.SHDOCO, A.SHKCOO, A.SHDCTO, OpenLnStatus, FreightLineType, DiscountLineType, SurchargeLineType) as OrderStatus,
			TB.CCCRCD	    AS BaseCurrencyCode					
		FROM TABLE(SCLIBRARY.COM_GetRecentDocsFnc (CompanyTemp, SOrderINID, SOrderConstant, ConstantInstallation, CompanyConstant, SOrderRestric, AddressNumber) ) A
			INNER JOIN [SCDATA].F0010 TB
				ON TB.CCCO = A.SHKCOO
		WHERE
			(RNUM BETWEEN 1 AND OrdersToDisplay)
		ORDER BY RNUM;
	ELSE
		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT 
				A.SHDOCO,
				A.SHDCTO,
				A.SHKCOO, 
				A.SHTRDJ		AS OrderDate,
				A.SHCRCD		AS CurrencyCode,
				A.SHCRRM		AS CurrencyMode,
				A.SHHOLD		AS HoldCode,
				A.SHOTOT		AS ProductTotal,
				A.SHFAP			AS ProductTotalForeign,
				TB.CCCRCD	    AS BaseCurrencyCode,
				ROW_NUMBER() OVER (ORDER BY A.SHTRDJ DESC, A.SHDOCO DESC) AS RNUM
			FROM TABLE(SCLIBRARY.COM_GetRecentDocsFnc (CompanyTemp, SOrderINID, SOrderConstant, ConstantInstallation, CompanyConstant, SOrderRestric, AddressNumber) ) A
				INNER JOIN [SCDATA].F0010 TB
					ON TB.CCCO = A.SHKCOO
			WHERE A.SHTRDJ BETWEEN DateFrom AND DateTo /* Filter last N days */
		)
		SELECT 
			A.SHDOCO		AS OrderNumber, 
			A.SHDCTO		AS OrderType,
			A.SHKCOO		AS OrderCompany, 
			A.OrderDate, 
			A.CurrencyCode,
			A.CurrencyMode,
			A.HoldCode,
			A.ProductTotal,
			A.ProductTotalForeign,
			[SCLIBRARY].COM_GetSalesOrderStatusFnc (A.SHDOCO, A.SHKCOO, A.SHDCTO, OpenLnStatus, FreightLineType, DiscountLineType, SurchargeLineType) as OrderStatus,
			A.BaseCurrencyCode					
		FROM CTE A
		WHERE
			(RNUM BETWEEN 1 AND OrdersToDisplay)
		ORDER BY RNUM;
	END IF;
END;
  /
-- #desc					Load the Configured Segments List for an Invoice related order items
-- #bl_class				N/A	
-- #db_dependencies			N/A
-- #db_references			COM_GetInvoiceOrderDetail

-- #param OrderCompany		Company id
-- #param OrderType			Document type
-- #param OrderNumber		Order number
-- #param LangPref			Lang Pref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvConfiguredLineList
(
	InvoiceCompany  IN	NCHAR,
	InvoiceType     IN	NCHAR,
	InvoiceNumber	IN	NUMBER,
	/* The parameter LangPref was removed by performance improvements, 
	 * the descriptions of the configured segments will be returned in 
	 * the default JDE language */
	ResultData1	    IN OUT GLOBALPKG.refcursor
)
AS
BEGIN

	OPEN ResultData1 FOR
	WITH TMP_ORDERS AS(
		SELECT 
			A.SDKCOO,
			A.SDDCTO,
			A.SDDOCO,		
			A.SDKCO,
			A.SDDOC,
			A.SDDCT
		FROM [SCDATA].F4211 A	
  		WHERE
			A.SDDOC = InvoiceNumber
			AND A.SDDCT = InvoiceType
			AND A.SDKCO = InvoiceCompany
		UNION ALL 
		SELECT 
			A.SDKCOO,		
			A.SDDCTO,
			A.SDDOCO,
			A.SDKCO,
			A.SDDOC,
			A.SDDCT
		FROM [SCDATA].F42119 A	
  		WHERE
			A.SDDOC = InvoiceNumber
			AND A.SDDCT = InvoiceType
			AND A.SDKCO = InvoiceCompany
	),
	ConfiguratorMaster AS (
		SELECT DISTINCT
			CT.CMCFGID	AS ConfiguratorID,
			CT.CMEMCU	AS BranchPlant,
			CT.CMLNID	AS LineNumber,
			CT.CMKCOO	AS OrderCompany,
			CT.CMDOCO	AS OrderNumber,
			CT.CMDCTO	AS OrderType
		FROM 
			[SCDATA].F3201 CT	 /*Configurator Master*/
		INNER JOIN TMP_ORDERS SO
			ON SO.SDKCOO = CT.CMKCOO AND 
			SO.SDDOCO = CT.CMDOCO AND
			SO.SDDCTO = CT.CMDCTO
		WHERE
			CT.CMCFGCID = 1  /*assumption:1 is the parent number ID - CMLNID = 1*/
		UNION ALL
		SELECT DISTINCT
			CTH.CHCFGID	AS ConfiguratorID,
			CTH.CHEMCU	AS BranchPlant,
			CTH.CHLNID	AS LineNumber,
			CTH.CHKCOO	AS OrderCompany,
			CTH.CHDOCO	AS OrderNumber,
			CTH.CHDCTO	AS OrderType
		FROM 
			[SCDATA].F32019 CTH /*Configurator Master History*/
		INNER JOIN TMP_ORDERS SO
			ON SO.SDKCOO = CTH.CHKCOO AND 
			SO.SDDOCO = CTH.CHDOCO AND
			SO.SDDCTO = CTH.CHDCTO  
		WHERE		
			CTH.CHCFGCID = 1
	)
	SELECT 
		OrderCompany,
		OrderType,
		OrderNumber,
		LineNumberID,
		ConfigurationIDNumber,
		ComponentIDNumber,
		SegmentNumber,
		SegmentValue,
		ParentItemNumber,
		COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ) AS RequiredorOptional,
		COALESCE(CIS_MCU.KWDSC1, CIS_EMPTY_MCU.KWDSC1) AS Description,
		COALESCE(CIS_MCU.KWDTAS, CIS_EMPTY_MCU.KWDTAS) AS SegmentSequence,
		(CASE WHEN (COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ)) = 'C' OR TRIM(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY)) IS NULL OR TRIM(COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT)) IS NULL
			THEN N' ' 
			ELSE [SCLIBRARY].CMM_GetUserDefinedCodeFnc(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY), COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT), SegmentValue, '*')  
		END) AS SegmentDescription
	FROM
		(SELECT DISTINCT
			CM.OrderCompany	AS OrderCompany,
			CM.OrderType	AS OrderType,        
			CM.OrderNumber	AS OrderNumber,	 
			CM.LineNumber	AS LineNumberID,
			SD.KZCFGID		AS ConfigurationIDNumber,	
			SD.KZCFGCID		AS ComponentIDNumber,
			SD.KZPEL		AS SegmentNumber,
			SD.KZSGVL		AS SegmentValue,
			SD.KZKIT		AS ParentItemNumber,
			CM.BranchPlant  AS  BranchPlant
		FROM
			[SCDATA].F3211 SD	  /*Configurator Segment Detail*/
		INNER JOIN ConfiguratorMaster CM
			ON CM.ConfiguratorID = SD.KZCFGID
		UNION ALL
		SELECT DISTINCT
			CM.OrderCompany	AS OrderCompany,
			CM.OrderType	AS OrderType,        
			CM.OrderNumber	AS OrderNumber,	 
			CM.LineNumber	AS LineNumberID,
			SDH.KSCFGID		AS ConfigurationIDNumber,	
			SDH.KSCFGCID	AS ComponentIDNumber,
			SDH.KSPEL		AS SegmentNumber,
			SDH.KSSGVL 		AS SegmentValue,
			SDH.KSKIT		AS ParentItemNumber,
			CM.BranchPlant AS  BranchPlant
		FROM 	
			[SCDATA].F32119 SDH /*Configurator Segment Detail History*/
		INNER JOIN ConfiguratorMaster CM
			ON CM.ConfiguratorID = SDH.KSCFGID) OrderConf
	LEFT JOIN [SCDATA].F3291 CIS_MCU /*Configured Item Segments*/
			ON CIS_MCU.KWKIT  = OrderConf.ParentItemNumber 
			AND CIS_MCU.KWMCU = OrderConf.BranchPlant
			AND CIS_MCU.KWPEL = OrderConf.SegmentNumber
	LEFT JOIN [SCDATA].F3291 CIS_EMPTY_MCU /*Configured Item Segments*/
		ON CIS_EMPTY_MCU.KWKIT  = OrderConf.ParentItemNumber 
		AND CIS_EMPTY_MCU.KWMCU = ' '
		AND CIS_EMPTY_MCU.KWPEL = OrderConf.SegmentNumber
	ORDER BY ComponentIDNumber, SegmentSequence, SegmentNumber, Description;

END;
  /
-- #desc					Search for invoice detail
-- #bl_class				Premier.Commerce.InvoiceLineList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InvoiceNumber		Invoice Number		
-- #param InvoiceCompany	Invoice Company
-- #param InvoiceType		Invoice Type

/* Open Amount Calculation doesn't consider Allow Foreign OFF mode.
 * This means that Domestic Open Amount will reflect payments stored 
 * in F03B13Z1 that  are always in Foreign currency
 */

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceLineList
(
	InvoiceNumber				IN DECIMAL,
	InvoiceCompany				IN NVARCHAR2,
	InvoiceType					IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
  )
AS

BEGIN
	
	OPEN ResultData1 FOR
	SELECT	DISTINCT
		A.RPDIVJ	AS InvoiceDate,
		A.RPDDJ		AS DueDate,
		A.RPSFX		AS DocumentSuffix,
		A.RPAG		AS GrossAmount,
		A.RPAAP - NVL(E.RUAG,0)		AS OpenAmount,
		A.RPACR		AS GrossAmountForeign,
		A.RPFAP - NVL(E.RUAG,0)		AS OpenAmountForeign,
		A.RPVR01	AS YourReference,
		A.RPCRCD	AS CurrencyCode,
		C.CVDL01	AS CurrencyDesc,
		A.RPCRRM	AS CurrencyMode,
		A.RPBCRC	AS BaseCurrencyCode,
		D.CVDL01	AS BaseCurrencyDesc
	FROM 	[SCDATA].F03B11 A			/* Invoice table */
		LEFT OUTER JOIN [SCDATA].F0013 C		/* Currency Master */
			ON A.RPCRCD = C.CVCRCD
		LEFT OUTER JOIN [SCDATA].F0013 D		/* Base currency */
			ON A.RPBCRC = D.CVCRCD
		LEFT JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 FROM [SCDATA].F03B13Z1 WHERE (TRIM(RUEUPS) IS NULL OR RUEUPS = 'E') GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) E 	/* ELECTRONIC RECEIPTS INPUT */
			ON A.RPAN8 = E.RUAN8				  
			AND A.RPDOC = E.RUDOC
			AND A.RPDCT = E.RUDCT
			AND A.RPKCO = E.RUKCO
			AND A.RPSFX = E.RUSFX
	WHERE A.RPDOC = InvoiceNumber 		/* Invoice Number */
		AND	A.RPDCT = InvoiceType		/* Invoice Number */
		AND A.RPKCO = InvoiceCompany	/* Invoice Number */
	ORDER BY A.RPDIVJ;

END;

  /
-- #desc						Get Open Invoices Summary 
-- #bl_class					Premier.Commerce.InvoiceOpenSummaryInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store ID
-- #param AddressNumber			Address Number
-- #param Company				Company if 00000 then '*'
-- #param CurrencyCode			Currency Code
-- #param DueDateTo				Due Date
							  							  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceOpenSummary
(
	StoreId				IN NCHAR,
	AddressNumber		IN NUMBER,
	Company             IN NCHAR,
	CurrencyCode		IN NCHAR,
	DueDateTo			IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

	CompanyTemp NCHAR(5) := Company;

	---------------------------Gets the Account Receivable Document Restrictions
	ArRestric	   NVARCHAR2(1);
	ArINID		   NCHAR(3) := StoreId;
	ArConstant   NCHAR(10):= 'AR_RESTRIC';
 
	-----------------------------------------------------------------------------

	SINID      NCHAR(3) := StoreId;
	CompanyConstant		NVARCHAR2(1);

BEGIN
	SINID := StoreId;
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', SINID, CompanyConstant);
	[SCLIBRARY].CMM_GetConstantValue(ArConstant, ArINID, ArRestric);
	
	IF (CompanyTemp = '00000') THEN 
		CompanyTemp := '*';
	END IF;
	
	OPEN ResultData1 FOR
	SELECT	
			COUNT(1)											AS OpenInvoiceCount,
			COUNT(CASE WHEN A.RPDDJ <= DueDateTo THEN 1 END)	AS DueInvoiceCount
		FROM [SCDATA].F03B11 A				/*INVOICE*/
		LEFT OUTER JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
			FROM [SCDATA].F03B13Z1 
			WHERE RUEUPS IN (' ', 'E')
			GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) C 	/* ELECTRONIC RECEIPTS INPUT*/
				ON  RPAN8 = RUAN8				  
				AND RPDOC = RUDOC
				AND RPDCT = RUDCT
				AND RPKCO = RUKCO
				AND RPSFX = RUSFX
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR	/* Document restrict */
			ON SOR.DRKY = A.RPDCT 
			AND SOR.DR$9INID = ArINID
			AND SOR.DR$9CNST = 'AR_RESTRIC'
		LEFT OUTER JOIN [SCDATA].FQ679912 CR	/* Company Restrict */
			ON CR.CICO = A.RPCO
			AND CR.CI$9INID = SINID
		WHERE 
			A.RPAN8 = AddressNumber
			AND	A.RPCRCD = CurrencyCode	
			AND	(((A.RPCRRM = 'D' OR A.RPCRRM = ' ' OR A.RPCRRM IS NULL) AND (A.RPAAP - NVL(C.RUAG,0)) > 0.01)
				OR (A.RPCRRM = 'F' AND (A.RPFAP - NVL(C.RUAG,0)) > 0.01)) /* Open Amount*/
			AND (ArRestric = '0' OR SOR.DRKY IS NOT NULL)
			AND (A.RPCO = CompanyTemp OR (CompanyTemp = '*' AND	(CompanyConstant ='A' OR CR.CICO IS NOT NULL )) );
END;

  /
-- #desc								Load a order Freight Discount lines to freight information Entity.
-- #bl_class							Premier.Commerce.InvoiceOrderDetailInfo.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param InvoiceCompany				Company ID
-- #param InvoiceNumber					Document Type
-- #param InvoiceType					InvoiceNumber
-- #param InstallationID				Installation ID
-- #param RetrieveWebContentInfo		Retrieve Web Content Info
-- #param LangPref						Lang Pref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceOrderDetail
(
	InstallationID  IN NCHAR,
	InvoiceCompany	IN NCHAR,
	InvoiceType	    IN NCHAR,
	InvoiceNumber	IN NUMBER,
	RetrieveWebContentInfo	IN INT,
	LangPref        IN NCHAR,
	ResultData1     OUT   GLOBALPKG.refcursor,
	ResultData2     OUT   GLOBALPKG.refcursor,
	ResultData3     OUT   GLOBALPKG.refcursor,
	ResultData4     OUT	  GLOBALPKG.refcursor
)
AS
	SOrderRestric	NVARCHAR2(1);
	SOrderINID		NCHAR(3) := InstallationID;
	SOrderConstant	NCHAR(10) := 'SO_RESTRIC';
	-- Gets Cust Cross Document Restrictions
	CustCrossRefType	NCHAR(2);
	CustCrossINID		NCHAR(3) := InstallationID;
    
    CurrentJulianDate INTEGER := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETINVOICEORDERDETAIL_A';--#TMP_ORDERDETAIL
    
    [SCLIBRARY].CMM_GetConstantValue( SOrderConstant, SOrderINID, SOrderRestric);
    [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);
/********************************Detail*********************************/
    INSERT INTO [SCLIBRARY].COM_GETINVOICEORDERDETAIL_A
	SELECT 
        A.SDKCOO				AS OrderCompany, 
		A.SDDCTO				AS OrderType,
		A.SDDOCO				AS OrderNumber,
		A.SDLNID				AS LineNumber,
		A.SDTRDJ				AS TransactionDate,
		A.SDDRQJ				AS RequestedDate,
		A.SDLNTY				AS LineType,
		A.SDNXTR				AS NextStatus,
		A.SDLTTR				AS LastStatus,
		A.SDTAX1				AS TaxableYN,
		A.SDTXA1				AS TaxArea,
		A.SDEXR1				AS TaxExplanationCode,
		A.SDIVD					AS DateInvoice,
		A.SDKCO					AS InvoiceCompany,
		A.SDDOC					AS InvoiceNumber,
		A.SDDCT					AS InvoiceType,
		A.SDSHAN				AS ShipToID,
		A.SDSHAN				AS SCShipToNumber,
		NVL(R.ABALPH,'')		AS ShipToName,
		A.SDMCU					AS CostCenter, 
		A.SDEMCU				AS CostCenterHeader,
		NVL(S.IVCITM,'')		AS ItemCrossRefNumber,
		A.SDDSC1				AS Description1,
		A.SDDSC2				AS Description2,
		A.SDUORG				AS ShippingQuantity,
		A.SDSOQS				AS ShippedQuantity,
		A.SDUOM					AS UnitOfMeasure,
		A.SDUOM4				AS PricingUnitOfMeasure,
		A.SDSOBK				AS BackorderedQuantity,
		A.SDSOCN				AS CanceledQuantity,
		A.SDUPRC				AS AmountUnitPrice,
		A.SDFUP					AS ForeignUnitPrice,
		A.SDAEXP				AS AmountExtPrice,
		A.SDFEA					AS ForeignExtPrice,
		NVL(T.LFIVI,' ')		AS InventoryInterface,
		A.SDCARS				AS CarrierID,
		A.SDMOT					AS ModeOfTransportation,
		A.SDITM					AS IdentifierShortItem,
		A.SDLITM				AS LongItemNumber,
		A.SDAITM				AS AuxItemNumber,
		'N'	AS IsInvoiceRestricted,
		0   AS ShipLineNumber,
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDKTLN				AS KitMasterLineNo,
		A.SDPROV				AS OverridePrice,
		A.SDCPNT				AS ComponentLineNumber,
		CASE A.SDADDJ 
			WHEN 0 THEN A.SDTRDJ 
			ELSE A.SDADDJ END	AS ShippedDate,
		A.SDLOCN				AS Location,
		A.SDLOTN				AS LotNumber,
		CASE WHEN A.SDSO08 = '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
	FROM 
	    [SCDATA].F4211 A
	LEFT OUTER JOIN [SCDATA].F4104 S	/* Customer/Item Cross Ref Table */
		ON S.IVITM = A.SDITM 
		AND S.IVAN8 = A.SDAN8
		AND S.IVXRT = CustCrossRefType
		AND CurrentJulianDate BETWEEN S.IVEFTJ AND S.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F40205 T
		ON 	T.LFLNTY = A.SDLNTY
	LEFT OUTER JOIN [SCDATA].F0101 R
		ON R.ABAN8 = A.SDSHAN
	LEFT OUTER JOIN [SCDATA].F4101 IM		/* Item Master */
		ON IM.IMITM = A.SDITM
    WHERE A.SDDOC = InvoiceNumber
        AND A.SDDCT = InvoiceType
        AND A.SDKCO = InvoiceCompany 
    UNION ALL
    SELECT 
		A.SDKCOO				AS OrderCompany, 
		A.SDDCTO				AS OrderType,
		A.SDDOCO				AS OrderNumber,
		A.SDLNID				AS LineNumber,
		A.SDTRDJ				AS TransactionDate,
		A.SDDRQJ				AS RequestedDate,
		A.SDLNTY				AS LineType,
		A.SDNXTR				AS NextStatus,
		A.SDLTTR				AS LastStatus,
		A.SDTAX1				AS TaxableYN,
		A.SDTXA1				AS TaxArea,
		A.SDEXR1				AS TaxExplanationCode,
		A.SDIVD					AS DateInvoice,
		A.SDKCO					AS InvoiceCompany,
		A.SDDOC					AS InvoiceNumber,
		A.SDDCT					AS InvoiceType,
		A.SDSHAN				AS ShipToID,
		A.SDSHAN				AS SCShipToNumber,
		NVL(R.ABALPH,'')		AS ShipToName,
		A.SDMCU					AS CostCenter, 
		A.SDEMCU				AS CostCenterHeader,
		NVL(S.IVCITM,'')		AS ItemCrossRefNumber,
		A.SDDSC1				AS Description1,
		A.SDDSC2				AS Description2,
		A.SDUORG				AS ShippingQuantity,
		A.SDSOQS				AS ShippedQuantity,
		A.SDUOM					AS UnitOfMeasure,
		A.SDUOM4				AS PricingUnitOfMeasure,
		A.SDSOBK				AS BackorderedQuantity,
		A.SDSOCN				AS CanceledQuantity,
		A.SDUPRC				AS AmountUnitPrice,
		A.SDFUP					AS ForeignUnitPrice,
		A.SDAEXP				AS AmountExtPrice,
		A.SDFEA					AS ForeignExtPrice,
		NVL(T.LFIVI,' ')		AS InventoryInterface,
		A.SDCARS				AS CarrierID,
		A.SDMOT					AS ModeOfTransportation,
		A.SDITM					AS IdentifierShortItem,
		A.SDLITM				AS LongItemNumber,
		A.SDAITM				AS AuxItemNumber,
		'N'	AS IsInvoiceRestricted,
		0 AS ShipLineNumber,
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDKTLN				AS KitMasterLineNo,
		A.SDPROV				AS OverridePrice,
		A.SDCPNT				AS ComponentLineNumber,
		CASE A.SDADDJ 
			WHEN 0 THEN A.SDTRDJ 
			ELSE A.SDADDJ END	AS ShippedDate,
		A.SDLOCN				AS Location,
		A.SDLOTN				AS LotNumber,
		CASE WHEN A.SDSO08 = '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
	FROM 
	    [SCDATA].F42119 A
	LEFT OUTER JOIN [SCDATA].F4104 S		/* Customer/Item Cross Ref Table */
		ON S.IVAN8 = A.SDAN8
		AND S.IVITM = A.SDITM 
		AND S.IVXRT = CustCrossRefType
		AND CurrentJulianDate BETWEEN S.IVEFTJ AND S.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F40205 T
		ON T.LFLNTY = A.SDLNTY
	LEFT OUTER JOIN [SCDATA].F0101 R		/* Address Book Master */
		ON R.ABAN8 = A.SDSHAN
	LEFT OUTER JOIN [SCDATA].F4101 IM		/* Item Master */
		ON IM.IMITM = A.SDITM
    WHERE A.SDDOC = InvoiceNumber
        AND A.SDDCT = InvoiceType
        AND A.SDKCO = InvoiceCompany;

    OPEN ResultData1 FOR
        SELECT 
			A.RPDIVJ    As InvoiceDate,
			A.RPDDJ		As DueDate,
			''			AS DocumentSuffix,
			0			AS GrossAmount,
			0			AS OpenAmount,
			0			AS GrossAmountForeign,
			0			AS OpenAmountForeign,
			A.RPVR01	AS YourReference,
			B.CVCRCD    As CurrencyCode,
			B.CVDL01    AS CurrencyDesc,
			A.RPCRRM    AS CurrencyMode,
			A.RPBCRC	AS BaseCurrencyCode,
			C.CVDL01	AS BaseCurrencyDesc
        FROM
	        [SCDATA].F03B11 A
			LEFT OUTER JOIN [SCDATA].F0013 B
				ON B.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 C
				ON C.CVCRCD = A.RPBCRC
        WHERE
	        A.RPDOC = InvoiceNumber  AND A.RPDCT = InvoiceType AND A.RPKCO = InvoiceCompany AND ROWNUM = 1;

    OPEN ResultData2 FOR
       SELECT DISTINCT
			A.BillToNumber		AS SCBillToNumber,
			A.ShipToNumber		AS SCShipToNumber,
			A.AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			' ' AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			(CASE WHEN SOrderRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS ISORDERRESTRICTED,
			' ' AS IsFreightOn,
			B.CCCRCD AS BaseCurrencyCode,
			C.CVDL01 AS BaseCurrencyDesc,
			NVL(NVL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
		FROM 
		    [SCLIBRARY].COM_InvoiceOrderHeaderVW A
		INNER JOIN [SCLIBRARY].COM_GETINVOICEORDERDETAIL_A T
			ON T.OrderCompany = A.SHKCOO
			AND T.OrderNumber = A.SHDOCO
			AND T.OrderType = A.SHDCTO
		INNER JOIN [SCDATA].F0010 B
			ON B.CCCO = OrderCompany
		LEFT OUTER JOIN [SCDATA].F0013 C
			ON B.CCCRCD = C.CVCRCD
		LEFT OUTER JOIN [SCDATA].F4201TX Tax
			ON Tax.STKCOO = A.SHKCOO
			AND Tax.STDOCO = A.SHDOCO 
			AND Tax.STDCTO = A.SHDCTO
		LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
			ON TxHistory.STKCOO = A.SHKCOO
			AND TxHistory.STDOCO = A.SHDOCO  
			AND TxHistory.STDCTO = A.SHDCTO
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SOrderINID
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		ORDER BY A.SHTRDJ DESC;
	
	IF(RetrieveWebContentInfo = 1) THEN  
		OPEN ResultData3 FOR
        SELECT 
			OrderCompany, 
			OrderType,
			OrderNumber,
			LineNumber,
			TransactionDate,
			RequestedDate,
			LineType,
			NextStatus,
			LastStatus,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			DateInvoice,
			InvoiceCompany,
			InvoiceNumber,
			InvoiceType,
			ShipToID,
			SCShipToNumber,
			ShipToName,
			CostCenter, 
			CostCenterHeader,
			ItemCrossRefNumber,
			NVL(ContenDesc.DESC1, A.Description1)	AS Description1,
			NVL(ContenDesc.DESC2, A.Description2)	AS Description2,
			ContenDesc.URL			AS URL,
			ShippingQuantity,
			ShippedQuantity,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			BackorderedQuantity,
			CanceledQuantity,
			AmountUnitPrice,
			ForeignUnitPrice,
			AmountExtPrice,
			ForeignExtPrice,
			InventoryInterface,
			CarrierID,
			ModeOfTransportation,
			IdentifierShortItem,
			LongItemNumber,
			AuxItemNumber,
			IsInvoiceRestricted,
			ShipLineNumber,
			StockingType,
			RelatedKitItemNo,
			KitMasterLineNo,
			OverridePrice,
			ComponentLineNumber,
			NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			ShippedDate,
			Location,
			LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			IsBasketRepricing,
			NVL(C.RFOGNO, 0) AS ParentLineNo
		FROM [SCLIBRARY].COM_GETINVOICEORDERDETAIL_A A
		LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.IdentifierShortItem, LangPref, 0) ) ContenDesc 
			ON ContenDesc.DESCITM = A.IdentifierShortItem
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON  Tax.DTDOCO = OrderNumber 
			AND Tax.DTDCTO = OrderType
			AND Tax.DTKCOO = OrderCompany 
			AND Tax.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = OrderNumber 
			AND TxHistory.DTDCTO = OrderType
			AND TxHistory.DTKCOO = OrderCompany 
			AND TxHistory.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F4573 C  /* Free Goods lines */
			ON C.RFDOCO = A.OrderNumber 
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber;

	ELSE 
	
		OPEN ResultData3 FOR
        SELECT 
			OrderCompany, 
			OrderType,
			OrderNumber,
			LineNumber,
			TransactionDate,
			RequestedDate,
			LineType,
			NextStatus,
			LastStatus,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			DateInvoice,
			InvoiceCompany,
			InvoiceNumber,
			InvoiceType,
			ShipToID,
			SCShipToNumber,
			ShipToName,
			CostCenter, 
			CostCenterHeader,
			ItemCrossRefNumber,
			A.Description1 AS Description1, /* Retrieve1 for Tracking lines */
			A.Description2 AS Description2,
			N' ' AS URL,
			ShippingQuantity,
			ShippedQuantity,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			BackorderedQuantity,
			CanceledQuantity,
			AmountUnitPrice,
			ForeignUnitPrice,
			AmountExtPrice,
			ForeignExtPrice,
			InventoryInterface,
			CarrierID,
			ModeOfTransportation,
			IdentifierShortItem,
			LongItemNumber,
			AuxItemNumber,
			IsInvoiceRestricted,
			ShipLineNumber,
			StockingType,
			RelatedKitItemNo,
			KitMasterLineNo,
			OverridePrice,
			ComponentLineNumber,
			NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			ShippedDate,
			Location,
			LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			IsBasketRepricing,
			NVL(C.RFOGNO, 0) AS ParentLineNo
		FROM [SCLIBRARY].COM_GETINVOICEORDERDETAIL_A A
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON  Tax.DTDOCO = OrderNumber 
			AND Tax.DTDCTO = OrderType
			AND Tax.DTKCOO = OrderCompany 
			AND Tax.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = OrderNumber 
			AND TxHistory.DTDCTO = OrderType
			AND TxHistory.DTKCOO = OrderCompany 
			AND TxHistory.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F4573 C  /* Free Goods lines */
			ON C.RFDOCO = A.OrderNumber 
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber;

	END IF;

	/*Configured Items*/
	/* The parameter LangPref was removed by performance improvements, the descriptions of the configured segments 
	 * will be returned in the default JDE language, avoid join with table F0005D */
	[SCLIBRARY].COM_GetInvConfiguredLineList(InvoiceCompany, InvoiceType, InvoiceNumber, ResultData4);
END;
  /

-- #desc						Search for Invoice Payment detail List
-- #bl_class					Premier.Commerce.InvoicePaymentDetailList.cr
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param PaymentID				Payment ID
-- #param AddressNumber			Address Number
-- #param InvoiceCompany		Invoice Company
-- #param InvoiceType			Invoice Type	
-- #param InvoiceNumber			Invoice Number			
-- #param PaymentReference		PaymentReference	
-- #param PageSize				Page Size
-- #param PageIndex				Page Index
-- #param EdiUserId				Edi User ID
-- #param EdiBatchNumber		Edi Batch Number
-- #param EdiTransactionNumber	Edi Transaction Number
-- #param InTransit				In transit

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePayDetailList
(
	InstallationID			IN NCHAR,
	PaymentID				IN NUMBER,
	AddressNumber			IN NUMBER,
	InvoiceCompany			IN NCHAR,
	InvoiceType				IN NCHAR,
	InvoiceNumber			IN NUMBER,
	PaymentReference		IN NCHAR,
	PageIndex				IN INT,
    PageSize				IN INT,
	EdiUserId				IN NCHAR,
	EdiBatchNumber			IN NCHAR,
	EdiTransactionNumber	IN NCHAR,
	InTransit				IN DECIMAL,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	SQL_DYNAMIC		VARCHAR2(4000);
	WHERE_DYNAMIC	NVARCHAR2(1000) := ' ';
	INNER_DYNAMIC	NVARCHAR2(1000) := ' ';

	CompanyConstant		NVARCHAR2(1);
	ConstantInstallation NCHAR(3):= InstallationID;
	
	/* Gets the Invoice Document Restrictions Parameters */
	InvRestric		NVARCHAR2(1);
	InvINID			NCHAR(3):= InstallationID;
	InvConstant		NCHAR(10):= 'AR_RESTRIC';

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);

BEGIN
		[SCLIBRARY].CMM_GetConstantValue(InvConstant,InvINID, InvRestric);
		[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
		
		IF (PaymentID IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' RZICU = :PaymentID ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' (1 = 1 OR :PaymentID IS NULL) ';
		END IF;

		IF (InvoiceNumber IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND RZDOC = :InvoiceNumber ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceNumber IS NULL) ';
		END IF;

		IF (AddressNumber IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND RZAN8 = :AddressNumber ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AddressNumber IS NULL) ';
		END IF;

		IF (PaymentReference <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(RZCKNU) LIKE ''%'' || :PaymentReference || ''%'' ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :PaymentReference = ''*'') ';
		END IF;

		IF (InvoiceType <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND RZDCT = :InvoiceType ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceType = ''*'') ';
		END IF;

		IF (InvoiceCompany <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND RZCO = :InvoiceCompany ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceCompany = ''*'') ';
		END IF;

		SQL_DYNAMIC := N'WITH CTE AS ( ';
		IF(InTransit = 0 OR InTransit IS NULL) THEN
			SQL_DYNAMIC := SQL_DYNAMIC || N'
			SELECT 
				RZAN8	AS AddressNumber,
				RZKCO	AS InvoiceCompany,
				RZDCT	AS InvoiceDocumentType,
				RZDOC	AS InvoiceNumber,
				RZSFX	AS InvoiceSuffix,
				RZCKNU	AS PaymentReference,
				RZDMTJ	AS PaymentDate,
				RZPAAP	AS AppliedAmount,
				RZPFAP	AS AppliedAmountForeign,
				RZCRCD	AS CurrencyCode,
				RZCRRM	AS CurrencyMode,
				RZBCRC	AS BaseCurrencyCode
			FROM 
				[SCDATA].F03B14 /* Receipts Detail */ ';

			IF (CompanyConstant = 'L') THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
							ON CICO = RZCO
							AND CI$9INID = ''' || ConstantInstallation || '''';
			END IF;

			SQL_DYNAMIC := SQL_DYNAMIC || N' WHERE ' || WHERE_DYNAMIC;
		END IF;

		IF(InTransit IS NULL) THEN
			SQL_DYNAMIC := SQL_DYNAMIC || N' UNION ALL ';
		END IF;

		IF(InTransit = 1 OR InTransit IS NULL) THEN
			SQL_DYNAMIC := SQL_DYNAMIC || N'
			SELECT
				B.RUAN8		AS AddressNumber,
				B.RUKCO		AS InvoiceCompany,
				B.RUDCT		AS InvoiceDocumentType,
				B.RUDOC		AS InvoiceNumber,
				B.RUSFX		AS InvoiceSuffix,
				B.RUCKNU	AS PaymentReference,
				B.RUDMTJ	AS PaymentDate,
				B.RUAG		AS AppliedAmount,
				B.RUAG		AS AppliedAmountForeign,
				B.RUCRCD	AS CurrencyCode,
				B.RUCRRM	AS CurrencyMode,
				B.RUCRCD	AS BaseCurrencyCode
			FROM
				[SCDATA].F03B13Z1 B ';

			IF (CompanyConstant = 'L') THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
							ON CICO = RUCO
							AND CI$9INID = ''' || ConstantInstallation || '''';
			END IF;

			SQL_DYNAMIC := SQL_DYNAMIC || N' WHERE B.RUEUPS IN ('' '', ''E'') ';

			IF (EdiUserId <> '*' AND EdiBatchNumber <> '*' AND EdiTransactionNumber <> '*') THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND B.RUEDUS = :EdiUserId AND B.RUEDBT = :EdiBatchNumber AND B.RUEDTN = :EdiTransactionNumber ';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :EdiUserId = ''*'' OR :EdiBatchNumber = ''*'' OR :EdiTransactionNumber = ''*'') ';
			END IF;
			
			IF (InvoiceNumber IS NOT NULL) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND B.RUDOC = :InvoiceNumber ';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :InvoiceNumber IS NULL) ';
			END IF;

			IF (AddressNumber IS NOT NULL) THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND B.RUAN8 = :AddressNumber ';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :AddressNumber IS NULL) ';
			END IF;

			IF (PaymentReference <> '*') THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND UPPER(B.RUCKNU) LIKE ''%'' || :PaymentReference || ''%''';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :PaymentReference = ''*'') ';
			END IF;

			IF (InvoiceType <> '*') THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND B.RUDCT = :InvoiceType ';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :InvoiceType = ''*'') ';
			END IF;

			IF (InvoiceCompany <> '*') THEN
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND B.RUKCO = :InvoiceCompany ';
			ELSE
				SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :InvoiceCompany = ''*'') ';
			END IF; 

		END IF;

		SQL_DYNAMIC := SQL_DYNAMIC || N'
		), PAGING AS (
			SELECT 
				CTE.AddressNumber, CTE.InvoiceCompany, CTE.InvoiceDocumentType, CTE.InvoiceNumber, CTE.InvoiceSuffix, 
				CTE.PaymentReference, CTE.PaymentDate, CTE.AppliedAmount, CTE.AppliedAmountForeign, CTE.CurrencyCode, 
				CTE.CurrencyMode, CTE.BaseCurrencyCode, ROW_NUMBER() OVER (ORDER BY CTE.PaymentDate DESC) AS RNUM
			FROM CTE
		)
		SELECT 
			PAGING.AddressNumber, PAGING.InvoiceCompany, PAGING.InvoiceDocumentType, PAGING.InvoiceNumber, PAGING.InvoiceSuffix, 
			PAGING.PaymentReference, PAGING.PaymentDate, PAGING.AppliedAmount, PAGING.AppliedAmountForeign, PAGING.CurrencyCode, 
			PAGING.CurrencyMode, PAGING.BaseCurrencyCode, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount, (CASE WHEN :InvRestric = ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END
			ELSE ''N'' END ) AS IsInvoiceRestricted
		FROM 
			PAGING
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON  DR.DRKY = PAGING.InvoiceDocumentType
				AND DR.DR$9INID = :InvINID
				AND DR.DR$9CNST = :InvConstant
		WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))';
		IF(InTransit = 0 )THEN
			OPEN ResultData1 FOR SQL_DYNAMIC USING PaymentID, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
											InvRestric, InvINID, InvConstant, PageIndex, PageSize, RowStart, RowEnd;
		
		ELSIF(InTransit = 1) THEN
			OPEN ResultData1 FOR SQL_DYNAMIC USING EdiUserId, EdiBatchNumber, EdiTransactionNumber, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
													InvRestric, InvINID, InvConstant, PageIndex, PageSize, RowStart, RowEnd;
		ELSE
			OPEN ResultData1 FOR SQL_DYNAMIC USING PaymentID, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
													EdiUserId, EdiBatchNumber, EdiTransactionNumber, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
													InvRestric, InvINID, InvConstant, PageIndex, PageSize, RowStart, RowEnd;
		END IF;
END;
  /

-- #desc					Search for Invoice Payment Header List
-- #bl_class				Premier.Commerce.GetInvoicePaymentHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param PaymentID			Payment ID
-- #param InstallationID	Installation ID
-- #param InvoiceCompany	InvoiceCompany	
-- #param InvoiceType		InvoiceType
-- #param InvoiceNumber		InvoiceNumber
-- #param InvoiceSuffix		InvoiceSuffix
-- #param AddressNumber		Address Number
-- #param PaymentReference  PaymentReference
-- #param JulianDateFrom	JulianDate From
-- #param JulianDateTo		JulianDate To
-- #param PageSize			Page Size
-- #param PageIndex			Page Index
-- #param SortBy			Sort By Column name
-- #param SortDir			Sort Dir ASC / DESC

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePayHeaderList
(
	PaymentID			IN NUMBER,
	InstallationID		IN NCHAR,
	InvoiceCompany		IN NCHAR,
	InvoiceType			IN NCHAR,
	InvoiceNumber		IN NUMBER,
	InvoiceSuffix		IN NCHAR,
	AddressNumber		IN NUMBER,
	PaymentReference	IN NCHAR,
	JulianDateFrom		IN NUMBER,
	JulianDateTo		IN NUMBER,
	PageIndex			IN INT,
	PageSize			IN INT,
	SortBy				IN NVARCHAR2,
	SortDir				IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	SQL_DYNAMIC		VARCHAR2(4000);
	WHERE_DYNAMIC	NVARCHAR2(1000) := '';
	INNER_DYNAMIC1	NVARCHAR2(1000) := ' ';
	INNER_DYNAMIC2	NVARCHAR2(1000) := ' ';
	SORT_DYNAMIC	NVARCHAR2(60);
	SORTDIR_DYNAMIC NVARCHAR2(5);
	
	CompanyConstant		NVARCHAR2(1);
	ConstantInstallation NCHAR(3):= InstallationID; 

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);
	
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);

	/* Dynamic sort direction statement */
    SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

    /* Dynamic sort statement */
    SORT_DYNAMIC := CASE SortBy 
        WHEN 'PaymentID' THEN 'PaymentID' || SORTDIR_DYNAMIC || ', PaymentDate DESC'
        WHEN 'PaymentReference' THEN 'UPPER(PaymentReference)' || SORTDIR_DYNAMIC || ', PaymentDate DESC'
        WHEN 'PaymentDate' THEN 'PaymentDate' || SORTDIR_DYNAMIC
        WHEN 'PaymentTotal' THEN 'PaymentTotal' || SORTDIR_DYNAMIC || ', PaymentDate DESC'
        ELSE 'PaymentDate DESC'
    END;

	
	IF (CompanyConstant = N'L') THEN
		INNER_DYNAMIC1 := N' INNER JOIN [SCDATA].FQ679912 CR
							ON CR.CI$9INID = ''' || ConstantInstallation || N'''
								AND CR.CICO = A.RYCO /*Company*/ ';

		INNER_DYNAMIC2 := N' INNER JOIN [SCDATA].FQ679912 CR
							ON CR.CI$9INID = ''' || ConstantInstallation || N'''
								AND CR.CICO = A.RUCO /*Company*/ ';
	END IF;

	SQL_DYNAMIC := N'
	SELECT PaymentID, PaymentKey, AddressNumber, PaymentInstrument, 
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc(''00'', ''PY'', Invoices2.PaymentInstrument, ''*'') AS PaymentInstrumentDesc,
		PaymentReference, PaymentDate, PaymentTotal, PaymentTotalForeign, CurrencyCode,
		CurrencyMode, BaseCurrencyCode, EdiUserId, EdiBatchNumber, EdiTransactionNumber, InTransit, TotalRowCount
	FROM 
		(SELECT Invoices.*, ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM, COUNT(1) OVER () TotalRowCount  
		FROM (
			SELECT 
				A.RYICU		AS PaymentID,
				A.RYPYID	AS PaymentKey,
				A.RYAN8		AS AddressNumber,
				A.RYRYIN	AS PaymentInstrument,
				A.RYCKNU	AS PaymentReference,
				A.RYDMTJ	AS PaymentDate,
				A.RYCKAM	AS PaymentTotal,
				A.RYFCAM	AS PaymentTotalForeign,
				A.RYCRCD	AS CurrencyCode,
				A.RYCRRM	AS CurrencyMode,
				A.RYBCRC	AS BaseCurrencyCode,
				N''''		AS EdiUserId,
				N''''		AS EdiBatchNumber,
				N''''		AS EdiTransactionNumber,
				0			AS InTransit
			FROM 
				[SCDATA].F03B13 A				 /*Receipts Header*/
				LEFT JOIN [SCDATA].F03B14 C	 /*Receipts Detail*/
					ON C.RZPYID = A.RYPYID '
				|| INNER_DYNAMIC1 || ' 
			WHERE ';

			IF (InvoiceCompany <> '*') THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N'C.RZKCO = :InvoiceCompany ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N'(1 = 1 OR :InvoiceCompany = ''*'')';
			END IF; 

			IF (InvoiceType <> '*') THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND C.RZDCT = :InvoiceType ';
			ELSE 
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceType IS NULL)';
			END IF;

			IF (InvoiceNumber IS NOT NULL) THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND C.RZDOC = :InvoiceNumber ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceNumber IS NULL) ';
			END IF;


			IF (InvoiceSuffix <> '*') THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND C.RZSFX = :InvoiceSuffix ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceSuffix = ''*'') ';
			END IF;

			IF (AddressNumber IS NOT NULL) THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RYAN8 = :AddressNumber ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AddressNumber IS NULL) ';
			END IF;

			/* The Business send parameter in UpperCase */
			IF (PaymentReference <> '*') THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(A.RYCKNU) LIKE ''%''||:PaymentReference||''%'' ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :PaymentReference = ''*'') ';
			END IF;

			IF (JulianDateFrom <> 0) THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RYDMTJ >= :JulianDateFrom ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :JulianDateFrom = 0) ';
			END IF;

			IF (JulianDateTo <> 0) THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RYDMTJ <= :JulianDateTo ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :JulianDateTo = 0) ';
			END IF;

			IF (PaymentID IS NOT NULL) THEN
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RYICU = :PaymentID ';
			ELSE
				WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :PaymentID IS NULL) ';
			END IF;

		SQL_DYNAMIC := SQL_DYNAMIC || WHERE_DYNAMIC || N' 
			UNION
			SELECT 
				A.RUICU		AS PaymentID,
				A.RUPYID	AS PaymentKey,
				A.RUAN8		AS AddressNumber,
				A.RUPYIN	AS PaymentInstrument,
				A.RUCKNU	AS PaymentReference,
				A.RUDMTJ	AS PaymentDate,
				SUM(A.RUAG)	AS PaymentTotal,
				A.RUFAP		AS PaymentTotalForeign,
				A.RUCRCD	AS CurrencyCode,
				A.RUCRRM	AS CurrencyMode,
				B.CCCRCD	AS BaseCurrencyCode,
				A.RUEDUS	AS EdiUserId,
				A.RUEDBT	AS EdiBatchNumber,
				A.RUEDTN	AS EdiTransactionNumber,
				1			AS InTransit
			FROM 
				[SCDATA].F03B13Z1 A			/*  Electronic Receipts Input */
				INNER JOIN [SCDATA].F0010 B	/*  Company Constants */
				ON B.CCCO = A.RUKCO '		/*  Document Company*/
			|| INNER_DYNAMIC2 || '
			WHERE (A.RUEUPS IN ('' '', ''E'')) ';	/*  RUEUPS = Auto-Cash Upload Status */
				IF (InvoiceCompany <> '*') THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUKCO = :InvoiceCompany ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :InvoiceCompany = ''*'')';
				END IF;

				IF (InvoiceType <> '*') THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUDCT = :InvoiceType ';
				ELSE 
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :InvoiceType IS NULL)';
				END IF;

				IF (InvoiceNumber IS NOT NULL) THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUDOC = :InvoiceNumber ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :InvoiceNumber IS NULL) ';
				END IF;

				IF (InvoiceSuffix <> '*') THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUSFX = :InvoiceSuffix ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :InvoiceSuffix = ''*'') ';
				END IF;

				IF (AddressNumber IS NOT NULL) THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUAN8 = :AddressNumber ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :AddressNumber IS NULL) ';
				END IF;
				
				/* The Business send parameter in UpperCase */
				IF (PaymentReference <> '*') THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND UPPER(A.RUCKNU) LIKE ''%'' || :PaymentReference || ''%''';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :PaymentReference = ''*'') ';
				END IF;

				IF (JulianDateFrom <> 0) THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUDMTJ >= :JulianDateFrom ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :JulianDateFrom = 0) ';
				END IF;

				IF (JulianDateTo <> 0) THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUDMTJ <= :JulianDateTo ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :JulianDateTo = 0) ';
				END IF;

				IF (PaymentID IS NOT NULL) THEN
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND A.RUICU = :PaymentID ';
				ELSE
					SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :PaymentID IS NULL) ';
				END IF;

			SQL_DYNAMIC := SQL_DYNAMIC ||
			N' GROUP BY A.RUICU, A.RUPYID, A.RUAN8, A.RUPYIN, A.RUCKNU, A.RUDMTJ, A.RUFAP, A.RUCRCD, A.RUCRRM, B.CCCRCD, A.RUEDUS, A.RUEDBT, A.RUEDTN
		)  Invoices 
	) Invoices2
	WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))';

	OPEN ResultData1 FOR SQL_DYNAMIC USING InvoiceCompany, InvoiceType, InvoiceNumber, InvoiceSuffix, AddressNumber, PaymentReference, JulianDateFrom, JulianDateTo, PaymentID, 
											InvoiceCompany, InvoiceType, InvoiceNumber, InvoiceSuffix, AddressNumber, PaymentReference, JulianDateFrom, JulianDateTo, PaymentID,
											PageIndex, PageSize, RowStart, RowEnd;

END;	
  /

-- #desc						Get the Invoices Payment History Search 
-- #bl_class					Premier.Commerce.InvoicePaymentHistoryList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param AddressNumber			Address Number
-- #param InvoiceNumber			Invoice Number
-- #param PaymentReference		Payment Reference
-- #param DueDateFrom			Due Date From
-- #param DueDateTo				DueDateTo


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePayHistList
(
	InstallationID			IN NCHAR,
	InvoiceNumber			IN NUMBER,
	AddressNumber			IN NUMBER,
	PaymentReference		IN NCHAR,
	DueDateFrom				IN NUMBER,
	DueDateTo				IN NUMBER,
	PageIndex				IN INT,
    PageSize				IN INT,
    ResultData1				IN OUT GLOBALPKG.refcursor
)
AS
	/* Gets the Invoice Document Restrictions Parameters */
	InvRestric	VARCHAR2(1);
	InvINID		NCHAR(3):= InstallationID;
	InvConstant	NCHAR(10):= 'AR_RESTRIC';

	CompanyConstant			VARCHAR2(1);
	ConstantInstallation	NCHAR(3):= InstallationID; 
	
	BEGIN

		[SCLIBRARY].CMM_GetConstantValue(InvConstant, InvINID, InvRestric);
		[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
	
		--------DETAILED--------
		OPEN ResultData1 FOR
		WITH CTE AS
		(
			SELECT 
				A.RPAN8						AS AddressNumber,
				NVL(AB.ABALPH,' ')			AS AlphaName,
				A.RPKCO                     AS InvoiceCompany,
				A.RPDCT                     AS InvoiceType,
				A.RPDOC                     AS InvoiceNumber,
				A.RPSFX                     AS InvoiceSuffix,
				A.RPDIVJ                    As InvoiceDate,
				A.RPDDJ                     As DueDate,
				B.CVCRCD                    As CurrencyCode,
				A.RPBCRC					AS BaseCurrencyCode,	
				A.RPCRRM                    AS CurrencyMode,
				B.CVDL01                    AS CurrencyDesc,
				A.RPAG                      AS GrossAmount,
				A.RPAAP                     AS OpenAmount,
				NVL(C.RZPAAP,0)				AS PaidAmount,
				0				            AS InTransitAmount,
				A.RPACR                     AS GrossAmountForeign,
				A.RPFAP                     AS OpenAmountForeign,
				NVL(C.RZPFAP,0)				AS PaidAmountForeign,
				0				            AS InTransitAmountForeign,
				N''							AS RUEDUS,
				N''							AS RUEDBT,
				N''							AS RUEDTN,
				0							AS RUEDLN,
				A.RPCO
			FROM
				[SCDATA].F03B11 A				/* Invoice*/
				LEFT JOIN [SCDATA].F03B14 C	/* Receipts Detail */
					ON C.RZAN8 = A.RPAN8
					AND C.RZDOC = A.RPDOC
					AND C.RZDCT = A.RPDCT
					AND C.RZKCO = A.RPKCO
					AND C.RZSFX = A.RPSFX
				INNER JOIN [SCDATA].F0013 B	/* Currency Master */
						ON B.CVCRCD = A.RPCRCD
				LEFT JOIN [SCDATA].F0101 AB	/* Address Book Master */
					ON AB.ABAN8 = A.RPAN8
			WHERE
				(InvoiceNumber IS NULL OR A.RPDOC = InvoiceNumber)
				AND	(AddressNumber IS NULL OR A.RPAN8 = AddressNumber)
				AND ((DueDateFrom = 0) OR (DueDateTo = 0) OR (A.RPDDJ >= DueDateFrom AND A.RPDDJ <= DueDateTo ))
				/* The Business send parameter in UpperCase */
				AND	(PaymentReference = '*' OR UPPER(RZCKNU) LIKE '%' || PaymentReference || '%')
			UNION
			SELECT 
				A.RPAN8                     AS AddressNumber,
				NVL(AB.ABALPH,' ')          AS AlphaName,
				A.RPKCO                     AS InvoiceCompany,
				A.RPDCT                     AS InvoiceType,
				A.RPDOC                     AS InvoiceNumber,
				A.RPSFX                     AS InvoiceSuffix,
				A.RPDIVJ                    As InvoiceDate,
				A.RPDDJ                     As DueDate,
				B.CVCRCD                    As CurrencyCode,
				A.RPBCRC					AS BaseCurrencyCode,	
				A.RPCRRM                    AS CurrencyMode,
				B.CVDL01                    AS CurrencyDesc,
				A.RPAG                      AS GrossAmount,
				A.RPAAP                     AS OpenAmount,
				0					        AS PaidAmount,
				NVL(D.RUAG,0)				AS InTransitAmount,
				A.RPACR                     AS GrossAmountForeign,
				A.RPFAP                     AS OpenAmountForeign,
				0						    AS PaidAmountForeign,
				NVL(D.RUFAP,0)				AS InTransitAmountForeign,
				D.RUEDUS					AS RUEDUS,
				D.RUEDBT					AS RUEDBT,
				D.RUEDTN					AS RUEDTN,
				D.RUEDLN 	  				AS RUEDLN,
				A.RPCO
			FROM
				[SCDATA].F03B11 A				 /* Invoice */
				INNER JOIN [SCDATA].F03B13Z1 D /* Electronic Receipts Input */
					ON D.RUAN8 = A.RPAN8                          
					AND D.RUDOC = A.RPDOC
					AND D.RUDCT = A.RPDCT
					AND D.RUKCO = A.RPKCO
					AND D.RUSFX = A.RPSFX
					AND D.RUEUPS IN (' ', 'E')
				INNER JOIN [SCDATA].F0013 B	/* Currency Master */
						ON B.CVCRCD = A.RPCRCD
				LEFT JOIN [SCDATA].F0101 AB	/*Address Book Master */
					ON AB.ABAN8 = A.RPAN8
			WHERE
				(InvoiceNumber IS NULL OR A.RPDOC = InvoiceNumber)
				AND	(AddressNumber IS NULL OR A.RPAN8 = AddressNumber)
				AND ((DueDateFrom = 0) OR (DueDateTo = 0) OR (A.RPDDJ >= DueDateFrom AND A.RPDDJ <= DueDateTo ))
				/* The Business send parameter in UpperCase */
				AND	(PaymentReference = '*' OR UPPER(RUCKNU) LIKE '%' || PaymentReference || '%') 
		), PAGING AS (
			SELECT 
				A.AddressNumber,
				A.AlphaName,
				A.InvoiceCompany,
				A.InvoiceType,
				A.InvoiceNumber,
				A.InvoiceSuffix,
				A.InvoiceDate,
				A.DueDate,
				A.CurrencyCode,
				A.BaseCurrencyCode,	
				A.CurrencyMode,
				A.CurrencyDesc,
				A.GrossAmount,
				A.OpenAmount,
				SUM(A.PaidAmount) AS PaidAmount,
				SUM(A.InTransitAmount) AS InTransitAmount,
				A.GrossAmountForeign,
				A.OpenAmountForeign,
				SUM(A.PaidAmountForeign) AS PaidAmountForeign,
				SUM(A.InTransitAmountForeign) AS InTransitAmountForeign,
				ROW_NUMBER() OVER (ORDER BY A.DueDate DESC, A.InvoiceNumber DESC) AS RNUM
			FROM CTE A
			LEFT OUTER JOIN [SCDATA].FQ679912 CR
				ON CR.CI$9INID = ConstantInstallation
				AND CR.CICO = A.RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON  DR.DR$9INID = InvINID 
				AND DR.DR$9CNST = InvConstant
				AND DR.DRKY = A.InvoiceType
			WHERE
				(CompanyConstant = 'A' OR CR.CICO IS NOT NULL)
				AND (InvRestric = '0' OR DR.DRKY IS NOT NULL)
			GROUP BY A.AddressNumber, A.AlphaName, A.InvoiceCompany, A.InvoiceType, A.InvoiceNumber, A.InvoiceSuffix, A.InvoiceDate, A.DueDate, A.CurrencyCode, 
				A.BaseCurrencyCode, A.CurrencyMode, A.CurrencyDesc, A.GrossAmount, A.OpenAmount, A.GrossAmountForeign, A.OpenAmountForeign
		)
		SELECT 
			A.AddressNumber,
			A.AlphaName,
			A.InvoiceCompany,
			A.InvoiceType,
			A.InvoiceNumber,
			A.InvoiceSuffix,
			A.InvoiceDate,
			A.DueDate,
			A.CurrencyCode,
			A.BaseCurrencyCode,	
			A.CurrencyMode,
			A.CurrencyDesc,
			A.GrossAmount,
			A.OpenAmount,
			A.PaidAmount,
			A.InTransitAmount,
			A.GrossAmountForeign,
			A.OpenAmountForeign,
			A.PaidAmountForeign,
			A.InTransitAmountForeign,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM
			PAGING A
		WHERE
			((PageIndex = 0 OR PageSize = 0) OR (A.RNUM BETWEEN ( PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize));
END;
  /

-- #desc					Get the Invoice total Open Amount 
-- #bl_class				Premier.Commerce.InvoicePaymentList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param AddressNumber		Address Number
-- #param InvoiceNumber		Invoice Number
-- #param OrderNumber		Order Number
-- #param StatementNumber	Statement Number
-- #param OpenAmount		Open Amount
-- #param Currency Code		Currency Code
-- #param InvoiceDateFrom	Invoice Date From
-- #param InvoiceDateTo		Invoice Date To
-- #param DueDateFrom		Due Date From
-- #param DueDateTo			Due Date To
-- #param Company			Company
-- #param AllowCreditMemo   Allow Credit Memo
-- #param SortBy			Sort By Column name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageSize			Page Size
-- #param PageIndex			Page Index
							  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePaymentList
(
	InstallationID		IN NCHAR,
	AddressNumber		IN NUMBER,
	InvoiceNumber		IN NUMBER,
	OrderNumber			IN NUMBER,
	StatementNumber		IN NCHAR,
	OpenAmount			IN NUMBER,
	CurrencyCode		IN NCHAR,
	InvoiceDateFrom		IN NUMBER,
	InvoiceDateTo		IN NUMBER,
	DueDateFrom			IN NUMBER,
	DueDateTo			IN NUMBER,
	Company				IN NCHAR,
	AllowCreditMemo		IN NCHAR,
	SortBy				IN VARCHAR2,
	SortDir				IN VARCHAR2,
	PageIndex			IN INT,
    PageSize			IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	/* Dynamic */
	SQL_DYNAMIC			VARCHAR2(8000);
	WHERE_DYNAMIC		NVARCHAR2(1000) := ' ';
	WHERE_DYNAMIC_OPENAMOUNT 	NVARCHAR2(1000) := ' ';
	SORT_DYNAMIC		NVARCHAR2(60);
	SORTDIR_DYNAMIC		NVARCHAR2(5);
	INNER_DYNAMIC		NVARCHAR2(1000) := ' ';

	/* Gets the Account Receivable Document Restrictions */
	ArRestric	 NVARCHAR2(1);
	ArINID		 NCHAR(3) := InstallationID;
	ArConstant   NCHAR(10):= 'AR_RESTRIC';
 
   /* Gets the Sales Order Document Restrictions */
	SOrderRestric   NVARCHAR2(1);   
	SOrderINID      NCHAR(3):= InstallationID;
	SOrderConstant  NCHAR(10) := 'SO_RESTRIC'; 
	
	/*-----------------------------------------------------------------------------*/

	/* Invoice early payments */
	Today			NUMBER(6,0);
	EarlyPayValue   NVARCHAR2(1);   
	EarlyPayINID 	NCHAR(3):= InstallationID;
	
	DFTLMCU    NCHAR(12);   
	SINID      NCHAR(3) := InstallationID;
    CompanyConstant		NVARCHAR2(1);
	 
	 /* Get Accounting Company */
	 AccountingComp   NCHAR(5);	

	 Currency		 NCHAR(3) := CurrencyCode;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);
BEGIN

	[SCLIBRARY].CMM_GetConstantValue('AR_DFTLMCU', SINID, DFTLMCU);
	
	[SCLIBRARY].CMM_GetConstantValue(ArConstant, ArINID, ArRestric);
	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);
	[SCLIBRARY].CMM_GetConstantValue('INVEARLYPY', EarlyPayINID, EarlyPayValue);

	IF (Currency = ' ') THEN
		BEGIN
			SELECT A.CCCRCD into Currency FROM [SCDATA].F0010 A
			INNER JOIN [SCDATA].F0006 B
				ON A.CCCO = B.MCCO 
			WHERE B.MCMCU = DFTLMCU and rownum  < 2;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			Currency := NULL;
		END;
	END IF;	
	
	BEGIN
		SELECT MCCO INTO AccountingComp FROM [SCDATA].F0006 A
		WHERE A.MCMCU = DFTLMCU  and rownum  < 2;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		AccountingComp := NULL;
	END;

	/* Dynamic sort direction statement */
    SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	/* Dynamic sort statement */
    SORT_DYNAMIC := CASE SortBy
						WHEN 'Company' THEN 'Company' || SORTDIR_DYNAMIC
						WHEN 'InvoiceNumber' THEN 'InvoiceNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
						WHEN 'OrderNumber' THEN 'OrderNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
						WHEN 'InvoiceDate' THEN 'InvoiceDate' || SORTDIR_DYNAMIC || ', InvoiceNumber' || SORTDIR_DYNAMIC
						WHEN 'DueDate' THEN 'DueDate' || SORTDIR_DYNAMIC || ', InvoiceNumber' || SORTDIR_DYNAMIC
						WHEN 'StatementNumber' THEN 'StatementNumber ' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
						WHEN 'OpenAmount' THEN CASE EarlyPayValue WHEN 'Y' THEN 'OpenAmountDiscounted' ELSE 'OpenAmount' END || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
						WHEN 'GrossAmount' THEN 'GrossAmount' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
						ELSE 'DueDate ASC, InvoiceNumber ASC'
					END;

	/* Dynamic query conditions */ 
	IF (AddressNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := N'A.RPAN8 = :AddressNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' (1 = 1 OR :AddressNumber IS NULL) ';
	END IF;

	IF (InvoiceNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPDOC = :InvoiceNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceNumber IS NULL) ';
	END IF;

	IF (InvoiceDateFrom IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPDIVJ >= :InvoiceDateFrom ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'  AND (1 = 1 OR :InvoiceDateFrom IS NULL) ';
	END IF;

	IF (InvoiceDateTo IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPDIVJ <= :InvoiceDateTo ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'  AND (1 = 1 OR :InvoiceDateTo IS NULL) ';
	END IF;

	IF (OrderNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPSDOC = :OrderNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'  AND (1 = 1 OR :OrderNumber IS NULL) ';
	END IF;

	IF (DueDateFrom IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPDDJ >= :DueDateFrom ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'  AND (1 = 1 OR :DueDateFrom IS NULL) ';
	END IF;

	IF (DueDateTo IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPDDJ <= :DueDateTo ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'  AND (1 = 1 OR :DueDateTo IS NULL) ';
	END IF;

	/* The Business send parameter in UpperCase */
	IF (StatementNumber <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPCTL LIKE ''%'' || :StatementNumber || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'  AND (1 = 1 OR :StatementNumber = ''*'') ';
	END IF;

	IF (Company <> '*' AND Company <> '00000') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPCO = :Company ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Company = ''*'') ';

		SINID := InstallationID;
		[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', SINID, CompanyConstant);
		IF (CompanyConstant = 'L') THEN
			INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
								ON CR.CI$9INID = ''' || SINID || N'''
									AND CR.CICO = Invoices.Company /*Company*/ ';
		END IF;
	END IF;

	WHERE_DYNAMIC := WHERE_DYNAMIC ||  N' AND A.RPCRCD = :Currency ';

	IF (ArRestric = N'1') THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
											ON DR.DR$9INID = ''' || ArINID || N'''
												AND DR.DR$9CNST = ''AR_RESTRIC''
												AND DR.DRKY = Invoices.InvoiceType ';
	END IF;

	
	IF (EarlyPayValue = 'Y') THEN
		Today := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
		
		/*Credit Memo*/
		IF (AllowCreditMemo = 'Y') THEN
			WHERE_DYNAMIC_OPENAMOUNT := N' ((Invoices.GrossAmount < 0 AND Invoices.OpenAmount < 0 ) OR  Invoices.OpenAmount > 0)';
		ELSE
			WHERE_DYNAMIC_OPENAMOUNT := N' (Invoices.OpenAmountDiscounted > 0.01)';
		END IF ;
		
		IF (OpenAmount IS NOT NULL) THEN
			WHERE_DYNAMIC_OPENAMOUNT := WHERE_DYNAMIC_OPENAMOUNT || N' AND Invoices.OpenAmountDiscounted >= :OpenAmount ';
		ELSE
			WHERE_DYNAMIC_OPENAMOUNT := WHERE_DYNAMIC_OPENAMOUNT || N' AND (1 = 1 OR :OpenAmount IS NULL) ';
		END IF ;
		
		/* Dynamic query */
		SQL_DYNAMIC := 
		N'	WITH Invoices AS 
		(
			SELECT	
				A.RPKCO			AS	InvoiceCompany,
				A.RPDOC			AS	InvoiceNumber,
				A.RPDCT			AS	InvoiceType,
				A.RPDIVJ		AS	InvoiceDate,
				A.RPSKCO		AS  OrderCompany,
				A.RPSDOC		AS	OrderNumber,
				A.RPSDCT		AS	OrderType,
				A.RPDDJ			AS	DueDate,
				A.RPVR01		AS	ReferenceNumber,
				A.RPCTL			AS  StatementNumber,
				A.RPAG					AS  GrossAmount,   
				A.RPAAP - NVL(C.RUAG,0) AS  OpenAmount,
				A.RPACR 				AS  GrossAmountForeign,   
				A.RPFAP - NVL(C.RUAG,0) AS  OpenAmountForeign,
				(CASE WHEN A.RPDDNJ >= :Today THEN (A.RPAAP - NVL(C.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - NVL(C.RUAG,0)) END) AS OpenAmountDiscounted,
				(CASE WHEN A.RPDDNJ >= :Today THEN (A.RPFAP - NVL(C.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - NVL(C.RUAG,0)) END) AS OpenAmountDiscountedForeign, 
				A.RPDDNJ		AS DiscountDueDate,
				A.RPSFX			AS DocumentSuffix,
				A.RPCRCD		AS CurrencyCode, 
				D.CVDL01		AS CurrencyDesc,
				A.RPCRRM		AS CurrencyMode,
				A.RPCO		    AS Company,
				A.RPAN8 AS AddressNumber,
				AB.ABALPH AS AlphaName,
				A.RPEXR1  AS TaxExplanationCode    
			FROM 	[SCDATA].F03B11 A				/*INVOICE*/
			LEFT JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
				FROM [SCDATA].F03B13Z1 WHERE (RUEUPS IN ('' '', ''E''))
				GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) C 	/* ELECTRONIC RECEIPTS INPUT */
				  ON A.RPAN8 = RUAN8				  
					   AND A.RPDOC = RUDOC
					   AND A.RPDCT = RUDCT
					   AND A.RPKCO = RUKCO
					   AND A.RPSFX = RUSFX
			LEFT OUTER JOIN  [SCDATA].F0013 D			/*CURRENCY CODES*/
				ON D.CVCRCD = A.RPCRCD
			INNER JOIN [SCDATA].F0101 AB
				ON AB.ABAN8 = A.RPAN8
			WHERE ' || WHERE_DYNAMIC || N'
		), PAGING AS (
			SELECT 
				Invoices.InvoiceCompany,
				Invoices.InvoiceNumber,
				Invoices.InvoiceType,
				Invoices.InvoiceDate,
				Invoices.OrderCompany,
				Invoices.OrderNumber,
				Invoices.OrderType,
				Invoices.DueDate,
				Invoices.ReferenceNumber,
				Invoices.StatementNumber,
				Invoices.GrossAmount,   
				Invoices.OpenAmount,
				Invoices.GrossAmountForeign,   
				Invoices.OpenAmountForeign,
				(CASE WHEN Invoices.GrossAmount > 0 AND Invoices.OpenAmountDiscounted > 0 THEN Invoices.OpenAmountDiscounted ELSE 0 END) AS OpenAmountDiscounted,
				(CASE WHEN Invoices.GrossAmountForeign > 0 AND Invoices.OpenAmountDiscountedForeign > 0 THEN Invoices.OpenAmountDiscountedForeign ELSE 0 END) AS OpenAmountDiscountedForeign,
				Invoices.DiscountDueDate,
				Invoices.DocumentSuffix,
				Invoices.CurrencyCode, 
				Invoices.CurrencyDesc,
				Invoices.CurrencyMode,
				Invoices.Company,
				E.CCNAME	    AS CompanyName,
				Invoices.AddressNumber,
				Invoices.AlphaName, 
				:AccountingComp  AS AccountingCompany,
				Invoices.TaxExplanationCode,
				ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM
			FROM Invoices  '
			|| INNER_DYNAMIC || N'
			LEFT OUTER JOIN [SCDATA].F0010 E			/*CompanyName*/
				ON E.CCCO = Invoices.Company
			WHERE '	|| WHERE_DYNAMIC_OPENAMOUNT || N'
		)
		SELECT PAGING.InvoiceCompany, PAGING.InvoiceNumber, PAGING.InvoiceType, PAGING.InvoiceDate, PAGING.OrderCompany, PAGING.OrderNumber, 
				PAGING.OrderType, PAGING.DueDate, PAGING.ReferenceNumber, PAGING.StatementNumber, PAGING.GrossAmount, PAGING.OpenAmount, PAGING.GrossAmountForeign, PAGING.OpenAmountForeign, 
				PAGING.OpenAmountDiscounted, PAGING.OpenAmountDiscountedForeign, PAGING.DiscountDueDate, PAGING.DocumentSuffix, PAGING.CurrencyCode, PAGING.CurrencyDesc, PAGING.CurrencyMode, 
				PAGING.Company, PAGING.CompanyName, (CASE WHEN :SOrderRestric = ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS ISORDERRESTRICTED, 
				PAGING.AddressNumber, PAGING.AlphaName, PAGING.AccountingCompany, PAGING.TaxExplanationCode, 
				(SELECT COUNT(1) FROM [SCDATA].FQ670314 B WHERE B.PDDOC = PAGING.InvoiceNumber AND B.PDDCT = PAGING.InvoiceType AND B.PDKCO = PAGING.InvoiceCompany AND B.PDSFX = PAGING.DocumentSuffix) AS ScheduledPayment,
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount 
		FROM PAGING
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON  DR.DRKY = PAGING.OrderType
			AND DR.DR$9INID = :SOrderINID
			AND DR.DR$9CNST = :SOrderConstant
		WHERE 
			((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';
		
		OPEN ResultData1 FOR SQL_DYNAMIC USING Today, Today, AddressNumber, InvoiceNumber, InvoiceDateFrom, InvoiceDateTo, OrderNumber,DueDateFrom, 
												DueDateTo, StatementNumber, Company, Currency, AccountingComp, OpenAmount, SOrderRestric, SOrderINID, 
												SOrderConstant, PageIndex, PageSize, RowStart, RowEnd;
		
		
	ELSE
		IF (OpenAmount IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (A.RPAAP - NVL(C.RUAG,0)) >= :OpenAmount ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N'  AND (1 = 1 OR :OpenAmount IS NULL) ';
		END IF ;
		
		/*Credit Memo*/
		IF (AllowCreditMemo = 'Y') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (A.RPAAP - NVL(C.RUAG,0)) <> 0 ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (A.RPAAP - NVL(C.RUAG,0)) >= 0.01 ';
		END IF ;
		
		/* Dynamic query */
		SQL_DYNAMIC := 
		N'	WITH PAGING AS 
		(
			SELECT Invoices.*, ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM, COUNT(1) OVER () AS TotalRowCount FROM 
			(
				SELECT	
					A.RPKCO			AS	InvoiceCompany,
					A.RPDOC			AS	InvoiceNumber,
					A.RPDCT			AS	InvoiceType,
					A.RPDIVJ		AS	InvoiceDate,
					A.RPSKCO		AS  OrderCompany,
					A.RPSDOC		AS	OrderNumber,
					A.RPSDCT		AS	OrderType,
					A.RPDDJ			AS	DueDate,
					A.RPVR01		AS	ReferenceNumber,
					A.RPCTL			AS  StatementNumber,
					A.RPAG					AS  GrossAmount,   
					A.RPAAP - NVL(C.RUAG,0) AS  OpenAmount,
					A.RPACR 				AS  GrossAmountForeign,   
					A.RPFAP - NVL(C.RUAG,0) AS  OpenAmountForeign,
					A.RPSFX			AS DocumentSuffix,
					A.RPCRCD		AS CurrencyCode, 
					D.CVDL01		AS CurrencyDesc,
					A.RPCRRM		AS CurrencyMode,
					A.RPCO		    AS Company,
					E.CCNAME	    AS CompanyName,
					A.RPAN8 AS AddressNumber,
					AB.ABALPH AS AlphaName,
					:AccountingComp  AS AccountingCompany,
					A.RPEXR1  AS TaxExplanationCode    
				FROM 	[SCDATA].F03B11 A				/*INVOICE*/
				LEFT JOIN (SELECT RUDOC,RUDCT,RUKCO,RUSFX,SUM(RUAG) AS RUAG,RUAN8 
					FROM [SCDATA].F03B13Z1 WHERE (RUEUPS IN ('' '', ''E''))
					GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) C 	/* ELECTRONIC RECEIPTS INPUT */
					  ON A.RPAN8 = RUAN8				  
						   AND A.RPDOC = RUDOC
						   AND A.RPDCT = RUDCT
						   AND A.RPKCO = RUKCO
						   AND A.RPSFX = RUSFX
			  LEFT OUTER JOIN  [SCDATA].F0013 D			/*CURRENCY CODES*/
					ON D.CVCRCD = A.RPCRCD
			  LEFT OUTER JOIN [SCDATA].F0010 E			/*CompanyName*/
					ON E.CCCO = A.RPCO
			  INNER JOIN [SCDATA].F0101 AB
					ON AB.ABAN8 = A.RPAN8
				WHERE ' || WHERE_DYNAMIC || N'
			) Invoices 
			' || INNER_DYNAMIC || N'
		)
		SELECT PAGING.InvoiceCompany, PAGING.InvoiceNumber, PAGING.InvoiceType, PAGING.InvoiceDate, PAGING.OrderCompany, PAGING.OrderNumber, 
				PAGING.OrderType, PAGING.DueDate, PAGING.ReferenceNumber, PAGING.StatementNumber, PAGING.GrossAmount, PAGING.OpenAmount, PAGING.GrossAmountForeign, PAGING.OpenAmountForeign, 
				0 AS OpenAmountDiscounted, 0 AS OpenAmountDiscountedForeign, 0 AS DiscountDueDate, PAGING.DocumentSuffix, PAGING.CurrencyCode, PAGING.CurrencyDesc, PAGING.CurrencyMode, 
				PAGING.Company, PAGING.CompanyName, (CASE WHEN :SOrderRestric = ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS ISORDERRESTRICTED, 
				PAGING.AddressNumber, PAGING.AlphaName, PAGING.AccountingCompany, PAGING.TaxExplanationCode, 
				(SELECT COUNT(1) FROM [SCDATA].FQ670314 B WHERE B.PDDOC = PAGING.InvoiceNumber AND B.PDDCT = PAGING.InvoiceType AND B.PDKCO = PAGING.InvoiceCompany AND B.PDSFX = PAGING.DocumentSuffix) AS ScheduledPayment,
				PAGING.TotalRowCount 
		FROM PAGING
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON  DR.DRKY = PAGING.OrderType
			AND DR.DR$9INID = :SOrderINID
			AND DR.DR$9CNST = :SOrderConstant
		WHERE 
			((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';
		
		OPEN ResultData1 FOR SQL_DYNAMIC USING AccountingComp, AddressNumber, InvoiceNumber, InvoiceDateFrom, InvoiceDateTo, OrderNumber,
												DueDateFrom, DueDateTo, StatementNumber, Company, Currency, OpenAmount, SOrderRestric, SOrderINID, 
												SOrderConstant, PageIndex, PageSize, RowStart, RowEnd;
	END IF;
	
END;

  /
-- #desc						Returns the last InvoicesToDisplay most recent invoices
-- #bl_class					Premier.Commerce.InvoiceRecentList.cs 
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param AddressNumber			Address Number
-- #param Company				Company 
-- #param InvoicesToDisplay		Quantity of rows to be returned
-- #param LastDays				Filter orders in last 0 or N days

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceRecentList
(
	StoreId			    IN NCHAR,
	AddressNumber		IN NUMBER,
	Company       		IN NCHAR,
	InvoicesToDisplay	IN INT,
	LastDays			IN INT,
	ResultData1 OUT GLOBALPKG.refcursor     
)
AS
	CompanyTemp NCHAR(5) := Company;

	/* Gets the Account Receivable Document Restrictions */
	ArRestric	 NVARCHAR2(1);
	ArINID		 NCHAR(3) := StoreId;
	ArConstant   NCHAR(10):= 'AR_RESTRIC';

	/* Read Account Receivable company constant */
	CompanyConstant		NVARCHAR2(1);
	ConstantStore NCHAR(3):= StoreId; 

	/* Filter last N days */
	DateFrom NUMBER(6,0);
	DateTo NUMBER(6,0);

	/* Invoice early payments */
	Today			NUMBER(6,0);
	EarlyPayValue   NVARCHAR2(1);   
	EarlyPayINID 	NCHAR(3):= StoreId;

BEGIN

	[SCLIBRARY].CMM_GetConstantValue(ArConstant, ArINID, ArRestric);
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantStore, CompanyConstant);
	[SCLIBRARY].CMM_GetConstantValue('INVEARLYPY', EarlyPayINID, EarlyPayValue);

	/* Filter last N days */
	DateFrom := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - LastDays);
	DateTo := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	Today := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	IF (CompanyTemp = '00000') THEN 
		CompanyTemp := '*';
	END IF;

	
	IF(LastDays = 0) THEN
		BEGIN 
			IF (EarlyPayValue = 'Y') THEN
				BEGIN
					OPEN ResultData1 FOR
						WITH CTE AS	(	
							SELECT 
								A.RPKCO							AS InvoiceCompany,	
								A.RPDCT							AS InvoiceType,	
								A.RPDOC							AS InvoiceNumber,	
								A.RPDIVJ						AS InvoiceDate,
								A.RPCRCD						AS CurrencyCode,
								A.RPCRRM						AS CurrencyMode,
								SUM(A.RPAG)						AS GrossAmount,
								SUM(A.RPAAP - NVL(E.RUAG,0))	AS OpenAmount ,
								SUM(A.RPACR)					AS GrossAmountForeign,
								SUM(A.RPFAP - NVL(E.RUAG,0))	AS OpenAmountForeign,
								A.RPBCRC						AS BaseCurrencyCode,
								A.RPDDNJ						AS DiscountDueDate,
								SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPAAP - NVL(E.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - NVL(E.RUAG,0)) END)) AS OpenAmountDiscounted,
								SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPFAP - NVL(E.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - NVL(E.RUAG,0)) END)) AS OpenAmountDiscountedForeign, 
								ROW_NUMBER() OVER (ORDER BY A.RPDIVJ DESC, A.RPDOC DESC) AS RNUM
							FROM [SCDATA].F03B11 A						/* Invoice table */
							LEFT OUTER JOIN [SCDATA].F0013 C			/* Currency Master */
								ON C.CVCRCD = A.RPCRCD
							LEFT OUTER JOIN [SCDATA].F0013 D			/* Base currency */
								ON D.CVCRCD = A.RPBCRC
							LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 
										FROM [SCDATA].F03B13Z1 
										WHERE RUEUPS IN(' ', 'E') 
										GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) E 		/* ELECTRONIC RECEIPTS INPUT */
								ON A.RPAN8 = E.RUAN8				  
								AND A.RPDOC = E.RUDOC
								AND A.RPDCT = E.RUDCT
								AND A.RPKCO = E.RUKCO
								AND A.RPSFX = E.RUSFX
							LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
							ON CI$9INID = ConstantStore
							AND CICO = RPCO
							LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
							ON DR.DR$9INID = ArINID 
							AND DR.DR$9CNST = ArConstant
							AND DR.DRKY = A.RPDCT
						WHERE  A.RPAN8 = AddressNumber
							AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
							AND (A.RPCO = CompanyTemp OR (CompanyTemp = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
						GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC, A.RPDDNJ
						)
						SELECT 	
							A.InvoiceCompany,
							A.InvoiceType,	
							A.InvoiceNumber,
							A.InvoiceDate,
							A.CurrencyCode,
							A.CurrencyMode,
							A.GrossAmount,
							A.OpenAmount,
							A.GrossAmountForeign,
							A.OpenAmountForeign,
							A.BaseCurrencyCode,
							A.DiscountDueDate,
							A.OpenAmountDiscounted,
							A.OpenAmountDiscountedForeign

						FROM 
							CTE A
						WHERE RNUM BETWEEN 1 AND InvoicesToDisplay;
				END;
			ELSE
				BEGIN
					OPEN ResultData1 FOR
						WITH CTE AS	(	
							SELECT 
								A.RPKCO							AS InvoiceCompany,	
								A.RPDCT							AS InvoiceType,	
								A.RPDOC							AS InvoiceNumber,	
								A.RPDIVJ						AS InvoiceDate,
								A.RPCRCD						AS CurrencyCode,
								A.RPCRRM						AS CurrencyMode,
								SUM(A.RPAG)						AS GrossAmount,
								SUM(A.RPAAP - NVL(E.RUAG,0))	AS OpenAmount ,
								SUM(A.RPACR)					AS GrossAmountForeign,
								SUM(A.RPFAP - NVL(E.RUAG,0))	AS OpenAmountForeign,
								A.RPBCRC						AS BaseCurrencyCode,
								0								AS DiscountDueDate,
								0								AS OpenAmountDiscounted,
								0								AS OpenAmountDiscountedForeign, 
								ROW_NUMBER() OVER (ORDER BY A.RPDIVJ DESC, A.RPDOC DESC) AS RNUM
							FROM [SCDATA].F03B11 A						/* Invoice table */
							LEFT OUTER JOIN [SCDATA].F0013 C			/* Currency Master */
								ON C.CVCRCD = A.RPCRCD
							LEFT OUTER JOIN [SCDATA].F0013 D			/* Base currency */
								ON D.CVCRCD = A.RPBCRC
							LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 
										FROM [SCDATA].F03B13Z1 
										WHERE RUEUPS IN(' ', 'E') 
										GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) E 		/* ELECTRONIC RECEIPTS INPUT */
								ON A.RPAN8 = E.RUAN8				  
								AND A.RPDOC = E.RUDOC
								AND A.RPDCT = E.RUDCT
								AND A.RPKCO = E.RUKCO
								AND A.RPSFX = E.RUSFX
							LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
							ON CI$9INID = ConstantStore
							AND CICO = RPCO
							LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
							ON DR.DR$9INID = ArINID 
							AND DR.DR$9CNST = ArConstant
							AND DR.DRKY = A.RPDCT
						WHERE  A.RPAN8 = AddressNumber
							AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
							AND (A.RPCO = CompanyTemp OR (CompanyTemp = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
						GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC
						)
						SELECT 	
							A.InvoiceCompany,
							A.InvoiceType,	
							A.InvoiceNumber,
							A.InvoiceDate,
							A.CurrencyCode,
							A.CurrencyMode,
							A.GrossAmount,
							A.OpenAmount,
							A.GrossAmountForeign,
							A.OpenAmountForeign,
							A.BaseCurrencyCode,
							A.DiscountDueDate,
							A.OpenAmountDiscounted,
							A.OpenAmountDiscountedForeign
						FROM 
							CTE A
						WHERE RNUM BETWEEN 1 AND InvoicesToDisplay;
					END;
			END IF;
		END;
	ELSE
		BEGIN
			IF (EarlyPayValue = 'Y') THEN
				BEGIN
					OPEN ResultData1 FOR
						WITH CTE AS	(	
							SELECT 
								A.RPKCO							AS InvoiceCompany,	
								A.RPDCT							AS InvoiceType,	
								A.RPDOC							AS InvoiceNumber,	
								A.RPDIVJ						AS InvoiceDate,
								A.RPCRCD						AS CurrencyCode,
								A.RPCRRM						AS CurrencyMode,
								SUM(A.RPAG)						AS GrossAmount,
								SUM(A.RPAAP - NVL(E.RUAG,0))	AS OpenAmount ,
								SUM(A.RPACR)					AS GrossAmountForeign,
								SUM(A.RPFAP - NVL(E.RUAG,0))	AS OpenAmountForeign,
								A.RPBCRC						AS BaseCurrencyCode,
								A.RPDDNJ						AS DiscountDueDate,
								SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPAAP - NVL(E.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - NVL(E.RUAG,0)) END)) AS OpenAmountDiscounted,
								SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPFAP - NVL(E.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - NVL(E.RUAG,0)) END)) AS OpenAmountDiscountedForeign, 
								ROW_NUMBER() OVER (ORDER BY A.RPDIVJ DESC, A.RPDOC DESC) AS RNUM
							FROM [SCDATA].F03B11 A						/* Invoice table */
							LEFT OUTER JOIN [SCDATA].F0013 C			/* Currency Master */
								ON C.CVCRCD = A.RPCRCD
							LEFT OUTER JOIN [SCDATA].F0013 D			/* Base currency */
								ON D.CVCRCD = A.RPBCRC
							LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 
										FROM [SCDATA].F03B13Z1 
										WHERE RUEUPS IN(' ', 'E') 
										GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) E 		/* ELECTRONIC RECEIPTS INPUT */
								ON A.RPAN8 = E.RUAN8				  
								AND A.RPDOC = E.RUDOC
								AND A.RPDCT = E.RUDCT
								AND A.RPKCO = E.RUKCO
								AND A.RPSFX = E.RUSFX
							LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
							ON CI$9INID = ConstantStore
							AND CICO = RPCO
							LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
							ON DR.DR$9INID = ArINID 
							AND DR.DR$9CNST = ArConstant
							AND DR.DRKY = A.RPDCT
						WHERE  A.RPAN8 = AddressNumber
							AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
							AND (A.RPCO = CompanyTemp OR (CompanyTemp = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
							AND A.RPDIVJ BETWEEN DateFrom AND DateTo				/* Filter last N days */
						GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC, A.RPDDNJ
						)
						SELECT 	
							A.InvoiceCompany,
							A.InvoiceType,	
							A.InvoiceNumber,
							A.InvoiceDate,
							A.CurrencyCode,
							A.CurrencyMode,
							A.GrossAmount,
							A.OpenAmount,
							A.GrossAmountForeign,
							A.OpenAmountForeign,
							A.BaseCurrencyCode,
							A.DiscountDueDate,
							A.OpenAmountDiscounted,
							A.OpenAmountDiscountedForeign
						FROM 
							CTE A
						WHERE RNUM BETWEEN 1 AND InvoicesToDisplay;
				END;
			ELSE
				BEGIN 
					OPEN ResultData1 FOR
						WITH CTE AS	(	
							SELECT 
								A.RPKCO							AS InvoiceCompany,	
								A.RPDCT							AS InvoiceType,	
								A.RPDOC							AS InvoiceNumber,	
								A.RPDIVJ						AS InvoiceDate,
								A.RPCRCD						AS CurrencyCode,
								A.RPCRRM						AS CurrencyMode,
								SUM(A.RPAG)						AS GrossAmount,
								SUM(A.RPAAP - NVL(E.RUAG,0))	AS OpenAmount ,
								SUM(A.RPACR)					AS GrossAmountForeign,
								SUM(A.RPFAP - NVL(E.RUAG,0))	AS OpenAmountForeign,
								A.RPBCRC						AS BaseCurrencyCode,
								0								AS DiscountDueDate,
								0								AS OpenAmountDiscounted,
								0								AS OpenAmountDiscountedForeign, 
								ROW_NUMBER() OVER (ORDER BY A.RPDIVJ DESC, A.RPDOC DESC) AS RNUM
							FROM [SCDATA].F03B11 A						/* Invoice table */
							LEFT OUTER JOIN [SCDATA].F0013 C			/* Currency Master */
								ON C.CVCRCD = A.RPCRCD
							LEFT OUTER JOIN [SCDATA].F0013 D			/* Base currency */
								ON D.CVCRCD = A.RPBCRC
							LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 
										FROM [SCDATA].F03B13Z1 
										WHERE RUEUPS IN(' ', 'E') 
										GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) E 		/* ELECTRONIC RECEIPTS INPUT */
								ON A.RPAN8 = E.RUAN8				  
								AND A.RPDOC = E.RUDOC
								AND A.RPDCT = E.RUDCT
								AND A.RPKCO = E.RUKCO
								AND A.RPSFX = E.RUSFX
							LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
							ON CI$9INID = ConstantStore
							AND CICO = RPCO
							LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
							ON DR.DR$9INID = ArINID 
							AND DR.DR$9CNST = ArConstant
							AND DR.DRKY = A.RPDCT
						WHERE  A.RPAN8 = AddressNumber
							AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
							AND (A.RPCO = CompanyTemp OR (CompanyTemp = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
							AND A.RPDIVJ BETWEEN DateFrom AND DateTo				/* Filter last N days */
						GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC
						)
						SELECT 	
							A.InvoiceCompany,
							A.InvoiceType,	
							A.InvoiceNumber,
							A.InvoiceDate,
							A.CurrencyCode,
							A.CurrencyMode,
							A.GrossAmount,
							A.OpenAmount,
							A.GrossAmountForeign,
							A.OpenAmountForeign,
							A.BaseCurrencyCode,
							A.DiscountDueDate,
							A.OpenAmountDiscounted,
							A.OpenAmountDiscountedForeign

						FROM 
							CTE A
						WHERE RNUM BETWEEN 1 AND InvoicesToDisplay;
					END;
				END IF;
			END;
	END IF;
END;
  /
-- #desc					Search for invoice summarized
-- #bl_class				Premier.Commerce.InvoiceSearchList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param InvoiceNumber		Invoice Number			
-- #param OrderNumber		OrderNumber	
-- #param AddressNumber		Address Number
-- #param ReferenceNumber	Reference Number	
-- #param JulianDateFrom	JulianDate From
-- #param JulianDateTo		JulianDate To
-- #param AllOpenInvoice	All Open Invoice
-- #param SortBy			Sort By Column name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageSize			Page Size
-- #param PageIndex			Page Index


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceSearchList
(
	InstallationID				IN NCHAR,
	AddressNumber				IN NUMBER,
	InvoiceNumber				IN NUMBER,
	OrderNumber					IN NUMBER,
	ReferenceNumber				IN NCHAR,
	JulianDateFrom				IN NUMBER,
	JulianDateTo				IN NUMBER,
	AllOpenInvoice				IN NVARCHAR2,
	SortBy						IN NVARCHAR2,
	SortDir						IN NVARCHAR2,
	PageIndex					INT,
    PageSize					INT,
    ResultData1 OUT GLOBALPKG.refcursor
  )
AS
	/* Dynamic */
	SQL_DYNAMIC					VARCHAR2(5000);
	WHERE_DYNAMIC				NVARCHAR2(1000) := ' ';
	INNER_DYNAMIC				NVARCHAR2(1000) := ' ';
	OPENINVOICES_WHERE_DYNAMIC	NVARCHAR2(1000) := ' ';
	SORT_DYNAMIC				NVARCHAR2(130);
	SORTDIR_DYNAMIC				NVARCHAR2(5);

	/* Gets the Invoice Document Restrictions Parameters */
	InvRestric		NVARCHAR2(1);
	InvINID			NCHAR(3):= InstallationID;
	InvConstant		NCHAR(10):= 'AR_RESTRIC';
	 	 
	/* Gets the Sales Order Document Restrictions Parameters */
	SORestric	NVARCHAR2(1);  
	SOINID		NCHAR(3):= InstallationID; 
	SOConstant	NCHAR(10):= 'SO_RESTRIC'; 
	 
	CompanyConstant		NVARCHAR2(1);
	ConstantInstallation NCHAR(3):= InstallationID; 

	/* Gets Foreign Setting */
	ForeignConstant	NVARCHAR2(1);
	ForeignConstantINID		NCHAR(3) := InstallationID;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);

	BEGIN
		[SCLIBRARY].CMM_GetConstantValue(InvConstant,InvINID, InvRestric);
		[SCLIBRARY].CMM_GetConstantValue (SOConstant, SOINID, SORestric);
		[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
		[SCLIBRARY].CMM_GetConstantValue('FOREGCURYN', ForeignConstantINID, ForeignConstant);
        
        
		/* Dynamic sort direction statement */
		SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

		/* Dynamic sort statement */
		SORT_DYNAMIC := CASE SortBy
							WHEN 'InvoiceNumber' THEN 'InvoiceNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
							WHEN 'InvoiceDate' THEN 'InvoiceDate' || SORTDIR_DYNAMIC || ', InvoiceNumber' || SORTDIR_DYNAMIC
							WHEN 'OrderNumber' THEN 'OrderNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
							WHEN 'CustomerReference' THEN 'YourReference' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
							WHEN 'OpenAmount' THEN '(CASE WHEN (CurrencyMode = ''F'' AND ''' || ForeignConstant || ''' = ''Y'') THEN OpenAmountForeign ELSE OpenAmount END)' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
							WHEN 'GrossAmount' THEN '(CASE WHEN (CurrencyMode = ''F'' AND ''' || ForeignConstant || ''' = ''Y'') THEN GrossAmountForeign ELSE GrossAmount END)' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
							WHEN 'CurrencyCode' THEN 'CurrencyCode' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
							ELSE 'InvoiceDate DESC, InvoiceNumber DESC'
						END;
		
		
		IF (InvoiceNumber IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPDOC = :InvoiceNumber ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :InvoiceNumber IS NULL) ';
		END IF;

		IF (JulianDateFrom > 0 AND JulianDateTo > 0) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (A.RPDIVJ >= :JulianDateFrom AND A.RPDIVJ <= :JulianDateTo )';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :JulianDateFrom = 0 OR :JulianDateTo = 0) ';
		END IF;

		IF (OrderNumber IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.RPSDOC = :OrderNumber ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :OrderNumber IS NULL) ';
		END IF;

		/* The Business send parameter in UpperCase */
		IF (ReferenceNumber <> '*') THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (UPPER(A.RPVR01) like ''%'' || :ReferenceNumber || ''%'')';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ReferenceNumber = ''*'') ';
		END IF;

		IF (CompanyConstant = N'L') THEN
			INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
													ON CR.CI$9INID = ''' || ConstantInstallation || N'''
													AND CR.CICO = Invoices.RPCO /*Company*/ ';
		END IF;

		IF (InvRestric = N'1') THEN
			INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
												 ON DR.DR$9INID = ''' || InvINID || N'''
													AND DR.DR$9CNST = ''' || InvConstant || N''' 
													AND DR.DRKY = Invoices.InvoiceType ';
		END IF;
		
		IF (AllOpenInvoice = N'1') THEN
			OPENINVOICES_WHERE_DYNAMIC := OPENINVOICES_WHERE_DYNAMIC || N' WHERE ((Invoices.CurrencyMode = ''D'' OR Invoices.CurrencyMode = '' '' OR Invoices.CurrencyMode IS NULL) AND Invoices.OpenAmount > 0) 
													OR (Invoices.CurrencyMode = ''F'' AND Invoices.OpenAmountForeign > 0) ';
		END IF;

		/* Dynamic query */
		SQL_DYNAMIC := N'
		WITH PAGING AS 
		(
			SELECT Invoices.*, ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||') AS RNUM, COUNT(1) OVER () AS TotalRowCount FROM 
			(
				SELECT
					A.RPAN8			AS AddressNumber,	
					A.RPKCO			AS InvoiceCompany ,	
					A.RPDCT			AS InvoiceType ,	
					A.RPDOC			AS InvoiceNumber,	
					A.RPDIVJ		AS InvoiceDate,
					A.RPSKCO		AS OrderCompany,
					A.RPSDCT		AS OrderType ,
					A.RPSDOC		AS OrderNumber,
					A.RPVR01		AS YourReference,
					A.RPCRCD		AS CurrencyCode,
					A.RPCRRM		AS CurrencyMode,
					C.CVDL01		AS CurrencyDesc,
					SUM(A.RPAG)		AS GrossAmount,
					SUM(A.RPAAP - NVL(E.RUAG,0))	AS OpenAmount ,
					SUM(A.RPACR)	AS GrossAmountForeign,
					SUM(A.RPFAP - NVL(E.RUAG,0))	AS OpenAmountForeign,
					''''				AS DocumentSuffix,
					A.RPBCRC		AS BaseCurrencyCode,
					D.CVDL01		AS BaseCurrencyDesc,
					A.RPCO
				FROM 	[SCDATA].F03B11 A		/* Invoice table */
					LEFT OUTER JOIN [SCDATA].F0013 C			/* Currency Master */
						ON A.RPCRCD = C.CVCRCD
					LEFT OUTER JOIN [SCDATA].F0013 D			/* Base currency */
						ON A.RPBCRC = D.CVCRCD
					LEFT JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN('' '', ''E'') GROUP BY RUDOC,RUDCT,RUKCO,RUSFX,RUAN8) E 	/* ELECTRONIC RECEIPTS INPUT */
						ON A.RPAN8 = E.RUAN8				  
						AND A.RPDOC = E.RUDOC
						AND A.RPDCT = E.RUDCT
						AND A.RPKCO = E.RUKCO
						AND A.RPSFX = E.RUSFX
				WHERE (A.RPAN8 = :AddressNumber)	/* ADDRESS NUMBER */
					' || WHERE_DYNAMIC || '
				GROUP BY A.RPAN8, A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPSKCO, A.RPSDCT, A.RPSDOC, A.RPVR01,
					A.RPCRCD, A.RPCRRM, C.CVDL01, A.RPBCRC, D.CVDL01, A.RPCO
			) Invoices 
			' || INNER_DYNAMIC 
			|| OPENINVOICES_WHERE_DYNAMIC || '
	)
	SELECT PAGING.AddressNumber, PAGING.InvoiceCompany, PAGING.InvoiceType,	PAGING.InvoiceNumber, PAGING.InvoiceDate, PAGING.OrderCompany, 
			PAGING.OrderType, PAGING.OrderNumber, PAGING.YourReference, PAGING.CurrencyCode, PAGING.CurrencyMode, PAGING.CurrencyDesc,
			PAGING.GrossAmount, PAGING.OpenAmount, PAGING.GrossAmountForeign, PAGING.OpenAmountForeign, PAGING.DocumentSuffix, 
			(CASE WHEN :SORestric = ''1'' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END) AS ISORDERRESTRICTED, 
			PAGING.BaseCurrencyCode, PAGING.BaseCurrencyDesc, 
			(SELECT COUNT(1) FROM [SCDATA].FQ670314 B WHERE B.PDDOC = PAGING.InvoiceNumber AND B.PDDCT = PAGING.InvoiceType AND B.PDKCO = PAGING.InvoiceCompany) AS ScheduledPayment,
			PAGING.TotalRowCount 
	FROM PAGING
	LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
		ON SOR1.DR$9INID = :SOINID
		AND SOR1.DR$9CNST = :SOConstant 
		AND SOR1.DRKY = PAGING.OrderType
	WHERE 
		((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) 
	ORDER BY RNUM ';
	
	OPEN ResultData1 FOR SQL_DYNAMIC USING AddressNumber, InvoiceNumber, JulianDateFrom, JulianDateTo, OrderNumber, ReferenceNumber, 
											SORestric, SOINID, SOConstant, PageIndex, PageSize, RowStart, RowEnd;

	END;
  /
-- #desc					Load the Line Price History from DB
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- param ComputerID			Computer ID
-- param JobNumber			Job Number
-- param ProcessID			Process ID
-- param TransactionID		Transaction ID
-- param LineNumber			Line Number
-- param PriceAdjRevLevel	Current PriceAdjRevLevel to search for(edit Line Value)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetLinePriceHistoryList
(
	ComputerID	IN NVARCHAR2,
	JobNumber	IN DECIMAL,
	ProcessID	IN DECIMAL,
	TransactionID IN DECIMAL,
	LineNumber  IN DECIMAL,
	PriceAdjRevLevel IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

MaxAdjRevLevel DECIMAL := 0;

BEGIN

SELECT MAX ( AWAREV ) INTO MaxAdjRevLevel
FROM [SCDATA].F40UI74
	WHERE 
		TRIM(AWCTID) = TRIM(ComputerID) AND 
		AWJOBS = JobNumber AND
		AWPEID = ProcessID AND
		AWTCID = TransactionID AND
		AWLNID = LineNumber;


OPEN ResultData1 FOR

SELECT 
		AWCTID ComputerID ,
		AWJOBS JobNumber ,
		AWPEID ProcessID,
		AWTCID TransactionID,
		AWXLIN LineNumber2,
		AWAREV AdjustmentRevisionLevel,
		AWDOCO OrderNumber,
		AWDCTO OrderType,
		AWKCOO OrderCompany,
		' ' AS OrderSuffix, --AWSFXO
		AWLNID LineNumber,
		--AWAKID PriceHistoryAltKey,
		--AWSRCFD PriceHistoryAltKeySource,
		AWOSEQ SequenceNumber,
		--AWSUBSEQ SubSequenceNum,
		--AWTIER Tier,
		AWASN PriceAdjustmentSchedule,
		AWAST PriceAdjustmentType,
		--(SELECT TOP 1 DRDL01 FROM [SCCTL].F0005 WHERE DRSY = '40' AND DRRT = 'TY' AND RTRIM(LTRIM(DRKY)) = RTRIM(LTRIM(AWAST))) AS PriceAdjustmentTypeDesc,
		' ' AS PriceAdjustmentTypeDesc,
		AWITM ShortItemNumber,
		AWAN8 AddressNumber,
		AWCRCD CurrencyCodeFrom,
		AWUOM UnitOfMeasure,
		AWMNQ QuantityMinimum,
		AWLEDG LedgType,
		AWFRMN PriceFormulaName,
		AWBSCD BasisCode,
		--(SELECT TOP 1 DRDL01 FROM [SCCTL].F0005 WHERE DRSY = '40' AND DRRT = 'BC' AND RTRIM(LTRIM(DRKY)) = RTRIM(LTRIM(AWBSCD))) AS BasisCodeDesc,
		' ' AS BasisCodeDesc,
		AWFVTR FactorValue,
		AWABAS AdjustmentBasedOn,
		AWUPRC UnitPrice,
		AWFUP ForeignUnitPrice,
		AWGLC GlClass,
		AWARSN AdjustmentReasonCode,
		--(SELECT TOP 1 DRDL01 FROM [SCCTL].F0005 WHERE DRSY = '40' AND DRRT = 'AR' AND RTRIM(LTRIM(DRKY)) = RTRIM(LTRIM(AWARSN))) AS AdjustmentReasonCodeDesc,
		' ' AS AdjustmentReasonCodeDesc,
		AWACNT AdjustmentControlCode,
		AWSBIF SubledgerInformation,
		AWMDED ManualDiscount,
		AWPROV PriceOverrideCode,
		AWATID PriceAdjustmentKeyID,
		AWLITM LongItemNumber,
		AWAITM AuxItemNumber,
		AWDSC1 ItemDescription1,
		AWLNTY LineType,
		AWUORG UnitsTransactionQty,
		AWFGY FreeGoodsYN,
		AWORPR OrderRepriceCategory,
		AWSO08 SalesOrderStatus,
		AWRPRC RepriceBasketPriceCat,
		AWOLVL OrderLevelAdjustmentYN
		/*AWCATLG FreeGoodCatalogName,
		AWIGID ItemGroupKeyID,
		AWCGID CustomerGroupKeyID,
		AWOGID OrderGroupKeyID,
		AWANPS AddressNumberPriceAdjust,
		AWBSDVAL BasedOnValue,
		AWSRFLAG SlidingRateFlag,
		AWADJCAL AdjustmentCalculation,
		AWNBRORD NumberofOrders,
		AWUOMVID UOMforVolueIncentives,
		AWACCAN8 AccumulateAtAddress,
		AWBNAD BeneficiaryAddress,
		AWADJGRP AdjustmentGroup,
		AWMEADJ MutuallyExclusiveAdjustment,
		AWADJSTS AdjustmentStatus,
		AWADJREF AdjustmentReference,
		AWFVUM FactorValueUM,
		AWPDCL PromotionDisplayControl,
		AWCFGID ConfigurationIDNumber,
		AWCFGCID 
		AWAPRP1 PricingReportCode1,
		AWAPRP2 PricingReportCode2,
		AWAPRP3 PricingReportCode3,
		AWAPRP4 PricingReportCode4,
		AWAPRP5 PricingReportCode5,
		AWAPRP6 PricingReportCode6,
		AWNDPI NetDownPriceIndicator,
		AWRULENAME RuleName,
		AWPA04
		AWPMTN*/
	FROM [SCDATA].F40UI74
	WHERE 
		TRIM(AWCTID) = TRIM(ComputerID) AND 
		AWJOBS = JobNumber AND
		AWPEID = ProcessID AND
		AWTCID = TransactionID AND
		AWLNID = LineNumber AND
		AWAREV = MaxAdjRevLevel
	ORDER BY AWOSEQ ASC;

END;


  /

-- #desc				
-- #bl_class				Premier.Commerce.LineSerialNumbers.cs
-- #db_dependencies			N/A
-- #db_references			N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- param ComputerID			Computer ID
-- param JobNumber			Job Number
-- param ProcessID			Process ID
-- param TransactionID		Transaction ID
-- param LineNumber			Line Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetLineSerialNumbers
(
	Company    IN NVARCHAR2,
	OrderType  IN NVARCHAR2,
	OrderNumber IN decimal,
	LineNumber IN decimal,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
OPEN ResultData1 FOR

 SELECT 
	SWITM IdentifierShortItem, 
	SWLITM Identifier2ndItem,
	SWAITM Identifier3rdItem,
	SWDSC1 DescriptionLine1,
	SWDSC2 DescriptionLine2,
	SWDSC3 DescriptionLine3,
	SWMCU  CostCenter,
	SWLOTN Lot,
	SWLOCN Location,
	SWAN8  AddressNumber,
	SWSHAN AddressNumberShipTo, 
	SWKCOO Company,
	SWDOCO OrderNumber,
	SWDCTO OrderType,
	SWSFXO OrderSuffix,
	SWLNID LineNumber,
	SWORDJ DateOrderedJulian,
	SWSHPJ DateShippedJulian,
	SWSRL1 SerialNumber1,
	SWSRL2 SerialNumber2,
	SWVEND PrimaryLastVendorNo, 
	SWWARR TypeWarranty,
	SWWARJ DateWarrantyExpiraJu,
	SWWRLF WarrantyLifeInDays,
	SWWEXP AmtWarrantyExpenditure,
	SWDOCE DocWarrantyExpense,
	SWDCTE OrderTypeWarExpense, 
	SWWREM AmtWarrantyReimbursemt,
	SWDOCW DocWarrantyReimburse,
	SWDCTR OrderTypeWarReimbur, 
	SWSNCD SerialNoStatusCode,
	SWAISL AisleLocation,
	SWBIN  BinLocation
FROM [SCDATA].F4220
WHERE 
	TRIM(SWKCOO) = TRIM(Company) AND
	SWDOCO = OrderNumber AND
	TRIM(SWDCTO) = TRIM(OrderType) AND
	SWLNID = LineNumber ;
 
 
END;
 
 
  /

-- #desc				Read marketing code 
-- #bl_class			Premier.Commerce.MarketingCode.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param MarketingCode	Constant ID


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMarketingCode
(
	MarketingCode IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
    ResultData2 OUT GLOBALPKG.refcursor
)
AS

BEGIN
OPEN ResultData1 FOR
SELECT  
	MK$9MKT MarketingCode, 
	MKMCU  BranchPlant,
	MKDSC1 Description1, 
	MKDSC2 Description2, 
	MKEFTJ EffectiveDate ,  
	MKEXDJ ExpirationDate, 
	MK$9WEB UsageMode
FROM  	
	[SCDATA].FQ674204 
WHERE
	TRIM(MK$9MKT) = TRIM(MarketingCode);
	
    [SCLIBRARY].COM_GetMarketingCodeValues(MarketingCode,ResultData2);

END;

  /
-- #desc				Read marketing code info
-- #bl_class			Premier.Commerce.MarketingCodeInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param MarketingCode	Constant ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMarketingCodeInfo
(
	MarketingCode IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN

OPEN ResultData1 FOR
    SELECT  
	    A.MK$9MKT MarketingCode, 
	    A.MKMCU  BranchPlant,
	    A.MKDSC1 Description1, 
	    A.MKDSC2 Description2, 
	    A.MKEFTJ EffectiveDate ,  
	    A.MKEXDJ ExpirationDate, 
	    A.MK$9WEB UsageMode,
	    (SELECT COUNT(*) FROM [SCDATA].FQ674209 B WHERE B.MK$9MKT = A.MK$9MKT) AS FreightDiscountEnabled
    FROM  	
	    [SCDATA].FQ674204 A
    WHERE
	    TRIM(MK$9MKT) =  TRIM(MarketingCode);
END;
  /
-- #desc					Read marketing code list with all filters
-- #bl_class				Premier.Commerce.MarketingCodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param MarketingCode		Marketing Code
-- #param Description1		Description 1
-- #param Description2		Description 2
-- #param WebEnabledOnly	if On return only webEnabled Marketing Codes
-- #param ValidateDate		if On Check Marketing Code Valid Dates

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMarketingCodeList
(
	InstallationID		IN NCHAR,
	MarketingCode		IN NCHAR,
	Description1		IN NCHAR,
	Description2		IN NCHAR,
	WebEnabledOnly		IN NCHAR,
	ValidateDate		IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
    today NUMBER;
BEGIN

	--Today in julian format
	IF(TRIM(ValidateDate) IS NOT NULL) THEN
		today := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	END IF;
    
    OPEN ResultData1 FOR
	    SELECT	
		    MK$9MKT MarketingCode, 
		    MKMCU BranchPlant,  
		    MKDSC1 Description1, 
		    MKDSC2 Description2, 
		    MKEFTJ EffectiveDate,  
		    MKEXDJ ExpirationDate, 
		    MK$9WEB UsageMode,
		    0 AS FreightDiscountEnabled
		    -- Marketing Code Header 	
	    FROM  	
		    [SCDATA].FQ674204 MKHED
		INNER JOIN [SCDATA].FQ679910 BRANCHSEC
			ON BRANCHSEC.BIMCU = MKHED.MKMCU
	    WHERE
	        -- Branch Plant filter
	        BRANCHSEC.BI$9INID = InstallationID
	        -- Marketing Code filter	
	        AND (MarketingCode = '*' OR MKHED.MK$9MKT LIKE '%' || MarketingCode || '%' )
	        --filter	
	        AND (Description1 = '*' OR UPPER(MKHED.MKDSC1) LIKE '%' || Description1 || '%' )
	        AND (Description2 = '*' OR UPPER(MKHED.MKDSC2) LIKE '%' || Description2 || '%' )
	        -- Effective and Expiration Date
	        AND (ValidateDate = '*' OR (MKHED.MKEFTJ <= today AND MKHED.MKEXDJ >= today))
	        -- only WebEnabled <> 'N' neither <> 'S'
	        AND (WebEnabledOnly = '*' OR MKHED.MK$9WEB IN('Y', 'A', 'W'))
         ORDER BY MKHED.MK$9MKT;
END;
  /
-- #desc				Read marketing restric code list
-- #bl_class			Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param MR$9MKT		Marketing Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMKTCodRestricListNotRel   
(
    MarketingCode IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    CodeLength		INT := 0;
BEGIN
	-- Get Code Length
	BEGIN
        SELECT DTCDL INTO CodeLength FROM [SCCTL].F0004 WHERE TRIM(DTSY) = '00' AND TRIM(DTRT) = 'DT';
        EXCEPTION WHEN NO_DATA_FOUND THEN 
		CodeLength := 0;
    END;
    
    OPEN ResultData1 FOR
	    SELECT	
			    A.DRKY 		AS Code, 
			    A.DRDL01 	AS Description
	    FROM	[SCCTL].F0005 A
	    WHERE	
		    TRIM(A.DRSY) = '00' 
	    AND	TRIM(A.DRRT) = 'DT'
	    AND	NVL(SUBSTR(A.DRKY, 10 - CodeLength + 1, CodeLength),' ') NOT IN (SELECT	MRDCTO
			      	         FROM	[SCDATA].FQ674210 MKCR
			      	         WHERE 	TRIM(MR$9MKT) = TRIM(MarketingCode))
	    ORDER BY DRKY;
END;
  /
-- #desc				Read marketing restric code list
-- #bl_class			Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param MarketingCode	Marketing Code
	
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMKTCodRestricListRel   
(
    MarketingCode IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
    CodeLength	INT := 0;
BEGIN
	-- Get Code Length
	BEGIN
	    SELECT DTCDL INTO CodeLength FROM [SCCTL].F0004 WHERE TRIM(DTSY) = '00' AND TRIM(DTRT) = 'DT';
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
        CodeLength := 0;
	END;

    OPEN ResultData1 FOR
	    SELECT	B.DRKY		as Code,
			    B.DRDL01 	as Description
	    FROM	
	        [SCDATA].FQ674210 A,
	        [SCCTL].F0005 B
	    WHERE
	        SUBSTR(B.DRKY, 10 - CodeLength + 1, CodeLength) = A.MRDCTO
	    AND TRIM(B.DRRT) = 'DT'
	    AND TRIM(B.DRSY) = '00'
		AND TRIM(A.MR$9MKT)	= TRIM(MarketingCode)
	    ORDER BY MRDCTO;
END;
  /
-- #desc								Load an order shipment confirmation information
-- #bl_class							Premier.Commerce.SalesOrderShipConfInfo.cs
-- #db_dependencies						COM_GetSalesOrderInfo_BillTo, COM_GetSalesOrderShipments
-- #db_references						N/A

-- #param InstallationID				Installation ID
-- #param OrderCompany					Company ID
-- #param OrderType						Document Type
-- #param OrderNumber					OrderNumber
-- #param PickSlipNumber				Pick Slip Number
-- #param ContainerID					Container ID
-- #param NextStatus					Order Next Status
-- #param RetrieveWebContentInfo		Retrieve Web Content Info
-- #param LangPref						Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetOrderShipConfInfo
(
	InstallationID	IN NCHAR,
	OrderCompany	IN NCHAR,
	OrderType		IN NCHAR,
	OrderNumber		IN NUMBER,
	PickSlipNumber	IN NUMBER,
	ContainerID		IN NCHAR,
	NextStatus		IN NCHAR,
	RetrieveWebContentInfo	IN INT,
	LangPref		IN NCHAR,
	ResultData1		OUT GLOBALPKG.refcursor,
	ResultData2		OUT GLOBALPKG.refcursor,
	ResultData3		OUT GLOBALPKG.refcursor,
	ResultData4		OUT GLOBALPKG.refcursor,
	ResultData5		OUT GLOBALPKG.refcursor
)
AS
	ScBillTo		NUMBER;
	ScShipTo		NUMBER;
	AddressType		NUMBER;
	ContactID		NUMBER;	

	Freight INT;
	IsOverrideShipTo INT;
	TempInstallation NCHAR(3);		
	CustCrossRefType	NCHAR(2);		  
   	FreightLn NCHAR(2);	
	TrackingLn NCHAR(2);
	CurrentJulianDate NUMBER(6,0);
    
    /*Get Shipto Number and Branch Plant from Sales Order Detail by Pickslip Number or Container ID*/
	ShipToSHAN  NUMBER;
	ShiptoMCU NCHAR(12);

BEGIN

	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETORDERSHIPCONFINFO_A';
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETORDERSHIPCONFINFO_B';	
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETSALESORDERSHIPMENTS_A';

	TempInstallation := InstallationID;
    [SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', TempInstallation, CustCrossRefType);
       
   	TempInstallation := InstallationID;
	[SCLIBRARY].CMM_GetConstantValue('FREIGHTLN', TempInstallation, FreightLn);

	TempInstallation := InstallationID;
	[SCLIBRARY].CMM_GetConstantValue('TRACKINGLN', TempInstallation, TrackingLn);
	
	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
    
	/*Load Address Book Type Variable From Order Header*/		
	BEGIN
		SELECT B.SH$9TYP, B.SHIDLN INTO AddressType, ContactID
		FROM [SCDATA].FQ674201 B
		WHERE B.SHDOCO = OrderNumber
			AND	B.SHDCTO = OrderType
			AND	B.SHKCOO = OrderCompany
			AND rownum  < 2;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			AddressType := 0;
			ContactID := 0;
	END;

	BEGIN 
		SELECT CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END, A.SDMCU INTO ShipToSHAN, ShiptoMCU 
		FROM [SCDATA].F4211 A
		LEFT OUTER JOIN [SCDATA].FQ674211 B
			ON 	B.SDKCOO = A.SDKCOO
			AND B.SDDOCO = A.SDDOCO
			AND B.SDDCTO = A.SDDCTO
			AND B.SDLNID = A.SDLNID
		WHERE A.SDDOCO = OrderNumber
			AND	A.SDDCTO = OrderType
			AND	A.SDKCOO = OrderCompany
			AND A.SDCNDJ = 0 
			AND ((PickSlipNumber IS NOT NULL AND A.SDPSN = PickSlipNumber) OR (ContainerID <> '*' AND A.SDCNID = ContainerID))
			AND rownum  < 2;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ShipToSHAN := 0;
			ShiptoMCU := ' ';
	END;

		
	/*LOAD ORDER DETAIL TEMPORARY TABLE*/
	INSERT INTO COM_GETORDERSHIPCONFINFO_B
	SELECT	DISTINCT			
		A.SDKCOO				AS OrderCompany,
		A.SDDCTO				AS OrderType,
		A.SDDOCO				AS OrderNumber,
		A.SDLNID				AS LineNumber,
		A.SDTRDJ				AS TransactionDate,
		A.SDDRQJ				AS RequestedDate,
		A.SDLNTY				AS LineType,
		A.SDNXTR				AS NextStatus,
		A.SDLTTR				AS LastStatus,
		A.SDTAX1				AS TaxableYN,
		A.SDTXA1				AS TaxArea,
		A.SDEXR1				AS TaxExplanationCode,
		A.SDKCO					AS InvoiceCompany,
		A.SDDOC					AS InvoiceNumber,
		A.SDDCT					AS InvoiceType,
		A.SDSHAN				AS ShipToID,
		CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
		A.SDMCU					AS CostCenter, 
		A.SDEMCU				AS CostCenterHeader,
		NVL(S.IVCITM,' ')		AS ItemCrossRefNumber,
		A.SDDSC1				AS Description1,
		A.SDDSC2				AS Description2,
		A.SDUORG				AS QuantityOrdered,
		A.SDSOQS				AS ShippedQuantity,
		A.SDUOM					AS UnitOfMeasure,
		A.SDUOM4				AS PricingUnitOfMeasure,
		A.SDSOBK				AS BackorderedQuantity,
		A.SDSOCN				AS CanceledQuantity,
		A.SDUPRC				AS AmountUnitPrice,
		A.SDFUP					AS ForeignUnitPrice,
		A.SDAEXP				AS AmountExtPrice,
		A.SDFEA					AS ForeignExtPrice,
		NVL(T.LFIVI,' ')		AS InventoryInterface,
		A.SDCARS				AS CarrierID,
		R.ABALPH				AS CarrierName,
		A.SDMOT					AS ModeOfTransportation,
		A.SDITM					AS IdentifierShortItem,			
		A.SDLITM				AS LongItemNumber,
		A.SDAITM				AS AuxItemNumber,			
		NVL(B.SD$9SLN,0)		AS ShipLineNumber,			
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDKTLN				AS KitMasterLineNo,
		A.SDCPNT				AS ComponentLineNumber,									
		A.SDSRP1				AS SalesReportingCode1,
		A.SDSRP2				AS SalesReportingCode2,
		A.SDSRP3				AS SalesReportingCode3,
		A.SDSRP4				AS SalesReportingCode4,
		A.SDSRP5				AS SalesReportingCode5,
		A.SDASN					AS PriceAdjustmentScheduleN,
		A.SDDMCT				AS ContractNumberDistributi,
		A.SDPTC					AS PaymentTermsCode,
		C.PNPTD					AS PaymentTermsCodeDesc,
		A.SDLOB					AS LineOfBusiness,
		A.SDEUSE				AS EndUse,
		A.SDDTYS				AS DutyStatus,			
		A.SDUPC1				AS PriceCode1,
		A.SDUPC2				AS PriceCode2,
		A.SDUPC3				AS PriceCode3	
	FROM	[SCDATA].F4211 A		/*Standard Sales  OrderDetail*/
	LEFT OUTER JOIN [SCDATA].FQ674211 B
		ON 	B.SDKCOO = A.SDKCOO
		AND B.SDDOCO = A.SDDOCO
		AND B.SDDCTO = A.SDDCTO
		AND B.SDLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F4104	S /*Item Cross Ref*/
		ON  AddressType = 0		/*Not join if AdrressType = 1 - Consumer*/
		AND	S.IVAN8  = A.SDAN8
		AND S.IVITM  = A.SDITM
		AND S.IVXRT = CustCrossRefType
		AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F0014 C /*Payment Terms Code Description*/
		ON C.PNPTC = A.SDPTC
	INNER JOIN [SCDATA].F40205 T /*Line Type*/
		ON T.LFLNTY = A.SDLNTY
	LEFT OUTER JOIN [SCDATA].F0101 R /*Carrier Name*/
		ON R.ABAN8 = A.SDCARS
	LEFT OUTER JOIN [SCDATA].F4101 IM /*Item Master*/
		ON IM.IMITM = A.SDITM
	WHERE	A.SDDOCO = OrderNumber
	AND		A.SDDCTO = OrderType
	AND		A.SDKCOO = OrderCompany		
	AND A.SDCNDJ = 0 /*Discard canceled lines*/
	AND (
		(PickSlipNumber IS NOT NULL AND A.SDPSN = PickSlipNumber)
		OR (ContainerID <> '*' AND A.SDCNID = ContainerID)
		OR (A.SDPSN = 0 AND A.SDCNID = ' ' AND A.SDNXTR = NextStatus AND A.SDLNTY IN (FreightLn, TrackingLn) AND (CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END) = ShipToSHAN AND A.SDMCU = ShiptoMCU) 		
		)
	UNION ALL
	SELECT	DISTINCT
		A.SDKCOO				AS OrderCompany,
		A.SDDCTO				AS OrderType,
		A.SDDOCO				AS OrderNumber,
		A.SDLNID				AS LineNumber,
		A.SDTRDJ				AS TransactionDate,
		A.SDDRQJ				AS RequestedDate,
		A.SDLNTY				AS LineType,
		A.SDNXTR				AS NextStatus,
		A.SDLTTR				AS LastStatus,
		A.SDTAX1				AS TaxableYN,
		A.SDTXA1				AS TaxArea,
		A.SDEXR1				AS TaxExplanationCode,
		A.SDKCO					AS InvoiceCompany,
		A.SDDOC					AS InvoiceNumber,
		A.SDDCT					AS InvoiceType,
		A.SDSHAN				AS ShipToID,
		CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
		A.SDMCU					AS CostCenter, 
		A.SDEMCU				AS CostCenterHeader,
		NVL(S.IVCITM,' ')		AS ItemCrossRefNumber,
		A.SDDSC1				AS Description1,
		A.SDDSC2				AS Description2,
		A.SDUORG				AS QuantityOrdered,
		A.SDSOQS				AS ShippedQuantity,
		A.SDUOM					AS UnitOfMeasure,
		A.SDUOM4				AS PricingUnitOfMeasure,
		A.SDSOBK				AS BackorderedQuantity,
		A.SDSOCN				AS CanceledQuantity,
		A.SDUPRC				AS AmountUnitPrice,
		A.SDFUP					AS ForeignUnitPrice,
		A.SDAEXP				AS AmountExtPrice,
		A.SDFEA					AS ForeignExtPrice,
		NVL(T.LFIVI,' ')		AS InventoryInterface,
		A.SDCARS				AS CarrierID,
		R.ABALPH				AS CarrierName,
		A.SDMOT					AS ModeOfTransportation,
		A.SDITM					AS IdentifierShortItem,			
		A.SDLITM				AS LongItemNumber,
		A.SDAITM				AS AuxItemNumber,			
		NVL(B.SD$9SLN,0)		AS ShipLineNumber,			
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDKTLN				AS KitMasterLineNo,
		A.SDCPNT				AS ComponentLineNumber,									
		A.SDSRP1				AS SalesReportingCode1,
		A.SDSRP2				AS SalesReportingCode2,
		A.SDSRP3				AS SalesReportingCode3,
		A.SDSRP4				AS SalesReportingCode4,
		A.SDSRP5				AS SalesReportingCode5,
		A.SDASN					AS PriceAdjustmentScheduleN,
		A.SDDMCT				AS ContractNumberDistributi,
		A.SDPTC					AS PaymentTermsCode,
		C.PNPTD					AS PaymentTermsCodeDesc,
		A.SDLOB					AS LineOfBusiness,
		A.SDEUSE				AS EndUse,
		A.SDDTYS				AS DutyStatus,			
		A.SDUPC1				AS PriceCode1,
		A.SDUPC2				AS PriceCode2,
		A.SDUPC3				AS PriceCode3
	FROM [SCDATA].F42119 A    	
	LEFT OUTER JOIN [SCDATA].FQ674211 B 
		ON 	A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO
		AND A.SDKCOO = B.SDKCOO
		AND A.SDLNID = B.SDLNID
	LEFT OUTER JOIN [SCDATA].F4104	S /*Item Cross Ref*/
		ON  S.IVAN8  = A.SDAN8
		AND S.IVITM  = A.SDITM
		AND AddressType = 0		/*Not join if AdrressType = 1 - Consumer  */
		AND S.IVXRT = CustCrossRefType
		AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F0014 C /*Payment Terms Code Description*/
		ON C.PNPTC = A.SDPTC
	LEFT OUTER JOIN [SCDATA].F40205	T /*Line Type*/
		ON T.LFLNTY = A.SDLNTY
	LEFT OUTER JOIN [SCDATA].F0101		R /*Carrier Name*/
		ON R.ABAN8 = A.SDCARS
	LEFT OUTER JOIN [SCDATA].F4101 IM /*Item Master*/
		ON IM.IMITM = A.SDITM
	WHERE	A.SDDOCO = OrderNumber
	AND		A.SDDCTO = OrderType
	AND		A.SDKCOO = OrderCompany		
	AND A.SDCNDJ = 0 
	AND (
		(PickSlipNumber IS NOT NULL AND A.SDPSN = PickSlipNumber)
		OR (ContainerID <> '*' AND A.SDCNID = ContainerID)
		OR (A.SDPSN = 0 AND A.SDCNID = ' ' AND A.SDNXTR = NextStatus AND A.SDLNTY IN (FreightLn, TrackingLn) AND (CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END) = ShipToSHAN AND A.SDMCU = ShiptoMCU) 		
		)	
	ORDER BY A.SDLNID ASC;
	
	/*LOAD ORDER HEADER TEMPORARY TABLE*/
	INSERT INTO [SCLIBRARY].COM_GETORDERSHIPCONFINFO_A
	SELECT	DISTINCT
		CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END		AS SCBillToNumber,
		CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
		NVL(B.SH$9TYP,0)			AS AddressBookType,
		A.SHDEL1 AS DeliveryInst1, 
		A.SHDEL2 AS DeliveryInst2,
		A.SHVR01 AS CustomerPO,
		A.SHKCOO AS OrderCompany,
		A.SHDCTO AS OrderType,
		A.SHDOCO AS OrderNumber,
		A.SHTRDJ AS OrderDate,
		A.SHDRQJ AS RequestedDate,
		NVL(B.SH$9MKT, ' ') AS MarketingCode,
		A.SHHOLD AS HoldOrderCode,
		A.SHCRCD AS CurrencyCode,
		A.SHCRRM AS CurrencyMode,
		C.CVDL01 AS CurrencyDesc,
		'Y'		 AS IsFreightOn
	FROM	[SCDATA].F4201 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO 
	LEFT OUTER JOIN  [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = OrderNumber
	AND		A.SHDCTO = OrderType
	AND		A.SHKCOO = OrderCompany
	UNION ALL
	SELECT	DISTINCT
			CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
			CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END AS SCShipToNumber,
			NVL(B.SH$9TYP,0)	AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1, 
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			NVL(B.SH$9MKT, ' ') AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			'Y'      AS IsFreightOn
	FROM 	[SCDATA].F42019 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = OrderNumber
	AND		A.SHDCTO = OrderType
	AND		A.SHKCOO = OrderCompany;
	

	/* Update the field IsFreightOn  when is FREIGHT OFF*/	
	SELECT COUNT(1) INTO Freight  
	FROM [SCDATA].FQ67496 WHERE FRKCOO = OrderCompany AND FRDCTO = OrderType AND FRDOCO = OrderNumber;
	IF(Freight = 0) THEN         /* When the ship line Number is 0 the order is freight OFF*/	
		UPDATE [SCLIBRARY].COM_GETORDERSHIPCONFINFO_A 
		SET IsFreightOn = 'N';  /* N is Freight Off, Y is Freight On*/
	END IF;

	
    /*Load BillTo Variables From Order Header*/
	BEGIN
		SELECT 
			SCBillToNumber,
			SCShipToNumber,
			AddressBookType 			
		INTO ScBillTo, ScShipTo, AddressType 
		FROM [SCLIBRARY].COM_GETORDERSHIPCONFINFO_A 
		WHERE ROWNUM < 2;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		ScBillTo:=0;
		ScShipTo:=0;
		AddressType:=0;
	END;
		
	OPEN ResultData1 FOR
	SELECT 		
		A.SCBillToNumber,
		A.SCShipToNumber,
		A.AddressBookType,
		A.DeliveryInst1, 
		A.DeliveryInst2,
		A.CustomerPO,
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.OrderDate,
		A.RequestedDate,
		A.MarketingCode,
		A.HoldOrderCode,
		A.CurrencyCode,
		A.CurrencyMode,
		A.CurrencyDesc,
		A.IsFreightOn,
		NVL(NVL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
	FROM [SCLIBRARY].COM_GETORDERSHIPCONFINFO_A A
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.OrderNumber 
		AND Tax.STDCTO = A.OrderType
		AND Tax.STKCOO = A.OrderCompany 
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.OrderNumber 
		AND TxHistory.STDCTO = A.OrderType
		AND TxHistory.STKCOO = A.OrderCompany;
	
	[SCLIBRARY].COM_GetSalesOrderInfo_BillTo(OrderCompany, OrderType, OrderNumber, ScBillTo, AddressType, ContactID,ResultData2);

	SELECT COUNT(1) INTO IsOverrideShipTo 
	FROM [SCDATA].F4006
	WHERE OADOCO = OrderNumber			
		AND OADCTO = OrderType
		AND OAKCOO = OrderCompany  
		AND OAANTY = 2; 
		
	IF (IsOverrideShipTo > 0) THEN
		UPDATE [SCLIBRARY].COM_GETORDERSHIPCONFINFO_B 
		SET SCShipToNumber = ScShipTo, ShipLineNumber =1;
	END IF;
	
	INSERT INTO	[SCLIBRARY].COM_GetSalesOrderShipments_A	
	SELECT DISTINCT
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.CostCenter, 
		A.ShipLineNumber,
		A.SCShipToNumber,
		A.LineType
	FROM [SCLIBRARY].COM_GETORDERSHIPCONFINFO_B A;
	[SCLIBRARY].COM_GetSalesOrderShipments(InstallationID, OrderCompany, OrderType, OrderNumber, ScShipTo, AddressType, Freight, IsOverrideShipTo,ResultData3);


	IF(RetrieveWebContentInfo = 1) THEN 

		OPEN ResultData4 FOR
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.NextStatus,
			A.LastStatus,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.ShipToID,
			A.SCShipToNumber,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			NVL(ContenDesc.DESC1, A.Description1)	AS Description1,
			NVL(ContenDesc.DESC2, A.Description2)	AS Description2,
			A.QuantityOrdered,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.CarrierID,
			A.CarrierName,
			A.ModeOfTransportation,
			A.IdentifierShortItem,
			A.LongItemNumber,
			A.AuxItemNumber,		
			A.ShipLineNumber,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,								
			A.SalesReportingCode1,
			A.SalesReportingCode2,
			A.SalesReportingCode3,
			A.SalesReportingCode4,
			A.SalesReportingCode5,
			A.PriceAdjustmentScheduleN,
			A.ContractNumberDistributi,
			A.PaymentTermsCode,
			A.PaymentTermsCodeDesc,
			A.LineOfBusiness,
			A.EndUse,
			A.DutyStatus,		
			A.PriceCode1,
			A.PriceCode2,
			A.PriceCode3,			
			NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount
		FROM [SCLIBRARY].COM_GETORDERSHIPCONFINFO_B A
		LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.IdentifierShortItem, LangPref, 0) ) ContenDesc 
			ON ContenDesc.DESCITM = A.IdentifierShortItem
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.OrderNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber 
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.OrderNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber;


	ELSE

		OPEN ResultData4 FOR
			SELECT
				A.OrderCompany,
				A.OrderType,
				A.OrderNumber,
				A.LineNumber,
				A.TransactionDate,
				A.RequestedDate,
				A.LineType,
				A.NextStatus,
				A.LastStatus,
				A.TaxableYN,
				A.TaxArea,
				A.TaxExplanationCode,
				A.InvoiceCompany,
				A.InvoiceNumber,
				A.InvoiceType,
				A.ShipToID,
				A.SCShipToNumber,
				A.CostCenter, 
				A.CostCenterHeader,
				A.ItemCrossRefNumber,
				A.Description1	AS Description1, /* Retrieve1 for Tracking lines */
				A.Description2	AS Description2,
				A.QuantityOrdered,
				A.ShippedQuantity,
				A.UnitOfMeasure,
				A.PricingUnitOfMeasure,
				A.BackorderedQuantity,
				A.CanceledQuantity,
				A.AmountUnitPrice,
				A.ForeignUnitPrice,
				A.AmountExtPrice,
				A.ForeignExtPrice,
				A.InventoryInterface,
				A.CarrierID,
				A.CarrierName,
				A.ModeOfTransportation,
				A.IdentifierShortItem,
				A.LongItemNumber,
				A.AuxItemNumber,		
				A.ShipLineNumber,
				A.StockingType,
				A.RelatedKitItemNo,
				A.KitMasterLineNo,
				A.ComponentLineNumber,								
				A.SalesReportingCode1,
				A.SalesReportingCode2,
				A.SalesReportingCode3,
				A.SalesReportingCode4,
				A.SalesReportingCode5,
				A.PriceAdjustmentScheduleN,
				A.ContractNumberDistributi,
				A.PaymentTermsCode,
				A.PaymentTermsCodeDesc,
				A.LineOfBusiness,
				A.EndUse,
				A.DutyStatus,		
				A.PriceCode1,
				A.PriceCode2,
				A.PriceCode3,			
				NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
				NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
				NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
				NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
				NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
				NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
				NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
				NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount
			FROM [SCLIBRARY].COM_GETORDERSHIPCONFINFO_B A
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.OrderNumber 
				AND Tax.DTDCTO = A.OrderType
				AND Tax.DTKCOO = A.OrderCompany 
				AND Tax.DTLNID = A.LineNumber 
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.OrderNumber 
				AND TxHistory.DTDCTO = A.OrderType
				AND TxHistory.DTKCOO = A.OrderCompany 
				AND TxHistory.DTLNID = A.LineNumber;
	END IF;
	
	/*Configured Items*/
	[SCLIBRARY].COM_GetSOConfiguredLineList(OrderCompany, OrderType, OrderNumber, LangPref, ResultData5);
END;
  /
-- #desc						Get the Return Order Original Information
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ReturnNumber			Return Number
-- #param ReturnType			Return Type
-- #param ReturnCompany			Return Company

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetOriginalOrderInfoFnc
(
    ReturnNumber		IN NUMBER,
	ReturnType			IN NCHAR,
	ReturnCompany		IN NCHAR
)
RETURN [SCLIBRARY].COM_OriginalOrderInfoTBL IS
       RETURNS [SCLIBRARY].COM_OriginalOrderInfoTBL;
BEGIN
    WITH CTE AS
    (
        SELECT 
			A.SDDOCO,
			A.SDDCTO,
			A.SDKCOO,
			A.SDOKCO,
			A.SDOORN,
			A.SDOCTO
		FROM [SCDATA].F4211 A
		WHERE A.SDDOCO = ReturnNumber
			AND A.SDDCTO = ReturnType
			AND A.SDKCOO = ReturnCompany	 
		UNION ALL 
		SELECT 
			A.SDDOCO,
			A.SDDCTO,
			A.SDKCOO,
			A.SDOKCO,
			A.SDOORN,
			A.SDOCTO
		FROM [SCDATA].F42119 A
		WHERE A.SDDOCO = ReturnNumber
			AND A.SDDCTO = ReturnType
			AND A.SDKCOO = ReturnCompany
    )
    SELECT 	
        [SCLIBRARY].COM_OriginalOrderInfoType(
            A.SDDOCO,
			A.SDDCTO,
			A.SDKCOO,
			A.SDOKCO,
			A.SDOORN,
			A.SDOCTO
        )BULK COLLECT INTO RETURNS
    FROM CTE A
	WHERE ROWNUM < 2;

    RETURN RETURNS;
END COM_GetOriginalOrderInfoFnc;
  /
-- #desc					Read P4210 Version Rule Det MCU Not Related
-- #bl_class				Premier.Commerce.P4210VersRuleDetMCUNotRel.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleID			Rule ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetP4210VerRulDtMCUNotRel
(
	InstallationID	IN NVARCHAR2,
	RuleID			IN DECIMAL,
	ResultData1		OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT DISTINCT
			A.ABMCU		BranchPlant,
			B.MCDL01	Description
		FROM [SCDATA].F0101 A,
			 [SCDATA].F0006 B
		WHERE
			A.ABMCU NOT IN (SELECT DISTINCT RDMCU FROM [SCDATA].FQ674231 WHERE RD$9INID = InstallationID AND RDUKID = RuleID)
			AND B.MCMCU = A.ABMCU
		UNION
		SELECT DISTINCT
			A.PRMCU		BranchPlant,
			B.MCDL01	Description
		FROM [SCDATA].FQ670302 A,
			 [SCDATA].F0006 B
		WHERE
			A.PRMCU NOT IN (SELECT DISTINCT RDMCU FROM [SCDATA].FQ674231 WHERE RD$9INID = InstallationID AND RDUKID = RuleID)
			 AND B.MCMCU = A.PRMCU;
END;
  /
-- #desc						Read P4210 Version Det UDC Not Related
-- #bl_class					Premier.Commerce.P4210VersRuleDetUDCNotRel.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param RuleID				Rule ID
-- #param ProductCode			Product Code
-- #param UserDefinedCode		User Defined Code


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetP4210VerRulDtUDCNotRel
(
	InstallationID		IN NVARCHAR2,
	RuleID				IN DECIMAL,
	ProductCode			IN NVARCHAR2,
	UserDefinedCode		IN NVARCHAR2,
	ResultData1   OUT   GLOBALPKG.refcursor
)
AS

CodeLength	INT := 0;

BEGIN
	-- Get Code Length
	BEGIN
        SELECT DTCDL INTO CodeLength FROM [SCCTL].F0004 WHERE TRIM(DTSY) = TRIM(ProductCode) AND TRIM(DTRT) = TRIM(UserDefinedCode);
        EXCEPTION WHEN NO_DATA_FOUND THEN
		CodeLength := 0;
    END;

	OPEN ResultData1 FOR
		SELECT
			SUBSTR(A.DRKY,10 - CodeLength + 1 ,CodeLength) AS UserDefinedKey,
			A.DRDL01	AS Description
		FROM
			[SCCTL].F0005 A
		WHERE
			TRIM(A.DRSY) <> '*' AND
			TRIM(A.DRSY) = TRIM(ProductCode) AND
			TRIM(A.DRRT) = TRIM(UserDefinedCode) AND
			SUBSTR(A.DRKY, 10 - CodeLength + 1, CodeLength) NOT IN (SELECT DISTINCT NVL(RDKY,'')
							  FROM	 [SCDATA].FQ674231
							  WHERE
									RD$9INID = InstallationID AND
									RDUKID = RuleID);
END;
  /
-- #desc					Read P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param ProductCode		ProductCode
-- #param UserDefinedCode	UserDefinedCode

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetP4210VersRuleHeader
(
	InstallationID		IN NVARCHAR2,
	RuleUniqueID		IN DECIMAL,
	RuleType			IN NVARCHAR2,
	CategoryCode		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
    ResultData2 OUT GLOBALPKG.refcursor
)

AS
	ProductCode			NVARCHAR2(4);
	UserDefinedCode		NVARCHAR2(2);
BEGIN
	BEGIN
		IF (RuleType = 'PG') THEN
			ProductCode := '40';
			UserDefinedCode := 'PC';
		ELSIF (RuleType = 'AS') THEN
			ProductCode := '40';
			UserDefinedCode := 'AS';
		ELSIF (RuleType = 'ST') THEN
			ProductCode := '00';
			UserDefinedCode := 'S';
		ELSIF (RuleType = 'CN') THEN
			ProductCode := '00';
			UserDefinedCode := 'CN';
		ELSIF (RuleType = 'AC') THEN
			ProductCode := '01';
			UserDefinedCode := TRIM(CategoryCode);
		ELSIF (RuleType = 'CC') THEN
			ProductCode := '59';
			UserDefinedCode := TRIM(CategoryCode);
		END IF;
	END;

	OPEN ResultData1 FOR
		SELECT
			RH$9INID	InstallationID,
			RHUKID		RuleUniqueID,
			RHDSC1		Description,
			RHVER		P4210Version,
			RHSEQ		Hierarchy,
			RHRUDTP		RuleType,
			RHRT		CategoryCode
		FROM
			[SCDATA].FQ674230
		WHERE
			RH$9INID =  InstallationID AND
			RHUKID	=  RuleUniqueID;

	[SCLIBRARY].COM_GetP4210VersRuleDetails(InstallationID, RuleUniqueID, ProductCode, UserDefinedCode,ResultData2);
END;
  /
-- #desc					Read P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetP4210VersRuleHeaderList
(
	InstallationID  IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT
			RH$9INID	InstallationID,
			RHUKID		RuleUniqueID,
			RHDSC1		Description,
			RHVER		P4210Version,
			RHSEQ		Hierarchy,
			RHRUDTP		RuleType,
			RHRT		CategoryCode
		FROM
			[SCDATA].FQ674230
		WHERE
			RH$9INID = InstallationID
		ORDER BY RHSEQ;
END;

  /

-- #desc					Read Payment Instrument
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetPaymentInstrumentList
(
    ResultData1 OUT GLOBALPKG.refcursor
 )
AS
 BEGIN
 OPEN ResultData1 FOR
SELECT 
	A.RYRYIN AS PaymentInstrument,
	[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',A.RYRYIN,'*') AS Description
FROM
	[SCDATA].FQ67RYIN A
ORDER BY RYRYIN DESC;
END;

  /

-- #desc					N/A
-- #bl_class				Premier.Commerce.ProfilePurchaseList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param Company			Company
-- #param InstallationID	Installation Id
-- #param AddressBookType	Address Book Type
-- #param AddressNumber		Address Number
-- #param LastDays			Last Days filter

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetProfilePurchaseList
(
	Company			IN NCHAR,
	InstallationID	IN NCHAR,
	AddressBookType	IN DECIMAL,
	AddressNumber	IN NUMBER,
	LastDays		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	SOrderRestric	NVARCHAR2(1);
	SOrderINID		NCHAR(3) := InstallationID;
	SOrderConstant	NCHAR(10) := 'SO_RESTRIC';
	CompanyVal      NCHAR(5) := Company;
	SCompanyINID	NCHAR(3) := InstallationID;
    SCompanyConstant NVARCHAR2(1);
	SForeignINID	NCHAR(3) := InstallationID;
	ForeignConstant	NVARCHAR2(1);

	ToDate INT;
	FromDate INT;
BEGIN 	
	
	/* Gets the Sales Order Document Restrictions	*/
    [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);	
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', SCompanyINID, SCompanyConstant);
	[SCLIBRARY].CMM_GetConstantValue('FOREGCURYN', SForeignINID, ForeignConstant);

	FromDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - LastDays - 1);
	ToDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	IF(CompanyVal = '00000') THEN
		CompanyVal := '*';
	END IF;

	IF(AddressBookType = 0) /* CUSTOMER */
	THEN	
		OPEN ResultData1 FOR
		WITH CTE_F4201 AS(
			SELECT
				SHTRDJ AS OrderDate, 
				(CASE WHEN A.SHCRRM = 'D' OR ForeignConstant = 'N' THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
				END ) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' THEN B.CCCRCD
					ELSE A.SHCRCD
				END ) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO
			FROM [SCDATA].F4201 A	  /* Sales Order Header */		
				INNER JOIN [SCDATA].F0010 B
					ON B.CCCO = A.SHKCOO
			WHERE A.SHAN8 = AddressNumber
				AND (CompanyVal = '*'  OR A.SHCO = CompanyVal)
				AND	(A.SHTRDJ >= FromDate)		
				AND	(A.SHTRDJ <= ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' THEN B.CCCRCD
					ELSE A.SHCRCD
				END ), A.SHCO, A.SHDCTO
			UNION ALL
			SELECT
				SHTRDJ AS OrderDate, 
				(CASE WHEN A.SHCRRM = 'D' OR ForeignConstant = 'N' THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
				END ) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' THEN B.CCCRCD
					ELSE A.SHCRCD
				END ) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO
			FROM [SCDATA].F42019 A
				INNER JOIN [SCDATA].F0010 B
					ON B.CCCO = A.SHKCOO	
			WHERE A.SHAN8 = AddressNumber
				AND (CompanyVal = '*' OR A.SHCO = CompanyVal)
				AND	(A.SHTRDJ >= FromDate)		
				AND	(A.SHTRDJ <= ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' THEN B.CCCRCD
					ELSE A.SHCRCD
				END ), A.SHCO, A.SHDCTO
		)SELECT
			A.OrderDate,
			SUM(A.ProductTotal) AS ProductTotal,
			A.CurrencyCode
		FROM CTE_F4201 A
			LEFT OUTER JOIN [SCDATA].FQ679912 CR 
				ON CR.CICO = A.SHCO
					AND CR.CI$9INID = SCompanyINID
			LEFT OUTER JOIN [SCDATA].FQ67008 SOR
				ON SOR.DRKY = A.SHDCTO
					AND DR$9INID = SOrderINID 
					AND DR$9CNST = SOrderConstant
		WHERE (SOrderRestric = '0' OR SOR.DRKY IS NOT NULL)
			AND (SCompanyConstant = 'A' OR CR.CICO IS NOT NULL)
		GROUP BY A.OrderDate, A.CurrencyCode;

	ELSIF(AddressBookType = 1) THEN /* CONSUMER */

		OPEN ResultData1 FOR
		WITH CTE_F4201 AS (
			SELECT
				SHTRDJ AS OrderDate, 
				(CASE WHEN A.SHCRRM = 'D' OR ForeignConstant = 'N' THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
				END ) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' THEN C.CCCRCD
					ELSE A.SHCRCD
				END ) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO	
			FROM [SCDATA].F4201 A			--Sales Order Header	
				INNER JOIN [SCDATA].F0010 C
					ON C.CCCO = A.SHKCOO		
			LEFT OUTER JOIN [SCDATA].FQ674201 B	--Extended Sales Order Header
				ON B.SHKCOO = A.SHKCOO
					AND B.SHDOCO = A.SHDOCO
					AND B.SHDCTO = A.SHDCTO
			WHERE B.SH$9AN8 = AddressNumber
				AND B.SH$9TYP = AddressBookType
				AND	(A.SHTRDJ >= FromDate)		
				AND	(A.SHTRDJ <= ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' THEN C.CCCRCD
					ELSE A.SHCRCD
				END ), A.SHCO, A.SHDCTO
			UNION ALL
			SELECT
				SHTRDJ		AS OrderDate, 
				(CASE WHEN A.SHCRRM = 'D' OR ForeignConstant = 'N'
					THEN SUM(A.SHOTOT)
					ELSE SUM(A.SHFAP)
					END
				) AS ProductTotal,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' 
					THEN C.CCCRCD
					ELSE A.SHCRCD
					END
				) AS CurrencyCode,
				A.SHCO,
				A.SHDCTO
			FROM [SCDATA].F42019 A		
				INNER JOIN [SCDATA].F0010 C
					ON C.CCCO = A.SHKCOO	
			LEFT OUTER JOIN [SCDATA].FQ674201 B	--Extended Sales Order Header
				ON B.SHKCOO = A.SHKCOO
					AND B.SHDOCO = A.SHDOCO
					AND B.SHDCTO = A.SHDCTO
			WHERE B.SH$9AN8 = AddressNumber
				AND B.SH$9TYP = AddressBookType
				AND	(A.SHTRDJ >= FromDate)		
				AND	(A.SHTRDJ <= ToDate)
			GROUP BY A.SHTRDJ, A.SHCRRM,
				(CASE WHEN SHCRRM = 'F' AND ForeignConstant = 'N' THEN C.CCCRCD
					ELSE A.SHCRCD
				END ), A.SHCO, A.SHDCTO
		)SELECT
			A.OrderDate,
			SUM(A.ProductTotal) AS ProductTotal,
			A.CurrencyCode
		FROM CTE_F4201 A
			LEFT OUTER JOIN [SCDATA].FQ679912 CR
				ON CR.CICO = A.SHCO
					AND CR.CI$9INID = SCompanyINID
			LEFT OUTER JOIN [SCDATA].FQ67008 SOR
				ON SOR.DRKY = A.SHDCTO
					AND DR$9INID = SOrderINID 
					AND DR$9CNST = SOrderConstant
		WHERE (SOrderRestric = '0' OR SOR.DRKY IS NOT NULL)
			AND (SCompanyConstant = 'A' OR CR.CICO IS NOT NULL)
		GROUP BY A.OrderDate, A.CurrencyCode;
	END IF;
END;


  /
-- #desc							Load EDI invoice information
-- #bl_class						Premier.Commerce.PunchOutInvoicePresentmentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param OrderCompany				Company ID
-- #param OrderType					Document Type
-- #param OrderNumber				OrderNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetPunchInvoicePresentList
(	
	OrderCompany			IN NCHAR,
	OrderType				IN NCHAR,
	OrderNumber				IN NUMBER,	
	ResultData1				OUT GLOBALPKG.refcursor,
	ResultData2				OUT GLOBALPKG.refcursor	
)
AS
BEGIN
	/*Retrieve Invoice Header Information*/
	OPEN ResultData1 FOR	
	SELECT 
	SY.SYEDOC	AS EDINumber,
	SY.SYEDCT	AS EDIType,
	SY.SYEKCO	AS EDICompany,
	SY.SYDOCO   AS OrderNumber,
	SY.SYKCOO	AS OrderCompany,
	SY.SYDCTO	AS OrderType,
	SY.SYVR01   AS CustomerPO,
	S3.S3DOC	AS InvoiceNumber,
	S3.S3DCT	AS InvoiceType,
	S3.S3KCO	AS InvoiceCompany,
	S3.S3DDU	AS DueDate,
	S3.S3IVD	AS InvoiceDate,
	S3.S3NDTP	AS DaysToPay,
	S3.S3AG		AS GrossAmount,
	S3.S3ATXA	AS TaxableAmount,
	S3.S3STAM	AS TaxAmount,
	S3.S3CTAM	AS ForeignTaxAmount,
	S3.S3DSCT	AS DiscountAmount,	
	SY.SYCRRM	AS CurrencyMode,
	ZAB.ZAAN8	AS BillAddressNumber,
	ZAB.ZAMLNM	AS BillMailingName,
	ZAB.ZAADD1	AS BillAddressLine1,
	ZAB.ZAADD2	AS BillAddressLine2,
	ZAB.ZAADD3	AS BillAddressLine3,
	ZAB.ZAADD4	AS BillAddressLine4,
	ZAB.ZAADDZ	AS BillPostalCode,
	ZAB.ZACTY1	AS BillCity,
	ZAB.ZAADDS	AS BillState,
	ZAB.ZACOUN	AS BillCountry,
	ZAS.ZAAN8	AS ShipAddressNumber,
	ZAS.ZAMLNM	AS ShipMailingName,
	ZAS.ZAADD1	AS ShipAddressLine1,
	ZAS.ZAADD2	AS ShipAddressLine2,
	ZAS.ZAADD3	AS ShipAddressLine3,
	ZAS.ZAADD4	AS ShipAddressLine4,
	ZAS.ZAADDZ	AS ShipPostalCode,
	ZAS.ZACTY1	AS ShipCity,
	ZAS.ZAADDS	AS ShipState,
	ZAS.ZACOUN	AS ShipCountry,
	SY.SYCO		AS Company,
	CC.CCAN8	AS CompanyAddressNumber	
	FROM [SCDATA].F47046 SY
	INNER JOIN [SCDATA].F470461 S3 --Extended info
	ON S3.S3EDOC = SY.SYEDOC
	AND S3.S3EKCO = SY.SYEKCO
	AND S3.S3EDCT = SY.SYEDCT
	INNER JOIN [SCDATA].F4706 ZAB -- Bill To Address Information
	ON ZAB.ZAEDOC = SY.SYEDOC
	AND ZAB.ZAEKCO = SY.SYEKCO
	AND ZAB.ZAEDCT = SY.SYEDCT
	AND ZAB.ZAANTY = 1
	INNER JOIN [SCDATA].F4706 ZAS --Ship to Address Information
	ON ZAS.ZAEDOC = SY.SYEDOC
	AND ZAS.ZAEKCO = SY.SYEKCO
	AND ZAS.ZAEDCT = SY.SYEDCT
	AND ZAS.ZAANTY = 2
	INNER JOIN [SCDATA].F0010 CC -- Company information
	ON CC.CCCO = SY.SYCO
	WHERE SY.SYDOCO = OrderNumber AND SY.SYKCOO = OrderCompany AND SY.SYDCTO = OrderType AND SY.SYEDSP <> 'Y';


	/*Retrieve Invoice Lines Information*/
	OPEN ResultData2 FOR	
	SELECT 
	SZDOCO			AS OrderNumber,
	SZDCTO			AS OrderType,
	SZKCOO			AS OrderCompany,
	SZDOC			AS InvoiceNumber,
	SZDCT			AS InvoiceType,
	SZKCO			AS InvoiceCompany,
	SZLNID			AS LineNumber,
	SZITM			AS ShortProductNumber,
	SZLITM			AS LongProductNumber,
	SZAITM			AS AuxProductNumber,
	SZDSC1			AS Description1,
	SZDSC2			AS Description2,
	SZLNTY			AS LineType,
	SZUOM			AS UnitOfMeasure,
	SZUPRC			AS AmountUnitPrice,
	SZAEXP			AS AmountExtPrice,
	SZECST			AS AmountExtCost,
	SZFUP			AS ForeignUnitPrice,
	SZFEA			AS ForeignExtPrice,
	SZPROV			AS OverridePriceCode,
	SZUORG			AS ShippingQuantity,
	SZSOQS			AS ShippedQuantity,
	SZRLIT			AS RelatedKitItemNo,
	SZKTLN			AS KitMasterLineNo,
	SZCPNT			AS ComponentLineNumber
	FROM [SCDATA].F47047
	WHERE SZDOCO = OrderNumber AND SZKCOO = OrderCompany AND SZDCTO = OrderType AND SZEDSP <> 'Y';

END;
  /

-- #desc						Get returned quantity 
-- #db_dependencies				N/A
-- #db_references				COM_GetSOReturnLineSrchList

-- #param OrderNumber			Order number to search for.
-- #param OrderCompany			Company
-- #param OrderType				Document type to search for.
-- #param LineNumber			Line Number to search for.
-- #param COInstallationID 		InstallationID
-- #param CORestric				CORestric

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetReturnedQuantityFnc
(
	OrderNumber			IN NUMBER,
	OrderCompany		IN NCHAR,
	OrderType			IN NCHAR,
	LineNumber			IN NUMBER,
	COInstallationID 	IN NCHAR,
	CORestric			IN NCHAR
)
RETURN NUMBER IS
    ReturnedQuantity NUMBER;
BEGIN
	BEGIN
		WITH CTE AS (
			SELECT 
				SDSOQS,
				SDDCTO,
				SDOORN,
				SDOGNO,
				SDOCTO,
				SDOKCO
			FROM [SCDATA].F4211 A /* Standard Sales OrderDetail */
			WHERE 
				A.SDOORN = OrderNumber
				AND A.SDOCTO = OrderType
				AND A.SDOKCO = OrderCompany
				AND A.SDOGNO = LineNumber
				AND (A.SDLTTR < '980' OR A.SDLTTR = '995') AND SDOORN > '0' 
			UNION ALL
			SELECT 
				SDSOQS,
				SDDCTO,
				SDOORN,
				SDOGNO,
				SDOCTO,
				SDOKCO
			FROM [SCDATA].F42119 A 
			WHERE 
				A.SDOORN = OrderNumber
				AND A.SDOCTO = OrderType
				AND A.SDOKCO = OrderCompany
				AND A.SDOGNO = LineNumber
				AND (A.SDLTTR < '980' OR A.SDLTTR = '995') AND SDOORN > '0' 
		),
		CTE2 AS (
			SELECT 
				SUM(SDSOQS) AS ReturnedQty,
				SDDCTO
			FROM CTE A
			GROUP BY SDOORN, SDOGNO, SDOCTO, SDOKCO, SDDCTO
		)
		SELECT 
			ReturnedQty INTO ReturnedQuantity
		FROM CTE2 A
		LEFT OUTER JOIN [SCDATA].FQ67008 DR 
			ON DR.DR$9INID = COInstallationID 
			AND DR.DR$9CNST = 'CO_RESTRIC'
			AND DR.DRKY = A.SDDCTO
		WHERE ( CORestric = N'0' OR DR.DRKY IS NOT NULL ) ;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
			ReturnedQuantity := 0;
		END;
	
	
    RETURN ReturnedQuantity;

END COM_GetReturnedQuantityFnc;
  /
-- #desc						Load a return detail
-- #bl_class					Premier.Commerce.ReturnOrderInfo.cs
-- #db_dependencies				COM_GetSalesOrderBillToInfo.sql, COM_GetSalesOrderInfo_Payments.sql
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param ReturnCompany			Company ID
-- #param ReturnType			Document Type
-- #param ReturnNumber			ReturnNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetReturnOrderInfo
(
	InstallationID	IN NCHAR,
	ReturnCompany	IN NCHAR,
	ReturnType		IN NCHAR,
	ReturnNumber	IN NUMBER,
	ResultData1		OUT GLOBALPKG.refcursor,
	ResultData2		OUT GLOBALPKG.refcursor,
	ResultData3		OUT GLOBALPKG.refcursor,
	ResultData4		OUT GLOBALPKG.refcursor
)
AS

	/* STORE PROCEDURE VARIABLES */
	ScBillTo			NUMBER;
	ScShipTo			NUMBER;
	AddressType			NUMBER;
	ContactID			NUMBER;

	/* Gets Cust Cross Document Restrictions */
	CustCrossRefType	NCHAR(2);
	CustCrossINID		NCHAR(3) := InstallationID;

    CurrentJulianDate	NUMBER(6,0);

    CurrencyMode		NCHAR(1);
    BaseCurrencyCode    NCHAR(3);
    BaseCurrencyDesc    NCHAR(30);

    /* Foreign Constant */
    ForeignC			NVARCHAR2(1);
    ForeignINID			NCHAR(3) := InstallationID;
	ForeignConstant     NCHAR(10) := 'FOREGCURYN';


	/* Gets the Order Document Restrictions */
	SOrderRestric		NVARCHAR2(1);
    SOrderINID			NCHAR(3) := InstallationID;
	SOrderConstant		NCHAR(10) := 'SO_RESTRIC';


    /* Load Address Book Type Variable From Order Header */
	BEGIN

		EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETRETURNORDERINFO_A';
		EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETRETURNORDERINFO_B';

		CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

		[SCLIBRARY].CMM_GetConstantValue( 'CUST_CROSS', CustCrossINID, CustCrossRefType );
		[SCLIBRARY].CMM_GetConstantValue( SOrderConstant, SOrderINID, SOrderRestric );

		BEGIN
			SELECT
				NVL(B.SH$9TYP, 0), NVL(B.SHIDLN, 0) INTO AddressType, ContactID
			FROM
				[SCDATA].FQ674201 B
			WHERE	B.SHDOCO = ReturnNumber
				AND	B.SHKCOO = ReturnCompany
				AND	B.SHDCTO = ReturnType
				AND	ROWNUM < 2;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				AddressType := 0;
				ContactID := 0;
			COMMIT;
		END;

	IF (AddressType IS NULL) THEN
		AddressType := 0;
		ContactID := 0;
	END IF;

	-- LOAD ORDER DETAIL TEMPORARY TABLE
	INSERT INTO [SCLIBRARY].COM_GETRETURNORDERINFO_B
	SELECT	DISTINCT
			A.SDKCOO				AS ReturnCompany,
			A.SDDCTO				AS ReturnType,
			A.SDDOCO				AS ReturnNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDOKCO				AS OriginalOrderCompany,
			A.SDOORN				AS OriginalOrderNumber,
			A.SDOCTO				AS OriginalOrderType,
			A.SDSHAN				AS ShipToID,
			A.SDMCU					AS CostCenter,
			A.SDEMCU				AS CostCenterHeader,
			NVL(S.IVCITM,'')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			NVL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			' '						AS IsOrderRestricted,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber
		FROM	[SCDATA].F4211 A			/* Standard Sales OrderDetail */
		LEFT OUTER JOIN [SCDATA].F4104 S	--Item Cross Ref
			ON  S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
			AND S.IVXRT = CustCrossRefType
			AND	AddressType = 0			--Not join if AdrressType = 1 - Consumer
		INNER JOIN [SCDATA].F40205	T	--Line Type
			ON T.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE	A.SDDOCO = ReturnNumber
			AND	A.SDDCTO = ReturnType
			AND	A.SDKCOO = ReturnCompany
	UNION ALL
	SELECT	DISTINCT
			A.SDKCOO				AS ReturnCompany,
			A.SDDCTO				AS ReturnType,
			A.SDDOCO				AS ReturnNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDOKCO				AS OriginalOrderCompany,
			A.SDOORN				AS OriginalOrderNumber,
			A.SDOCTO				AS OriginalOrderType,
			A.SDSHAN				AS ShipToID,
			A.SDMCU					AS CostCenter,
			A.SDEMCU				AS CostCenterHeader,
			NVL(S.IVCITM,' ')	AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			NVL(T.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			' '						AS IsOrderRestricted,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber
	FROM [SCDATA].F42119 A
		LEFT OUTER JOIN [SCDATA].F4104 S		--Item Cross Ref
			ON  S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND S.IVXRT = CustCrossRefType
			AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
			AND AddressType = 0				--Not join if AdrressType = 1 - Consumer
		LEFT OUTER JOIN [SCDATA].F40205	T	--Line Type
			ON T.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM		--Item Master
			ON IM.IMITM = A.SDITM
		WHERE A.SDDOCO = ReturnNumber
			AND A.SDDCTO = ReturnType
			AND	A.SDKCOO = ReturnCompany
	ORDER BY A.SDLNID ASC;

	-- LOAD ORDER HEADER TEMPORARY TABLE
	INSERT INTO [SCLIBRARY].COM_GETRETURNORDERINFO_A
	SELECT DISTINCT
		CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END		AS SCBillToNumber,
		CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
		NVL(B.SH$9TYP,0)			AS AddressBookType,
		A.SHVR01					AS CustomerPO,
		A.SHKCOO					AS ReturnCompany,
		A.SHDCTO					AS ReturnType,
		A.SHDOCO					AS ReturnNumber,
		A.SHTRDJ					AS TransactionDate,
		A.SHCRCD					AS CurrencyCode,
		A.SHCRRM					AS CurrencyMode,
		C.CVDL01					AS CurrencyDesc,
		' '							AS  BaseCurrency,
		' '							AS BaseCurrencyDesc,
		A.SHRYIN					AS PaymentInstrument,
		A.SHHOLD					AS HoldOrderCode,
		A.SHRCD						AS ReasonCode
	FROM	[SCDATA].F4201 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
		ON	A.SHDOCO = B.SHDOCO
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	WHERE A.SHDOCO = ReturnNumber
		AND	A.SHDCTO = ReturnType
		AND A.SHKCOO = ReturnCompany
	UNION ALL
	SELECT DISTINCT
		CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END		AS SCBillToNumber,
		CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
		NVL(B.SH$9TYP, 0)			AS AddressBookType,
		A.SHVR01					AS CustomerPO,
		A.SHKCOO					AS ReturnCompany,
		A.SHDCTO					AS ReturnType,
		A.SHDOCO					AS ReturnNumber,
		A.SHTRDJ					AS TransactionDate,
		A.SHCRCD					AS CurrencyCode,
		A.SHCRRM					AS CurrencyMode,
		C.CVDL01					AS CurrencyDesc,
		' '							AS  BaseCurrency,
		' '							AS BaseCurrencyDesc,
		A.SHRYIN					AS PaymentInstrument,
		A.SHHOLD					AS HoldOrderCode,
		A.SHRCD						AS ReasonCode
	FROM [SCDATA].F42019 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
		ON A.SHDOCO = B.SHDOCO
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = ReturnNumber
		AND	A.SHKCOO = ReturnCompany
		AND	A.SHDCTO = ReturnType;


	--Load BillTo Variables From Order Header
	BEGIN
		SELECT
			SCBillToNumber, SCShipToNumber, AddressBookType, CurrencyMode
			INTO ScBillTo, ScShipTo, AddressType, CurrencyMode

		FROM [SCLIBRARY].COM_GETRETURNORDERINFO_A

		WHERE ROWNUM < 2;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ScBillTo := 0;
			ScShipTo := 0;
			AddressType := 0;
			CurrencyMode := 0;
		COMMIT;
	END;

	IF (CurrencyMode = 'F') THEN
		[SCLIBRARY].CMM_GetConstantValue( ForeignConstant, ForeignINID, ForeignC );
		IF (ForeignC = 'N') THEN   /*Foreign is OFF*/
			BEGIN
				SELECT
					B.CCCRCD, C.CVDL01
					INTO BaseCurrencyCode, BaseCurrencyDesc
				FROM [SCLIBRARY].COM_GETRETURNORDERINFO_A A
				INNER JOIN [SCDATA].F0010 B
					ON B.CCCO = A.ReturnCompany
				LEFT OUTER JOIN [SCDATA].F0013 C
					ON B.CCCRCD = C.CVCRCD
				WHERE ROWNUM < 2;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					BaseCurrencyCode := 0;
					BaseCurrencyDesc := 0;
				COMMIT;
			END;
		END IF;
	END	IF;

	OPEN ResultData1 FOR
	SELECT
		A.SCBillToNumber,
		A.SCShipToNumber,
		A.AddressBookType,
		A.CustomerPO,
		A.ReturnCompany,
		A.ReturnType,
		A.ReturnNumber,
		A.TransactionDate,
		A.CurrencyCode,
		A.CurrencyMode,
		A.CurrencyDesc,
		NVL( BaseCurrencyCode, ' ') AS BaseCurrencyCode,
		NVL( BaseCurrencyDesc, ' ') AS BaseCurrencyDesc,
		A.PaymentInstrument,
		A.HoldOrderCode,
		NVL(NVL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices,
		A.ReasonCode
	FROM [SCLIBRARY].COM_GETRETURNORDERINFO_A A
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.ReturnNumber
		AND Tax.STDCTO = A.ReturnType
		AND Tax.STKCOO = A.ReturnCompany
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.ReturnNumber
		AND TxHistory.STDCTO = A.ReturnType
		AND TxHistory.STKCOO = A.ReturnCompany;

	[SCLIBRARY].COM_GetSalesOrderInfo_BillTo( ReturnCompany, ReturnType, ReturnNumber, ScBillTo, AddressType, ContactID, ResultData2 );

	OPEN ResultData3 FOR
	SELECT
		A.ReturnCompany,
		A.ReturnType,
		A.ReturnNumber,
		A.LineNumber,
		A.TransactionDate,
		A.LineType,
		A.NextStatus,
		A.LastStatus,
		A.TaxableYN,
		A.TaxArea,
		A.TaxExplanationCode,
		A.OriginalOrderCompany,
        A.OriginalOrderNumber,
        A.OriginalOrderType,
		A.ShipToID,
		A.CostCenter,
		A.CostCenterHeader,
		A.ItemCrossRefNumber,
		A.Description1,
		A.Description2,
		A.ShippingQuantity,
		A.ShippedQuantity,
		A.UnitOfMeasure,
		A.PricingUnitOfMeasure,
		A.BackorderedQuantity,
		A.CanceledQuantity,
		A.AmountUnitPrice,
		A.ForeignUnitPrice,
		A.AmountExtPrice,
		A.ForeignExtPrice,
		A.InventoryInterface,
		A.CarrierID,
		A.ModeOfTransportation,
		A.IdentifierShortItem,
		A.LongItemNumber,
		A.AuxItemNumber,
		(CASE WHEN SOrderRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS IsOrderRestricted,
		A.OverridePrice,
		A.StockingType,
		A.RelatedKitItemNo,
		A.KitMasterLineNo,
		A.ComponentLineNumber,
		NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
		NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
		NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
		NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
		NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
		NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
		NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
		NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		NVL(C.RFOGNO, 0 ) AS ParentLineNo

	FROM [SCLIBRARY].COM_GETRETURNORDERINFO_B A
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.ReturnNumber
		AND Tax.DTDCTO = A.ReturnType
		AND Tax.DTKCOO = A.ReturnCompany
		AND Tax.DTLNID = A.LineNumber
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.ReturnNumber
		AND TxHistory.DTDCTO = A.ReturnType
		AND TxHistory.DTKCOO = A.ReturnCompany
		AND TxHistory.DTLNID = A.LineNumber
	LEFT OUTER JOIN [SCDATA].FQ67008 DR
		ON DR.DR$9INID = SOrderINID
		AND DR.DR$9CNST = SOrderConstant 
		AND DR.DRKY = A.OriginalOrderType
	LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.ReturnNumber
		AND C.RFDCTO = A.ReturnType
		AND C.RFKCOO = A.ReturnCompany
		AND C.RFLNID = A.LineNumber;

	[SCLIBRARY].COM_GetSalesOrderInfo_Payments( ReturnCompany, ReturnType, ReturnNumber,ResultData4 );

END;
  /

-- #desc							Returns the last OrdersToDisplay most recent returns
-- #bl_class						Premier.Commerce.ReturnOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param Company					Company if is 00000 is '*'
-- #param InstallationID			Installation Id
-- #param AddressBookType			Address Book Type
-- #param AddressNumber				Address Number
-- #param OrderssToDisplay			Quantity of rows to be returned


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetReturnOrderRecentList
(
	Company					IN NCHAR,
	InstallationID			IN NCHAR,
	AddressBookType			IN DECIMAL,
	AddressNumber			IN NUMBER,
	OrdersToDisplay			IN INT,
	ResultData1				OUT GLOBALPKG.refcursor 
)
AS

	CompanyTemp NCHAR(5) := Company;
	
	/*Gets the Sales Order Document Restrictions	*/
	ROrderRestric	NVARCHAR2(1);
	ROrderINID		NCHAR(3):= InstallationID;
	ROrderConstant	NCHAR(10):= 'CO_RESTRIC';

    /*Read Account Receivable company constant */
	CompanyConstant			NVARCHAR2(1);
	ConstantInstallation	NCHAR(3):= InstallationID;

BEGIN

	[SCLIBRARY].CMM_GetConstantValue( ROrderConstant, ROrderINID, ROrderRestric );
	[SCLIBRARY].CMM_GetConstantValue( 'INSCOMPANY', ConstantInstallation, CompanyConstant );

	IF (CompanyTemp = '00000') THEN 
		CompanyTemp := '*';
	END IF;

	IF( AddressBookType = 0 ) THEN /* CUSTOMER */
		OPEN ResultData1 FOR
		SELECT 
				A.SHDOCO			AS OrderNumber, 
				A.SHDCTO			AS OrderType,
				A.SHKCOO			AS OrderCompany, 
				A.SHVR01		    AS CustomerRef,
				A.SHTRDJ			AS OrderDate										
		FROM TABLE( [SCLIBRARY].COM_GetRecentDocsFnc (CompanyTemp, ROrderINID, ROrderConstant, ConstantInstallation, CompanyConstant, ROrderRestric, AddressNumber) ) A
		WHERE
			(A.RNUM BETWEEN 1 AND OrdersToDisplay)
		ORDER BY A.RNUM;

	ELSIF (AddressBookType = 1) THEN /* CONSUMER */
		OPEN ResultData1 FOR
		SELECT 
				A.SHDOCO			AS OrderNumber, 
				A.SHDCTO			AS OrderType,
				A.SHKCOO			AS OrderCompany, 
				A.SHVR01		    AS CustomerRef,
				A.SHTRDJ			AS OrderDate										
		FROM TABLE( [SCLIBRARY].COM_GetRecentDocExtendedFnc (CompanyTemp, ROrderINID, ROrderConstant, ConstantInstallation, CompanyConstant, ROrderRestric, AddressNumber) ) A
		WHERE
			(A.RNUM BETWEEN 1 AND OrdersToDisplay)
		ORDER BY A.RNUM;
	END IF;

END;
  /
-- #desc						N/A
-- #bl_class					Premier.Commerce.ReturnOrderHeaderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param InstallationID		Installation Id
-- #param Company				Company
-- #param ReturnType			Document type to search for.
-- #param ReturnNumber			Order Number
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param ReturnDateFrom		Date Range
-- #param ReturnDateTo			Date Range
-- #param ReferenceNumber		Reference Number
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param SortBy				Column to filter by Return Number, Order Number, Customer Reference, Transaction Date
-- #param SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetReturnOrdHeadSrchList
(
	InstallationID			IN NCHAR,
	Company					IN NCHAR,
	ReturnType				IN NCHAR,
	AddressNumber			IN NUMBER,
	ReturnNumber			IN NUMBER,
	AddressBookType			IN NUMBER,
	ReturnDateFrom			IN NUMBER,
	ReturnDateTo			IN NUMBER,
	ReferenceNumber			IN NCHAR,
	PageIndex				IN INT,
    PageSize				IN INT,
    SortBy					IN NVARCHAR2,
	SortDir					IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor 
)
AS

	SQL_DYNAMIC		VARCHAR2(4000);
	WHERE_DYNAMIC	NVARCHAR2(1000) := '';
	INNER_DYNAMIC	NVARCHAR2(1000) := ' ';
	SORT_DYNAMIC  NVARCHAR2(120);
	SORTDIR_DYNAMIC NVARCHAR2(20);
	
	/*Gets the Sales Order Document Restrictions	*/
	ROrderRestric	NVARCHAR2(1);
	ROrderINID		NCHAR(3):= InstallationID;
	ROrderConstant	NCHAR(10):= 'CO_RESTRIC';

    /*Read Account Receivable company constant */
	CompanyConstant			NVARCHAR2(1);
	ConstantInstallation	NCHAR(3):= InstallationID;
	
	/* Gets the Sales Order Document Restrictions Parameters*/
	SORestric	NVARCHAR2(1);
	SOINID		NCHAR(3):= InstallationID; 
	SOConstant	NCHAR(10):= 'SO_RESTRIC';

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);

BEGIN
	[SCLIBRARY].CMM_GetConstantValue( ROrderConstant, ROrderINID, ROrderRestric );
	[SCLIBRARY].CMM_GetConstantValue( 'INSCOMPANY', ConstantInstallation, CompanyConstant );
	[SCLIBRARY].CMM_GetConstantValue( SOConstant, SOINID, SORestric );

	------------------------------------------------------
	-- Dynamic query conditions
	------------------------------------------------------

	/* Dynamic sort direction statement */
	SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	SORT_DYNAMIC := CASE SortBy
		WHEN 'ReturnNumber' THEN ' A.SHDOCO ' || SORTDIR_DYNAMIC || ', A.SHTRDJ DESC'
		WHEN 'OrderNumber' THEN '(CASE WHEN A.SHOORN = '' '' THEN N''0'' ELSE A.SHOORN END) ' || SORTDIR_DYNAMIC || ', A.SHTRDJ DESC'
		WHEN 'CustomerReference' THEN ' UPPER(A.SHVR01) ' || SORTDIR_DYNAMIC || ', A.SHTRDJ DESC'
		WHEN 'TransactionDate' THEN ' A.SHTRDJ ' || SORTDIR_DYNAMIC || ', A.SHDOCO DESC'
		ELSE 'A.SHTRDJ DESC, A.SHDOCO DESC'
	END;
	
	IF (AddressNumber IS NOT NULL) THEN
		IF (AddressBookType = 0) THEN
			WHERE_DYNAMIC := N' A.SHAN8 = :AddressNumber ';
        ELSE
			WHERE_DYNAMIC := N' B.SH$9AN8 = :AddressBookType ';
        END IF;
	ELSE
		WHERE_DYNAMIC :=N' (1 = 1 OR :AddressNumber IS NULL) ';
	END IF;

	IF (ReturnNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SHDOCO = :ReturnNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ReturnNumber IS NULL) ';
	END IF;

	IF (ReturnDateFrom IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SHTRDJ >= :ReturnDateFrom  ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ReturnDateFrom IS NULL) ';
	END IF;

	IF (ReturnDateTo IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SHTRDJ <= :ReturnDateTo ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ReturnDateTo IS NULL) ';
	END IF;

	IF (ReferenceNumber <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC ||  N' AND UPPER(A.SHVR01) LIKE ''%'' || :ReferenceNumber || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ReferenceNumber = ''*'') ';
	END IF;

	IF (ReturnType <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SHDCTO = :ReturnType ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ReturnType = ''*'') ';
	END IF;

	IF (Company <> '*' AND Company <> '00000') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC ||  N' AND A.SHKCOO = :Company ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Company = ''*'') ';
	END IF;

	IF (CompanyConstant = 'L') THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 D
											 ON D.CICO = A.SHCO /*Company*/
												AND D.CI$9INID = ''' || ConstantInstallation || N''' ';
	END IF;

	IF (ROrderRestric = N'1') THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
											 ON DR.DRKY = A.SHDCTO 
												AND DR.DR$9INID = ''' || ROrderINID || N'''
												AND DR.DR$9CNST = ''' || ROrderConstant || N''' ';
	END IF;

	WHERE_DYNAMIC := N' WHERE ' || WHERE_DYNAMIC;

	/* Customer type, do not join with extended info */
	IF ( AddressBookType = 0 ) THEN
		SQL_DYNAMIC := N'
		WITH CTE AS (
			SELECT
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ,
				A.SHOORN				
			FROM [SCDATA].F4201 A	
			' || INNER_DYNAMIC
			|| WHERE_DYNAMIC ||	N'
			UNION ALL	
			SELECT  
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ,
				A.SHOORN
			FROM [SCDATA].F42019 A
			' || INNER_DYNAMIC
			|| WHERE_DYNAMIC || N' 
		), PAGING AS (
			SELECT
				A.SHDOCO		AS ReturnNumber, 
				A.SHDCTO		AS ReturnType,
				A.SHKCOO		AS ReturnCompany, 
				A.SHVR01		AS CustomerReference, 
				A.SHTRDJ		AS TransactionDate,
				COUNT (DISTINCT L.SDOORN) AS ReturnedOrders,
				ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM
			FROM
				CTE A
			INNER JOIN [SCDATA].F0010 TB
				ON TB.CCCO = A.SHKCOO
			LEFT OUTER JOIN [SCDATA].F4211 L
				ON  L.SDDOCO = A.SHDOCO
				AND L.SDDCTO = A.SHDCTO
				AND L.SDKCOO = A.SHKCOO
				AND L.SDOORN <> '' ''
			GROUP BY A.SHDOCO, A.SHDCTO, A.SHKCOO, A.SHVR01, A.SHTRDJ, A.SHOORN
		) 
		SELECT A.ReturnNumber, A.ReturnType, A.ReturnCompany, A.CustomerReference, A.TransactionDate, 
			O.SDOKCO OriginalOrderCompany, O.SDOORN OriginalOrderNumber, O.SDOCTO OriginalOrderType, A.ReturnedOrders, 
			(CASE WHEN :SORestric = ''1'' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END) AS ISORDERRESTRICTED, 
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM 
			PAGING A
		LEFT OUTER JOIN TABLE(SCLIBRARY.COM_GetOriginalOrderInfoFnc(A.ReturnNumber, A.ReturnType, A.ReturnCompany)) O 
			ON O.SDDOCO  = A.ReturnNumber
			AND O.SDDCTO  = A.ReturnType
			AND O.SDKCOO  = A.ReturnCompany
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
			ON SOR1.DRKY = O.SDOCTO
			AND SOR1.DR$9INID = :SOINID
			AND SOR1.DR$9CNST = :SOConstant
		WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))';
	ELSE	/* Consumer type */
		SQL_DYNAMIC := N'
		WITH CTE AS (
			SELECT
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ,
				A.SHOORN				
			FROM [SCDATA].F4201 A				/*Sales Order Header*/
			INNER JOIN [SCDATA].FQ674201 B	/*Extended Sales Order Header*/
				ON B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO 
				AND B.SH$9TYP = 1
			' || INNER_DYNAMIC
			|| WHERE_DYNAMIC ||	N'
			UNION ALL	
			SELECT  
				A.SHDOCO, 
				A.SHDCTO, 
				A.SHKCOO, 
				A.SHVR01, 
				A.SHTRDJ, 
				A.SHOORN
			FROM [SCDATA].F42019 A	
			INNER JOIN [SCDATA].FQ674201 B	/*Extended Sales Order Header*/
				ON B.SHKCOO = A.SHKCOO
				AND B.SHDOCO = A.SHDOCO
				AND B.SHDCTO = A.SHDCTO 
				AND B.SH$9TYP = 1
			' || INNER_DYNAMIC
			|| WHERE_DYNAMIC || N' 
		), PAGING AS (
			SELECT
				A.SHDOCO		AS ReturnNumber, 
				A.SHDCTO		AS ReturnType,
				A.SHKCOO		AS ReturnCompany, 
				A.SHVR01		AS CustomerReference, 
				A.SHTRDJ		AS TransactionDate,
				COUNT (DISTINCT L.SDOORN) AS ReturnedOrders,
				ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM
			FROM
				CTE A
			INNER JOIN [SCDATA].F0010 TB
				ON TB.CCCO = A.SHKCOO
			LEFT OUTER JOIN [SCDATA].F4211 L
				ON  L.SDDOCO = A.SHDOCO
				AND L.SDDCTO = A.SHDCTO
				AND L.SDKCOO = A.SHKCOO
				AND L.SDOORN <> '' ''
			GROUP BY A.SHDOCO, A.SHDCTO, A.SHKCOO, A.SHVR01, A.SHTRDJ, A.SHOORN
		) 
		SELECT A.ReturnNumber, A.ReturnType, A.ReturnCompany, A.CustomerReference, A.TransactionDate, 
			O.SDOKCO OriginalOrderCompany,  O.SDOORN OriginalOrderNumber, O.SDOCTO OriginalOrderType, A.ReturnedOrders, 
			(CASE WHEN :SORestric = ''1'' THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END) AS ISORDERRESTRICTED, 
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM 
			PAGING A
		LEFT OUTER JOIN TABLE(SCLIBRARY.COM_GetOriginalOrderInfoFnc(A.ReturnNumber, A.ReturnType, A.ReturnCompany)) O 
			ON O.SDDOCO  = A.ReturnNumber
			AND O.SDDCTO  = A.ReturnType
			AND O.SDKCOO  = A.ReturnCompany
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
			ON SOR1.DRKY = O.SDOCTO
			AND SOR1.DR$9INID = :SOINID
			AND SOR1.DR$9CNST = :SOConstant
		WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))';
	END IF;
		
	OPEN ResultData1 FOR SQL_DYNAMIC USING AddressNumber, ReturnNumber, ReturnDateFrom, ReturnDateTo, ReferenceNumber, ReturnType, Company,
											AddressNumber, ReturnNumber, ReturnDateFrom, ReturnDateTo, ReferenceNumber, ReturnType, Company,
											SORestric, SOINID, SOConstant, PageIndex, PageSize, RowStart, RowEnd;
				
END;
  /
-- #desc							N/A
-- #bl_class						Premier.Commerce.SalesOrderWeb.cs
-- #db_dependencies					COM_GetSalesOrderHeader,COM_GetSalesOrderDetail
-- #db_references					N/A

-- #param Company					Company Number to search for.
-- #param OrderType					Order number to search for.
-- #param OrderNumber				Order type to search for.
-- #param InstallationID			Installation Id
-- #param RetrieveWebContentInfo	Condition to validate if Retrieve Web Content Info or no.
-- #param LangPref					Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrder
(
	Company						IN NVARCHAR2,
	OrderType					IN NVARCHAR2,
	OrderNumber					IN DECIMAL,
	InstallationID				IN NVARCHAR2,
	RetrieveWebContentInfo      IN INT,
	LangPref					IN NVARCHAR2,
	ResultData1					OUT GLOBALPKG.refcursor,
	ResultData2					OUT GLOBALPKG.refcursor,
	ResultData3					OUT GLOBALPKG.refcursor,
	ResultData4					OUT GLOBALPKG.refcursor
)
AS
BEGIN
    --Read Header information
    [SCLIBRARY].COM_GetSalesOrderHeader( Company, OrderType, OrderNumber , InstallationID, ResultData1);

    --Read Line Detail information
    [SCLIBRARY].COM_GetSalesOrderDetail( Company, OrderType, OrderNumber , InstallationID, RetrieveWebContentInfo, LangPref, ResultData2);

    --Read All Payments Information
    [SCLIBRARY].COM_GetSalesOrderPayments( Company, OrderType, OrderNumber ,ResultData3);

	/*Configured Items*/
	[SCLIBRARY].COM_GetSOConfiguredLineList(Company, OrderType, OrderNumber, LangPref, ResultData4);
END;






  /
 -- #desc					Get Sales Order Head Ship Info
-- #bl_class				Premier.Commerce.GetSalesOrderHeadShipInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderHeadShipInfo
(
	OrderCompany	IN	NVARCHAR2,
	OrderType		IN	NVARCHAR2,
	OrderNumber		IN	DECIMAL,
	ShipToNumber	OUT	DECIMAL
)
AS 
BEGIN
	BEGIN
	    SELECT SHSHAN INTO ShipToNumber 
	    FROM 
	        [SCDATA].F4201 
	    WHERE SHKCOO = OrderCompany 					
		  AND SHDCTO = OrderType
		  AND SHDOCO = OrderNumber;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    ShipToNumber := NULL;
    END;
    
    IF(ShipToNumber IS NULL) OR (ShipToNumber = 0) THEN
		BEGIN
			SELECT SHSHAN INTO ShipToNumber 
			FROM 
				[SCDATA].F42019 
			WHERE SHKCOO = OrderCompany 					
		      AND TRIM(SHDCTO) = TRIM(OrderType)
			  AND TRIM(SHDOCO) = TRIM(OrderNumber);
			EXCEPTION WHEN NO_DATA_FOUND THEN 
			ShipToNumber := 0;
		END;
    END IF;
END; 
  /
-- #desc						N/A
-- #bl_class					Premier.Commerce.SalesOrderHeaderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param Company				Company
-- #param OrderType				Document type to search for
-- #param OrderNumber			Order Number
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param OrderDateFrom			Date Range
-- #param OrderDateTo			Date Range
-- #param ReferenceNumber		Reference Number
-- #param AllOpenOrders			AllOpenOrders
-- #param ItemNumber			Specific item to search for
-- #param SortBy				Column to filter by OrderType (),
--								OrderNumber(), CustomerReference, OrderDate(Default Value), ProductTotal */
-- #param SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value
-- #param PageIndex				Page Index
-- #param PageSize				Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderHeadSrchList
(
	InstallationID			IN NCHAR,
	Company					IN NCHAR,
	OrderType				IN NCHAR,
	AddressNumber			IN NUMBER,
	OrderNumber				IN NUMBER,
	ShipToNumber			IN NUMBER,
	AddressBookType			IN NUMBER,
	OrderDateFrom			IN NUMBER,
	OrderDateTo				IN NUMBER,
	ReferenceNumber			IN NCHAR,
	AllOpenOrders			IN NUMBER,
	ItemNumber				IN NUMBER,
	SortBy					IN NVARCHAR2,
	SortDir					IN NVARCHAR2,
	PageIndex				IN INT,
	PageSize				IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	--Dynamic
	SQL_DYNAMIC		  VARCHAR2(4000);
	WHERE_DYNAMIC	  NVARCHAR2(1000) := ' ';
	FROM_DYNAMIC	  NVARCHAR2(500) := ' ';
	INNER_COMPANY	  NVARCHAR2(1000) := ' ';
	INNER_DOCUMENT	  NVARCHAR2(1000) := ' ';
	STATUS_DYNAMIC	  NVARCHAR2(1000) := ' ';

	--Dynamic Sort
	SORT_DYNAMIC NVARCHAR2(200);
	SORTDIR_DYNAMIC NVARCHAR2(5);

	-- Gets the Sales Order Document Restrictions
	SOrderRestric	NVARCHAR2(1);
	SOrderINID		NCHAR(3) := InstallationID;

	-- Gets the Freight Line Type
	FreightLineType	NCHAR(2);
	FreightINID		NCHAR(3) := InstallationID;

	-- Gets the Discount Line Type
	DiscountLineType	NCHAR(2);
	DiscountINID		NCHAR(3) := InstallationID;

	-- Gets the Surcharge Line Type
	SurchargeLineType	NCHAR(2);
	SurchargeINID		NCHAR(3) := InstallationID;

	-- Gets the Order History Status
	OrderHistoryStatus	NCHAR(3);
	OrderHistoryINID	NCHAR(3) := InstallationID;

	-- Gets Account Receivable Installation Companies constant
	CompanyRestric	NVARCHAR2(1);
	CompanyINID		NCHAR(3) := InstallationID;

	/* REVIEW */
	-- Gets Foreign Constant
	ForeignConstant	NVARCHAR2(1);
	ForeignConstantINID		NCHAR(3) := InstallationID;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);

BEGIN

	[SCLIBRARY].CMM_GetConstantValue('SO_RESTRIC', SOrderINID, SOrderRestric);
	[SCLIBRARY].CMM_GetConstantValue('FREIGHTLN', FreightINID, FreightLineType);
	[SCLIBRARY].CMM_GetConstantValue('DISCOUNTLN', DiscountINID, DiscountLineType);
	[SCLIBRARY].CMM_GetConstantValue('SURCHARGLN', SurchargeINID, SurchargeLineType);
	[SCLIBRARY].CMM_GetConstantValue('ORD_SCHOPN', OrderHistoryINID, OrderHistoryStatus);
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', CompanyINID, CompanyRestric);
	[SCLIBRARY].CMM_GetConstantValue('FOREGCURYN', ForeignConstantINID, ForeignConstant);

	------------------------------------------------------
	-- Dynamic query from
	------------------------------------------------------

	IF (ShipToNumber IS NOT NULL) OR (ItemNumber IS NOT NULL) OR (AllOpenOrders = N'1') THEN
		IF (AddressBookType = 0) THEN
			FROM_DYNAMIC := N' FROM [SCLIBRARY].COM_CustomerSOHeadSrchVW VW ' ;
		ELSIF (AddressBookType = 1) THEN
			FROM_DYNAMIC := N' FROM [SCLIBRARY].COM_ConsumerSOHeadSrchVW VW ' ;
		ELSE
			FROM_DYNAMIC := N' FROM [SCLIBRARY].COM_SalesOrderHeadSrchVW VW ' ;
		END IF;
	ELSE
		IF (AddressBookType = 0) THEN
			FROM_DYNAMIC := N' FROM [SCLIBRARY].COM_CustomerOrderHeaderVW VW ' ;
		ELSIF (AddressBookType = 1) THEN
			FROM_DYNAMIC := N' FROM [SCLIBRARY].COM_ConsumerOrderHeaderVW VW ' ;
		ELSE
			FROM_DYNAMIC := N' FROM [SCLIBRARY].COM_SalesOrderHeadVW VW ' ;
		END IF;
	END IF;


	/*Exclude restricted document types*/
	IF (SOrderRestric = N'1') THEN
		INNER_DOCUMENT := N' INNER JOIN [SCDATA].FQ67008 SOR
				ON SOR.DR$9INID =  ''' || SOrderINID || N'''
				AND SOR.DR$9CNST = ''SO_RESTRIC''
				AND SOR.DRKY = VW.SHDCTO ';
	END IF;

	IF (CompanyRestric = 'L') THEN
		INNER_COMPANY := INNER_COMPANY || N' INNER JOIN [SCDATA].FQ679912 CR
											 ON CR.CI$9INID = ''' || CompanyINID || N'''
												AND CR.CICO = VW.SHCO /*Company*/ ';
	END IF;

	------------------------------------------------------
	-- Dynamic query conditions
	------------------------------------------------------

		/* Dynamic sort direction statement */
	SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	SORT_DYNAMIC := CASE
		WHEN SortBy = 'OrderDate' THEN 'SHTRDJ ' || SORTDIR_DYNAMIC || ', SHDOCO DESC'
		WHEN SortBy = 'OrderType' THEN 'SHDCTO ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC'
		WHEN SortBy = 'OrderNumber' THEN 'SHDOCO ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC'
		WHEN SortBy = 'CustomerReference' THEN 'UPPER(SHVR01) ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC'
		WHEN SortBy = 'ProductTotal' THEN '(CASE WHEN ('''||ForeignConstant || ''' = ''Y'' AND SHCRRM = ''F'' ) THEN SHFAP 
                                             ELSE SHOTOT END )' || SORTDIR_DYNAMIC || ', SHTRDJ DESC'
		ELSE 'SHTRDJ DESC, SHDOCO DESC'
	END;

	
	IF (AddressNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := N'BillToNumber = :AddressNumber ';
	ELSE
		WHERE_DYNAMIC := N' (1 = 1 OR :AddressNumber IS NULL) ';
	END IF;

	IF (OrderDateFrom IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SHTRDJ BETWEEN :OrderDateFrom AND :OrderDateTo ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :OrderDateFrom IS NULL OR :OrderDateTo IS NULL) ';
	END IF;

	IF (OrderNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SHDOCO = :OrderNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :OrderNumber IS NULL) ';
	END IF;

	IF (ShipToNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SHAN = :ShipToNumber AND SDLNTY <> :FreightLineType AND SDLNTY <> :DiscountLineType AND SDLNTY <> :SurchargeLineType ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ShipToNumber IS NULL OR :FreightLineType IS NULL OR :DiscountLineType IS NULL OR :SurchargeLineType IS NULL) ';
	END IF;

	IF (ItemNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SDITM = :ItemNumber AND SDLNTY <> :FreightLineType AND SDLNTY <> :DiscountLineType AND SDLNTY <> :SurchargeLineType';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ItemNumber IS NULL OR :FreightLineType IS NULL OR :DiscountLineType IS NULL OR :SurchargeLineType IS NULL) ';
	END IF;

	IF (OrderType <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SHDCTO = :OrderType ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :OrderType = ''*'') ';
	END IF;
	 
	IF (AllOpenOrders = '1') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SDNXTR <= :OrderHistoryStatus ';
		STATUS_DYNAMIC := N' ''OPEN'' AS OrderStatus ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :OrderHistoryStatus IS NULL) ';
		STATUS_DYNAMIC := N' [SCLIBRARY].COM_GetSalesOrderStatusFnc(A.SHDOCO, A.SHKCOO, A.SHDCTO, N''' || OrderHistoryStatus || N''', N''' || FreightLineType || N''', N''' || DiscountLineType || N''', N''' || SurchargeLineType || N''') AS OrderStatus ';
	END IF;

	IF (Company <> '*' AND Company <> '00000') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SHKCOO = :Company ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Company = ''*'') ';
	END IF;

	IF (ReferenceNumber <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(SHVR01) LIKE ''%'' || :ReferenceNumber || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ReferenceNumber = ''*'') ';
	END IF;

	WHERE_DYNAMIC := N' WHERE ' || WHERE_DYNAMIC;

	------------------------------------------------------
	-- Dynamic query
	------------------------------------------------------

	SQL_DYNAMIC := N'
	WITH PAGING AS (
		SELECT 
			SHDOCO,
			SHDCTO,
			SHKCOO,
			SHVR01,
			SHTRDJ,
			SHDRQJ,
			SHOTOT,
			SHFAP,
			SHCRCD,
			SHCRRM,
			SHHOLD,
			SHRORN,
			SHRCTO,
			SHDEL1,
			SHDEL2,
			BaseCurrencyCode,
			AddressBookType,
			BillToNumber,
			ShipToNumber,
			ROW_NUMBER() OVER (ORDER BY '||SORT_DYNAMIC|| ') AS RNUM ' 
		|| FROM_DYNAMIC 
		|| INNER_COMPANY 
		|| INNER_DOCUMENT
		|| WHERE_DYNAMIC ||'
		GROUP BY (SHDOCO, SHDCTO, SHKCOO, SHVR01, SHTRDJ, SHDRQJ, SHOTOT,
			      SHFAP, SHCRCD, SHCRRM, SHHOLD, SHRORN, SHRCTO, SHDEL1,
			      SHDEL2, BaseCurrencyCode, AddressBookType, BillToNumber,
			      ShipToNumber)
		)
		SELECT
			A.SHDOCO AS OrderNumber,
			A.SHDCTO AS OrderType,
			A.SHKCOO AS OrderCompany,
			A.SHVR01 AS CustomerReference,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			A.SHOTOT AS ProductTotal,
			A.SHFAP AS ProductTotalForeign,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			A.SHHOLD AS HoldCode,
			A.SHRORN AS RelatedOrderNumber,
			A.SHRCTO AS RelatedOrderType,
			A.SHDEL1 AS DeliveryInst1,
			A.SHDEL2 AS DeliveryInst2,
			A.BaseCurrencyCode,
			A.AddressBookType,
			A.BillToNumber,
			A.ShipToNumber,
			'|| STATUS_DYNAMIC ||',
			(SELECT COUNT(1) FROM PAGING ) AS TotalRowCount
		FROM PAGING A
		WHERE
			((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))
		';

	OPEN ResultData1 FOR SQL_DYNAMIC USING AddressNumber, OrderDateFrom, OrderDateTo, OrderNumber,ShipToNumber, FreightLineType,
										DiscountLineType, SurchargeLineType, ItemNumber,FreightLineType, DiscountLineType, SurchargeLineType,
										OrderType, OrderHistoryStatus, Company, ReferenceNumber, PageIndex, PageSize, RowStart, RowEnd;


END;
  /
-- #desc							Load a order detail
-- #bl_class						Premier.Commerce.SalesOrderInfo.cs
-- #db_dependencies					COM_GetSalesOrderBillToInfo.sql , COM_GetSalesOrderShipments
--									COM_GetSalesOrderInfo_Payments.sql
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param OrderCompany				Company ID
-- #param OrderType					Document Type
-- #param OrderNumber				OrderNumber
-- #param RetrieveReturnInfo		Retrieve Return Info
-- #param RetrieveWebContentInfo	Retrieve Web Content Info
-- #param LangPref					Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderInfo_Z
(
	InstallationID			IN NCHAR,
	OrderCompany			IN NCHAR,
	OrderType				IN NCHAR,
	OrderNumber				IN NUMBER,
	RetrieveReturnInfo		IN DECIMAL,
	RetrieveWebContentInfo	IN INT,
	LangPref				IN NCHAR,
	ResultData1				OUT GLOBALPKG.refcursor,
	ResultData2				OUT GLOBALPKG.refcursor,
	ResultData3				OUT GLOBALPKG.refcursor,
	ResultData4				OUT GLOBALPKG.refcursor,
	ResultData5				OUT GLOBALPKG.refcursor,
	ResultData6				OUT GLOBALPKG.refcursor,
	ResultData7				OUT GLOBALPKG.refcursor
)
AS
	/* STORE PROCEDURE VARIABLES */
	 ScBillTo		NUMBER;
	 ScShipTo		NUMBER;
	 AddressType	NUMBER;
	 ContactID		NUMBER;	 
	 Freight INT;
	 IsOverrideShipTo INT;
	
	 SInvoiceRestric     NVARCHAR2(1);
     SInvoiceINID        NCHAR(3):= InstallationID;
	 SInvoiceConstant    NCHAR(10) := 'AR_RESTRIC';
	
	 CustCrossRefType	NCHAR(2);
	 CustCrossINID		NCHAR(3):= InstallationID;
	 
     CurrentJulianDate NUMBER(6,0);
     
     CancelLn			NVARCHAR2(1);
	 CancelLnINID	    NCHAR(3):= InstallationID;
	 CancelLnConstant	NCHAR(10):= 'YNCANCELLN';

	 CurrencyModeTMP		NCHAR(1);
     BaseCurrencyCodeTMP    NCHAR(3);
     BaseCurrencyDescTMP	NCHAR(30);  
    
	 -- Foreign Constant
	 ForeignValue		NVARCHAR2(1);
	 ForeignINID         NCHAR(3):= InstallationID;
	 ForeignConstant     NCHAR(10):= 'FOREGCURYN';
	 
BEGIN			
	
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETSALESORDERINFO_Z_A';
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETSALESORDERINFO_Z_B';	
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].COM_GETSALESORDERSHIPMENTS_A';	

	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	[SCLIBRARY].CMM_GetConstantValue(SInvoiceConstant, SInvoiceINID, SInvoiceRestric);
	[SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossINID, CustCrossRefType);
	[SCLIBRARY].CMM_GetConstantValue(CancelLnConstant, CancelLnINID, CancelLn);

    /* Load Address Book Type Variable From Order Header */
	BEGIN
		SELECT
			B.SH$9TYP,B.SHIDLN INTO AddressType, ContactID
	FROM	[SCDATA].FQ674201 B
	WHERE	B.SHDOCO = OrderNumber
		AND	B.SHKCOO = OrderCompany
		AND	B.SHDCTO = OrderType
		AND rownum  < 2;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
         AddressType:= 0;
         ContactID:= 0;
	END;

	/* LOAD ORDER DETAIL TEMPORARY TABLE */
	INSERT INTO [SCLIBRARY].COM_GETSALESORDERINFO_Z_B
	SELECT	DISTINCT			
			A.SDKCOO				AS OrderCompany,
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS OrderNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,		
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDIVD					AS DateInvoice,
			A.SDKCO					AS InvoiceCompany,
			A.SDDOC					AS InvoiceNumber,
			A.SDDCT					AS InvoiceType,
			A.SDSHAN				AS ShipToID,
			CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
			' '						AS ShipToName,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			NVL(S.IVCITM,' ')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			NVL(T1.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			' '						AS IsInvoiceRestricted,
			NVL(B.SD$9SLN,0)		AS ShipLineNumber,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			CASE A.SDADDJ 
				WHEN 0 THEN A.SDTRDJ 
				ELSE A.SDADDJ END	AS ShippedDate,
			A.SDLOCN				AS Location,
			A.SDLOTN				AS LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			NVL(C.RFOGNO, 0 ) AS ParentLineNo,
			CASE WHEN A.SDSO08 = '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
			FROM	[SCDATA].F4211 A		--Standard Sales OrderDetail
			  LEFT OUTER JOIN	[SCDATA].FQ674211 B
				ON 	B.SDKCOO = A.SDKCOO
				AND B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO
				AND B.SDLNID = A.SDLNID
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON  C.RFDOCO = A.SDDOCO
				AND C.RFDCTO = A.SDDCTO
				AND C.RFKCOO = A.SDKCOO
				AND C.RFLNID = A.SDLNID
			  LEFT OUTER JOIN  [SCDATA].F4104 S --Item Cross Ref
				 ON AddressType = 0	
				 AND  S.IVAN8 =	A.SDAN8  
				 AND S.IVITM  = A.SDITM
				 AND S.IVXRT = CustCrossRefType
				 AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
			  INNER  JOIN [SCDATA].F40205	T1 --Line Type			1
				ON T1.LFLNTY = A.SDLNTY
			  LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
				ON IM.IMITM = A.SDITM
			  WHERE	A.SDDOCO = OrderNumber
			  AND		A.SDDCTO = OrderType
			  AND		A.SDKCOO = OrderCompany
			  AND (CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
	UNION ALL
	SELECT	DISTINCT
			A.SDKCOO				AS OrderCompany, 
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS OrderNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,		
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDIVD					AS DateInvoice,
			A.SDKCO					AS InvoiceCompany,
			A.SDDOC					AS InvoiceNumber,
			A.SDDCT					AS InvoiceType,
			A.SDSHAN				AS ShipToID,
			CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
			' '						AS ShipToName,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			NVL(S.IVCITM,' ')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			NVL(T1.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM,
			A.SDAITM,
			' '						AS IsInvoiceRestricted,
			NVL(B.SD$9SLN,0)		AS ShipLineNumber,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			CASE A.SDADDJ 
				WHEN 0 THEN A.SDTRDJ 
				ELSE A.SDADDJ END	AS ShippedDate,
			A.SDLOCN				AS Location,
			A.SDLOTN				AS LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			NVL(C.RFOGNO, 0 ) AS ParentLineNo,
			CASE WHEN A.SDSO08 = '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing

	FROM 	[SCDATA].F42119 A
        LEFT OUTER JOIN [SCDATA].FQ674211 B
          ON 	A.SDDOCO = B.SDDOCO 
          AND A.SDDCTO = B.SDDCTO
          AND A.SDKCOO = B.SDKCOO
          AND A.SDLNID = B.SDLNID
		LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
			ON  C.RFDOCO = A.SDDOCO
			AND C.RFDCTO = A.SDDCTO
			AND C.RFKCOO = A.SDKCOO
			AND C.RFLNID = A.SDLNID
        LEFT OUTER JOIN [SCDATA].F4104 S --Item Cross Ref
          ON  S.IVAN8  = A.SDAN8
          AND S.IVITM  = A.SDITM
          AND AddressType = 0		--Not join if AdrressType = 1 - Consumer  
          AND S.IVXRT = CustCrossRefType
          AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
        LEFT OUTER JOIN [SCDATA].F40205 T1 --Line Type
          ON 	T1.LFLNTY = A.SDLNTY
        LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		  ON IM.IMITM = A.SDITM
        WHERE	A.SDDOCO = OrderNumber
        AND		A.SDDCTO = OrderType
        AND		A.SDKCOO = OrderCompany
        AND (CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))		
  ORDER BY A.SDLNID ASC;
	
	-- LOAD ORDER HEADER TEMPORARY TABLE
	INSERT INTO [SCLIBRARY].COM_GETSALESORDERINFO_Z_A
	SELECT	DISTINCT
			CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END		AS SCBillToNumber,
			CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
			NVL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1,
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			NVL(B.SH$9MKT, ' ') AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			'N' AS ISORDERRESTRICTED,
			A.SHCO	    AS	OrderHeaderCompany,
			'Y' AS IsFreightOn,
			' ' AS  BaseCurrency,
			' ' AS BaseCurrencyDesc,
			A.SHRYIN AS PaymentInstrument
	FROM	[SCDATA].F4201 A
	LEFT OUTER JOIN   [SCDATA].FQ674201 B
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN	[SCDATA].F0013 C
			ON  A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = OrderNumber
	AND		A.SHDCTO = OrderType
	AND		A.SHKCOO = OrderCompany
	UNION ALL
	SELECT	DISTINCT
			CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
			CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
			NVL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1,
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			NVL(B.SH$9MKT, ' ') AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			'N' AS ISORDERRESTRICTED,
			A.SHCO	    AS	OrderHeaderCompany,
			'Y' AS IsFreightOn,
			' ' AS  BaseCurrency,
			' ' AS BaseCurrencyDesc,
			A.SHRYIN AS PaymentInstrument
	FROM 	[SCDATA].F42019 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN	[SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = OrderNumber
		AND A.SHDCTO = OrderType
		AND A.SHKCOO = OrderCompany;
	
	BEGIN
		/* Update the field IsFreightOn  when is FREIGHT OFF*/	
		SELECT COUNT(1) INTO Freight FROM [SCDATA].FQ67496 WHERE FRKCOO = OrderCompany AND FRDCTO = OrderType AND FRDOCO = OrderNumber;
		IF(Freight = 0) THEN         /* When the ship line Number is 0 the order is freight OFF*/	
			UPDATE [SCLIBRARY].COM_GETSALESORDERINFO_Z_A Header
			   SET Header.IsFreightOn = 'N';  /* N is Freight Off, Y is Freigh On*/
		END IF;
	END;

	--Load BillTo Variables From Order Header
	BEGIN
	SELECT 
	    SCBillToNumber,
	    SCShipToNumber,
	    AddressBookType, 
	    CurrencyMode
	INTO ScBillTo,ScShipTo,AddressType, CurrencyModeTMP
	FROM [SCLIBRARY].COM_GETSALESORDERINFO_Z_A
	WHERE ROWNUM < 2;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		ScBillTo:=0;
		ScShipTo:=0;
		AddressType:=0;
	END;
	
	IF (CurrencyModeTMP = 'F') THEN
		[SCLIBRARY].CMM_GetConstantValue(ForeignConstant, ForeignINID, ForeignValue);
		IF(ForeignValue = 'N')THEN    /*Foreign is OFF*/
			SELECT B.CCCRCD, C.CVDL01
				INTO BaseCurrencyCodeTMP, BaseCurrencyDescTMP
			FROM [SCLIBRARY].COM_GETSALESORDERINFO_Z_A A
			INNER JOIN [SCDATA].F0010 B
			ON B.CCCO = A.OrderCompany
			LEFT OUTER JOIN [SCDATA].F0013 C
			ON B.CCCRCD = C.CVCRCD;			
		END IF;
	END	IF;
	
	OPEN ResultData1 FOR
	SELECT
		A.SCBillToNumber,
		A.SCShipToNumber,
		A.AddressBookType,
		A.DeliveryInst1, 
		A.DeliveryInst2,
		A.CustomerPO,
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.OrderDate,
		A.RequestedDate,
		A.MarketingCode,
		A.HoldOrderCode,
		A.CurrencyCode,
		A.CurrencyMode,
		A.CurrencyDesc,
		A.ISORDERRESTRICTED,
		A.OrderHeaderCompany,
		A.IsFreightOn,
		NVL(BaseCurrencyCodeTMP, ' ') AS BaseCurrencyCode,
		NVL(BaseCurrencyDescTMP, ' ') AS BaseCurrencyDesc,
		A.PaymentInstrument,
		NVL(NVL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
	FROM [SCLIBRARY].COM_GETSALESORDERINFO_Z_A A
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON	Tax.STDOCO = A.OrderNumber 
		AND Tax.STDCTO = A.OrderType
		AND Tax.STKCOO = A.OrderCompany
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.OrderNumber 
		AND TxHistory.STDCTO = A.OrderType
		AND TxHistory.STKCOO = A.OrderCompany;
	
	[SCLIBRARY].COM_GetSalesOrderInfo_BillTo(OrderCompany,OrderType,OrderNumber,ScBillTo,AddressType,ContactID,ResultData2);

	SELECT COUNT(1) INTO IsOverrideShipTo 
	FROM [SCDATA].F4006
	WHERE OADOCO = OrderNumber			
		AND OADCTO = OrderType
		AND OAKCOO = OrderCompany  
		AND OAANTY = 2; 
		
	IF (IsOverrideShipTo > 0) THEN
		UPDATE [SCLIBRARY].COM_GETSALESORDERINFO_Z_B 
		SET SCShipToNumber = ScShipTo, ShipLineNumber =1;	
	END IF;

	INSERT INTO	[SCLIBRARY].COM_GetSalesOrderShipments_A	
	SELECT DISTINCT
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.CostCenter, 
		A.ShipLineNumber,
		A.SCShipToNumber,
		A.LineType
	FROM [SCLIBRARY].COM_GETSALESORDERINFO_Z_B A;
	[SCLIBRARY].COM_GetSalesOrderShipments(InstallationID, OrderCompany, OrderType, OrderNumber, ScShipTo, AddressType, Freight, IsOverrideShipTo, ResultData3);	
	

	IF (RetrieveWebContentInfo = 0) THEN
		OPEN ResultData4 FOR
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.NextStatus,
			A.LastStatus,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.DateInvoice,
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.ShipToID,
			A.SCShipToNumber,
			A.ShipToName,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			A.Description1	AS Description1, /* Retrieve1 for Tracking lines */
			A.Description2	AS Description2,
			''  AS URL,
			A.ShippingQuantity,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.CarrierID,
			A.ModeOfTransportation,
			A.IdentifierShortItem,
			A.LongItemNumber,
			A.AuxItemNumber,
			(CASE WHEN SInvoiceRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS IsInvoiceRestricted,
			A.ShipLineNumber,
			A.OverridePrice,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,
			NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			A.ShippedDate,
			A.Location,
			A.LotNumber,
			A.IsFreeGood,
			A.ParentLineNo,
			A.IsBasketRepricing
		FROM [SCLIBRARY].COM_GETSALESORDERINFO_Z_B A

		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON	Tax.DTDOCO = A.OrderNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.OrderNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SInvoiceINID
			AND DR.DR$9CNST = SInvoiceConstant 
			AND DR.DRKY = A.InvoiceType;
	ELSE
		OPEN ResultData4 FOR
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.NextStatus,
			A.LastStatus,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,
			A.DateInvoice,
			A.InvoiceCompany,
			A.InvoiceNumber,
			A.InvoiceType,
			A.ShipToID,
			A.SCShipToNumber,
			A.ShipToName,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			NVL(ContenDesc.DESC1, A.Description1)	AS Description1,
			NVL(ContenDesc.DESC2, A.Description2)	AS Description2,
			ContenDesc.URL AS URL,
			A.ShippingQuantity,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.CarrierID,
			A.ModeOfTransportation,
			A.IdentifierShortItem,
			A.LongItemNumber,
			A.AuxItemNumber,
			(CASE WHEN SInvoiceRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS IsInvoiceRestricted,
			A.ShipLineNumber,
			A.OverridePrice,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,
			NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			A.ShippedDate,
			A.Location,
			A.LotNumber,
			A.IsFreeGood,
			A.ParentLineNo,
			A.IsBasketRepricing
		FROM [SCLIBRARY].COM_GETSALESORDERINFO_Z_B A
		LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.IdentifierShortItem, LangPref, 0) ) ContenDesc 
			ON ContenDesc.DESCITM = A.IdentifierShortItem

		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON	Tax.DTDOCO = A.OrderNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.OrderNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SInvoiceINID
			AND DR.DR$9CNST = SInvoiceConstant 
			AND DR.DRKY = A.InvoiceType;
	END IF;

	
	[SCLIBRARY].COM_GetSalesOrderInfo_Payments(OrderCompany,OrderType,OrderNumber,ResultData5);

	/*Configured Items*/
	[SCLIBRARY].COM_GetSOConfiguredLineList(OrderCompany, OrderType, OrderNumber, LangPref, ResultData6);

	IF (RetrieveReturnInfo = 1) THEN
		[SCLIBRARY].COM_GetSOReturnLineList(InstallationID,OrderCompany,OrderType,OrderNumber,ResultData7);
	END IF;

END;
  /
-- #desc						Search Orders
-- #bl_class					Premier.Commerce.SalesOrderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationId		Installation ID
-- #param AddressNumber		    Address Number
-- #param ItemNumber			Item Number
-- #param TransactionDateFrom	Transaction Date From
-- #param TransactionDateTo	    Transaction Date To
-- #param ShipToNumber			Ship To Number
-- #param DisplayItemSetting	Display Item Setting
-- #param CustomerReference		Customer Reference
-- #param SortBy				Column to filter by ItemNumber (Display ITM) OrderType (),
--								OrderNumber, OrderDate(Default Value), OrderedQuantity */
-- #param SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value
-- #param PageIndex				PageIndex
-- #param PageSize				PageSize

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].COM_GetSalesOrderLineSrchList
(
	InstallationID	    IN NCHAR,
	AddressBookType		IN NUMBER,
	AddressNumber		IN NUMBER,
	ItemNumber			IN NUMBER,
	TransactionDateFrom	IN NUMBER,
	TransactionDateTo	IN NUMBER,
	ShipToNumber		IN NUMBER,
	DisplayItemSetting	IN NVARCHAR2,
	CustomerReference	IN NCHAR,
	SortBy				IN NVARCHAR2,
	SortDir				IN NVARCHAR2,
	PageIndex			IN INT,
	PageSize			IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	SQL_DYNAMIC					VARCHAR2(8000);
	WHERE_DYNAMIC				VARCHAR(8000) := N' ';
	CONS_WHERE_DYNAMIC			VARCHAR2(8000) := N'';
	INNER_DYNAMIC				VARCHAR(8000) := '';
	DISPLAY_ITEM_DYNAMIC		NVARCHAR2(8000) := '';
	FROM_DYNAMIC				NVARCHAR2(8000) := N' ';

	--Dynamic Sort
	SORT_DYNAMIC	NVARCHAR2(70);
	SORTDIR_DYNAMIC NVARCHAR2(5);

	SOrderRestric	NVARCHAR2(1);
	SOrderINID      NCHAR(3) := InstallationID;
	SOrderConstant	NCHAR(10) := 'SO_RESTRIC';

	FreightLnINID	NCHAR(3) := InstallationID;
	FreightLnType	NCHAR(2);
	DiscountLnINID	NCHAR(3) := InstallationID;
	DiscountLnType	NCHAR(2);
	TrackingLnINID	NCHAR(3) := InstallationID;
	TrackingLnType	NCHAR(2);
    SurchargeLnINID	NCHAR(3) := InstallationID;
	SurchargeLnType	NCHAR(2);

	CancelLnINID	NCHAR(3):= InstallationID;
	CancelLn		NVARCHAR2(1);

	DefLangINID		NCHAR(3) := InstallationID;
	DefLangValue	NCHAR(2);

	/* Read Account Receivable company constant */
	CompanyConstant			NVARCHAR2(1);
	ConstantInstallation	NCHAR(3):= InstallationID;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);

    RowEnd INT := (PageIndex * PageSize);
BEGIN

	/* Gets the Sales Order Document Restrictions flag */
	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);

	/* Gets the Freight Line Type */
	[SCLIBRARY].CMM_GetConstantValue('FREIGHTLN', FreightLnINID, FreightLnType);

	/* Gets the Discount Line Type */
	[SCLIBRARY].CMM_GetConstantValue('DISCOUNTLN', DiscountLnINID, DiscountLnType);

	/* Gets the Tracking Line Type */
	[SCLIBRARY].CMM_GetConstantValue('TRACKINGLN', TrackingLnINID, TrackingLnType);

    /* Gets the Surcharge Line Type */
	[SCLIBRARY].CMM_GetConstantValue('SURCHARGLN', SurchargeLnINID, SurchargeLnType);

	/* Gets if the actual company item is in company or not */
	[SCLIBRARY].CMM_GetConstantValue( 'INSCOMPANY', ConstantInstallation, CompanyConstant );

	/* Gets the Order History Status */
	[SCLIBRARY].CMM_GetConstantValue('YNCANCELLN', CancelLnINID, CancelLn);

	/* Gets Default Language */
	[SCLIBRARY].CMM_GetConstantValue('DEFLANGPRF', DefLangINID, DefLangValue);

	------------------------------------------------------
	-- Dynamic query conditions
	------------------------------------------------------

	/* Dynamic query*/
	IF (DisplayItemSetting = N'LITM') THEN
		DISPLAY_ITEM_DYNAMIC := ' LongItemNumber ';
	ELSIF (DisplayItemSetting = N'AITM') THEN
		DISPLAY_ITEM_DYNAMIC := ' AuxItemNumber ';
	ELSE
		DISPLAY_ITEM_DYNAMIC := ' ItemNumber ';
	END IF;

	/* Dynamic sort direction statement */
	SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	SORT_DYNAMIC := CASE
		WHEN SortBy = 'OrderDate' THEN 'TransactionDate ' || SORTDIR_DYNAMIC || ', OrderNumber DESC'
		WHEN SortBy = 'OrderType' THEN 'OrderType ' || SORTDIR_DYNAMIC || ', TransactionDate DESC'
		WHEN SortBy = 'OrderNumber' THEN 'OrderNumber ' || SORTDIR_DYNAMIC || ', TransactionDate DESC'
		WHEN SortBy = 'ProductNumber' THEN DISPLAY_ITEM_DYNAMIC || SORTDIR_DYNAMIC || ', TransactionDate DESC'
		WHEN SortBy = 'OrderedQuantity' THEN 'Quantity' || SORTDIR_DYNAMIC || ', TransactionDate DESC'
		WHEN SortBy = 'CustomerReference' THEN 'CustomerReference' || SORTDIR_DYNAMIC || ', TransactionDate DESC' 
		ELSE 'TransactionDate DESC, OrderNumber DESC'
	END;

	/* Dynamic query condition */
	IF (TransactionDateFrom <> N'0') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND B.SDTRDJ BETWEEN :TransactionDateFrom AND :TransactionDateTo ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR (:TransactionDateFrom IS NULL OR :TransactionDateTo IS NULL))';
	END IF;

	IF (ItemNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND B.SDITM = :ItemNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ItemNumber IS NULL) ';
	END IF;

	IF (AddressBookType = 0) THEN
		IF (ShipToNumber IS NOT NULL) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND B.SDSHAN = :ShipToNumber ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ShipToNumber IS NULL) ';
		END IF;
	ELSE 
		IF (ShipToNumber IS NOT NULL) THEN
			CONS_WHERE_DYNAMIC := N' AND B.SD$9SHAN = :ShipToNumber ';
		ELSE
			CONS_WHERE_DYNAMIC := N' AND (1 = 1 OR :ShipToNumber IS NULL) ';
		END IF;
	END IF;

	IF (CancelLn = N'N') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (B.SDLTTR < ''980'' OR B.SDLTTR = ''995'') ';
	END IF;


	IF (CustomerReference <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(A.SHVR01) LIKE ''%'' || :CustomerReference || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :CustomerReference = ''*'') ';
	END IF;

	IF (AddressBookType = 0) THEN
		WHERE_DYNAMIC := N' WHERE B.SDAN8 = :AddressNumber AND B.SDLNTY <> :FreightLnType AND B.SDLNTY <> :DiscountLnType AND B.SDLNTY <> :TrackingLnType AND B.SDLNTY <> :SurchargeLnType ' || WHERE_DYNAMIC || ' ';
	ELSE 
		WHERE_DYNAMIC := N' WHERE B.SDLNTY <> :FreightLnType AND B.SDLNTY <> :DiscountLnType AND B.SDLNTY <> :TrackingLnType AND B.SDLNTY <> :SurchargeLnType ' || WHERE_DYNAMIC || ' ' ;
		CONS_WHERE_DYNAMIC := N' WHERE B.SD$9AN8 = :AddressNumber ' || CONS_WHERE_DYNAMIC;
	END IF;

	/* Dynamic query from*/
	IF (CompanyConstant = 'L') THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 D
											 ON D.CI$9INID = ''' || ConstantInstallation || N'''
												AND D.CICO = B.Company /*Company*/ ';
	END IF;

	IF (SOrderRestric = N'1' ) THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 SOR
												ON SOR.DR$9INID = '''||SOrderINID||''' 
												AND SOR.DR$9CNST = '''||SOrderConstant||'''
												AND SOR.DRKY = B.OrderType ';
	END IF;

	IF (AddressBookType = 0) THEN
		FROM_DYNAMIC := N' WITH CTE AS (
            SELECT 
        		B.SDDOCO  AS OrderNumber, 
        		B.SDDCTO  AS OrderType, 
        		B.SDKCOO  AS Company,    
        		B.SDLNID  AS LineNumber, 
        		B.SDLNTY  AS LineType, 
        		B.SDUPRC  AS UnitPrice,
        		B.SDFUP   AS ForeignUnitPrice,
        		B.SDAEXP  AS ExtendedPrice,
        		B.SDFEA   AS ForeignExtPrice,
        		B.SDUORG  AS Quantity,
        		B.SDSOQS  AS ShippedQuantity,
        		B.SDITM   AS ItemNumber,
        		B.SDLITM   AS LongItemNumber,
        		B.SDAITM   AS AuxItemNumber,
        		B.SDUOM   AS UnitOfMeasure, 
        		B.SDUOM4  AS PricingUnitOfMeasure,
        		B.SDSHAN  AS SCShipToNumber,
				0 AS AddressBookType,
        		B.SDNXTR  AS NextStatus,
        		B.SDLTTR  AS LastStatus,
        		B.SDMCU   AS BusinessUnit,
        		B.SDEMCU  AS BusinessUnitHeader,
        		B.SDTAX1  AS TaxableYN, 
        		B.SDTXA1  AS TaxArea,
        		B.SDEXR1  AS TaxExplanationCode,
        		B.SDSOBK  AS BackorderedQuantity,
        		B.SDTRDJ  AS TransactionDate,
        		B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2
        	FROM [SCDATA].F4211 B
			INNER JOIN [SCDATA].F4201 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
			' || WHERE_DYNAMIC ||N'
        	UNION ALL
        	SELECT  
        		B.SDDOCO  AS OrderNumber, 
        		B.SDDCTO  AS OrderType, 
        		B.SDKCOO  AS Company,    
        		B.SDLNID  AS LineNumber, 
        		B.SDLNTY  AS LineType,
        		B.SDUPRC  AS UnitPrice,
        		B.SDFUP   AS ForeignUnitPrice,
        		B.SDAEXP  AS ExtendedPrice,
        		B.SDFEA   AS ForeignExtPrice,
        		B.SDUORG  AS Quantity,
        		B.SDSOQS  AS ShippedQuantity,
        		B.SDITM   AS ItemNumber,
        		B.SDLITM   AS LongItemNumber,
        		B.SDAITM   AS AuxItemNumber,
        		B.SDUOM   AS UnitOfMeasure, 
        		B.SDUOM4  AS PricingUnitOfMeasure,
        		B.SDSHAN  AS SCShipToNumber,
				0 AS AddressBookType,
        		B.SDNXTR  AS NextStatus,
        		B.SDLTTR  AS LastStatus,
        		B.SDMCU   AS BusinessUnit,
        		B.SDEMCU  AS BusinessUnitHeader,
        		B.SDTAX1  AS TaxableYN, 
        		B.SDTXA1  AS TaxArea,
        		B.SDEXR1  AS TaxExplanationCode,
        		B.SDSOBK  AS BackorderedQuantity,
        		B.SDTRDJ  AS TransactionDate,
        		B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2     		
        	FROM  [SCDATA].F42119 B
			INNER JOIN [SCDATA].F42019 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
			' || WHERE_DYNAMIC ||N'
			) ';
	ELSE
		FROM_DYNAMIC := N' WITH F4211_F42119 AS (
			SELECT 
				B.SDDOCO  AS OrderNumber, 
				B.SDDCTO  AS OrderType, 
				B.SDKCOO  AS Company,    
				B.SDLNID  AS LineNumber, 
				B.SDLNTY  AS LineType, 
				B.SDUPRC  AS UnitPrice,
				B.SDFUP   AS ForeignUnitPrice,
				B.SDAEXP  AS ExtendedPrice,
				B.SDFEA   AS ForeignExtPrice,
				B.SDUORG  AS Quantity,
				B.SDSOQS  AS ShippedQuantity,
				B.SDITM   AS ItemNumber,
        		B.SDLITM   AS LongItemNumber,
        		B.SDAITM   AS AuxItemNumber,
				B.SDUOM AS UnitOfMeasure, 
				B.SDUOM4  AS PricingUnitOfMeasure,
				B.SDNXTR AS NextStatus,
				B.SDLTTR AS LastStatus,
				B.SDMCU AS BusinessUnit,
				B.SDEMCU  AS BusinessUnitHeader,
				B.SDTAX1 AS TaxableYN, 
				B.SDTXA1  AS TaxArea,
				B.SDEXR1  AS TaxExplanationCode,
				B.SDSOBK  AS BackorderedQuantity,
				B.SDTRDJ  AS TransactionDate,
				B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2  
			FROM  [SCDATA].F4211 B
			INNER JOIN [SCDATA].F4201 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
			' || WHERE_DYNAMIC ||N'
        	UNION ALL
        	SELECT 
				B.SDDOCO  AS OrderNumber, 
				B.SDDCTO  AS OrderType, 
				B.SDKCOO  AS Company,    
				B.SDLNID  AS LineNumber, 
				B.SDLNTY  AS LineType,
				B.SDUPRC  AS UnitPrice,
				B.SDFUP  AS ForeignUnitPrice,
				B.SDAEXP  AS ExtendedPrice,
				B.SDFEA  AS ForeignExtPrice,
				B.SDUORG  AS Quantity,
				B.SDSOQS  AS ShippedQuantity,
				B.SDITM AS ItemNumber,
        		B.SDLITM   AS LongItemNumber,
        		B.SDAITM   AS AuxItemNumber,
				B.SDUOM AS UnitOfMeasure, 
				B.SDUOM4  AS PricingUnitOfMeasure,
				B.SDNXTR AS NextStatus,
				B.SDLTTR AS LastStatus,
				B.SDMCU AS BusinessUnit,
				B.SDEMCU  AS BusinessUnitHeader,
				B.SDTAX1 AS TaxableYN, 
				B.SDTXA1  AS TaxArea,
				B.SDEXR1  AS TaxExplanationCode,
				B.SDSOBK  AS BackorderedQuantity,
				B.SDTRDJ  AS TransactionDate,
				B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2
			FROM  [SCDATA].F42119 B
			INNER JOIN [SCDATA].F42019 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
          ' || WHERE_DYNAMIC ||N'
		), CTE AS(
			SELECT 
				A.OrderNumber, 
				A.OrderType, 
				A.Company,    
				A.LineNumber, 
				A.LineType,
				A.UnitPrice,
				A.ForeignUnitPrice,
				A.ExtendedPrice,
				A.ForeignExtPrice,
				A.Quantity,
				A.ShippedQuantity,
				A.ItemNumber,
        		A.LongItemNumber,
        		A.AuxItemNumber,
				A.UnitOfMeasure, 
				A.PricingUnitOfMeasure,
				B.SD$9SHAN  AS SCShipToNumber,
				1 AS AddressBookType,
				A.NextStatus,
				A.LastStatus,
				A.BusinessUnit,
				A.BusinessUnitHeader,
				A.TaxableYN, 
				A.TaxArea,
				A.TaxExplanationCode,
				A.BackorderedQuantity,
				A.TransactionDate,
				A.RelatedKitItemNo,
				A.CustomerReference,
				A.CurrencyCode,
    			A.CurrencyMode,
    			A.HoldOrderCode,
				A.Description1,
				A.Description2 
			FROM F4211_F42119 A
			INNER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.OrderNumber
				AND B.SDDCTO = A.OrderType 
				AND B.SDKCOO = A.Company 
				AND B.SDLNID = A.LineNumber 
				AND B.SD$9TYP = 1
			'|| CONS_WHERE_DYNAMIC ||N'
		) ';
	END	IF;


	SQL_DYNAMIC := FROM_DYNAMIC || N'
	, PAGING AS (
		SELECT
			B.OrderNumber,
			B.OrderType,
			B.Company,
			B.LineNumber,
			B.LineType,
			B.UnitPrice,
			B.ForeignUnitPrice,
			B.ExtendedPrice,
			B.ForeignExtPrice,
			B.Quantity,
			B.ShippedQuantity,
			B.ItemNumber,
        	B.LongItemNumber,
        	B.AuxItemNumber,
			B.UnitOfMeasure,
			B.PricingUnitOfMeasure,
			B.SCShipToNumber,
			B.AddressBookType,
			B.NextStatus,
			B.LastStatus,
			B.BusinessUnit,
			B.BusinessUnitHeader,
			B.TaxableYN,
			B.TaxArea,
			B.TaxExplanationCode,
			B.BackorderedQuantity,
			B.TransactionDate,
			B.RelatedKitItemNo,
			B.CustomerReference,
			B.CurrencyCode,
			B.CurrencyMode,
			B.HoldOrderCode,
			B.Description1,
			B.Description2,
			ROW_NUMBER() OVER ( ORDER BY '|| SORT_DYNAMIC ||N') AS RNUM
		FROM CTE B
		' || INNER_DYNAMIC || N'
	)
	SELECT
		B.OrderNumber,
		B.OrderType,
		B.Company,
		B.LineNumber,
		B.LineType,
		B.UnitPrice,
		B.ForeignUnitPrice,
		B.ExtendedPrice,
		B.ForeignExtPrice,
		B.Quantity,
		B.ShippedQuantity,
		B.ItemNumber,
        B.LongItemNumber,
        B.AuxItemNumber,
		B.UnitOfMeasure,
		B.PricingUnitOfMeasure,
		B.SCShipToNumber,
		B.AddressBookType,
		B.NextStatus,
		B.LastStatus,
		B.BusinessUnit,
		B.BusinessUnitHeader,
		B.TaxableYN,
		B.TaxArea,
		B.TaxExplanationCode,
		B.BackorderedQuantity,
		B.TransactionDate,
		B.RelatedKitItemNo,
		B.CustomerReference,
		B.CurrencyCode,
    	B.CurrencyMode,
    	B.HoldOrderCode,
		B.Description1,
		B.Description2,
    	NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP), 0)   AS TaxedExtendedPrice,
    	NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA), 0)    AS ForeignTaxedExtPrice,
    	NVL(NVL(Tax.DTETA, TxHistory.DTETA), 0)     AS ExtendedTaxAmount,
    	NVL(NVL(Tax.DTFETA, TxHistory.DTFETA), 0)    AS ForeignExtTaxAmount,
        NVL(NVL(TaxHeader.STUTP, TxHistoryHeader.STUTP), 0)  AS UseTaxedPrices,
		(SELECT COUNT(1) FROM PAGING) AS TotalRowCount 
	FROM
		PAGING B
    LEFT OUTER JOIN [SCDATA].F4201 A
    	ON  A.SHDOCO = B.OrderNumber  
    	AND A.SHDCTO = B.OrderType 
        AND A.SHKCOO = B.Company
    LEFT OUTER JOIN [SCDATA].F4211TX Tax
    	ON Tax.DTDOCO = B.OrderNumber 
    	AND Tax.DTDCTO = B.OrderType 
    	AND Tax.DTKCOO = B.Company 
    	AND Tax.DTLNID = B.LineNumber
    LEFT OUTER JOIN [SCDATA].F4201TX TaxHeader
    	ON TaxHeader.STDOCO = B.OrderNumber 
    	AND TaxHeader.STDCTO = B.OrderType 
    	AND TaxHeader.STKCOO = B.Company
    LEFT OUTER JOIN [SCDATA].F42019 C  
    	ON  C.SHDOCO = B.OrderNumber 
    	AND C.SHDCTO = B.OrderType 
    	AND C.SHKCOO = B.Company 
    LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
    	ON TxHistory.DTDOCO = B.OrderNumber 
    	AND TxHistory.DTDCTO = B.OrderType
    	AND TxHistory.DTKCOO = B.Company 
    	AND TxHistory.DTLNID = B.LineNumber
    LEFT OUTER JOIN [SCDATA].F42019TX TxHistoryHeader
    	ON TxHistoryHeader.STDOCO = B.OrderNumber 
    	AND TxHistoryHeader.STDCTO = B.OrderType
    	AND TxHistoryHeader.STKCOO = B.Company 
	WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) 
	ORDER BY RNUM ';

	IF (AddressBookType = 0) THEN
		OPEN ResultData1 FOR SQL_DYNAMIC USING AddressNumber, FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, TransactionDateTo,
								ItemNumber, ShipToNumber, CustomerReference, AddressNumber, FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, 
                                TransactionDateTo, ItemNumber, ShipToNumber, CustomerReference, PageIndex, PageSize, RowStart, RowEnd;
	ELSE 
		OPEN ResultData1 FOR SQL_DYNAMIC USING FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, TransactionDateTo,
								ItemNumber, CustomerReference, FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, 
                                TransactionDateTo, ItemNumber, CustomerReference, AddressNumber, ShipToNumber, PageIndex, PageSize, RowStart, RowEnd;
	END IF;

END;   
  /
-- #desc						Get Scheduled Payment List
-- #bl_class					Premier.Commerce.ScheduledPaymentList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InvoiceNumber			Invoice Number
-- #param InvoiceType			Invoice Type
-- #param InvoiceCompany		Invoice Company
-- #param PayItem				Pay Item

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetScheduledPaymentList
(
	InvoiceNumber		IN NUMBER,
	InvoiceType			IN NCHAR,
	InvoiceCompany		IN NCHAR,
	PayItem				IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
	SELECT	
		PDDOC		AS InvoiceNumber,
		PDDCT		AS InvoiceType,
		PDKCO		AS InvoiceCompany,
		PDSFX		AS PayItem,
		PHRYIN		AS PaymentInstrument,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc(N'00', N'PY', PHRYIN, N'*') AS PaymentDescription,
		PH$9UKID	AS "Mode",
		PHPST		AS Status,
		PHDPR		AS PaymentDate,
		PDAAP		AS AmountToApply,
		PHCBNK		AS BARerefence,
		PHCRCI		AS CCReference,
		AYCBNK		AS BAOFReference,
		CCCRCI		AS CCOFReference
	FROM [SCDATA].FQ670314 A
	INNER JOIN [SCDATA].FQ670313 B
		ON B.PH$9PYID = A.PD$9PYID
	LEFT OUTER JOIN [SCDATA].F0030 C
		ON C.AYUKID = B.PHUKID
	LEFT OUTER JOIN [SCDATA].FQ67CCIF D
		ON D.CC$9AN8 = B.PH$9AN8 AND D.CCSEQ = B.PHSEQ
	WHERE A.PDDOC = InvoiceNumber 
		AND A.PDDCT = InvoiceType 
		AND A.PDKCO = InvoiceCompany 
		AND (PayItem = N'*' OR A.PDSFX = PayItem);

END;
  /
-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		Installation Id
-- #param OrderNumber			Order Number
-- #param Country		        Country
-- #param ZipCode		        Zip Code

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSONumbyCountry
(
	InstallationID	IN	NCHAR,
	Country			IN	NCHAR,
	OrderNumber		IN	NUMBER,
	ZipCode			IN	NCHAR,	
	ResultData1 OUT GLOBALPKG.refcursor  	
)
AS
	
	DocumentNumber		NUMBER;
	OrderType			NCHAR(3);
	OrderCompany		NCHAR(5);	
	TotalRowCount		INT;
	AddressType	        NUMBER;
	AddressNumber		NUMBER;	
	
    OrderWasFound		INT;
	
	SOrderRestric     NVARCHAR2(1);
    SOrderINID        NCHAR(3):= InstallationID;
	SOrderConstant    NCHAR(10) := 'SO_RESTRIC';

BEGIN 
	OrderWasFound := 0;
	
	 -- Gets the Sales Order Document Restrictions    
   	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);
    
   
    /* Validate the exist order*/
	BEGIN	
		SELECT 
				SHDOCO,
				SHDCTO,
				SHKCOO,
				SHAN8
		INTO 
			DocumentNumber, OrderType, OrderCompany, AddressNumber
		FROM 
		(	
			SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F4201
				WHERE SHDOCO = OrderNumber
				UNION ALL
				SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F42019
				WHERE SHDOCO = OrderNumber
		) A
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SOrderINID
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		WHERE (SOrderRestric = '0' OR DR.DRKY IS NOT NULL);
		EXCEPTION WHEN NO_DATA_FOUND THEN 
		DocumentNumber := 0; 
		OrderType:='';
		OrderCompany:='';
	END;	
    		
		
	IF(DocumentNumber > 0) THEN 
			/*Search billing override address*/	
			SELECT COUNT(1) INTO TotalRowCount 
			FROM [SCDATA].F4006
			WHERE OAANTY = 1 
				AND OADOCO = DocumentNumber
				AND OADCTO = OrderType 
				AND OAKCOO = OrderCompany	
				AND OACTR =  Country
				AND (ZipCode = '*' OR OAADDZ = ZipCode);
				
			IF(TotalRowCount = 0) THEN 
				/* Search if the order is an Smart Commerce order */
				BEGIN
					SELECT 
						SH$9TYP, 
						SH$9AN8 
					 INTO
						AddressType, AddressNumber  
					FROM [SCDATA].FQ674201
					WHERE SHDOCO =  DocumentNumber  
						AND SHDCTO = OrderType
						AND SHKCOO= OrderCompany;
				EXCEPTION WHEN NO_DATA_FOUND THEN 
				AddressType:= 0;
				END;
						
				/*CONSUMER */
				IF(AddressType = 1)THEN 
					SELECT COUNT(1) INTO TotalRowCount 
					FROM  [SCDATA].FQ670302 
					WHERE PR$9AN8= AddressNumber
						AND   PRCTR = Country
						AND  (ZipCode = '*' OR PRADDZ = ZipCode);
					
					IF(TotalRowCount <> 0)THEN
						OrderWasFound := 1;
					END IF;
							   				
				/*CUSTOMER*/
				ELSE 					
					SELECT COUNT(1) INTO TotalRowCount 
					FROM [SCDATA].F0116 
					WHERE ALAN8= AddressNumber
						AND ALCTR = Country
						AND (ZipCode = '*' OR ALADDZ = ZipCode);
						
					IF(TotalRowCount <> 0) THEN
						OrderWasFound := 1;
					END IF; 	
				END	IF;
			ELSE
				OrderWasFound := 1;				
			END IF;				
					  
	END IF;
	
	
	IF (OrderWasFound <> 1) THEN
		DocumentNumber :=0;
		OrderType := '';
		OrderCompany := '';
	END IF;	

	OPEN ResultData1 FOR    
	SELECT 
		DocumentNumber	AS OrderNumber,
		OrderType		AS OrderType, 
		OrderCompany	AS OrderCompany	
	FROM SYS.DUAL;
	
END;
 
  /
-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param InstallationID		Installation Id
-- #param OrderNumber			Order Number
-- #param BillingName		    Billing Name 

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSONumbyEmail
(
	InstallationID	IN	NCHAR,
	EmailAddress	IN	NVARCHAR2,
	OrderNumber		IN	NUMBER,	
	ResultData1 OUT GLOBALPKG.refcursor  	
)
AS
	
	DocumentNumber		NUMBER;
	OrderType			NCHAR(3);
	OrderCompany		NCHAR(5);	
	TotalRowCount		INT;
	AddressType	        NUMBER;
	AddressNumber		NUMBER;	
	
    OrderWasFound		INT;
	
	SOrderRestric     NVARCHAR2(1);
    SOrderINID        NCHAR(3):= InstallationID;
	SOrderConstant    NCHAR(10) := 'SO_RESTRIC';
	
BEGIN 
	OrderWasFound := 0;
	
	 -- Gets the Sales Order Document Restrictions    
   	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);
   
    /* Validate the exist order*/
	BEGIN
		SELECT 
				SHDOCO,
				SHDCTO,
				SHKCOO,
				SHAN8
		INTO 
			DocumentNumber, OrderType, OrderCompany, AddressNumber 
		FROM 
		(	
				SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F4201
				WHERE SHDOCO = OrderNumber
				UNION ALL
				SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F42019
				WHERE SHDOCO = OrderNumber		
		) A
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SOrderINID
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		WHERE (SOrderRestric = '0' OR DR.DRKY IS NOT NULL);
	EXCEPTION WHEN NO_DATA_FOUND THEN 
		DocumentNumber := 0; 
		OrderType:='';
		OrderCompany:='';
	END;	
		
	IF(DocumentNumber > 0) THEN 
		
		/*Search billing override address*/	
		SELECT COUNT(1) INTO TotalRowCount 
			FROM [SCDATA].F4006
			WHERE OAANTY = 1 
			AND OADOCO = DocumentNumber
			AND OADCTO = OrderType 
			AND OAKCOO =  OrderCompany;
			
		IF(TotalRowCount = 0) THEN 
			/* Search if the order is an SmarterCommerce order */
		    BEGIN 
				SELECT 
					SH$9TYP, 
					SH$9AN8 
				 INTO
					AddressType, AddressNumber  
					FROM [SCDATA].FQ674201
					WHERE SHDOCO =  DocumentNumber  
					AND SHDCTO = OrderType
					AND SHKCOO = OrderCompany;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
				AddressType:= 0;
			END;	
						
			/*CONSUMER */
			IF(AddressType = 1)THEN 
				SELECT COUNT(1) INTO TotalRowCount 
					FROM  [SCDATA].FQ67303 
					WHERE PC$9AN8= AddressNumber
					AND UPPER(PCEMAL) = EmailAddress;
						   				
		    /*CUSTOMER*/
			ELSE 					
				SELECT COUNT(1) INTO TotalRowCount FROM [SCDATA].F01151 
					WHERE EAAN8 = AddressNumber
					AND EAETP = 'E'
					AND UPPER(EAEMAL) = EmailAddress;
			END	IF;				
		ELSE
			SELECT COUNT(1) INTO TotalRowCount 
			FROM [SCDATA].F4006
			WHERE OAANTY = 1 
			AND OADOCO = DocumentNumber
			AND OADCTO = OrderType 
			AND OAKCOO = OrderCompany
			AND UPPER(TRIM(OAADD3)) = TRIM(SUBSTR(EmailAddress,1,40)); /*OADD3 can only store 40 characters*/			
		END IF;				
					  
	END IF;
	
	IF(TotalRowCount > 0)THEN
		OrderWasFound := 1;
	END IF; 	
	
	IF (OrderWasFound <> 1) THEN
		DocumentNumber :=0;
		OrderType := '';
		OrderCompany := '';
	END IF;	
	
	OPEN ResultData1 FOR    
	SELECT 
		DocumentNumber	AS OrderNumber,
		OrderType		AS OrderType, 
		OrderCompany	AS OrderCompany	
	FROM SYS.DUAL;
	
END ;
  /
-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param InstallationID		Installation Id
-- #param OrderNumber			Order Number
-- #param BillingName		    Billing Name 

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSONumbyName
(
	InstallationID	IN	NCHAR,
	BillingName		IN	NCHAR,
	OrderNumber		IN	NUMBER,	
	ResultData1 OUT GLOBALPKG.refcursor  	
)
AS
	
	DocumentNumber		NUMBER;
	OrderType			NCHAR(3);
	OrderCompany		NCHAR(5);	
	TotalRowCount		INT;
	AddressType	        NUMBER;
	AddressNumber		NUMBER;	
	
    OrderWasFound		INT;
	
	SOrderRestric     NVARCHAR2(1);
    SOrderINID        NCHAR(3):= InstallationID;
	SOrderConstant    NCHAR(10) := 'SO_RESTRIC';

BEGIN 
	OrderWasFound := 0;
	
	 /* Gets the Sales Order Document Restrictions */
   	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);
    
   
    /* Validate the exist order*/
	BEGIN
		SELECT 
				SHDOCO,
				SHDCTO,
				SHKCOO,
				SHAN8
		INTO 
			DocumentNumber, OrderType, OrderCompany, AddressNumber 
		FROM 
		(	
				SELECT SHDOCO,SHDCTO,SHKCOO, SHAN8
				FROM [SCDATA].F4201
				WHERE SHDOCO = OrderNumber
				UNION ALL
				SELECT SHDOCO,SHDCTO,SHKCOO, SHAN8
				FROM [SCDATA].F42019
				WHERE SHDOCO = OrderNumber
		) A
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SOrderINID
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		WHERE (SOrderRestric = '0' OR DR.DRKY IS NOT NULL);
	EXCEPTION WHEN NO_DATA_FOUND THEN 
		DocumentNumber := 0; 
		OrderType:='';
		OrderCompany:='';
	END;	
    
	IF(DocumentNumber > 0) THEN 
		/*Search billing override address*/	
		SELECT COUNT(1) INTO TotalRowCount 
		FROM [SCDATA].F4006
		WHERE OAANTY = 1 
			AND OADOCO = DocumentNumber
			AND OADCTO = OrderType 
			AND OAKCOO =  OrderCompany	 
			AND UPPER(OAMLNM) = BillingName;
				
		IF(TotalRowCount = 0) THEN 
			
			/* Search if the order is an Smart Commerce order */
			BEGIN 
				SELECT 
					SH$9TYP, 
					SH$9AN8 
				 INTO
					AddressType, AddressNumber  
					FROM [SCDATA].FQ674201
					WHERE SHDOCO =  DocumentNumber  
					AND SHDCTO = OrderType
					AND SHKCOO = OrderCompany;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
				AddressType:= 0;
			END;	
				
			/*CONSUMER */
			IF(AddressType = 1)THEN 
				SELECT COUNT(1) INTO TotalRowCount 
					FROM  [SCDATA].FQ67303 
					WHERE PC$9AN8= AddressNumber
					AND UPPER(PCMLNM) = BillingName;
					
				IF(TotalRowCount > 0)THEN
					OrderWasFound := 1;
				END IF;
						   				
			/*CUSTOMER*/
			ELSE 					
				SELECT COUNT(1) INTO TotalRowCount FROM [SCDATA].F0111 
					WHERE WWAN8 = AddressNumber							
					AND UPPER(WWMLNM) = BillingName;
				
				IF(TotalRowCount > 0) THEN
					OrderWasFound := 1;
				END IF;
			END	IF;
		ELSE
			OrderWasFound := 1;				
		END IF;			
	END IF;
	
	
  IF (OrderWasFound <> 1) THEN
		DocumentNumber :=0;
		OrderType := '';
		OrderCompany := '';
	END IF;	
	
	OPEN ResultData1 FOR    
	SELECT 
		DocumentNumber	AS OrderNumber,
		OrderType		AS OrderType, 
		OrderCompany	AS OrderCompany	
	FROM SYS.DUAL;
	
	
END ;
  /
-- #desc						Search Orders
-- #bl_class					Premier.Commerce.SalesOrderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationId		Installation ID
-- #param OrderNumber			Order number to search for.
-- #param OrderType			    Document type to search for.
-- #param Company				Company
-- #param AddressNumber		    Address Number
-- #param AddressBookType		Address Book Type		/* 0 Customer - 1 Consumer */
-- #param ItemNumber			Item Number
-- #param TransactionDateFrom	Transaction Date From
-- #param TransactionDateTo	    Transaction Date To
-- #param DisplayItemSetting	Display Item Setting
-- #param SortBy				SortBy
-- #param PageIndex				PageIndex
-- #param PageSize				PageSize
-- #param TotalRowCount			TotalRowCount

CREATE OR REPLACE  PROCEDURE [SCLIBRARY].COM_GetSOReturnLineSrchList
(
	InstallationID	    IN NCHAR,
	OrderNumber			IN NUMBER,
	OrderType			IN NCHAR,
	Company				IN NCHAR,
	AddressNumber		IN NUMBER,
	AddressBookType		IN DECIMAL,
	ItemNumber			IN NUMBER,
	TransactionDateFrom	IN NUMBER, 
	TransactionDateTo	IN NUMBER,
	DisplayItemSetting	IN VARCHAR2,
	SortBy				IN DECIMAL,
	PageIndex			IN INT,
	PageSize			IN INT,
	LangPref		    IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	SQL_DYNAMIC					VARCHAR2(8000);
	UNION_DYNAMIC				NVARCHAR2(8000) := N' ';
	WHERE_DYNAMIC				NVARCHAR2(8000) := N' ';
	INNER_DYNAMIC				NVARCHAR2(8000) := N' ';
	DISPLAYITEM_DYNAMIC			NVARCHAR2(8000) := N' ';
	LEFT_DYNAMIC				NVARCHAR2(8000) := N' ';
	TAX_DYNAMIC					NVARCHAR2(8000) := N' ';
	SORT_DYNAMIC				NVARCHAR2(70) := N' ';

	SOrderRestric	NVARCHAR2(1);
	SOrderINID      NCHAR(3) := InstallationID;
	SOrderConstant	NCHAR(10) := 'SO_RESTRIC';

	COINID			NCHAR(3) := InstallationID;
	CORestric		NVARCHAR2(1);
	SurchargeLnINID	NCHAR(3) := InstallationID;
	SurchargeLnType	NCHAR(2);

	CompanyTemp NCHAR(5) := Company;

	DefLangINID		NCHAR(3) := InstallationID;
	DefLangValue	NCHAR(2);
	BInstallationID NCHAR(3) := '***';

	/* Read Account Receivable company constant */
	CompanyConstant			NVARCHAR2(1);
	ConstantInstallation	NCHAR(3):= InstallationID;

	/* Paging */
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	
	RowEnd INT := (PageIndex * PageSize);
BEGIN
			
	/* Gets the Sales Order Document Restrictions flag */
	[SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric);

	/* Gets the Sales Order Document Restrictions */
	[SCLIBRARY].CMM_GetConstantValue('CO_RESTRIC', COINID, CORestric);

	/* Gets the Surcharge Line Type */
	[SCLIBRARY].CMM_GetConstantValue('SURCHARGLN', SurchargeLnINID, SurchargeLnType);
	
	/* Gets if the actual company item is in company or not */
	[SCLIBRARY].CMM_GetConstantValue( 'INSCOMPANY', ConstantInstallation, CompanyConstant );

	/* Gets Default Language */
	[SCLIBRARY].CMM_GetConstantValue('DEFLANGPRF', DefLangINID, DefLangValue);

	/* Dynamic query*/
	IF (DisplayItemSetting = N'LITM') THEN
		DISPLAYITEM_DYNAMIC := ' A.LongItemNumber ';
	ELSIF (DisplayItemSetting = N'AITM') THEN
		DISPLAYITEM_DYNAMIC := ' A.AuxItemNumber ';
	ELSE
		DISPLAYITEM_DYNAMIC := ' A.ItemNumber ';
	END IF;


	SORT_DYNAMIC := CASE SortBy
		WHEN 0 THEN N' OrderNumber ASC ' /* Ascending */
		WHEN 1 THEN N' OrderNumber DESC ' /* Descending */
		WHEN 2 THEN N' UPPER(ItemDescription1) ASC ' /* Ascending */
		WHEN 3 THEN N' UPPER(ItemDescription1) DESC ' /* Descending */
		WHEN 4 THEN DISPLAYITEM_DYNAMIC || N' ASC ' /* Ascending */
		WHEN 5 THEN DISPLAYITEM_DYNAMIC || N' DESC ' /* Descending */
	END;

	/* Dynamic query condition */
	
	IF (OrderNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' A.SDDOCO = :OrderNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' (1 = 1 OR :OrderNumber IS NULL) ';
	END IF;
	
	IF (AddressNumber IS NOT NULL) THEN
		IF (AddressBookType = 0) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SDAN8 = :AddressNumber ';
		ELSIF(AddressBookType = 1) THEN
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND B.SD$9AN8 = :AddressNumber ';
		ELSE
			WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND NVL(B.SD$9AN8, A.SDAN8) = :AddressNumber ';
		END IF;
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AddressNumber IS NULL) ';
	END IF;
	
	IF (OrderType <> N'*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SDDCTO = :OrderType ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :OrderType = ''*'') ';
	END IF;

	IF (ItemNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SDITM = :ItemNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ItemNumber IS NULL) ';
	END IF;
	
	IF (Company <> N'*' AND Company <> N'00000') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SDKCOO = :Company ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Company = ''*'') ';
	END IF;

	IF (TransactionDateFrom <> N'0') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND A.SDTRDJ BETWEEN :TransactionDateFrom AND :TransactionDateTo ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR (:TransactionDateFrom IS NULL OR :TransactionDateTo IS NULL))';
	END IF;

	WHERE_DYNAMIC := N' WHERE ' || WHERE_DYNAMIC || ' AND A.SDLNTY <> :SurchargeLnType ';

	/* Dynamic query from*/
	IF (CompanyConstant = 'L') THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 D
											 ON D.CI$9INID = N''' || ConstantInstallation || N'''
												AND D.CICO = A.Company /*Company*/ ';
	END IF;

	IF (SOrderRestric = N'1' ) THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 SOR
												ON SOR.DR$9INID = N'''||SOrderINID||''' 
												AND SOR.DR$9CNST = N''SO_RESTRIC''
												AND SOR.DRKY = A.OrderType ';
	END IF;

	IF (AddressNumber IS NOT NULL) THEN
		IF (AddressBookType = 0) THEN
			UNION_DYNAMIC := N' UNION_LINES AS (
			SELECT 	
				A.SDDOCO					AS OrderNumber, 
				A.SDDCTO					AS OrderType, 
				A.SDKCOO					AS Company,    
				A.SDLNID					AS LineNumber,
				A.SDLITM					AS LongItemNumber,
				A.SDAITM					AS AuxItemNumber,
				A.SDLNTY					AS LineType,
				A.SDDSC1					AS ItemDescription1,
				A.SDDSC2					AS ItemDescription2,			
				A.SDUPRC					AS UnitPrice,
				A.SDFUP						AS ForeignUnitPrice,
				A.SDUORG					AS Quantity,
				A.SDSOQS					AS ShippedQuantity,
				A.SDITM						AS ItemNumber,
				A.SDUOM						AS UnitOfMeasure, 
				A.SDUOM4					AS PricingUOM, 
				A.SDAN8						AS SCBillToNumber,
				0							AS SCBillToContactID,
				0							AS AddressBookType,
				A.SDNXTR					AS NextStatus,
				A.SDTAX1					AS TaxableYN, 
				A.SDLOCN					AS Location,
				A.SDLOTN					AS LotNumber,
				A.SDADDJ					AS OrderActualDeliveryDate,
				A.SDIVD						AS DateInvoice,
				A.SDTXA1					AS TaxArea,
				A.SDEXR1					AS TaxExplanationCode,
				A.SDSO09					AS SalesOrderStatus09
			FROM [SCDATA].F4211 A 
			' || WHERE_DYNAMIC || N'
			UNION ALL
			SELECT		
				A.SDDOCO					AS OrderNumber, 
				A.SDDCTO					AS OrderType, 
				A.SDKCOO					AS Company,    
				A.SDLNID					AS LineNumber, 
				A.SDLITM					AS LongItemNumber,
				A.SDAITM					AS AuxItemNumber,
				A.SDLNTY					AS LineType,
				A.SDDSC1					AS ItemDescription1,
				A.SDDSC2					AS ItemDescription2,			
				A.SDUPRC					AS UnitPrice,
				A.SDFUP						AS ForeignUnitPrice,
				A.SDUORG					AS Quantity,
				A.SDSOQS					AS ShippedQuantity,
				A.SDITM						AS ItemNumber,
				A.SDUOM						AS UnitOfMeasure, 
				A.SDUOM4					AS PricingUOM,
				A.SDAN8						AS SCBillToNumber,
				0							AS SCBillToContactID,
				0							AS AddressBookType,
				A.SDNXTR					AS NextStatus,
				A.SDTAX1					AS TaxableYN, 
				A.SDLOCN					AS Location,
				A.SDLOTN					AS LotNumber,
				A.SDADDJ					AS OrderActualDeliveryDate,
				A.SDIVD						AS DateInvoice,
				A.SDTXA1					AS TaxArea,
				A.SDEXR1					AS TaxExplanationCode,
				A.SDSO09					AS SalesOrderStatus09
			FROM [SCDATA].F42119 A
			' || WHERE_DYNAMIC || N' )' ;
		ELSE
			UNION_DYNAMIC := N' UNION_LINES AS (
			SELECT 	
				A.SDDOCO		AS OrderNumber, 
				A.SDDCTO		AS OrderType, 
				A.SDKCOO		AS Company,    
				A.SDLNID		AS LineNumber,
				A.SDLITM		AS LongItemNumber,
				A.SDAITM		AS AuxItemNumber,
				A.SDLNTY		AS LineType,
				A.SDDSC1		AS ItemDescription1,
				A.SDDSC2		AS ItemDescription2,			
				A.SDUPRC		AS UnitPrice,
				A.SDFUP			AS ForeignUnitPrice,
				A.SDUORG		AS Quantity,
				A.SDSOQS		AS ShippedQuantity,
				A.SDITM			AS ItemNumber,
				A.SDUOM			AS UnitOfMeasure, 
				A.SDUOM4		AS PricingUOM, 
				B.SD$9AN8		AS SCBillToNumber,
				B.SDIDLN		AS SCBillToContactID,
				B.SD$9TYP		AS AddressBookType,
				A.SDNXTR		AS NextStatus,
				A.SDTAX1		AS TaxableYN, 
				A.SDLOCN		AS Location,
				A.SDLOTN		AS LotNumber,
				A.SDADDJ		AS OrderActualDeliveryDate,
				A.SDIVD			AS DateInvoice,
				A.SDTXA1		AS TaxArea,
				A.SDEXR1		AS TaxExplanationCode,
				A.SDSO09		AS SalesOrderStatus09
			FROM [SCDATA].F4211 A 
			INNER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID 
				AND B.SD$9TYP = 1
			' || WHERE_DYNAMIC || N'
			UNION ALL
			SELECT		
				A.SDDOCO		AS OrderNumber, 
				A.SDDCTO		AS OrderType, 
				A.SDKCOO		AS Company,    
				A.SDLNID		AS LineNumber, 
				A.SDLITM		AS LongItemNumber,
				A.SDAITM		AS AuxItemNumber, 
				A.SDLNTY		AS LineType,
				A.SDDSC1		AS ItemDescription1,
				A.SDDSC2		AS ItemDescription2,			
				A.SDUPRC		AS UnitPrice,
				A.SDFUP			AS ForeignUnitPrice,
				A.SDUORG		AS Quantity,
				A.SDSOQS		AS ShippedQuantity,
				A.SDITM			AS ItemNumber,
				A.SDUOM			AS UnitOfMeasure,
				A.SDUOM4		AS PricingUOM, 
				B.SD$9AN8		AS SCBillToNumber,
				B.SDIDLN		AS SCBillToContactID,
				B.SD$9TYP		AS AddressBookType,
				A.SDNXTR		AS NextStatus,
				A.SDTAX1		AS TaxableYN, 
				A.SDLOCN		AS Location,
				A.SDLOTN		AS LotNumber,
				A.SDADDJ		AS OrderActualDeliveryDate,
				A.SDIVD			AS DateInvoice,
				A.SDTXA1		AS TaxArea,
				A.SDEXR1		AS TaxExplanationCode,
				A.SDSO09		AS SalesOrderStatus09
			FROM [SCDATA].F42119 A
			INNER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID 
				AND B.SD$9TYP = 1
			' || WHERE_DYNAMIC || N' 
			) ';
		END	IF;
	ELSE
			UNION_DYNAMIC := N' UNION_LINES AS (
			SELECT 	
				A.SDDOCO					AS OrderNumber, 
				A.SDDCTO					AS OrderType, 
				A.SDKCOO					AS Company,    
				A.SDLNID					AS LineNumber,
				A.SDLITM					AS LongItemNumber,
				A.SDAITM					AS AuxItemNumber,
				A.SDLNTY					AS LineType,
				A.SDDSC1					AS ItemDescription1,
				A.SDDSC2					AS ItemDescription2,			
				A.SDUPRC					AS UnitPrice,
				A.SDFUP						AS ForeignUnitPrice,
				A.SDUORG					AS Quantity,
				A.SDSOQS					AS ShippedQuantity,
				A.SDITM						AS ItemNumber,
				A.SDUOM						AS UnitOfMeasure, 
				A.SDUOM4					AS PricingUOM,
				CASE B.SD$9TYP WHEN 1 THEN B.SD$9AN8 ELSE A.SDAN8 END		AS SCBillToNumber,
				NVL(B.SDIDLN, 0)			AS SCBillToContactID,
				NVL(B.SD$9TYP, 0)			AS AddressBookType,
				A.SDNXTR					AS NextStatus,
				A.SDTAX1					AS TaxableYN, 
				A.SDLOCN					AS Location,
				A.SDLOTN					AS LotNumber,
				A.SDADDJ					AS OrderActualDeliveryDate,
				A.SDIVD						AS DateInvoice,
				A.SDTXA1					AS TaxArea,
				A.SDEXR1					AS TaxExplanationCode,
				A.SDSO09					AS SalesOrderStatus09
			FROM [SCDATA].F4211 A 
			LEFT OUTER JOIN [SCDATA].FQ674211 B
					ON  B.SDDOCO = A.SDDOCO
					AND B.SDDCTO = A.SDDCTO 
					AND B.SDKCOO = A.SDKCOO 
					AND B.SDLNID = A.SDLNID
			' || WHERE_DYNAMIC || N'
			UNION ALL
			SELECT		
				A.SDDOCO					AS OrderNumber, 
				A.SDDCTO					AS OrderType, 
				A.SDKCOO					AS Company,    
				A.SDLNID					AS LineNumber, 
				A.SDLITM					AS LongItemNumber,
				A.SDAITM					AS AuxItemNumber, 
				A.SDLNTY					AS LineType,
				A.SDDSC1					AS ItemDescription1,
				A.SDDSC2					AS ItemDescription2,			
				A.SDUPRC					AS UnitPrice,
				A.SDFUP						AS ForeignUnitPrice,
				A.SDUORG					AS Quantity,
				A.SDSOQS					AS ShippedQuantity,
				A.SDITM						AS ItemNumber,
				A.SDUOM						AS UnitOfMeasure,
				A.SDUOM4					AS PricingUOM,
				CASE B.SD$9TYP WHEN 1 THEN B.SD$9AN8 ELSE A.SDAN8 END		AS SCBillToNumber,
				NVL(B.SDIDLN, 0)			AS SCBillToContactID,
				NVL(B.SD$9TYP, 0)			AS AddressBookType,
				A.SDNXTR					AS NextStatus,
				A.SDTAX1					AS TaxableYN, 
				A.SDLOCN					AS Location,
				A.SDLOTN					AS LotNumber,
				A.SDADDJ					AS OrderActualDeliveryDate,
				A.SDIVD						AS DateInvoice,
				A.SDTXA1					AS TaxArea,
				A.SDEXR1					AS TaxExplanationCode,
				A.SDSO09					AS SalesOrderStatus09
			FROM [SCDATA].F42119 A
			LEFT OUTER JOIN [SCDATA].FQ674211 B
					ON  B.SDDOCO = A.SDDOCO
					AND B.SDDCTO = A.SDDCTO 
					AND B.SDKCOO = A.SDKCOO 
					AND B.SDLNID = A.SDLNID
			' || WHERE_DYNAMIC || N' 
			) ';
	END IF;


	IF (DefLangValue = LangPref) THEN
		LEFT_DYNAMIC := N' LEFT OUTER JOIN  ( SELECT CHITM, CHDSC1 AS DESC1, CHDSC2 AS DESC2, ROW_NUMBER() OVER ( PARTITION BY CHITM
												ORDER BY CH$9INID DESC ) AS INSTALL
												FROM [SCDATA].FQ67410
												WHERE CH$9DS = 0
													AND (1 = 1 OR :LangPref = N'' '')
													AND (CH$9INID = :InstallationID OR CH$9INID = :BInstallationID ) ) ContenDesc
													ON ContenDesc.CHITM = A.ItemNumber  
													AND INSTALL = 1 ';
	ELSE
		LEFT_DYNAMIC := N'  LEFT OUTER JOIN  ( SELECT CHITM, NVL(B.CLDSC1, A.CHDSC1) AS DESC1, NVL(B.CLDSC2, A.CHDSC2) AS DESC2,
															ROW_NUMBER() OVER ( PARTITION BY CHITM ORDER BY CH$9INID DESC ) AS INSTALL 
													FROM [SCDATA].FQ67410 A
													LEFT OUTER JOIN [SCDATA].FQ67410L B
														ON  B.CLITM = A.CHITM
														AND B.CL$9INID = A.CH$9INID
														AND B.CL$9DS = A.CH$9DS
														AND B.CLLNGP = :LangPref 
													WHERE (A.CH$9INID = :InstallationID OR A.CH$9INID = :BInstallationID )
														AND  A.CH$9DS = 0) ContenDesc
														ON ContenDesc.CHITM = A.ItemNumber  
														AND INSTALL = 1 ';
	END IF;

	TAX_DYNAMIC := N' 
			LEFT OUTER JOIN [SCDATA].F4201 B
				ON  B.SHDOCO = A.OrderNumber
				AND B.SHDCTO = A.OrderType
				AND B.SHKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.OrderNumber 
				AND Tax.DTDCTO = A.OrderType
				AND Tax.DTKCOO = A.Company 
				AND Tax.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F4201TX TaxHeader
				ON TaxHeader.STDOCO = A.OrderNumber 
				AND TaxHeader.STDCTO = A.OrderType
				AND TaxHeader.STKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F42019 C  
				ON  C.SHDOCO = A.OrderNumber
				AND C.SHDCTO = A.OrderType
				AND C.SHKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.OrderNumber 
				AND TxHistory.DTDCTO = A.OrderType
				AND TxHistory.DTKCOO = A.Company 
				AND TxHistory.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F42019TX TxHistoryHeader
				ON TxHistoryHeader.STDOCO = A.OrderNumber 
				AND TxHistoryHeader.STDCTO = A.OrderType
				AND TxHistoryHeader.STKCOO = A.Company ';

	SQL_DYNAMIC := N'
	WITH '||UNION_DYNAMIC||N',
	CTE AS (
		SELECT  
				A.OrderNumber, 
				A.OrderType, 
				A.Company,    
				A.LineNumber,
				A.ItemDescription1,
				A.ItemDescription2,
				A.UnitPrice, 
				A.ForeignUnitPrice,
				A.Quantity,
				A.ShippedQuantity,
				A.LongItemNumber, 
				A.AuxItemNumber, 
				A.ItemNumber,
				A.UnitOfMeasure,
				A.PricingUOM, 
				A.SCBillToNumber,
				A.SCBillToContactID,
				A.AddressBookType,
				A.NextStatus,
				A.TaxableYN,
				A.Location,
				A.LotNumber,
				A.OrderActualDeliveryDate,
				A.DateInvoice,
				A.TaxArea,
				A.TaxExplanationCode,
				A.SalesOrderStatus09
		FROM UNION_LINES A 
		'|| INNER_DYNAMIC || N'
	), PAGING AS (
		SELECT  
			A.OrderNumber, 
			A.OrderType, 
			A.Company,    
			A.LineNumber,
			NVL(ContenDesc.DESC1, A.ItemDescription1)	AS ItemDescription1,
			NVL(ContenDesc.DESC2, A.ItemDescription2)	AS ItemDescription2,
			A.UnitPrice, 
			A.ForeignUnitPrice,
			A.Quantity,
			A.ShippedQuantity,
			A.LongItemNumber, 
			A.AuxItemNumber, 
			A.ItemNumber,
			A.UnitOfMeasure,
			A.PricingUOM,
			A.SCBillToNumber,
			A.SCBillToContactID,
			A.AddressBookType,
			A.NextStatus,
			A.TaxableYN,
			A.Location,
			A.LotNumber,
			A.OrderActualDeliveryDate,
			A.DateInvoice,
			A.TaxArea,
			A.TaxExplanationCode,
			A.SalesOrderStatus09,
			ROW_NUMBER() OVER ( ORDER BY ' || SORT_DYNAMIC || N' ) AS RNUM,
			COUNT(1) OVER () AS TotalRowCount
		FROM CTE A
		' || LEFT_DYNAMIC || N'
	) 
	SELECT
			A.OrderNumber,
			A.OrderType,
			A.Company,
			A.LineNumber,
			A.ItemDescription1,
			A.ItemDescription2,
			A.UnitPrice,
			A.ForeignUnitPrice,
			A.Quantity,
			A.ShippedQuantity,
			[SCLIBRARY].COM_GetReturnedQuantityFnc( A.OrderNumber, A.Company, A.OrderType, A.LineNumber, :COINID, :CORestric ) AS ReturnedQuantity,
			A.LongItemNumber, 
			A.AuxItemNumber, 
			A.ItemNumber,
			A.UnitOfMeasure,
			A.PricingUOM,
			A.SCBillToNumber,
			A.SCBillToContactID,
			A.AddressBookType,
			A.NextStatus,
			A.TaxableYN,
			NVL(B.SHCRRM, C.SHCRRM)				AS CurrencyMode,
			A.Location,
			A.LotNumber,
			NVL(Tax.DTTUPRC, TxHistory.DTTUPRC)	AS TaxedUnitPrice,
			NVL(Tax.DTTFUP, TxHistory.DTTFUP)	AS ForeignTaxedUnitPrice,
			NVL(TaxHeader.STUTP, TxHistoryHeader.STUTP)	AS UseTaxedPrices,
			A.OrderActualDeliveryDate,
			A.DateInvoice,
			A.TaxArea,
			A.TaxExplanationCode,
			A.SalesOrderStatus09,
			A.TotalRowCount  
		FROM 
		   PAGING A
		' || TAX_DYNAMIC || N'
		WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))
		ORDER BY RNUM ';

	OPEN ResultData1 FOR SQL_DYNAMIC USING OrderNumber, AddressNumber, OrderType, ItemNumber, Company, TransactionDateFrom, TransactionDateTo, 
											SurchargeLnType, OrderNumber, AddressNumber, OrderType, ItemNumber, Company, TransactionDateFrom, TransactionDateTo, 
											SurchargeLnType, LangPref, InstallationID, BInstallationID, COINID, CORestric, 
											PageIndex, PageSize, RowStart, RowEnd;
END;
  /

-- #desc						Load Area and tax expl code info
-- #bl_class					Premier.Commerce.TaxInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressType			Address Book Type (Consumer/Customer)
-- #param BillToNumber			Billing Address Number
-- #param ShipToNumber			Shipping Address Number
-- #param ShipToAddressType		ShipTo Address Book Type (Consumer/Customer)
-- #param NONTAXABLE			Non Taxable Tax Area Constant

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetTaxInfo
(
	AddressType		IN DECIMAL,
	Company		    IN NVARCHAR2,
	BillToNumber	IN DECIMAL,
	ShipToNumber	IN DECIMAL,
	ShipToAddressType IN DECIMAL,
	NONTAXABLE		IN NVARCHAR2,
	ResultData1  OUT GLOBALPKG.refcursor
)
AS

 SHIPTAXAREA NVARCHAR2(10);
 SHIPEXPCODE NVARCHAR2(2);
 BILLEXPCODE NVARCHAR2(2);
 TMPVAR      NVARCHAR2(2);

BEGIN 

    IF AddressType = 0 THEN --CUSTOMER
		 
	    TMPVAR := [SCLIBRARY].CST_GetCustomerInfoFnc(Company, ShipToNumber);
		BEGIN
			SELECT AITXA1,AIEXR1 INTO SHIPTAXAREA,SHIPEXPCODE 
			FROM	[SCLIBRARY].CST_GETCUSTOMERINFOFNC_A;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
			SHIPTAXAREA := N'';
			SHIPEXPCODE := N'';
		END;
		
		TMPVAR := [SCLIBRARY].CST_GetCustomerInfoFnc(Company, BillToNumber);
		BEGIN
			SELECT	AIEXR1 INTO BILLEXPCODE
			FROM	[SCLIBRARY].CST_GETCUSTOMERINFOFNC_A;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
			BILLEXPCODE := N'';
		END;
	 

	ELSE		-- CONSUMER
		BEGIN
			SELECT	PREXR1 INTO BILLEXPCODE
			FROM	[SCDATA].FQ670302
			WHERE	PR$9AN8 = BillToNumber;
		EXCEPTION WHEN NO_DATA_FOUND THEN 
			BILLEXPCODE := N'';
		END;

		/* In POS when the order is Cash and Carry, the default ship will be the Default Customer ShipTo
		 * and Bill to could be a Consumer
		 */
		IF ShipToAddressType = 0 THEN 
			TMPVAR := [SCLIBRARY].CST_GetCustomerInfoFnc(Company, ShipToNumber);
			BEGIN
				SELECT AITXA1, AIEXR1 INTO SHIPTAXAREA, SHIPEXPCODE 
				FROM [SCLIBRARY].CST_GETCUSTOMERINFOFNC_A;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
				SHIPTAXAREA := N'';
				SHIPEXPCODE := N'';
			END;
		ELSE
			BEGIN
				SELECT PRTXA1,PREXR1 INTO  SHIPTAXAREA,SHIPEXPCODE
				FROM	[SCDATA].FQ670302
				WHERE	PR$9AN8 = ShipToNumber;
			EXCEPTION WHEN NO_DATA_FOUND THEN 
				SHIPTAXAREA := N'';
				SHIPEXPCODE := N'';
			END;
		END IF;
        
	END IF;

	IF (TRIM(SHIPTAXAREA) IS NOT NULL) THEN

		IF (TRIM(BILLEXPCODE) IS NOT NULL) THEN
            OPEN ResultData1 FOR
                SELECT	SHIPTAXAREA AS TaxArea, BILLEXPCODE AS TaxExplanationCode FROM SYS.DUAL;		
		ELSE
            OPEN ResultData1 FOR
                SELECT	SHIPTAXAREA AS TaxArea, SHIPEXPCODE AS TaxExplanationCode FROM SYS.DUAL;
		END IF;
        
	ELSE 
    
        IF (TRIM(BILLEXPCODE) IS NOT NULL) THEN
            OPEN ResultData1 FOR
                SELECT	NONTAXABLE AS TaxArea, BILLEXPCODE AS TaxExplanationCode FROM SYS.DUAL;
		ELSE
            OPEN ResultData1 FOR
                SELECT '' AS TaxArea, '' AS TaxExplanationCode FROM SYS.DUAL;
		END IF;
        
    END IF;
	 
END;



  /

-- #desc					Updates Carrier Tracking 
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CarrierID			Carrier ID
-- #param TrackingURL		Tracking URL
-- #param ProgramID			Program ID
-- #param WorkStationID		WorkStation ID
-- #param UserID			User ID
-- #param DateUpdated		Last Date Update
-- #param TimeLastUpdated	Last Updated time

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_UpdCarrierTracking
(
	CarrierID	IN decimal,
	TrackingURL IN NVARCHAR2,
	UserID		IN NVARCHAR2,
	ProgramID	IN NVARCHAR2,
	WorkStationID IN NVARCHAR2,
	DateUpdated		IN decimal,
	TimeLastUpdated IN decimal
)
AS

BEGIN

UPDATE 
	[SCDATA].FQ67CARS
SET  
	CREMAL = TrackingURL,
	CRUSER = UserID,
	CRPID  = ProgramID, 
	CRJOBN = WorkStationID,
	CRUPMJ = DateUpdated, 
	CRUPMT = TimeLastUpdated
	
WHERE 
	CRAN8 = CarrierID;

END;

  /

-- #desc					Updates marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Constant ID
-- #param BranchPlant		Branch plant
-- #param Description1		Description 1
-- #param Description2		Description 2
-- #param EffectiveDate		Effective date
-- #param ExpirationDate	Expiration date
-- #param UsageMode			Usage Mode flag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_UpdMarketingCode
(
	MarketingCode  IN NVARCHAR2,
	BranchPlant    IN NVARCHAR2,
	Description1   IN NVARCHAR2,
	Description2   IN NVARCHAR2,
	EffectiveDate  IN decimal,
	ExpirationDate IN decimal,
	UsageMode	   IN NVARCHAR2
)
AS
BEGIN

UPDATE 
	[SCDATA].FQ674204
SET  
	MKMCU = BranchPlant,
	MKDSC1 = Description1,
	MKDSC2 = Description2,
	MKEFTJ = EffectiveDate,
	MKEXDJ = ExpirationDate,
	MK$9WEB = UsageMode
WHERE 
	TRIM(MK$9MKT) = TRIM(MarketingCode);

END;
  /
-- #desc					Updates marketing code value 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code
-- #param PriceKey			Price Key
-- #param PriceKeyValue		Price Key Value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_UpdMarketingCodeValue
(
	MarketingCode IN NVARCHAR2,
	PriceKey	  IN NVARCHAR2,
	PriceKeyValue IN NVARCHAR2
)
AS

BEGIN

UPDATE 
	[SCDATA].FQ674205
SET  
	MK$9MVAL = PriceKeyValue
WHERE 
	TRIM(MK$9MKT) = TRIM(MarketingCode) AND
	TRIM(MK$9MCOL) = TRIM(PriceKey);

END;



  /
-- #desc					Update P4210 Version Rule Detail
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param Description		Description
-- #param P4210Version		P4210 Version
-- #param Hierarchy			Hierarchy

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_UpdP4210VersRuleDetail
(
	InstallationID			IN NVARCHAR2,
	RuleUniqueID			IN DECIMAL,
	LineID					IN DECIMAL,
	UserDefinedKey			IN NVARCHAR2,
	BranchPlant				IN NVARCHAR2,
	AddressNumber			IN DECIMAL,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	DateUpdated				IN DECIMAL,
	TimeLastUpdated			IN DECIMAL,
	WorkStationID			IN NVARCHAR2
)
AS
BEGIN

	UPDATE
		[SCDATA].FQ674231
	SET
		RDUKID	= RuleUniqueID,
		RDLNID	= LineID,
		RDKY	= UserDefinedKey,
		RDMCU	= BranchPlant,
		RD$9AN8 = AddressNumber,
		RDURAB	= UserReservedNumber,
		RDURAT	= UserReservedAmount,
		RDURCD	= UserReservedCode,
		RDURDT	= UserReservedDate,
		RDURRF	= UserReservedReference,
		RDUSER	= UserID,
		RDPID	= ProgramID,
		RDUPMJ	= DateUpdated,
		RDUPMT	= TimeLastUpdated,
		RDJOBN	= WorkStationID
	WHERE
		RD$9INID = InstallationID AND
		RDUKID = RuleUniqueID AND
		RDLNID = LineID;
END;
  /
-- #desc					Update P4210 Version Rule Header
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param Description		Description
-- #param P4210Version		P4210 Version
-- #param Hierarchy			Hierarchy

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_UpdP4210VersRuleHeader
(
	InstallationID			IN NVARCHAR2,
	RuleUniqueID			IN DECIMAL,
	Description				IN NVARCHAR2,
	P4210Version			IN NVARCHAR2,
	Hierarchy				IN DECIMAL,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	DateUpdated				IN DECIMAL,
	TimeLastUpdated			IN DECIMAL,
	WorkStationID			IN NVARCHAR2
)
AS
BEGIN
	UPDATE
		[SCDATA].FQ674230
	SET
		RHDSC1	= Description,
		RHVER	= P4210Version,
		RHSEQ	= Hierarchy,
		RHURAB	= UserReservedNumber,
		RHURAT	= UserReservedAmount,
		RHURCD	= UserReservedCode,
		RHURDT	= UserReservedDate,
		RHURRF	= UserReservedReference,
		RHUSER	= UserID,
		RHPID	= ProgramID,
		RHUPMJ	= DateUpdated,
		RHUPMT	= TimeLastUpdated,
		RHJOBN	= WorkStationID
	WHERE
		RH$9INID =  InstallationID AND
		RHUKID	=  RuleUniqueID;
END;
  /
-- #desc				Get Quote Order Detail Information
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		QTS_OrderHeadSrchVW, QTS_GetQuoteRecentList

CREATE OR REPLACE VIEW [SCLIBRARY].QTS_OrderDetailVW
AS
	SELECT 
		A.SDDOCO,
		A.SDKCOO,
		A.SDDCTO,
		A.SDSHAN AS SHAN
	FROM [SCDATA].F4211 A	/*Sales Order Lines*/
	UNION
		SELECT 
		A.SDDOCO,
		A.SDKCOO,
		A.SDDCTO,
		A.SDSHAN AS SHAN
	FROM [SCDATA].F42119 A;	/*Sales Order Lines*/
/

-- #desc					Get Quote Order Header Information
-- #db_dependencies			N/A
-- #db_references			QTS_OrderHeadSrchVW, QTS_GetQuoteOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].QTS_OrderHeadVW
AS
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHRORN,
		A.SHRCTO,
		A.SHAN8 AS BillToNumber,
		A.SHCO
	FROM [SCDATA].F4201 A					/*Sales Order Header*/
	UNION ALL	
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHRORN,
		A.SHRCTO,
		A.SHAN8 AS BillToNumber,
		A.SHCO
	FROM [SCDATA].F42019 A;				/*Historical Sales Order Header*/
/

-- #desc					Get Quote Order Header/Detail Information
-- #db_dependencies			QTS_OrderHeadVW, QTS_OrderDetailVW
-- #db_references			QTS_GetQuoteOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].QTS_OrderHeadSrchVW
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHRORN,
		A.SHRCTO,
		A.BillToNumber,
		B.SHAN,
		A.SHCO
	FROM [SCLIBRARY].QTS_OrderHeadVW A	
		INNER JOIN [SCLIBRARY].QTS_OrderDetailVW B
			ON A.SHDOCO =  B.SDDOCO
				AND A.SHDCTO = B.SDDCTO	
				AND A.SHKCOO = B.SDKCOO;
/


-- #desc					Execute Update Quote Status
-- #bl_class				Premier.Commerce.Quote.CheckQuoteStatusCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Company			Company Number
-- #param OrderType			Order Type	
-- #param OrderNumber		Order Number
-- #param QuoteStatus		Quote Status

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_ExcCheckQuoteStatus
(
	InstallationID		IN NCHAR,
	Company				IN NCHAR,
	OrderType			IN NCHAR,
	OrderNumber			IN NUMBER,
	LineNumbersXML		IN XMLType DEFAULT NULL,
	ResultData1  OUT GLOBALPKG.refcursor
)
AS
	SQLDINAMIC				VARCHAR2(8000);
	LineNumberQuery			NVARCHAR2(5000);
	QuoteStatus				NCHAR(3);
	QuoteStatusINID			NCHAR(3) := InstallationID;
	QuoteStatusConstant		NCHAR(10):= 'QUOTSTAT';

BEGIN
	-- Gets the Quote Status for Quote Convertion
	[SCLIBRARY].CMM_GetConstantValue(QuoteStatusConstant, QuoteStatusINID, QuoteStatus);

	LineNumberQuery := ' ';
	IF (LineNumbersXML IS NOT NULL) THEN
		--Quote Detail
		LineNumberQuery := ' INNER JOIN XMLTABLE (''/items/item'' 
				PASSING :LineNumbersXML
				COLUMNS LineNumber NUMBER PATH ''text()'') X
			ON X.LineNumber = A.SDLNID ';
	END IF;	

	 SQLDINAMIC:='
		SELECT SDLNID AS LineNumberID
		FROM [SCDATA].F4211 A
		' || LineNumberQuery || '
		WHERE
			TRIM(A.SDKCOO) = :Company 
			AND A.SDDOCO = :OrderNumber 
			AND A.SDDCTO = :OrderType 
			AND A.SDNXTR = :QuoteStatus';
	 
	 IF(LineNumbersXML IS NOT NULL) THEN 	 
		OPEN ResultData1 FOR SQLDINAMIC USING LineNumbersXML, Company, OrderNumber, OrderType, QuoteStatus;
	 ELSE	
		OPEN ResultData1 FOR SQLDINAMIC USING Company, OrderNumber, OrderType, QuoteStatus;
	END IF; 
END;
  /
-- #desc				        Calculate Quote Status in Detail Mode based in ShipTo lines
--						        Get a table with Quote Number, Quote Company, Quote Type and Quote Status based in ShipTo lines
-- #bl_class			        N/A	
-- #db_dependencies				N/A
-- #db_references		        QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteRecentList

-- #param QuoteStatus			Quote Acceptance Status
-- #param ShiptoNumber			Ship to Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].QTS_GetQtDetStatByShipToFnc
(
    QuoteAcceptanceStatus   IN NCHAR,
    ShiptoNumber			IN NUMBER
)
RETURN [SCLIBRARY].QTS_QuoteStatusTBL IS
       RETURNS [SCLIBRARY].QTS_QuoteStatusTBL;
BEGIN
    WITH CTE AS
    (
      SELECT 
          SDDOCO, SDDCTO, SDKCOO,
          CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
            CASE WHEN SDNXTR = QuoteAcceptanceStatus THEN 'READYFORREVIEW' 
                WHEN SDNXTR < QuoteAcceptanceStatus THEN 'PENDING' 
            ELSE 'COMPLETED'END
          ELSE 'CANCELLED' END AS SDNXTR
      FROM [SCDATA].F4211 	/* Sales Order Lines */
      WHERE  SDSHAN = ShiptoNumber AND SDRLIT = ' '

      UNION ALL

      SELECT 
          SDDOCO, SDDCTO, SDKCOO,
          CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
            CASE WHEN SDNXTR = QuoteAcceptanceStatus THEN 'READYFORREVIEW' 
                WHEN SDNXTR < QuoteAcceptanceStatus THEN 'PENDING' 
            ELSE 'COMPLETED'END
          ELSE 'CANCELLED' END AS SDNXTR
      FROM [SCDATA].F42119 	/* Sales Order Lines */
			WHERE SDSHAN = ShiptoNumber AND SDRLIT = ' ' 
    ),CTE2 AS (  
        SELECT 
            SDDOCO, SDDCTO, SDKCOO, SDNXTR, ROW_NUMBER() OVER ( PARTITION BY SDDOCO, SDDCTO, SDKCOO ORDER BY SDNXTR DESC ) STAT  
        FROM CTE 
    )
    SELECT 	
        [SCLIBRARY].QTS_QuoteStatusType(
            SDKCOO, SDDOCO, SDDCTO, SDNXTR
        )BULK COLLECT INTO RETURNS
    FROM CTE2
    WHERE STAT = 1;
    
    return RETURNS;
END QTS_GetQtDetStatByShipToFnc;
  /
-- #desc					Reads quote order header/lines information to convert
-- #bl_class				Premier.Commerce.Quote.QuoteConvertInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param InstallationID	Installation Id.
-- #param Company			Company Number to search for.
-- #param OrderType			Order number to search for.
-- #param OrderNumber		Order type to search for.
-- #param LineNumbersXML	XML with list of lines to search for. If parameter is null, then all lines are returned

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteConvertInfo
(
	InstallationID		IN NCHAR,
	Company				IN NCHAR,
	OrderType			IN NCHAR,
	OrderNumber			IN NUMBER,
	LineNumbersXML		IN XMLType DEFAULT NULL,
	LangPref			IN NCHAR,
	ResultData1			OUT GLOBALPKG.refcursor,
	ResultData2			OUT GLOBALPKG.refcursor,
	ResultData3			OUT GLOBALPKG.refcursor
)
AS
	SQLDYNAMIC          VARCHAR(10000);
	LineNumberQuery		NVARCHAR2(5000);
	InstallationIDTMP	NCHAR(3) := InstallationID;
	IsOverrideShipTo	INT;
	
	-- Gets the Quote Status for Quote Convertion 
	QuoteStatus			NCHAR(3);
	InstallationIDCnst 	NCHAR(3) := InstallationID;
	
	CurrentJulianDate	NUMBER(6,0);
	CustCrossRefType	NCHAR(2);
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue('QUOTSTAT', InstallationIDCnst, QuoteStatus);
	
	InstallationIDCnst:= InstallationID;
	[SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', InstallationIDCnst, CustCrossRefType);
	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);

	LineNumberQuery := ' ';
	IF(LineNumbersXML IS NOT NULL) THEN
		--Quote Detail
		LineNumberQuery := ' INNER JOIN XMLTABLE (''/items/item'' 
				PASSING :LineNumbersXML
				COLUMNS LineNumber NUMBER PATH ''text()'') X
			ON X.LineNumber = A.SDLNID ';
	END IF;
  
    SQLDYNAMIC :=
    'SELECT
		A.SDKCOO	AS Company, 
		A.SDDOCO	AS OrderNumber,
		A.SDDCTO	AS OrderType,
		A.SDLNID	AS LineNumberID,
		A.SDITM		AS ItemNumber,
		A.SDLITM	AS LongItemNumber,
		A.SDAITM	AS AuxItemNumber,
		A.SDMCU		AS BusinessUnit,
		A.SDAN8		AS BillToNumber,
		A.SDSHAN	AS ShipToID,
		A.SDDRQJ	AS RequestedDate,     
		A.SDLNTY	AS LineType,
		A.SDUORG	AS QuantityOrdered,
		A.SDUPRC	AS UnitPrice,
		A.SDAEXP	AS ExtendedPrice,
		A.SDFUP		AS ForeignUnitPrice,
		A.SDFEA		AS ForeignExtPrice,
		A.SDUOM		AS TransactionUOM,
		A.SDUOM4	AS PricingUOM,
		A.SDPROV	AS OverridePrice,
		A.SDDMCT	AS AgreementNumber,
		A.SDLOB		AS LineofBusiness,
		A.SDEUSE	AS EndUse,
		A.SDDTYS	AS DutyStatus,
		A.SDMOT		AS ModeOfTransport,
		A.SDUPC1	AS PriceCode1,
		A.SDUPC2	AS PriceCode2,
		A.SDUPC3	AS PriceCode3,
		A.SDTAX1	AS TaxableYN,
		NVL(B.SD$9TYP,0)		 AS AddressType,	
		A.SDAN8		AS SCBillToNumber,
		A.SDSHAN	AS SCShipToNumber,			   		
		NVL(B.SDIDLN, 0)		 AS SCBillToContactID,   
		NVL(B.SDRCK7, 0)		 AS SCShipToContactID,   	    
		NVL(B.SD$9SLN, 0)		 AS ShipLineNumber,
		NVL(X.IVCITM,'' '')		 AS ItemCrossRefNumber,
		NVL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		NVL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		NVL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		NVL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		NVL(Tax.DTUTA,0)   AS UnitTaxAmount,
		NVL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		NVL(Tax.DTETA,0)   AS ExtendedTaxAmount,
		NVL(Tax.DTFETA,0)  AS ForeignExtTaxAmount,
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDCPNT				AS ComponentLineNumber,
		A.SDKTLN				AS KitMasterLineNo,
		NVL(Tax.DTTPROV,0)  AS TaxedPriceOverrideCode
    FROM [SCDATA].F4211 A
	' || LineNumberQuery || + '
	LEFT OUTER JOIN [SCDATA].FQ674211 B
   	    ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
        AND A.SDDCTO = B.SDDCTO 
        AND A.SDLNID = B.SDLNID
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4104	X --Item Cross Ref
		ON	X.IVAN8  = A.SDAN8
		AND X.IVITM  = A.SDITM
		AND X.IVXRT = :CustCrossRefType
		AND :CurrentJulianDate >= X.IVEFTJ AND :CurrentJulianDate <= X.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO =  A.SDDOCO
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID	
    WHERE A.SDKCOO = :Company
       AND A.SDDOCO = :OrderNumber
       AND A.SDDCTO = :OrderType
       AND A.SDNXTR = :QuoteStatus
    UNION ALL
    SELECT 
		A.SDKCOO	AS Company, 
		A.SDDOCO	AS OrderNumber,
		A.SDDCTO	AS OrderType,
		A.SDLNID	AS LineNumberID,
		A.SDITM		AS ItemNumber,
		A.SDLITM	AS LongItemNumber,
		A.SDAITM	AS AuxItemNumber,	
		A.SDMCU		AS BusinessUnit,
		A.SDAN8		AS BillToNumber,
		A.SDSHAN	AS ShipToID,
		A.SDDRQJ	AS RequestedDate,     
		A.SDLNTY	AS LineType,
		A.SDUORG	AS QuantityOrdered,
		A.SDUPRC	AS UnitPrice,
		A.SDAEXP	AS ExtendedPrice,
		A.SDFUP		AS ForeignUnitPrice,
		A.SDFEA		AS ForeignExtPrice,
		A.SDUOM		AS TransactionUOM,
		A.SDUOM4	AS PricingUOM,
		A.SDPROV	AS OverridePrice,
		A.SDDMCT	AS AgreementNumber,
		A.SDLOB		AS LineofBusiness,
		A.SDEUSE	AS EndUse,
		A.SDDTYS	AS DutyStatus,
		A.SDMOT		AS ModeOfTransport,
		A.SDUPC1	AS PriceCode1,
		A.SDUPC2	AS PriceCode2,
		A.SDUPC3	AS PriceCode3,
		A.SDTAX1	AS TaxableYN,
		NVL(B.SD$9TYP,0)		 AS AddressType,	
		A.SDAN8		AS SCBillToNumber,
		A.SDSHAN	AS SCShipToNumber,			   		
		NVL(B.SDIDLN, 0)		 AS SCBillToContactID,   
		NVL(B.SDRCK7, 0)		 AS SCShipToContactID,   	    
		NVL(B.SD$9SLN, 0)		 AS ShipLineNumber,
		NVL(X.IVCITM,'' '')		 AS ItemCrossRefNumber,
		NVL(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		NVL(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		NVL(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		NVL(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		NVL(Tax.DTUTA,0)   AS UnitTaxAmount,
		NVL(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		NVL(Tax.DTETA,0)   AS ExtendedTaxAmount,
		NVL(Tax.DTFETA,0)  AS ForeignExtTaxAmount,
		IM.IMSTKT				AS StockingType,
		A.SDRLIT				AS RelatedKitItemNo,
		A.SDCPNT				AS ComponentLineNumber,
		A.SDKTLN				AS KitMasterLineNo,
		NVL(Tax.DTTPROV,0)  AS TaxedPriceOverrideCode  				
    FROM [SCDATA].F42119 A 
	' || LineNumberQuery || + '
	LEFT OUTER JOIN [SCDATA].FQ674211 B
 	    ON A.SDKCOO = B.SDKCOO 
        AND A.SDDOCO = B.SDDOCO 
        AND A.SDDCTO = B.SDDCTO 
        AND A.SDLNID = B.SDLNID
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4104	X --Item Cross Ref
		ON	X.IVAN8  = A.SDAN8
		AND X.IVITM  = A.SDITM
		AND X.IVXRT = :CustCrossRefType
		AND :CurrentJulianDate >= X.IVEFTJ AND :CurrentJulianDate <= X.IVEXDJ
	LEFT OUTER JOIN [SCDATA].F42119TX Tax
		ON Tax.DTDOCO =  A.SDDOCO
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID
    WHERE A.SDKCOO = :Company
       AND A.SDDOCO = :OrderNumber
       AND A.SDDCTO = :OrderType
       AND A.SDNXTR = :QuoteStatus';


	SELECT COUNT(1) INTO IsOverrideShipTo 
	FROM [SCDATA].F4006
	WHERE OADOCO = OrderNumber			
		AND OADCTO = OrderType
		AND OAKCOO = Company
		AND OAANTY = 2; 

	-- GET ORDER HEADER INFO
	OPEN ResultData1 FOR
	SELECT
		A.SHAN8  AS SCBillToNumber,
		NVL(B.SHIDLN,0) AS ContactID,
		A.SHDRQJ AS RequestedDate,
		NVL(B.SH$9MKT, ' ') AS MarketingCode,
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		A.SHRCD  AS ReasonCode,
		A.SHCRCD AS CurrencyCode,
		A.SHPRGP	AS PricingGroup,
		A.SHASN		AS AdjustmentSchedule,
		A.SHPTC		AS PaymentTerms,
		CASE WHEN IsOverrideShipTo = 1 THEN 'Y' ELSE 'N' END AS IsShipToOverride,
		A.SHVR01 AS CustomerPO
	FROM [SCDATA].F4201 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
		ON	A.SHDOCO = B.SHDOCO 
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO 
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
			
	WHERE	A.SHDOCO = OrderNumber
		AND	A.SHDCTO = OrderType
		AND	A.SHKCOO = Company
	UNION ALL
	SELECT
		A.SHAN8	AS SCBillToNumber,
		NVL(B.SHIDLN,0) AS ContactID,
		A.SHDRQJ AS RequestedDate,
		NVL(B.SH$9MKT, ' ') AS MarketingCode,
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		A.SHRCD  AS ReasonCode,
		A.SHCRCD AS CurrencyCode,
		A.SHPRGP	AS PricingGroup,
		A.SHASN		AS AdjustmentSchedule,
		A.SHPTC		AS PaymentTerms,
		CASE WHEN IsOverrideShipTo = 1 THEN 'Y' ELSE 'N' END AS IsShipToOverride,
		A.SHVR01 AS CustomerPO
	FROM [SCDATA].F42019 A 
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
		ON	A.SHDOCO = B.SHDOCO
		AND A.SHDCTO = B.SHDCTO
		AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
		ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = OrderNumber
		AND	A.SHDCTO = OrderType
		AND	A.SHKCOO = Company;

	-- GET ORDER DETAIL INFO
	IF(LineNumbersXML IS NOT NULL) THEN 	 
		OPEN ResultData2 FOR SQLDYNAMIC USING LineNumbersXML, CustCrossRefType, CurrentJulianDate, CurrentJulianDate, Company, OrderNumber, OrderType, QuoteStatus,
										LineNumbersXML, CustCrossRefType, CurrentJulianDate, CurrentJulianDate, Company, OrderNumber, OrderType, QuoteStatus;
	 ELSE	
		OPEN ResultData2 FOR SQLDYNAMIC USING CustCrossRefType, CurrentJulianDate, CurrentJulianDate, Company, OrderNumber, OrderType, QuoteStatus,
										CustCrossRefType, CurrentJulianDate, CurrentJulianDate, Company, OrderNumber, OrderType, QuoteStatus;
	END IF; 
	

	/*Configured Items*/
	[SCLIBRARY].COM_GetSOConfiguredLineList(Company, OrderType, OrderNumber, LangPref, ResultData3);
END;
  /
-- #desc						Calculate Quote Status in Detail Mode using all lines
--								Get a table with Quote Number, Quote Company, Quote Type and Quote Status
-- #bl_class					N/A	
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteRecentList

-- #param QuoteStatus			Quote Acceptance Status

CREATE OR REPLACE FUNCTION [SCLIBRARY].QTS_GetQuoteDetailStatusFnc
(
    QuoteAcceptanceStatus   IN NCHAR
)
RETURN [SCLIBRARY].QTS_QuoteStatusTBL IS
       RETURNS [SCLIBRARY].QTS_QuoteStatusTBL;
BEGIN
    WITH CTE AS
    (
		SELECT SDDOCO, SDKCOO, SDDCTO,
			CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
				CASE WHEN SDNXTR =  QuoteAcceptanceStatus THEN 'READYFORREVIEW' 
					 WHEN SDNXTR <  QuoteAcceptanceStatus THEN 'PENDING' 
				ELSE 'COMPLETED' END 
			ELSE 'CANCELLED' END AS SDNXTR
		FROM [SCDATA].F4211 	/* Sales Order Lines */
		WHERE SDRLIT = ' '

		UNION ALL

		SELECT SDDOCO, SDKCOO, SDDCTO,
			CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN
				CASE WHEN SDNXTR =  QuoteAcceptanceStatus THEN 'READYFORREVIEW' 
					 WHEN SDNXTR <  QuoteAcceptanceStatus THEN 'PENDING' 
				ELSE 'COMPLETED' END 
			ELSE 'CANCELLED' END AS SDNXTR
		FROM [SCDATA].F42119	/* Sales Order Lines */
		WHERE SDRLIT = ' '
    ),CTE2 AS (  
        SELECT 
            SDDOCO, SDKCOO, SDDCTO, SDNXTR,
			ROW_NUMBER() OVER ( PARTITION BY SDDOCO, SDKCOO, SDDCTO ORDER BY SDNXTR  DESC ) STAT
        FROM CTE 
    )
    SELECT 	
        [SCLIBRARY].QTS_QuoteStatusType(
            SDKCOO, SDDOCO, SDDCTO, SDNXTR
        )BULK COLLECT INTO RETURNS
    FROM CTE2
    WHERE STAT = 1;
    
    return RETURNS;
END QTS_GetQuoteDetailStatusFnc;
  /

-- #desc						N/A
-- #bl_class					Premier.Commerce.Quote.QuoteOrderHeaderSearchList.cs
-- #db_dependencies				QTS_GetQuoteOrderStatusFnc
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param Company				Company
-- #param OrderType				Order Type
-- #param AddressNumber			Address Number
-- #param QuoteNumber			Quote Number
-- #param ShipToNumber			ShipTo Number
-- #param OrderDateFrom			Date Range
-- #param OrderDateTo			Date Range
-- #param ReferenceNumber		Reference Number
-- #param Pending				Quotes in status Pending
-- #param Ready					Quotes in status Ready to Review
-- #param SortBy				Column to filter by QuoteNumber, CustomerReference, QuoteDate,
--								QuoteDate DESC, QuoteNumber DESC (Default Values) */
-- #param SortDir				Direction to filter A = Ascendant, D = Descendant, A DEFAULT Value
-- #param PageIndex				Page Index
-- #param PageSize				Page Size

/* To retrieve all open orders, should send Pending and Ready parameters with value 1
 */

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteOrderHeadSrchList
(
	InstallationID			IN NCHAR,
	Company					IN NCHAR,
	OrderType				IN NCHAR,
	AddressNumber			IN NUMBER,
	QuoteNumber				IN NUMBER,
	ShipToNumber			IN NUMBER,
	OrderDateFrom			IN NUMBER,
	OrderDateTo				IN NUMBER,
	ReferenceNumber			IN NCHAR,
	Pending					IN INT, /* Quotes in status Pending */
	Ready					IN INT, /* Quotes in status Ready to Review */
	SortBy					IN NVARCHAR2,
	SortDir					IN NVARCHAR2,
	PageIndex				IN INT,
	PageSize				IN INT,
    ResultData1 OUT GLOBALPKG.refcursor    
)
AS
		/* Dynamic */
		SQL_DYNAMIC		  VARCHAR2(4000);
		WHERE_DYNAMIC	  NVARCHAR2(4000) := ' ';			/* Filter Conditions */
		FROM_DYNAMIC	  NVARCHAR2(4000) := ' ';			/* View name */

		QUOTESTATUS_DYNAMIC NVARCHAR2(4000) := ' ';			/* Call the function in the first select to gets quote status when search by status, empty when filter is all orders */
		QUOTESTATUS_WHERE_DYNAMIC NVARCHAR2(4000) := ' ';	

		INNER_DYNAMIC NVARCHAR2(4000) := ' ';

		/* Dynamic Sort */
		SORT_DYNAMIC NVARCHAR2(80);
		SORTDIR_DYNAMIC NVARCHAR2(5);

		/* Gets the Quote Order Document Restrictions */
		QOrderRestric	NVARCHAR2(1);
		QOrderINID		NCHAR(3):= InstallationID;
		QOrderConstant	NCHAR(10):= 'SQ_RESTRIC';
			
		/* Gets the Quote Status for Quote Conversion */
		QuoteAcceptanceStatusValue			NCHAR(3);
		OrderHistoryINID	NCHAR(3) := InstallationID;
		QuoteStatusConstant	NCHAR(10) := 'QUOTSTAT';
		
		/* Gets the Quote Acceptance Level - Header - Detail */
		QuoteAcceptanceLevel	NVARCHAR2(6);
		QuoteTypeINID			NCHAR(3) := InstallationID;
		QuoteTypeConstant		NCHAR(10):= 'QUOTTYPE';
		
		CompanyConstant			NVARCHAR2(1);
		ConstantInstallation	NCHAR(3):= InstallationID;

		/* Gets Foreign Constant */
		ForeignConstant	NVARCHAR2(1);
		ForeignConstantINID		NCHAR(3) := InstallationID;

		/* Paging */
		RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
		RowEnd INT := (PageIndex * PageSize);
BEGIN

	[SCLIBRARY].CMM_GetConstantValue(QOrderConstant, QOrderINID, QOrderRestric);
	[SCLIBRARY].CMM_GetConstantValue(QuoteStatusConstant, OrderHistoryINID, QuoteAcceptanceStatusValue);
	[SCLIBRARY].CMM_GetConstantValue(QuoteTypeConstant, QuoteTypeINID, QuoteAcceptanceLevel);
	[SCLIBRARY].CMM_GetConstantValue('FOREGCURYN', ForeignConstantINID, ForeignConstant);
	
	/* Dynamic sort direction statement */
	SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	SORT_DYNAMIC := CASE SortBy
		WHEN 'QuoteNumber' THEN ' A.QuoteNumber ' || SORTDIR_DYNAMIC || ', A.QuoteDate DESC'
		WHEN 'CustomerReference' THEN ' UPPER(A.CustomerReference) ' || SORTDIR_DYNAMIC || ', A.QuoteDate DESC'
		WHEN 'QuoteDate' THEN ' A.QuoteDate ' || SORTDIR_DYNAMIC || ', A.QuoteNumber DESC'
		ELSE ' A.QuoteDate DESC, A.QuoteNumber DESC'
	END;
	
	IF (AddressNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := N' VW.BillToNumber = :AddressNumber ';
	ELSE
		WHERE_DYNAMIC := N' ( 1 = 1 OR :AddressNumber IS NULL) ';
	END IF;

	IF (QuoteNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND VW.SHDOCO = :QuoteNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ( 1 = 1 OR :QuoteNumber IS NULL) ';
	END IF;

	IF (ShipToNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SHAN = :ShipToNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ( 1 = 1 OR :ShipToNumber IS NULL) ';
	END IF;

	IF (OrderDateFrom IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND VW.SHTRDJ >= :OrderDateFrom ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ( 1 = 1 OR :OrderDateFrom IS NULL) ';
	END IF;

	IF (OrderDateTo IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND VW.SHTRDJ <= :OrderDateTo ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ( 1 = 1 OR :OrderDateTo IS NULL) ';
	END IF;
	
	IF (ReferenceNumber <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(VW.SHVR01) LIKE ''%'' || :ReferenceNumber || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ( 1 = 1 OR :ReferenceNumber = ''*'') ';
	END IF;
	
	IF (OrderType <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND VW.SHDCTO = :OrderType ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ( 1 = 1 OR :OrderType = ''*'') ';
	END IF;

	IF (Company <> '*' AND Company <> '00000') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND VW.SHKCOO = :Company ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND ( 1 = 1 OR :Company = ''*'') ';

		[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
		IF (CompanyConstant = N'L') THEN
			INNER_DYNAMIC := N' INNER JOIN [SCDATA].FQ679912 CR
								 ON CR.CI$9INID = ''' || ConstantInstallation || N'''
								 AND CR.CICO = VW.SHCO ';
		END IF;
	END IF;

	/* Filter by open orders */
	IF ((Ready = 1) AND (Pending = 1)) THEN /* All Open Orders */
		QUOTESTATUS_WHERE_DYNAMIC := QUOTESTATUS_WHERE_DYNAMIC || N' WHERE A.QuoteStatus IN (''PENDING'', ''READYFORREVIEW'') ';
	ELSIF (Ready = 1) THEN /* Ready */
		QUOTESTATUS_WHERE_DYNAMIC := QUOTESTATUS_WHERE_DYNAMIC || N' WHERE A.QuoteStatus = ''READYFORREVIEW'' ';
	ELSIF (Pending = 1) THEN /* Pending */
		QUOTESTATUS_WHERE_DYNAMIC := QUOTESTATUS_WHERE_DYNAMIC || N' WHERE A.QuoteStatus = ''PENDING'' ';
	END IF;

	IF (QuoteAcceptanceLevel = 'DETAIL') THEN
		IF (ShipToNumber IS NOT NULL) THEN
			
			QUOTESTATUS_DYNAMIC := N' INNER JOIN TABLE( [SCLIBRARY].QTS_GetQtDetStatByShipToFnc ( :QuoteAcceptanceStatusValue, '||ShipToNumber||' ) ) QTS
								ON  QTS.SDDOCO = A.SHDOCO
						    	AND QTS.SDDCTO = A.SHDCTO 
						    	AND QTS.SDKCOO = A.SHKCOO';
		ELSE
			QUOTESTATUS_DYNAMIC := N' INNER JOIN TABLE( [SCLIBRARY].QTS_GetQuoteDetailStatusFnc ( :QuoteAcceptanceStatusValue ) ) QTS
								ON  QTS.SDDOCO = A.SHDOCO
						    	AND QTS.SDDCTO = A.SHDCTO 
						    	AND QTS.SDKCOO = A.SHKCOO';
		END IF;
	ELSE
		QUOTESTATUS_DYNAMIC := N' INNER JOIN TABLE( [SCLIBRARY].QTS_GetQuoteOrderStatusFnc ( A.SHDOCO, A.SHDCTO, A.SHKCOO, :QuoteAcceptanceStatusValue )) QTS 
								ON  QTS.SDDOCO = A.SHDOCO
								AND QTS.SDDCTO = A.SHDCTO 
								AND QTS.SDKCOO = A.SHKCOO ';
	END IF;

	IF (QOrderRestric = N'1') THEN
		INNER_DYNAMIC := INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
								ON  DR.DR$9INID = ''' || QOrderINID || '''
								AND DR.DR$9CNST = ''SQ_RESTRIC''
								AND DR.DRKY = VW.SHDCTO ';
	END IF;

	WHERE_DYNAMIC := N' WHERE ' || WHERE_DYNAMIC;

	IF (ShipToNumber IS NOT NULL) OR (Ready = 1) OR (Pending = 1) THEN
		FROM_DYNAMIC := N' FROM [SCLIBRARY].QTS_OrderHeadSrchVW VW ';
	ELSE
		FROM_DYNAMIC := N' FROM [SCLIBRARY].QTS_OrderHeadVW VW ';
	END IF;

	SQL_DYNAMIC := N'
		WITH CTE AS (
		SELECT 
			VW.SHDOCO, 
			VW.SHDCTO, 
			VW.SHKCOO,
			VW.SHVR01,
			VW.SHTRDJ,
			VW.SHDRQJ,						
			VW.SHRORN,
			VW.SHRCTO,
			CASE WHEN VW.SHCRRM = ''F'' AND :ForeignConstant = ''N'' THEN N''NOTALLOWED'' 
				ELSE N'' '' END AS QuoteStatus,
			VW.SHCRCD,
			VW.SHCRRM,
			VW.BillToNumber '
		|| FROM_DYNAMIC
		|| INNER_DYNAMIC
		|| WHERE_DYNAMIC ||
		'GROUP BY (VW.SHDOCO, VW.SHDCTO, VW.SHKCOO, VW.SHVR01, VW.SHTRDJ, VW.SHDRQJ,						
			       VW.SHRORN, VW.SHRCTO, VW.SHCRCD, VW.SHCRRM, VW.BillToNumber)
        ), QSTATUS AS (
			SELECT 
				SHDOCO AS QuoteNumber, 
				SHDCTO AS OrderType, 
				SHKCOO AS OrderCompany, 
				SHVR01 AS CustomerReference, 
				SHTRDJ AS QuoteDate, 
				SHDRQJ AS RequestedDate, 
				SHRORN AS RelatedOrderNumber, 
				SHRCTO AS RelatedOrderType, 
				CASE WHEN A.QuoteStatus = '' '' THEN QTS.QuoteStatus ELSE A.QuoteStatus END AS QuoteStatus, 
				SHCRCD AS CurrencyCode, 
				SHCRRM AS CurrencyMode, 
				A.BillToNumber AS BillToNumber
			FROM CTE A
			' || QUOTESTATUS_DYNAMIC || N'
		), PAGING AS (
			SELECT
				A.QuoteNumber, 
				A.OrderType, 
				A.OrderCompany, 
				A.CustomerReference, 
				A.QuoteDate, 
				A.RequestedDate, 
				A.RelatedOrderNumber, 
				A.RelatedOrderType, 
				A.QuoteStatus, 
				A.CurrencyCode, 
				A.CurrencyMode, 
				A.BillToNumber,
				ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||') AS RNUM 
			FROM QSTATUS A
			' || QUOTESTATUS_WHERE_DYNAMIC || N'
		)
        SELECT  
             A.QuoteNumber, 
			 A.OrderType, 
			 A.OrderCompany, 
			 A.CustomerReference, 
			 A.QuoteDate, 
			 A.RequestedDate, 
			 A.RelatedOrderNumber, 
			 A.RelatedOrderType, 
			 A.QuoteStatus, 
			 A.CurrencyCode, 
			 A.CurrencyMode, 
			 A.BillToNumber, 
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount 
		FROM  PAGING A
		WHERE 
			((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';	

	OPEN ResultData1 FOR SQL_DYNAMIC USING 
	ForeignConstant, AddressNumber, QuoteNumber,ShipToNumber, OrderDateFrom, OrderDateTo, 
	ReferenceNumber, OrderType, Company, QuoteAcceptanceStatusValue, PageIndex, PageSize, 
	RowStart, RowEnd;
END;
  /
-- #desc								Load a order detail
-- #bl_class							Premier.Commerce.Quote.QuoteOrderInfo.cs
-- #db_dependencies						QTS_GetQuoteOrderBillToInfo.sql , QTS_GetQuoteOrderInfoShipments.sql, QTS_GetQuoteOrderStatusFnc.sql
-- #db_references						N/A

-- #param InstallationID				Installation ID
-- #param OrderCompany					Company ID
-- #param OrderType						Document Type
-- #param QuoteNumber					Quote Number
-- #param RetrieveWebContentInfo		Retrieve Web Content Info
-- #param LangPref						Language Preference


CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteOrderInfo_Z
(
	InstallationID	IN NCHAR,
	OrderCompany	IN NCHAR,
	OrderType		IN NCHAR,
	QuoteNumber		IN NUMBER,
	RetrieveWebContentInfo	IN INT,
	LangPref		IN NCHAR,
	ResultData1     OUT GLOBALPKG.refcursor,
	ResultData2     OUT GLOBALPKG.refcursor,
	ResultData3     OUT GLOBALPKG.refcursor,
	ResultData4     OUT GLOBALPKG.refcursor,
	ResultData5     OUT GLOBALPKG.refcursor
)
AS
	/* STORE PROCEDURE VARIABLES */
	 ScBillTo		NUMBER;
	 ScShipTo		NUMBER;
	 ContactIDTMP	NUMBER;
	 OrderHeaderCompanyTMP	NCHAR(5);
	 QuoteCurrencyMode	NCHAR(1);
	
	 CustCrossRefType	NCHAR(2);
	 CustCrossINID		NCHAR(3):= InstallationID;
	 
     CurrentJulianDate INT;
     
     -- Gets the Quote Display Canceled Quote Lines(Y/N)
     CancelLn			NVARCHAR2(1);
	 CancelLnINID	    NCHAR(3):= InstallationID;
	 CancelLnConstant	NCHAR(10):= 'QUOTCANCYN';
	 
	 -- Gets the Quote Status for Quote Conversion 
	 QuoteAcceptanceStatusValue		 NCHAR(3);
	 QuoteHistoryINID	 NCHAR(3) := InstallationID;
	 QuoteStatusConstant NCHAR(10):= 'QUOTSTAT';

	/* Gets Foreign Constant */
	ForeignConstant	NVARCHAR2(1);
	ForeignConstantINID		NCHAR(3) := InstallationID;

BEGIN			
	
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_A';	-- HEADER
	EXECUTE IMMEDIATE 'TRUNCATE TABLE [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_B';	-- DETAILR

	CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	[SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossINID, CustCrossRefType);
	[SCLIBRARY].CMM_GetConstantValue(CancelLnConstant, CancelLnINID, CancelLn);
	[SCLIBRARY].CMM_GetConstantValue(QuoteStatusConstant, QuoteHistoryINID, QuoteAcceptanceStatusValue);
	[SCLIBRARY].CMM_GetConstantValue('FOREGCURYN', ForeignConstantINID, ForeignConstant);

	-- LOAD ORDER DETAIL TEMPORARY TABLE
	INSERT INTO [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_B
	SELECT	DISTINCT			
			A.SDKCOO				AS OrderCompany,
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS QuoteNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDSHAN				AS ShipToID,
			A.SDSHAN				AS SCShipToNumber,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			NVL(S.IVCITM,' ')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS QuantityOrdered,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			NVL(T1.LFIVI,' ')		AS InventoryInterface,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			A.SDNXTR				AS NextStatus, 
			A.SDLTTR				AS LastStatus,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			NVL(B.SD$9SLN,0)		AS ShipLineNumber
		FROM	[SCDATA].F4211 A		--Standard Sales OrderDetail
		LEFT OUTER JOIN [SCDATA].FQ674211 B
			ON 	B.SDKCOO = A.SDKCOO
			AND B.SDDOCO = A.SDDOCO
			AND B.SDDCTO = A.SDDCTO
			AND B.SDLNID = A.SDLNID
		LEFT OUTER JOIN [SCDATA].F4104	S --Item Cross Ref
			ON	S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND S.IVXRT = CustCrossRefType
			AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
		INNER JOIN [SCDATA].F40205	T1 --Line Type
			ON T1.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE	A.SDDOCO = QuoteNumber
		AND		A.SDDCTO = OrderType
		AND		A.SDKCOO = OrderCompany
		AND (CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
	UNION ALL
	SELECT	DISTINCT
			A.SDKCOO				AS OrderCompany, 
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS QuoteNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDSHAN				AS ShipToID,
			A.SDSHAN				AS SCShipToNumber,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			NVL(S.IVCITM,' ')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
			A.SDDSC2				AS Description2,
			' '						AS URL,
			A.SDUORG				AS QuantityOrdered,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			NVL(T1.LFIVI,' ')		AS InventoryInterface,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM,
			A.SDAITM,
			A.SDNXTR				AS NextStatus, 
			A.SDLTTR				AS LastStatus,
			A.SDPROV				AS OverridePrice,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			NVL(B.SD$9SLN,0)		AS ShipLineNumber
			
	FROM 	[SCDATA].F42119 A
		LEFT OUTER JOIN [SCDATA].FQ674211 B 
			ON 	A.SDDOCO = B.SDDOCO 
			AND A.SDDCTO = B.SDDCTO
			AND A.SDKCOO = B.SDKCOO
			AND A.SDLNID = B.SDLNID
		LEFT OUTER JOIN [SCDATA].F4104	S --Item Cross Ref
			ON  S.IVAN8  = A.SDAN8
			AND S.IVITM  = A.SDITM
			AND S.IVXRT = CustCrossRefType
			AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
		LEFT OUTER JOIN [SCDATA].F40205	T1 --Line Type
			ON T1.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE	A.SDDOCO = QuoteNumber
			AND		A.SDDCTO = OrderType
			AND		A.SDKCOO = OrderCompany
			AND (CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
	ORDER BY A.SDLNID ASC;
	
	
	
	-- LOAD ORDER HEADER TEMPORARY TABLE
	INSERT INTO [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_A
	SELECT	DISTINCT
			A.SHAN8  AS SCBillToNumber,
			A.SHSHAN AS SCShipToNumber,
			NVL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1,
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS QuoteNumber,
			A.SHTRDJ AS OrderDate,
			A.SHCNDJ AS CancelDate,
			A.SHDRQJ AS RequestedDate,
			NVL(B.SH$9MKT, ' ') AS MarketingCode,
			B.SH$9MMID AS MembershipID, 
			B.SH$9PD AS PercentageDiscount,
			B.SH$9DT AS DiscountType,
			A.SHRCD  AS ReasonCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			A.SHCO	    AS	OrderHeaderCompany,
			NVL(B.SHIDLN,0) AS ContactID
	FROM	[SCDATA].F4201 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO 
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD	    
	WHERE	A.SHDOCO = QuoteNumber
	AND		A.SHDCTO = OrderType
	AND		A.SHKCOO = OrderCompany
	UNION ALL
	SELECT	DISTINCT
			A.SHAN8  AS SCBillToNumber,
			A.SHSHAN AS SCShipToNumber,
			NVL(B.SH$9TYP,0)			AS AddressBookType,
			A.SHDEL1 AS DeliveryInst1,
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS QuoteNumber,
			A.SHTRDJ AS OrderDate,
			A.SHCNDJ AS CancelDate,
			A.SHDRQJ AS RequestedDate,
			NVL(B.SH$9MKT, ' ') AS MarketingCode,
			B.SH$9MMID AS MembershipID, 
			B.SH$9PD AS PercentageDiscount,
			B.SH$9DT AS DiscountType,
			A.SHRCD  AS ReasonCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			A.SHCO	    AS	OrderHeaderCompany,
			NVL(B.SHIDLN,0) AS ContactID		
			
	FROM 	[SCDATA].F42019 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
	LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
	WHERE	A.SHDOCO = QuoteNumber
	AND		A.SHKCOO = OrderCompany
	AND		A.SHDCTO = OrderType;
	
	

	--Load BillTo Variables From Order Header
	BEGIN
	SELECT 
	    SCBillToNumber,
	    SCShipToNumber,
	    OrderHeaderCompany,
	    ContactID,
		CurrencyMode
	INTO ScBillTo,ScShipTo, OrderHeaderCompanyTMP, ContactIDTMP, QuoteCurrencyMode
	FROM [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_A
	WHERE ROWNUM < 2;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		ScBillTo:=0;
		ScShipTo:=0;
		ContactIDTMP:=0;
		QuoteCurrencyMode:='';
	END;
	
	OPEN ResultData1 FOR
	SELECT
		SCBillToNumber,
		SCShipToNumber,
		AddressBookType,
		DeliveryInst1, 
		DeliveryInst2,
		CustomerPO,
		OrderCompany,
		OrderType,
		QuoteNumber,
		OrderDate,
		CancelDate,
		RequestedDate,
		MarketingCode,
		MembershipID, 
		PercentageDiscount,
		DiscountType,
		ReasonCode,
		CurrencyCode,
		CurrencyMode,
		CurrencyDesc,
		OrderHeaderCompany,			
		ContactID,
		NVL(NVL(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices,
		(CASE
			WHEN (A.CurrencyMode = 'F' AND ForeignConstant = 'N')
				THEN N'NOTALLOWED'
				ELSE QTS.QuoteStatus 
		END) AS QuoteStatus
	FROM [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_A A
	INNER JOIN TABLE( [SCLIBRARY].QTS_GetQuoteOrderStatusFnc (A.QuoteNumber, A.OrderType, A.OrderCompany, QuoteAcceptanceStatusValue) ) QTS
		ON QTS.SDDOCO = A.QuoteNumber
			AND QTS.SDDCTO = A.OrderType	
			AND QTS.SDKCOO = A.OrderCompany
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = QuoteNumber 
		AND Tax.STDCTO = OrderType
		AND Tax.STKCOO = OrderCompany
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = QuoteNumber 
		AND TxHistory.STDCTO = OrderType
		AND TxHistory.STKCOO = OrderCompany;
	
	[SCLIBRARY].QTS_GetQuoteOrderInfo_BillTo(ScBillTo,ContactIDTMP,ResultData2);
	[SCLIBRARY].QTS_GetQuoteOrderInfoShipments(OrderHeaderCompanyTMP, OrderType, QuoteNumber, ScShipTo,  ResultData3);
	
	IF(RetrieveWebContentInfo = 1) THEN 

		OPEN ResultData4 FOR
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.QuoteNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,	
			A.ShipToID,
			A.SCShipToNumber,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			NVL(ContenDesc.DESC1, A.Description1)	AS Description1,
			NVL(ContenDesc.DESC2, A.Description2)	AS Description2,
			ContenDesc.URL AS URL,
			A.QuantityOrdered,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.IdentifierShortItem,
			A.OverridePrice,
			A.LongItemNumber,
			A.AuxItemNumber,
			(CASE
				WHEN (QuoteCurrencyMode = 'F' AND ForeignConstant = 'N')
					THEN 'NOTALLOWED'
				WHEN (A.NextStatus = '999' AND A.LastStatus >= '980' AND A.LastStatus <> '995' )
					THEN 'CANCELLED'
				WHEN (A.NextStatus < QuoteAcceptanceStatusValue)
					THEN 'PENDING'
				WHEN (A.NextStatus = QuoteAcceptanceStatusValue)
					THEN 'READYFORREVIEW'
				WHEN (A.NextStatus > QuoteAcceptanceStatusValue)
					THEN 'COMPLETED'			
			END) AS QuoteStatus,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,
			NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			A.ShipLineNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			NVL(C.RFOGNO, 0 ) AS ParentLineNo
		FROM [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_B A
		LEFT OUTER JOIN TABLE( [SCLIBRARY].INV_GetItemContenDescAndURLFnc(InstallationID, A.IdentifierShortItem, LangPref, 0) ) ContenDesc 
			ON ContenDesc.DESCITM = A.IdentifierShortItem
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.QuoteNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.QuoteNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
			ON  C.RFDOCO = A.QuoteNumber
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber;
	ELSE

		OPEN ResultData4 FOR
		SELECT
			A.OrderCompany,
			A.OrderType,
			A.QuoteNumber,
			A.LineNumber,
			A.TransactionDate,
			A.RequestedDate,
			A.LineType,
			A.TaxableYN,
			A.TaxArea,
			A.TaxExplanationCode,	
			A.ShipToID,
			A.SCShipToNumber,
			A.CostCenter, 
			A.CostCenterHeader,
			A.ItemCrossRefNumber,
			A.Description1	AS Description1, /*Return this description for miscellaneous line and for Tracking lines */
			A.Description2	AS Description2,
			N'' AS URL,
			A.QuantityOrdered,
			A.ShippedQuantity,
			A.UnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.BackorderedQuantity,
			A.CanceledQuantity,
			A.AmountUnitPrice,
			A.ForeignUnitPrice,
			A.AmountExtPrice,
			A.ForeignExtPrice,
			A.InventoryInterface,
			A.IdentifierShortItem,
			A.OverridePrice,
			A.LongItemNumber,
			A.AuxItemNumber,
			(CASE
				WHEN (QuoteCurrencyMode = 'F' AND ForeignConstant = 'N')
					THEN 'NOTALLOWED'
				WHEN (A.NextStatus = '999' AND A.LastStatus >= '980' AND A.LastStatus <> '995' )
					THEN 'CANCELLED'
				WHEN (A.NextStatus < QuoteAcceptanceStatusValue)
					THEN 'PENDING'
				WHEN (A.NextStatus = QuoteAcceptanceStatusValue)
					THEN 'READYFORREVIEW'
				WHEN (A.NextStatus > QuoteAcceptanceStatusValue)
					THEN 'COMPLETED'			
			END) AS QuoteStatus,
			A.StockingType,
			A.RelatedKitItemNo,
			A.KitMasterLineNo,
			A.ComponentLineNumber,
			NVL(NVL(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			NVL(NVL(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			NVL(NVL(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			NVL(NVL(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			NVL(NVL(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			NVL(NVL(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			NVL(NVL(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			NVL(NVL(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			A.ShipLineNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			NVL(C.RFOGNO, 0 ) AS ParentLineNo
		FROM [SCLIBRARY].QTS_GETQUOTEORDERINFO_Z_B A
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO = A.QuoteNumber 
			AND Tax.DTDCTO = A.OrderType
			AND Tax.DTKCOO = A.OrderCompany 
			AND Tax.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = A.QuoteNumber 
			AND TxHistory.DTDCTO = A.OrderType
			AND TxHistory.DTKCOO = A.OrderCompany 
			AND TxHistory.DTLNID = A.LineNumber
		LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
			ON  C.RFDOCO = A.QuoteNumber
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber;

	END IF;

	/*Configured Items*/
	[SCLIBRARY].COM_GetSOConfiguredLineList(OrderCompany, OrderType, QuoteNumber, LangPref, ResultData5);

END;
  /
-- #desc							Returns the last OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.QuoteRecentList.cs
-- #db_dependencies					QTS_GetQuoteOrderStatusFnc.sql
-- #db_references					N/A

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param AddressBookType			Address Book Type
-- #param OrdersToDisplay			Quantity of rows to be returned
-- #param Company					Company if is 00000 is '*'

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteRecentList
(
	InstallationID			IN NCHAR,
	Company					IN NCHAR,
	AddressNumber			IN NUMBER,
	QuoteToDisplay			IN INT,
    ResultData1 OUT GLOBALPKG.refcursor    
)
AS
		CompanyTemp NCHAR(5) := Company;

		-- Gets the Quote Order Document Restrictions	
		QOrderRestric	NVARCHAR2(1);
		QOrderINID		NCHAR(3):= InstallationID;
		QOrderConstant	NCHAR(10):= 'SQ_RESTRIC';
			
		-- Gets the Quote Status for Quote Convertion 
		QuoteAcceptanceStatusValue		NCHAR(3);
		OrderHistoryINID	NCHAR(3) := InstallationID;
		QuoteStatusConstant	NCHAR(10) := 'QUOTSTAT';
		
		-- Gets the Quote Acceptance Level - Header - Detail
		QuoteAcceptanceLevel	NVARCHAR2(6);
		QuoteTypeINID			NCHAR(3) := InstallationID;
		QuoteTypeConstant		NCHAR(10):= 'QUOTTYPE';
		
		CompanyConstant			NVARCHAR2(1);
		ConstantInstallation	NCHAR(3):= InstallationID;
		
		/* Gets Foreign Constant */
		ForeignConstant			NVARCHAR2(1);
		ForeignConstantINID		NCHAR(3) := InstallationID;
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue(QOrderConstant, QOrderINID, QOrderRestric);
	[SCLIBRARY].CMM_GetConstantValue(QuoteStatusConstant, OrderHistoryINID, QuoteAcceptanceStatusValue);
	[SCLIBRARY].CMM_GetConstantValue(QuoteTypeConstant, QuoteTypeINID, QuoteAcceptanceLevel);

	-- Gets the Order History Status
	[SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
	
	[SCLIBRARY].CMM_GetConstantValue('FOREGCURYN', ForeignConstantINID, ForeignConstant);
	
	IF (CompanyTemp = '00000') THEN 
		CompanyTemp := '*';
	END IF;

	IF (QuoteAcceptanceLevel = 'DETAIL') THEN	
		OPEN ResultData1 FOR
		SELECT
			A.SHDOCO QuoteNumber, 
			A.SHDCTO OrderType, 
			A.SHKCOO OrderCompany,		
			A.SHTRDJ QuoteDate,
			CASE WHEN A.SHCRRM = 'F' AND ForeignConstant = 'N' THEN N'NOTALLOWED' ELSE QTS.QuoteStatus END AS QuoteStatus
		FROM 
			TABLE (SCLIBRARY.COM_GetRecentDocsFnc (CompanyTemp, QOrderINID, QOrderConstant, ConstantInstallation, CompanyConstant, QOrderRestric, AddressNumber) ) A
			INNER JOIN TABLE (SCLIBRARY.QTS_GetQuoteDetailStatusFnc ( QuoteAcceptanceStatusValue ) ) QTS
			ON
				QTS.SDDOCO = A.SHDOCO 
				AND QTS.SDKCOO = A.SHKCOO
				AND QTS.SDDCTO = A.SHDCTO
				AND RNUM BETWEEN 1 AND QuoteToDisplay
		ORDER BY RNUM;
	ELSE	
		OPEN ResultData1 FOR
		SELECT
			A.SHDOCO QuoteNumber, 
			A.SHDCTO OrderType, 
			A.SHKCOO OrderCompany,	
			A.SHTRDJ QuoteDate,
			CASE WHEN A.SHCRRM = 'F' AND ForeignConstant = 'N' THEN N'NOTALLOWED' ELSE QTS.QuoteStatus END AS QuoteStatus
		FROM 
			TABLE( [SCLIBRARY].COM_GetRecentDocsFnc (CompanyTemp, QOrderINID, QOrderConstant, ConstantInstallation, CompanyConstant, QOrderRestric, AddressNumber) ) A
			INNER JOIN TABLE( [SCLIBRARY].QTS_GetQuoteOrderStatusFnc (A.SHDOCO, A.SHDCTO, A.SHKCOO, QuoteAcceptanceStatusValue) ) QTS
				ON QTS.SDDOCO = A.SHDOCO
					AND QTS.SDDCTO = A.SHDCTO
					AND QTS.SDKCOO = A.SHKCOO
		WHERE 
			RNUM BETWEEN 1 AND QuoteToDisplay;
	END IF;
END;
  /

-- #desc							Add drawer by register 
-- #bl_class						Premier.POS.Drawer.cs , register.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param RegisterID				Register ID.
-- #param DrawerNumber				Drawer Number.
-- #param RegisterID				Register ID			
-- #param DrawerNumber				Drawer Number	
-- #param Status					Status
-- #param CurrentBatchNumber		Batch Number	
-- #param UserReservedReference		User Reserved ref.
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved date
-- #param CashDrawerLimit			Cash in drawer limit
-- #param UserId					User Id
-- #param ProgramId					Pregram Id
-- #param dateUpdated				Date updated
-- #param workStationId				Work Station		
-- #param TimeLastUpdated			Time Last Update

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddDrawer
(
	RegisterID				IN NVARCHAR2,
	DrawerNumber			IN DECIMAL,
	Status					IN NVARCHAR2,
	AllowMultipleUsers		IN NVARCHAR2,
	CurrentBatchNumber		IN NVARCHAR2,
	UserReservedReference	IN NVARCHAR2 ,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	CashDrawerLimit			IN DECIMAL,
	ProgramId				IN NVARCHAR2,
	WorkStationId			IN NVARCHAR2,
	UserId					IN NVARCHAR2,	
	DateUpdated			    IN DECIMAL,	
	TimeLastUpdated		    IN DECIMAL
)
AS
BEGIN

INSERT INTO
	[SCDATA].FQ674261
	(
		DR$9REGID, 
		DR$9DRAW,  
		DR$9DRST,
		DR$9DRMUL,  
		DREDBT ,   
		DRURRF,    
		DRURAB,    
		DRURAT,    
		DRURCD,    
		DRURDT,
		DR$9AATR,   
		DRPID,     
		DRJOBN,    
		DRUSER,    
		DRUPMJ,    
		DRUPMT    
	)
	VALUES
	(
		RegisterID,
		DrawerNumber,
		Status,
		AllowMultipleUsers,
		CurrentBatchNumber,
		UserReservedReference,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		CashDrawerLimit,
		ProgramID,
		WorkStationId,
		UserId,
		DateUpdated,
		TimeLastUpdated
		
	);
END;


  /

-- #desc						Insert Drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument		Payment instrument
-- #param OpeningBalance		Opening Balance
-- #param SumOfTransactions		Sum of Trans.
-- #param TotalsPerCashier		Totals per Cashier
-- #param LeftInDrawer			Left in Drawer
-- #param CreditCardType		Credit Card Type
-- #param CurrecyCode			Currecy Code
-- #param UserId				UserId
-- #param ProgramId				ProgramId			
-- #param WorkstationId			WorkstationId		
-- #param DateUpdated			DateUpdated		
-- #param TimeOfDay				TimeOfDay	


CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddDrawerPayment
(
	RegisterID				IN NVARCHAR2,
	DrawerNumber			IN DECIMAL,
	CurrentBatchNumber		IN NVARCHAR2,
	PaymentInstrument		IN NVARCHAR2,
	OpeningBalance			IN DECIMAL,
	SumOfTransactions		IN DECIMAL,
	TotalsPerCashier		IN DECIMAL,
	LeftInDrawer			IN DECIMAL,
	CreditCardType			IN NVARCHAR2,
	CurrecyCode				IN NVARCHAR2,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserId					IN NVARCHAR2,
	ProgramId				IN NVARCHAR2,
	WorkstationId			IN NVARCHAR2,  
	DateUpdated				IN DECIMAL,
	TimeOfDay				IN DECIMAL
)
AS
	LineID DECIMAL := 0;
BEGIN

	--Get max sequence number
	BEGIN
	    SELECT NVL(MAX(DCLNID),0) + 1 INTO LineID
	    FROM [SCDATA].FQ67428
	    WHERE TRIM(DC$9REGID) = TRIM(RegisterID) AND DC$9DRAW = DrawerNumber AND TRIM(DCEDBT) = TRIM(CurrentBatchNumber);
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    LineID := NULL;
	END;
	
	INSERT INTO 
		[SCDATA].FQ67428
	(
	  DC$9REGID,  
	  DC$9DRAW,      
	  DCEDBT,     
	  DCRYIN,
	  DCLNID,
	  DC$9AAOB,                  
	  DC$9AATR,
	  DC$9AACS,                  
	  DC$9AALF,
	  DCCARD,
	  DCCRCD,
	  DCURAB,
	  DCURAT,
	  DCURCD,
	  DCURDT,
	  DCURRF,
	  DCUSER,
      DCPID,
      DCJOBN,
      DCUPMJ,
      DCUPMT
	)
	VALUES
	(
	  RegisterID, 
	  DrawerNumber,     
	  CurrentBatchNumber,    
	  PaymentInstrument,
	  LineID,
	  OpeningBalance,  
	  SumOfTransactions,
	  TotalsPerCashier,  
	  LeftInDrawer,
	  CreditCardType,
	  CurrecyCode,
	  UserReservedNumber,
	  UserReservedAmount,
	  UserReservedCode,
	  UserReservedDate,
	  UserReservedReference,
	  UserId,   
	  ProgramId,
	  WorkstationId,  
	  DateUpdated,   
	  TimeOfDay 
	);
END;
	

	
  /

-- #desc					Cast fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line	
-- #param ItemNumber		Item number
-- #param UnitOfMeasure		UOM
-- #param Quantity			Quantity
-- #param Description1		Description 1
-- #param Description2		Description 2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddFastButton
(
	InstallationID      IN NVARCHAR2,
	LineNumber	        IN DECIMAL,
	ItemNumber          IN DECIMAL,
	UnitOfMeasure       IN NVARCHAR2,
	Quantity	        IN DECIMAL,
	ItemDescription1    IN NVARCHAR2,
	ItemDescription2    IN NVARCHAR2
)
AS
BEGIN
	INSERT INTO 
		[SCDATA].FQ67416
		(
		 FB$9INID,  FBLNID, 
		 FBITM,     FBUOM,   FBUORG, 
		 FBDSC1,    FBDSC2
		)
	VALUES
		(
		 InstallationID, LineNumber, 
		 ItemNumber,    UnitOfMeasure,  Quantity,   
		 ItemDescription1,   ItemDescription2
		);
END;
  /

-- #desc					Add Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref
-- #param Description1		Description1 
-- #param Description2		Description2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddFastButtonLang
(
	InstallationID IN NVARCHAR2,
	LineNumber		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	Description1	IN NVARCHAR2,
	Description2	IN NVARCHAR2
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67416L
	(
		FB$9INID,
		FBLNID,
		FBLNGP,		
		FBDSC1,
		FBDSC2
	)
	VALUES
	(
		InstallationID,
		LineNumber,		 
		LangPref, 
		Description1,
		Description2
	);
END;
  /

-- #desc				    POS_AddReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddReceiptItemMessage
(
    InstallationID     IN NVARCHAR2,
    ItemNumber         IN DECIMAL,
    MessageID          IN NVARCHAR2,
    QtyMessageItem     IN NVARCHAR2,
	ProgramID          IN NVARCHAR2,
    WorkStationID      IN NVARCHAR2,
    User               IN NVARCHAR2,
	DateLastUpdated    IN DECIMAL,
	TimeLastUpdated    IN DECIMAL
)
AS
BEGIN
    INSERT INTO [SCDATA].FQ674220
           (MI$9INID
           ,MIITM
           ,MI$9MID
           ,MI$9IMQY
           ,MIPID
           ,MIJOBN
           ,MIUSER
           ,MIUPMJ
           ,MIUPMT)
     VALUES
           ( InstallationID ,
			 ItemNumber     ,
			 MessageID      ,
			 QtyMessageItem ,
			 ProgramID      ,
			 WorkStationID   ,
			 User           ,
			 DateLastUpdated,
			 TimeLastUpdated );
END;
  /

-- #desc				    Add Receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddReceiptMessage
(
	MessageID          IN NVARCHAR2,
	Description1       IN NVARCHAR2,
	Description2       IN NVARCHAR2,
    Type		       IN NVARCHAR2,
    OneTimeOnly        IN NVARCHAR2,
    Priority           IN DECIMAL,
    EfectiveDate       IN DECIMAL, 
    ExpirationDate     IN DECIMAL,
    MessageText        IN NCLOB,
    ProgramID          IN NVARCHAR2,
    WorkStationID      IN NVARCHAR2,
    User               IN NVARCHAR2,
	DateLastUpdated    IN DECIMAL,
	TimeLastUpdated    IN DECIMAL
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ674219
           (RM$9MID
           ,RMDSC1
           ,RMDSC2
           ,RM$9RMT
           ,RM$9RMUF
           ,RM$9RMP
           ,RMEFTJ
           ,RMEXDJ
           ,RM$9XML
           ,RMPID
           ,RMJOBN
           ,RMUSER
           ,RMUPMJ
           ,RMUPMT)
     VALUES
		   (MessageID ,
			Description1,
			Description2,
			Type,
			OneTimeOnly,
			Priority,
			EfectiveDate, 
			ExpirationDate,
			MessageText,
			ProgramID,
			WorkStationID,
			User,
			DateLastUpdated,
			TimeLastUpdated);
END;
  /

-- #desc							Add drawer Note
-- #bl_class						Premier.POS.RegisterDrawerBatchNote.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param RegisterID				Register ID
-- #param DrawerNumber				Drawer Number
-- #param BatchNumber				Batch Number
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved date
-- #param UserReservedReference		User Reserved ref
-- #param UserId					User Id
-- #param ProgramId					Pregram Id
-- #param WorkStationId				Work Station
-- #param DateUpdated				Date updated
-- #param TimeLastUpdated			Time Last Update

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddRegDrawerBatchNote
(
	RegisterID				 IN NVARCHAR2,
	DrawerNumber			 IN DECIMAL,
	BatchNumber				 IN NVARCHAR2,
	SCUserID				 IN DECIMAL,
	NoteType				 IN NVARCHAR2,
	Notes					 IN NCLOB,
	UserReservedNumber		 IN DECIMAL,
	UserReservedAmount		 IN DECIMAL,
	UserReservedCode		 IN NVARCHAR2,
	UserReservedDate		 IN DECIMAL,
	UserReservedReference	 IN NVARCHAR2,
	UserID					 IN NVARCHAR2,
	ProgramID				 IN NVARCHAR2,
	WorkStationID			 IN NVARCHAR2,
	DateUpdated				 IN DECIMAL,
	TimeLastUpdated			 IN DECIMAL
)
AS
	SequenceNumber DECIMAL := 0;
BEGIN

	--Get max sequence number
	BEGIN
	    SELECT NVL(MAX(DNRCK7),0) + 1 INTO SequenceNumber
	    FROM [SCDATA].FQ674271
	    WHERE TRIM(DN$9REGID) = TRIM(RegisterID) AND DN$9DRAW = DrawerNumber AND TRIM(DNEDBT) = TRIM(BatchNumber);
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    SequenceNumber := NULL;
	END;
	
	INSERT INTO 
	[SCDATA].FQ674271
	(
		DN$9REGID,
		DN$9DRAW,
		DNEDBT,
		DNRCK7,
		DN$9USER,
		DNCLS,
		DN$9HTML,
		DNURRF,
		DNURAB,
		DNURAT,
		DNURCD,
		DNURDT,
		DNUSER,
		DNPID,
		DNJOBN,
		DNUPMJ,	
		DNUPMT		
	)
	VALUES
	(
		RegisterID,
		DrawerNumber,
		BatchNumber,
		SequenceNumber,
		SCUserID,
		NoteType,
		Notes,
		UserReservedReference,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);
END;
  /

-- #desc						Insert a Register 
-- #bl_class					Premier.POS.Register.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID	        Register ID.
-- #param RegisterDescription	Descripcion.
-- #param InstallationID	    Installation ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddRegister
(
	RegisterID				IN NVARCHAR2,
	RegisterDescription     IN NVARCHAR2,
	InstallationID			IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	Password				IN NVARCHAR2,
	GroupID			        IN NVARCHAR2
)
AS
BEGIN
	INSERT INTO 
		[SCDATA].FQ67426
	(
		RG$9REGID,  
		RGDSC1,     
		RG$9INID,
		RGUSER,
		RG$9PWD,
		RGUGRP
	)
	VALUES
	(
		RegisterID, 
		RegisterDescription,  
		InstallationID,
		UserID,
		Password,
		GroupID
	);
END;


  /

-- #desc						Add Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param DateOpened			Date Opened
-- #param TimeOpened			Time Opened	
-- #param UserOpened			User Opened
-- #param DateClosed			Date Closed
-- #param TimeClosed			Time Closed
-- #param UserClosed			User Closed

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_AddRegisterDrawerControl
(
	RegisterID          IN NVARCHAR2,
	DrawerNumber        IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	DateOpened          IN DECIMAL,
	TimeOpened          IN DECIMAL,
	UserOpened          IN DECIMAL,
	DateClosed          IN DECIMAL,
	TimeClosed          IN DECIMAL,
	UserClosed          IN DECIMAL
)
AS
BEGIN

    INSERT INTO
	    [SCDATA].FQ67427
	    (
	    RC$9REGID,
	    RC$9DRAW, 
	    RCEDBT,	
	    RC$9DAO, 
	    RC$9TIO, 
	    RC$9USERO,
	    RC$9DAC, 
	    RC$9TIC, 
	    RC$9USERC
	    )

    VALUES

	    (
	    RegisterID,
	    DrawerNumber,
	    CurrentBatchNumber,
	    DateOpened,
	    TimeOpened,
	    UserOpened,
	    DateClosed,
	    TimeClosed,
	    UserClosed
	    );
END;


  /

-- #desc					Add drawer by register 
-- #bl_class				Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelDrawer
(
	RegisterID      IN NVARCHAR2,
	DrawerNumber    IN DECIMAL
)	
AS
BEGIN
    /*Drawers by Register*/
	DELETE FROM
	    [SCDATA].FQ674261
    WHERE
	    (TRIM(DR$9REGID) = TRIM(RegisterID)) and
	    (DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber);
    /*Register Drawer Control*/
	DELETE FROM  
		[SCDATA].FQ67427
	WHERE 
		(TRIM(RC$9REGID) = TRIM(RegisterID)) and
	    (DrawerNumber IS NULL OR RC$9DRAW = DrawerNumber);		
	/*Drawer Payment*/	    
	DELETE FROM  
		[SCDATA].FQ67428
	WHERE 
		(TRIM(DC$9REGID) = TRIM(RegisterID)) and
	    (DrawerNumber IS NULL OR DC$9DRAW = DrawerNumber);	
	/*Payment Details*/
	DELETE FROM
	    [SCDATA].FQ674281
    WHERE
	    (TRIM(DP$9REGID) = TRIM(RegisterID)) and
	    (DrawerNumber IS NULL OR DP$9DRAW = DrawerNumber);
	/*Cash In/out*/
	DELETE FROM
	    [SCDATA].FQ674282
    WHERE
	    (TRIM(DR$9REGID) = TRIM(RegisterID)) and
	    (DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber);
	
	/*Drawers Notes*/
	DELETE FROM
	    [SCDATA].FQ674271
    WHERE
	    (TRIM(DN$9REGID) = TRIM(RegisterID)) and
	    (DrawerNumber IS NULL OR DN$9DRAW = DrawerNumber);
END;



  /

-- #desc						Delete drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID	        Register ID.
-- #param DrawerNumber	        Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument     Payment Instrument
-- #param CreditCardType		CreditCardType
-- #param CurrencyCode			CurrencyCode

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelDrawerPayment
(
	RegisterID          IN NVARCHAR2,
	DrawerNumber        IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	PaymentInstrument   IN NVARCHAR2,
	CreditCardType		IN NVARCHAR2,
	CurrencyCode		IN NVARCHAR2
)
AS
BEGIN
	DELETE  FROM  
		[SCDATA].FQ67428
	WHERE 
		TRIM(DC$9REGID) = TRIM(RegisterID) AND 
		DC$9DRAW = DrawerNumber AND 
		TRIM(DCEDBT) = TRIM(CurrentBatchNumber) AND 
		(TRIM(PaymentInstrument) IS NULL OR TRIM(DCRYIN) = TRIM(PaymentInstrument))
		AND TRIM(DCCARD) = TRIM(CreditCardType)
		AND TRIM(DCCRCD) = TRIM(CurrencyCode);
END;
  /

-- #desc				    Delete fast button
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line	number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelFastButton
(
	InstallationID  IN NVARCHAR2,
	LineNumber	    IN DECIMAL
)	
AS
BEGIN
    
    DELETE  
    FROM  
	    [SCDATA].FQ67416
    WHERE 
	    FB$9INID = InstallationID AND 
	    FBLNID = LineNumber;
    
    [SCLIBRARY].POS_DelFastButtonLang( InstallationID, LineNumber, NULL);
    
END;
  /

-- #desc					Delete receipts detail 
-- #bl_class				Premier.POS.ReceiptDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ReceiptID		    Receipt ID
-- #param InstallationID    Installation ID
-- #param RegisterID		Register ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelReceiptDetail
(
	ReceiptID       IN NVARCHAR2,
	InstallationID  IN NVARCHAR2,
	RegisterID      IN NVARCHAR2
)
AS
BEGIN
	DELETE FROM  
		[SCDATA].FQ674213
	WHERE 
		    TRIM(RR$9RCID) = TRIM(ReceiptID)
		AND RR$9INID = InstallationID
		AND ((TRIM(RR$9REGID) IS NULL AND TRIM(RegisterID) IS NULL) OR TRIM(RR$9REGID) = TRIM(RegisterID));
END;


  /

-- #desc				    Delete Receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelReceiptMessage
(
	MessageID   IN NVARCHAR2
)
AS
BEGIN

    DELETE FROM [SCDATA].FQ674219
            WHERE (TRIM(RM$9MID)= TRIM(MessageID));
      
    [SCLIBRARY].POS_DelReceiptItemMessage(NULL,NULL,MessageID);
    
END;
  /

-- #desc				Delete a Register 
-- #bl_class			Premier.POS.Register.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param RegisterID	Register ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelRegister
(
	RegisterID  IN NVARCHAR2
)
AS
BEGIN
/*Registers Master*/
    DELETE  
	FROM  
		[SCDATA].FQ67426
	WHERE 
	TRIM(RG$9REGID) = TRIM(RegisterID);
/*Delete All Drawers Associated Information(Drawers by Register, Payment Details, Cash In/out )*/
[SCLIBRARY].POS_DelDrawer(RegisterID,NULL);
		
END;
  /

-- #desc						Delete Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID	        Register ID.
-- #param DrawerNumber	        Drawer ID
-- #param CurrentBatchNumber	Current Batch

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelRegisterDrawerControl
(
	RegisterID          IN NVARCHAR2,
	DrawerNumber        IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2
)
AS
BEGIN
    DELETE FROM 
	    [SCDATA].FQ67427
    WHERE
	    TRIM(RC$9REGID) = TRIM(RegisterID) AND
	    RC$9DRAW = DrawerNumber AND
	    TRIM(RCEDBT) = TRIM(CurrentBatchNumber);
END;


  /

-- #desc							Add money in/out transaction
-- #bl_class						Premier.POS.RegisterDrawerInOutCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param RegisterID				Register ID.
-- #param DrawerNumber				Drawer Number.
-- #param BatchNumber				Batch Number.
-- #param SequenceNumber			Sequence Number.
-- #param LineNumber				Line Number
-- #param PaymentInstrument			Payment Instrument	
-- #param CurrencyCode				Currency Code
-- #param AmountTransact			Amount Transaction
-- #param UserId					User ID	(How execute the transaction)	
-- #param UserReservedReference		User Reserved Reference	
-- #param UserReservedNumber		User Reserved Number	
-- #param UserReservedAmount		User Reserved Amount	
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param ProgramId					Program Id
-- #param WorkStationId				Work Station Id	
-- #param AuditUser					Audit User
-- #param DateUpdated				Date Updated	
-- #param TimeLastUpdated			Time Last Updated

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_ExcAddRegisterDrawerInOut
(
	RegisterID				IN NVARCHAR2,
	DrawerNumber			IN DECIMAL,
	BatchNumber				IN NVARCHAR2,
	SequenceNumber			OUT DECIMAL,
	LineNumber				OUT DECIMAL,
	PaymentInstrument		IN NVARCHAR2,
	CurrencyCode			IN NVARCHAR2,
	AmountTransact			IN DECIMAL,
	UserId					IN DECIMAL,	
	UserReservedReference	IN NVARCHAR2,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	ProgramId				IN NVARCHAR2,
	WorkStationId			IN NVARCHAR2,
	AuditUser				IN NVARCHAR2,	
	DateUpdated				IN DECIMAL,	
	TimeLastUpdated			IN DECIMAL	
)
AS
BEGIN
	SELECT NVL(MAX(DRRCK7), 0) + 1 INTO SequenceNumber FROM [SCDATA].FQ674282
		WHERE TRIM(DR$9REGID) = TRIM(RegisterID) AND DR$9DRAW = DrawerNumber AND TRIM(DREDBT) = TRIM(BatchNumber);
			
	SELECT NVL(MAX(DRLNID), 0) + 1 INTO LineNumber FROM [SCDATA].FQ674282
			WHERE TRIM(DR$9REGID) = TRIM(RegisterID) AND DR$9DRAW = DrawerNumber AND TRIM(DREDBT) = TRIM(BatchNumber) AND DRRCK7 = SequenceNumber;
		
	INSERT INTO
		[SCDATA].FQ674282
		(
			DR$9REGID, 
			DR$9DRAW,  
			DREDBT,
			DRRCK7,  
			DRLNID,   
			DRRYIN,    
			DRCRCD,    
			DR$9AATR,    
			DR$9USER,    
			DRTYPT,
			DRURRF,   
			DRURAB,     
			DRURAT,    
			DRURCD,    
			DRURDT,    
			DRPID,
			DRJOBN,
			DRUSER,
			DRUPMJ,
			DRUPMT
		)
		VALUES
		(
			RegisterID,
			DrawerNumber,
			BatchNumber,
			SequenceNumber,
			LineNumber,
			PaymentInstrument,
			CurrencyCode,
			AmountTransact,
			UserId,
			'', /*Type Transaction*/
			UserReservedReference,
			UserReservedNumber,
			UserReservedAmount,
			UserReservedCode,
			UserReservedDate,
			ProgramId,
			WorkStationId,
			AuditUser,	
			DateUpdated,	
			TimeLastUpdated		
		);
END;  
  /

-- #desc					Read drawer by register 
-- #bl_class				Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_ExcCheckDrawerStatus
(
	RegisterID          IN NVARCHAR2,
	DrawerNumber        IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
    	    DR$9DRST AS Status
        FROM
	        [SCDATA].FQ674261
        WHERE
	        TRIM(DR$9REGID) = TRIM(RegisterID) and
	        DR$9DRAW = DrawerNumber and
	        TRIM(DREDBT) = TRIM(CurrentBatchNumber);
END;
  /

-- #desc						Add money in/out transaction
-- #bl_class					Premier.POS.RegisterDrawerCashLimitCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer Number.
-- #param BatchNumber			Batch Number.
-- #param PaymentInstrument		Payment Instrument.
-- #param TotalPayment			Total Payment.
-- #param CashDrawerLimit		Cash in drawer limit.
-- #param AmountExceed			Amount Exceed.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_ExcCheckRegDrawerCashLimit
(
	RegisterID				IN NVARCHAR2,
	DrawerNumber			IN DECIMAL,
	BatchNumber				IN NVARCHAR2,	
	PaymentInstrument		IN NVARCHAR2,
	TotalPayment			OUT DECIMAL,
	CashDrawerLimit			OUT DECIMAL,
	AmountExceed			OUT DECIMAL	
)
AS
	SumPayments DECIMAL;
	SumInOutTransaction DECIMAL;
BEGIN
	BEGIN
		SELECT SUM(A.DP$9AATR) INTO SumPayments FROM [SCDATA].FQ674281 A
			WHERE  TRIM(A.DP$9REGID) = TRIM(RegisterID) AND  A.DP$9DRAW = DrawerNumber AND TRIM(A.DPEDBT) = TRIM(BatchNumber) AND TRIM(A.DPRYIN) = TRIM(PaymentInstrument);
			EXCEPTION WHEN NO_DATA_FOUND THEN
				SumPayments :=0;
	END;
	BEGIN
		SELECT SUM(A.DR$9AATR) INTO SumInOutTransaction FROM [SCDATA].FQ674282 A
			WHERE  TRIM(A.DR$9REGID) = TRIM(RegisterID) AND  A.DR$9DRAW = DrawerNumber AND TRIM(A.DREDBT) = TRIM(BatchNumber) AND TRIM(A.DRRYIN) = TRIM(PaymentInstrument);
			EXCEPTION WHEN NO_DATA_FOUND THEN
				SumInOutTransaction :=0;
	END;
	BEGIN
		SELECT DR$9AATR INTO CashDrawerLimit FROM [SCDATA].FQ674261 A WHERE TRIM(A.DR$9REGID) = TRIM(RegisterID) AND A.DR$9DRAW = DrawerNumber AND TRIM(A.DREDBT) = TRIM(BatchNumber);
			EXCEPTION WHEN NO_DATA_FOUND THEN
				CashDrawerLimit :=0;
	END;

	CashDrawerLimit :=NVL(CashDrawerLimit,0);

	TotalPayment := NVL((SumPayments + SumInOutTransaction), 0);
	
	IF(CashDrawerLimit = 0 )THEN	
		AmountExceed := 0;
	ELSE	
		AmountExceed := NVL(TotalPayment - CashDrawerLimit, 0);	
	END IF;
	
END;  
  /

-- #desc							Creates a extended payment detail
-- #bl_class						Premier.POS.EnterDrawerPaymentCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param RegisterID				Register ID
-- #param DrawerID					Drawer ID
-- #param BatchNumber				Batch Number
-- #param PaymentInstrument		    Payment Instrument
-- #param CreditCardType			Credit Card Type
-- #param CurrecyCode				Currecy Code
-- #param RoundingAdjustment		Rounding Adjustment
-- #param OrderNumber				Order Number
-- #param OrderType				    Order type
-- #param OrderCompany				Order Company
-- #param PaymentAmount			    Payment Amount
-- #param ProgramId				    Preogram ID
-- #param WorkStationId			    WorkStation ID
-- #param UserId					User ID
-- #param DateUpdated				Date updated
-- #param TimeLastUpdated			Time Updated


CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_ExcEnterDrawerPayment
(
	RegisterID				IN NVARCHAR2,
	DrawerID				IN Decimal,
	BatchNumber			    IN NVARCHAR2,
	PaymentInstrument		IN NVARCHAR2,
	CreditCardType			IN NVARCHAR2,
	CurrecyCode				IN NVARCHAR2,
	RoundingAdjustment		IN Decimal,
	OrderNumber			    IN Decimal,
	OrderType				IN NVARCHAR2,
	OrderCompany			IN NVARCHAR2,
	PaymentAmount			IN Decimal,
	UserID					IN Decimal,
	UserReservedReference   IN NVARCHAR2,
	UserReservedNumber      IN Decimal,
	UserReservedAmount      IN Decimal,
	UserReservedCode        IN NVARCHAR2,
	UserReservedDate        IN Decimal,
	JDEUserId				IN NVARCHAR2,
	ProgramId				IN NVARCHAR2,
	WorkStationId			IN NVARCHAR2,
	DateUpdated			    IN Decimal,
	TimeLastUpdated		    IN Decimal
)	
AS

PaymentID Decimal := 0;

BEGIN


BEGIN
	SELECT MAX (DPRCK7) + 1 into PaymentID FROM 
	    [SCDATA].FQ674281 
    WHERE 
	    TRIM(DP$9REGID) = TRIM(RegisterID) AND
	    DP$9DRAW = DrawerID AND
	    TRIM(DPEDBT) = TRIM(BatchNumber);
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
        PaymentID := NULL; 
	END;
	
	IF PaymentID IS NULL THEN
	PaymentID := 0;
	END IF;
 

INSERT INTO 
	[SCDATA].FQ674281
(
	DP$9REGID,
	DP$9DRAW,
	DPEDBT,
	DPRCK7, 
	DPRYIN,
	DPCARD,
	DPCRCD,
	DPRDAJ,
	DPDOCO,
	DPDCTO,
	DPKCOO,
	DP$9AATR,
	DP$9USER,
	DPURRF,
	DPURAB,
	DPURAT,
	DPURCD,
	DPURDT,
	DPPID,
	DPJOBN,
	DPUSER,
	DPUPMJ,
	DPUPMT
)
VALUES
(
	RegisterID,
	DrawerID,
	BatchNumber,
	PaymentID,
	PaymentInstrument,
	CreditCardType,
	CurrecyCode,
	RoundingAdjustment,
	OrderNumber,
	OrderType,		
	OrderCompany,	
	PaymentAmount,	
	UserID,
	UserReservedReference,
	UserReservedNumber,
	UserReservedAmount,
	UserReservedCode,
	UserReservedDate,
	ProgramId,
	WorkStationId,	
	JDEUserId,			
	DateUpdated,	
	TimeLastUpdated
);

END;	


  /

-- #desc					Count Payments for Register ID
-- #bl_class				Premier.POS.CheckRegisterDrawerTransCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.
-- #param DrawerID			Drawer ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_ExcExistRegDrawerTrans
(
	RegisterID  IN NVARCHAR2,
	DrawerID IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor

)
AS 
    CountTransactions INT;
BEGIN
	SELECT COUNT(*) INTO CountTransactions
		FROM 
			[SCDATA].FQ674281
		WHERE (TRIM(DP$9REGID) = TRIM(RegisterID) AND (DrawerID IS NULL OR TRIM(DP$9DRAW) = TRIM(DrawerID)));
	
	IF (CountTransactions = 0) 
	THEN
		SELECT COUNT(*) INTO CountTransactions
			FROM 
				[SCDATA].FQ674282
			WHERE (TRIM(DR$9REGID) = TRIM(RegisterID) AND (DrawerID IS NULL OR  TRIM(DR$9DRAW) = TRIM(DrawerID)));	            
	END IF;

	OPEN ResultData1 FOR
		SELECT CountTransactions as CountTransactions from SYS.DUAL;
END;
  /

-- #desc						Receipt Copy
-- #bl_class					Premier.POS.ReceiptDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param SourceInstallationID	SourceInstallation ID
-- #param TargetInstallationID	TargetInstallation ID
-- #param ReceiptID				Receipt ID
-- #param SourceRegisterID		SourceRegister ID
-- #param TargetRegisterID		TargetRegister ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_ExcReceiptCopy
(
	SourceInstallationID	IN NVARCHAR2,
	TargetInstallationID    IN NVARCHAR2,
	ReceiptID				IN NVARCHAR2,	
	SourceRegisterID        IN NVARCHAR2,
	TargetRegisterID		IN NVARCHAR2
)
AS
	ExistTemplate int;
BEGIN	
	/*check if template already exist*/
	SELECT COUNT(*) INTO ExistTemplate FROM [SCDATA].FQ674213 
		WHERE  RR$9INID = TargetInstallationID AND 
			   TRIM(RR$9RCID) = TRIM(ReceiptID) AND 
			   ((TRIM(RR$9REGID) IS NULL AND TRIM(TargetRegisterID) IS NULL) OR TRIM(RR$9REGID) = TRIM(TargetRegisterID));
	
	IF(ExistTemplate = 0) THEN
		INSERT INTO [SCDATA].FQ674213(RR$9RCID, RR$9INID, RR$9REGID, RR$9XML, RRPID, RRJOBN, RRUSER, RRUPMJ, RRUPMT)
		(SELECT 
		    RR$9RCID,
			TargetInstallationID,
		    TargetRegisterID,
		    RR$9XML,
		    RRPID,
		    RRJOBN,
		    RRUSER,
		    RRUPMJ,
		    RRUPMT
		FROM [SCDATA].FQ674213
		WHERE  RR$9INID = SourceInstallationID AND
			   TRIM(RR$9RCID) = TRIM(ReceiptID) AND
			   (TRIM(RR$9REGID) IS NULL OR TRIM(RR$9REGID) = TRIM(SourceRegisterID)));
	ELSE 
		UPDATE [SCDATA].FQ674213
			SET	RR$9XML = (SELECT B.RR$9XML
				FROM [SCDATA].FQ674213 B
				WHERE  B.RR$9INID = SourceInstallationID 
				AND TRIM(B.RR$9RCID) = TRIM(ReceiptID)
				AND ((TRIM(B.RR$9REGID) IS NULL AND TRIM(SourceRegisterID) IS NULL) OR TRIM(B.RR$9REGID) = TRIM(SourceRegisterID)))
		WHERE  
				RR$9INID = TargetInstallationID
			AND TRIM(RR$9RCID) = TRIM(ReceiptID)
			AND ((TRIM(RR$9REGID) IS NULL AND TRIM(TargetRegisterID) IS NULL) OR TRIM(RR$9REGID) = TRIM(TargetRegisterID));
    END IF;
END;
  /

-- #desc					Get Drawer Accounting Batch No
-- #bl_class				Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawerAccountingBatchNo
(
    RegisterID      IN NVARCHAR2,
	DrawerNumber    IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT	      
	        DRURAT AccountingBatchNumber
        FROM
	        [SCDATA].FQ674261
        WHERE
	        (TRIM(RegisterID) IS NULL OR TRIM(DR$9REGID) = TRIM(RegisterID)) AND
	        (DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber);
END;

 
  /

-- #desc					Read drawer info
-- #bl_class				Premier.POS.DrawerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number. 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawerInfo
(
    RegisterID      IN NCHAR,
	DrawerNumber    IN NUMBER,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT     
	        A.DR$9REGID AS RegisterID, 
	        A.DR$9DRAW AS DrawerNumber, 
	        A.DR$9DRST AS Status, 
	        A.DR$9DRMUL AS AllowMultipleUsers, 
	        A.DREDBT AS CurrentBatchNumber, 
	        B.RC$9DAO AS DateOpened, 
	        B.RC$9TIO AS TimeOpened, 
	        B.RC$9USERO AS UserOpened, 
	        B.RC$9DAC AS DateClosed, 
	        B.RC$9TIC AS TimeClosed, 
	        B.RC$9USERC AS UserClosed,
			A.DRURAT AS AccountingBatchNumber
        FROM         
	        [SCDATA].FQ674261 A 
				LEFT OUTER JOIN [SCDATA].FQ67427 B
			ON B.RC$9REGID = A.DR$9REGID  
				AND B.RC$9DRAW = A.DR$9DRAW  
				AND B.RCEDBT = A.DREDBT         

        WHERE  A.DR$9REGID = RegisterID
			AND A.DR$9DRAW = DrawerNumber

        ORDER BY A.DR$9DRAW;
END;
  /

-- #desc							Read sum (RUAG ) 
-- #bl_class						Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AccountingBatchNumber		Accounting Batch Number.
-- #param EdiBatchNumber			Edi Batch Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawerInvoicePaidTotals
(
    AccountingBatchNumber   IN DECIMAL,
    EdiBatchNumber			IN NVARCHAR2,	
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT SUM(RUAG) AS InvoiceTotalAmountPaid,
		   COUNT(*) AS TotalDoc
		FROM
	        [SCDATA].F03B13Z1
        WHERE
	        RUICU = AccountingBatchNumber AND
			TRIM(RUEDBT) = TRIM(EdiBatchNumber);
END;

 
  /

-- #desc					Read drawer info
-- #bl_class				Premier.POS.DrawerList.cs 
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawerList
(
    RegisterID  IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT     
	        A.DR$9REGID AS RegisterID, 
	        A.DR$9DRAW AS DrawerNumber, 
	        A.DR$9DRST AS Status, 
	        A.DR$9DRMUL AS AllowMultipleUsers, 
	        A.DREDBT AS CurrentBatchNumber, 
	        B.RC$9DAO AS DateOpened, 
	        B.RC$9TIO AS TimeOpened, 
	        B.RC$9USERO AS UserOpened, 
	        B.RC$9DAC AS DateClosed, 
	        B.RC$9TIC AS TimeClosed, 
	        B.RC$9USERC AS UserClosed,
			A.DRURAT AS AccountingBatchNumber
        FROM         
	        [SCDATA].FQ674261 A,
	        [SCDATA].FQ67427 B
        WHERE
                A.DR$9REGID = B.RC$9REGID(+) 
	        AND A.DR$9DRAW = B.RC$9DRAW(+)
	        AND A.DREDBT = B.RCEDBT(+)
	        AND (TRIM(RegisterID) IS NULL OR TRIM(A.DR$9REGID) = TRIM(RegisterID))
        ORDER BY A.DR$9DRAW;
END;
	

  /

-- #desc						Read Currency codes of Detail of Drawer Payment, read only info
-- #bl_class					Premier.POS.DrawerPaymentsCurrencyList
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterId			Register Id
-- #param DrawerNumber			Drawer Number.
-- #param BatchNumber			Batch Number
-- #param PaymentInstrument		Payment Instrument

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawerPayDetCurrencyLst
(
	RegisterID				IN NVARCHAR2,
	DrawerNumber			IN DECIMAL,
	BatchNumber				IN NVARCHAR2,	
	PaymentInstrument		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor	
)
AS
BEGIN
	OPEN ResultData1 FOR
	   SELECT Distinct			
			A.DPCRCD	AS CurrencyCode,
			B.CVDL01    AS CurrencyDesc
		FROM
			[SCDATA].FQ674281 A 				-- Drawer Payment Detail List
			LEFT OUTER JOIN [SCDATA].F0013 B
			ON B.CVCRCD = A.DPCRCD
		WHERE 	(TRIM(A.DP$9REGID) = TRIM(RegisterId))
			AND	(A.DP$9DRAW	 = DrawerNumber)
			AND (TRIM(A.DPEDBT)	 = TRIM(BatchNumber))
			AND (TRIM(A.DPRYIN)	 = TRIM(PaymentInstrument));
END;   
  /

-- #desc						Read Detail of Drawer Payment, read only info
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterId			RegisterId
-- #param DrawerNumber			DrawerNumber.
-- #param BatchNumber			batchNumber
-- #param PaymentInstrument	    PaymentInstrument
-- #param OrderType			    OrderType
-- #param OrderNumber			OrderNumber
-- #param JulianDateFrom		JulianDateFrom
-- #param JulianDateTo			JulianDateTo
-- #param JulianTimeFrom		JulianTimeFrom
-- #param JulianTimeTo			JulianTimeTo
-- #param PageIndex			    Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetDrawerPaymentDetailList
(
	RegisterId			IN NCHAR,
	DrawerNumber		IN NUMBER,
	BatchNumber		    IN NCHAR,
	PaymentInstrument	IN NCHAR,
	OrderType			IN NCHAR,
	OrderNumber		    IN NUMBER,
	UserID				IN NUMBER,
	JulianDateFrom		IN NUMBER,
	JulianDateTo		IN NUMBER,
	JulianTimeFrom		IN NUMBER,
	JulianTimeTo		IN NUMBER,
	PageIndex			IN INT,
    PageSize			IN INT,
    ResultData1         OUT   GLOBALPKG.refcursor
)
AS
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
    
	OPEN ResultData1 FOR
    WITH CTE AS (
		SELECT
			DP$9REGID	AS RegisterID,
			DP$9DRAW	AS DrawerNumber,
			DPEDBT		AS BatchNumber,
			DPRCK7		AS SecuenceNumber, 
			DPRYIN		AS PaymentInstrument, 
			DPKCOO		AS OrderCompany,
			DPDCTO		AS OrderType,
			DPDOCO		AS OrderNumber,
			DPCRCD		AS Currency,
			DP$9AATR    AS TransactionAmount, 
			DP$9USER	AS UserID,
			DPUPMJ		AS DateUpdated,
			DPUPMT		AS TimeUpdated,
			ROW_NUMBER() OVER (ORDER BY A.DPUPMJ DESC, A.DPUPMT DESC) AS RNUM
		FROM
			[SCDATA].FQ674281 A 				-- Drawer Payment Detail List
		WHERE 
				(A.DP$9REGID= RegisterId)
			AND	(A.DP$9DRAW	= DrawerNumber)
			AND (A.DPEDBT	= BatchNumber)
			AND (PaymentInstrument = '*' OR A.DPRYIN = PaymentInstrument)
			AND (OrderNumber IS NULL OR A.DPDOCO = OrderNumber)
			AND (OrderType = '*' OR A.DPDCTO = OrderType)
			AND (JulianDateFrom = 0 OR JulianDateTo = 0 OR (A.DPUPMJ >= JulianDateFrom AND A.DPUPMJ <= JulianDateTo))
			AND (JulianTimeFrom = 0 OR JulianTimeTo = 0 OR (A.DPUPMT >= JulianTimeFrom AND A.DPUPMT <= JulianTimeTo))
			AND (UserID IS NULL OR DP$9USER = UserID) 
	)
	SELECT 
		A.RegisterID,
		A.DrawerNumber,
		A.BatchNumber,
		A.SecuenceNumber, 
		A.PaymentInstrument, 
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY', A.PaymentInstrument,'*') AS PaymentInstrumentDesc,
		A.OrderCompany,
		A.OrderType,
		A.OrderNumber,
		A.Currency,
		A.TransactionAmount, 
		A.UserID,
		A.DateUpdated,
		A.TimeUpdated,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A
	WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
END;
  /

-- #desc					Get fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line	number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetFastButton
(
	InstallationID  IN NVARCHAR2,
	LineNumber	    IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
	    SELECT 
		    FBHED.FB$9INID InstallationID,   
		    FBHED.FBLNID LineNumber,   
		    FBHED.FBITM ItemNumber,   
		    FBHED.FBUOM UnitOfMeasure,   
		    FBHED.FBUORG Quantity,  
		    FBHED.FBDSC1 AS ItemDescription1,  
		    FBHED.FBDSC2 AS ItemDescription2  

	     FROM 
		    [SCDATA].FQ67416 FBHED  	  
	     WHERE       	   
		    FBHED.FB$9INID = InstallationID  AND 
		    FBHED.FBLNID = LineNumber;
    		
	    [SCLIBRARY].POS_GetFastButtonLangs(InstallationID, LineNumber, null, ResultData2);
END;

  /
-- #desc						Read fast buttons list 
-- #bl_class					Premier.POS.FastButtonList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID 
-- #param ItemNumber	
-- #param Description1 
-- #param LangPref 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetFastButtonList
(
	InstallationID  IN NCHAR,
	ItemNumber	    IN NUMBER,
	Description1    IN NCHAR,
	LangPref        IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN

    OPEN ResultData1 FOR
	WITH CTE_FastButton AS
		(
        SELECT 
	        FBHED.FB$9INID InstallationID,   
            FBHED.FBLNID LineNumber,   
            FBHED.FBITM ItemNumber,   
            FBHED.FBUOM UnitOfMeasure,   
            FBHED.FBUORG Quantity,  
            NVL(FBHEDLNG.FBDSC1, FBHED.FBDSC1) AS ItemDescription1,  
            NVL(FBHEDLNG.FBDSC2, FBHED.FBDSC2) AS ItemDescription2,
			IM.IMLITM AS LongItemNumber,
			IM.IMAITM AS AuxItemNumber,
			IM.IMSTKT StockingType,
			IM.IMLNTY LineTypeControl
         FROM 
            [SCDATA].FQ67416 FBHED  -- Item Fast Master  
            LEFT JOIN [SCDATA].FQ67416L FBHEDLNG  -- Item Fast Language Master 
				ON FBHEDLNG.FB$9INID = FBHED.FB$9INID
				AND FBHEDLNG.FBLNID = FBHED.FBLNID  
				AND FBHEDLNG.FBLNGP = LangPref
			INNER JOIN [SCDATA].F4101 IM
				ON IM.IMITM = FBHED.FBITM 
         WHERE (InstallationID = '*' OR FBHED.FB$9INID = InstallationID)    -- Installation Id filter  
            AND (ItemNumber IS NULL OR FBHED.FBITM = ItemNumber)  -- Item Number filter  
            AND (Description1 = '*' OR 
		        (FBHEDLNG.FBDSC1 IS NULL AND UPPER(FBHED.FBDSC1) LIKE '%' || Description1 || '%') OR
		        (FBHEDLNG.FBDSC1 IS NOT NULL AND UPPER(FBHEDLNG.FBDSC1) LIKE '%' || Description1 || '%'))  -- Description filter  
        ),
		CTE_Filter_MCU AS
		(
			SELECT DISTINCT
				A.InstallationID,   
				A.LineNumber,   
				A.ItemNumber,   
				A.UnitOfMeasure,   
				A.Quantity,  
				A.ItemDescription1,  
				A.ItemDescription2,
				A.LongItemNumber,
				A.AuxItemNumber
			FROM CTE_FastButton A
			INNER JOIN [SCDATA].F40205 C /*Line Type Control Table*/
				ON C.LFLNTY = A.LineTypeControl
			INNER JOIN [SCDATA].FQ679910 E	/*BranchPlant by Installation*/
				ON E.BI$9INID = InstallationID 		
			INNER JOIN [SCDATA].F4102 B		/*Item Master by BranchPlant*/
				ON B.IBITM = ItemNumber
				AND B.IBMCU = E.BIMCU
			WHERE 
				A.StockingType <> 'N' AND (C.LFIVI = 'Y' OR C.LFIVI = 'D')		/*Inventory Interface -- Stock Items*/
			UNION ALL
			SELECT  
				A.InstallationID,   
				A.LineNumber,   
				A.ItemNumber,   
				A.UnitOfMeasure,   
				A.Quantity,  
				A.ItemDescription1,  
				A.ItemDescription2,
				A.LongItemNumber,
				A.AuxItemNumber
			FROM
				CTE_FastButton A
			INNER JOIN [SCDATA].F40205 C /*Line Type Control Table*/
				ON C.LFLNTY = A.LineTypeControl
			WHERE
				A.StockingType = 'N' OR (C.LFIVI <> 'Y' AND C.LFIVI <> 'D') /*Inventory Interface-- Non stock*/
		)

		SELECT 
			A.InstallationID,   
			A.LineNumber,   
			A.ItemNumber,   
			A.UnitOfMeasure,   
			A.Quantity,  
			A.ItemDescription1,  
			A.ItemDescription2,
			A.LongItemNumber,
			A.AuxItemNumber,
			'Y' IsValidBrancPlant
		FROM CTE_Filter_MCU A
		UNION
		SELECT  
			A.InstallationID,   
			A.LineNumber,   
			A.ItemNumber,   
			A.UnitOfMeasure,   
			A.Quantity,  
			A.ItemDescription1,  
			A.ItemDescription2,
			A.LongItemNumber,
			A.AuxItemNumber,
			'N' IsValidBrancPlant
		FROM  CTE_FastButton A
		LEFT JOIN CTE_Filter_MCU B 
			ON (A.ItemNumber = B.ItemNumber)
		WHERE 
			B.ItemNumber IS NULL
		ORDER BY LineNumber ASC;
END;
  /

-- #desc				            Get Installation License Information
-- #bl_class			            Premier.POS.License.StoreLicenseAuthentication.cs
-- #db_dependencies		            N/A
-- #db_references		            N/A

-- #param InstallationID			Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetInstallationLicenseAuth
(
    InstallationID  IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        IN$9HTML AS XMLFile
        FROM [SCDATA].FQ670001
        WHERE InstallationID = IN$9INID;
END;
  /

-- #desc							Get receipt INFO
-- #bl_class						Premier.POS.ReceiptHeader.cs
-- #db_dependencies					POS_GetReceiptDetail
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param ReceiptID					Receipt ID
-- #param RegisterID				Register ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetReceipt
(
	InstallationID  IN NVARCHAR2,
	RegisterID      IN NVARCHAR2,
	ReceiptID       IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN

    OPEN ResultData1 FOR
	    SELECT 
		    A.RP$9RCID ReceiptID, 
		    A.RPDSC1 Description, 
            A.RPPID ProgramId,    
            A.RPJOBN WorkStationId, 
            A.RPUSER UserId, 
            A.RPUPMJ DateLastUpdated,   
            A.RPUPMT TimeLastUpdated
        FROM 
		    [SCDATA].FQ674212 A
	    WHERE 
		    (TRIM(ReceiptID) IS NULL OR TRIM(A.RP$9RCID) = TRIM(ReceiptID));
    		
	---Get Receipt detail
	[SCLIBRARY].POS_GetReceiptDetail(InstallationID, RegisterID, ReceiptID, ResultData2);
	
END;
  /
-- #desc				    POS_GetReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessages.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param ItemNumber		Item Number.
-- #param QtyMessageItem    Qty Message Item

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetReceiptItemMessage
(
    InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL,
    MessageID       IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
           MI$9INID InstallationID 
          ,MIITM    ItemNumber 
          ,MI$9MID  MessageID
          ,MI$9IMQY QtyMessageItem
          ,MIPID    ProgramID
          ,MIJOBN	  WorkStatioID
          ,MIUSER   UserID
          ,MIUPMJ   DateLastUpdated
          ,MIUPMT   TimeLastUpdated
        FROM  [SCDATA].FQ674220
        WHERE (TRIM(InstallationID) = '*' OR MI$9INID = InstallationID) AND
           (ItemNumber= 0 OR MIITM = ItemNumber) AND
           (TRIM(MessageID) = '*' OR TRIM(MI$9MID) = TRIM(MessageID));
END;




  /
-- #desc					Get receipts list 
-- #bl_class				Premier.POS.ReceiptList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param ReceiptID			Receipt ID
-- #param RegisterID		Register ID
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetReceiptList
(
	InstallationID  IN NCHAR,
	RegisterID      IN NCHAR,
	ReceiptID       IN NCHAR,
	Description     IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
		    A.RR$9RCID ReceiptID,
		    B.RPDSC1 Description,
	        A.RR$9INID InstallationID,
	        A.RR$9REGID RegisterID
	    FROM 
		    [SCDATA].FQ674213 A
		INNER JOIN [SCDATA].FQ674212 B /* Receipts Header */
			ON B.RP$9RCID = A.RR$9RCID
	    WHERE 
	        (InstallationID = '*' OR A.RR$9INID = InstallationID)  
		    AND (RegisterID = '*'  OR A.RR$9REGID = RegisterID) 
		    AND (ReceiptID = '*' OR A.RR$9RCID LIKE ('%' || ReceiptID || '%')) -- Receipt Code filter   
		    AND (Description = '*' OR UPPER(B.RPDSC1) LIKE ('%' || Description || '%'));
END;

  /

-- #desc				    Update Receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies		    POS_GetReceiptDetail
-- #db_references		    N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetReceiptMessage
(
	MessageID      IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
           RM$9MID as MessageID 
          ,RMDSC1 as Description1
          ,RMDSC2 as Description2
          ,RM$9RMT as Type
          ,RM$9RMUF as OneTimeOnly
          ,RM$9RMP as Priority
          ,RMEFTJ as EfectiveDate
          ,RMEXDJ as ExpirationDate
          ,RM$9XML as MessageText
          ,RMPID  as ProgramID
          ,RMJOBN  as WorkStatioID
          ,RMUSER  as UserID
          ,RMUPMJ  as DateLastUpdated
          ,RMUPMT  as TimeLastUpdated
        FROM  [SCDATA].FQ674219
        WHERE  
               TRIM(RM$9MID)= TRIM(MessageID);
               
END;

  /

-- #desc						POS_GetReceiptMessageItemList
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param MessageID				MessageID.
-- #param ItemNumber			Item Number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetReceiptMessageItemList
(
	InstallationID  IN NVARCHAR2,
	MessageID       IN NVARCHAR2,
	ItemNumber      IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT   
		    RM.RM$9MID   AS MessageID, 
		    MI.MI$9INID  AS Installation, 
		    IM.IMDSC1      as Item_Description, 
		    RM.RMDSC1    as Message_Description, 
		    IM.IMAITM      AS Item_Number
        FROM      
		    [SCDATA].FQ674219 RM, 
		    [SCDATA].FQ674220 MI,  
		    [SCDATA].F4101 IM 
        WHERE
                RM.RM$9MID = MI.MI$9MID
            AND CAST(MI.MIITM AS NVARCHAR2(50)) = CAST(IM.IMAITM AS NVARCHAR2(50))
	        AND MI.MI$9INID = InstallationID
		    AND (TRIM(MessageID) = '*' OR TRIM(RM.RM$9MID) = TRIM(MessageID))
	        AND (TRIM(ItemNumber) = '*' OR TRIM(IM.IMAITM) = TRIM(ItemNumber));
END;
  /

-- #desc				    Get Message Receipt List
-- #bl_class			    Premier.POS.ReceiptMessageList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetReceiptMessageList
(
	MessageID       IN NCHAR,
	Description1    IN NCHAR,
	Description2    IN NCHAR,
    "Type"		    IN NCHAR,
    OneTimeOnly     IN NCHAR,
    Priority        IN NUMBER,
    EffectiveDate   IN NUMBER,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
           RM$9MID AS MessageID 
          ,RMDSC1  AS Description1
          ,RMDSC2  AS Description2
          ,RM$9RMT AS "Type"
          ,RM$9RMUF AS OneTimeOnly
          ,RM$9RMP AS Priority
          ,RMEFTJ  AS EfectiveDate
          ,RMEXDJ AS ExpirationDate
          ,RM$9XML AS MessageText
          ,RMPID AS ProgramID
          ,RMJOBN AS WorkStatioID
          ,RMUSER AS UserID
          ,RMUPMJ AS DateLastUpdated
          ,RMUPMT AS TimeLastUpdated
        FROM [SCDATA].FQ674219
        WHERE  
            (MessageID = N'*' OR RM$9MID LIKE N'%' || MessageID||'%') AND
	        (Description1 = N'*' OR UPPER(RMDSC1) LIKE N'%' || Description1 ||'%') AND
    	    (Description2 = N'*' OR UPPER(RMDSC2) LIKE N'%' || Description2 ||'%') AND
		    ("Type" = N'*' OR RM$9RMT = "Type") AND
		    (OneTimeOnly = N'*' OR RM$9RMUF = OneTimeOnly) AND
		    (Priority = 0 OR RM$9RMP = Priority) AND
		    (EffectiveDate = 0 OR (RMEFTJ <= EffectiveDate AND EffectiveDate <= RMEXDJ));
END;
  /

-- #desc						Get Register Drawer Batch List
-- #bl_class					Premier.POS.RegisterDrawerBatchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID
-- #param DrawerNumber			Drawer ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegDrawerBatchList
(
	RegisterID			IN NVARCHAR2,
	DrawerNumber		IN DECIMAL,
	ResultData1			OUT GLOBALPKG.refcursor
)

AS

	currentDate DECIMAL := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	currentTime DECIMAL := TO_NUMBER(TO_CHAR(SYSDATE, 'hh24miss'));

BEGIN
	
    OPEN ResultData1 FOR
	
	SELECT BatchNumber, DateOpened, TimeOpened, UserOpened, DateClosed, TimeClosed, UserClosed 
	FROM 
	(SELECT DISTINCT
		A.RCEDBT		AS BatchNumber,
		A.RC$9DAO		AS DateOpened,   
		A.RC$9TIO		AS TimeOpened,   
		A.RC$9USERO		AS UserOpened,    
		A.RC$9DAC		AS DateClosed, 
		A.RC$9TIC		AS TimeClosed,      
		A.RC$9USERC		AS UserClosed,
		(CASE A.RC$9DAC WHEN 0 THEN currentDate ELSE A.RC$9DAC END) AS RegDrawerDate,
		(CASE A.RC$9TIC WHEN 0 THEN currentTime ELSE A.RC$9TIC END) AS RegDrawerTime
		FROM
			[SCDATA].FQ67427 A
		WHERE
			TRIM(A.RC$9REGID) = TRIM(RegisterID) AND
			A.RC$9DRAW = DrawerNumber) B
	ORDER BY B.RegDrawerDate DESC, B.RegDrawerTime DESC;
END;
  /

-- #desc					Get Drawer Note List
-- #bl_class				Premier.POS.RegisterDrawerBatchNoteList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID
-- #param DrawerNumber		DrawerNumber
-- #param BatchNumber		BatchNumber
-- #param SCUserID			SCUserID
-- #param NoteType			NoteType
-- #param JulianDateFrom	JulianDateFrom
-- #param JulianDateTo		JulianDateTo
-- #param JulianTimeFrom	JulianTimeFrom
-- #param JulianTimeTo		JulianTimeTo

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegDrawerBatchNoteLst
(
	RegisterID				IN NCHAR,
	DrawerNumber			IN NUMBER,
	BatchNumber				IN NCHAR,
	SCUserID				IN NUMBER,
	NoteType				IN NCHAR,
	JulianDateFrom			IN NUMBER,
	JulianDateTo			IN NUMBER,
	JulianTimeFrom			IN NUMBER,
	JulianTimeTo			IN NUMBER,
	PageIndex				IN INT,
    PageSize				IN INT,
	ResultData1				OUT GLOBALPKG.refcursor
)
AS
	--Paging
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
	
	BEGIN

		OPEN ResultData1 FOR
		WITH CTE AS (
			SELECT     
				A.DN$9REGID		AS RegisterID, 
				A.DN$9DRAW		AS DrawerNumber, 
				A.DNEDBT		AS BatchNumber, 
				A.DNRCK7		AS SequenceNumber,
				A.DN$9USER		AS SCUserID,
				A.DNCLS			AS NoteType,
				A.DN$9HTML		AS Notes,
				A.DNUPMJ		AS DateUpdated, 
				A.DNUPMT		AS TimeOfDay,
				ROW_NUMBER() OVER (ORDER BY A.DNUPMJ DESC, A.DNUPMT DESC) AS RNUM,
				COUNT(1) OVER () AS TotalRowCount
			FROM
				[SCDATA].FQ674271 A
			WHERE
				A.DN$9REGID = RegisterID
				AND	(A.DN$9DRAW	= DrawerNumber)
				AND (BatchNumber = '*' OR A.DNEDBT = BatchNumber)
				AND (SCUserID IS NULL OR A.DN$9USER = SCUserID)
				AND (NoteType = '*' OR A.DNCLS = NoteType)
				AND (JulianDateFrom = 0 OR JulianDateTo = 0 OR (A.DNUPMJ >= JulianDateFrom AND A.DNUPMJ <= JulianDateTo))
				AND (JulianTimeFrom = 0 OR JulianTimeTo = 0 OR (A.DNUPMT >= JulianTimeFrom AND A.DNUPMT <= JulianTimeTo))
		)
		SELECT 
			A.RegisterID, 
			A.DrawerNumber, 
			A.BatchNumber, 
			A.SequenceNumber,
			A.SCUserID,
			A.NoteType,
			A.Notes,
			A.DateUpdated, 
			A.TimeOfDay,
			A.TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

END;
  /

-- #desc				Read Register 
-- #bl_class			Premier.POS.Register.cs
-- #db_dependencies		POS_GetDrawer
-- #db_references		N/A

-- #param RegisterID	Register ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegister
(
	RegisterID  IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN

    OPEN ResultData1 FOR
	    SELECT 
		    RG$9REGID   as RegisterID, 
		    RGDSC1      as RegisterDescription, 
		    RG$9INID    as InstallationID,
		    RGUSER      as E1User,
		    RG$9PWD     as E1Password,
		    RGUGRP      as E1Group
	    FROM 
		    [SCDATA].FQ67426 A
	    WHERE 
		    (TRIM(RegisterID) IS NULL OR TRIM(A.RG$9REGID) = TRIM(RegisterID));

    --Get Drawer by register
    [SCLIBRARY].POS_GetDrawer(RegisterID,null,ResultData2);
    
END;
  /

-- #desc						Read Cash In/Out transactions
-- #bl_class					Premier.POS.RegisterDrawerCashInOutList 
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegisterDrawerCashIOLst
(
    RegisterID			IN NVARCHAR2,
	DrawerNumber		IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
			A.DR$9USER AS UserId,
			A.DRUPMJ AS TransactionDate,
			A.DRUPMT AS TransactionTime,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',A.DRRYIN,'*') AS PaymentInstrumentDesc,
			A.DRCRCD AS CurrencyCode,
			A.DR$9AATR AS TransactionAmount
        FROM
	        [SCDATA].FQ674282 A
        WHERE
	         TRIM(DR$9REGID) = TRIM(RegisterID) AND
	         TRIM(DR$9DRAW) = TRIM(DrawerNumber) AND
	         TRIM(A.DREDBT) = TRIM(CurrentBatchNumber)
	    ORDER BY A.DRUPMJ, A.DRUPMT ASC;
END;

 
  /

-- #desc						Reads Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegisterDrawerControl
(
	InstallationID		IN NVARCHAR2,
	RegisterID          IN NVARCHAR2,
	DrawerNumber        IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    
    OPEN ResultData1 FOR
        SELECT 
	        RC$9REGID AS RegisterID,
	        RC$9DRAW AS DrawerNumber,
	        RCEDBT	AS CurrentBatchNumber,  
	        RC$9DAO AS  DateOpened,
	        RC$9TIO AS  TimeOpened,
	        RC$9USERO AS	UserOpened,
	        RC$9DAC AS  DateClosed,
	        RC$9TIC AS  TimeClosed,
	        RC$9USERC AS UserClosed
        FROM
	        [SCDATA].FQ67427
        WHERE
	        (TRIM(RegisterID) IS NULL OR TRIM(RC$9REGID) = RegisterID) AND
	        (DrawerNumber IS NULL OR RC$9DRAW = DrawerNumber) AND
	        (TRIM(CurrentBatchNumber) IS NULL OR TRIM(RCEDBT) = TRIM(CurrentBatchNumber));

        [SCLIBRARY].POS_GetDrawerPayment(InstallationID,RegisterID,DrawerNumber,CurrentBatchNumber, NULL,ResultData2);
END;
  /

-- #desc							Get Licenses Information
-- #bl_class						Premier.POS.Licenses.RegisterLicenseAuthentication.cs
-- #db_references					N/A

-- #param InstallationID			Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegisterLicenseAuth
(
    InstallationID  IN NVARCHAR2,
    RegisterId      IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
	    SELECT 
			RG$9SMS XMLFile
		FROM
		    [SCDATA].FQ67426
	WHERE 
		TRIM(RG$9REGID) = TRIM(RegisterID) 
		AND RG$9INID = InstallationID;
END;
  /

-- #desc					Read Register list.
-- #bl_class				Premier.POS.RegisterList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegistersList
(
    InstallationID IN NVARCHAR2,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT  
	        RG$9REGID as RegisterID, 
	        RGDSC1 as Description
	    FROM 
	        [SCDATA].FQ67426 A
        WHERE 
	        (TRIM(InstallationID) = '*' OR A.RG$9INID = InstallationID);
END;

  /

-- #desc						Update drawer by register 
-- #bl_class					Premier.POS.Drawer.cs , register.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID	        Register ID.
-- #param DrawerNumber          Drawer Number.
-- #param RegisterID	        Register ID			
-- #param DrawerNumber		    Drawer Number	
-- #param Status			    Status
-- #param CurrentBatchNumber	Batch Number	
-- #param UserReservedReference	User Reserved ref.
-- #param UserReservedNumber	User Reserved Number
-- #param UserReservedAmount	User Reserved Amount
-- #param UserReservedCode		User Reserved Code
-- #param UserReservedDate		User Reserved date
-- #param CashDrawerLimit		Cash in drawer limit
-- #param ProgramId				Pregram Id
-- #param workStationId	        Work Station		
-- #param UserId				User Id
-- #param dateUpdated		    Date updated
-- #param TimeLastUpdated		Time Last Update

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdDrawer
(
	RegisterID				IN NVARCHAR2,
	DrawerNumber			IN DECIMAL,
	Status					IN NVARCHAR2,
	AllowMultipleUsers		IN NVARCHAR2,
	CurrentBatchNumber		IN NVARCHAR2,
	UserReservedReference	IN NVARCHAR2,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	CashDrawerLimit			IN DECIMAL,
	ProgramId				IN NVARCHAR2,
	WorkStationId			IN NVARCHAR2,
	UserId					IN NVARCHAR2,	
	DateUpdated			    IN DECIMAL,
	TimeLastUpdated		    IN DECIMAL
)
AS
BEGIN
    UPDATE
	    [SCDATA].FQ674261
    SET	
	    DR$9DRST = Status,
	    DR$9DRMUL = AllowMultipleUsers,
	    DREDBT = CurrentBatchNumber,
	    DRURRF = UserReservedReference,
	    DRURAB = UserReservedNumber,
	    DRURAT = UserReservedAmount,
	    DRURCD = UserReservedCode,
	    DRURDT = UserReservedDate,
	    DR$9AATR = CashDrawerLimit,
	    DRPID =  ProgramID,
	    DRJOBN = WorkStationId,
	    DRUSER = UserId,
	    DRUPMJ = DateUpdated,
	    DRUPMT = TimeLastUpdated
    WHERE
	    TRIM(DR$9REGID) = TRIM(RegisterID) AND
	    DR$9DRAW = DrawerNumber;
END;
  /

-- #desc					Update Drawer control status 
-- #bl_class				Premier.POS.Drawer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.
-- #param CurrentBatch		Number batch Number
-- #param Status			Drawer Status 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdDrawerControlStatus
(
	RegisterID          IN NVARCHAR2,
	DrawerNumber        IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	Status	            IN NVARCHAR2
)	
AS
BEGIN
	UPDATE
		[SCDATA].FQ674261
	SET
		 DR$9DRST = Status,
		 DREDBT = CurrentBatchNumber,
		 DRURAT = 0    /*Accounting Batch Number*/
	WHERE
		TRIM(DR$9REGID) = TRIM(RegisterID) and
		DR$9DRAW = DrawerNumber;
END;		
		


  /

-- #desc						Update Drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument		Payment instrument
-- #param CreditCardType		Credit Card Type
-- #param CurrencyCode			Currency Code
-- #param OpeningBalance		Opening Balance
-- #param SumOfTransactions		Sum of Trans.
-- #param TotalsPerCashier		Totals per Cashier
-- #param LeftInDrawer			Left in Drawer


CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdDrawerPayment
(
	RegisterID          IN NVARCHAR2,
	DrawerNumber	    IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	PaymentInstrument   IN NVARCHAR2,
	CreditCardType		IN NVARCHAR2,
	CurrencyCode		IN NVARCHAR2,
	OpeningBalance      IN DECIMAL,
	SumOfTransactions   IN DECIMAL,
	TotalsPerCashier    IN DECIMAL,
	LeftInDrawer        IN DECIMAL,
	UserId				IN NVARCHAR2,   
	ProgramId			IN NVARCHAR2,
	WorkstationId		IN NVARCHAR2,  
	DateUpdated			IN DECIMAL,
	TimeOfDay			IN DECIMAL
)
AS
BEGIN
    UPDATE 
		[SCDATA].FQ67428
	SET 
		DC$9AAOB = OpeningBalance,
	    DC$9AATR = SumOfTransactions,
	    DC$9AACS = TotalsPerCashier,
	    DC$9AALF = LeftInDrawer,
	    DCUSER	 = UserId,
		DCPID	 = ProgramId,
		DCJOBN	 = WorkstationId,
		DCUPMJ	 = DateUpdated,
		DCUPMT	 = TimeOfDay 
    WHERE 
		TRIM(DC$9REGID) = TRIM(RegisterID) AND 
		DC$9DRAW = DrawerNumber AND 
		TRIM(DCEDBT) = TRIM(CurrentBatchNumber) AND 
		TRIM(DCRYIN) = TRIM(PaymentInstrument);
END;

  /

-- #desc					Update fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line	
-- #param ItemNumber		Item number
-- #param UnitOfMeasure     UOM
-- #param Quantity			Quantity
-- #param Description1		Description 1
-- #param Description2		Description 2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdFastButton
(
	InstallationID      IN NVARCHAR2,
	LineNumber	        IN DECIMAL,
	ItemNumber          IN DECIMAL,
	UnitOfMeasure       IN NVARCHAR2,
	Quantity	        IN DECIMAL,
	ItemDescription1    IN NVARCHAR2,
	ItemDescription2    IN NVARCHAR2
)
AS
BEGIN	
	UPDATE 
		[SCDATA].FQ67416
	SET  
		FBITM = ItemNumber,
	    FBUOM = UnitOfMeasure,
	    FBUORG = Quantity,
	    FBDSC1 = ItemDescription1,
	    FBDSC2 = ItemDescription2
	WHERE 
		FB$9INID = InstallationID AND 
		FBLNID = LineNumber;
END;
  /

-- #desc					Add Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref
-- #param Description1		Description1 
-- #param Description2		Description2 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdFastButtonLang
(
	InstallationID	IN NVARCHAR2,
	LineNumber		IN DECIMAL,
	LangPref		IN NVARCHAR2,
	Description1	IN NVARCHAR2,
	Description2	IN NVARCHAR2
)
AS
BEGIN
	UPDATE [SCDATA].FQ67416L
		SET FBDSC1 = Description1,
			FBDSC2 = Description2
	WHERE
		FB$9INID   = InstallationID
		AND FBLNID = LineNumber
		AND TRIM(FBLNGP) = TRIM(LangPref);
END;
  /

-- #desc				Authenticate for registers
-- #bl_class			Premier.POS.Licenses.StoreLicenseAuthentication.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdInstallationLicenseAuth
(
    InstallationID  IN NVARCHAR2,
    EncryptedXML    IN NCLOB
)
AS
BEGIN
    UPDATE [SCDATA].FQ670001
		SET
			IN$9HTML = EncryptedXML
	WHERE IN$9INID = InstallationID;
END;
  /

-- #desc					Update receipts detail 
-- #bl_class				Premier.POS.ReceiptDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ReceiptID			Receipt ID
-- #param InstallationID	Installation ID
-- #param RegisterID		Register ID
-- #param XmlBody			Receipt Body XML
-- #param ProgramId			Audith Info
-- #param WorkStationId		Audith Info
-- #param UserId			Audith Info
-- #param DateUpdated		Audith Info
-- #param TimeLastUpdated	Audith Info

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdReceiptDetail
(
	ReceiptID       IN NVARCHAR2,
	InstallationID  IN NVARCHAR2,
	RegisterID      IN NVARCHAR2,
	XmlBody         IN NCLOB,
	ProgramId       IN NVARCHAR2,
	WorkStationId   IN NVARCHAR2,
	UserId          IN NVARCHAR2,
	DateLastUpdated IN DECIMAL,
	TimeLastUpdated IN DECIMAL
)
AS
BEGIN
    UPDATE 
		[SCDATA].FQ674213
     SET 
		RR$9XML = XmlBody,
        RRPID =  ProgramId,
        RRJOBN = WorkStationId,
        RRUSER = UserId,
        RRUPMJ = DateLastUpdated,
        RRUPMT = TimeLastUpdated
   WHERE 
		TRIM(RR$9RCID) = TRIM(ReceiptID)
		AND RR$9INID= InstallationID
		AND ((TRIM(RR$9REGID) IS NULL AND TRIM(RegisterID) IS NULL) OR TRIM(RR$9REGID) = TRIM(RegisterID));
END;

	
		

  /

-- #desc					Update receipts  
-- #bl_class				Premier.POS.ReceiptHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ReceiptID			Receipt ID
-- #param Description		Description
-- #param ProgramId			Audith Info
-- #param WorkStationId		Audith Info
-- #param UserId			Audith Info
-- #param DateUpdated		Audith Info
-- #param TimeLastUpdated	Audith Info

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdReceiptHeader
(
	ReceiptID       IN NVARCHAR2,
	Description     IN NVARCHAR2,
	ProgramId       IN NVARCHAR2,
	WorkStationId   IN NVARCHAR2,
	UserId          IN NVARCHAR2,
	DateLastUpdated IN DECIMAL,
	TimeLastUpdated IN DECIMAL
)
AS
BEGIN
	UPDATE
		[SCDATA].FQ674212
	SET
		RPDSC1 = Description,
		RPPID = ProgramId,
        RPJOBN = WorkStationId,
        RPUSER = UserId,
        RPUPMJ = DateLastUpdated,
        RPUPMT = TimeLastUpdated
    WHERE 
		TRIM(RP$9RCID) = TRIM(ReceiptID);
END;
  /

-- #desc				    POS_UpdReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdReceiptItemMessage
(
    InstallationID  IN NVARCHAR2,
    ItemNumber      IN DECIMAL,
    MessageID       IN NVARCHAR2,
    QtyMessageItem  IN NVARCHAR2,
	ProgramID       IN NVARCHAR2,
    WorkStationID   IN NVARCHAR2,
    UserID          IN NVARCHAR2,
	DateLastUpdated IN DECIMAL,
	TimeLastUpdated IN DECIMAL
)
AS
BEGIN
    UPDATE [SCDATA].FQ674220
       SET MI$9IMQY = QtyMessageItem
          ,MIPID    = ProgramID
          ,MIJOBN	  = WorkStationID
          ,MIUSER   = UserID
          ,MIUPMJ   = DateLastUpdated
          ,MIUPMT   = TimeLastUpdated
     WHERE 
		   MI$9INID = InstallationID AND
           MIITM    = ItemNumber AND
           TRIM(MI$9MID)  = TRIM(MessageID);
END;




  /

-- #desc				    Update Receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdReceiptMessage
(
	MessageID      IN NVARCHAR2,
	Description1   IN NVARCHAR2,
	Description2   IN NVARCHAR2,
    Type		   IN NVARCHAR2,
    OneTimeOnly    IN NVARCHAR2,
    Priority       IN DECIMAL,
    EfectiveDate   IN DECIMAL,
    ExpirationDate IN DECIMAL,
    MessageText    IN NCLOB,
    ProgramID      IN NVARCHAR2,
    WorkStationID  IN NVARCHAR2,
    User           IN NVARCHAR2,
	DateLastUpdated IN DECIMAL,
	TimeLastUpdated IN DECIMAL
)
AS
BEGIN
       UPDATE [SCDATA].FQ674219
       SET RMDSC1  = Description1
          ,RMDSC2  = Description2
          ,RM$9RMT = Type
          ,RM$9RMUF= OneTimeOnly
          ,RM$9RMP = Priority
          ,RMEFTJ  = EfectiveDate
          ,RMEXDJ  = ExpirationDate
          ,RM$9XML = MessageText
          ,RMPID   = ProgramID
          ,RMJOBN  = WorkStationID
          ,RMUSER  = User
          ,RMUPMJ  = DateLastUpdated
          ,RMUPMT  = TimeLastUpdated
     WHERE TRIM(RM$9MID) = TRIM(MessageID);
END;
  /

-- #desc						Update a Register 
-- #bl_class					Premier.POS.Register.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param RegisterDescription	Descripcion.
-- #param InstallationID		Installation ID.
-- #param User					User.
-- #param Password				Password.
-- #param Group					Group.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdRegister
(
	RegisterID			    IN NVARCHAR2,
	RegisterDescription     IN NVARCHAR2,
	InstallationID			IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	Password				IN NVARCHAR2,
	GroupID				    IN NVARCHAR2
)
AS
BEGIN
	UPDATE 
		[SCDATA].FQ67426
	SET  
		RGDSC1 = RegisterDescription,
	    RG$9INID = InstallationID,
	    RGUSER = UserID,
		RG$9PWD = Password,
		RGUGRP = GroupID
	WHERE 
		TRIM(RG$9REGID) = TRIM(RegisterID);
END;

  /

-- #desc						Update Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch Number
-- #param DateOpened			Date Opened
-- #param TimeOpened			Time Opened	
-- #param UserOpened			User Opened
-- #param DateClosed			Date Closed
-- #param TimeClosed			Time Closed
-- #param UserClosed			User Closed

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdRegisterDrawerControl
(
	RegisterID          IN NVARCHAR2,
	DrawerNumber        IN DECIMAL,
	CurrentBatchNumber  IN NVARCHAR2,
	DateOpened          IN DECIMAL,
	TimeOpened          IN DECIMAL,
	UserOpened          IN DECIMAL,
	DateClosed          IN DECIMAL,
	TimeClosed          IN DECIMAL,
	UserClosed          IN DECIMAL
)	
AS
BEGIN
    UPDATE 
	    [SCDATA].FQ67427
    SET	
	    RC$9DAO =  DateOpened,
	    RC$9TIO =  TimeOpened,
	    RC$9USERO = UserOpened,
	    RC$9DAC = DateClosed,
	    RC$9TIC =  TimeClosed,
	    RC$9USERC = UserClosed
    WHERE
	    TRIM(RC$9REGID) = TRIM(RegisterID)AND
	    RC$9DRAW  = DrawerNumber AND
	    TRIM(RCEDBT) = TRIM(CurrentBatchNumber);
END;
	


  /

-- #desc				Authenticate for registers
-- #bl_class			Premier.POS.Licenses.RegisterLicenseAuthentication.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdRegisterLicenseAuth
(
    InstallationID IN NVARCHAR2,
    RegisterId     IN NVARCHAR2,
    EncryptedXML   IN LONG
)
AS
BEGIN	
	UPDATE [SCDATA].FQ67426
	SET
		RG$9SMS=EncryptedXML
	WHERE RG$9INID = InstallationID AND 
		  TRIM(RG$9REGID) = TRIM(RegisterID);
END;
  /
-- #desc							Add a Sales Person Client
-- #bl_class						Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationId			InstallationId				
-- #param WebAccountId				WebAccountId	
-- #param AddressBookType			AddressBookType		
-- #param AddressNumber				AddressNumber
-- #param ContactId					ContactId
-- #param CommissionRate			CommissionRate
-- #param PersistentShoppingCart	PersistentShoppingCart
-- #param LastPickDate				LastPickDate
-- #param TimeLasUpdated			TimeLasUpdated
-- #param OrderCompany				OrderCompany
-- #param OrderNumber				OrderNumber
-- #param OrderType					OrderType
-- #param OrderDate					OrderDate
-- #param AmmountOrderGross			AmmountOrderGross
-- #param UserReservedNumber		UserReservedNumber			
-- #param UserReservedAmount		UserReservedAmount	
-- #param UserReservedCode			UserReservedCode	
-- #param UserReservedDate			UserReservedDate
-- #param UserReservedReference		UserReservedReference		
-- #param UserId					UserId					
-- #param ProgramId					ProgramId					
-- #param DateUpdated				DateUpdated				
-- #param TimeLastUpdated			TimeLastUpdated			
-- #param JobNumber					JobNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_AddSalesPersonClient
(	
	InstallationId				NVARCHAR2,
	WebAccountId				DECIMAL,
	AddressBookType				DECIMAL,
	AddressNumber				DECIMAL,
	ContactId					DECIMAL,
	CommissionRate				DECIMAL,
	PersistentShoppingCart		NCLOB,
	LastPickDate				DECIMAL,	
	TimeUpd						DECIMAL,	
	OrderCompany				NVARCHAR2,
	OrderNumber					DECIMAL,
	OrderType					NVARCHAR2,
	OrderDate					DECIMAL,
	AmmountOrderGross			DECIMAL,
	UserReservedNumber			DECIMAL,
	UserReservedAmount			DECIMAL,
	UserReservedCode			NVARCHAR2,
	UserReservedDate			DECIMAL,
	UserReservedReference		NVARCHAR2,
	UserId						NVARCHAR2,
	ProgramId					NVARCHAR2,
	DateUpdated					DECIMAL,	
	TimeLastUpdated				DECIMAL,
	JobNumber					NVARCHAR2
	
)
AS
BEGIN
	INSERT INTO [SCDATA].FQ67125
	(
		SP$9INID,
		SP$9WAN8,
		SP$9TYP,
		SP$9AN8,
		SPIDLN,
		SPCMR1,	
		SP$9HTML,
		SPUPDJ,
		SPMUPT,
		SPKCOO,
		SPDOCO,	
		SPDCTO,
		SPTRDJ,
		SPOTOT,
		SPURAB,
		SPURAT,
		SPURCD,
		SPURDT,
		SPURRF,
		SPUSER,
		SPPID,
		SPUPMJ,
		SPUPMT,
		SPJOBN
	)
	VALUES
	(
		InstallationID,			
		WebAccountId,				
		AddressBookType,	
		AddressNumber,
		ContactId,
		CommissionRate,
		PersistentShoppingCart,
		LastPickDate,
		TimeUpd,
		OrderCompany,
		OrderNumber,
		OrderType,
		OrderDate,
		AmmountOrderGross,
		UserReservedNumber,			
		UserReservedAmount,	
		UserReservedCode,		
		UserReservedDate,			
		UserReservedReference,
		UserId,						
		ProgramId,					
		DateUpdated,				
		TimeLastUpdated,			
		JobNumber			
	);
END;
 
  /
-- #desc							Add a Web Account Additional Info
-- #bl_class						Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationId			 InstallationId
-- #param ObjectType				 ObjectType
-- #param WebAccountID				 WebAccountID
-- #param XmlBody					 XmlBody
-- #param SharedReference			 SharedReference
-- #param UserReservedNumber		 UserReservedNumber
-- #param UserReservedAmount		 UserReservedAmount
-- #param UserReservedCode			 UserReservedCode
-- #param UserReservedDate			 UserReservedDate
-- #param UserReservedReference	     UserReservedReference
-- #param UserID					 UserID
-- #param ProgramID				     ProgramID
-- #param DateUpdated				 DateUpdated
-- #param TimeLastUpdated			 TimeLastUpdated
-- #param JobNumber				     JobNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_AddWebUserAdditionalInfo
(	
	InstallationId			IN NVARCHAR2,
	ObjectType				IN DECIMAL,
	WebAccountID			IN DECIMAL,
	XmlBody					IN NCLOB,
	UserReservedNumber		IN DECIMAL,
	UserReservedAmount		IN DECIMAL,
	UserReservedCode		IN NVARCHAR2,
	UserReservedDate		IN DECIMAL,
	UserReservedReference	IN NVARCHAR2,
	UserID					IN NVARCHAR2,
	ProgramID				IN NVARCHAR2,
	JobNumber				IN NVARCHAR2,
	TimeLastUpdated			IN DECIMAL,
	DateUpdated				IN DECIMAL
)
AS 
    UniqueKeyID     DECIMAL;
BEGIN	

	BEGIN
	     SELECT NVL(MAX(WI$9UKID),0) + 1 INTO UniqueKeyID FROM [SCDATA].FQ67120
			WHERE WI$9INID = InstallationID AND WI$9OBJTY = ObjectType AND WI$9WAN8 = WebAccountID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    UniqueKeyID := NULL;
	END;
	
	INSERT INTO [SCDATA].FQ67120
	(
		WI$9INID,
		WI$9UKID,
		WI$9OBJTY,
		WI$9WAN8,
		WI$9HTML,
		WIURAB,
		WIURAT,
		WIURCD,
		WIURDT,
		WIURRF,
		WIUSER,
		WIPID,
		WIUPMJ,
		WIUPMT,
		WIJOBN
	)
	VALUES
	(
		InstallationID,
		UniqueKeyID,
		ObjectType,
		WebAccountID,
		XmlBody,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		JobNumber
	);
END;
  /
-- #desc						Delete Sales Person Client
-- #bl_class					Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationId		InstallationId
-- #param WebAccountId			WebAccountId

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_DelSalesPersonClient
(
	InstallationId			NVARCHAR2,
	WebAccountId			DECIMAL,
	AddressNumber			DECIMAL,
	ContactId				DECIMAL
)
AS
BEGIN
	
	DELETE FROM [SCDATA].FQ67125
	WHERE 
		    SP$9INID = InstallationID
		AND	SP$9WAN8 = WebAccountId
		AND SP$9AN8 = AddressNumber
		AND SPIDLN = ContactId;
END;
 
  /

-- #desc					Delete Saved Cart			
-- #bl_class				Premier.eCommerce.SavedCart.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID 
-- #param AddressNumberID	Address Number ID
-- #param UniqueKeyID		Unique Key ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_DelSavedCart
(
	InstallationID	IN NVARCHAR2,
	AddressNumberID	IN DECIMAL,
	UniqueKeyID		IN DECIMAL
)
AS
BEGIN		
	DELETE FROM [SCDATA].FQ679913
	WHERE 
		WA$9INID = InstallationID			
		AND WA$9AN8  = AddressNumberID
		AND WAUKID = UniqueKeyID;		
END; 
  /
-- #desc					Check Web Account By Installation
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID
-- #param UserName

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcCheckWebAccountByInst
(
    UserName		IN NVARCHAR2,
	InstallationID	IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
	        WUSR.WA$9USER AS UserID
        FROM
	        [SCDATA].FQ67101 WUSR, 
	        [SCDATA].FQ67996 INBU	--Installation By User
        WHERE
                WUSR.WA$9USER = INBU.UI$9USER
	        AND INBU.UI$9INID = InstallationID
	        AND UPPER(TRIM(WUSR.WAEMAL)) = UPPER(TRIM(UserName));
END;
	

  /
-- #desc					Get the Web Account key fields does not exists
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID
-- #param UserName

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcCheckWebAcctAddressNo
(
	InstallationID  IN NVARCHAR2,
	AddressNumber	IN DECIMAL,
	ContactID		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
	        COUNT(*) AS AccountNameCount,
			WUSR.WA$9WAN8 AS WebAccountID
        FROM
	        [SCDATA].FQ67101 WUSR,
	        [SCDATA].FQ67996 INBU	--Installation By User
	    WHERE
	            WUSR.WA$9USER = INBU.UI$9USER
	        AND INBU.UI$9INID = InstallationID 
	        AND WUSR.WA$9AN8 = AddressNumber 
	        AND WUSR.WAIDLN = ContactID
		group by  WUSR.WA$9WAN8;
END;
  /
-- #desc						Execute clear Terms and Condition Status
-- #bl_class					Premier.eCommerce.TermsAndConditionsAccept.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId
-- #param ObjectType
-- #param XmlBody


CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcClearTermsCondStatus
(
	StoreId				IN NCHAR,
	ObjectType			IN NUMERIC,
	XmlBody				IN NCLOB
)
AS
BEGIN
	--Clear specific installation
	UPDATE 
		[SCDATA].FQ67120
	SET	
		WI$9HTML = XmlBody
	WHERE
		WI$9OBJTY = ObjectType
		AND	WI$9INID = StoreId;	
END; 
  /
-- #desc						Copy Wish List
-- #bl_class					Premier.eCommerce.WishListHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param WebAccountID			WebAccountID
-- #param WishListID			SequenceID
-- #param NewWishListName		NewName


CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcCopyWishList
(
	WebAccountID        IN DECIMAL,
	WishListID			IN DECIMAL,
	NewWishListName	    IN NVARCHAR2,
	SequenceID			OUT DECIMAL
)
AS
    SEQCOUNT        DECIMAL;
BEGIN

    BEGIN
        SELECT 
            NVL(MAX(WHSEQ ),-1) + 1 INTO SEQCOUNT
	    FROM 
	        [SCDATA].FQ674214 
	    WHERE 
	        ROWNUM < 2 AND WH$9WAN8 = WebAccountID;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    SEQCOUNT := 0;
	END;

    SequenceID := SEQCOUNT;
	
    INSERT INTO [SCDATA].FQ674214
    (
	    WH$9WAN8, 
	    WHSEQ ,
	    WHDESC,
	    WHURCD,
	    WHURDT,
	    WHURAT,
	    WHURAB,
	    WHURRF,
	    WHUSER,
	    WHPID,
	    WHJOBN,
	    WHUPMJ,
	    WHTDAY
    )
    SELECT 
	    WH$9WAN8			AS WebAccountID, 
	    SEQCOUNT			AS WishListID,
	    NewWishListName	    AS wishListDesc,
	    WHURCD				AS UserReservedCode,
	    WHURDT				AS UserReservedDate,
	    WHURAT				AS UserReservedAmount,
	    WHURAB				AS UserReservedNumber,
	    WHURRF				AS UserReservedReference,
	    WHUSER				AS UserID,
	    WHPID				AS ProgramID,
	    WHJOBN				AS WorkStationID,
	    WHUPMJ				As DateUpdated,
	    WHTDAY				AS TimeOfDay
    FROM 
	    [SCDATA].FQ674214 --WishListHeader
    WHERE 
	    WH$9WAN8 = WebAccountID
	    AND WHSEQ = WishListID;

    INSERT INTO [SCDATA].FQ674215
    (
	    WD$9WAN8, 
	    WDSEQ ,
	    WDITM,
	    WDUORG,
	    WDUOM,
	    WDURCD,
	    WDURDT,
	    WDURAT,
	    WDURAB,
	    WDURRF,
	    WDUSER,
	    WDPID,
	    WDJOBN,
	    WDUPMJ,
	    WDTDAY
    )
    SELECT 
	    WD$9WAN8	AS WebAccount, 
	    SEQCOUNT	AS SequenceID ,
	    WDITM		AS ShortItemNumber,
	    WDUORG		AS Quantity,
	    WDUOM		AS UOM,
	    WDURCD		AS UserReservedCode,
	    WDURDT		AS UserReservedDate,
	    WDURAT		AS UserReservedAmount,
	    WDURAB		AS UserReservedNumber,
	    WDURRF		AS UserReservedReference,
	    WDUSER		AS UserID,
	    WDPID		AS ProgramID,
	    WDJOBN		AS WorkStationID,
	    WDUPMJ		As DateUpdated,
	    WDTDAY		AS TimeOfDay
    FROM 
	    [SCDATA].FQ674215	
    WHERE 
	    WD$9WAN8 = WebAccountID
	    AND WDSEQ = WishListID;
END;
  /

-- #desc						Delete Web Account Info
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationId		InstallationId
-- #param WebAccountId			WebAccountId

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcDelWebAccountInfo
(
	InstallationId			NVARCHAR2,
	WebAccountId			DECIMAL	
)
AS
BEGIN
	--Delete the Sales Person
	DELETE FROM [SCDATA].FQ67125
	WHERE 
		SP$9INID = InstallationID
		AND	SP$9WAN8 = WebAccountId;
		
	--Delete Web Account Additional Info
	DELETE FROM	[SCDATA].FQ67120
	WHERE 
		WI$9INID = InstallationID AND
		WI$9WAN8 = WebAccountId;
		
	--Delete Persist Shopping Cart Info
	DELETE FROM [SCDATA].FQ6742WF
	WHERE
		SH$9INID = InstallationID AND
		SH$9WAN8 = WebAccountId;

	--Announcements - Assignments by web account 	
	DELETE FROM [SCDATA].FQ67105A WHERE MA$9ATYP = 5 AND MA$9WAN8 = WebAccountId;

	--Announcements  History
	DELETE FROM [SCDATA].FQ67105H WHERE MH$9INID = InstallationID AND MH$9WAN8 = WebAccountId;
END;
  
  /
-- #desc					Delete WebAccount By Contact
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcDelWebAcctByContactID
(
	InstallationID  IN NVARCHAR2,
	AddressNumber	IN DECIMAL,
	ContactID		IN DECIMAL
)
AS
BEGIN
	DELETE 
	FROM
	    [SCDATA].FQ67101
	WHERE
		    WA$9INID = InstallationID 
		AND WA$9AN8	 = AddressNumber 
		AND WAIDLN	 = ContactID;
END;
  /

-- #desc								Delete abandoned shopping cart
-- #bl_class							Premier.Ecommerce.PurgeAbandonedShoppingCartsCommand
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param InstallationID				InstallationID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcPurgeAbandonShopCarts
(
	InstallationId		NCHAR
)

AS
	NotificationSetting NVARCHAR2(256);
	InstallationIDTemp NCHAR(3) := InstallationID;
	NotificationSettingTMP INT;
BEGIN

	[SCLIBRARY].CMM_GetConstantValue( 'ABNCARTDEL', InstallationIDTemp, NotificationSetting);	
	/* Use TRIM() function to convert to null NotificationSetting when has empty value */
	SELECT CAST(NVL(TRIM(NotificationSetting), '0') AS INT) INTO NotificationSettingTMP FROM dual;    


	DELETE 
	FROM [SCDATA].FQ6742WF
	WHERE SH$9INID = InstallationID
	AND SHUPMJ <= [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - NotificationSettingTMP);

	UPDATE [SCDATA].FQ67125 
	SET SP$9HTML = ' ' 
	WHERE SP$9INID = InstallationID
	AND SPUPMJ <= [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - NotificationSettingTMP);

END;
  /
-- #desc					Execute Update Last Login Date
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID
-- #param UserName
-- #param LastLoginDate
-- #param LastLoginTime

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcUpdLastLoginTime
(
    UserID			IN DECIMAL,
	InstallationID	IN NVARCHAR2,
	LastLoginDate	IN DECIMAL,
	LastLoginTime	IN DECIMAL
)
AS
BEGIN
    UPDATE 
        [SCDATA].FQ67101
	SET	WAACTDATE = LastLoginDate, 
		WAACTTIME = LastLoginTime
	WHERE
		WA$9WAN8 = UserID 
		AND WA$9INID = InstallationID;
END;
  /
-- #desc					Update Last Login Date by Name
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID
-- #param UserName
-- #param LastLoginDate
-- #param LastLoginTime

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcUpdLastLoginTimeByName
(
    UserName		IN NVARCHAR2,
	InstallationID	IN NVARCHAR2,
	LastLoginDate	IN DECIMAL,
	LastLoginTime	IN DECIMAL
)
AS
BEGIN

    UPDATE [SCDATA].FQ67101
	    SET	WAACTDATE = LastLoginDate, 
		    WAACTTIME = LastLoginTime
	    WHERE
		    WA$9INID = InstallationID
		    AND UPPER(TRIM(WAEMAL)) = UPPER(TRIM(UserName));
END;
  /

-- #desc					Update an User (LanguagePref).
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param WebAccountID		WebAccountID
-- #param LanguagePref		LanguagePref


CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExeUpdWebAcctLanguagePref
(
	InstallationID IN NVARCHAR2,
	WebAccountID   IN DECIMAL,
	LanguagePref   IN NVARCHAR2
)
AS
BEGIN
    UPDATE 
    	[SCDATA].FQ67991
    SET
	    USLNGP	= LanguagePref
    WHERE 	 
    	US$9USER = (SELECT 
    	                WA$9USER 
    	            FROM 
    	                [SCDATA].FQ67101
					WHERE 
					        WA$9WAN8 = WebAccountID
						AND WA$9INID = InstallationID);
END;	
	
  /

-- #desc					Get the abandoned persist shopping cart
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetAbandonedShopCartList
(
	InstallationID	IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	InstallationIDTemp NCHAR(3) := InstallationID;
	NotificationSetting NVARCHAR2(256);
	NotificationSettingTMP INT;
	
	FirstNotificationDate NUMBER(6,0);
	SecondNotificationDate NUMBER(6,0);
	ThirdNotificationDate NUMBER(6,0);
BEGIN
	
	[SCLIBRARY].CMM_GetConstantValue( 'ABNEMLNOT1', InstallationIDTemp, NotificationSetting);	
	SELECT CAST(NVL(TRIM(NotificationSetting), '0') AS INT) INTO NotificationSettingTMP FROM dual;    
	FirstNotificationDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - NotificationSettingTMP);
	
	[SCLIBRARY].CMM_GetConstantValue( 'ABNEMLNOT2', InstallationIDTemp, NotificationSetting);	
	SELECT CAST(NVL(TRIM(NotificationSetting), '0') AS INT) INTO NotificationSettingTMP FROM dual;    
	SecondNotificationDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - NotificationSettingTMP);
	
	[SCLIBRARY].CMM_GetConstantValue( 'ABNEMLNOT3', InstallationIDTemp, NotificationSetting);	
	SELECT CAST(NVL(TRIM(NotificationSetting), '0') AS INT) INTO NotificationSettingTMP FROM dual;    
	ThirdNotificationDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE - NotificationSettingTMP);
	
	OPEN ResultData1 FOR
   SELECT	
			PSC.SH$9WAN8	AS WebAccountID,
			PSC.SH$9INID	AS InstallationID,
			WA.WAEMAL		AS UserName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CONS.PCMLNM
				ELSE CUST.WWMLNM
			END AS CustomerName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CAST(CONS.PCEMAL AS NVARCHAR2(256))
				ELSE [SCLIBRARY].CST_GetPrimaryElectAddressFnc(CUST.WWAN8,CUST.WWIDLN,'E')						
			END AS Email,
			CONT.ABLNGP AS LangPref,
			0 AS Client,
			' ' AS ClientName,
			CASE PSC.SHUPMJ
				WHEN FirstNotificationDate THEN 1
				WHEN SecondNotificationDate THEN 2
				WHEN ThirdNotificationDate THEN 3
				END AS NotificationSequence
		FROM 
			[SCDATA].FQ6742WF PSC
			INNER JOIN [SCDATA].FQ67101 WA
				ON WA.WA$9WAN8 = PSC.SH$9WAN8
				AND WA.WA$9INID = PSC.SH$9INID
			LEFT OUTER JOIN [SCDATA].FQ67104 CONT
				ON CONT.AB$9AN8 = WA.WA$9AN8
				AND CONT.ABIDLN = WA.WAIDLN
			LEFT OUTER JOIN [SCDATA].F0111 CUST
				ON CUST.WWAN8 = WA.WA$9AN8 
				AND CUST.WWIDLN = WA.WAIDLN 
				AND WA.WA$9TYP IN(0, 2)  --Customer Only
			LEFT OUTER JOIN [SCDATA].FQ67303 CONS
				ON CONS.PC$9AN8 = WA.WA$9AN8 
				AND CONS.PCIDLN = WA.WAIDLN 
				AND WA.WA$9TYP = 1 --Consumer Only
		WHERE PSC.SHQTY > 0
		AND PSC.SH$9INID = InstallationID
		AND PSC.SHUPMJ <> CurrentJulianDate
		AND PSC.SHUPMJ IN (FirstNotificationDate, SecondNotificationDate, ThirdNotificationDate) 
		UNION
		SELECT	
			PSC.SP$9WAN8	AS WebAccountID,
			PSC.SP$9INID	AS InstallationID,
			WA.WAEMAL		AS UserName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CONS.PCMLNM
				ELSE CUST.WWMLNM
			END AS CustomerName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CAST(CONS.PCEMAL AS NVARCHAR2(256))
				ELSE [SCLIBRARY].CST_GetPrimaryElectAddressFnc(CUST.WWAN8,CUST.WWIDLN,'E')	
			END AS Email,
			CONT.ABLNGP AS LangPref,
			PSC.SP$9AN8 AS Client,
			CASE PSC.SP$9TYP 
				WHEN 1 THEN CAST(CONSCLIENT.PCMLNM AS VARCHAR2(40))
				ELSE CAST(CUSTCLIENT.WWMLNM AS VARCHAR2(40))
			END AS ClientName,
			CASE PSC.SPUPMJ
				WHEN FirstNotificationDate THEN 1
				WHEN SecondNotificationDate THEN 2
				WHEN ThirdNotificationDate THEN 3
				END AS NotificationSequence 
		FROM 
			[SCDATA].FQ67125 PSC
			INNER JOIN [SCDATA].FQ67101 WA
				ON WA.WA$9WAN8 = PSC.SP$9WAN8
				AND WA.WA$9INID = PSC.SP$9INID
			LEFT OUTER JOIN [SCDATA].FQ67104 CONT
				ON CONT.AB$9AN8 = WA.WA$9AN8
				AND CONT.ABIDLN = WA.WAIDLN
			LEFT OUTER JOIN [SCDATA].F0111 CUST
				ON CUST.WWAN8 = WA.WA$9AN8 
				AND CUST.WWIDLN = WA.WAIDLN 
				AND WA.WA$9TYP IN(0, 2)  --Customer Only
			LEFT OUTER JOIN [SCDATA].FQ67303 CONS
				ON CONS.PC$9AN8 = WA.WA$9AN8 
				AND CONS.PCIDLN = WA.WAIDLN 
				AND WA.WA$9TYP = 1 --Consumer Only
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCLIENT
				ON CUSTCLIENT.WWAN8 = PSC.SP$9AN8 
				AND CUSTCLIENT.WWIDLN = PSC.SPIDLN 
				AND PSC.SP$9TYP IN(0, 2)  --Customer Only
			LEFT OUTER JOIN [SCDATA].FQ67303 CONSCLIENT
				ON CONSCLIENT.PC$9AN8 = PSC.SP$9AN8 
				AND CONSCLIENT.PCIDLN = PSC.SPIDLN 
				AND PSC.SP$9TYP = 1 --Consumer Only
		WHERE PSC.SP$9HTML IS NOT NULL
		AND PSC.SP$9INID = InstallationID
		AND PSC.SPUPMJ <> CurrentJulianDate
		AND PSC.SPUPMJ IN (FirstNotificationDate, SecondNotificationDate, ThirdNotificationDate) ;
END;
  /

-- #desc						Get Account Summary Info
-- #bl_class	 	 			Premier.eCommerce.AccountSummaryInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param Company				Company

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetAccountSummaryInfo
(
	InstallationID		IN NCHAR,
	AddressNumber		IN NUMBER,
	AddressBookType		IN NUMBER,
	Company				IN NCHAR,
	ResultData1 OUT GLOBALPKG.refcursor,
	ResultData2 OUT GLOBALPKG.refcursor,
	ResultData3 OUT GLOBALPKG.refcursor
)
AS
	/* Gets the Document Restrictions Parameters */
	CtRestric	NCHAR(1);
	CtINID		NCHAR(3);
	CtConstant	NCHAR(10);
	
	/* Counts variables */
	ShipTosCount INT;
	ContactsWebAcctActiveCount INT;
	ContactsWebAcctInactiveCount INT;
	ContactsWithoutWebAcctCount INT;

	--------------------------Gets the Organization Structure Type
	OrgStrType	NCHAR(3);
	OrgStrTypeINID	NCHAR(3) := InstallationID;	

	BEGIN
		CtConstant := 'CT_RESTRIC';
		CtINID := InstallationID;
		[SCLIBRARY].CMM_GetConstantValue(CtConstant, CtINID, CtRestric);
		[SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

		IF(AddressBookType = 0) THEN	/* Customer */ 
			/* Shiptos count */
			WITH SHIPTOS AS /* CTE with parent address number and children address number */
			(
				SELECT MAAN8 FROM [SCDATA].F0150 WHERE MAPA8 = AddressNumber AND MAOSTP = OrgStrType
				UNION ALL 
				SELECT AddressNumber MAAN8 FROM SYS.DUAL    
			),
			CUSTOMERS AS 
			(
				SELECT COALESCE(B.AIBADT, A.AIBADT) BADT 
				FROM SHIPTOS
				INNER JOIN [SCDATA].F03012 A
					ON MAAN8 = A.AIAN8
				LEFT OUTER JOIN [SCDATA].F03012 B
					ON MAAN8 = B.AIAN8
					AND B.AICO = Company
				WHERE A.AICO = '00000'
			)
			SELECT COUNT(1) INTO ShipTosCount
			FROM CUSTOMERS
			WHERE BADT IN ('S', 'X');

			/* Web account counts */
			IF(CtRestric = N'1') THEN	/* Validates if the setting is on and join to FQ67008 */

				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].F0111 CON
					INNER JOIN [SCDATA].FQ67008 CtR
						ON CON.WWTYC = CtR.DRKY
						AND DR$9INID = CtINID 
						AND DR$9CNST = CtConstant
					LEFT OUTER JOIN [SCDATA].FQ67101
						ON  WA$9INID = InstallationID
						AND WA$9TYP IN (0,2)
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = CON.WWIDLN 
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER 
				WHERE CON.WWAN8 = AddressNumber
					AND CON.WWIDLN <> 0;
			ELSE
				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].F0111 CON
					LEFT OUTER JOIN [SCDATA].FQ67101
						ON  WA$9INID = InstallationID
						AND WA$9TYP IN (0,2)
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = CON.WWIDLN 
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER 
				WHERE CON.WWAN8 = AddressNumber
					AND CON.WWIDLN <> 0;
			END IF;

		ELSE	/* Consumer */

			/* Shiptos count */
			SELECT COUNT(1) INTO ShipTosCount
			FROM [SCDATA].FQ670302
			/* Read the parent shipto and children shiptos */
			WHERE (PR$9PA8 = AddressNumber OR PR$9AN8 = AddressNumber)
			AND PRBADT IN ('S', 'X');

			/* Web account count */
			IF(CtRestric = N'1') THEN	/* Validates if the setting is on and join to FQ67008 */
				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].FQ67303
					INNER JOIN [SCDATA].FQ67008 CtR
						ON PCTYC = CtR.DRKY
						AND DR$9INID = CtINID 
						AND DR$9CNST = CtConstant
					LEFT OUTER JOIN [SCDATA].FQ67101 
						ON WA$9INID = InstallationID
						AND WA$9TYP = 1
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = PCIDLN
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER
				WHERE PC$9AN8 = AddressNumber
						AND PCIDLN <> 0;
			ELSE
				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].FQ67303
					LEFT OUTER JOIN [SCDATA].FQ67101 
						ON WA$9INID = InstallationID
						AND WA$9TYP = 1
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = PCIDLN
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER
				WHERE PC$9AN8 = AddressNumber
						AND PCIDLN <> 0;
			END IF;

		END IF;

		OPEN ResultData1 FOR
		SELECT 
			ShipTosCount AS ShipTosCount, 
			ContactsWebAcctActiveCount AS ContactsWebAcctActiveCount,
			ContactsWebAcctInactiveCount AS ContactsWebAcctInactiveCount,
			ContactsWithoutWebAcctCount AS ContactsWithoutWebAcctCount
		FROM SYS.DUAL;

		/* Credit carts summary */
		[SCLIBRARY].PRO_GetCreditCardsSummary(AddressNumber, AddressBookType, ResultData2);
		/* Bank accounts summary */
		[SCLIBRARY].PRO_GetBankAccountsSummary(InstallationID, AddressNumber, ResultData3);

	END;
  /
-- #desc					Get Permission SetUp List
-- #bl_class	 	 		Premier.eCommerce.PermissionSetUpList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation
-- #param IndCompFlag		Individual Company Flag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetPermissionSetUpList
(
	InstallationID  IN NCHAR,
	IndCompFlag	    IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        PE$9INID  AS InstallationID,
	        PE$9PCD   AS PermissionCode,
	        PE$9ICF   AS IndividualCompanyFlag,
	        PE$9ALLOW AS ActionAllowed,
	        PE$9WEBA  AS WebAllowebFlag
        FROM
	        [SCDATA].FQ67994E
        WHERE
	        PE$9INID = InstallationID
	        AND PE$9ICF = IndCompFlag
        UNION ALL
        SELECT 
	        PE$9INID  AS InstallationID,
	        PE$9PCD   AS PermissionCode,
	        PE$9ICF   AS IndividualCompanyFlag,
	        PE$9ALLOW AS ActionAllowed,
	        PE$9WEBA  AS WebAllowebFlag
        FROM
	        [SCDATA].FQ67994E  A
        Where
	        A.PE$9INID = N'***' 
	        AND A.PE$9ICF = IndCompFlag
	        AND A.PE$9PCD  NOT IN(SELECT B.PE$9PCD
							          FROM  [SCDATA].FQ67994E B
							          WHERE B.PE$9INID = InstallationID
								        AND B.PE$9ICF = IndCompFlag);
END;
  /
-- #desc					Get the persist shopping cart
-- #bl_class	 	 		Premier.eCommerce.TemporalShoppingCartCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetPersistentShoppingCart
(
	WebAccountId   IN Decimal,
	InstallationID IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
BEGIN
OPEN ResultData1 FOR
SELECT	
	SH$9WAN8	AS WebAccountId,
	SH$9INID	AS InstallationID,
	SHQTY		AS Quantity,
	SHUPMT		AS LastUpdate,
	SH$9HTML	AS ItemList
FROM 
	[SCDATA].FQ6742WF
WHERE          
	-- Search Type filter
    SH$9WAN8  = WebAccountId AND SH$9INID = InstallationID;
END; 
  /
-- #desc							Get the persist shopping cart of the Sales Person Client
-- #bl_class						Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param WebAccountID				WebAccountID of the Sales Person
-- #param InstallationID			Installation Id
-- #param SalesPersonClient			Address Number of the Sales Person Client

CREATE OR REPLACE PROCEDURE [SCLIBRARY]. ECO_GetSalePClientShopCart
(
	WebAccountId		IN DECIMAL,
	InstallationID		IN NVARCHAR2,
	SalesPersonClient	IN DECIMAL,
	ResultData1			OUT GLOBALPKG.refcursor
)
AS
BEGIN
	OPEN ResultData1 FOR
		SELECT	
			SP$9WAN8	AS WebAccountId,
			SP$9INID	AS InstallationID,
			0			AS Quantity,
			SPUPMT		AS LastUpdate,
			SP$9HTML	AS ItemList
		FROM 
			[SCDATA].FQ67125
		WHERE          
			-- Search Type filter
			SP$9WAN8  = WebAccountId AND SP$9INID = InstallationID AND SP$9AN8 = SalesPersonClient;
END; 
  /

-- #desc						Get Sales Person List by Client
-- #bl_class	 	 			Premier.eCommerce.SalesPersonList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID	    InstallationID
-- #param AddressNumber			Address Number
-- #param ContactID     		Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetSalesPersnLstByClient
(
	InstallationID	NCHAR,
	AddressNumber	NUMBER,
	ContactID		NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
OPEN ResultData1 FOR
WITH CTE AS (
	SELECT 
		WA$9AN8,
		emails.EAEMAL,
		WAIDLN,
		(CASE WHEN C.UP$9ALLOW IS NULL OR C.UP$9ALLOW = 1 THEN 'N' ELSE 'Y' END) AS Notify,
		ROW_NUMBER() OVER(PARTITION BY B.WA$9WAN8, B.WAIDLN ORDER BY emails.EAEHIER DESC, emails.EARCK7 DESC) AS ERNUM
	FROM [SCDATA].FQ67125 A 
	INNER JOIN [SCDATA].FQ67101 B
		ON WA$9WAN8= A.SP$9WAN8 AND B.WA$9INID = A.SP$9INID
	LEFT OUTER JOIN [SCDATA].FQ67997 C 
		ON C.UP$9USER = B.WA$9USER AND UP$9PCD='ESPRE'
	LEFT OUTER JOIN [SCDATA].F01151 emails
	    ON emails.EAAN8 = B.WA$9AN8 AND emails.EAIDLN = B.WAIDLN AND emails.EAETP = 'E'
	WHERE  A.SP$9INID=InstallationID AND A.SP$9AN8=AddressNumber AND A.SPIDLN=ContactID)
	SELECT
		 WA$9AN8 AS AddressNumber,
		 WAIDLN AS ContactID,
		 EAEMAL AS EmailAddress,
		 Notify
	FROM CTE 
	WHERE ERNUM = 1; 
END;
  /
-- #desc					Read Sales Person Client List 
-- #bl_class				Premier.Ecommerce.SalesPersonClientList
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param InstallationId	Installation Id			
-- #param WebAccountId		Web Account Id
-- #param CustomerName		Customer Name
-- #param AddressNumber		Address Number
-- #param AddressLine1		Address Line 1
-- #param City				City
-- #param State				State
-- #param ZipCode			Zip Code
-- #param Country			Country
-- #param LangPref			Language Preference
-- #param SortBy			Sort By Colum name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageIndex			Page Index
-- #param PageSize			Page Size


CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetSalesPersonClientList
(
	InstallationId			IN NCHAR,
	WebAccountId			IN NUMBER,
    CustomerName			IN NCHAR,
    AddressNumber			IN NUMBER,
    AddressLine1			IN NCHAR,
    City					IN NCHAR,
    State					IN NCHAR,
    ZipCode					IN NCHAR,
    Country					IN NCHAR,
    LangPref				IN NVARCHAR2,
	SortBy					IN NVARCHAR2,
	SortDir					IN NVARCHAR2,
    PageIndex				IN INT,
	PageSize				IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	CurrentJulianDate 	NUMBER(6,0) := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
	SQL_DYNAMIC				VARCHAR2(4000);
	SQL_DYNAMICUNION		VARCHAR2(4000) := ' ';
	SQL_DYNAMICPAGING		VARCHAR2(4000) := ' ';
	WHERE_DYNAMIC			NVARCHAR2(4000) := ' ';
	WHERE_DYNAMIC_CONSU		NVARCHAR2(4000) := ' ';
	SORT_DYNAMIC			NVARCHAR2(50);
	SORTDIR_DYNAMIC			NVARCHAR2(5);
	ConsumerCount			DECIMAL;

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);
BEGIN


	/* Dynamic sort direction statement */
    SORTDIR_DYNAMIC := CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	/* Dynamic sort statement */
	SORT_DYNAMIC := CASE SortBy 
						WHEN 'AddressNumber' THEN 'AddressNumber' 
						WHEN 'AddressLine1' THEN 'UPPER(AddressLine1)' 
						WHEN 'City' THEN 'UPPER(City)' 
						WHEN 'State' THEN 'State' 
						WHEN 'ZipCode' THEN 'UPPER(ZipCode)' 
						ELSE 'UPPER(CustomerName)' || SORTDIR_DYNAMIC || ', UPPER(CompanyName)' 
					END;
	
	SORT_DYNAMIC := SORT_DYNAMIC || SORTDIR_DYNAMIC;

	/* Verify if exist consumer relation to concat consumer UNION ALL */
	SELECT COUNT(*) INTO ConsumerCount FROM [SCDATA].FQ67125 SPC WHERE SPC.SP$9INID = InstallationId AND SPC.SP$9WAN8 = WebAccountId AND SPC.SP$9TYP = 1;

	
	/* Dynamic query condition */
	IF (CustomerName <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(TRIM(NVL(CUST.WWMLNM, '' ''))) || '' '' || UPPER(NVL(CUSTCIA.WWMLNM, '' '')) LIKE ''%'' || :CustomerName || ''%''';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND  UPPER(TRIM(NVL(CONTACT.PCMLNM, '' ''))) || '' '' || UPPER(NVL(CONSCIA.PCMLNM, '' '')) LIKE ''%'' || :CustomerName || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :CustomerName = ''*'') ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR :CustomerName = ''*'') ';
	END IF;
	
	IF (AddressNumber IS NOT NULL) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND SPC.SP$9AN8 = :AddressNumber ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND SPC.SP$9AN8 = :AddressNumber ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AddressNumber IS NULL) ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR :AddressNumber IS NULL) ';
	END IF;
	
	IF (AddressLine1 <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(AL.ALADD1) LIKE ''%'' || :AddressLine1 || ''%''';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND UPPER(CONS.PRADD1) LIKE ''%'' || :AddressLine1 || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :AddressLine1 = ''*'') ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR :AddressLine1 = ''*'') ';
	END IF;
	
	IF (City <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND UPPER(AL.ALCTY1) LIKE ''%'' || :City || ''%''';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND UPPER(CONS.PRCTY1) LIKE ''%'' || :City || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :City = ''*'') ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR :City = ''*'') ';
	END IF;
	
	IF (State <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AL.ALADDS = :State ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND CONS.PRADDS = :State ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :State = ''*'') ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR :State = ''*'') ';
	END IF;
	
	IF (ZipCode <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AL.ALADDZ LIKE ''%'' || :ZipCode || ''%''';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND CONS.PRADDZ LIKE ''%'' || :ZipCode || ''%''';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :ZipCode = ''*'') ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR :ZipCode = ''*'') ';
	END IF;
	
	IF (Country <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND AL.ALCTR = :Country ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND CONS.PRCTR = :Country ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N' AND (1 = 1 OR :Country = ''*'') ';
		WHERE_DYNAMIC_CONSU := WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR :Country = ''*'') ';
	END IF;


	SQL_DYNAMIC :=
	N'	WITH PAGING AS 
    (
	   SELECT SalesPersonClients.*, ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM, COUNT(*) OVER () AS TotalRowCount FROM 
	   (
		   SELECT
				SPC.SP$9TYP          AS AddressBookType,  
				SPC.SP$9AN8          AS AddressNumber,
				SPC.SPIDLN           AS ContactId,
				SPC.SPCMR1           AS CommissionRate,
				CUST.WWMLNM          AS CustomerName,             
				SPC.SP$9HTML  AS PersistentShoppingCart,
				AL.ALADD1            AS AddressLine1,        
				AL.ALADD2            AS AddressLine2,
				AL.ALADD3            AS AddressLine3,
				AL.ALADD4            AS AddressLine4,
				AL.ALCTY1            AS City,
				AL.ALADDS            AS State,
				AL.ALADDZ            AS ZipCode,
				AL.ALCTR             AS Country,
				NVL(CUSTCIA.WWMLNM, '''') AS CompanyName,
				PS$9ICF                    AS IndividualCompanyFlag
			FROM [SCDATA].FQ67125 SPC
			INNER JOIN [SCDATA].F0111 CUST
					ON CUST.WWAN8 = SPC.SP$9AN8 AND 
					CUST.WWIDLN = SPC.SPIDLN          
			INNER JOIN [SCDATA].F0101 AB 
					ON AB.ABAN8 = SPC.SP$9AN8         
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, :CurrentJulianDate)) AL
					ON AL.ALAN8 = AB.ABAN8
			INNER JOIN [SCDATA].FQ67107                /* Profile Extended Information */
					ON PS$9AN8 = SPC.SP$9AN8
					AND PS$9TYP = SPC.SP$9TYP  
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCIA
					ON CUSTCIA.WWAN8 =  SPC.SP$9AN8 AND 
					CUSTCIA.WWIDLN = 0 AND            
					SPC.SPIDLN <> 0 AND
					PS$9ICF = 1                                     /* Company Only */     
			WHERE SPC.SP$9INID = :InstallationId
					AND SPC.SP$9WAN8 = :WebAccountId
					AND SPC.SP$9TYP = 0                      /* Customer Only */ ' ||
				WHERE_DYNAMIC;

	IF (ConsumerCount > 0) THEN

	SQL_DYNAMICUNION := 
		 '	UNION ALL
			SELECT                                   
				SPC.SP$9TYP          AS AddressBookType,  
				SPC.SP$9AN8          AS AddressNumber,
				SPC.SPIDLN           AS ContactId,
				SPC.SPCMR1           AS CommissionRate,
				CONTACT.PCMLNM          AS CustomerName,             
				SPC.SP$9HTML  AS PersistentShoppingCart,
				CONS.PRADD1            AS AddressLine1,        
				CONS.PRADD2            AS AddressLine2,
				CONS.PRADD3            AS AddressLine3,
				CONS.PRADD4           AS AddressLine4,
				CONS.PRCTY1            AS City,
				CONS.PRADDS            AS State,
				CONS.PRADDZ            AS ZipCode,
				CONS.PRCTR             AS Country,
				NVL(CONSCIA.PCMLNM, '''') AS CompanyName,
				PS$9ICF                    AS IndividualCompanyFlag
			FROM [SCDATA].FQ67125 SPC
			INNER JOIN [SCDATA].FQ67303 CONTACT
					ON CONTACT.PC$9AN8 = SPC.SP$9AN8 AND 
					CONTACT.PCIDLN = SPC.SPIDLN          
			INNER JOIN [SCDATA].FQ670302 CONS 
					ON CONS.PR$9AN8 = SPC.SP$9AN8         				  
			INNER JOIN [SCDATA].FQ67107                /* Profile Extended Information */
					ON PS$9AN8 = SPC.SP$9AN8
					AND PS$9TYP = SPC.SP$9TYP  
			LEFT OUTER JOIN [SCDATA].FQ67303 CONSCIA
					ON CONSCIA.PC$9AN8 =  SPC.SP$9AN8 AND 
					CONSCIA.PCIDLN = 0 AND            
					SPC.SPIDLN <> 0 AND PS$9ICF = 1 /* Company Only */     
			WHERE SPC.SP$9INID = :InstallationId
					AND SPC.SP$9WAN8 = :WebAccountId
					AND SPC.SP$9TYP = 1 /* Consumer Only */ ' ||
			WHERE_DYNAMIC_CONSU;

	END IF;

	/* Concat paging section */
	SQL_DYNAMICPAGING := 
	'	) SalesPersonClients )
	SELECT ''' || InstallationId || ''' AS InstallationId, ' || WebAccountId || ' AS WebAccountId, PAGING.AddressBookType, PAGING.AddressNumber, PAGING.ContactId, PAGING.CommissionRate, 
			PAGING.CustomerName, PAGING.PersistentShoppingCart, PAGING.AddressLine1, PAGING.AddressLine2, PAGING.AddressLine3, PAGING.AddressLine4,
			PAGING.City, PAGING.State, PAGING.ZipCode, PAGING.Country, [SCLIBRARY].CMM_GetUserDefinedCodeFnc(''00'',''CN'', PAGING.Country, ''' || LangPref || ''')  AS CountryDescription, 
			PAGING.CompanyName, PAGING.IndividualCompanyFlag, PAGING.TotalRowCount 
	FROM PAGING
	WHERE 
		((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';

	IF (ConsumerCount > 0) THEN
		OPEN ResultData1 FOR SQL_DYNAMIC || SQL_DYNAMICUNION || SQL_DYNAMICPAGING USING CurrentJulianDate, InstallationId, WebAccountId, CustomerName, AddressNumber, 
								AddressLine1, City, State, ZipCode, Country, InstallationId, WebAccountId, CustomerName, AddressNumber, AddressLine1, 
								City, State, ZipCode, Country, PageIndex, PageSize, RowStart, RowEnd;
	ELSE
		OPEN ResultData1 FOR SQL_DYNAMIC || SQL_DYNAMICUNION || SQL_DYNAMICPAGING USING CurrentJulianDate, InstallationId, WebAccountId, CustomerName, AddressNumber, 
								AddressLine1, City, State, ZipCode, Country, PageIndex, PageSize, RowStart, RowEnd;
	END IF;

END;
 
  /
-- #desc					Read Web Site Most Viewed Items 
-- #bl_class				Premier.Ecommerce.SalesPersonClients
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param InstallationId	Installation Id			
-- #param WebAccountId		Web Account Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetSalesPersonClients
(
	InstallationId				NVARCHAR2,
	WebAccountId				DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
OPEN ResultData1 FOR
	SELECT 
	    SPC.SP$9INID AS InstallationId,			
		SPC.SP$9WAN8 AS WebAccountId,				
		SPC.SP$9TYP	AS AddressBookType,	
		SPC.SP$9AN8	AS AddressNumber,
		SPC.SPIDLN	AS ContactId,
		SPC.SPCMR1	AS CommissionRate,
		CASE SPC.SP$9TYP 
            WHEN 0 THEN TO_NCHAR(CUST.WWMLNM)
			ELSE TO_NCHAR(CONS.PCMLNM)
		END AS CustomerName,	   	
		SPC.SP$9HTML AS PersistentShoppingCart,
		SPC.SPUPDJ	AS LastPickDate,
		SPC.SPMUPT	AS TimeUpd,
		SPC.SPKCOO	AS OrderCompany,
		SPC.SPDOCO	AS OrderNumber,
		SPC.SPDCTO	AS OrderType,
		SPC.SPTRDJ	AS OrderDate,
		SPC.SPOTOT	AS AmmountOrderGross,
		SPC.SPURAB	AS UserReservedNumber,			
		SPC.SPURAT	AS UserReservedAmount,	
		SPC.SPURCD	AS UserReservedCode,		
		SPC.SPURDT	AS UserReservedDate,			
		SPC.SPURRF	AS UserReservedReference,
		SPC.SPUSER	AS UserId,						
		SPC.SPPID	AS ProgramId,					
		SPC.SPUPMJ	AS DateUpdated,				
		SPC.SPUPMT	AS TimeLastUpdated,			
		SPC.SPJOBN	AS JobNumber
	FROM [SCDATA].FQ67125 SPC
	LEFT OUTER JOIN [SCDATA].F0111 CUST
		ON CUST.WWAN8 = SPC.SP$9AN8 AND 
		CUST.WWIDLN = 0 AND
		SPC.SP$9TYP = 0 --Customer Only
	LEFT OUTER JOIN	[SCDATA].FQ67303 CONS
		ON SPC.SP$9AN8 = CONS.PC$9AN8 AND 
		CONS.PCIDLN = 0 AND
		SPC.SP$9TYP = 1 --Consumer Only
	WHERE SPC.SP$9INID = InstallationID
	AND SPC.SP$9WAN8 = WebAccountId
	ORDER BY SPC.SP$9TYP, SPC.SP$9AN8;
END;
 
  /
-- #desc							Get the Saved Cart			
-- #bl_class						Premier.eCommerce.SavedCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			InstallationID 
-- #param AddressNumberID			Address Number ID
-- #param UniqueKeyID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetSavedCart
(
	InstallationID	IN NVARCHAR2,
	AddressNumberID	IN DECIMAL,
	UniqueKeyID		IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
OPEN ResultData1 FOR
	SELECT	
		WA$9INID	AS InstallationID,
		WA$9WAN8	AS WebAccountID,
		WAUKID		AS UniqueKeyID,
		WA$9AN8		AS AddressNumber,	
		WAIDLN		AS ContactID,	
		WA$9TYP		AS AddressType,
		NVL(WWMLNM,PCMLNM) AS MailingName,
		WAPDSC		AS Description,
		WAQTY		AS Quantity,
		WA$9SHFLG	AS ShareFlag,
		WAUPDTDATE  AS DateSaved,
		WAMUPT		AS TimeSaved,
		WAKCOO		AS OrderCompany,
		WADOCO		AS OrderNumber,
		WADCTO		AS OrderType,
		WATRDJ		AS TransactionDate,
		WA$9HTML	AS ItemList
	FROM [SCDATA].FQ679913
	LEFT OUTER JOIN [SCDATA].F0111
		ON	WA$9AN8 = WWAN8
		AND WAIDLN = WWIDLN
		AND WA$9TYP IN (0,2) --Customer Only
	LEFT OUTER JOIN [SCDATA].FQ67303 CONS
		ON WA$9AN8 = CONS.PC$9AN8 AND 
		CONS.PCIDLN = WAIDLN
		AND WA$9TYP = 1 --Consumer Only
	WHERE          
		WA$9INID = InstallationID			
		AND WA$9AN8  = AddressNumberID
		AND WAUKID = UniqueKeyID;
END; 
  /
-- #desc					Get the Saved Cart List	
-- #bl_class				Premier.eCommerce.SavedCartList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param InstallationID	Installation ID		
-- #param ContactID			Contact ID
-- #param AddressBookType	Web Account Address Type		
-- #param AddressNumber		Web Account AN8

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetSavedCartList
(
	InstallationID	NVARCHAR2,
	ContactID		DECIMAL,
	AddressType		DECIMAL,
	AddressNumber	DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
OPEN ResultData1 FOR
	SELECT 
		A.WA$9WAN8	AS WebAccountID,
		A.WAUKID	AS UniqueKeyID,
		A.WAPDSC	AS Description,
		A.WA$9SHFLG AS ShareFlag,
		A.WAQTY		AS Quantity,
		A.WA$9AN8   AS AddressNumberID,
		(CASE WHEN A.WA$9TYP = 0 THEN 
			NVL(CUST.WWMLNM, '')
			ELSE NVL(CONS.PCMLNM, '') 
		END) AS MailingName,
		(CASE WHEN WA.WA$9TYP = 2 
			THEN 'Y' ELSE 'N'
		END) AS SalesPersonFlag,
		A.WAUPDTDATE  AS DateSaved
	FROM [SCDATA].FQ679913 A
	INNER JOIN [SCDATA].FQ67101 WA
        ON WA.WA$9WAN8 = A.WA$9WAN8
	LEFT OUTER JOIN [SCDATA].F0111 CUST
		ON CUST.WWAN8 = WA.WA$9AN8 
		AND CUST.WWIDLN = WA.WAIDLN  
		AND A.WA$9TYP = 0 /*Customer Only*/
	LEFT OUTER JOIN [SCDATA].FQ67303 CONS
		ON CONS.PC$9AN8 = WA.WA$9AN8  
		AND CONS.PCIDLN = WA.WAIDLN  
		AND A.WA$9TYP = 1 /*Consumer Only*/
	WHERE 
		A.WA$9INID = InstallationID
		AND A.WA$9TYP = AddressType
		AND A.WA$9AN8 = AddressNumber
		AND (TRIM(A.WA$9SHFLG) = 'Y' OR A.WAIDLN = ContactID) 
	ORDER BY Description;
END;
  /
-- #desc							Get the Web Account List by Installation
-- #bl_class						Premier.eCommerce.WebAccountUserList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param InstallationList			Installation List
--	#param AddressBookNumber		AddressBookNumber
--	#param FilterTerm				FilterTerm
--	#param AddressBookType			AddressBookType
--  #param AccountDisable			AccountDisable
--	#param PageIndex				PageIndex		
--  #param PageSize					PageSize

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWebAccountUserList
(
	InstallationList	IN NCHAR,
	AddressBookNumber	IN NUMBER,
	FilterTerm			IN NVARCHAR2,
	AddressBookType     IN NUMBER,
	AccountDisable		IN NUMBER,
	PageIndex			IN INT,
    PageSize			IN INT,
    ResultData1 OUT GLOBALPKG.refcursor
)
AS
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
	RowEnd INT := (PageIndex * PageSize);
BEGIN
	
	OPEN ResultData1 FOR
	WITH CTE AS (
		SELECT 
			WUSR.WAEMAL								AS webAccountUser, 
			WUSR.WA$9WAN8							AS WebAccountID, 
			WUSR.WA$9USER							AS UserID,
			SQ.US$9SQ								AS SecretQuestion,
			SQ.US$9ANS								AS SecretAnswer,
			WUSR.WA$9TYP							AS AddressBookType, 
			WUSR.WA$9AN8							AS AddressNumber,   
			WUSR.WAIDLN								AS ContactID,
			NVL(CUST.WWMLNM,CONS.PCMLNM)			AS MailingName,
			NVL(CUSTCOMP.WWMLNM,CONSCOMP.PCMLNM)	AS CompanyName,  
			NVL(SQ.US$9SFAD, 1)						AS AccountDisable,
			NVL(SQ.US$9SFAL, 1)						AS  AccountLockout,
			NVL(EXT.PS$9ICF,0)						AS IndividualCompanyFlag,
			WUSR.WAACTDATE							AS LastLoginDate,
			WUSR.WAACTTIME							AS LastLoginTime,
			SQ.USLNGP								AS LanguagePreference,
			ROW_NUMBER() OVER (ORDER BY WAEMAL)		AS RNUM 
		FROM [SCDATA].FQ67101 WUSR 
		INNER JOIN [SCDATA].FQ67996 INBU	/* Installation By User */
			ON INBU.UI$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].FQ67107 EXT /* Profile Extended Information */
			ON EXT.PS$9AN8 = WUSR.WA$9AN8
			AND EXT.PS$9TYP = CASE AddressBookType WHEN 2 THEN 0 ELSE WUSR.WA$9TYP END
		LEFT OUTER JOIN [SCDATA].FQ67991 SQ
			ON SQ.US$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].F0111 CUST
			ON CUST.WWAN8 = WUSR.WA$9AN8 
			AND CUST.WWIDLN = WUSR.WAIDLN 
			AND WUSR.WA$9TYP IN (0, 2) /*Customer and Internal Sales Person Only*/
		LEFT OUTER JOIN [SCDATA].FQ67303 CONS
			ON CONS.PC$9AN8 = WUSR.WA$9AN8 
			AND CONS.PCIDLN = WUSR.WAIDLN 
			AND WUSR.WA$9TYP = 1 /* Consumer Only */
		LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
			ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
			AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
			AND WUSR.WA$9TYP IN (0, 2)  /*Customer and Internal Sales Person Only*/
			AND EXT.PS$9ICF = 1 /* Company Only */  
		LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
			ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
			AND CONSCOMP.PCIDLN = 0 /*Company Name*/
			AND WUSR.WA$9TYP = 1 /*Consumer Only*/
			AND EXT.PS$9ICF = 1 /* Company Only */
		WHERE
			(AddressBookNumber = 0 OR WUSR.WA$9AN8 = AddressBookNumber) /* AddressBookNumber Filter */
			AND (AddressBookType = 9 OR WUSR.WA$9TYP = AddressBookType)
			AND (AccountDisable = 2 OR SQ.US$9SFAD = AccountDisable)
			AND (FilterTerm = '*' OR  UPPER(WUSR.WAEMAL) LIKE '%' || FilterTerm || '%' OR UPPER(CUST.WWMLNM) LIKE '%' || FilterTerm || '%' OR UPPER(CONS.PCMLNM) LIKE '%' || FilterTerm || '%' OR UPPER(CUSTCOMP.WWMLNM) LIKE '%' || FilterTerm || '%'  OR UPPER(CONSCOMP.PCMLNM) LIKE '%' || FilterTerm || '%') /*FilterTerm Filter*/
			AND InstallationList LIKE '%' || INBU.UI$9INID || '%'
	)
	SELECT
		A.WebAccountUser, 
		A.WebAccountID, 
		A.UserID,
		A.SecretQuestion,
		A.SecretAnswer,
		A.AddressBookType, 
		A.AddressNumber,   
		A.ContactID,
		A.MailingName,
		A.CompanyName,
		A.AccountDisable,
		A.AccountLockout,
		A.IndividualCompanyFlag,
		A.LastLoginDate,
		A.LastLoginTime,
		A.LanguagePreference,
		(SELECT COUNT(1) FROM CTE) AS TotalRowCount
	FROM CTE A
	WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));
END;
  /
-- #desc					Get Web Account Consumer Contact List
-- #bl_class	 	 		Premier.eCommerce.WebAccountContactList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation
-- #param AddressNumber		Address Number
-- #param WebAccountStatus	WebAccountStatus	
-- #param ReturnContactZero	Return Contact Zero	
-- #param Name				Contact Name
-- #param EmailAddress		Email Address
-- #param SortBy			Sort by
-- #param SortDir			Sort Direction (A = Ascendant, D = Descendant) 
-- #param PageIndex         Page Index
-- #param PageSize          Page Size
		
CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWebAcctConsContactList
(
	InstallationID  IN NCHAR,
	AddressNumber	IN NUMBER,
	WebAccountStatus IN NUMBER,
	ReturnContactZero IN NUMBER,
	Name			IN NCHAR,
	EmailAddress	IN NVARCHAR2,
	SortBy			IN NVARCHAR2,
	SortDir			IN NVARCHAR2,
	PageIndex       IN INT,
    PageSize        IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

	SQL_DYNAMIC		VARCHAR2(4000);
	INNER_DYNAMIC	NVARCHAR2(500) := ' ';
	WHERE_DYNAMIC	NVARCHAR2(1000) := ' ';
	SORT_CONDITION  NVARCHAR2(50);

    /* Gets the Document Restrictions Parameters */
	AdminConstant	NCHAR(4);
    CtRestric	NVARCHAR2(1);
    CtINID		NCHAR(3);
    CtConstant	NCHAR(10);

	/* Paging */
	RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
	RowEnd INT := (PageIndex * PageSize);

BEGIN
	AdminConstant := 'EADM';
    CtINID := InstallationID;
    [SCLIBRARY].CMM_GetConstantValue('CT_RESTRIC', CtINID, CtRestric);
    
	IF (CtRestric = N'1') THEN
		INNER_DYNAMIC := N' INNER JOIN [SCDATA].FQ67008 DR
				ON DR.DRKY = CON.PCTYC
				AND DR.DR$9INID =  ''' || CtINID || N'''
				AND DR.DR$9CNST = ''CT_RESTRIC''';
	END IF;

	IF (ReturnContactZero = 1) THEN /* 1 = No*/
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND CON.PCIDLN > 0 ';
	END IF;

	IF (WebAccountStatus = 3) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND WA.WA$9WAN8 IS NULL ';
	END IF;

	IF (WebAccountStatus = 0 OR WebAccountStatus = 1) THEN /* 0 = Inactive, 1 = Active */
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND (USR.US$9SFAD = :WebAccountStatus OR (CON.PCIDLN = 0 AND :ReturnContactZero = 0)) ';/*0 = Yes*/
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND (1 = 1 OR :WebAccountStatus NOT IN (0, 1)) AND (1 = 1 OR :ReturnContactZero NOT IN (0, 1)) ';
	END IF;

	IF (Name <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND UPPER(CON.PCMLNM) LIKE ''%'' || :Name || ''%'' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND (1 = 1 OR :Name = ''*'') ';
	END IF;

	IF (EmailAddress <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND UPPER(CON.PCEMAL) LIKE ''%'' || :EmailAddress || ''%'' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND (1 = 1 OR :EmailAddress = ''*'') ';
	END IF;

	/*Sort*/
	IF (SortBy = 'EmailAddress') THEN
		IF(SortDir = 'A') THEN
			SORT_CONDITION := 'UPPER(CON.PCEMAL) ASC';
		ELSE
			SORT_CONDITION := 'UPPER(CON.PCEMAL) DESC';
		END IF;
	ELSE	
		IF(SortDir = 'D') THEN
			SORT_CONDITION := 'UPPER(CON.PCMLNM) DESC';
		ELSE
			SORT_CONDITION := 'UPPER(CON.PCMLNM) ASC';
		END IF;
	END IF;

	SQL_DYNAMIC := N'
	WITH CTE AS 
	(	SELECT  
			CON.PCIDLN				AS ContactID,
			CON.PCMLNM				AS MailingName, 
			NVL(WA.WA$9WAN8, 0)	    AS WebAccountID,
			NVL(USR.US$9USRN,'''')    AS UserName,
			CON.PCEMAL				AS EmailAddress,
			CON.PCSLNM 				AS ContactTitle,
			NVL(USR.US$9SFAD, 1)	    AS AccountDisable,		/*Default is Inactive*/
			NVL(UP.UP$9PCD,'''')	    AS AdminPermission,
			NVL(CE.AB$9SHAN, 0)	    AS DefaultShipTo,
			CE.ABRCK7				AS ShipToContactId,
			CON.PCMLNM       	    AS ShipToMailingName,
			ROW_NUMBER() OVER (ORDER BY '|| SORT_CONDITION ||N') AS RNUM
		FROM
			[SCDATA].FQ67303 CON
			' || INNER_DYNAMIC || '
			LEFT OUTER JOIN [SCDATA].FQ67101 WA		/*WebAccount*/
				ON WA.WA$9INID = :InstallationID
				AND WA.WA$9TYP = 1
				AND WA.WA$9AN8 = CON.PC$9AN8	
				AND WA.WAIDLN = CON.PCIDLN

			LEFT OUTER JOIN [SCDATA].FQ67991 USR		/*User*/
			ON USR.US$9USER = WA.WA$9USER

			LEFT OUTER JOIN [SCDATA].FQ67997 UP		/*Return the admin permission*/
			ON UP.UP$9USER = USR.US$9USER
			AND UP.UP$9PCD = :AdminConstant 					/*User is an administrator*/

			LEFT OUTER JOIN [SCDATA].FQ67104 CE		/*Contact Extended*/
			ON CE.AB$9AN8 = CON.PC$9AN8
			AND CE.ABIDLN  = CON.PCIDLN
			AND CE.AB$9TYP = 1 

			LEFT OUTER JOIN  [SCDATA].FQ670302 PR	
			ON  PR.PR$9AN8 = CE.AB$9SHAN	
		WHERE
			CON.PC$9AN8 = :AddressNumber ' || WHERE_DYNAMIC ||'
	)SELECT ContactID, MailingName, WebAccountID, UserName, A.EmailAddress, ContactTitle, AccountDisable, AdminPermission, DefaultShipTo,
		ShipToContactId, ShipToMailingName, (SELECT COUNT(1) FROM CTE) TotalRowCount
	FROM
		CTE A
	WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd))';

	OPEN ResultData1 FOR SQL_DYNAMIC USING InstallationID, AdminConstant, AddressNumber, WebAccountStatus, ReturnContactZero, Name, EmailAddress,
										PageIndex, PageSize, RowStart, RowEnd;

END;


  /
-- #desc						Get Web Account Customer Contact List
-- #bl_class	 	 			Premier.eCommerce.WebAccountContactList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation
-- #param AddressNumber		    Address Number
-- #param WebAccountStatus		WebAccountStatus
-- #param ReturnContactZero		Return Contact Zero
-- #param Name					Contact Name
-- #param EmailAddress			Email Address
-- #param SortBy				Sort by
-- #param SortDir				Sort Direction (A = Ascendant, D = Descendant) 
-- #param PageIndex				Page Index
-- #param PageSize				Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWebAcctCustContactList
(
	InstallationID		IN NCHAR,
	AddressNumber		IN NUMBER,
	WebAccountStatus	IN NUMBER,
	ReturnContactZero	IN NUMBER,
	Name				IN NCHAR,
	EmailAddress		IN NVARCHAR2,
	SortBy				IN NVARCHAR2,
	SortDir				IN NVARCHAR2,
	PageIndex			IN INT,
    PageSize			IN INT,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

	SQL_DYNAMIC		VARCHAR2(4000);
	INNER_DYNAMIC	NVARCHAR2(500) := ' ';
	WHERE_DYNAMIC	NVARCHAR2(1000) := ' ';
	SORT_CONDITION  NVARCHAR2(50);

    /* Gets the Document Restrictions Parameters */
	AdminConstant	NCHAR(4);
	CtRestric	NVARCHAR2(1);
	CtINID		NCHAR(3);

	/* Paging */
    RowStart INT := ((PageSize * PageIndex) - PageSize + 1);
    
    RowEnd INT := (PageIndex * PageSize);
	
BEGIN
	AdminConstant := 'EADM';
	CtINID := InstallationID;
	[SCLIBRARY].CMM_GetConstantValue('CT_RESTRIC', CtINID, CtRestric);
							
	IF (CtRestric = N'1') THEN
		INNER_DYNAMIC := N' INNER JOIN [SCDATA].FQ67008 DR
				ON DR.DRKY = CON.WWTYC
				AND DR.DR$9INID =  ''' || CtINID || N'''
				AND DR.DR$9CNST = ''CT_RESTRIC''';
	END IF;

	IF (ReturnContactZero = 1) THEN /* 1 = No*/
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND CON.WWIDLN > 0 ';
	END IF;

	IF (WebAccountStatus = 3) THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND WA.WA$9WAN8 IS NULL ';
	END IF;

	IF (WebAccountStatus = 0 OR WebAccountStatus = 1) THEN /* 0 = Inactive, 1 = Active */
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND (USR.US$9SFAD = :WebAccountStatus OR (CON.WWIDLN = 0 AND :ReturnContactZero = 0)) '; /*0 = Yes*/
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND (1 = 1 OR :WebAccountStatus NOT IN (0, 1)) AND (1 = 1 OR :ReturnContactZero NOT IN (0, 1)) ';
	END IF;

	IF (Name <> '*') THEN
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND UPPER(CON.WWMLNM) LIKE ''%'' || :Name || ''%'' ';
	ELSE
		WHERE_DYNAMIC := WHERE_DYNAMIC || N'AND (1 = 1 OR :Name = ''*'') ';
	END IF;

	/*Sort*/
	IF (SortBy = 'EmailAddress') THEN
		IF(SortDir = 'A') THEN
			SORT_CONDITION := 'UPPER(CTE.EmailAddress) ASC';
		ELSE
			SORT_CONDITION := 'UPPER(CTE.EmailAddress) DESC';
		END IF;
	ELSE	
		IF(SortDir = 'D') THEN
			SORT_CONDITION := 'UPPER(CTE.MailingName) DESC';
		ELSE
			SORT_CONDITION := 'UPPER(CTE.MailingName) ASC';
		END IF;
	END IF;

	SQL_DYNAMIC := N'
	WITH CTE AS	(
		SELECT  
			CON.WWIDLN				AS ContactID,
			CON.WWMLNM				AS MailingName,
			NVL(WA.WA$9WAN8, 0)	    AS WebAccountID,
			NVL(USR.US$9USRN,'''')  AS UserName,
			NVL(EA.EAEMAL, '' '')			AS EmailAddress,
			CON.WWATTL 				AS ContactTitle,		
			NVL(USR.US$9SFAD, 1)	AS AccountDisable,		/*Default is Inactive*/
			NVL(UP.UP$9PCD,'''')    AS AdminPermission,
			NVL(CE.AB$9SHAN, 0)	    AS DefaultShipTo,
			CE.ABRCK7				AS ShipToContactId,
			SHIP.WWMLNM  			AS ShipToMailingName,
			ROW_NUMBER() OVER(PARTITION BY CON.WWAN8, CON.WWIDLN ORDER BY EAEHIER DESC, EARCK7 DESC) AS ERNUM
		FROM
			[SCDATA].F0111 CON									/*CustomerContact*/
			' || INNER_DYNAMIC || '
			LEFT OUTER JOIN [SCDATA].FQ67101 WA					/*WebAccount*/
				ON WA.WA$9INID = :InstallationID
				AND WA.WA$9TYP IN (0,2)
				AND WA.WA$9AN8 = :AddressNumber 	
				AND WA.WAIDLN  = CON.WWIDLN
			
			LEFT OUTER JOIN [SCDATA].FQ67991 USR					/*User*/
				ON WA.WA$9USER = USR.US$9USER
		 			 
			LEFT OUTER JOIN [SCDATA].FQ67997 UP					/*Return the admin permission*/	
				ON UP.UP$9USER = USR.US$9USER
				AND UP.UP$9PCD = :AdminConstant		/*User is an administrator*/
			
			LEFT OUTER JOIN [SCDATA].FQ67104 CE					/*Contact Extended*/
				 ON CE.AB$9AN8 = :AddressNumber
				 AND CE.ABIDLN = CON.WWIDLN
				 AND CE.AB$9TYP = 0       
			LEFT OUTER JOIN  [SCDATA].F0111 SHIP					/*Shipto*/
				ON  SHIP.WWAN8 = CE.AB$9SHAN
				AND SHIP.WWIDLN = CE.ABRCK7 
			LEFT OUTER JOIN [SCDATA].F01151 EA
				ON EA.EAETP = ''E''
				AND EA.EAAN8 = :AddressNumber
				AND EA.EAIDLN = CON.WWIDLN
		WHERE
			CON.WWAN8 = :AddressNumber ' || WHERE_DYNAMIC || N'
	), CONTACTS AS (
		SELECT CTE.*, ROW_NUMBER() OVER (ORDER BY ' || SORT_CONDITION || ') AS RNUM 
		FROM CTE 
		WHERE 
			CTE.ERNUM = 1 ';

		IF (EmailAddress <> '*') THEN
			SQL_DYNAMIC := SQL_DYNAMIC || N' AND UPPER(CTE.EmailAddress) LIKE ''%'' || :EmailAddress || ''%'' ';
		ELSE
			SQL_DYNAMIC := SQL_DYNAMIC || N' AND (1 = 1 OR :EmailAddress = ''*'') ';
		END IF;

	SQL_DYNAMIC := SQL_DYNAMIC || N')
	SELECT ContactID, 
			MailingName, 
			WebAccountID, 
			UserName,
			A.EmailAddress, 
			ContactTitle, 
			AccountDisable, 
			AdminPermission, 
			DefaultShipTo,
			ShipToContactId, 
			ShipToMailingName, 
			(SELECT COUNT(1) FROM CONTACTS) AS TotalRowCount 
	FROM
		CONTACTS A
	WHERE ((:PageIndex = 0 OR :PageSize = 0) OR (RNUM BETWEEN :RowStart AND :RowEnd)) ';

OPEN ResultData1 FOR SQL_DYNAMIC USING InstallationID, AddressNumber, AdminConstant, AddressNumber, AddressNumber, AddressNumber,
										WebAccountStatus, ReturnContactZero, Name, EmailAddress,
										PageIndex, PageSize, RowStart, RowEnd;

END;
  /

-- #desc						Get Web Account User Information By ID
-- #bl_class					Premier.eCommerce.WebAccountUserInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param WebAccountId			WebAccountId

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWebAcctUserInfoByID
(
    InstallationID  IN NVARCHAR2,
	WebAccountId	IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
    AddressBookType DECIMAL;
BEGIN
    BEGIN
        SELECT 
            WA$9TYP INTO AddressBookType 
        FROM 
            [SCDATA].FQ67101 
        WHERE 
            ROWNUM < 2
        AND WA$9INID = InstallationID
        AND WA$9WAN8 = WebAccountId;
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        AddressBookType := 1;
     END;
  
    IF(AddressBookType = 1)
        THEN
     OPEN ResultData1 FOR
            SELECT
		        WUSR.WAEMAL					AS	webAccountUser,
		        WUSR.WA$9WAN8				AS	WebAccountID,
		        WUSR.WA$9USER				AS	UserID,
		        SQ.US$9SQ					AS  SecretQuestion,
				SQ.US$9ANS					AS  SecretAnswer,
		        AddressBookType				AS	AddressBookType,
		        WUSR.WA$9AN8				AS	AddressNumber,
		        WUSR.WAIDLN					AS	ContactID,  
		        CONT.PCMLNM					AS  MailingName,  /*CONSUMER [SCDATA].FQ67303 1*/
				NVL(CONSCOMP.PCMLNM, '')	AS	CompanyName, 
				NVL(SQ.US$9SFAD, 1)			AS  AccountDisable,
				NVL(SQ.US$9SFAL, 1)			AS  AccountLockout,
		        NVL(EXT.PS$9ICF,0)			AS  IndividualCompanyFlag,
		        WAACTDATE					AS	LastLoginDate,
		        WAACTTIME					AS	LastLoginTime,
				SQ.USLNGP					AS	LanguagePreference
			FROM
				[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
					ON WUSR.WA$9USER = INBU.UI$9USER
				LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
					ON WUSR.WA$9TYP = EXT.PS$9TYP
					AND WUSR.WA$9AN8 = EXT.PS$9AN8
				LEFT OUTER JOIN [SCDATA].FQ67991 SQ
					ON SQ.US$9USER = WUSR.WA$9USER
				LEFT OUTER JOIN [SCDATA].FQ67303 CONT
					ON WUSR.WA$9AN8 = CONT.PC$9AN8 AND 
					WUSR.WAIDLN = CONT.PCIDLN
				LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
					ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
					AND CONSCOMP.PCIDLN = 0 /*Company Name*/
			WHERE
				INBU.UI$9INID = InstallationID
				AND WUSR.WA$9WAN8 = WebAccountId;	
    ELSE
    OPEN ResultData1 FOR
        SELECT
	        WUSR.WAEMAL					AS	webAccountUser,
	        WUSR.WA$9WAN8				AS	WebAccountID,
	        WUSR.WA$9USER				AS	UserID,
		    SQ.US$9SQ					AS  SecretQuestion,
			SQ.US$9ANS					AS  SecretAnswer,
		    AddressBookType				AS	AddressBookType,
	        WUSR.WA$9AN8				AS	AddressNumber,
	        WUSR.WAIDLN					AS	ContactID,  
		    CONT.WWMLNM					AS MailingName,		/*CUSTOMER F0111 0*/
			NVL(CUSTCOMP.WWMLNM, '')	AS	CompanyName,
			NVL(SQ.US$9SFAD, 1)			AS  AccountDisable,
			NVL(SQ.US$9SFAL, 1)			AS  AccountLockout,
		    NVL(EXT.PS$9ICF,0)			AS IndividualCompanyFlag,
	        WAACTDATE					AS	LastLoginDate,
	        WAACTTIME					AS	LastLoginTime,
			SQ.USLNGP					AS	LanguagePreference
       FROM
			[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
			ON WUSR.WA$9USER = INBU.UI$9USER	
			LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
				ON 0 = EXT.PS$9TYP    /*Compare with 0 because join is with customers table in JDEdwards*/
				AND WUSR.WA$9AN8 = EXT.PS$9AN8
			LEFT OUTER JOIN [SCDATA].FQ67991 SQ
				ON SQ.US$9USER = WUSR.WA$9USER
			LEFT OUTER JOIN [SCDATA].F0111 CONT
				ON CONT.WWAN8 = WUSR.WA$9AN8 AND 
				CONT.WWIDLN = WUSR.WAIDLN	
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
				ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
				AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
		WHERE
			INBU.UI$9INID = InstallationID
			AND WUSR.WA$9WAN8 = WebAccountId;
       
    END IF;
END;
  /
-- #desc						Get Web Account User Information By Name
-- #bl_class					Premier.eCommerce.WebAccountUserInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param UserID				WebUserName

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWebAcctUserInfoByName
(
    InstallationID  IN NVARCHAR2,
	WebUserName		IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)

AS
    AddressBookType DECIMAL;
BEGIN
    BEGIN
        SELECT 
            WA$9TYP INTO AddressBookType 
        FROM 
            [SCDATA].FQ67101 
        WHERE 
            ROWNUM < 2
        AND wa$9inid = InstallationID
        AND UPPER(TRIM(WAEMAL)) = UPPER(TRIM(WebUserName));
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        AddressBookType := 1;
     END;

    IF(AddressBookType = 1)  /*Validation if account is Consumer*/
        THEN
        OPEN ResultData1 FOR
            SELECT
		        WUSR.WAEMAL					AS	webAccountUser,
		        WUSR.WA$9WAN8				AS	WebAccountID,
		        WUSR.WA$9USER				AS	UserID,
		        SQ.US$9SQ					AS  SecretQuestion,
				SQ.US$9ANS					AS  SecretAnswer,
		        AddressBookType				AS	AddressBookType,
		        WUSR.WA$9AN8				AS	AddressNumber,
		        WUSR.WAIDLN					AS	ContactID,  
		        CONT.PCMLNM					AS  MailingName, /*CONSUMER [SCDATA].FQ67303 1*/
				NVL(CONSCOMP.PCMLNM, '')	AS	CompanyName, 
				NVL(SQ.US$9SFAD, 1)			AS  AccountDisable,
				NVL(SQ.US$9SFAL, 1)			AS  AccountLockout,
		        NVL(EXT.PS$9ICF,0)			AS  IndividualCompanyFlag,
		        WAACTDATE					AS	LastLoginDate,
		        WAACTTIME					AS	LastLoginTime,
				SQ.USLNGP					AS	LanguagePreference
			FROM
				[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
					ON WUSR.WA$9USER = INBU.UI$9USER
				LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
					ON WUSR.WA$9TYP = EXT.PS$9TYP
					AND WUSR.WA$9AN8 = EXT.PS$9AN8
				LEFT OUTER JOIN [SCDATA].FQ67991 SQ
					ON SQ.US$9USER = WUSR.WA$9USER
				LEFT OUTER JOIN [SCDATA].FQ67303 CONT
					ON WUSR.WA$9AN8 = CONT.PC$9AN8 AND 
					WUSR.WAIDLN = CONT.PCIDLN
				LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
					ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
					AND CONSCOMP.PCIDLN = 0 /*Company Name*/
			WHERE
				INBU.UI$9INID = InstallationID
				AND UPPER(TRIM(WUSR.WAEMAL)) = UPPER(TRIM(WebUserName));	
    ELSE   /*Validation if account is Customer or Internal Sales Person*/
    OPEN ResultData1 FOR
	        SELECT
		        WUSR.WAEMAL					AS	webAccountUser,
		        WUSR.WA$9WAN8				AS	WebAccountID,
		        WUSR.WA$9USER				AS	UserID,
		        SQ.US$9SQ					AS  SecretQuestion,
				SQ.US$9ANS					AS  SecretAnswer,
		        AddressBookType				AS	AddressBookType,
		        WUSR.WA$9AN8				AS	AddressNumber,
		        WUSR.WAIDLN					AS	ContactID,  
		        CONT.WWMLNM					AS  MailingName,		/*CUSTOMER F0111 0*/
				NVL(CUSTCOMP.WWMLNM, '')	AS	CompanyName,
				NVL(SQ.US$9SFAD, 1)			AS  AccountDisable,
				NVL(SQ.US$9SFAL, 1)			AS  AccountLockout,
		        NVL(EXT.PS$9ICF,0)			AS  IndividualCompanyFlag,
		        WAACTDATE					AS	LastLoginDate,
		        WAACTTIME					AS	LastLoginTime,
				SQ.USLNGP					AS	LanguagePreference
	        FROM
				[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
					ON WUSR.WA$9USER = INBU.UI$9USER
				LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
					ON 0 = EXT.PS$9TYP  /*Compare with 0 because join is with customers table in JDEdwards*/
					AND WUSR.WA$9AN8 = EXT.PS$9AN8
				LEFT OUTER JOIN [SCDATA].FQ67991 SQ
					ON SQ.US$9USER = WUSR.WA$9USER
				LEFT OUTER JOIN [SCDATA].F0111 CONT
					ON CONT.WWAN8 = WUSR.WA$9AN8 AND 
					CONT.WWIDLN = WUSR.WAIDLN
				LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
					ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
					AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
			WHERE
				INBU.UI$9INID = InstallationID				
		        AND UPPER(TRIM(WUSR.WAEMAL)) = UPPER(TRIM(WebUserName));
        
    END IF;
END;
  /
-- #desc				        Get a Web Account Additional Info
-- #bl_class	 	 	        Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies		        N/A
-- #db_references		        N/A

-- #param Installation			Installation
-- #param ObjectType			Object Type
-- #param WebAccountID			WebAccountID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWebUserAdditionalInfo
(
	InstallationID   NVARCHAR2,
	ObjectType		 DECIMAL,
	WebAccountID	 DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS

BEGIN
     OPEN ResultData1 FOR
        SELECT 
            WI$9INID	AS InstallationId,
            WI$9UKID	AS UniquekeyID,
            WI$9OBJTY	AS ObjectType,
            WI$9WAN8	AS WebAccountID,
            WI$9HTML	AS XmlBody,
            WIGUID		AS SharedReference,
            WIURAB		AS UserReservedNumber,
            WIURAT		AS UserReservedAmount,
            WIURCD		AS UserReservedCode,
            WIURDT		AS UserReservedDate,
            WIURRF		AS UserReservedReference
        FROM
            [SCDATA].FQ67120 
        WHERE
                WI$9INID = InstallationID
            AND	WI$9OBJTY = ObjectType
            AND WI$9WAN8 = WebAccountID;
END;
  /
-- #bl_class				Premier.eCommerce.WishListHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param AddressType		AddressType 0 = CUSTOMER, 1 = CONSUMER
-- #param InstallationID	Installation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWishHeaderListByAddNo
(
	AddressNumber IN DECIMAL,
	AddressType IN DECIMAL,
	InstallationID IN NVARCHAR2,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT
			B.WH$9WAN8 AS WebAccountID,
			B.WHSEQ    AS	WishListID,
			B.WHDESC   AS	WishListDesc
		FROM 
			[SCDATA].FQ67101 A -- Web accounts
			INNER JOIN
			[SCDATA].FQ674214 B-- Wish List Header
			ON A.WA$9WAN8 = B.WH$9WAN8
		WHERE 
			A.WA$9AN8 = AddressNumber
			AND 
			A.WA$9TYP = AddressType
			AND 
			A.WA$9INID = InstallationID;
END;

  /
-- #bl_class				Premier.eCommerce.WishListHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param WebAccountID		WebAccount ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWishListHeaderList
(
	WebAccountID IN DECIMAL,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
BEGIN
    OPEN ResultData1 FOR
        SELECT 
	        WH$9WAN8 AS WebAccountID,
	        WHSEQ    AS	WishListID,
	        WHDESC   AS	wishListDesc
        FROM 
	        [SCDATA].FQ674214	-- Wish List Header
        WHERE 
	        WH$9WAN8 = WebAccountID
        ORDER BY WHSEQ ;
END;


  /
-- #bl_class						Premier.eCommerce.WishListHeader.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			InstallationID 
-- #param WebAccountID			    WebAccount ID
-- #param WishListID				WishListID ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetWishListLines
(
	InstallationID  IN NCHAR,
	WebAccountID	IN NUMBER,
	WishListID		IN NUMBER,
	ResultData1 OUT GLOBALPKG.refcursor
)
AS
	
	AddressNumber       NUMBER;	
	CurrentJulianDate	NUMBER(6,0);
	
	-- Gets Cust Cross Document Restrictions
	CustCrossRefType     NCHAR(2);
	CustCrossINID        NCHAR(3) := InstallationID;
	
BEGIN
	
    [SCLIBRARY].CMM_GetConstantValue('CUST_CROSS', CustCrossINID, CustCrossRefType);
        
    CurrentJulianDate := [SCLIBRARY].CMM_GetCurrentJulianDate (SYSDATE);
    
    BEGIN
        SELECT WA$9AN8 INTO AddressNumber
        FROM [SCDATA].FQ67101,  [SCDATA].FQ674214
        WHERE 
                ROWNUM < 2
            AND WA$9WAN8 = WH$9WAN8
            AND Wh$9WAN8  = WebAccountID;
        EXCEPTION WHEN NO_DATA_FOUND THEN 
        ADDRESSNUMBER := 0;
    END;
	
	OPEN ResultData1 FOR
        SELECT 
	        WD.WD$9WAN8 AS WebAccountID,
	        WD.WDSEQ	AS WishListID,
	        WD.WDITM	AS ItemNumber,
	        WD.WDUORG	AS Quantity,
	        WD.WDUOM	AS UnitOfMeasure,
	        IM.IMLITM	AS LongItemNumber,
			IM.IMAITM	AS AuxItemNumber,
	        NVL(S.IVCITM,'')		AS RefProductNumber,
			IM.IMSTKT	AS StockingType
        FROM [SCDATA].FQ674215 WD		/* WISH LIST DETAIL */
		INNER JOIN [SCDATA].F4101 IM 	/* ITEM MASTER */
			ON IM.IMITM = WD.WDITM
		LEFT OUTER JOIN [SCDATA].F4104 S		/* CUSTOMER /ITEM Cross Ref Table */
			ON S.IVAN8 = AddressNumber
		    AND S.IVITM = WD.WDITM 
		    AND S.IVXRT = CustCrossRefType
		    AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
        WHERE 
			WD.WD$9WAN8  = WebAccountID
	        AND WD.WDSEQ = WishListID
        ORDER BY WDITM DESC;    
END;
  /
-- #desc				Save the persist shopping cart
-- #bl_class	 	 	Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE  [SCLIBRARY].ECO_UpdPersistentShoppingCart
(
	WebAccountId				IN decimal,
	InstallationID				IN NVARCHAR2,
	Quantity					IN Decimal,
	ItemsList					IN NCLOB,
	UserReservedNumber			IN DECIMAL,
	UserReservedAmount			IN DECIMAL,
	UserReservedCode			IN NVARCHAR2,
	UserReservedDate			IN DECIMAL,
	UserReservedReference		IN NVARCHAR2,
	UserID						IN NVARCHAR2,
	ProgramID					IN NVARCHAR2,
	DateUpdated					IN Decimal,
	TimeLastUpdated				IN Decimal,
	WorkStationID				IN NVARCHAR2
)
AS
	CNT INT := 0;
BEGIN
	SELECT COUNT(*) INTO CNT FROM [SCDATA].FQ6742WF WHERE WebAccountId = SH$9WAN8 AND InstallationID = SH$9INID;

	IF(CNT > 0)THEN
	
	UPDATE [SCDATA].FQ6742WF
		SET
			SHQTY = Quantity,			
			SH$9HTML = ItemsList,
			SHURAB = UserReservedNumber,
			SHURAT = UserReservedAmount,
			SHURCD = UserReservedCode,
			SHURDT = UserReservedDate,
			SHURRF = UserReservedReference,
			SHUSER = UserID,
			SHPID =  ProgramID,
			SHUPMJ = DateUpdated,
			SHUPMT = TimeLastUpdated,
			SHJOBN = WorkStationID
		WHERE WebAccountId = SH$9WAN8 AND InstallationID = SH$9INID;
		
		ELSE
		
		INSERT INTO 
		[SCDATA].FQ6742WF
		(
			SH$9WAN8,
			SH$9INID,
			SHQTY,			
			SH$9HTML,
			SHURAB,
			SHURAT,
			SHURCD,
			SHURDT,
			SHURRF,
			SHUSER,
			SHPID,
			SHUPMJ,
			SHUPMT,
			SHJOBN
		)
		values
		(
			WebAccountID,
			InstallationID,
			Quantity,
			ItemsList,
			UserReservedNumber,
			UserReservedAmount,
			UserReservedCode,
			UserReservedDate,
			UserReservedReference,
			UserID,
			ProgramID,
			DateUpdated,
			TimeLastUpdated,
			WorkStationID
		);
END IF;
END; 
  /
-- #desc				Save the Persist Shopping Cart of the Sales Person Client
-- #bl_class	 	 	Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_UpdSalePClientShopCart
(
	WebAccountId		IN DECIMAL,
	InstallationID		IN NVARCHAR2,
	ItemsList			IN NCLOB,
	SalesPersonClient   IN DECIMAL,
	UserID				IN NVARCHAR2,
	ProgramID			IN NVARCHAR2,
	DateUpdated			IN Decimal,
	TimeLastUpdated		IN Decimal,
	WorkStationID		IN NVARCHAR2
)
AS
BEGIN	
	UPDATE [SCDATA].FQ67125
		SET	
			SP$9HTML = ItemsList,
			SPUSER = UserID,
			SPPID =  ProgramID,
			SPUPMJ = DateUpdated,
			SPUPMT = TimeLastUpdated,
			SPJOBN = WorkStationID
		WHERE WebAccountId = SP$9WAN8 
			AND InstallationID = SP$9INID
			AND SalesPersonClient = SP$9AN8;
END;  
  /
-- #desc							Updated Sales Person Client
-- #bl_class						Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationId			InstallationId				
-- #param WebAccountId				WebAccountId	
-- #param AddressBookType			AddressBookType		
-- #param AddressNumber				AddressNumber
-- #param ContactId					ContactId
-- #param CommissionRate			CommissionRate
-- #param PersistentShoppingCart	PersistentShoppingCart
-- #param LastPickDate				LastPickDate
-- #param TimeLasUpdated			TimeLasUpdated
-- #param OrderCompany				OrderCompany
-- #param OrderNumber				OrderNumber
-- #param OrderType					OrderType
-- #param OrderDate					OrderDate
-- #param AmmountOrderGross			AmmountOrderGross
-- #param UserReservedNumber		UserReservedNumber			
-- #param UserReservedAmount		UserReservedAmount	
-- #param UserReservedCode			UserReservedCode	
-- #param UserReservedDate			UserReservedDate
-- #param UserReservedReference		UserReservedReference		
-- #param UserId					UserId					
-- #param ProgramId					ProgramId					
-- #param DateUpdated				DateUpdated				
-- #param TimeLastUpdated			TimeLastUpdated			
-- #param JobNumber					JobNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_UpdSalesPersonClient
(
	InstallationId				NVARCHAR2,
	WebAccountId				DECIMAL,
	AddressBookType				DECIMAL,
	AddressNumber				DECIMAL,
	ContactId					DECIMAL,
	CommissionRate				DECIMAL,
	PersistentShoppingCart		NCLOB,
	LastPickDate				DECIMAL,	
	TimeUpd						DECIMAL,	
	OrderCompany				NVARCHAR2,
	OrderNumber					DECIMAL,
	OrderType					NVARCHAR2,
	OrderDate					DECIMAL,
	AmmountOrderGross			DECIMAL,
	UserReservedNumber			DECIMAL,
	UserReservedAmount			DECIMAL,
	UserReservedCode			NVARCHAR2,
	UserReservedDate			DECIMAL,
	UserReservedReference		NVARCHAR2,
	UserId						NVARCHAR2,
	ProgramId					NVARCHAR2,
	DateUpdated					DECIMAL,	
	TimeLastUpdated				DECIMAL,
	JobNumber					NVARCHAR2
)
AS
BEGIN
	
	UPDATE 
		[SCDATA].FQ67125
	SET		
		SPCMR1		= CommissionRate,	
		SP$9HTML	= PersistentShoppingCart,
		SPUPDJ		= LastPickDate,
		SPMUPT		= TimeUpd,
		SPKCOO		= OrderCompany,
		SPDOCO		= OrderNumber,	
		SPDCTO		= OrderType,
		SPTRDJ		= OrderDate,
		SPOTOT		= AmmountOrderGross,
		SPURAB		= UserReservedNumber,
		SPURAT		= UserReservedAmount,
		SPURCD		= UserReservedCode,
		SPURDT		= UserReservedDate,
		SPURRF		= UserReservedReference,
		SPUSER		= UserId,
		SPPID		= ProgramId,
		SPUPMJ		= DateUpdated,
		SPUPMT		= TimeLastUpdated,
		SPJOBN		= JobNumber
	WHERE 
		SP$9INID = InstallationID
		AND SP$9WAN8 = WebAccountId
		AND SP$9AN8 = AddressNumber
		AND SPIDLN = ContactId;
END;
  /
-- #desc							New Saved Cart			
-- #bl_class						Premier.eCommerce.SavedCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			Installation ID 
-- #param WebAccountID				Web Account ID
-- #param AddressNumber				Address Number
-- #param ContactID					ContactID
-- #param AddressType				Address Type
-- #param ShareFlag					Share Flag
-- #param Description				Description
-- #param Quantity					Quantity
-- #param ItemsList					Items List
-- #param DateSaved					Date Saved
-- #param TimeSaved					Time Saved
-- #param OrderCompany				Order Company
-- #param OrderNumber				Order Number
-- #param OrderType					Order Type
-- #param TransactionDate			TransactionDate
-- #param UserReservedNumber		User Reserved Number 
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param DateUpdated				Date Updated
-- #param TimeLastUpdated			Time Last Updated
-- #param WorkStationID				WorkStation ID

CREATE OR REPLACE PROCEDURE  [SCLIBRARY].ECO_UpdSavedCart
(
	InstallationID				IN NCHAR,
	WebAccountID				IN NUMBER,	
	SavedCartType				IN NCHAR,
	AddressNumber				IN NUMBER,	
	ContactID					IN NUMBER,	
	AddressType					IN NUMBER,	
	ShareFlag					IN NCHAR,
	Description					IN NCHAR,
	Quantity					IN NUMBER,	
	ItemsList					IN NCLOB,
	DateSaved					IN NUMBER,
	TimeSaved					IN NUMBER,	
	OrderCompany				IN NCHAR,
	OrderNumber					IN NUMBER,	
	OrderType					IN NCHAR,
	TransactionDate				IN NUMBER,		
	UserReservedNumber			IN NUMBER,
	UserReservedAmount			IN NUMBER,
	UserReservedCode			IN NCHAR,
	UserReservedDate			IN NUMBER,
	UserReservedReference		IN NCHAR,
	UserID						IN NCHAR,
	ProgramID					IN NCHAR,
	DateUpdated					IN NUMBER,
	TimeLastUpdated				IN NUMBER,
	WorkStationID				IN NCHAR
)
AS
	UniqueKeyID     NUMBER;
BEGIN
		
	BEGIN
    SELECT NVL(MAX(WAUKID), 0) + 1 INTO UniqueKeyID FROM [SCDATA].FQ679913
		WHERE WA$9INID = InstallationID;
    EXCEPTION WHEN NO_DATA_FOUND THEN 
    UniqueKeyID := 1;
	END;

	INSERT INTO [SCDATA].FQ679913
	(
		WA$9WAN8,
		WA$9INID,		
		WAUKID,
		WA$9TYPECART,
		WA$9AN8,
		WAIDLN,
		WA$9TYP,
		WA$9SHFLG,
		WAPDSC,
		WAQTY,			
		WA$9HTML,			
		WAUPDTDATE,
		WAMUPT,			
		WAKCOO,
		WADOCO,
		WADCTO,
		WATRDJ,	
		WAURAB,
		WAURAT,
		WAURCD,
		WAURDT,
		WAURRF,
		WAUSER,
		WAPID,			
		WAUPMJ,
		WATDAY,			
		WAJOBN
	)
	VALUES
	(
		WebAccountID,
		InstallationID,
		UniqueKeyID,
		SavedCartType,
		AddressNumber,
		ContactID,
		AddressType,
		ShareFlag,
		Description,
		Quantity,	
		ItemsList,
		DateSaved,
		TimeSaved,
		OrderCompany,
		OrderNumber,
		OrderType,
		TransactionDate,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,			
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);
END; 
  /
-- #desc					Update Web Account Additional Info
-- #bl_class				Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param ObjectType		Object Type
-- #param WebAccountID		Web Account ID	
-- #param XmlBody			Xml Body
-- #param DateUpdated		Date Updated
-- #param TimeLastUpdated	Time Last Update

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_UpdWebUserAdditionalInfo
(
	InstallationID			IN  NVARCHAR2,
	ObjectType				IN  DECIMAL,
	WebAccountID			IN  DECIMAL,
	XmlBody					IN  NCLOB,
	UserReservedNumber		IN  DECIMAL,
	UserReservedAmount		IN  DECIMAL,
	UserReservedCode		IN  NVARCHAR2,
	UserReservedDate		IN  DECIMAL,
	UserReservedReference	IN  NVARCHAR2,
	UserID					IN  NVARCHAR2,
	ProgramID				IN  NVARCHAR2,
	JobNumber				IN  NVARCHAR2,
	TimeLastUpdated			IN  DECIMAL,
	DateUpdated				IN  DECIMAL
)

AS
BEGIN
	
	UPDATE 
		[SCDATA].FQ67120
	SET  
		WI$9HTML	=	XmlBody,
	    WIURAB		=	UserReservedNumber,
		WIURAT		=	UserReservedAmount,
		WIURCD		=	UserReservedCode,
		WIURDT		=	UserReservedDate,
		WIURRF		=	UserReservedReference,
		WIUSER		=	UserID,
		WIPID		=	ProgramID,
		WIJOBN		=	JobNumber,
		WIUPMJ		=	DateUpdated,
		WIUPMT		=	TimeLastUpdated
	WHERE 
			WI$9INID = InstallationID
		AND	WI$9OBJTY = ObjectType
		AND	WI$9WAN8 = WebAccountID;
END;
  /
