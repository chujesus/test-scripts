
/* #desc				Get Sales Order Detail Information
 * #db_dependencies		N/A		
 * #db_references		N/A			
 */
-- DROP VIEW [SCLIBRARY].COM_OrderDetailVW;
CREATE OR REPLACE VIEW [SCLIBRARY].COM_OrderDetailVW 
AS
WITH CTE_F4211 AS (
       SELECT 
            A.SDKCOO,
            A.SDDOCO,
            A.SDDCTO,
            A.SDLNID,
            A.SDSHAN AS SHAN,
            A.SDITM,
            A.SDNXTR,
            A.SDLNTY,
            A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
       FROM [SCDATA].F4211 A                                 --Sales Order Lines
       UNION ALL
       SELECT 
            A.SDKCOO,
            A.SDDOCO,
            A.SDDCTO,
            A.SDLNID,
            A.SDSHAN AS SHAN,
            A.SDITM,
            A.SDNXTR,
            A.SDLNTY,
            A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
       FROM [SCDATA].F42119 A                         --Historical Sales Order Lines
)
SELECT 
            A.SDKCOO,
            A.SDDOCO,
            A.SDDCTO,
            A.SDLNID,
            CASE SD$9TYP WHEN 1 THEN B.SD$9SHAN ELSE A.SHAN END AS SHAN,
            A.SDITM,
            A.SDNXTR,
            A.SDLNTY,
            A.SDLTTR,
		A.SDCNDJ,
		A.SDRLIT
       FROM CTE_F4211 A
       LEFT OUTER JOIN [SCDATA].FQ674211 B     --Extended Sales Order Lines
            ON A.SDKCOO = B.SDKCOO 
            AND A.SDDOCO = B.SDDOCO 
            AND A.SDDCTO = B.SDDCTO 
            AND A.SDLNID = B.SDLNID;

-- #desc					Get Sales Order Detail Information for Recent Stored Procedures
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderRecentList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_RecentOrderDetailVW  
AS 
	SELECT  
		A.SDDOCO,  
		A.SDKCOO,  
		A.SDDCTO,  
		A.SDSHAN AS SHAN, 
		A.SDLNTY  
	FROM [SCDATA].F4211 A  --Sales Order Lines 
	UNION  
	SELECT  
		A.SDDOCO,  
		A.SDKCOO,  
		A.SDDCTO,  
		A.SDSHAN AS SHAN , 
		A.SDLNTY  
	FROM [SCDATA].F42119 A; 

-- #desc					Get Sales Order Detail Information for Recent Stored Procedures
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderRecentList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_RecentOrderDetailExtVW
AS 
	SELECT  
		A.SDDOCO,  
		A.SDKCOO,  
		A.SDDCTO,  
		B.SD$9SHAN AS SHAN, 
		A.SDLNTY  
	FROM [SCDATA].F4211 A  /* Sales Order Lines */
	INNER JOIN [SCDATA].FQ674211 B	  /* Extended Sales Order Lines */
		ON A.SDKCOO = B.SDKCOO  
			AND A.SDDOCO = B.SDDOCO  
			AND A.SDDCTO = B.SDDCTO  
			AND A.SDLNID = B.SDLNID  
			AND B.SD$9TYP = 1  
	UNION  
	SELECT  
		A.SDDOCO,  
		A.SDKCOO,  
		A.SDDCTO,  
		B.SD$9SHAN AS SHAN, 
		A.SDLNTY  
	FROM [SCDATA].F42119 A  /* Sales Order Lines */
	INNER JOIN [SCDATA].FQ674211 B	  /* Extended Sales Order Lines */
		ON A.SDKCOO = B.SDKCOO  
			AND A.SDDOCO = B.SDDOCO  
			AND A.SDDCTO = B.SDDCTO  
			AND A.SDLNID = B.SDLNID  
			AND B.SD$9TYP = 1; 

-- #desc					Get Invoice Order Header Information
-- #db_dependencies			N/A
-- #db_references			COM_GetInvoiceOrderDetail
CREATE OR REPLACE VIEW [SCLIBRARY].COM_InvoiceOrderHeaderVW
AS 
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHDEL1, 
		A.SHDEL2,
		A.SHCO,
		0       AS AddressBookType,
		A.SHAN8	AS BillToNumber,
        A.SHSHAN AS ShipToNumber
	FROM [SCDATA].F4201 A					--Sales Order Header
	UNION ALL	
	SELECT 
		A.SHDOCO,	
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHDEL1, 
		A.SHDEL2,
		A.SHCO,
		0       AS AddressBookType,
		A.SHAN8	AS BillToNumber,
        A.SHSHAN AS ShipToNumber
	FROM [SCDATA].F42019 A;				--History Sales Order Header

-- #desc				Get Sales Order Header Information
-- #db_dependencies		N/A
-- #db_references		COM_GetSalesOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_SalesOrderHeadVW
    AS
    WITH CTE AS (
		SELECT A.SHDOCO , 
			A.SHDCTO , 
			A.SHKCOO , 
			A.SHVR01 , 
			A.SHTRDJ , 
			A.SHDRQJ , 
			A.SHOTOT ,
			A.SHFAP , 
			A.SHCRCD , 
			A.SHCRRM , 
			A.SHHOLD , 
			A.SHRORN , 
			A.SHRCTO , 
			A.SHDEL1 , 
			A.SHDEL2, 
			COALESCE(B.SH$9TYP, 0) AS ADDBOOKTYP, 
			CASE B.SH$9TYP WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END AS BILLTONUMB,
			COALESCE(B.SHIDLN, 0) AS BILLTOCOID, 
			CASE B.SH$9TYP WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END AS SHIPTONUMB,
			COALESCE(B.SHRCK7, 0) AS SHIPTOCOID, SHCO
		FROM [SCDATA].F4201 A 
		LEFT OUTER JOIN [SCDATA].FQ674201 B --Extended Sales Order Header
            ON A.SHKCOO = B.SHKCOO 
			AND A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO 
        UNION ALL
		SELECT A.SHDOCO , 
			A.SHDCTO , 
			A.SHKCOO , 
			A.SHVR01 , 
			A.SHTRDJ , 
			A.SHDRQJ , 
			A.SHOTOT ,
			A.SHFAP , 
			A.SHCRCD , 
			A.SHCRRM , 
			A.SHHOLD , 
			A.SHRORN , 
			A.SHRCTO , 
			A.SHDEL1 ,
			A.SHDEL2 , 
			COALESCE(B.SH$9TYP, 0) AS ADDBOOKTYP, 
			CASE B.SH$9TYP WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END AS BILLTONUMB, 
			COALESCE(B.SHIDLN, 0) AS BILLTOCOID, 
			CASE B.SH$9TYP WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END AS SHIPTONUMB, 
			COALESCE(B.SHRCK7, 0) AS SHIPTOCOID, SHCO
		FROM [SCDATA].F42019 A --Historical Sales Order Header
		LEFT OUTER JOIN [SCDATA].FQ674201 B --Extended Sales Order Header
			ON A.SHKCOO = B.SHKCOO 
			AND A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO 
	)
	SELECT SHDOCO , 
		SHDCTO , 
		SHKCOO , 
		SHVR01 , 
		SHTRDJ , 
		SHDRQJ , 
		SHOTOT , 
		SHFAP , 
		SHCRCD, 
		SHCRRM , 
		SHHOLD , 
		SHRORN , 
		SHRCTO , 
		SHDEL1 , 
		SHDEL2 , 
		ADDBOOKTYP, 
		BILLTONUMB,
		BILLTOCOID, 
		SHIPTONUMB, 
		SHIPTOCOID, 
		SHCO, 
		TB.CCCRCD AS BASECURCOD
	FROM CTE INNER JOIN [SCDATA].F0010 TB 
		ON TB.CCCO = SHKCOO;
		
-- #desc					Get Sales Order Header/Detail Information
-- #db_dependencies			COM_OrderDetailVW
-- #db_references			COM_GetSalesOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].COM_SalesOrderHeadSrchVW 
(
	SHDOCO, 
	SHDCTO,
    SHKCOO, 
	SHVR01, 
	SHTRDJ, 
	SHDRQJ, 
	SHOTOT, 
	SHFAP, 
	SHCRCD, 
	SHCRRM, 
	SHHOLD, 
	SHRORN,
    SHRCTO, 
	SHDEL1, 
	SHDEL2, 
	ADDBOOKTYP, 
	BILLTONUMB, 
	BILLTOCOID, 
	SHIPTONUMB, 
	SHIPTOCOID,
    SHAN, 
	SHCO, 
	SDITM, 
	SDNXTR, 
	SDLNTY, 
	SDLTTR, 
	SDRLIT, 
	BASECURCOD
)
    AS 
	SELECT A.SHDOCO, A.SHDCTO, A.SHKCOO, A.SHVR01, A.SHTRDJ, A.SHDRQJ, A.SHOTOT, A.SHFAP,
		A.SHCRCD, A.SHCRRM, A.SHHOLD, A.SHRORN, A.SHRCTO, A.SHDEL1, A.SHDEL2, A.ADDBOOKTYP,
		A.BILLTONUMB, A.BILLTOCOID, A.SHIPTONUMB, A.SHIPTOCOID, B.SHAN, A.SHCO, B.SDITM,
		B.SDNXTR, B.SDLNTY, B.SDLTTR, B.SDRLIT, BASECURCOD
	FROM [SCLIBRARY].COM_SalesOrderHeadVW A 
	INNER JOIN [SCLIBRARY].COM_OrderDetailVW B 
		ON A.SHKCOO = B.SDKCOO 
		AND A.SHDOCO = B.SDDOCO 
		AND A.SHDCTO = B.SDDCTO;

CREATE OR REPLACE VIEW [SCLIBRARY].COM_ConsumerOrderDetailVW
AS
	WITH CTE_F4211 AS ( 
		SELECT 
			A.SDKCOO, 
			A.SDDOCO, 
			A.SDDCTO, 
			A.SDLNID, 
			A.SDITM, 
			A.SDNXTR, 
			A.SDLNTY, 
			A.SDLTTR, 
			A.SDCNDJ, 
			A.SDRLIT 
		FROM [SCDATA].F4211 A		 --Sales Order Lines 
		UNION ALL
		SELECT 
			A.SDKCOO, 
			A.SDDOCO, 
			A.SDDCTO, 
			A.SDLNID, 
			A.SDITM, 
			A.SDNXTR, 
			A.SDLNTY, 
			A.SDLTTR, 
			A.SDCNDJ, 
			A.SDRLIT 
		FROM [SCDATA].F42119 A	 
	) --Historical Sales Order Lines 
	SELECT 
		A.SDKCOO, 
		A.SDDOCO, 
		A.SDDCTO, 
		A.SDLNID, 
		B.SD$9SHAN AS SHAN, 
		A.SDITM, 
		A.SDNXTR, 
		A.SDLNTY, 
		A.SDLTTR, 
		A.SDCNDJ, 
		A.SDRLIT 
	FROM CTE_F4211 A 
	INNER JOIN [SCDATA].FQ674211 B	 --Extended Sales Order Lines 
		ON A.SDKCOO = B.SDKCOO 
		AND A.SDDOCO = B.SDDOCO 
		AND A.SDDCTO = B.SDDCTO 
		AND A.SDLNID = B.SDLNID 
		AND B.SD$9TYP = 1;


CREATE OR REPLACE VIEW [SCLIBRARY].COM_ConsumerOrderHeaderVW
AS
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2,
			SHCO 
		FROM [SCDATA].F4201 A 
		UNION ALL
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2,
			SHCO 
		FROM [SCDATA].F42019 A				 --Historical Sales Order Header 
	) 
	SELECT 
		A.SHDOCO,	 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ, 
		A.SHOTOT, 
		A.SHFAP, 
		A.SHCRCD, 
		A.SHCRRM, 
		A.SHHOLD, 
		A.SHRORN, 
		A.SHRCTO, 
		A.SHDEL1, 
		A.SHDEL2, 
		B.SH$9TYP AS AddBookTyp, 
		B.SH$9AN8 AS BillToNumb, 
		B.SH$9SHAN AS ShipToNumb,
		A.SHCO, 
		TB.CCCRCD AS BaseCurCod
	FROM CTE A 
	INNER JOIN [SCDATA].FQ674201 B	 --Extended Sales Order Header 
		ON B.SHKCOO = A.SHKCOO 
		AND B.SHDOCO = A.SHDOCO 
		AND B.SHDCTO = A.SHDCTO	 
		AND B.SH$9TYP = 1 
	INNER JOIN [SCDATA].F0010 TB 
		ON TB.CCCO = A.SHKCOO;


CREATE OR REPLACE VIEW [SCLIBRARY].COM_CustomerOrderDetailVW
AS
	SELECT 
		A.SDKCOO, 
		A.SDDOCO, 
		A.SDDCTO, 
		A.SDLNID, 
		A.SDSHAN AS SHAN, 
		A.SDITM, 
		A.SDNXTR, 
		A.SDLNTY, 
		A.SDLTTR, 
		A.SDCNDJ, 
		A.SDRLIT 
	FROM [SCDATA].F4211 A		 --Sales Order Lines 
	UNION ALL
	SELECT 
		A.SDKCOO, 
		A.SDDOCO, 
		A.SDDCTO, 
		A.SDLNID, 
		A.SDSHAN AS SHAN, 
		A.SDITM, 
		A.SDNXTR, 
		A.SDLNTY, 
		A.SDLTTR, 
		A.SDCNDJ, 
		A.SDRLIT 
	FROM [SCDATA].F42119 A;



CREATE OR REPLACE VIEW [SCLIBRARY].COM_CustomerOrderHeaderVW
AS
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			0		AS AddBookTyp, 
			A.SHAN8	AS BillToNumb, 
			A.SHSHAN AS ShipToNumb,
			SHCO 
		FROM [SCDATA].F4201 A 
		UNION ALL
		SELECT 
			A.SHDOCO,	 
			A.SHDCTO, 
			A.SHKCOO, 
			A.SHVR01, 
			A.SHTRDJ, 
			A.SHDRQJ, 
			A.SHOTOT, 
			A.SHFAP,
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHRORN, 
			A.SHRCTO, 
			A.SHDEL1, 
			A.SHDEL2, 
			0		AS AddBookTyp, 
			A.SHAN8	AS BillToNumb, 
			A.SHSHAN AS ShipToNumb, 
			SHCO 
		FROM [SCDATA].F42019 A				 --Historical Sales Order Header 
	) 
	SELECT 
			SHDOCO,	 
			SHDCTO, 
			SHKCOO, 
			SHVR01, 
			SHTRDJ, 
			SHDRQJ, 
			SHOTOT, 
			SHFAP,
			SHCRCD, 
			SHCRRM, 
			SHHOLD, 
			SHRORN, 
			SHRCTO, 
			SHDEL1, 
			SHDEL2, 
			AddBookTyp, 
			BillToNumb, 
			ShipToNumb,
			SHCO, 
			TB.CCCRCD AS  BaseCurCod
	FROM CTE 
	INNER JOIN [SCDATA].F0010 TB 
		ON TB.CCCO = SHKCOO;



CREATE OR REPLACE VIEW [SCLIBRARY].COM_ConsumerSOHeadSrchVW
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddBookTyp,
		A.BillToNumb,
		A.ShipToNumb,
		B.SHAN,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurCod
	FROM [SCLIBRARY].COM_ConsumerOrderHeaderVW A			
	INNER JOIN [SCLIBRARY].COM_ConsumerOrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO;



CREATE OR REPLACE VIEW [SCLIBRARY].COM_CustomerSOHeadSrchVW  
AS
	SELECT 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO, 
		A.SHVR01, 
		A.SHTRDJ, 
		A.SHDRQJ,
		A.SHOTOT,
		A.SHFAP,
		A.SHCRCD, 
		A.SHCRRM,
		A.SHHOLD,
		A.SHRORN,
		A.SHRCTO,
		A.SHDEL1,
		A.SHDEL2,
		A.AddBookTyp,
		A.BillToNumb,
		A.ShipToNumb,
		B.SHAN,
		A.SHCO,
		B.SDITM,
		B.SDNXTR,
		B.SDLNTY,
		B.SDLTTR, 
		B.SDRLIT,
		BaseCurCod
	FROM [SCLIBRARY].COM_CustomerOrderHeaderVW A			
	INNER JOIN [SCLIBRARY].COM_CustomerOrderDetailVW B
		ON A.SHKCOO = B.SDKCOO		
		AND A.SHDOCO = B.SDDOCO
		AND A.SHDCTO = B.SDDCTO;




-- #desc							Get constant by installation value only
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID
-- #param ConstantValue				Output the value, used inside other SPs

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetConstantValue
(
	IN Constant		GRAPHIC(10) CCSID 13488,
	INOUT InstallationID GRAPHIC(3) CCSID 13488,
	OUT ConstantValue VARGRAPHIC(256) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetConstantValue 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	SET ConstantValue = NULL;
	
	--First try to get constant by installation defined value
	SELECT  
		CN$9VAL INTO ConstantValue
	FROM  
		[SCDATA].FQ670004 A
	WHERE 
		A.CN$9INID = InstallationID AND 
		A.CN$9CNST = Constant
	FETCH FIRST 1 ROW ONLY;

	--select ConstantValue as value
	
	--Check value, if null then get base value
	IF ConstantValue IS NULL THEN
	
		SET InstallationID = '***';
		
		SELECT  
			CN$9VAL INTO ConstantValue
		FROM  
			[SCDATA].FQ670004 A
		WHERE 
			A.CN$9INID = InstallationID AND 
			A.CN$9CNST = Constant
		FETCH FIRST 1 ROW ONLY;
	
	END IF;
	
END;
			

--DROP FUNCTION [SCLIBRARY].CMM_GetCurrentJulianDate;

-- #desc						Return Julian Date
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param currentDate			Current Date
-- #param Description1			Description

CREATE OR REPLACE FUNCTION [SCLIBRARY].CMM_GetCurrentJulianDate
(
	currentDate DATE 
)
RETURNS INT
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CMM_GetCurrentJulianDate
MODIFIES SQL DATA
DISALLOW PARALLEL
BEGIN

	RETURN CAST( CAST((YEAR(currentDate)-1900) AS VARCHAR(3)) || RIGHT('000' || CAST(DAYOFYEAR(currentDate) AS VARCHAR(3)), 3) AS INT);				

END
 ;
-- #desc					Get a table with Effective Address by AN8
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_BillTo, COM_GetSalesOrderShipments, QTS_GetQuoteOrderInfoShipments
--							QTS_GetQuoteOrderInfo_BillTo, CMM_GetBranchPlantInfo, CMM_GetBranchPlantInfoList,
--						
-- #param AddressNumber		Address Number
-- #param CurrentDate		Current Julian Date

CREATE OR REPLACE FUNCTION [SCLIBRARY].CMM_GetEffectiveAddressFnc
( 
	AddressNumber	NUMERIC(8,0),
	CurrentDate		NUMERIC(6,0)
) 
RETURNS TABLE 
( 
	ALAN8 NUMERIC(8,0),
	ALEFTB NUMERIC(6,0),
	ALADD1 GRAPHIC(40) CCSID 13488,
	ALADD2 GRAPHIC(40) CCSID 13488,
	ALADD3 GRAPHIC(40) CCSID 13488,
	ALADD4 GRAPHIC(40) CCSID 13488,
	ALADDZ GRAPHIC(12) CCSID 13488,
	ALCTY1 GRAPHIC(25) CCSID 13488,
	ALCOUN GRAPHIC(25) CCSID 13488,
	ALADDS GRAPHIC(3) CCSID 13488,
	ALCTR GRAPHIC(3) CCSID 13488
) 
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CMM_GetEffectiveAddressFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
RETURN 
	SELECT
		A.ALAN8,
		A.ALEFTB,
		A.ALADD1,
		A.ALADD2,
		A.ALADD3,
		A.ALADD4,
		A.ALADDZ,
		A.ALCTY1,
		A.ALCOUN,
		A.ALADDS,
		A.ALCTR
	FROM [SCDATA].F0116 A
	WHERE A.ALAN8 = AddressNumber 
		AND A.ALEFTB <= CurrentDate 
	ORDER BY ALEFTB DESC
	FETCH FIRST 1 ROW ONLY;

--DROP FUNCTION [SCLIBRARY].INV_GetCatalogTree;

-- #desc							Gets Nodes.
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					dbo.INV_DelCatalogDetail

-- #param IncludeParent				Bit Include or exclude the parent node 
-- #param Catalog					Catalog ID
-- #param UniqueKey					Unique Key

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetCatalogTree
(
	IncludeParent NUMERIC(15,0), 
	CatalogId	  VARCHAR(3),
	UniqueKey	  NUMERIC(15,0)
)
Returns Table
(
	UniqueKeyID NUMERIC(15,0), 
	CatalogId   varchar(50), 
	ParentKeyID NUMERIC(15,0),
	Description VARGRAPHIC(30) CCSID 13488,
	SeqNumber	NUMERIC(15,0)
)
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetCatalogTree
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
MODIFIES SQL DATA 

	BEGIN

		RETURN
		WITH TreeView (uniqueKeyID,catalogId,parentKeyID,description,seqNumber) AS   
			(SELECT A.CDUKID,A.CD$9CLGID,A.CD$9PKID,A.CDDL01,A.CDSEQ
	            FROM [SCDATA].FQ67413 A
			        WHERE A.CD$9CLGID= CatalogId 
					AND	  A.CDUKID = UniqueKey
			UNION ALL
			SELECT B.CDUKID,B.CD$9CLGID,B.CD$9PKID,B.CDDL01,B.CDSEQ
				 FROM TreeView R, [SCDATA].FQ67413 B
					WHERE B.CD$9PKID = R.UNIQUEKEYID and B.CD$9CLGID = R.CATALOGID)
		SELECT uniqueKeyID,catalogId,parentKeyID,description,seqNumber
			    FROM TreeView ;
		    
	
END ;
-- #desc						Gets Bread Crumb in a string
-- #bl_class					N/A	
-- #db_references				INV_GetCatalogDetListByInst   
-- #db_dependencies				N/A

-- #param CatalogID			    Catalog ID
-- #param CatalodDetailId		Catalod Node Id

CREATE OR REPLACE Function [SCLIBRARY].INV_GetCatalogNodePathFnc 
(
	CatalogId VARCHAR(3),
	CatalogDetailId NUMERIC(15,0)
) 
RETURNS  VARGRAPHIC(500) CCSID 13488
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetCatalogNodePathFnc
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT  

BEGIN 
    DECLARE Parent NUMERIC(15,0) DEFAULT 0;
    DECLARE ParentTmp NUMERIC(15,0) DEFAULT 0;
    DECLARE Exist  NUMERIC(15,0);
    DECLARE CookieCrumb VARGRAPHIC(500) CCSID 13488; 
    DECLARE NodeTemp VARGRAPHIC(30) CCSID 13488;
     
	SET CookieCrumb = '';                
    SET Parent = CatalogDetailId;
    WHILE_LOOP:
	WHILE(Parent <> '' AND Parent IS NOT NULL AND Parent <> 0) DO
			
		SET Exist =(SELECT	COUNT(*) 
					FROM [SCDATA].FQ67413 
					WHERE CD$9CLGID = CatalogId AND CDUKID = Parent);
		    		    
		IF (Exist > 0) THEN			
			SELECT CDDL01 INTO NodeTemp
			FROM [SCDATA].FQ67413 			
			WHERE CD$9CLGID = CatalogId 
			AND CDUKID = Parent;
			
			Set CookieCrumb = RTRIM(NodeTemp) ||  ' / '  || CookieCrumb ;	
			Set ParentTmp = Parent;
			
			SELECT CD$9PKID INTO Parent 
			FROM [SCDATA].FQ67413
			WHERE CD$9CLGID = CatalogId 
			AND CDUKID = Parent
			FETCH FIRST 1 ROW ONLY;
				
			IF (ParentTmp = Parent)THEN
				SET Parent = NULL;				
			END IF;
		ELSE
			SET Parent = NULL;				
		END IF;

	END WHILE WHILE_LOOP;

	IF (LENGTH(CookieCrumb) > 0) THEN 
		SELECT  CADSC1 INTO NodeTemp FROM  [SCDATA].FQ67412 WHERE CA$9CLGID = CatalogId;	 
		SET CookieCrumb = RTRIM(NodeTemp) || ' / ' || SUBSTRING(CookieCrumb, 1, LENGTH(CookieCrumb) - 2);   	
	ELSE
		SET CookieCrumb = ' ';
	END IF;			    
	
	RETURN  CookieCrumb;
	
END ;
  -- #desc				        All relationated rows and Catalog Detail Lang Delete.
-- #bl_class			        Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param UniqueKeyID    	    UniqueKeyID.
-- #param LangPref    			Language Preference.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalogDetailLang
(
    IN CatalogId		varchar(3),
	IN UniqueKeyID		NUMERIC(15,0),
	IN LangPref			varchar(2)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelCatalogDetailLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DELETE FROM [SCDATA].FQ67413L
WHERE
     (CD$9CLGID = CatalogId) AND
     (UniqueKeyID IS NULL OR CDUKID  = UniqueKeyID) AND
     (LangPref IS NULL OR CDLNGP  = LangPref);

END  ;
-- #desc				        Catalog Lang Delete.
-- #bl_class			        Premier.Inventory.CatalogLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param LangPref    			Language Preference.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalogLang
(
    IN CatalogId		    varchar(3),
	IN LangPref			varchar(2)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelCatalogLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DELETE FROM [SCDATA].FQ67412L
WHERE
     (CA$9CLGID = CatalogId) AND
     (LangPref IS NULL OR CALNGP  = LangPref);

END   ;
 -- #desc						Delete language override for Item Web Content Detail
-- #bl_class					Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				INV_DelItemWebContentDetail

-- #param ItemNumber			Item Number
-- #param InstallationID		Installation ID	 
-- #param DesignStatus			Design Status
-- #param UniqueKeyID			Unique Key ID
-- #param LangPref				Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentDetLang
(
	IN InstallationID varchar(3),
	IN ItemNumber NUMERIC(15,0),
	IN DesignStatus NUMERIC(15,0),
	IN UniqueKeyID NUMERIC(15,0),
	IN LangPref varchar(2)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelItemWebContentDetLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE FROM 
		[SCDATA].FQ67411L
    WHERE
		CLITM = ItemNumber 
		AND CL$9INID = InstallationID
		AND CL$9DS = DesignStatus
        AND (UniqueKeyID IS NULL OR CLUKID = UniqueKeyID)
		AND (LangPref IS NULL OR CLLNGP = LangPref);

END ;
-- #desc						Delete language override for Item Web Content Header
-- #bl_class					Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies				N/A
-- #db_references				INV_DelItemWebContentHeader

-- #param InstallationID		Installation ID
-- #param ItemNumber			Item Number	 
-- #param DesignStatus			Design Status
-- #param LangPref				Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentHeadLang
(
	IN InstallationID varchar(3),
	IN ItemNumber NUMERIC(15,0),	
	IN DesignStatus NUMERIC(15,0),
	IN LangPref varchar(2)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelItemWebContentHeadLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE FROM [SCDATA].FQ67410L

    WHERE
		CLITM = ItemNumber
		AND CL$9INID = InstallationID
		AND CL$9DS = DesignStatus
		AND (LangPref IS NULL OR CLLNGP = LangPref) ;

END  ;
-- #desc					Del UOM Lang
-- #bl_class				Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure		Unit of Measure
-- #param LangPref			Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelUnitOfMeasureLang
(
	IN UnitOfMeasure	VARCHAR(10),
	IN LangPref			VARCHAR(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelUnitOfMeasureLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE FROM
		[SCDATA].FQ67415L
	WHERE UMUOM = UnitOfMeasure
	    AND (LangPref IS NULL OR UMLNGP = LangPref);
END



     ;
-- #desc						Get the first Template Id 
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog ID
-- #param UniqueKeyId		    Node ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatDetailTemplate 
(
	IN CatalogID		VARCHAR(3),
	IN UniqueKeyID		NUMERIC(15,0),
	OUT TemplateID		VARCHAR(10)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcGetCatDetailTemplate
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN

	DECLARE Exist NUMERIC(15,0); 
	DECLARE ParentTmp NUMERIC(15,0) DEFAULT 0;
	DECLARE TemplateIDTemp VARCHAR(10);
	SET TemplateIDTemp = null;

	
	WHILE_LOOP:
	WHILE(UniqueKeyID IS NOT NULL) 
	DO

		SET Exist =(SELECT COUNT(*)
		FROM [SCDATA].FQ67413 
		WHERE CD$9CLGID = CatalogID 
		AND CDUKID = UniqueKeyID);
	  
		IF(Exist > 0) 
		THEN
			
			SELECT A.CD$9PKID, LTRIM(RTRIM(A.CDTMPI)) INTO ParentTmp, TemplateIDTemp
			FROM [SCDATA].FQ67413 A		
			WHERE A.CD$9CLGID = CatalogID 
			AND A.CDUKID = UniqueKeyID;
			
			SET TemplateID = TemplateIDTemp;			
			
			IF (ParentTmp = 0) 
			THEN
				SET UniqueKeyID = NULL;		
			ELSE 
				SET UniqueKeyID = ParentTmp;
			END IF;
			
			IF(TemplateID IS NOT NULL AND TemplateID <>'' AND TemplateID <>'NOTEMPLATE')
			THEN			
				SET UniqueKeyID = NULL;
			END IF;		
		
		ELSE	
			SET UniqueKeyID = NULL;	   
		END IF;  
		
	END WHILE WHILE_LOOP;
END






 ;
 -- #desc					Get Valid Catalog Node List. Remove Orphan nodes (Nodes where parent does not exist).
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			INV_ExcGetCatXMLNodeList, INV_ExcGetCatNodeXMLItemList

-- #param CatalogID			Catalog Id
  
CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetCatalogNodeListFnc
( 
	CatalogID VARCHAR(3)
) 
RETURNS TABLE
( 
	CatalogID			VARCHAR(3),
	UniqueKeyID			NUMERIC(15,0),
	ParentKeyID			NUMERIC(15,0),
	IncludeInSearch		NUMERIC(15,0), 
	Description			VARCHAR(30),
	EffectiveModeFlag	NUMERIC(15,0),
	EffectiveFromDate	NUMERIC(15,0),
	EffectiveThruDate	NUMERIC(15,0),
	SequenceNumber		NUMERIC(15,0),
	ImageName			VARGRAPHIC(256) CCSID 13488,
	TemplateID			VARCHAR(10)
)   
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetCatalogNodeListFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 

BEGIN 
	 
	-- TEMPORARY TABLE FOR Catalog Nodes 
	DECLARE GLOBAL TEMPORARY TABLE SESSION.CATALOGNODES
	( 
		CatalogID			VARCHAR(3),
		UniqueKeyID			NUMERIC(15,0),
		ParentKeyID			NUMERIC(15,0),
		IncludeInSearch		NUMERIC(15,0), 
		Description			VARGRAPHIC(30) CCSID 13488,
		EffectiveModeFlag	NUMERIC(15,0),
		EffectiveFromDate	NUMERIC(15,0),
		EffectiveThruDate	NUMERIC(15,0),
		SequenceNumber		NUMERIC(15,0),
		ImageName			VARGRAPHIC(256) CCSID 13488,
		TemplateID			VARCHAR(10)
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	 
	BEGIN
		 
		INSERT INTO SESSION.CATALOGNODES
		(
			CatalogID,
			UniqueKeyID,
			ParentKeyID,
			IncludeInSearch,
			Description,
			EffectiveModeFlag,
			EffectiveFromDate,
			EffectiveThruDate,
			SequenceNumber,
			ImageName,
			TemplateID 
		)
		SELECT 
			CD$9CLGID,
			CDUKID,
			CD$9PKID,
			CD$9IIS,
			CDDL01,
			CD$9EFM,
			CDEFFF,
			CDEFFT,
			CDSEQ,
			CDIMGURL,
			CDTMPI
		FROM [SCDATA].FQ67413 
		WHERE CD$9CLGID = CatalogID;
		 
		WHILE((SELECT COUNT(*) FROM SESSION.CATALOGNODES
						WHERE ParentKeyID <> 0
						AND ParentKeyID IS NOT NULL
						AND ParentKeyID NOT IN (SELECT UniqueKeyID FROM SESSION.CATALOGNODES)) <> 0 )
		DO 
			DELETE FROM SESSION.CATALOGNODES
			WHERE ParentKeyID <> 0
				AND ParentKeyID IS NOT NULL
				AND ParentKeyID NOT IN (SELECT UniqueKeyID FROM SESSION.CATALOGNODES);
		END WHILE;
	END;
	RETURN
	( 
		SELECT 
			CatalogID,
			UniqueKeyID,
			ParentKeyID,
			IncludeInSearch,
			Description,
			EffectiveModeFlag,
			EffectiveFromDate,
			EffectiveThruDate,
			SequenceNumber,
			ImageName,
			TemplateID
		FROM SESSION.CATALOGNODES
	);
END ;
-- #desc					Read BranchPlant list associated to an Item Number
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			INV_GetCatalogDetailItemList.sql

-- #param InstallationID	Installation ID.
-- #param ItemNumber		Short Item Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetItemBranchPlantStrFnc
(
      InstallationID   VARCHAR (3),
      ItemNumber       NUMERIC(15,0)
)
RETURNS VARGRAPHIC(8000) CCSID 13488
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemBranchPlantStrFnc
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
BEGIN
		DECLARE BranchPlant		VARCHAR(12)  default '';   
		DECLARE FinalResult		VARGRAPHIC(8000) CCSID 13488;    
		DECLARE fetch_status	INTEGER DEFAULT 0; 

		------------------------------------------
		-- Used WHILE LOOP
		DECLARE BranchPlant_Cursor CURSOR FOR
			SELECT 
				  LTRIM(RTRIM(MCMCU))
			FROM [SCDATA].F0006 BM                --Branch Plant Master
			INNER JOIN [SCDATA].F4102 IB          --Item Master Branch
				  ON IB.IBMCU = BM.MCMCU
			INNER JOIN [SCDATA].FQ679910 BI        -- BrachPlant by Installation
				  ON BI.BI$9INID = InstallationID 
				  AND BI.BIMCU = IB.IBMCU
			WHERE
				  IB.IBITM = ItemNumber
			FOR FETCH ONLY;

		DECLARE CONTINUE HANDLER FOR NOT FOUND
			SET fetch_status = - 1;
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			SET fetch_status = - 1;
		------------------------------------------
		--Set Default Value
		SET FinalResult = '';		
		------------------------------------------
		OPEN BranchPlant_Cursor;            
		-- Check FETCH_STATUS to see if there are any more rows to fetch. 
		WHILE_LOOP: 
		WHILE (fetch_status = 0) DO
			IF BranchPlant IS NOT NULL AND BranchPlant <> '' THEN
					 SET FinalResult = FinalResult || 'bMCU' || BranchPlant || 'eMCU ' ;
			END IF;
			FETCH NEXT FROM BranchPlant_Cursor INTO BranchPlant;
		END WHILE WHILE_LOOP;
		CLOSE BranchPlant_Cursor;
      
      RETURN RTRIM(FinalResult);
END;
-- #desc						Return table with desc1,desc2,desc3 and URL
-- #bl_class					N/A
-- #db_dependencies				N/A			
-- #db_references				Several SPs

-- #param InstallationID		Installation ID
-- #param ItemNumber			Item Number
-- #param LangPref				Language Preference

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetItemContenDescAndURLFnc
(
    INSTALLATIONID	GRAPHIC(3) CCSID 13488 , 
	ITEMNUMBER		NUMERIC(8, 0) , 
	LANGPREF		GRAPHIC(2) CCSID 13488 , 
	DESIGNSTATUS	DECIMAL(31, 0)
)
RETURNS TABLE ( 
	DESCITM NUMERIC(8, 0) , 
	DESC1 GRAPHIC(30) CCSID 13488 , 
	DESC2 GRAPHIC(30) CCSID 13488 , 
	DESC3 GRAPHIC(30) CCSID 13488 , 
	URL VARGRAPHIC(256) CCSID 13488 ) 
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemContenDescAndURLFnc
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE INSTALLATION GRAPHIC ( 3 ) CCSID 13488 ; 
  
	IF EXISTS ( SELECT 1 FROM [SCDATA].FQ67410 WHERE ( CHITM = ITEMNUMBER AND CH$9INID = INSTALLATIONID AND CH$9DS = DESIGNSTATUS ) ) THEN 
		SET INSTALLATION = INSTALLATIONID ; 
	ELSE 
		SET INSTALLATION = '***' ; 
	END IF ; 
  
	RETURN 
		SELECT 
			CHITM, 
			COALESCE(B.CLDSC1, A.CHDSC1) AS DESC1, 
			COALESCE(B.CLDSC2, A.CHDSC2) AS DESC2, 
			COALESCE(B.CLDSC3, A.CHDSC3) AS DESC3, 
			A.CHPTURL AS URL 
		FROM [SCDATA].FQ67410 A 
		LEFT OUTER JOIN [SCDATA].FQ67410L B 
			ON B.CLITM = A.CHITM 
			AND B.CL$9INID = A.CH$9INID 
			AND B.CL$9DS = A.CH$9DS 
			AND B.CLLNGP = LANGPREF 
		WHERE	 
			A.CHITM = ITEMNUMBER 
			AND (A.CH$9INID = INSTALLATION) 
			AND A.CH$9DS = DESIGNSTATUS; 
END; 
 -- #desc					Read Cross Reference item list associated to an Item Number
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			INV_GetCatalogDetailItemList.sql

-- #param ItemNumber		Short Item Number
-- #param Type				Cross Reference Type (XRT)

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetItemCrossRefStrFnc
(
	ItemNumber	NUMERIC(15,0),
	CrossRefType        VARCHAR(2)
)

RETURNS VARGRAPHIC(8000) CCSID 13488

LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemCrossRefStrFnc
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT  
BEGIN
		DECLARE ItemCrossRefNumber VARCHAR(25) DEFAULT '';
		DECLARE FinalResult	VARGRAPHIC(8000) CCSID 13488;
		DECLARE fetch_status INTEGER DEFAULT 0;
		    
		------------------------------------------
		-- Used WHILE LOOP
		DECLARE CrossRef_Cursor CURSOR FOR
			SELECT 
				LTRIM(RTRIM(IVCITM)) 
			FROM [SCDATA].F4104 
			WHERE
				IVITM = ItemNumber
				AND IVXRT in ('M', 'UP', CrossRefType) 
		FOR FETCH ONLY;

		DECLARE CONTINUE HANDLER FOR NOT FOUND
			SET fetch_status = - 1;
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			SET fetch_status = - 1;
		------------------------------------------
		--Set Default Value
		SET FinalResult = '';
		------------------------------------------
		OPEN CrossRef_Cursor;		
		-- Check FETCH_STATUS to see if there are any more rows to fetch.	
		WHILE_LOOP:	
		WHILE (fetch_status = 0) DO
			IF ItemCrossRefNumber IS NOT NULL AND ItemCrossRefNumber <> '' THEN
				SET FinalResult = FinalResult || ItemCrossRefNumber || ' ';
			END IF;
			FETCH NEXT FROM CrossRef_Cursor INTO ItemCrossRefNumber;
		END WHILE WHILE_LOOP;
	CLOSE CrossRef_Cursor;
	
	RETURN RTRIM(FinalResult);
END ;
-- #desc					All relationated rows and Catalog Detail Delete.
-- #bl_class				Premier.Inventory.CatalogDetail.cs
-- #db_dependencies			dbo.INV_GetCatalogTree
-- #db_references			N/A

-- #param CatalogId			Catalog Id.
-- #param UniqueKeyID    	UniqueKeyID (Node ID)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalogDetail
(
    IN CatalogId		VARCHAR(3),
	IN UniqueKeyID		NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelCatalogDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	IF(UniqueKeyID IS NULL)	THEN
		--Delete All Catalog Node Items
		DELETE FROM [SCDATA].FQ67413I
		WHERE IN$9CLGID = CatalogId;

		--DELETE ALL NODES LANGS
		CALL [SCLIBRARY].INV_DelCatalogDetailLang(CatalogId, NULL, NULL);
		
		--DELETE ALL NODES
		DELETE FROM [SCDATA].FQ67413
		WHERE CD$9CLGID = CatalogId;    
    ELSE
		/*--------------------------------------------*/
		/*Delete information for all the Node children*/

		--Delete Catalog Node Items
		DELETE FROM [SCDATA].FQ67413I
		WHERE IN$9CLGID = CatalogId 
		AND	INUKID IN (SELECT UniqueKeyID FROM TABLE(SCLIBRARY.INV_GetCatalogTree(0,CatalogId,UniqueKeyID)) AS TT);
	
		--DELETE NODE LANGUAGES 
		DELETE FROM [SCDATA].FQ67413L
		WHERE CD$9CLGID = CatalogId
		AND CDUKID IN (SELECT UniqueKeyID FROM TABLE(SCLIBRARY.INV_GetCatalogTree(0,CatalogId,UniqueKeyID)) AS TT );

		--DELETE Catalog Nodes
		DELETE FROM [SCDATA].FQ67413
		WHERE CD$9CLGID = CatalogId
		AND CDUKID IN (SELECT UniqueKeyID FROM TABLE(SCLIBRARY.INV_GetCatalogTree(0,CatalogId,UniqueKeyID)) AS TT );

		/*--------------------------------------------*/
		/*Delete information for the specific node*/
		
		--Delete Catalog Node Items
		DELETE FROM [SCDATA].FQ67413I
		WHERE IN$9CLGID = CatalogId 
		AND	 INUKID = UniqueKeyID;

		--DELETE NODE SPECIFIC LANG      
		CALL [SCLIBRARY].INV_DelCatalogDetailLang(CatalogId, UniqueKeyID, NULL);
	
		--DELETE THE SPECIFIC NODE
		DELETE FROM [SCDATA].FQ67413L
		WHERE CD$9CLGID = CatalogId 
		AND CDUKID = UniqueKeyID;
	END IF;
END ;
-- #desc						Delete Item Web Content Detail and related registers
-- #bl_class					Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies				INV_DelItemWebContentDetLang
-- #db_references				INV_DelItemWebContentHeader

-- #param InstallationID		Installation ID
-- #param ItemNumber			Item Number	 
-- #param DesignStatus			Design Status
-- #param UniqueKeyID			Unique Key ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentDetail
(
	IN InstallationID varchar(3),
	IN ItemNumber NUMERIC(15,0),	
	IN DesignStatus NUMERIC(15,0),
	IN UniqueKeyID NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelItemWebContentDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE FROM [SCDATA].FQ67411
    WHERE
		CD$9INID = InstallationID
		AND CDITM = ItemNumber
		AND CD$9DS = DesignStatus
		AND (UniqueKeyID IS NULL OR CDUKID = UniqueKeyID);
        
	CALL [SCLIBRARY].INV_DelItemWebContentDetLang (InstallationID, ItemNumber, DesignStatus, UniqueKeyID, null);

END ;
-- #desc						Get Catalog Detail Language.
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				INV_GetCatalogDetail

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID    		UniqueKeyID.
-- #param LangPref				Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogDetailLang
(
    IN CatalogId	varchar(3),
    IN UniqueKeyID	NUMERIC(15,0),
	IN LangPref     varchar(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogDetailLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

DECLARE GLOBAL TEMPORARY TABLE SESSION.GetCatalogDetailLang_TABLE
(
    CatalogId varchar(3),
    UniqueKeyID NUMERIC(15,0),
    LangPref varchar(2),
    Description  VARGRAPHIC(30) CCSID 13488	
)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
    BEGIN
	    DECLARE CATDETAIL_LNG_TMP CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	        SELECT 
	            A.CatalogId,
	            A.UniqueKeyID,
	            A.LangPref,
	            A.Description,
	            [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',A.LangPref,LangPref) AS LanguageDescE1
	        FROM SESSION.GetCatalogDetailLang_TABLE A
	    FOR FETCH ONLY;
    	
		    INSERT INTO SESSION.GetCatalogDetailLang_TABLE
		    (
		        CatalogId,
		        UniqueKeyID,
		        LangPref,
		        Description
		    )
		    SELECT     
		        A.CD$9CLGID AS CatalogId,
		        A.CDUKID  AS UniqueKeyID,
		        A.CDLNGP  AS LangPref,
		        A.CDDL01	 AS Description
		    FROM [SCDATA].FQ67413L A
		    WHERE
		       (CD$9CLGID = CatalogID AND
			    (UniqueKeyID IS NULL OR CDUKID = UniqueKeyID));
	    OPEN CATDETAIL_LNG_TMP;
	END;
END
    ;
 -- #desc						Get Catalog Detail.
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				dbo.INV_GetCatalogDetailLang
-- #db_references				dbo.INV_GetCatalog

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID    		UniqueKeyID.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogDetail
(
    IN CatalogId		    varchar(3),
	IN UniqueKeyID			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE CATALOGDET_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT     
			CD$9CLGID	AS CatalogId,
			CDUKID		AS UniqueKeyID,
			CD$9PKID	AS ParentKeyID,
			CD$9IIS		AS IncludeInSearch,
			CDDTAI		AS DataItem,
			CDKY	    AS UserDefinedCode,
			CDDL01		AS Description,
			CD$9EFM		AS EffectiveModeFlag,
			CDEFFF		AS EffectiveFromDate,
			CDEFFT		AS EffectiveThruDate,
			CDSEQ		AS SequenceNumber,
			CDIMGURL	AS ImageName,
			CDTMPI		AS TemplateID		    
		FROM [SCDATA].FQ67413
		WHERE
		   CD$9CLGID = CatalogID AND
		  (UniqueKeyID  IS NULL OR CDUKID = UniqueKeyID)
		  ORDER BY CDSEQ
			
	FOR FETCH ONLY;
	
	OPEN CATALOGDET_CURSOR; 
	
	CALL [SCLIBRARY].INV_GetCatalogDetailLang(CatalogID,UniqueKeyID,'*');
	
END
	
  ;
-- #desc					Get Catalog Lang
-- #bl_class				Premier.Inventory.CatalogLang.cs
-- #db_dependencies			N/A
-- #db_references			INV_GetCatalog			

-- #param CatalogID			Catalog ID	
-- #param LangPref			Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogLang
(
    IN CatalogId	varchar(3),
	IN LangPref     varchar(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
DECLARE GLOBAL TEMPORARY TABLE SESSION.CATALOGLANG_TABLE
(
    CatalogId varchar(3),
    LanguagePreference varchar(2),
    Description VARGRAPHIC(30) CCSID 13488
)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
    BEGIN
    DECLARE CATALOGLANG_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
        SELECT 
            A.CatalogId,
            A.LanguagePreference,
            A.Description,
            [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',A.LanguagePreference,LangPref) AS LanguageDescE1
        FROM SESSION.CATALOGLANG_TABLE A
	FOR FETCH ONLY;
	
	    INSERT INTO SESSION.CATALOGLANG_TABLE
	    (
	        CatalogId,
	        LanguagePreference,
	        Description
	    )
		SELECT  
		    CA$9CLGID,
		    CALNGP,
		    CADSC1
		FROM [SCDATA].FQ67412L
		WHERE
		   (CA$9CLGID = CatalogID);
	OPEN CATALOGLANG_CURSOR;
	END;
END ;
-- #desc							Gets item info by item number
-- #bl_class						Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A						

-- #param InstallationID			Installation Id
-- #param BranchPlant				Specific Branch Plant (mcu)
-- #param ShortItemNumber			Short Item Number to Search For
-- #param LongItemNumber			Long Item Number to Search For
-- #param AuxItemNumber				Aux Item Number to Search For

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterInfo 
( 
	IN INSTALLATIONID GRAPHIC(3) CCSID 13488 , 
	IN BRANCHPLANT GRAPHIC(12) CCSID 13488 , 
	IN SHORTITEMNUMBER NUMERIC(8, 0) , 
	IN LONGITEMNUMBER GRAPHIC(25) CCSID 13488 , 
	IN AUXITEMNUMBER GRAPHIC(25) CCSID 13488 , 
	IN RETRIEVEWEBCONTENTINFO INTEGER , 
	IN LANGPREF GRAPHIC(2) CCSID 13488
 ) 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemMasterInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
	
BEGIN 
	  
	DECLARE INVENTORYFLAGVALUE GRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE STOCKINGTYPEVALUE GRAPHIC ( 1 ) CCSID 13488 ; 
  
	DECLARE MATRIXTEMPLATE			GRAPHIC ( 20 ) CCSID 13488 ; 
	DECLARE MATRIXCONTROLLED		GRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE MATRIXPARENTITEMNUMBER	NUMERIC ( 8 , 0 ) ; 
	DECLARE SEGMENT1				GRAPHIC ( 10 ) CCSID 13488 ; 
    DECLARE BINSTALLATIONID GRAPHIC ( 3 ) CCSID 13488 ; 
  
/*RGM THIS CALL CHANGE THE OUTPUT INSTALLATION BACK UP BEFORE SEND IT. */ 
    SET BINSTALLATIONID = '***' ;
	 
	IF ( SHORTITEMNUMBER = 0 ) OR ( SHORTITEMNUMBER IS NULL ) THEN 
		IF LONGITEMNUMBER <> '*' THEN 
			SELECT A . IMITM INTO SHORTITEMNUMBER	/*SHORT ITEM NUMBER */ 
			FROM [SCDATA] . F4101 A /*ITEM MASTER */ 
			WHERE A . IMLITM = LONGITEMNUMBER 
		    FETCH FIRST 1 ROW ONLY ; 
	 
	   ELSEIF ( AUXITEMNUMBER <> '*' ) THEN 
			SELECT A . IMITM INTO SHORTITEMNUMBER	/*SHORT ITEM NUMBER */ 
			FROM [SCDATA] . F4101 A /*ITEM MASTER */ 
			WHERE A . IMAITM = AUXITEMNUMBER 
		    FETCH FIRST 1 ROW ONLY ; 
        END IF ; 
    END IF ; 

  
/*Resolve StockingType and MatrixParentItemNumber*/ 
        SELECT 
                A . IMSTKT , A . IMTMPL , A . IMMIC , A . IMSEG1,   B . LFIVI 
        INTO 
                STOCKINGTYPEVALUE , MATRIXTEMPLATE , MATRIXCONTROLLED , SEGMENT1, INVENTORYFLAGVALUE 
        FROM 
                [SCDATA] . F4101 A 
        INNER JOIN [SCDATA] . F40205 B /*LINE TYPE CONTROL TABLE */ 
            ON B . LFLNTY = A . IMLNTY 
        WHERE A . IMITM = SHORTITEMNUMBER ;
  
		IF(MatrixTemplate <> '' AND MatrixControlled = '2')
		THEN
			SET MATRIXPARENTITEMNUMBER = COALESCE((SELECT IMITM FROM [SCDATA].F4101 WHERE IMTMPL = MatrixTemplate AND IMSEG1 = Segment1 AND IMMIC = '1'),0);
		END IF;
  
BEGIN 
/*(StockingTypeValue = 'N' OR (InventoryFlagValue <> 'Y' AND InventoryFlagValue <> 'D'))*/ 
DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT 
        INSTALLATIONID AS INSTALLATIONID , 
        '' AS BRANCHPLANT , 
        '' AS BRANCHPLANTDESC , 
        A . IMITM AS ITEMNUMBER , 
        A . IMLITM AS LONGITEMNUMBER , 
        A . IMAITM AS AUXITEMNUMBER , 
        CASE RETRIEVEWEBCONTENTINFO 
            WHEN 0 THEN A . IMDSC1 
        ELSE COALESCE ( CONTENDESC . DESC1 , A . IMDSC1 ) 
        END AS DESCRIPTION1 , 
        CASE RETRIEVEWEBCONTENTINFO 
            WHEN 0 THEN A . IMDSC2 
        ELSE COALESCE ( CONTENDESC . DESC2 , A . IMDSC2 ) 
        END AS DESCRIPTION2 , 
        CASE RETRIEVEWEBCONTENTINFO 
            WHEN 0 THEN '' 
        ELSE CONTENDESC . URL 
        END AS URL , 
        A . IMUOM1 AS PRIMARYUNITOFMEASURE , 
        A . IMUOM2 AS SECONDARYUNITOFMEASURE , 
        A . IMUOM4 AS PRICINGUNITOFMEASURE , 
        A . IMSRTX AS SEARCHITEMTEXT , 
        A . IMSTKT AS STOCKINGTYPE , 
        A . IMLNTY AS LINETYPE , 
        INVENTORYFLAGVALUE AS INVENTORYFLAG , 
        A . IMIFLA AS ITEMFLASHMESSAGE , 
        A . IMTMPL AS MATRIXTEMPLATE , 
        A . IMMIC AS MATRIXCONTROLLED , 
        MATRIXPARENTITEMNUMBER AS MATRIXPARENTITEMNUMBER ,
		0  AS	AddressNumber,
		'' AS	AllowPickup,
		A.IMCYCL AS CYCL,
		A.IMPRP0 AS PRP0,
		A.IMPRP1 AS PRP1,
		A.IMPRP2 AS PRP2,
		A.IMPRP3 AS PRP3,
		A.IMPRP4 AS PRP4,
		A.IMPRP5 AS PRP5,
		A.IMPRP6 AS PRP6,
		A.IMPRP7 AS PRP7,
		A.IMPRP8 AS PRP8,
		A.IMPRP9 AS PRP9,
		A.IMSHCM AS SHCM,
		A.IMSHCN AS SHCN,
		A.IMSRP0 AS SRP0,
		A.IMSRP1 AS SRP1,
		A.IMSRP2 AS SRP2,
		A.IMSRP3 AS SRP3,
		A.IMSRP4 AS SRP4,
		A.IMSRP5 AS SRP5,
		A.IMSRP6 AS SRP6,
		A.IMSRP7 AS SRP7,
		A.IMSRP8 AS SRP8,
		A.IMSRP9 AS SRP9
    FROM 
        [SCDATA] . F4101 A /*Item Master */ 
    LEFT OUTER JOIN ( SELECT CHITM , COALESCE ( B . CLDSC1 , A . CHDSC1 ) AS DESC1 , COALESCE ( B . CLDSC2 , A . CHDSC2 ) AS DESC2 , CHPTURL AS URL , 
                             ROW_NUMBER ( ) OVER ( PARTITION BY CHITM ORDER BY CH$9INID DESC ) AS INSTALL 
                      FROM [SCDATA] . FQ67410 A 
                      LEFT OUTER JOIN [SCDATA] . FQ67410L B 
                        ON B . CLITM = A . CHITM 
                        AND B . CL$9INID = A . CH$9INID 
                        AND B . CL$9DS = A . CH$9DS 
                        AND B . CLLNGP = LANGPREF 
                      WHERE ( A . CH$9INID = INSTALLATIONID OR A . CH$9INID = BINSTALLATIONID ) AND A . CH$9DS = 0 ) CONTENDESC 
        ON CONTENDESC . CHITM = A . IMITM 
        AND INSTALL = 1 
    WHERE 
        A . IMITM = ShortItemNumber 
    FETCH FIRST 1 ROW ONLY
    FOR READ ONLY 
    OPTIMIZE FOR 1 ROW; 



DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			E . BI$9INID AS	INSTALLATIONID , 
			B . IBMCU	AS	BRANCHPLANT , 
			D1 . MCDL01 AS	BRANCHPLANTDESC , 
			A . IMITM	AS	ITEMNUMBER , 
			A . IMLITM AS	LONGITEMNUMBER , 
			A . IMAITM AS	AUXITEMNUMBER , 
			CASE RETRIEVEWEBCONTENTINFO 
				WHEN 0 THEN A . IMDSC1 
			ELSE COALESCE ( CONTENDESC . DESC1 , A . IMDSC1 ) 
      END AS DESCRIPTION1 , 
			CASE RETRIEVEWEBCONTENTINFO 
				WHEN 0 THEN A . IMDSC2 
			ELSE COALESCE ( CONTENDESC . DESC2 , A . IMDSC2 ) 
      END AS DESCRIPTION2 , 
			CASE RETRIEVEWEBCONTENTINFO 
				WHEN 0 THEN '' 
			ELSE CONTENDESC . URL 
      END AS URL , 
			A . IMUOM1 AS	PRIMARYUNITOFMEASURE , 
			A . IMUOM2 AS	SECONDARYUNITOFMEASURE , 
			A . IMUOM4 AS	PRICINGUNITOFMEASURE , 
			A . IMSRTX AS	SEARCHITEMTEXT , 
			A . IMSTKT AS	STOCKINGTYPE , 
			A . IMLNTY AS	LINETYPE , 
			INVENTORYFLAGVALUE AS INVENTORYFLAG , 
			A . IMIFLA AS	ITEMFLASHMESSAGE , 
			A . IMTMPL AS MATRIXTEMPLATE , 
			MATRIXCONTROLLED AS MATRIXCONTROLLED , 
			MATRIXPARENTITEMNUMBER AS MATRIXPARENTITEMNUMBER,
			0  AS	AddressNumber,
			'' AS	AllowPickup,
			A.IMCYCL AS CYCL,
			A.IMPRP0 AS PRP0,
			A.IMPRP1 AS PRP1,
			A.IMPRP2 AS PRP2,
			A.IMPRP3 AS PRP3,
			A.IMPRP4 AS PRP4,
			A.IMPRP5 AS PRP5,
			A.IMPRP6 AS PRP6,
			A.IMPRP7 AS PRP7,
			A.IMPRP8 AS PRP8,
			A.IMPRP9 AS PRP9,
			A.IMSHCM AS SHCM,
			A.IMSHCN AS SHCN,
			A.IMSRP0 AS SRP0,
			A.IMSRP1 AS SRP1,
			A.IMSRP2 AS SRP2,
			A.IMSRP3 AS SRP3,
			A.IMSRP4 AS SRP4,
			A.IMSRP5 AS SRP5,
			A.IMSRP6 AS SRP6,
			A.IMSRP7 AS SRP7,
			A.IMSRP8 AS SRP8,
			A.IMSRP9 AS SRP9
		FROM 
			[SCDATA] . F4101 A					/*ITEM MASTER */ 
        LEFT OUTER JOIN ( SELECT CHITM , COALESCE ( B . CLDSC1 , A . CHDSC1 ) AS DESC1 , COALESCE ( B . CLDSC2 , A . CHDSC2 ) AS DESC2 , CHPTURL AS URL , 
                                 ROW_NUMBER ( ) OVER ( PARTITION BY CHITM ORDER BY CH$9INID DESC ) AS INSTALL 
                          FROM [SCDATA] . FQ67410 A 
                          LEFT OUTER JOIN [SCDATA] . FQ67410L B 
                                ON B . CLITM = A . CHITM 
                                AND B . CL$9INID = A . CH$9INID 
                                AND B . CL$9DS = A . CH$9DS 
                                AND B . CLLNGP = LANGPREF 
                          WHERE ( A . CH$9INID = INSTALLATIONID OR A . CH$9INID = BINSTALLATIONID ) 
                          AND A . CH$9DS = 0 ) CONTENDESC 
            ON CONTENDESC . CHITM = A . IMITM 
            AND INSTALL = 1 
	   INNER JOIN [SCDATA] . FQ679910 E		/* BRACHPLANT BY INSTALLATION */ 
			ON E . BI$9INID = INSTALLATIONID 
	   INNER JOIN [SCDATA] . F4102 B				/*ITEM MASTER BRANCH */ 
			ON B . IBITM = A . IMITM 
			AND B . IBMCU = E . BIMCU 
	   INNER JOIN [SCDATA] . F0006 D1				/*BRANCH PLANT MASTER */ 
			ON D1 . MCMCU = B . IBMCU 
	   WHERE 
			A . IMITM = SHORTITEMNUMBER 
            AND	( BRANCHPLANT = '*' OR B . IBMCU = BRANCHPLANT ) 
	   FETCH FIRST 1 ROW ONLY 
	   FOR READ ONLY 
	   OPTIMIZE FOR 1 ROW ; 
  
        IF ( STOCKINGTYPEVALUE = 'N' OR ( INVENTORYFLAGVALUE <> 'Y' AND INVENTORYFLAGVALUE <> 'D' ) ) THEN /* INVENTORY INTERFACE */ 
            OPEN TEMP_CURSOR1 ; 
        ELSE 
            OPEN TEMP_CURSOR2 ; 
        END IF ; 
    END ; 
END ;
-- #desc				        Get Web Content Detail Language
-- #bl_class			        Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies		        N/A
-- #db_references		        dbo.INV_GetItemWebContentDetail

-- #param ItemNumber			Item Number.
-- #param InstallationID		Installation ID.
-- #param DesignStatus			Desing Status.
-- #param LangPref              Language Preference.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemWebContentDetLangs
(
		IN InstallationID varchar(3),
   	    IN ItemNumber NUMERIC(15,0),
		IN DesignStatus NUMERIC(15,0),
		IN UniqueKeyID NUMERIC(15,0),
		IN LangPref varchar(2)

)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContentDetLangs 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

DECLARE GLOBAL TEMPORARY TABLE SESSION.FINAL_TABLE
(
    ItemNumber  NUMERIC(15,0),
    UniqueKeyID NUMERIC(15,0),
    InstallationID varchar(3),
    DesignStatus NUMERIC(15,0),
    LangPref varchar(2),
    ParagraphTitle VARGRAPHIC(30) CCSID 13488,
    HtmlContent DBCLOB CCSID 13488,
    UserReservedCode varchar(2),
    UserReservedDate NUMERIC(15,0),
    UserReservedAmount NUMERIC(15,0),
    UserReservedNumber NUMERIC(15,0),
    UserReservedReference varchar(15),
    "USERID" varchar(10),
    "PROGRAMID" varchar(10),
    WorkStationId varchar(10),
    DateUpdated NUMERIC(15,0),
    TimeOfDay NUMERIC(15,0),
    LanguageDescE1 varchar(30)
)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
    
    BEGIN
	    DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	        SELECT 
	            A.ItemNumber,
                A.UniqueKeyID,
                A.InstallationID,
                A.DesignStatus,
                A.LangPref,
                A.ParagraphTitle,
                A.HtmlContent,
                A.UserReservedCode,
                A.UserReservedDate,
                A.UserReservedAmount,
                A.UserReservedNumber,
                A.UserReservedReference,
                A."USERID",
                A."PROGRAMID",
                A.WorkStationId,
                A.DateUpdated,
                A.TimeOfDay,
	            [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',A.LangPref,LangPref) AS LanguageDescE1
	        FROM SESSION.FINAL_TABLE A
	    FOR FETCH ONLY;
	    
        INSERT INTO SESSION.FINAL_TABLE
	    (
	        ItemNumber,
            UniqueKeyID,
            InstallationID,
            DesignStatus,
            LangPref,
            ParagraphTitle,
            HtmlContent,
            UserReservedCode,
            UserReservedDate,
            UserReservedAmount,
            UserReservedNumber,
            UserReservedReference,
            "USERID",
            "PROGRAMID",
            WorkStationId,
            DateUpdated,
            TimeOfDay
	    )
	SELECT	A.CLITM AS ItemNumber,
		A.CLUKID as  UniqueKeyID,
		A.CL$9INID AS InstallationID,
		A.CL$9DS AS DesignStatus,
		A.CLLNGP AS LangPref,
	    A.CL$9PTL AS ParagraphTitle
       ,A.CL$9HTML AS HtmlContent
       ,A.CLURCD AS UserReservedCode
       ,A.CLURDT AS UserReservedDate
       ,A.CLURAT AS UserReservedAmount
       ,A.CLURAB AS UserReservedNumber
       ,A.CLURRF AS UserReservedReference
       ,A.CLUSER AS "USERID"
       ,A.CLPID AS "PROGRAMID"
       ,A.CLJOBN AS WorkStationId
       ,A.CLUPMJ AS DateUpdated
       ,A.CLTDAY AS TimeOfDay
	   FROM [SCDATA].FQ67411L A
WHERE (CLITM = ItemNumber) AND
	  (CL$9INID = InstallationID) AND
      (DesignStatus IS NULL OR CL$9DS = DesignStatus) AND 
      (UniqueKeyID IS NULL OR CLUKID = UniqueKeyID);
		
		OPEN TEMP_CURSOR1;
	END;		
END ;
 -- #desc				        Get Web Content Header
-- #bl_class			        N/A
-- #db_dependencies		        N/A
-- #db_references		        dbo.INV_GetItemWebContentHeader

-- #param ItemNumber			Item Number.
-- #param InstallationID		Installation ID.
-- #param DesignStatus			Desing Status.
-- #param LangPref			    Language Preference.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemWebContentHeadLangs
(
	  IN InstallationID varchar(3),
	  IN ItemNumber NUMERIC(15,0),
      IN DesignStatus NUMERIC(15,0),
      IN LangPref varchar(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContentHeadLangs
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

    DECLARE GLOBAL TEMPORARY TABLE SESSION.FINAL_TABLE
    (
        CLITM NUMERIC(15,0),
        CL$9INID varchar(3),
        CL$9DS NUMERIC(15,0),
        CLLNGP varchar(2),
        CLDSC1 VARGRAPHIC(30) CCSID 13488,
        CLDSC2 VARGRAPHIC(30) CCSID 13488,
        CLDSC3 VARGRAPHIC(30) CCSID 13488,
        CL$9HTML DBCLOB CCSID 13488,
        CLURCD varchar(2),
        CLURDT NUMERIC(15,0),
        CLURAT NUMERIC(15,0),
        CLURAB NUMERIC(15,0),
        CLURRF varchar(15),
        CLUSER  varchar(10),
        CLPID varchar(10),
        CLJOBN varchar(10),
        CLUPMJ NUMERIC(15,0),
        CLTDAY NUMERIC(15,0),
        LanguageDescE1 varchar(30)
    )WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	
	BEGIN
		DECLARE TEMP_WEBHEADERLNG CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		(
            SELECT
                CLITM AS ItemNumber,
                CL$9INID AS InstallationID,
                CL$9DS AS DesignStatus,
                CLLNGP AS LangPref,
                CLDSC1 AS Description1,
                CLDSC2 AS Description2,
                CLDSC3 AS Description3,
                CL$9HTML AS HtmlContent,
                CLURCD AS UserReservedCode,
                CLURDT AS UserReservedDate,
                CLURAT AS UserReservedAmount,
                CLURAB AS UserReservedNumber,
                CLURRF AS UserReservedReference,
                CLUSER AS "USERID",
                CLPID AS "PROGRAMID",
                CLJOBN AS WorkStationId,
                CLUPMJ AS DateUpdated,
                CLTDAY AS TimeOfDay,
                [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',CLLNGP,LangPref) AS LanguageDescE1
                FROM SESSION.FINAL_TABLE
        )FOR FETCH ONLY;
        
        INSERT INTO SESSION.FINAL_TABLE
        (
            CLITM,
            CL$9INID,
            CL$9DS,
            CLLNGP,
            CLDSC1,
            CLDSC2,
            CLDSC3,
            CL$9HTML,
            CLURCD,
            CLURDT,
            CLURAT,
            CLURAB,
            CLURRF,
            CLUSER,
            CLPID,
            CLJOBN,
            CLUPMJ,
            CLTDAY
        )
        SELECT
         A.CLITM
        ,A.CL$9INID
        ,A.CL$9DS
        ,A.CLLNGP
        ,A.CLDSC1
        ,A.CLDSC2
        ,A.CLDSC3       
        ,A.CL$9HTML
        ,A.CLURCD
        ,A.CLURDT
        ,A.CLURAT
        ,A.CLURAB
        ,A.CLURRF
        ,A.CLUSER
        ,A.CLPID
        ,A.CLJOBN
        ,A.CLUPMJ
        ,A.CLTDAY
 FROM [SCDATA].FQ67410L A
 WHERE  (A.CLITM = ItemNumber)AND
		(A.CL$9INID =  InstallationID)AND
		(A.CL$9DS = DesignStatus);
		
		OPEN TEMP_WEBHEADERLNG;
	END;		
END
  ;
-- #desc						Read UOM 
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation 			Installation id
-- #param UnitofMeasureCode		Unit of Measure
-- #param LangPref				Language
-- #param Description			Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetUnitOfMeasureLangs
(
  IN InstallationID		GRAPHIC(3) CCSID 13488,
  IN UnitofMeasure		GRAPHIC(2) CCSID 13488,
  IN LangPref			GRAPHIC(2) CCSID 13488 
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetUnitOfMeasureLangs 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		UM$9INID	AS InstallationID, 
		UMUOM		AS UnitofMeasure, 
		UMLNGP		AS LanguagePref,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',UMLNGP,LangPref)	AS LanguageDescE1,
		UMDSC1		AS Description	
	FROM  
		[SCDATA].FQ67415L
	WHERE UMUOM = UnitofMeasure
		ORDER BY UMUOM, UMLNGP
	FOR FETCH ONLY;
			
	OPEN TEMP_CURSOR1; 
END;
-- #desc				Delete AboutUs language.
-- #bl_class			Premier.Profile.AboutUsLang.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param AboutUsID		AboutUsID
-- #param LangPref		Language

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_DelAboutUsLang 
(
	IN AboutUsID	varchar(3),
	IN LangPref		varchar(2)
)		
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_DelAboutUsLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DELETE FROM
			[SCDATA].FQ67102L 
	WHERE 
			HH$9HHA  = AboutUsID AND
			HHLNGP =  LangPref;
END			
     ;
-- #desc						Delete line of business.
-- #bl_class					Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param LineOfBusinessID		Line of business 
-- #param LangPref				Language

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_DelLineOfBusinessLang 
(
	LineOfBusinessID	varchar(3),
	LangPref			varchar(2)
)		
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_DelLineOfBusinessLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DELETE  FROM
			[SCDATA].FQ67103L 
	WHERE 
			LB$9LOB  = LineOfBusinessID AND
			(LangPref IS NULL OR LBLNGP = LangPref);
END
    ;
-- #desc				Read AboutUsLangs
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param AboutUsID 	AboutUsID
-- #param LangPref		Language

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAboutUsLangs
(
  IN AboutUsID		GRAPHIC(3) CCSID 13488,
  IN LangPref		GRAPHIC(2) CCSID 13488 
)  
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetAboutUsLangs  
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE TEMP_CURLANG CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT  
		HH$9HHA		AS AboutUsID, 
		HHLNGP		AS LanguagePref,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',HHLNGP,LangPref) AS LanguageDescE1,
		HHDSC1		AS Description
	FROM  
		[SCDATA].FQ67102L
	WHERE 
		HH$9HHA =  AboutUsID
	FOR FETCH ONLY;
		
	OPEN TEMP_CURLANG;
	
END;
-- #desc					Fetch Contact Extended Info for Customer/Consumer
-- #bl_class	 	 		N/A
-- #db_dependencies		    N/A
-- #db_references			CST_GetContactChildren, CSM_GetContactChildren

-- #param AddressNumber		Address Number
-- #param AddressType		AddressBook Type
-- #param ContactID			Contact ID

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetContactExtInformation
(
	AddressNumber NUMERIC(15,0),
	AddressType NUMERIC(15,0),
	ContactID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetContactExtInformation 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
		DECLARE TEMP_EXTINFO CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			AB$9AN8 AS AddressNumber  ,
			AB$9TYP AS AddressType  ,
			ABIDLN AS ContactID  ,
			ABLNGP AS LanguagePreference  ,
			AB$9SHAN AS ShipToNumber  ,
			AB$9MAIL AS MailPreference  ,
			AB$9EMYN AS EmailPreference  ,
			AB$9EMFP AS EmailFormat  ,
			AB$9MLCP AS MailContentPreference  ,
			AB$9MLP AS PartnerMail  ,
			AB$9EMALS AS ShareEmail  ,
			AB$9CRS AS IsCrossRefOn  ,
			ABURC1 AS UserReserveCode1  ,
			ABURC2 AS UserReserveCode2  ,
			ABURRF AS UserReservedReference  ,
			ABURAB AS UserReservedNumber  ,
			ABURDT AS UserReservedDate  ,
			ABURAT AS UserReservedAmount  ,
			ABAURCH1 AS UserReservedChar  ,
			ABUSER AS "USERID"  ,
			ABPID AS "PROGRAMID"  ,
			ABUPMJ AS DateUpdated  ,
			ABJOBN AS WorkStationId  ,
			ABUPMT AS TimeLastUpdated  ,
			ABRELY AS RelationType  ,
			ABRCK7 AS ShipToContactID ,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','RT',ABRELY,'*') AS RelationTypeDescription
		FROM [SCDATA].FQ67104
		WHERE AB$9AN8 = AddressNumber AND 
		AB$9TYP = AddressType AND 
		ABIDLN = ContactID
		FOR FETCH ONLY;		
		OPEN TEMP_EXTINFO;	
END



 ;
-- #desc						Read LineOfBusinessLangs
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LineOfBusinessID 		LineOfBusinessID
-- #param LangPref				Language

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetLineOfBusinessLangs
(
  LineOfBusinessID		GRAPHIC(3) CCSID 13488,
  LangPref				GRAPHIC(2) CCSID 13488 
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetLineOfBusinessLangs  
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURLANG CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT  
		LB$9LOB		 LineOfBusinessID, 
		LBLNGP		 LanguagePref,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',LBLNGP,LangPref) AS LanguageDescE1,
		LBDSC1		 Description
	FROM  
		[SCDATA].FQ67103L
	WHERE 
				LB$9LOB =  LineOfBusinessID
	ORDER BY LB$9LOB
	FOR FETCH ONLY;
		  
	OPEN TEMP_CURLANG;	
END;
-- #desc				Delete password  history by User Id
-- #bl_class			N/A
-- #db_dependencies		    N/A
-- #db_references		SEC_DelUser

-- #param "USERID"	User ID number.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_DelPasswordHistory 
(
	IN "USERID"	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_DelPasswordHistory
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DELETE  

FROM  
	[SCDATA].FQ679911
WHERE 
	PH$9USER = "USERID";

END

  ;
-- #desc					Delete from User by Installation Table 
-- #bl_class				Premier.Security.StoreByUserList.cs/UserStore.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A				

-- #param "USERID"			User ID number.
-- #param InstallationID	Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_DelUserByInst 
(
	IN "USERID"			NUMERIC(15,0),
	IN InstallationID	VARCHAR(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_DelUserByInst
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE  
	FROM  
		[SCDATA].FQ67996
	WHERE 
		        (UI$9USER = "USERID" )
		    AND (TRIM(InstallationID) = '*' OR UI$9INID = InstallationID);
END		
 ;
-- #desc					Delete user permision, when permission code is null delete all permision of the user.
-- #bl_class				Premier.Security.UserPermission.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param "USERID"			User ID number.
-- #param PermissionCode	Permission code.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_DelUserPermission 
(
	"USERID"	        NUMERIC(15,0),
	PermissionCode	VARCHAR(5)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_DelUserPermission
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE  
	
	FROM  
		[SCDATA].FQ67997
	WHERE 
		UP$9USER = "USERID" AND 
		(PermissionCode IS NULL OR UP$9PCD = PermissionCode);


END ;
-- #desc						Read related Installation list by "USERID" and Installation type.
-- #bl_class					Premier.Security.StoreByUserList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param "USERID"				User ID
-- #param ApplicationUseFlag	Installation type

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetInstByUserListRelated 
(
	IN "USERID"				NUMERIC(15,0),
	IN ApplicationUseFlag	varchar(4)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetInstByUserListRelated
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT  
			A.IN$9INID	AS InstallationID, 
			UI$9USER	AS "USERID",
			INDSC1		AS Description,
			IN$9APFL	AS ApplicationUseFlag
		FROM  
			-- Installation Id's 	
			[SCDATA].FQ670001 A
		INNER JOIN [SCDATA].FQ67996 B --User by Installation
			ON A.IN$9INID = B.UI$9INID
		WHERE 
			UI$9USER = "USERID"
			AND
			(ApplicationUseFlag = '*' OR 
			IN$9APFL= ApplicationUseFlag)
			ORDER BY IN$9APFL ASC, INDSC1 ASC		
		FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;
END		 	
	
					 ;
-- #desc						Read user permission. 
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				SEC_GetUser

-- #param "USERID"				User ID number.
-- #param PermissionCode		Permission code.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetUserPermisions 
(
	IN "USERID"	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetUserPermisions
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT  
		A.UP$9USER	AS "USERID", 
		A.UP$9PCD	AS PermissionCode, 
		B.PEDSC1	AS Description,
		A.UP$9ALLOW AS ActionAllowed,
		B.PECLS as ApplicationUseFlag 
	FROM  
		[SCDATA].FQ67997 A
		INNER JOIN [SCDATA].FQ67994 B
		ON A.UP$9PCD = B.PE$9PCD
	WHERE 
		A.UP$9USER = "USERID" 	
		
	FOR FETCH ONLY;
	OPEN TEMP_CURSOR;
END ;
-- #desc				Read all user information.  Uses procedures:
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_GetUserPermision
-- #db_references       N/A

-- #param "USERID"	    User ID number.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].SEC_GetUser
(
  IN "USERID" NUMERIC(15,0)
) 
DYNAMIC RESULT SETS 4 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetUser
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
SELECT 
	USR.US$9USER	as "USERID" , 
	COALESCE(WUSR.WAEMAL, USR.US$9USRN)	as UserName , 
	USR.US$9PWD		as Password ,  
	USR.USLNGP		as LanguagePreference , 
    USR.US$9SQ		as SecretQuestion ,   
    USR.US$9ANS		as SecretAnswer ,  
    USR.US$9LDPC	as LastDatePasswordChanged, 
    USR.US$9SFCP	as ChangePassword ,  
    USR.US$9SFNP	as NoPasswordChange , 
    USR.US$9SFNE	as PasswordExpires , 
    USR.US$9SFAD	as AccountDisable , 
    USR.US$9SFAL	as AccountLockout ,
	USR.US$9LDAL	as LastDateAccountLocked, 
	USR.US$9LTAL	as LastTimeAccountLocked
FROM 
	[SCDATA].FQ67991 USR
LEFT OUTER JOIN	[SCDATA].FQ67101 WUSR
	ON WUSR.WA$9USER = USR.US$9USER
WHERE 
	-- User Id filter	
    (USR.US$9USER = "USERID")
FOR FETCH ONLY;

OPEN TEMP_CURSOR; 
    
--User Permisions
CALL [SCLIBRARY].SEC_GetUserPermisions("USERID");

--User Installations
CALL [SCLIBRARY].SEC_GetInstByUserListRelated ("USERID",'*');

END ;
-- #desc				        Fetch Consumer Contacts excluding main consumer contact 0 or 1
-- #bl_class	 	 	        N/A
-- #db_dependencies		        N/A
-- #db_references			    CSM_GetConsumer

-- #param AddressNumber		    Consumer Number
-- #param ContactID			    Contact ID ( The main contact to exclude )

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetConsumerContacts
(
	AddressNumber	NUMERIC(15,0),
	ContactID		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetConsumerContacts 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			PC$9AN8		AS AddressNumber,   
			PCIDLN		AS ContactID,    
			PCMLNM		AS MailingName, 
 			PCATTL		AS Salutation,    
 			PCEMAL		AS EmailAddress,    
 			PCSLNM		AS Title,    
 			PCALPH		AS AlphaName, 
 			PCGNNM		AS FirstName,    
 			PCMDNM		AS MiddleName,    
 			PCSRNM		AS LastName,    
 			PCTYC		AS Type, 
 			PCURC1		AS UserReserveCode1,    
 			PCURC2		AS UserReserveCode2,    
 			PCURRF		AS UserReservedReference,    
 			PCURAB		AS UserReservedNumber, 
 			PCURDT		AS UserReservedDate,    
 			PCURAT		AS UserReservedAmount,    
 			PCAURCH1	AS UserReservedChar,  
 			PC$9W001	AS CategoryCode001,  
 			PC$9W002	AS CategoryCode002,  
 			PC$9W003	AS CategoryCode003,  
 			PC$9W004	AS CategoryCode004, 
 			PC$9W005	AS CategoryCode005,  
 			PC$9W006	AS CategoryCode006,  
 			PC$9W007	AS CategoryCode007,  
 			PC$9W008	AS CategoryCode008, 
 			PC$9W009	AS CategoryCode009,  
 			PC$9W010	AS CategoryCode010,
 			PCUSER		AS "USERID", 
 			PCPID		AS "PROGRAMID" ,     
 			PCUPMJ		AS DateUpdated,    
 			PCJOBN		AS WorkStationId,    
 			PCUPMT		AS TimeLastUpdated
	FROM [SCDATA].FQ67303
	WHERE PC$9AN8 = AddressNumber 
	AND PCIDLN <> ContactID -- Main Contact To Exclude.

		FOR FETCH ONLY;	
		OPEN TEMP_CURSOR;			
	END ;
-- #desc						Return the first phone
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			AddressNumber
-- #param ContactID				ContactID
-- #param PhoneType				PhoneType

CREATE OR REPLACE FUNCTION [SCLIBRARY].CSM_GetConsumerPrimaryPhone
(
	AddressNumber		NUMERIC(15,0),
	ContactID			DECIMAL(5,0),
	PhoneType			VARGRAPHIC(4) CCSID 13488
)
RETURNS TABLE
(
	ConsumerAddressNumber 	NUMERIC(15,0), --Used to perform the JOIN
	Phone 			VARGRAPHIC(50) CCSID 13488
)
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CSM_GetConsumerPrimaryPhone
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
BEGIN
	RETURN(	
		SELECT 
			PP$9AN8 AS AddressNumber,
			COALESCE(CASE WHEN COALESCE (PPAR1, '') = '' 
				THEN PPPH1
				ELSE '(' || TRIM(PPAR1) || ') ' || PPPH1 END, '') AS Phone 
		FROM	[SCDATA].FQ67304
		WHERE 
				PP$9AN8 = AddressNumber
			AND PPIDLN = ContactID
			AND PPPHTP = PhoneType
		)
		FETCH FIRST 1 ROWS ONLY;
END ;
-- #desc					Get Brand Mailing
-- #bl_class	 	 		N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param AddressBookType	AddressBookType
-- #param ContactID			ContactID
-- #param Brand				Brand

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetBrandMailSubscriptions
(
	IN AddressNumber		NUMERIC(15,0),
	IN AddressBookType		NUMERIC(15,0),
	IN ContactID			NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetBrandMailSubscriptions
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TEMP_BRANDTABLE
	(
		PR$9AN8		NUMERIC(15,0),
		PR$9TYP		NUMERIC(15,0),
		PRIDLN		NUMERIC(15,0),
		PR$9SRP1	VARCHAR(3),
		PR$9MAIL	VARCHAR(1),
		PR$9EMYN	NUMERIC(15,0),
		PR$9EMFP	NUMERIC(15,0),
		PR$9MLCP	VARCHAR(3),
		PR$9MLP		VARCHAR(1),
		PR$9EMALS	VARCHAR(1),
		PR$9MLF1	VARCHAR(1),
		PR$9MLF2	VARCHAR(1),
		PR$9MLF3	VARCHAR(1),
		PR$9MLF4	VARCHAR(1),
		PR$9MLF5	VARCHAR(1),
		PR$9MLF6	VARCHAR(1),
		PR$9MLF7	VARCHAR(1),
		PR$9MLF8	VARCHAR(1),
		PR$9MLF9	VARCHAR(1),
		PR$9MLF10	VARCHAR(1),
		PR$9MLC1	VARCHAR(3),
		PR$9MLC2	VARCHAR(3),
		PR$9MLC3	VARCHAR(3),
		PR$9MLC4	VARCHAR(3),
		PR$9MLC5	VARCHAR(3),
		PR$9MLC6	VARCHAR(10),
		PR$9MLC7	VARCHAR(10),
		PR$9MLC8	VARCHAR(10),
		PR$9MLC9	VARCHAR(10),
		PR$9MLC10	VARCHAR(10),
		PRURC1		VARCHAR(3),
		PRURC2		VARCHAR(10),
		PRURRF		VARCHAR(15),
		PRURAB		NUMERIC(15,0),
		PRURDT		NUMERIC(15,0),
		PRURAT		NUMERIC(15,0),
		PRAURCH1	VARCHAR(1),
		PRUSER		VARCHAR(10),
		PRPID		VARCHAR(10),
		PRUPMJ		NUMERIC(15,0),
		PRJOBN		VARCHAR(10),
		PRUPMT		NUMERIC(15,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	BEGIN
	DECLARE TEMP_BRANDCURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		A.PR$9AN8	AS	AddressNumber,
		A.PR$9TYP	AS	AddressBookType,
		A.PRIDLN	AS	ContactID,
		A.PR$9SRP1	AS	Brand,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc('58','S1',A.PR$9SRP1,'*') AS BrandDescription,
		A.PR$9MAIL	AS	MailPreference,
		A.PR$9EMYN	AS	EmailPreference,
		A.PR$9EMFP	AS	EmailFormat,
		A.PR$9MLCP	AS  MailContentPreference,
		A.PR$9MLP	AS	PartnerMail,
		A.PR$9EMALS	AS	ShareEmail,
		A.PR$9MLF1	AS	MailingFlag1,
		A.PR$9MLF2	AS	MailingFlag2,
		A.PR$9MLF3	AS	MailingFlag3,
		A.PR$9MLF4	AS	MailingFlag4,
		A.PR$9MLF5	AS	MailingFlag5,
		A.PR$9MLF6	AS	MailingFlag6,
		A.PR$9MLF7	AS	MailingFlag7,
		A.PR$9MLF8	AS	MailingFlag8,
		A.PR$9MLF9	AS	MailingFlag9,
		A.PR$9MLF10	AS	MailingFlag10,
		A.PR$9MLC1	AS	MailingCatCode1,
		A.PR$9MLC2	AS	MailingCatCode2,
		A.PR$9MLC3	AS	MailingCatCode3,
		A.PR$9MLC4	AS	MailingCatCode4,
		A.PR$9MLC5	AS	MailingCatCode5,
		A.PR$9MLC6	AS	MailingCatCode6,
		A.PR$9MLC7	AS	MailingCatCode7,
		A.PR$9MLC8	AS	MailingCatCode8,
		A.PR$9MLC9	AS	MailingCatCode9,
		A.PR$9MLC10	AS	MailingCatCode10,
		A.PRURC1	AS	UserReserveCode1,
		A.PRURC2	AS	UserReserveCode2,
		A.PRURRF	AS	UserReservedReference,
		A.PRURAB	AS	UserReservedNumber,
		A.PRURDT	AS	UserReservedDate,
		A.PRURAT	AS	UserReservedAmount,
		A.PRAURCH1	AS	UserReservedChar,
		A.PRUSER	AS	"USERID",
		A.PRPID		AS	"PROGRAMID",
		A.PRUPMJ	AS	DateUpdated,
		A.PRJOBN	AS	WorkStationId,
		A.PRUPMT	AS	TimeLastUpdated
	FROM
		SESSION.TEMP_BRANDTABLE A
		FOR FETCH ONLY;
		
		INSERT INTO SESSION.TEMP_BRANDTABLE
		SELECT
			PR$9AN8,
			PR$9TYP,
			PRIDLN,
			PR$9SRP1,
			PR$9MAIL,
			PR$9EMYN,
			PR$9EMFP,
			PR$9MLCP,
			PR$9MLP,
			PR$9EMALS,
			PR$9MLF1,
			PR$9MLF2,
			PR$9MLF3,
			PR$9MLF4,
			PR$9MLF5,
			PR$9MLF6,
			PR$9MLF7,
			PR$9MLF8,
			PR$9MLF9,
			PR$9MLF10,
			PR$9MLC1,
			PR$9MLC2,
			PR$9MLC3,
			PR$9MLC4,
			PR$9MLC5,
			PR$9MLC6,
			PR$9MLC7,
			PR$9MLC8,
			PR$9MLC9,
			PR$9MLC10,
			PRURC1,
			PRURC2,
			PRURRF,
			PRURAB,
			PRURDT,
			PRURAT,
			PRAURCH1,
			PRUSER,
			PRPID,
			PRUPMJ,
			PRJOBN,
			PRUPMT			
		  FROM
				[SCDATA].FQ671041
		  WHERE
		  	  PR$9AN8  = AddressNumber
		  AND PR$9TYP  = AddressBookType
		  AND PRIDLN   = ContactID;

		OPEN TEMP_BRANDCURSOR;
	END;	
END ;
-- #desc			        Reads the phones associated with a consumer
-- #bl_class		        N/A
-- #db_dependencies	        N/A
-- #db_references		    CSM_GetContactChildren

-- #param AddressNumber		Address Number to search for
-- #param ContactID			Contact Id to search for
-- #param TelephoneID		TelephoneID (optional)

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetPhones
(
	IN AddressNumber NUMERIC(15,0),
	IN ContactID NUMERIC(15,0),
	IN TelephoneID NUMERIC(15,0),
	IN LanguagePreference VARCHAR(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetPhones 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
    DECLARE GLOBAL TEMPORARY TABLE SESSION.Phones_TMP_TABLE
    (
        PP$9AN8 NUMERIC(15,0),  
        PPIDLN NUMERIC(15,0), 
        PPRCK7 NUMERIC(15,0), 
        PPPHTP varchar(4),   
        PPAR1 varchar(6),  
        PPPH1 varchar(20),  
        PPURC1 varchar(3), 
        PPURC2 varchar(10),   
        PPURRF varchar(15), 
        PPURAB NUMERIC(15,0), 
        PPURDT NUMERIC(15,0), 
        PPAURCH1  varchar(1), 
        PPUSER  varchar(10), 
        PPPID  varchar(10),  
        PPUPMJ  NUMERIC(15,0), 
        PPJOBN  varchar(10),   
        PPUPMT NUMERIC(15,0)
    )WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
    
    BEGIN

	    DECLARE PHONE_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	        SELECT
                PP$9AN8 AS AddressNumber,  
                PPIDLN AS ContactID, 
                PPRCK7 AS TelephoneID, 
                PPPHTP AS PhoneType,   
                PPAR1 AS AreaCode,  
                PPPH1 AS PhoneNumber,  
                PPURC1 AS UserReserveCode1, 
                PPURC2 AS UserReserveCode2,   
                PPURRF AS UserReservedReference, 
                PPURAB AS UserReservedNumber, 
                PPURDT AS UserReservedDate, 
                PPAURCH1 AS UserReservedChar, 
                PPUSER AS "USERID", 
                PPPID AS "PROGRAMID",  
                PPUPMJ AS DateUpdated, 
                PPJOBN AS WorkStationId,   
                PPUPMT AS TimeLastUpdated,
                [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','PH',PPPHTP,LanguagePreference) AS PhoneTypeDescription
            FROM SESSION.Phones_TMP_TABLE	    
	    FOR FETCH ONLY;
	    
	        INSERT INTO SESSION.Phones_TMP_TABLE
	        (
	            PP$9AN8,
                PPIDLN,
                PPRCK7,
                PPPHTP,
                PPAR1,
                PPPH1,
                PPURC1,
                PPURC2,
                PPURRF,
                PPURAB,
                PPURDT,
                PPAURCH1,
                PPUSER,
                PPPID,
                PPUPMJ,
                PPJOBN,
                PPUPMT
	        )
		    SELECT  
			    A.PP$9AN8 AS AddressNumber,  
			    A.PPIDLN AS ContactID, 
			    A.PPRCK7 AS TelephoneID, 
			    A.PPPHTP AS PhoneType,   
			    A.PPAR1 AS AreaCode,  
			    A.PPPH1 AS PhoneNumber,  
			    A.PPURC1 AS UserReserveCode1, 
			    A.PPURC2 AS UserReserveCode2,   
			    A.PPURRF AS UserReservedReference, 
			    A.PPURAB AS UserReservedNumber, 
			    A.PPURDT AS UserReservedDate, 
			    A.PPAURCH1 AS UserReservedChar, 
			    A.PPUSER AS "USERID", 
			    A.PPPID AS "PROGRAMID",  
			    A.PPUPMJ AS DateUpdated, 
			    A.PPJOBN AS WorkStationId,   
			    A.PPUPMT AS TimeLastUpdated
		    FROM  [SCDATA].FQ67304 A
		    WHERE A.PP$9AN8 = AddressNumber
		    AND A.PPIDLN = ContactID
		    AND (TelephoneID is null OR A.PPRCK7 = TelephoneID);
    	
        OPEN PHONE_CURSOR;
        END;

END ;
-- #desc							Get Consumer ship tos by address number
-- #bl_class						Premier.Consumer.ShipToList.cs
-- #db_dependencies					CSM_GetShipToListFnc
-- #db_references					N/A		

-- #param StoreId 					StoreId 
-- #param Status					Status
-- #param ParentAddressNumber		Parent Address Number
-- #param WebAccountId				Web Account Id
-- #param FilterByWebAccount		Filter By Web Account
-- #param Name						Filter Term to search ship to by Name
-- #param Address					Filter Term to search ship to by address 1
-- #param City						Filter Term to search ship to by City
-- #param State						Filter Term to search ship to by State (Code)
-- #param ZipCode					Filter Term to search ship to by Zip Code
-- #param Country					Filter Term to search ship to by Country(code)
-- #param SortBy					Column to filter by Name (Default PRALPH),
--									Address (PRADD1), City, State, ZipCode */
-- #param SortDir					Direction to filter (A = Ascendent, D = Descendent) 
-- #param PageIndex					Page Index
-- #param PageSize					Page Size
-- #param RetrievePrimaryPhone		Retrieve Primary Phone(1 true, 0 false) 

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetShipToList
(
	IN StoreId				GRAPHIC(3) CCSID 13488,
	IN ParentAddressNumber	NUMERIC(15,0),
	IN WebAccountId			DECIMAL,
	IN FilterByWebAccount	INT,
	IN Status				GRAPHIC(1) CCSID 13488,
	IN Name			        VARGRAPHIC(100) CCSID 13488,
	IN Address				VARGRAPHIC(40) CCSID 13488,
	IN City					VARGRAPHIC(25) CCSID 13488,
	IN State				GRAPHIC(3) CCSID 13488,
	IN ZipCode				VARGRAPHIC(12) CCSID 13488,
	IN Country				GRAPHIC(3) CCSID 13488,
	IN SortBy				VARCHAR(40),
	IN SortDir				VARCHAR(3),
	IN RetrievePrimaryPhone	INT,
	IN PageIndex            INT,
    IN PageSize             INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetShipToList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DECLARE RowStart INT DEFAULT 0; 
	DECLARE RowEnd INT DEFAULT 0; 

	-- Get the PhoneType value constant
	DECLARE PHONECONSTANTCMP VARGRAPHIC(4) CCSID 13488;
	DECLARE PHONECONSTANTIND VARGRAPHIC(4) CCSID 13488;
	
	DECLARE PHONECMPINSTA     GRAPHIC(3) CCSID 13488;
	DECLARE PHONEINDINSTA     GRAPHIC(3) CCSID 13488;

	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC			VARGRAPHIC(8000) CCSID 13488;
	DECLARE SQL_DYNAMIC			VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE SORT_DYNAMIC		VARGRAPHIC(40) CCSID 13488;
	DECLARE SORTDIR_DYNAMIC		VARGRAPHIC(20) CCSID 13488;
	DECLARE SHIPTO_DYNAMIC		VARGRAPHIC(8000) CCSID 13488;
	DECLARE SHIPTO_COUNT 		INT;

	/* CURSOR FOR DYNAMIC SQL */
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;
		
	SET PHONECMPINSTA = StoreId;
	SET PHONEINDINSTA = StoreId;
	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	CALL [SCLIBRARY].CMM_GetConstantValue ('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);
	
	IF(STATUS = '') THEN
		SET STATUS = NULL;
	END IF;

	/* Paging */
	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);

	/* Dynamic sort direction statement */
	SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE ' ' END;

	/* Dynamic sort statement */
	SET SORT_DYNAMIC = CASE SortBy 
							WHEN 'Address' THEN 'PRADD1' 
							WHEN 'City' THEN 'PRCTY1' 
							WHEN 'State' THEN 'PRADDS' 
							WHEN 'ZipCode' THEN 'PRADDZ' 
							WHEN 'MailingName' THEN 'UPPER(PCMLNM)'
							ELSE 'PRALPH' END;

	SET SORT_DYNAMIC = SORT_DYNAMIC || SORTDIR_DYNAMIC;

	SET SHIPTO_COUNT = (SELECT count(*) FROM [SCDATA].FQ67101S WHERE WS$9INID = StoreId AND WS$9WAN8 = WebAccountId AND WS$9AN8=ParentAddressNumber);
	
	/* If the FilterByWebAccount parameter is true, it returns only the selected ship to's for the web account,
	otherwise it returns the complete list with the difference that the Selected property would be true or false.*/
	IF (FilterByWebAccount = 1 AND SHIPTO_COUNT > 0) THEN
		SET SHIPTO_DYNAMIC = N' INNER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = ? AND S.WS$9INID = ?  AND S.WS$9AN8 = ? AND S.WS$9SHAN = PR$9AN8 ';
	ELSE
		SET SHIPTO_DYNAMIC = N' LEFT OUTER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = ? AND S.WS$9INID = ? AND S.WS$9AN8 = ? AND S.WS$9SHAN = PR$9AN8 ';
	END IF;

	/* Dynamic query condition */
	SET WHERE_DYNAMIC = '';

	IF (Name <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(PRALPH)  LIKE ''%'' || ? || ''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ';
	END IF;

	IF (Address <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(PRADD1) LIKE ''%'' || ? || ''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ';
	END IF;

	IF (City <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(PRCTY1) LIKE ''%'' || ? || ''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ';
	END IF;

	IF (State <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND PRADDS = ? ';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ';
	END IF;

	IF (ZipCode <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND PRADDZ LIKE ''%'' || ? || ''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ';
	END IF;

	IF (Country <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND PRCTR = ? ';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ';
	END IF;

	/* Dynamic query condition */
	IF (Status <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND T0.PR$9STS = ? ';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ';
	END IF;

	SET SQL_DYNAMIC = N' WITH CTE1 AS (
		SELECT PR$9AN8 AS AddressNumber,
			PR$9PA8 AS ParentAddressNumber,
			PRALPH AS AlphaName,
			PCMLNM AS MailingName,
			PRADD1 AS AddressLine1,
			PRADD2 AS AddressLine2,
			PRADD3 AS AddressLine3,
			PRADD4 AS AddressLine4,
			PRCTY1 AS City,
			PRADDS AS State,
			PRADDZ AS ZipCode,
			PRCTR AS Country,
			PCIDLN AS ContactId,
			PCGNNM AS Firstname,
			PCMDNM AS Middlename,
			PCSRNM AS Lastname,
			PRURRF AS Nickname,
			COALESCE(S.WS$9WAN8, 0) AS Selected,
			0 AS PoBoxFlag,
			PRDEL1 AS DeliveryInstructions1,
			PRDEL2 AS DeliveryInstructions2,
			PR$9STS AS Status,';
	IF(RetrievePrimaryPhone = 1) THEN
		SET SQL_DYNAMIC = SQL_DYNAMIC ||
			N' 
			MainPhone.Phone, ';
	ELSE
		SET SQL_DYNAMIC = SQL_DYNAMIC ||
			N' 
			'''' AS Phone, ';
	END IF;
	SET SQL_DYNAMIC = SQL_DYNAMIC ||
			N' ROWNUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || N') AS RNUM
		FROM [SCDATA].FQ670302 T0
		INNER JOIN [SCDATA].FQ67303 T1
			ON T0.PR$9AN8 = T1.PC$9AN8
			AND T1.PCIDLN = 0 '
			|| SHIPTO_DYNAMIC || ' ';
		
	IF(RetrievePrimaryPhone = 1) THEN
		SET SQL_DYNAMIC = SQL_DYNAMIC ||
			N' 
		INNER JOIN [SCDATA].FQ67107
			ON PS$9AN8 =  T1.PC$9AN8
			AND PS$9TYP = 1
		LEFT OUTER JOIN TABLE(SCLIBRARY.CSM_GetConsumerPrimaryPhone(PR$9AN8, 0, CASE WHEN PS$9ICF = 0 THEN ''' || PHONECONSTANTIND || N''' ELSE ''' || PHONECONSTANTCMP || N''' END)) AS MainPhone
			ON MainPhone.ConsumerAddressNumber = PR$9AN8 ';
	END IF;
	SET SQL_DYNAMIC = SQL_DYNAMIC ||
		N' WHERE T0.PRBADT IN (''S'', ''X'')
			AND (T0.PR$9PA8 = ? OR T0.PR$9AN8 = ?) 
		'|| WHERE_DYNAMIC|| N'
	)
	SELECT CTE1.AddressNumber, CTE1.ParentAddressNumber, CTE1.AlphaName, CTE1.MailingName, CTE1.AddressLine1,
		CTE1.AddressLine2, CTE1.AddressLine3, CTE1.AddressLine4, CTE1.City, CTE1.State,
		CTE1.ZipCode, CTE1.Country, CTE1.ContactId, CTE1.Firstname, CTE1.Middlename, CTE1.Lastname, CTE1.Nickname,
		CTE1.PoBoxFlag, CTE1.DeliveryInstructions1, CTE1.DeliveryInstructions2, CTE1.Status, CTE1.Selected,
		CTE1.Phone, 
		(SELECT COUNT(1) FROM CTE1) AS TotalRowCount 
	FROM CTE1
	WHERE (( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? )) ';

	PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
	OPEN TEMP_CURSOR1 USING WebAccountId, StoreId, ParentAddressNumber, ParentAddressNumber, ParentAddressNumber, Name, Address, City, State, ZipCode, Country, Status,
							PageIndex, PageSize, RowStart, RowEnd;
END;
 -- #desc						Gets Customer Information
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Company				Company
-- #param AddressNumber			AddressNumber

CREATE OR REPLACE FUNCTION [SCLIBRARY].CST_GetCustomerInfoFnc
(
	Company		    VARGRAPHIC(5) CCSID 13488,
	AddressNumber	NUMERIC(8,0)
)
RETURNS TABLE(
    AIAN8	NUMERIC(8,0),			/* AddressNumber 		*/
	AICO 	GRAPHIC(5) CCSID 13488,	/* Company				*/
	AIBADT 	GRAPHIC(1) CCSID 13488,	/* BillingAddressType	*/
	AICMGR 	GRAPHIC(10) CCSID 13488,/* AccountRepresentative*/
	AICARS  NUMERIC(8,0),			/* Carrier				*/
	AITXA1 	GRAPHIC(10) CCSID 13488,/* TaxAreaCode			*/
	AIEXR1 	GRAPHIC(2) CCSID 13488,	/* TaxExplanationCode	*/
	AIPORQ 	GRAPHIC(1) CCSID 13488,	/* CustomerPORequired	*/
	AIAPRC 	DECIMAL(15,0),			/* OpenOrders			*/
	AIACL 	DECIMAL(15,0),			/* CreditLimit			*/
	AIDAOJ 	NUMERIC(6,0),			/* DateAccountOpened	*/
	AITRAR 	GRAPHIC(3) CCSID 13488,	/* PaymentTermsCode		*/
	AIASTY 	DECIMAL(15,0),			/* InvoicedYTD			*/
	AISPYE 	DECIMAL(15,0),			/* InvoicedPriorYear	*/
	AICPGP 	GRAPHIC(8) CCSID 13488,	/* PricingGroup			*/
	AIBACK	GRAPHIC(1) CCSID 13488,	/* AllowBackOrder		*/
	AICUSTS	GRAPHIC(1) CCSID 13488,	/* Status				*/
	AIDEL1	GRAPHIC(30) CCSID 13488,	/* DeliveryInstructions1*/
	AIDEL2	GRAPHIC(30) CCSID 13488,	/* DeliveryInstructions2*/
	AIEDF2  GRAPHIC(1) CCSID 13488,  /* ItemRestrictionsCode	*/
	AIMINO 	DECIMAL(15,0),			/* MinimumOrderAmount	*/
	AIMAXO 	DECIMAL(15,0)			/* MaximumOrderAmount	*/
)
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CST_GetCustomerInfoFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
RETURN 
	WITH CTE AS (
		SELECT CASE WHEN COUNT(1) > 0 THEN Company ELSE '00000' END AS CompanyTMP 
		FROM [SCDATA].F03012
		WHERE AIAN8 = AddressNumber AND AICO = Company
	)
	SELECT 
		AIAN8,					/* AddressNumber		*/
		CTE.CompanyTMP AS AICO,	/* Company				*/
		AIBADT,					/* BillingAddressType	*/
		AICMGR,					/* AccountRepresentative*/
		AICARS,					/* Carrier				*/
		AITXA1,					/* TaxAreaCode			*/
		AIEXR1,					/* TaxExplanationCode	*/
		AIPORQ,					/* CustomerPORequired	*/
		AIAPRC,					/* OpenOrders			*/
		AIACL,					/* CreditLimit			*/
		AIDAOJ,					/* DateAccountOpened	*/
		AITRAR,					/* PaymentTermsCode		*/
		AIASTY,					/* InvoicedYTD			*/
		AISPYE,					/* InvoicedPriorYear	*/
		AICPGP,					/* PricingGroup			*/
		AIBACK,					/* AllowBackOrder		*/
		AICUSTS,				/* Status				*/
		AIDEL1,					/* DeliveryInstructions1*/
		AIDEL2, 				/* DeliveryInstructions2*/
		AIEDF2,					/* ItemRestrictionsCode	*/
		AIMINO,					/* MinimumOrderAmount	*/
		AIMAXO					/* MaximumOrderAmount	*/
	FROM [SCDATA].F03012, CTE
	WHERE 
		AIAN8 = AddressNumber
		AND AICO = CTE.CompanyTMP;

-- #desc						Return the mail address or company url
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param ContactID				Contact ID 
-- #param Type					Electronic Address Type

CREATE OR REPLACE FUNCTION [SCLIBRARY].CST_GetPrimaryElectAddressFnc
(
	AddressNumber	NUMERIC(15,0),
	ContactID		NUMERIC(15,0),
	Type			VARCHAR(1)
)
RETURNS VARGRAPHIC(256) CCSID 13488
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CST_GetPrimaryElectAddressFnc
DISALLOW PARALLEL
NOT DETERMINISTIC
CALLED ON NULL INPUT
BEGIN
	
	DECLARE ElectronicAddress	VARGRAPHIC(256) CCSID 13488;

	SELECT	EAEMAL
	INTO ElectronicAddress
	FROM [SCDATA].F01151
	WHERE
		EAAN8 = AddressNumber AND
		EAIDLN = ContactID AND
		EAETP = Type
	ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC
	FETCH FIRST 1 ROW ONLY;
	
	RETURN (COALESCE(ElectronicAddress,''));
END  ;
-- #desc					Fetch Customer Contacts excluding main customer contact 0 or 1
-- #bl_class	 	 		N/A
-- #db_dependencies			N/A
-- #db_references			GetCustomerChildren

-- #param AddressNumber		Customer Number
-- #param ContactID			Contact ID ( The main contact to exclude )

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetCustomerContacts
(
	IN AddressNumber	NUMERIC(15,0),
	IN ContactID		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetCustomerContacts 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
				WWAN8	AS AddressNumber, 
				WWIDLN	AS ContactID,
				WWMLNM	AS MailingName,
				WWATTL	AS Title,
				[SCLIBRARY].CST_GetPrimaryElectAddressFnc(WWAN8,WWIDLN,'E') AS EmailAddress,
				WWSLNM	AS Salutation , 
				WWALPH	AS AlphaName , 
				WWGNNM	AS FirstName , 
				WWMDNM	AS MiddleName , 
				WWSRNM	AS LastName , 
				WWTYC	AS Type , 
				WWUSER	AS "USERID" , 
				WWPID	AS "PROGRAMID" , 
				WWUPMJ	AS DateUpdated , 
				WWJOBN	AS WorkStationId , 
				WWUPMT	AS TimeLastUpdated , 
				''		AS WebSite , 
				WWDC	AS CompressName  
		FROM [SCDATA].F0111
		WHERE WWAN8 = AddressNumber 
		AND WWIDLN <> ContactID
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END
 ;
-- #desc						Return the first phone
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			AddressNumber
-- #param ContactID				ContactID
-- #param PhoneType				PhoneType

CREATE OR REPLACE FUNCTION [SCLIBRARY].CST_GetCustomerPrimaryPhone
(
	AddressNumber		NUMERIC(8,0),
	ContactID			DECIMAL(5,0),
	PhoneType			VARGRAPHIC(4) CCSID 13488
)
RETURNS TABLE
(
	CustomerAddressNumber 	NUMERIC(8,0), /*Used to perform the JOIN*/
	Phone 			VARGRAPHIC(50) CCSID 13488
)
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CST_GetCustomerPrimaryPhone
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
BEGIN 
	RETURN (SELECT 	
				WPAN8 AS AddressNumber,
				COALESCE(CASE  WHEN COALESCE (WPAR1,'') = '' 
					THEN  WPPH1
					ELSE '(' || RTRIM(WPAR1) || ') ' || WPPH1 END, '') Phone 
			FROM
				[SCDATA].F0115
			WHERE 
				WPAN8 = AddressNumber
				AND WPIDLN = ContactID
				AND WPPHTP = PhoneType)
			FETCH FIRST 1 ROW ONLY;
END ;
-- #desc					Read Electronic Addresses
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param ContactID			Specific contact ID

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetElectronicAddress
(
	IN AddressNumber		NUMERIC(8,0),
	IN ContactID			DECIMAL(5,0),
	IN ElectronicAddressID	DECIMAL(5,0),
	IN ElectronicAddressType GRAPHIC(4) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetElectronicAddress 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	/*DYNAMIC SQL QUERY*/
	DECLARE SQL_DYNAMIC VARGRAPHIC(8000) CCSID 13488;
	DECLARE WHERE_CONDITION VARGRAPHIC(4000) CCSID 13488;

	/*CURSOR FOR DYNAMIC SQL*/
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC;

	/*DYNAMIC QUERY CONDITION*/
	SET  WHERE_CONDITION = ''; 

	IF (ContactID IS NOT NULL) THEN
		SET WHERE_CONDITION = N' AND EAIDLN = ? ';
	ELSE
		SET WHERE_CONDITION = N' AND (1 = 1 OR ? IS NULL) ';
	END IF;
	IF (ElectronicAddressID IS NOT NULL) THEN
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND EARCK7 = ? ';
	ELSE
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND (1 = 1 OR ? IS NULL) ';
	END IF;
	IF (ElectronicAddressType IS NOT NULL) THEN
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND EAETP = ? ';
	ELSE
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND (1 = 1 OR ? IS NULL) ';
	END IF;

	SET SQL_DYNAMIC = N'
		SELECT	
			EAAN8 AddressNumber,
			EAIDLN ContactID,
			EARCK7 ElectronicAddressID,
			EAETP ElectronicAddressType,
			EAEMAL Address
			
		FROM	
			[SCDATA].F01151
		WHERE
			EAAN8 = ?
			'|| WHERE_CONDITION ||'
		ORDER BY (CASE WHEN EAEHIER = 1 THEN 0 ELSE 1 END) ASC, EARCK7 DESC';
		
	PREPARE V_DYNAMIC FROM SQL_DYNAMIC;	

    OPEN TEMP_CURSOR1 USING AddressNumber, ContactID, ElectronicAddressID, ElectronicAddressType;
END
  ;
-- #desc						Fetch Phones for a Contact
-- #bl_class	 	 			N/A
-- #db_dependencies				N/A
-- #db_references				CST_GetContactChildren

-- #param AddressNumber			Address Number
-- #param ContactID				Contact ID
-- #param TelephoneID			TelephoneID (optional)

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetPhones
(
	IN AddressNumber NUMERIC(15,0),
	IN ContactID NUMERIC(15,0),
	IN TelephoneID NUMERIC(15,0),
	IN LangPref VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetPhones 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE PHONE_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT 
			WPAN8		AS AddressNumber  ,
			WPIDLN		AS ContactID  ,
			WPRCK7		AS TelephoneID  ,
			WPPHTP		AS PhoneType  ,
			WPAR1		AS AreaCode  ,
			WPPH1		AS PhoneNumber  ,
			WPUSER		AS "USERID"  ,
			WPPID		AS "PROGRAMID"  ,
			WPUPMJ		AS DateUpdated  ,
			WPJOBN		AS WorkStationId  ,
			WPUPMT		AS TimeLastUpdated  ,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','PH',WPPHTP ,LangPref)AS PhoneTypeDescription  
	FROM [SCDATA].F0115
    WHERE 
		WPAN8 = AddressNumber 
		AND WPIDLN = ContactID 
		AND (TelephoneID IS NULL OR WPRCK7 = TelephoneID);

    OPEN PHONE_CURSOR;
END




 ;
-- #desc							Get Customer ship tos by address number for DV811 environment
-- #bl_class						Premier.Customer.ShipToList.cs
-- #db_dependencies					N/A
-- #db_references					N/A
		
-- #param StoreId					StoreId
-- #param Company					Company
-- #param ParentAddressNumber		Parent Address Number
-- #param WebAccountId				Web Account Id
-- #param FilterByWebAccount		Filter By Web Account
-- #param Status					Status
-- #param Name				        Filter Term to search ship to by Name
-- #param Address					Filter Term to search ship to by address 1
-- #param City						Filter Term to search ship to by City
-- #param State						Filter Term to search ship to by State (Code)
-- #param ZipCode					Filter Term to search ship to by Zip Code
-- #param Country					Filter Term to search ship to by Country(code)
-- #param ZipCode					Filter Term to search ship to by Zip Code
-- #param Country					Filter Term to search ship to by Country(code)
-- #param SortBy					Column to filter by Name (Default WWMLNM),
--									Address (ALADD1), City, State, ZipCode */
-- #param SortDir					Direction to filter (A = Ascendant, D = Descendant) 
-- #param RetrievePrimaryPhone		Retrieve Primary Phone(1 true, 0 false) 
-- #param PageIndex					Page Index
-- #param PageSize					Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CST_GetShipToList
(
    IN StoreId				GRAPHIC(3) CCSID 13488,
    IN Company				GRAPHIC(5) CCSID 13488,
    IN ParentAddressNumber	NUMERIC(8,0),	
	IN WebAccountId			DECIMAL,
	IN FilterByWebAccount	INT,
    IN Status				GRAPHIC(1) CCSID 13488,
	IN Name			        VARGRAPHIC(40) CCSID 13488,
	IN Address				VARGRAPHIC(40) CCSID 13488,
	IN City					VARGRAPHIC(25) CCSID 13488,
	IN State				GRAPHIC(3) CCSID 13488,
	IN ZipCode				VARGRAPHIC(12) CCSID 13488,
	IN Country				GRAPHIC(3) CCSID 13488,
	IN SortBy				VARCHAR(40),
	IN SortDir				VARCHAR(3),
	IN RetrievePrimaryPhone	INT,
	IN PageIndex            INT,
    IN PageSize             INT
) 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetShipToList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
     
BEGIN 
	/* Paging */
    DECLARE RowStart INT;
	DECLARE RowEnd INT;
	
	DECLARE CurrentJulianDate NUMERIC(6,0);

  -- Get the PhoneType value constant
	DECLARE PhoneConstantCMP GRAPHIC(4) CCSID 13488;
	DECLARE PhoneConstantIND GRAPHIC(4) CCSID 13488;
	DECLARE CodeLength  INTEGER;
	DECLARE PhoneCMPInsta   GRAPHIC(3) CCSID 13488;
	DECLARE PhoneINDInsta   GRAPHIC(3) CCSID 13488;

	--------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;

	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC			VARGRAPHIC(8000) CCSID 13488;
	DECLARE SQL_DYNAMIC			VARGRAPHIC(10000) CCSID 13488;
	DECLARE SELECT_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE INNER_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE SORT_DYNAMIC		VARGRAPHIC(60) CCSID 13488;
	DECLARE SORTDIR_DYNAMIC		VARGRAPHIC(20) CCSID 13488;
	DECLARE SHIPTO_DYNAMIC		VARGRAPHIC(8000) CCSID 13488;
	DECLARE SHIPTO_COUNT 		INT;

	/* CURSOR FOR DYNAMIC SQL */
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;
	
	SET PhoneCMPinsta = StoreId;
	SET PhoneINDinsta = StoreId;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	
	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
	WHERE DTSY = 'H00' AND DTRT = 'TA');

	SET OrgStrTypeINID = StoreId;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);
	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CMP_PHTY01', PhoneCMPinsta, PhoneConstantCMP);
	CALL [SCLIBRARY].CMM_GetConstantValue ('IND_PHTY01', PhoneINDinsta, PhoneConstantIND);

	/* If settings do not exist, work like RetrievePrimaryPhone = 0 */
	IF(PhoneConstantCMP IS NULL OR PhoneConstantIND IS NULL) THEN
		SET RetrievePrimaryPhone = 0;
	END IF;
	
	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);

	/* Dynamic sort direction statement */
	SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE ' ' END;

	/* Dynamic sort statement */
	SET SORT_DYNAMIC = CASE SortBy 
							WHEN 'Address' THEN 'UPPER(AddressLine1)' 
							WHEN 'City' THEN 'UPPER(City)' 
							WHEN 'State' THEN 'State' 
							WHEN 'ZipCode' THEN 'ZipCode' 
							ELSE 'MailingName' END;

	SET SORT_DYNAMIC = SORT_DYNAMIC || SORTDIR_DYNAMIC;
	
	SET SHIPTO_COUNT = (SELECT count(*) FROM [SCDATA].FQ67101S WHERE WS$9INID = StoreId AND WS$9WAN8 = WebAccountId AND WS$9AN8=ParentAddressNumber);
	
	/* If the FilterByWebAccount parameter is true, it returns only the selected ship to's for the web account,
	otherwise it returns the complete list with the difference that the Selected property would be true or false.*/
	IF (FilterByWebAccount = 1 AND SHIPTO_COUNT > 0) THEN
		SET SHIPTO_DYNAMIC = N' INNER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = ? AND S.WS$9INID = ? AND S.WS$9AN8 = ? AND S.WS$9SHAN = ABAN8 ';
	ELSE
		SET SHIPTO_DYNAMIC = N' LEFT OUTER JOIN [SCDATA].FQ67101S S ON S.WS$9WAN8 = ? AND S.WS$9INID = ? AND S.WS$9AN8 = ? AND S.WS$9SHAN = ABAN8 ';
	END IF;
	
	/* Dynamic query condition */
	SET WHERE_DYNAMIC = '';

	IF (Name <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(WWMLNM)  LIKE ''%'' || ? || N''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')';
	END IF;

	IF (Address <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(ALADD1) LIKE ''%'' || ? || N''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')';
	END IF;

	IF (City <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(ALCTY1) LIKE ''%'' || ? || N''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')';
	END IF;

	IF (State <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ALADDS = ? ';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')';
	END IF;

	IF (ZipCode <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ALADDZ LIKE ''%'' || ? || N''%''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')';
	END IF;

	IF (Country <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ALCTR = ? ';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')';
	END IF;

	
	/* Dynamic status statement. Evaluates Status for specific Company. If the Company record does not exists then uses 00000 */
	IF (Status <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ';

		IF(Company <> '00000') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N'COALESCE(OVC.AICUSTS,DEC.AICUSTS)';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N'DEC.AICUSTS';
		END IF;

		IF (Status = '1') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' = ''1''';
		END IF;

		IF (Status = '0') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' <> ''1''';
		END IF;
	END IF;

	/* Join with Company and Phone Tables */
	/* Default company */
	SET INNER_DYNAMIC = 
				 N' INNER JOIN [SCDATA].F03012 AS DEC
						ON	DEC.AIAN8 = ABAN8
						AND DEC.AICO = ''00000''
						AND (DEC.AIBADT = ''S'' OR DEC.AIBADT = ''X'')';
	/* Override company */
	IF (Company <> '00000') THEN
		SET INNER_DYNAMIC = INNER_DYNAMIC 
							|| N' LEFT OUTER JOIN [SCDATA].F03012 AS OVC
									ON	OVC.AIAN8 = ABAN8
										AND OVC.AICO = ''' || Company || ''' ';
		
		SET SELECT_DYNAMIC = N' COALESCE(OVC.AIDEL1, DEC.AIDEL1)	AS DeliveryInstructions1,
								COALESCE(OVC.AIDEL2, DEC.AIDEL2)	AS DeliveryInstructions2,
								COALESCE(OVC.AICUSTS,DEC.AICUSTS)	AS Status,' ;
	ELSE
		SET SELECT_DYNAMIC = N' DEC.AIDEL1	AS DeliveryInstructions1,
								DEC.AIDEL2	AS DeliveryInstructions2,
								DEC.AICUSTS AS Status,' ;
	END IF;

	IF (RetrievePrimaryPhone = 1) THEN
		SET INNER_DYNAMIC = INNER_DYNAMIC 
							|| N'  LEFT OUTER JOIN [SCDATA].FQ67107
									ON PS$9AN8 = ABAN8
									AND PS$9TYP = 0
								LEFT OUTER JOIN [SCCTL].F0005
								  ON PS$9AN8 IS NULL
								  AND DRSY = ''H00''
								  AND DRRT = ''TA''
								  AND SUBSTRING(DRKY, 10 - ' || CodeLength  || N'+ 1, ' || CodeLength || N') = ABTAXC ';
		
		SET SELECT_DYNAMIC = SELECT_DYNAMIC || 
							N' COALESCE(PS$9ICF, (CASE WHEN DRSPHD = ''0'' THEN 0 ELSE 1 END)) AS IndividualCompanyFlag,
								COALESCE(PS$9POBX,0) AS PoBoxFlag, ';
	ELSE
		SET SELECT_DYNAMIC = SELECT_DYNAMIC || 
							N' ''0''  AS IndividualCompanyFlag, 
								0 AS PoBoxFlag, ';
	END IF;

	SET SQL_DYNAMIC = N' WITH CTE AS ( 
		SELECT
				ABAN8 AS AddressNumber,
				MAPA8 As ParentAddressNumber,
				WWALPH AS AlphaName,
				WWMLNM AS MailingName,
				ALADD1 AS AddressLine1,
				ALADD2 AS AddressLine2,
				ALADD3 AS AddressLine3,
				ALADD4 AS AddressLine4,
				ALCTY1 AS City,
				ALADDS AS State,
				ALADDZ AS ZipCode,
				ALCTR AS Country,
				WWIDLN AS ContactId,
				WWGNNM AS Firstname,
				WWMDNM AS Middlename,
				WWSRNM AS Lastname,
				WWNICK AS Nickname, 
				COALESCE(S.WS$9WAN8, 0) AS Selected,
			' || SELECT_DYNAMIC || 
				N' ABALKY AS ALTERNATEADDRESSKEY,     					                                                        
				ABTAXC
			FROM [SCDATA].F0101
				INNER JOIN [SCDATA].F0150
				  ON ABAN8 = MAAN8
				  AND MAOSTP = ?
				  '|| SHIPTO_DYNAMIC || '
				INNER JOIN [SCDATA].F0111
				  ON WWAN8 = ABAN8
                  AND WWIDLN = 0
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, '|| CurrentJulianDate ||')) AL
                  ON AL.ALAN8 = ABAN8
			' || INNER_DYNAMIC|| 
			 N' WHERE MAPA8 = ?
					AND MAAN8 <> ? 
					'|| WHERE_DYNAMIC || N'
			UNION ALL	
			SELECT
				ABAN8 AS AddressNumber,
				ABAN8 AS ParentAddressNumber,
				WWALPH AS AlphaName,
				WWMLNM AS MailingName,
				ALADD1 AS AddressLine1,
				ALADD2 AS AddressLine2,
				ALADD3 AS AddressLine3,
				ALADD4 AS AddressLine4,
				ALCTY1 AS City,
				ALADDS AS State,
				ALADDZ AS ZipCode,
				ALCTR AS Country,
				WWIDLN AS ContactId,
				WWGNNM AS Firstname,
				WWMDNM AS Middlename,
				WWSRNM AS Lastname,
				WWNICK AS Nickname, 
				COALESCE(S.WS$9WAN8, 0) AS Selected,
				' || SELECT_DYNAMIC || 
				N' ABALKY AS ALTERNATEADDRESSKEY,     					                                                        
				ABTAXC
			FROM [SCDATA].F0101
			INNER JOIN [SCDATA].F0111
				ON WWAN8 = ABAN8
				AND WWIDLN = 0
				'|| SHIPTO_DYNAMIC || '
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, '|| CurrentJulianDate ||')) AL
				ON AL.ALAN8 = ABAN8
			' || INNER_DYNAMIC || 
			N' WHERE ABAN8 = ? 
				' || WHERE_DYNAMIC || N'
	),
	SHIPTO AS (
		SELECT AddressNumber, ParentAddressNumber, AlphaName, MailingName, AddressLine1,
				AddressLine2, AddressLine3, AddressLine4, City, State, ZipCode, Country, 
				ContactId, Firstname, Middlename, Lastname, Nickname, PoBoxFlag, DeliveryInstructions1, 
				DeliveryInstructions2, Status, Selected, AlternateAddressKey, IndividualCompanyFlag, 
				ROWNUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || N') AS RNUM 
		FROM CTE 
	)
	SELECT A.AddressNumber, A.ParentAddressNumber, A.AlphaName, A.MailingName, A.AddressLine1,
			A.AddressLine2, A.AddressLine3, A.AddressLine4, A.City, A.State,
			A.ZipCode, A.Country, A.ContactId, A.Firstname, A.Middlename, A.Lastname, A.Nickname,
			A.PoBoxFlag, A.DeliveryInstructions1, A.DeliveryInstructions2, A.Status, A.AlternateAddressKey, A.Selected, ';

			IF(RetrievePrimaryPhone = 1) THEN
				SET SQL_DYNAMIC = SQL_DYNAMIC || 
				N' MainPhone.Phone, ';				
			 ELSE
				SET SQL_DYNAMIC = SQL_DYNAMIC || 
				N' ''0'' AS Phone, ';
			 END IF;


			 SET SQL_DYNAMIC = SQL_DYNAMIC || 
			 N' (SELECT COUNT(1) AS TotalRowCount FROM SHIPTO) AS TotalRowCount
		FROM SHIPTO A ';

		IF (RetrievePrimaryPhone = 1) THEN
			SET SQL_DYNAMIC = SQL_DYNAMIC || 
			 N' LEFT OUTER JOIN TABLE(SCLIBRARY.CST_GetCustomerPrimaryPhone(A.AddressNumber, 0, CASE WHEN A.IndividualCompanyFlag = 0 THEN ''' || PhoneConstantIND || ''' ELSE ''' || PhoneConstantCMP || ''' END )) AS MainPhone
				ON MainPhone.CustomerAddressNumber = A.AddressNumber ';
		END IF;

		SET SQL_DYNAMIC = SQL_DYNAMIC || 
		 N' WHERE ((? = 0 OR ? = 0) OR (A.RNUM BETWEEN ? AND ?)) ';
	
	
	PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
	OPEN TEMP_CURSOR1 USING OrgStrType, WebAccountId, StoreId, ParentAddressNumber, ParentAddressNumber, ParentAddressNumber, Name, Address, City, State, ZipCode, Country,
						WebAccountId, StoreId, ParentAddressNumber, ParentAddressNumber, Name, Address, City, State, ZipCode, Country,
						PageIndex, PageSize, RowStart, RowEnd;          
END
  ;
-- #desc								Reads the Customer/Consumer Attibutes view with the given information
-- #bl_class							Premier.Club.MembershipAttributes.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param ClubId						Club Id to search for
-- #param MembershipAddressNumber		Address Number to search for
-- #param MembershipUniqueId			Membership Unique Id to search for

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembershipAttributes
(
	IN MembershipAddressNumber		NUMERIC(15,0),
	IN MembershipUniqueId			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembershipAttributes 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	B.CASEQ			AS SequenceNo,
			A.MA$9AID		AS AttributeId, 
			C.AMDSC1		AS Description1, 
			C.AMDSC2		AS Description2,
			A.MA$9DASN		AS AttributeSelection,
			B.CA$9FASN		AS SelectionCriteria,
			B.CA$9ADRV		AS AttributeDriver,
			C.AM$9DTY		AS AttributeType,
			C.AMSY			AS ProductCode,
			C.AMRT			AS UserDefinedCodes
	FROM	
			[SCDATA].FQ6759B1 A INNER JOIN [SCDATA].FQ675911 B 
			ON  A.MA$9AID = B.CA$9AID
			INNER JOIN [SCDATA].FQ675950 C 
			ON  A.MA$9AID = C.AM$9AID
			INNER JOIN [SCDATA].FQ6759B0 D1 
			ON  A.MAUKID = D1.MMUKID AND B.CA$9CLUB = D1.MM$9CLUB
	WHERE	
			A.MA$9AN8 =  MembershipAddressNumber 
			AND	A.MAUKID = MembershipUniqueId 
	ORDER BY 
			B.CASEQ
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;

END
 ;
-- #desc					Read marketing code values
-- #bl_class				Premier.Commerce.MarketingCodeValues.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code  search criteria

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetMarketingCodeValues
(
  MarketingCode	varChar(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetMarketingCodeValues 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT  MK$9MKT AS MarketingCode, 
			MK$9MCOL AS PriceKey, 
			MK$9MVAL AS PriceKeyValue
    -- Marketing Code Detail	
	FROM  [SCDATA].FQ674205 MKDET
	WHERE 
	-- Marketing Code filter	
	MKDET.MK$9MKT = MarketingCode
	
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;

END



 ;
-- #desc					Read P4210 Version Rule Details
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param ProductCode		Product Code
-- #param UserDefinedCode	User Defined Code

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetP4210VersRuleDetails
(
	IN InstallationID		VARCHAR(3),
	IN RuleUniqueID			NUMERIC(15,0),
	IN ProductCode			VARCHAR(4),
	IN UserDefinedCode		VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetP4210VersRuleDetails 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE CodeLength  INTEGER;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		A.RDUKID				AS RuleUniqueID,
		A.RDLNID				AS LineID,
		A.RDKY					AS UserDefinedKey,
		B.DRDL01				AS DescriptionUDC,
		A.RDMCU					AS BranchPlant,
		''						AS BranchPlantDescription,
		A.RD$9AN8				AS AddressNumber,
		''						AS AlphaName
	FROM
		[SCDATA].FQ674231 A
	INNER JOIN [SCCTL].F0005 B
		ON  B.DRRT = UserDefinedCode
		AND B.DRSY = ProductCode
	WHERE
		RD$9INID = InstallationID AND
		RDUKID = RuleUniqueID AND
		SUBSTRING(B.DRKY, 10 - CodeLength + 1, CodeLength) = A.RDKY
	FOR FETCH ONLY;
	
	
	
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR  
	SELECT
		A.RDUKID				AS RuleUniqueID,
		A.RDLNID				AS LineID,
		A.RDKY					AS UserDefinedKey,
		''						AS DescriptionUDC,
		A.RDMCU					AS BranchPlant,
		COALESCE(C.MCDL01,' ')	AS BranchPlantDescription,
		A.RD$9AN8				AS AddressNumber,
		COALESCE(D1.ABALPH,COALESCE(E.PRALPH,''))		AS AlphaName
	FROM
		[SCDATA].FQ674231 A
	LEFT OUTER JOIN [SCDATA].F0006 C -- Branch Master
		ON C.MCMCU = A.RDMCU
	LEFT OUTER JOIN [SCDATA].F0101 D1 -- Address Book Master
		ON D1.ABAN8 = A.RD$9AN8
	LEFT OUTER JOIN [SCDATA].FQ670302 E -- Consumer Master
		ON E.PR$9AN8= A.RD$9AN8
	WHERE
		RD$9INID = InstallationID AND
		RDUKID = RuleUniqueID 
	FOR FETCH ONLY;
	

	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = ProductCode AND DTRT = UserDefinedCode);
						
						
IF ( UserDefinedCode IS NOT NULL OR UserDefinedCode <> '') THEN
	OPEN TEMP_CURSOR1;
ELSE 
	OPEN TEMP_CURSOR2;
		
	END IF;		
END
 ;
-- #desc						Get the Sales Order Status
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				COM_GetSalesOrderRecentList.sql

-- #param OrderNumber			Order Number
-- #param OrderCompany			Order Company
-- #param OrderType				Order Type
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Type
-- #param OpenLnStatus			Open Ln Status 
-- #param CancelLnStatus		Cancel Ln Status
-- #param FreightLnType			Freight Ln Type
-- #param DiscountLnType		Discount Ln Type
-- #param SurchargeLnType       Surcharge Ln Type

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetSalesOrderStatusFnc
(
	OrderNumber			NUMERIC(15,0),
	OrderCompany		VARCHAR(5),
	OrderType			VARCHAR(2),	
	OpenLnStatus		VARGRAPHIC(256) CCSID 13488,
	FreightLnType		VARGRAPHIC(256) CCSID 13488,
	DiscountLnType		VARGRAPHIC(256) CCSID 13488,
	SurchargeLnType		VARGRAPHIC(256) CCSID 13488
)
RETURNS VARGRAPHIC(256) CCSID 13488
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetSalesOrderStatusFnc
DISALLOW PARALLEL
NOT DETERMINISTIC
CALLED ON NULL INPUT
BEGIN
	/* If all rows are CANCELLED then order is CANCELLED
     * Else if at least one row is OPEN then order is OPEN 
     * Otherwise order is COMPLETED 
	 */
	DECLARE SalesStatusResult VARGRAPHIC(256) CCSID 13488;
  
	IF EXISTS ( SELECT 1 FROM [SCDATA].F4211 
			WHERE 
				SDDOCO = OrderNumber 
				AND SDKCOO = OrderCompany 
				AND SDDCTO = OrderType 
				AND (SDLTTR < '980' OR SDLTTR = '995') 
				AND SDLNTY NOT IN (FreightLnType, DiscountLnType, SurchargeLnType) ) 
	THEN 
		IF EXISTS ( SELECT 1 FROM [SCDATA].F4211 
			WHERE 
				SDDOCO = OrderNumber 
				AND SDKCOO = OrderCompany 
				AND SDDCTO = OrderType 
				AND SDNXTR <= OpenLnStatus 
				AND SDLNTY NOT IN ( FreightLnType , DiscountLnType, SurchargeLnType ) ) 
		THEN 
			SET SalesStatusResult = 'OPEN'; 
		ELSE 
			SET SalesStatusResult = 'COMPLETED'; 
		END IF; 
  
	ELSE IF EXISTS ( SELECT 1 FROM [SCDATA].F42119 
			WHERE 
				SDDOCO = OrderNumber 
				AND SDKCOO = OrderCompany 
				AND SDDCTO = OrderType 
				AND (SDLTTR < '980' OR SDLTTR = '995') 
				AND SDLNTY NOT IN ( FreightLnType , DiscountLnType, SurchargeLnType ) ) 
	THEN 
		IF EXISTS ( SELECT 1 FROM [SCDATA].F42119 
			WHERE 
				SDDOCO = OrderNumber 
				AND SDKCOO = OrderCompany 
				AND SDDCTO = OrderType 
				AND SDNXTR <= OpenLnStatus 
				AND SDLNTY NOT IN ( FreightLnType , DiscountLnType, SurchargeLnType ) ) 
		THEN 
			SET SalesStatusResult = 'OPEN';
		ELSE 
			SET SalesStatusResult = 'COMPLETED';
		END IF;
	ELSE 
		SET SalesStatusResult = 'CANCELLED';
	END IF;
END IF;
  
	RETURN SalesStatusResult;
END ;
-- #desc					N/A
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrder

-- #param Company			Company Number to search for.
-- #param OrderType			Order number to search for.
-- #param OrderNumber		Order type to search for.
-- #param InstallationID	Installation Id.

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrderHeader
(
	IN Company varchar(5),
	IN OrderType varchar(3),
	IN OrderNumber NUMERIC(15,0),
	IN InstallationID varchar(3)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT 
		A.SHKCOO AS Company,
		A.SHDOCO AS OrderNumber,
		A.SHDCTO AS OrderType,   
		SHMCU AS BranchPlant,
		SHOKCO AS OriginalOrderCo,    
		SHOORN AS OriginalOrderNo,
		SHOCTO AS OriginalOrderType,     
		SHAN8 AS CustomerNumber,
		SHSHAN AS ShipToID,
		SHDRQJ AS RequestedDate,     
		SHTRDJ AS OrderDate,    
		SHPDDJ AS PromisedDate,
		SHCNDJ AS CancelDate,
		SHVR01 AS CustomerPO,     
		SHDEL1 AS DeliveryInstructions1,
		SHDEL2 AS DeliveryInstructions2,     
		SHINMG AS PrintMesg,    
		SHPTC AS PaymentTerms,
		SHRYIN AS PaymentInstrument,     
		SHASN AS AdjustmentSchedule,     
		SHPRGP AS PricingGroup,
		SHTRDC AS TradeDiscount,
		SHTXA1 AS TaxArea,     
		SHEXR1 AS TaxExplanationCode,    
		SHTXCT AS Certificate,
		SHATXT AS AssociatedText,     
		SHHOLD AS HoldOrdersCode,    
		SHPLST AS PricePickListYN,
		SHINVC AS InvoiceCopies,
		SHANBY AS BuyerNumber,
		SHCARS AS Carrier,
		SHMOT AS ModeOfTransport,      
		SHROUT AS RouteCode,
		SHSTOP AS StopCode,     
		SHZON AS ZoneNumber,      
		SHFRTH AS FreightCode,     
		SHAFT AS ApplyFreightYN,     
		SHWUMD AS WeightDisplayUOM,     
		SHVUMD AS VolumeDisplayUOM,    
		SHAUTN AS AuthorizationNo,
		SHCACT AS CreditBankAcctNo,     
		SHCEXP AS CreditBankExpiredDate,    
		SHCRRM AS CurrencyMode,     
		SHCRCD AS CurrencyCode,
		SHCRR AS ExchangeRate,
		SHORBY AS OrderedBy,     
		SHTKBY AS OrderTakenBy,    
		SHURCD AS UserReservedCode,
		SHURDT AS UserReservedDate,     
		SHURAT AS UserReservedAmnt,
		SHURAB AS UserReservedNo,
		SHURRF AS UserReservedRef,     
		A.SHUSER AS "USERID",    
		A.SHUPMJ AS DateUpdated,
		B.SH$9AN8 AS SCBillToNumber,  
		B.SH$9TYP AS AddressType, 
		B.SH$9SHAN AS SCShipToNumber, 
		B.SH$9WHI AS WarehouseInstructions,  
		B.SH$9MKT AS MarketingCode, 
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		B.SHIDLN AS SCBillToContactID,
		B.SHRCK7 AS SCShipToContactID,
		A.SHRCD AS ReasonCode,
		COALESCE(Tax.STUTP, 0) AS UseTaxedPrices
      FROM [SCDATA].F4201 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
  	   ON A.SHKCOO = B.SHKCOO 
       AND A.SHDOCO = B.SHDOCO 
       AND A.SHDCTO = B.SHDCTO
	LEFT OUTER JOIN [SCDATA].F4201TX Tax
		ON Tax.STDOCO = A.SHDOCO 
		AND Tax.STDCTO = A.SHDCTO
		AND Tax.STKCOO = A.SHKCOO
     WHERE A.SHKCOO = Company 
       AND A.SHDOCO = OrderNumber
       AND A.SHDCTO = OrderType
    UNION ALL
    SELECT 
		A.SHKCOO AS Company,
		A.SHDOCO AS OrderNumber,
		A.SHDCTO AS OrderType,   
		SHMCU AS BranchPlant,
		SHOKCO AS OriginalOrderCo,    
		SHOORN AS OriginalOrderNo,
		SHOCTO AS OriginalOrderType,     
		SHAN8 AS CustomerNumber,
		SHSHAN AS ShipToID,
		SHDRQJ AS RequestedDate,     
		SHTRDJ AS OrderDate,    
		SHPDDJ AS PromisedDate,
		SHCNDJ AS CancelDate,
		SHVR01 AS CustomerPO,     
		SHDEL1 AS DeliveryInstructions1,
		SHDEL2 AS DeliveryInstructions2,     
		SHINMG AS PrintMesg,    
		SHPTC AS PaymentTerms,
		SHRYIN AS PaymentInstrument,     
		SHASN AS AdjustmentSchedule,     
		SHPRGP AS PricingGroup,
		SHTRDC AS TradeDiscount,
		SHTXA1 AS TaxArea,     
		SHEXR1 AS TaxExplanationCode,    
		SHTXCT AS Certificate,
		SHATXT AS AssociatedText,     
		SHHOLD AS HoldOrdersCode,    
		SHPLST AS PricePickListYN,
		SHINVC AS InvoiceCopies,
		SHANBY AS BuyerNumber,
		SHCARS AS Carrier,
		SHMOT AS ModeOfTransport,     
		SHROUT AS RouteCode,
		SHSTOP AS StopCode,     
		SHZON AS ZoneNumber,      
		SHFRTH AS FreightCode,     
		SHAFT AS ApplyFreightYN,     
		SHWUMD AS WeightDisplayUOM,     
		SHVUMD AS VolumeDisplayUOM,    
		SHAUTN AS AuthorizationNo,
		SHCACT AS CreditBankAcctNo,     
		SHCEXP AS CreditBankExpiredDate,    
		SHCRRM AS CurrencyMode,     
		SHCRCD AS CurrencyCode,
		SHCRR AS ExchangeRate,
		SHORBY AS OrderedBy,     
		SHTKBY AS OrderTakenBy,    
		SHURCD AS UserReservedCode,
		SHURDT AS UserReservedDate,     
		SHURAT AS UserReservedAmnt,
		SHURAB AS UserReservedNo,
		SHURRF AS UserReservedRef,     
		A.SHUSER AS "USERID",    
		A.SHUPMJ AS DateUpdated,
		B.SH$9AN8 AS SCBillToNumber,  
		B.SH$9TYP AS AddressType, 
		B.SH$9SHAN AS SCShipToNumber, 
		B.SH$9WHI AS WarehouseInstructions,  
		B.SH$9MKT AS MarketingCode, 
		B.SH$9MMID AS MembershipID, 
		B.SH$9PD AS PercentageDiscount,
		B.SH$9DT AS DiscountType,
		B.SHIDLN AS SCBillToContactID,
		B.SHRCK7 AS SCShipToContactID,
		A.SHRCD AS ReasonCode,
		COALESCE(TxHistory.STUTP, 0) AS UseTaxedPrices
    FROM [SCDATA].F42019 A
	LEFT OUTER JOIN [SCDATA].FQ674201 B
	   ON A.SHKCOO = B.SHKCOO 
       AND A.SHDOCO = B.SHDOCO 
       AND A.SHDCTO = B.SHDCTO
	LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
		ON TxHistory.STDOCO = A.SHDOCO 
		AND TxHistory.STDCTO = A.SHDCTO
		AND TxHistory.STKCOO = A.SHKCOO
     WHERE A.SHKCOO = Company 
       AND A.SHDOCO = OrderNumber
       AND A.SHDCTO = OrderType
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;

END





 ;
-- #desc					Profile Read only info
-- #bl_class				N/A			
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_Z, COM_GetOrderShipConfInfo, COM_GetReturnOrderInfo

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber
-- #param AddressNumber		SCBillToNumber
-- #param AddressType		AddressType

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrderInfo_BillTo
(
	OrderCompany	VARCHAR(5),
	OrderType		VARCHAR(2),
	OrderNumber		NUMERIC(15,0),
	SCBillToNumber	NUMERIC(15,0),
	AddressType		NUMERIC(15,0),
	ContactID		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderInfo_BillTo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	-- TEMPORARY TABLE FOR THE BILLTO INFO
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_BILLTOINFO
	(
		nID INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1, NO CACHE) NOT NULL,
		MailingName		GRAPHIC(40) CCSID 13488,
		AddressLine1	VARGRAPHIC(40) CCSID 13488,
		AddressLine2	VARGRAPHIC(40) CCSID 13488,
		AddressLine3	VARGRAPHIC(40) CCSID 13488,
		AddressLine4	VARGRAPHIC(40) CCSID 13488,
		City			GRAPHIC(25) CCSID 13488,
		State			GRAPHIC(3) CCSID 13488,
		ZipCode			GRAPHIC(12) CCSID 13488,
		Country			GRAPHIC(3) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
	
		DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT * FROM SESSION.TMP_BILLTOINFO
		FOR FETCH ONLY;
		
		/*SEARCH FOR A BILLTO ADDRESS OVERRIDE*/
		INSERT 	INTO SESSION.TMP_BILLTOINFO
		(
			MailingName,
			AddressLine1,
			AddressLine2,
			AddressLine3,
			AddressLine4,
			City,
			State,
			ZipCode,
			Country
		)
		SELECT 
			OAMLNM AS MailingName,
			OAADD1 AS AddressLine1, 
			OAADD2 AS AddressLine2, 
			OAADD3 AS AddressLine3,
			OAADD4 AS AddressLine4,
			OACTY1 AS City,
			OAADDS AS State,
			OAADDZ AS ZipCode,
			OACTR AS Country
		FROM [SCDATA].F4006
		WHERE 
				OAANTY = 1 --BILLTO TYPE
			AND OADOCO = OrderNumber
			AND OADCTO = OrderType 
			AND OAKCOO = OrderCompany;
			
			
		--NO BILLTO OVERRIDE GET BILLTO INFORMATION FOR THE CONSUMER/CUSTOMER
		IF((SELECT COUNT(*) FROM SESSION.TMP_BILLTOINFO) = 0) THEN
			IF(AddressType = 0) THEN --CUSTOMER
				INSERT 	INTO SESSION.TMP_BILLTOINFO
				(
					MailingName,
					AddressLine1,
					AddressLine2,
					AddressLine3,
					AddressLine4,
					City,
					State,
					ZipCode,
					Country
				)
				SELECT 
					WW.WWMLNM AS MailingName,
					AL.ALADD1 AS AddressLine1, 
					AL.ALADD2 AS AddressLine2, 
					AL.ALADD3 AS AddressLine3,
					AL.ALADD4 AS AddressLine4,
					AL.ALCTY1 AS City,
					AL.ALADDS AS State,
					AL.ALADDZ AS ZipCode,
					AL.ALCTR AS Country
				FROM [SCDATA].F0101 AB-- Customer Master
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	-- Address Book Join
					ON AL.ALAN8 = AB.ABAN8
				INNER JOIN [SCDATA].F0111 WW	--Contact Information
					ON WWAN8 = ABAN8
					AND WWIDLN = ContactID
				WHERE 
					ABAN8 = SCBillToNumber;
			ELSE --CONSUMER
				--Read Consumer Information
				INSERT 	INTO SESSION.TMP_BILLTOINFO
				(
					MailingName,
					AddressLine1,
					AddressLine2,
					AddressLine3,
					AddressLine4,
					City,
					State,
					ZipCode,
					Country
				)
				SELECT
					PCMLNM AS MailingName,
					PRADD1 AS AddressLine1,
					PRADD2 AS AddressLine2,
					PRADD3 AS AddressLine3,
					PRADD4 AS AddressLine4,
					PRCTY1 AS City,
					PRADDS AS State,
					PRADDZ AS ZipCode,
					PRCTR AS Country
				FROM [SCDATA].FQ670302 --Consumer
				INNER JOIN [SCDATA].FQ67303 --Contact Information
						ON PR$9AN8 = PC$9AN8
						AND PCIDLN = ContactID
				WHERE 
					PR$9AN8 = SCBillToNumber;
			END IF;
		END IF;

		OPEN TEMP_CURSOR3;
	END;
END
 ;
-- #desc					Sales order payment read only info
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			COM_GetSalesOrderInfo_Z

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrderInfo_Payments
(
	OrderCompany	VARCHAR(5),
	OrderType		VARCHAR(2),
	OrderNumber		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderInfo_Payments 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN					
	BEGIN	
		
		DECLARE TEMP_CURSOR6 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT  DISTINCT
					PTRYIN AS PaymentInstrument,
					(CASE 
						WHEN PTATS = '01' OR PTATS = '02' then PTATRM
						WHEN PTATS = '05' then PTSTRM
						ELSE 0
					 END )AS	CreditCardAmount,
					PTCHKP	AS	CheckAmount,
					PTCASP	AS	CashAmount,
					PT$9CODAM	AS	CODAmount,
					PT$9ACNT	AS	OnAccountAmount,
					PTOPY1	AS	OtherAmount,
					PTOPY2	AS	OtherAmount2,
					(CASE 
						WHEN PTATS = '02' then PTABTM
						WHEN PTATS = '05' then PT$9VSATCD
						ELSE ''
					 END ) AS AuthorizationCode,
					PTCRCI AS MaskedCreditCardNumber,
					PTCARD AS CreditCardType,
					PTATS AS TransactionStatus,
					B.PT$9FRUC AS FreightUpCharge,
					A.PTCEXP AS ExpirationDate,			
					A.PTALPH	AS NameOnCreditCard,
					PTSTRM		AS SettleAmount,
					CASE WHEN A.PTATS = '05' THEN B.PT$9PNREF2 ELSE B.PT$9PAYID END AS PNRef,
					A.PTCRCD	AS CurrencyCode,
					CASE WHEN A.PTATS = '02' THEN B.PT$9CCSURE  ELSE 0 END AS SurchargeAmount
			FROM	[SCDATA].F004201 A 
			LEFT OUTER JOIN [SCDATA].FQ670041 B
					ON  A.PTDOCO = B.PTDOCO
					AND A.PTDCTO = B.PTDCTO
					AND A.PTKCOO = B.PTKCOO
					AND A.PTLNID = B.PTLNID
			WHERE	A.PTDOCO = OrderNumber
				AND	A.PTKCOO = OrderCompany
				AND	A.PTDCTO = OrderType
			FOR FETCH ONLY;			
		
			OPEN TEMP_CURSOR6;	
	END;	
END
 ;
-- #desc					Load the order payments List
-- #bl_class				Premier.Commerce.SalesOrderPayments.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param OrderCompany		Company id to search for.
-- #param OrderType			Document type to search for.
-- #param OrderNumber		Order number to search for.

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrderPayments
(
	IN OrderCompany varchar(5),
	IN OrderType varchar(3),
	IN OrderNumber NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderPayments 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	 SELECT A.PTDOCO AS OrderNumber, 
			A.PTDCTO AS OrderType,
			A.PTKCOO AS OrderCompany, 
			A.PTSFXO AS OrderSuffix,
			A.PTLNID AS LineNumber,
			A.PTSEQ AS SequenceNumber,
			A.PTPOF AS OriginationFlag,
			A.PTRYIN AS PaymentInstrument,
			CAST(round(A.PTATRM, 0) AS NUMERIC(18,0)) AS AuthorizeAmount,
			A.PTALPH AS AlphaName, 
			A.PTAN8 AS AddressNumber,
			A.PTADD1 AS AddressLine1, 
			A.PTADD2 AS AddressLine2,
			A.PTCTY1 AS City, 
			A.PTADDS AS State, 
			B.PTADDZ  AS ZipCode,
			A.PTCTR AS Country, 
			A.PTCARD AS CreditCardType,
			A.PTCRCI AS CreditCardNumber,
			A.PTCEXP AS CreditCardExpDate,
			A.PTCASP AS CashAmount,
			CAST(round(A.PTCHKP, 0) AS NUMERIC(18,0)) AS CheckAmount,
			A.PTCKNU AS CheckNumber,
			CAST(round(A.PTOPY1, 0) AS NUMERIC(18,0)) AS OtherAmount,
			CAST(round(A.PTOPY2, 0) AS NUMERIC(18,0)) AS OtherAmount2,
			A.PTCRCD AS Currency, 
			A.PTEMCU AS CostCenter,
			A.PTDL01 AS Reference, 
			A.PTATS AS TransactionStatus,
			CAST(round(B.PT$9ACNT, 0) AS NUMERIC(18,0))  AS OnAccountAmount,
			CAST(round(B.PT$9CODAM, 0) AS NUMERIC(18,0)) AS CODAmount,
			B.PT$9FRUC AS FreightUpCharge,
			B.PT$9VSCVRS AS CVResult,
			B.PT$9VSIAVS AS IAVS,
			B.PT$9VSSTMC AS StreetMatch,
			B.PT$9VSZPMC AS ZipMatch, 
			CASE WHEN A.PTATS = '05' THEN B.PT$9VSATCD ELSE A.PTABTM END AS AuthCode,
			CASE WHEN A.PTATS = '05' THEN B.PT$9PNREF2 ELSE B.PT$9PAYID END AS PNRef,
			A.PTATRD AS TransactionDate,
			A.PTSTRM  AS SettleAmount, 
			A.PTSETD AS SettleDate,
			A.PTPID AS "PROGRAMID", 
			B.PT$9REGID AS Register,
			B.PT$9DRAW AS Drawer,
			B.PTEDBT AS EditBatch,
			B.PT$9VSCCN AS CreditCardNumRef,
			CASE WHEN A.PTATS = '02' THEN B.PT$9CCSURE  ELSE 0 END AS SurchargeAmount
	   FROM [SCDATA].F004201 AS A 
		LEFT OUTER JOIN [SCDATA].FQ670041 AS B 
		 ON B.PTDOCO = A.PTDOCO
		AND B.PTDCTO = A.PTDCTO
		AND B.PTKCOO = A.PTKCOO
		AND B.PTLNID = A.PTLNID
		AND B.PTSFXO = A.PTSFXO
		AND B.PTSEQ = A.PTSEQ
		AND B.PTPOF = A.PTPOF
	  WHERE 
		A.PTDOCO = OrderNumber 
		AND A.PTDCTO = OrderType 
		AND A.PTKCOO = OrderCompany
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
	
END ;
-- #desc							N/A
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					COM_GetSalesOrder

-- #param Company					Company Number to search for.
-- #param OrderType					Order number to search for.
-- #param OrderNumber				Order type to search for.
-- #param RetrieveWebContentInfo	Condition to validate if Retrieve Web Content Info or no.
-- #param InstallationID			Installation Id

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrderDetail
(
	IN Company					GRAPHIC(5) CCSID 13488,
	IN OrderType				GRAPHIC(2) CCSID 13488,
	IN OrderNumber				NUMERIC(8,0),
	IN InstallationID			GRAPHIC(3) CCSID 13488,
	IN RetrieveWebContentInfo	INT,
	IN LangPref					GRAPHIC(2) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)  
		A.SDCNDJ AS CancelDate,     
		A.SDITM  AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		A.SDDSC1 AS ItemDescription1,		/* Retrieve Description 1 for Tracking lines */
		A.SDDSC2 AS ItemDescription2,
		''  AS URL,
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost,
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,
		A.SDPRGR AS PricingCategory,     
		A.SDCLVL AS PricingCategoryLevel,
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		A.SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,
		A.SDRCD AS ReasonCode,
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS "USERID",
		A.SDPID AS "PROGRAMID",
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
		A.SDLOCN AS Location,
		A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		COALESCE(C.RFOGNO, 0 ) AS ParentLineNo,
		COALESCE(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		COALESCE(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		COALESCE(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		COALESCE(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		COALESCE(Tax.DTUTA,0)   AS UnitTaxAmount,
		COALESCE(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		COALESCE(Tax.DTETA,0)   AS ExtendedTaxAmount,
		COALESCE(Tax.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F4211 A 
	LEFT OUTER JOIN [SCDATA].FQ674211 B
   		ON  B.SDDOCO = A.SDDOCO 
		AND B.SDDCTO = A.SDDCTO  
		AND B.SDKCOO = A.SDKCOO
		AND B.SDLNID = A.SDLNID		
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO
		AND C.RFDCTO = A.SDDCTO
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.SDDOCO 
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID 
     WHERE A.SDKCOO = Company 
		AND A.SDDOCO = OrderNumber
		AND A.SDDCTO = OrderType
    UNION ALL
    SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)  
		A.SDCNDJ AS CancelDate,     
		A.SDITM AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		A.SDDSC1 AS ItemDescription1,		/* Retrieve Description 1 for Tracking lines */
		A.SDDSC2 AS ItemDescription2,
		''  AS URL,
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost,
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,      
		A.SDPRGR AS PricingCategory,
		A.SDCLVL AS PricingCategoryLevel,
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,
		A.SDRCD AS ReasonCode,
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS "USERID",
		A.SDPID AS "PROGRAMID",
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
		A.SDLOCN AS Location,
		A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		COALESCE(C.RFOGNO, 0 ) AS ParentLineNo,
		COALESCE(TxHistory.DTTUPRC,0) AS TaxedUnitPrice,
		COALESCE(TxHistory.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		COALESCE(TxHistory.DTTAEXP,0) AS TaxedExtendedPrice,
		COALESCE(TxHistory.DTTFEA,0)  AS ForeignTaxedExtPrice,
		COALESCE(TxHistory.DTUTA,0)   AS UnitTaxAmount,
		COALESCE(TxHistory.DTFUTA,0)  AS ForeignUnitTaxAmount,
		COALESCE(TxHistory.DTETA,0)   AS ExtendedTaxAmount,
		COALESCE(TxHistory.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F42119 A 
	LEFT OUTER JOIN [SCDATA].FQ674211 B
 		ON  B.SDDOCO = A.SDDOCO 
		AND B.SDDCTO = A.SDDCTO 
		AND B.SDKCOO = A.SDKCOO 
		AND B.SDLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO
		AND C.RFDCTO = A.SDDCTO
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.SDDOCO 
		AND TxHistory.DTDCTO = A.SDDCTO
		AND TxHistory.DTKCOO = A.SDKCOO 
		AND TxHistory.DTLNID = A.SDLNID
    WHERE A.SDKCOO = Company 
		AND A.SDDOCO = OrderNumber
		AND A.SDDCTO = OrderType
		FOR FETCH ONLY;
	
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)  
		A.SDCNDJ AS CancelDate,     
		A.SDITM  AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		COALESCE(ContenDesc.DESC1, A.SDDSC1)	AS ItemDescription1,
		COALESCE(ContenDesc.DESC2, A.SDDSC2)	AS ItemDescription2,
		ContenDesc.URL AS URL,
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost,
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,
		A.SDPRGR AS PricingCategory,     
		A.SDCLVL AS PricingCategoryLevel,
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		A.SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,
		A.SDRCD AS ReasonCode,
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS "USERID",
		A.SDPID AS "PROGRAMID",
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
		A.SDLOCN AS Location,
		A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		COALESCE(C.RFOGNO, 0 ) AS ParentLineNo,
		COALESCE(Tax.DTTUPRC,0) AS TaxedUnitPrice,
		COALESCE(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		COALESCE(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
		COALESCE(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
		COALESCE(Tax.DTUTA,0)   AS UnitTaxAmount,
		COALESCE(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
		COALESCE(Tax.DTETA,0)   AS ExtendedTaxAmount,
		COALESCE(Tax.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F4211 A 
	LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.SDITM, LangPref , 0 ) ) AS ContenDesc
		ON ContenDesc.DESCITM = A.SDITM
	LEFT OUTER JOIN [SCDATA].FQ674211 B
   		ON  B.SDDOCO = A.SDDOCO 
		AND B.SDDCTO = A.SDDCTO  
		AND B.SDKCOO = A.SDKCOO
		AND B.SDLNID = A.SDLNID		
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO
		AND C.RFDCTO = A.SDDCTO
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F4211TX Tax
		ON Tax.DTDOCO = A.SDDOCO 
		AND Tax.DTDCTO = A.SDDCTO
		AND Tax.DTKCOO = A.SDKCOO 
		AND Tax.DTLNID = A.SDLNID 
     WHERE A.SDKCOO = Company 
		AND A.SDDOCO = OrderNumber
		AND A.SDDCTO = OrderType
    UNION ALL
    SELECT 
		A.SDKCOO AS Company, 
		A.SDDOCO AS OrderNumber,
		A.SDDCTO AS OrderType,
		A.SDLNID AS LineNumberID,
		A.SDMCU AS BusinessUnit,
		A.SDOKCO AS OriginalOrderCompany,     
		A.SDOORN AS OriginalOrderNumber,     
		A.SDOCTO AS OriginalOrderType,
		A.SDOGNO AS OriginalOrderLineNumber,
		A.SDDMCT AS AgreementNumber,
		A.SDAN8 AS BillToNumber,
		A.SDSHAN AS ShipToID,
		A.SDDRQJ AS RequestedDate,     
		A.SDTRDJ AS TransactionDate,     
		A.SDRSDJ AS PromisedDlvryDate,		--DateReleaseJulian	 (Promised Delivery)
		A.SDPDDJ AS PromisedDate,			--ScheduledPickDate	 (Scheduled Pick)
		A.SDPPDJ AS PromisedShip,			--DatePromisedShipJu (Promised Shipment)  
		A.SDCNDJ AS CancelDate,     
		A.SDITM AS ItemNumber,
		A.SDLITM AS ItemNo,     
		A.SDAITM AS AuxItemNumber,
		COALESCE(ContenDesc.DESC1, A.SDDSC1)	AS ItemDescription1,
		COALESCE(ContenDesc.DESC2, A.SDDSC2)	AS ItemDescription2,
		ContenDesc.URL AS URL,
		A.SDLNTY AS LineType,
		A.SDNXTR AS NextStatus,     
		A.SDLTTR AS LastStatus,     
		A.SDEMCU AS RevenueBusinessUnit,
		A.SDHDBU AS F4201BranchPlant,
		A.SDRLIT AS ItemNumberRelatedKit,
		A.SDKTLN AS KitMasterLineNo,
		A.SDCPNT AS ComponentLineNumber,
		A.SDRKIT AS RelatedKitComponent,
		A.SDUOM AS TransactionUOM,
		A.SDUORG AS QuantityOrdered,
		A.SDSOQS AS QuantityShipped,
		A.SDSOBK AS QuantityBackOrdered,
		A.SDSOCN AS QuantityCanceled,
		A.SDUPRC AS UnitPrice,
		A.SDFUP  AS ForeignUnitPrice,
		A.SDAEXP AS ExtendedPrice,
		A.SDFEA	 AS ForeignExtPrice,
		A.SDPROV AS OverridePrice,     
		A.SDUNCS AS UnitCost,
		A.SDFUC AS ForeignUnitCost,
		A.SDECST AS ExtendedCost,
		A.SDFEC AS ForeignExtendedCost,
		A.SDCSTO AS CostOverrideMode,
		A.SDINMG AS ItemFlashMessage,     
		A.SDPTC AS PaymentTerms,      
		A.SDRYIN AS PaymentInstrument,
		A.SDDTBS AS BasedOnDate,
		A.SDTRDC AS DiscountTrade,
		A.SDASN AS AdjustmentSchedule,      
		A.SDPRGR AS PricingCategory,
		A.SDCLVL AS PricingCategoryLevel,
		A.SDCADC AS DiscountCash,
		A.SDKCO AS InvoiceCompany,
		A.SDDOC AS InvoiceNo,
		A.SDDCT AS InvoiceDocType,
		A.SDTAX1 AS IsTaxable,     
		A.SDTXA1 AS TaxArea,     
		A.SDEXR1 AS TaxExplanationCode,
		A.SDLOB AS LineofBusiness,      
		A.SDEUSE AS EndUse,     
		A.SDDTYS AS DutyStatus,
		SDANBY AS BuyerNumber,
		A.SDCARS AS Carrier,
		A.SDMOT AS ModeOfTransport,
		A.SDUOM4 AS PricingUOM,
		A.SDITWT AS ItemWeight,
		A.SDWTUM AS WeightUOM,
		A.SDITVL AS ItemVolume,
		A.SDVLUM AS VolumeUOM,     
		A.SDRPRC AS RepriceBasketPriceCat,     
		A.SDORPR AS OrderRepriceCategory,
		A.SDRCD AS ReasonCode,
		A.SDUPC1 AS PriceCode1,     
		A.SDUPC2 AS PriceCode2,
		A.SDUPC3 AS PriceCode3,
		A.SDCRCD AS CurrencyCode,
		A.SDURRF AS UserReservedReference,     
		A.SDUSER AS "USERID",
		A.SDPID AS "PROGRAMID",
		A.SDJOBN AS WorkStationId,
		A.SDUPMJ AS DateUpdated,
		B.SD$9AN8 AS SCBillToNumber,  
		B.SD$9SHAN AS SCShipToNumber, 
		B.SD$9TYP AS AddressType, 
		B.SD$9MKTG AS MarketingCode, 
		B.SD$9IGPR AS ItemGroupPriority, 
		B.SDKIT AS ItemNumberShortKit, 
		B.SDMMCU AS CostCenterAlt,   
		B.SD$9SLN AS ShipLineNumber,  
		B.SD$9FQTY AS FamilyQuantityItems, 
		B.SD$9IID AS ItemGroupKeyID, 
		B.SD$9STS AS NextStatus,  
		B.SDQNTY AS FamilyQuantityItems,   
		B.SD$9UOM AS FamilyUnitOfMeasure,
		B.SDIDLN AS SCBillToContactID,   
		B.SDRCK7 AS SCShipToContactID,
		IM.IMSTKT	AS StockingType,
		A.SDLOCN AS Location,
		A.SDLOTN AS LotNumber,
		CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
		COALESCE(C.RFOGNO, 0 ) AS ParentLineNo,
		COALESCE(TxHistory.DTTUPRC,0) AS TaxedUnitPrice,
		COALESCE(TxHistory.DTTFUP,0)  AS ForeignTaxedUnitPrice,
		COALESCE(TxHistory.DTTAEXP,0) AS TaxedExtendedPrice,
		COALESCE(TxHistory.DTTFEA,0)  AS ForeignTaxedExtPrice,
		COALESCE(TxHistory.DTUTA,0)   AS UnitTaxAmount,
		COALESCE(TxHistory.DTFUTA,0)  AS ForeignUnitTaxAmount,
		COALESCE(TxHistory.DTETA,0)   AS ExtendedTaxAmount,
		COALESCE(TxHistory.DTFETA,0)  AS ForeignExtTaxAmount
    FROM [SCDATA].F42119 A 
	LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.SDITM, LangPref , 0 ) ) AS ContenDesc
		ON ContenDesc.DESCITM = A.SDITM
	LEFT OUTER JOIN [SCDATA].FQ674211 B
 		ON  B.SDDOCO = A.SDDOCO 
		AND B.SDDCTO = A.SDDCTO 
		AND B.SDKCOO = A.SDKCOO 
		AND B.SDLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
		ON IM.IMITM = A.SDITM
    LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
		ON  C.RFDOCO = A.SDDOCO
		AND C.RFDCTO = A.SDDCTO
		AND C.RFKCOO = A.SDKCOO
		AND C.RFLNID = A.SDLNID
	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
		ON TxHistory.DTDOCO = A.SDDOCO 
		AND TxHistory.DTDCTO = A.SDDCTO
		AND TxHistory.DTKCOO = A.SDKCOO 
		AND TxHistory.DTLNID = A.SDLNID
    WHERE A.SDKCOO = Company 
		AND A.SDDOCO = OrderNumber
		AND A.SDDCTO = OrderType
		FOR FETCH ONLY;

		IF (RetrieveWebContentInfo = 0) THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;
	

END 



 ;
-- #desc						Reads Order Shipment information  
-- #bl_class					N/A	
-- #db_dependencies				N/A
-- #db_references				COM_GetSalesOrderInfo_Z, COM_GetOrderShipConfInfo

-- #param InstallationID		Installation ID
-- #param OrderCompany			Company ID
-- #param OrderType				Document Type
-- #param OrderNumber			OrderNumber
-- #param OrderShipToNumber		Order ShipTo Number
-- #param AddressType			AddressType
-- #param Freight				Freight on or off flag  0= off  1 = On
-- #param IsOverrideShipTo		Is Override Ship To	Address 

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrderShipments
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN OrderCompany		GRAPHIC(5) CCSID 13488,
	IN OrderType		GRAPHIC(2) CCSID 13488,
	IN OrderNumber		NUMERIC(8,0),
	IN OrderShipToNumber NUMERIC(15,0),
	IN AddressType		NUMERIC(15,0),
	IN Freight			INT,
	IN IsOverrideShipTo	INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderShipments 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
		
	DECLARE DiscountLineType	VARGRAPHIC(2) CCSID 13488;
	DECLARE InstallationTemp	GRAPHIC(3) CCSID 13488;
	DECLARE TrackingLineType	VARGRAPHIC(2) CCSID 13488;
	
	DECLARE CurrentJulianDate NUMERIC(6,0);
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		DECLARE CURSOR_OVERRIDE CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT DISTINCT
			OrderShipToNumber	AS SCShipToNumber,
			' '			AS NickName,
			A.OAMLNM AS MailingName,
			A.OAADD1 AS AddressLine1, 
			A.OAADD2 AS AddressLine2, 
			A.OAADD3 AS AddressLine3,
			A.OAADD4 AS AddressLine4,
			A.OACTY1 AS City,
			A.OAADDS AS State,
			A.OAADDZ AS ZipCode,
			A.OACTR AS Country,
			CASE WHEN Freight = 0 THEN ' ' ELSE DETAIL.CostCenter END AS CostCenter,
			'Y' AS IsShipToOverride
		FROM [SCDATA].F4006 A
		INNER JOIN SESSION.COM_GetSalesOrderShipments_A DETAIL
			ON DETAIL.OrderNumber = OADOCO
			AND DETAIL.OrderType = OADCTO
			AND DETAIL.OrderCompany = OAKCOO
		WHERE OADOCO = OrderNumber
			AND OADCTO = OrderType 
			AND OAKCOO = OrderCompany  
			AND OAANTY = 2; /*SHIPTO TYPE*/
				
		DECLARE CURSOR_CUSTOMER CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT DISTINCT 
			DETAIL.SCShipToNumber	AS SCShipToNumber,
			CASE
				WHEN	LENGTH(RTRIM(LTRIM(S2.WWNICK))) > 0 THEN 
					S2.WWNICK
				ELSE
					(
						CASE 
							WHEN COALESCE(PE.PS$9ICF, 0) = 1  THEN S2.WWALPH
							ELSE S2.WWMLNM
							END
					)
			END		  AS  Nickname,
			S2.WWMLNM AS MailingName,
			S3.ALADD1 AS AddressLine1, 
			S3.ALADD2 AS AddressLine2, 
			S3.ALADD3 AS AddressLine3,
			S3.ALADD4 AS AddressLine4,
			S3.ALCTY1 AS City,
			S3.ALADDS AS State,
			S3.ALADDZ AS ZipCode,
			S3.ALCTR AS Country,
			CASE WHEN Freight = 0 THEN ' ' ELSE DETAIL.CostCenter END AS CostCenter,
			'N' AS IsShipToOverride
		FROM SESSION.COM_GetSalesOrderShipments_A DETAIL
		INNER JOIN [SCDATA].F0101					S1
			/* Address Book Join Who's Who (Contacts)*/
			ON S1.ABAN8 = DETAIL.SCShipToNumber
		INNER JOIN [SCDATA].F0111					S2
			ON S2.WWAN8 = S1.ABAN8
			AND S2.WWIDLN = 0
			/* Address Book Join Address File*/
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (S1.ABAN8, CurrentJulianDate)) S3
			ON S3.ALAN8 = S1.ABAN8
			/*Address Book Join Customer Master*/
		LEFT OUTER JOIN [SCDATA].FQ67107 PE		/* Profile Extended Information*/
			ON PS$9AN8 = S1.ABAN8
			AND PS$9TYP = 0 /*CUSTOMER			*/
		WHERE DETAIL.LineType <> DiscountLineType 
			AND DETAIL.LineType <> TrackingLineType;
				
		DECLARE CURSOR_CONSUMER CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT DISTINCT
			DETAIL.SCShipToNumber	AS SCShipToNumber,
			(CASE
				WHEN LENGTH(RTRIM(LTRIM(C.PRURRF))) > 0 THEN C.PRURRF
				ELSE (
						CASE 
						WHEN COALESCE(PE.PS$9ICF,0) = 1 THEN C.PRALPH
						ELSE CONT.PCMLNM
						END)
			END)		AS NickName,
			CONT.PCMLNM AS MailingName,
			C.PRADD1 AS AddressLine1, 
			C.PRADD2 AS AddressLine2, 
			C.PRADD3 AS AddressLine3,
			C.PRADD4 AS AddressLine4,
			C.PRCTY1 AS City,
			C.PRADDS AS State,
			C.PRADDZ AS ZipCode,
			C.PRCTR AS Country,
			CASE WHEN Freight = 0 THEN ' ' ELSE DETAIL.CostCenter END AS CostCenter,
			'N' AS IsShipToOverride
		FROM SESSION.COM_GetSalesOrderShipments_A DETAIL
		INNER JOIN [SCDATA].FQ670302 C /*Consumer*/
			ON DETAIL.SCShipToNumber = PR$9AN8
		INNER JOIN [SCDATA].FQ67303 CONT /*Consumer*/
			ON DETAIL.SCShipToNumber = PC$9AN8
			AND PCIDLN = 0
		LEFT OUTER JOIN [SCDATA].FQ67107 PE		/* Profile Extended Information*/
			ON PS$9AN8 = PC$9AN8
			AND PS$9TYP = 1 /*CONSUMER*/
		WHERE DETAIL.LineType <> DiscountLineType 
			AND DETAIL.LineType <> TrackingLineType;
		
						
		IF (IsOverrideShipTo > 0) THEN			
			OPEN CURSOR_OVERRIDE;
		ELSE /*NO SHIPTO OVERRIDE GET SHIPTO INFORMATION FOR THE CONSUMER/CUSTOMER*/
			
			SET InstallationTemp = InstallationID;
			CALL [SCLIBRARY].CMM_GetConstantValue('DISCOUNTLN', InstallationTemp, DiscountLineType);
			SET InstallationTemp = InstallationID;
			CALL [SCLIBRARY].CMM_GetConstantValue('TRACKINGLN', InstallationTemp, TrackingLineType);
		
			IF(AddressType = 0) THEN 
				OPEN CURSOR_CUSTOMER;
			ELSE 
				OPEN CURSOR_CONSUMER;
			END IF;				
		END IF;
	END;
END
 ;
-- #desc					Load the Configured Segments List
-- #bl_class				N/A	
-- #db_dependencies			N/A
-- #db_references			COM_GetOrderShipConfInfo, COM_GetSalesOrderInfo_Z, QTS_GetQuoteOrderInfo_Z

-- #param OrderCompany		Company id
-- #param OrderType			Document type
-- #param OrderNumber		Order number
-- #param LangPref			Lang Pref

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSOConfiguredLineList
(
	IN	OrderCompany	VARCHAR(5),
	IN	OrderType		VARCHAR(2),
	IN	OrderNumber		NUMERIC(15,0),
	IN 	LangPref        VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSOConfiguredLineList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	--/*Stores the history for the configured items of all the configurations ordered.*/
	DECLARE GLOBAL TEMPORARY TABLE SESSION.ConfiguratorMasterTBL
	(
		ConfiguratorID	NUMERIC(15,0),
		BranchPlant		VARGRAPHIC(12) CCSID 13488,
		LineNumber		NUMERIC(15,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED; 
		
		
	INSERT INTO SESSION.ConfiguratorMasterTBL
		(ConfiguratorID,
		BranchPlant, 
		LineNumber) 
	SELECT * FROM (
		SELECT DISTINCT
			CT.CMCFGID	AS ConfiguratorID,
			CT.CMEMCU	AS BranchPlant,
			CT.CMLNID	AS LineNumber
		FROM 
			[SCDATA].F3201 CT	 /*Configurator Master*/
		WHERE
			CT.CMKCOO = OrderCompany AND
			CT.CMDOCO =	OrderNumber AND
			CT.CMDCTO =	OrderType AND
			CT.CMCFGCID  = 1 /*assumption:1 is the parent number ID - CMLNID = 1*/
		UNION ALL
		SELECT DISTINCT
			CTH.CHCFGID	AS ConfiguratorID,
			CTH.CHEMCU	AS BranchPlant,
			CTH.CHLNID	AS LineNumber
		FROM 
			[SCDATA].F32019 CTH /*Configurator Master History*/
		WHERE
			CTH.CHKCOO = OrderCompany AND
			CTH.CHDOCO = OrderNumber AND
			CTH.CHDCTO = OrderType AND
			CTH.CHCFGCID  = 1
	) AS TEMP_TABLE;
					
	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
				OrderCompany,
				OrderType,
				OrderNumber,
				LineNumberID,
				ConfigurationIDNumber,
				ComponentIDNumber,
				SegmentNumber,
				SegmentValue,
				ParentItemNumber,
				COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ) AS RequiredorOptional,
				COALESCE(CIS_MCU.KWDSC1, CIS_EMPTY_MCU.KWDSC1) AS Description,
				COALESCE(CIS_MCU.KWDTAS, CIS_EMPTY_MCU.KWDTAS) AS SegmentSequence,
				(CASE WHEN (COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ)) = 'C' OR RTRIM(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY)) = '' OR RTRIM(COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT)) = ''
					THEN ' ' 
					ELSE [SCLIBRARY].CMM_GetUserDefinedCodeFnc(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY), COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT), SegmentValue, LangPref)  
				END) AS SegmentDescription
		FROM (
			SELECT DISTINCT
				OrderCompany	AS OrderCompany,
				OrderType		AS OrderType,        
				OrderNumber	 	AS OrderNumber,	 
				CM.LineNumber	AS LineNumberID,
				SD.KZCFGID		AS ConfigurationIDNumber,	
				SD.KZCFGCID		AS ComponentIDNumber,
				SD.KZPEL		AS SegmentNumber,
				SD.KZSGVL		AS SegmentValue,
				SD.KZKIT		AS ParentItemNumber,
				CM.BranchPlant AS  BranchPlant
			FROM
				[SCDATA].F3211 SD	  /*Configurator Segment Detail*/
			INNER JOIN SESSION.ConfiguratorMasterTBL CM
				ON CM.ConfiguratorID = SD.KZCFGID
			UNION ALL
			SELECT DISTINCT
				OrderCompany	AS OrderCompany,
				OrderType		AS OrderType,        
				OrderNumber	 	AS OrderNumber,	 
				CM.LineNumber	AS LineNumberID,
				SDH.KSCFGID		AS ConfigurationIDNumber,	
				SDH.KSCFGCID	AS ComponentIDNumber,
				SDH.KSPEL		AS SegmentNumber,
				SDH.KSSGVL 		AS SegmentValue,
				SDH.KSKIT		AS ParentItemNumber,
				CM.BranchPlant AS  BranchPlant
			FROM 	
				[SCDATA].F32119 SDH /*Configurator Segment Detail History*/
			INNER JOIN SESSION.ConfiguratorMasterTBL CM
				ON CM.ConfiguratorID = SDH.KSCFGID) AS OrderConf
		LEFT JOIN [SCDATA].F3291 CIS_MCU /*Configured Item Segments*/
				ON CIS_MCU.KWKIT  = OrderConf.ParentItemNumber 
				AND CIS_MCU.KWMCU = OrderConf.BranchPlant
				AND CIS_MCU.KWPEL = OrderConf.SegmentNumber
		LEFT JOIN [SCDATA].F3291 CIS_EMPTY_MCU /*Configured Item Segments*/
			ON CIS_EMPTY_MCU.KWKIT  = OrderConf.ParentItemNumber 
			AND CIS_EMPTY_MCU.KWMCU = ''
			AND CIS_EMPTY_MCU.KWPEL = OrderConf.SegmentNumber
		ORDER BY ComponentIDNumber, SegmentSequence, SegmentNumber, Description

		FOR FETCH ONLY;			
		
		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc					Delete marketing code tracking 
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelMarketingCodeTracking
(
	MarketingCode  VARCHAR(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelMarketingCodeTracking 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE FROM  
		[SCDATA].FQ674240
	WHERE 
		MK$9MKT = MarketingCode;
	
END ;
-- #desc					Return Line List 
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSOReturnLineList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN OrderCompany		GRAPHIC(5) CCSID 13488,
	IN OrderType		GRAPHIC(2) CCSID 13488,
	IN OrderNumber		NUMERIC(8,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSOReturnLineList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN

	DECLARE CORestric				VARGRAPHIC(1) CCSID 13488;
	DECLARE COINID					GRAPHIC(3) CCSID 13488;
	DECLARE COConstant				GRAPHIC(10) CCSID 13488;
	DECLARE OriginalOrderNumber		GRAPHIC(8) CCSID 13488;

	SET COINID					= InstallationID;
	SET COConstant				= 'CO_RESTRIC';
	/* Gets the Sales Order Document Restrictions */
    CALL [SCLIBRARY].CMM_GetConstantValue(COConstant, COINID, CORestric);

	/* Cast numeric order number to Test Original order number */
	SET OriginalOrderNumber = CAST(OrderNumber AS GRAPHIC(8) CCSID 13488);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT
					A.SDKCOO	AS CreditCompany, 
					A.SDDCTO	AS CreditType,
					A.SDDOCO	AS CreditNumber,
					A.SDOGNO	AS LineNumberID,			
					A.SDITM		AS IdentifierShortItem,
					A.SDUOM		AS UnitOfMeasure,
					A.SDMCU		AS CostCenter, 
					A.SDSOQS	AS ReturnQuantity,
					A.SDTRDJ	AS TransactionDate
			FROM	[SCDATA].F4211 A		/* Standard Sales OrderDetail */
			WHERE	A.SDOORN = OriginalOrderNumber
				AND	A.SDOCTO = OrderType
				AND	A.SDOKCO = OrderCompany
				AND (A.SDLTTR < '980' OR A.SDLTTR = '995') /* Cancelled Lines Validation */
			UNION ALL
			SELECT
					A.SDKCOO	AS CreditCompany, 
					A.SDDCTO	AS CreditType,
					A.SDDOCO	AS CreditNumber,
					A.SDOGNO	AS LineNumberID,			
					A.SDITM		AS IdentifierShortItem,
					A.SDUOM		AS UnitOfMeasure,
					A.SDMCU		AS CostCenter, 
					A.SDUORG	AS ReturnQuantity,
					A.SDTRDJ	AS TransactionDate			
			FROM 	[SCDATA].F42119 A	
			WHERE	A.SDOORN = OriginalOrderNumber
				AND	A.SDOCTO = OrderType
				AND	A.SDOKCO = OrderCompany
				AND (A.SDLTTR < '980' OR A.SDLTTR = '995') /* Cancelled Lines Validation */
		)
		SELECT 
			A.CreditCompany, 
			A.CreditType,
			A.CreditNumber,
			A.LineNumberID,			
			A.IdentifierShortItem,
			A.UnitOfMeasure,
			A.CostCenter, 
			A.ReturnQuantity,
			A.TransactionDate
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = COINID
			AND DR.DR$9CNST = COConstant 
			AND DR.DRKY = A.CreditType
		WHERE
			(CORestric = N'0' OR DR.DRKY IS NOT NULL)
		ORDER BY LineNumberID ASC;

		OPEN TEMP_CURSOR1;
	END;
END;
-- #desc					Profile Read Billing Information
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			QTS_GetQuoteOrderInfo_Z.sql

-- #param SCBillToNumber	AddressNumber
-- #param ContactID			ContactID

CREATE OR REPLACE Procedure [SCLIBRARY].QTS_GetQuoteOrderInfo_BillTo
(
	SCBillToNumber	NUMERIC (15,0) ,
	ContactID		NUMERIC (15,0) 
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GetQuoteOrderInfo_BillTo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR		
		SELECT 
			WW.WWMLNM AS MailingName,
			AL.ALADD1 AS AddressLine1, 
			AL.ALADD2 AS AddressLine2, 
			AL.ALADD3 AS AddressLine3,
			AL.ALADD4 AS AddressLine4,
			AL.ALCTY1 AS City,
			AL.ALADDS AS State,
			AL.ALADDZ AS ZipCode,
			AL.ALCTR AS Country
		FROM [SCDATA].F0101 AB			-- Customer Master
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	-- Address Book Join
			ON ALAN8 = AB.ABAN8
		INNER JOIN [SCDATA].F0111 WW	--Contact Information
			ON WWAN8 = ABAN8
			AND WWIDLN = ContactID
		WHERE 
			ABAN8 = SCBillToNumber
		FOR FETCH ONLY;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	OPEN TEMP_CURSOR1;
END;

-- #desc					Shipment read only info
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			QTS_GetQuoteOrderInfo_Z.sql

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param QuoteNumber		Quote Number
-- #param OrderCompany		Order ShipTo Number

CREATE OR REPLACE Procedure [SCLIBRARY].QTS_GetQuoteOrderInfoShipments
(
	IN OrderCompany			VARCHAR(5),
	IN OrderType			VARCHAR(2),
	IN QuoteNumber			NUMERIC(15,0),
	IN OrderShipToNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GetQuoteOrderInfoShipments 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE CURSOR_OVERRIDE CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT DISTINCT
			OrderShipToNumber		AS SCShipToNumber,
			DETAIL.ShipLineNumber	AS ShipLineNumber,
			' '		 AS NickName,
			A.OAMLNM AS MailingName,
			A.OAADD1 AS AddressLine1, 
			A.OAADD2 AS AddressLine2, 
			A.OAADD3 AS AddressLine3,
			A.OAADD4 AS AddressLine4,
			A.OACTY1 AS City,
			A.OAADDS AS State,
			A.OAADDZ AS ZipCode,
			A.OACTR  AS Country,
			'Y'		 AS IsShipToOverride
		FROM [SCDATA].F4006 A
		INNER JOIN SESSION.TMP_ORDERDETAIL DETAIL
			ON DETAIL.QuoteNumber = OADOCO
			AND DETAIL.OrderType = OADCTO
			AND DETAIL.OrderCompany = OAKCOO
		WHERE OADOCO = QuoteNumber
			AND OADCTO = OrderType 
			AND OAKCOO = OrderCompany  
			AND OAANTY = 2; /*SHIPTO TYPE*/

	DECLARE CURSOR_CUSTOMER CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT DISTINCT -- GET SHIPTO INFORMATION FOR THE CUSTOMER	
			DETAIL.SCShipToNumber	AS SCShipToNumber,
			DETAIL.ShipLineNumber	AS ShipLineNumber,
			S2.WWNICK AS NickName,
			S2.WWMLNM AS MailingName,
			S3.ALADD1 AS AddressLine1, 
			S3.ALADD2 AS AddressLine2, 
			S3.ALADD3 AS AddressLine3,
			S3.ALADD4 AS AddressLine4,
			S3.ALCTY1 AS City,
			S3.ALADDS AS State,
			S3.ALADDZ AS ZipCode,
			S3.ALCTR  AS Country,
			'N'		  AS IsShipToOverride
				
		FROM SESSION.TMP_ORDERDETAIL DETAIL
		INNER JOIN [SCDATA].F0101					S1
			-- Address Book Join Who's Who (Contacts)
			ON S1.ABAN8 = DETAIL.SCShipToNumber
		INNER JOIN [SCDATA].F0111					S2
			ON S2.WWAN8 = S1.ABAN8
			AND S2.WWIDLN = 0
			-- Address Book Join Address File
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (S1.ABAN8, CurrentJulianDate)) S3
			ON S3.ALAN8 = S1.ABAN8
		FOR FETCH ONLY ;
		
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

		
		IF((SELECT COUNT(*) FROM [SCDATA].F4006
				WHERE OADOCO = QuoteNumber
					AND OADCTO = OrderType 
					AND OAKCOO = OrderCompany  
					AND OAANTY = 2) > 0) THEN
			UPDATE SESSION.TMP_ORDERDETAIL SET SCShipToNumber = OrderShipToNumber;
			OPEN CURSOR_OVERRIDE;
		ELSE /*NO SHIPTO OVERRIDE GET SHIPTO INFORMATION FOR THE CUSTOMER*/
			OPEN CURSOR_CUSTOMER;
		END IF;
END
 ;
 -- #desc						Get the Quote Status
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderHeadSrchList.sql, QTS_GetQuoteOrderInfo_Z.sql, QTS_GetQuoteRecentList.sql

-- #param QuoteNumber			Order Number
-- #param OrderCompany			Order Company
-- #param OrderType				Order Type
-- #param AllOpenOrders			AllOpenOrders
-- #param QuoteAcceptance		Quote Acceptance
-- #param QuoteStatus			Quote Status

CREATE OR REPLACE FUNCTION [SCLIBRARY].QTS_GetQuoteOrderStatusFnc
(
	QUOTENUMBER NUMERIC(8, 0) , 
	QUOTETYPE GRAPHIC(2) CCSID 13488 , 
	QUOTECOMPANY GRAPHIC(5) CCSID 13488 , 
	QUOTESTATUS VARGRAPHIC(3) CCSID 13488 ) 
RETURNS TABLE ( 
	SDNXTR VARCHAR(25) )
LANGUAGE SQL
SPECIFIC [SCLIBRARY].QTS_GetQuoteOrderStatusFnc
DISALLOW PARALLEL
NOT DETERMINISTIC
CALLED ON NULL INPUT
RETURN 
  
WITH CTE AS ( 
	SELECT 
		SDNXTR AS MINSTATUS 
	FROM [SCDATA] . F4211	 --Sales Order Lines 
	WHERE SDDOCO = QUOTENUMBER AND SDDCTO = QUOTETYPE AND SDKCOO = QUOTECOMPANY AND SDRLIT = '' AND (SDLTTR < '980' OR SDLTTR = '995') 
	UNION ALL 
	SELECT 
		SDNXTR AS MINSTATUS 
	FROM [SCDATA] . F42119	 --Sales Order Lines 
	WHERE SDDOCO = QUOTENUMBER AND SDDCTO = QUOTETYPE AND SDKCOO = QUOTECOMPANY AND SDRLIT = '' AND (SDLTTR < '980' OR SDLTTR = '995') 
) 
SELECT 
	CASE WHEN MIN ( MINSTATUS ) = QUOTESTATUS THEN 'READYFORREVIEW' 
	WHEN MIN ( MINSTATUS ) < QUOTESTATUS THEN 'PENDING' 
	WHEN MIN ( MINSTATUS ) > QUOTESTATUS THEN 'COMPLETED' 
	ELSE 'CANCELLED' END AS SDNXTR 
FROM CTE  ;
-- #desc					Del Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_DelFastButtonLang
(
	IN InstallationID	VARCHAR(6),
	IN LineNumber		NUMERIC(15,0),
	IN LangPref			VARCHAR(4)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelFastButtonLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DELETE FROM  
		[SCDATA].FQ67416L
	WHERE
		    (FB$9INID = InstallationID)
		AND (FBLNID = LineNumber)
		AND (LangPref IS NULL OR FBLNGP = LangPref);
END
		

 


      ;
-- #desc				    POS_DelReceiptItemMessage
-- #bl_class			    Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelReceiptItemMessage
(	
	IN InstallationID VARCHAR(3),
    IN ItemNumber     NUMERIC(15,0),
    IN MessageID      VARCHAR(50)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelReceiptItemMessage 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE  
	FROM  
		[SCDATA].FQ674220
    WHERE 
       (InstallationID IS NULL OR MI$9INID = InstallationID) AND
       (ItemNumber IS NULL OR MIITM = ItemNumber) AND
       (MI$9MID  = MessageID);
END ;
-- #desc					Read drawer by register 
-- #bl_class				Premier.POS.Drawer.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawer
(
	IN RegisterID	varchar(12),
	IN DrawerNumber NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawer 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TMP_DRAWERCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		DR$9REGID AS RegisterID,
		DR$9DRAW  AS DrawerNumber,
		DR$9DRST  AS Status,
		DR$9DRMUL AS AllowMultipleUsers,
		DREDBT    AS CurrentBatchNumber,
		DRURRF    AS UserReservedReference,
		DRURAB    AS UserReservedNumber,
		DRURAT    AS UserReservedAmount,
		DRURCD    AS UserReservedCode,
		DRURDT    AS UserReservedDate,
		DR$9AATR  AS CashDrawerLimit,
		DRPID     AS "PROGRAMID",
		DRJOBN    AS WorkStationId,
		DRUSER    AS "USERID",
		DRUPMJ    AS DateUpdated,
		DRUPMT    AS TimeUpdated

	FROM
		[SCDATA].FQ674261
	WHERE
		(RegisterID IS NULL OR DR$9REGID = RegisterID) AND
		(DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber)

    FOR FETCH ONLY;
      
    OPEN TMP_DRAWERCUR1;

END ;
-- #desc					Get receipt detail
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			POS_GetReceipt

-- #param InstallationID	Installation ID
-- #param ReceiptID			Receipt ID
-- #param RegisterID		Register ID

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetReceiptDetail
(
	IN InstallationID	varchar(3),
	IN RegisterID		varchar(12),
	IN ReceiptID		varchar(10) 
)	
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetReceiptDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	declare CONT INT;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBL 
	( 
	ReceiptID varchar(10),
	InstallationID varchar(3),
	RegisterID 	varchar(12),
	XmlBody 	DBCLOB CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	
	SELECT 
		TBL.ReceiptID,
		TBL.InstallationID,
		TBL.RegisterID,
		TBL.XmlBody
	FROM 
		SESSION.TBL TBL
	FOR FETCH ONLY;

	INSERT INTO SESSION.TBL 
	(SELECT 
		A.RR$9RCID ReceiptID, 
		A.RR$9INID InstallationID, 
		A.RR$9REGID RegisterID, 
		A.RR$9XML XmlBody
	FROM 
		[SCDATA].FQ674213 A
	WHERE 
		(ReceiptID IS NULL OR A.RR$9RCID = ReceiptID) AND 
		(A.RR$9INID = InstallationID) AND 
		(RegisterID IS NULL OR A.RR$9REGID = RegisterID));
	
	SET CONT = (SELECT COUNT(*) FROM SESSION.TBL);
	--RECIEPTID AND INSTALLATIONID SELECT
	if(CONT = 0) THEN

		INSERT INTO SESSION.TBL
	(SELECT 
		A.RR$9RCID ReceiptID, 
		A.RR$9INID InstallationID, 
		A.RR$9REGID RegisterID, 
		A.RR$9XML XmlBody
	FROM 
		[SCDATA].FQ674213 A
	WHERE 
		(ReceiptID IS NULL OR A.RR$9RCID = ReceiptID) AND 
		(A.RR$9INID = InstallationID));
	END IF;		

	SET CONT = (SELECT COUNT(*) FROM SESSION.TBL);
	--BASE INSTALLATION SELECT
	if(CONT = 0 )THEN

		INSERT INTO SESSION.TBL
	(SELECT 
		A.RR$9RCID ReceiptID, 
		A.RR$9INID InstallationID, 
		A.RR$9REGID RegisterID, 
		A.RR$9XML XmlBody
	FROM 
		[SCDATA].FQ674213 A
	WHERE 
		(ReceiptID IS NULL OR A.RR$9RCID = ReceiptID) AND 
		(A.RR$9INID = '***') );
	END IF;
	
	OPEN TEMP_CURSOR1; 
	END;
END ;
-- #desc						Reads Register Payment
-- #bl_class					Premier.POS.RegisterPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		InstallationID
-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument		Payment Instrument

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawerPayment
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN RegisterID			GRAPHIC(12) CCSID 13488,
	IN DrawerNumber			DECIMAL(10,0),
	IN CurrentBatchNumber	GRAPHIC(15) CCSID 13488,
	IN PaymentInstrument	GRAPHIC(1) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawerPayment 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE CC_DETAILCONSTANT VARGRAPHIC(1) CCSID 13488;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TEMP_TABLE 
	(
		RC$9REGID			GRAPHIC(12) CCSID 13488, 
		RC$9DRAW			DECIMAL(10,0), 
		RCEDBT				GRAPHIC(15) CCSID 13488,   
		DPRYIN				GRAPHIC(1) CCSID 13488,
		DPCARD				GRAPHIC(4) CCSID 13488,
		DPCRCD				GRAPHIC(3) CCSID 13488,
		OpeningBalance		DECIMAL(15,0), 
		LeftInDrawer		DECIMAL(15,0),
		TotalsPerCashier	DECIMAL(15,0),
		DP$9AATR			DECIMAL(15,0)	
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;


	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			RC$9REGID   AS      RegisterID,
			RC$9DRAW    AS      DrawerNumber,
			RCEDBT      AS      CurrentBatchNumber,
			DPRYIN      AS      PaymentInstrument,
			DPCARD      AS      CreditCardType,
			DPCRCD      AS      CurrecyCode,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',DPRYIN,'*') AS PaymentInstrumentDesc,
			SUM(OpeningBalance)				AS OpeningBalance,
			SUM(LeftInDrawer)				AS LeftInDrawer,
			SUM(TotalsPerCashier)			AS TotalsPerCashier,
			(COALESCE(SUM(DP$9AATR),0) )	AS SumOfTransactions,
			(COALESCE(SUM(TotalsPerCashier),0) - (COALESCE(SUM(DP$9AATR), 0) + COALESCE(SUM(OpeningBalance),0))) AS PendingDifference,
			(COALESCE(SUM(DP$9AATR),0) + COALESCE(SUM(OpeningBalance),0)) AS TotalsByInstrument    	    	    	    	    	   
		FROM 
			SESSION.TEMP_TABLE 
		GROUP BY 
			RC$9REGID,
			RC$9DRAW,
			RCEDBT,
			DPRYIN,
			DPCARD,
			DPCRCD
		ORDER BY DPRYIN DESC
		FOR FETCH ONLY;
		
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			RC$9REGID   AS      RegisterID,
			RC$9DRAW    AS      DrawerNumber,
			RCEDBT      AS      CurrentBatchNumber,
			DPRYIN      AS      PaymentInstrument,
			''		    AS      CreditCardType,
			DPCRCD      AS      CurrecyCode,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',DPRYIN,'*') AS PaymentInstrumentDesc,
			SUM(OpeningBalance)				AS OpeningBalance,
			SUM(LeftInDrawer)				AS LeftInDrawer,
			SUM(TotalsPerCashier)			AS TotalsPerCashier,
			(COALESCE(SUM(DP$9AATR),0) )	AS SumOfTransactions,
			(COALESCE(SUM(TotalsPerCashier),0) - (COALESCE(SUM(DP$9AATR), 0) + COALESCE(SUM(OpeningBalance),0))) AS PendingDifference,
			(COALESCE(SUM(DP$9AATR),0) + COALESCE(SUM(OpeningBalance),0)) AS TotalsByInstrument    	    	    	    	    	   
		FROM 
			SESSION.TEMP_TABLE 
		GROUP BY 
			RC$9REGID,
			RC$9DRAW,
			RCEDBT,
			DPRYIN,
			DPCRCD
		ORDER BY DPRYIN DESC
		FOR FETCH ONLY;
			
		
		--Gets the Credit Card Detail on Close Drawer Report Constant
		CALL [SCLIBRARY].CMM_GetConstantValue('CC_DETPAY', InstallationID, CC_DETAILCONSTANT);
	
	
		INSERT INTO SESSION.TEMP_TABLE
			(SELECT 
				A.RC$9REGID,
				A.RC$9DRAW,
				A.RCEDBT,
				C.DPRYIN,
				C.DPCARD,
				C.DPCRCD,
				0    AS OpeningBalance,
				0    AS LeftInDrawer,
				0    AS TotalsPerCashier,
				C.DP$9AATR
			FROM 
				[SCDATA].FQ67427 A 
			INNER JOIN [SCDATA].FQ674281 C
				ON C.DPEDBT = A.RCEDBT AND
				C.DP$9REGID = A.RC$9REGID AND
				C.DP$9DRAW = A.RC$9DRAW
			WHERE 
				A.RC$9REGID = RegisterID AND
				A.RC$9DRAW = DrawerNumber AND 
				A.RCEDBT = CurrentBatchNumber
			UNION ALL
			SELECT  
				Y.DC$9REGID,
				Y.DC$9DRAW,
				Y.DCEDBT,
				Y.DCRYIN,
				'',
				Y.DCCRCD,
				Y.DC$9AAOB,
				Y.DC$9AALF,
				Y.DC$9AACS,
				Y.DC$9AATR
			FROM 
				[SCDATA].FQ67428 Y
			WHERE 
				Y.DC$9REGID = RegisterID AND
				Y.DC$9DRAW = DrawerNumber AND
				Y.DCEDBT = CurrentBatchNumber
			UNION ALL
			SELECT
				Z.DR$9REGID,
				Z.DR$9DRAW,
				Z.DREDBT,
				Z.DRRYIN,
				'',
				Z.DRCRCD,
				0,
				0,
				0,
				Z.DR$9AATR
			FROM 
				[SCDATA].FQ674282 Z
			WHERE 
				Z.DR$9REGID = RegisterID  AND
				Z.DR$9DRAW = DrawerNumber AND 
				Z.DREDBT = CurrentBatchNumber);
				
		IF(CC_DETAILCONSTANT='1') THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;
     
	END;
END
 ;
-- #desc					Read Fast Button Langs
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref
-- #param Description1		Description1 
-- #param Description2		Description2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetFastButtonLangs
(
	IN InstallationID	GRAPHIC(6) CCSID 13488,
	IN LineNumber		NUMERIC(15,0),
	IN LangPref			GRAPHIC(2) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetFastButtonLangs 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		FB$9INID	AS InstallationID,
		FBLNID		AS LineNumber, 
		FBLNGP		AS LanguagePref,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',FBLNGP,LangPref) AS LanguageDescE1,
		FBDSC1		AS Description1,
		FBDSC2		AS Description2
		FROM  
		[SCDATA].FQ67416L
		WHERE
			FB$9INID = InstallationID
			AND FBLNID   = LineNumber
		ORDER BY 
			FB$9INID, FBLNID, FBLNGP
		FOR FETCH ONLY;
			
		OPEN TEMP_CURSOR2;
END;
   
-- #desc						Delete a General Announcement Assignments
-- #bl_class					Premier.Common.GeneralAnnouncementAssignment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param UniqueKeyID			Unique key ID	


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelGnrlAnnounceAssign
(
	IN AnnouncementID	 NUMERIC(15,0),
	IN UniqueKeyID		 NUMERIC(15,0)
)
DYNAMIC RESULT SETS 0
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelGnrlAnnounceAssign
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN 
	DELETE FROM	[SCDATA].FQ67105A
		WHERE MA$9NID = AnnouncementID
		 AND ((UniqueKeyID IS NULL) OR (MAUKID = UniqueKeyID));
END;


-- #desc						Get a table with Documents using Extended table, filter by Company and Address Number, 
--								also validate Document Restrict and Company Restrict
-- #bl_class					N/A			
-- #db_dependencies				N/A
-- #db_references				COM_GetReturnOrderRecentList

-- #param Company				Company
-- #param OrderINID				Setting Installation
-- #param OrderConstant			Setting Name
-- #param ConstantInstallation	Company Installation
-- #param CompanyConstant		Company Setting
-- #param OrderRestric			Order Restrict
-- #param AddressNumber			Address Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetRecentDocExtendedFnc
( 
	Company					GRAPHIC(5) CCSID 13488,
	OrderINID				GRAPHIC(3) CCSID 13488,
	OrderConstant			GRAPHIC(10) CCSID 13488,
	ConstantInstallation	GRAPHIC(3) CCSID 13488,
	CompanyConstant			VARGRAPHIC(1) CCSID 13488,
	OrderRestric			VARGRAPHIC(1) CCSID 13488,
	AddressNumber			NUMERIC(15, 0) 
) 
RETURNS TABLE 
( 
	SHDOCO NUMERIC(8,0), 
	SHDCTO GRAPHIC(2) CCSID 13488, 
	SHKCOO GRAPHIC(5) CCSID 13488, 
	SHTRDJ NUMERIC(6,0), 
	SHVR01 GRAPHIC(25) CCSID 13488, 
	SHCRCD GRAPHIC(3) CCSID 13488, 
	SHCRRM GRAPHIC(1) CCSID 13488, 
	SHHOLD GRAPHIC(2) CCSID 13488, 
	SHOTOT DECIMAL(15,0), 
	SHFAP DECIMAL(15,0), 
	RNUM DECIMAL(15,0) 
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetRecentDocExtendedFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
RETURN 
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO, 
			A.SHDCTO, 
			A.SHKCOO,			 
			A.SHTRDJ, 
			A.SHVR01, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCO 
		FROM [SCDATA].F4201 A  /* Sales Order Header */
		INNER JOIN [SCDATA].FQ674201 B  /* Extended Sales Order Header */ 
			ON B.SHKCOO = A.SHKCOO 
			AND B.SHDOCO = A.SHDOCO 
			AND B.SHDCTO = A.SHDCTO 
			AND B.SH$9AN8 = AddressNumber 
			AND B.SH$9TYP = 1			 
		WHERE 
			( Company = '*' OR A.SHCO = Company )	 
		UNION ALL 
		SELECT 
			A.SHDOCO, 
			A.SHDCTO, 
			A.SHKCOO,			 
			A.SHTRDJ, 
			A.SHVR01, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCO 
		FROM [SCDATA].F42019 A			 /* Sales Order Header */
		INNER JOIN [SCDATA].FQ674201 B  /* Extended Sales Order Header */ 
			ON B.SHKCOO = A.SHKCOO 
			AND B.SHDOCO = A.SHDOCO 
			AND B.SHDCTO = A.SHDCTO 
			AND B.SH$9AN8 = AddressNumber 
			AND B.SH$9TYP = 1			 
		WHERE 
			( Company = '*' OR A.SHCO = Company )	 
	) 
	SELECT				 
		A.SHDOCO, 
		A.SHDCTO, 
		A.SHKCOO,			 
		A.SHTRDJ, 
		A.SHVR01, 
		A.SHCRCD, 
		A.SHCRRM, 
		A.SHHOLD, 
		A.SHOTOT, 
		A.SHFAP, 
		ROW_NUMBER ( ) OVER ( ORDER BY SHTRDJ DESC , SHDOCO DESC ) AS RNUM 
	FROM CTE A 
	LEFT OUTER JOIN [SCDATA].FQ679912 CR 
		ON CR.CICO = SHCO 
		AND CR.CI$9INID = ConstantInstallation 
	LEFT OUTER JOIN [SCDATA].FQ67008 DR 
		ON DR.DRKY = SHDCTO 
		AND DR.DR$9INID = OrderINID 
		AND DR.DR$9CNST = OrderConstant 
	WHERE 
		( CompanyConstant = 'A' OR CR.CICO IS NOT NULL ) 
		AND ( OrderRestric = '0' OR DR.DRKY IS NOT NULL ); 

-- #desc						Get a table with Documents filtered by Company and Address Number, 
--								also validate Document Restrict and Company Restrict
-- #bl_class					N/A		
-- #db_dependencies				N/A
-- #db_references				COM_GetReturnOrderRecentList, QTS_GetQuoteRecentList

-- #param Company				Company
-- #param OrderINID				Setting Installation
-- #param OrderConstant			Setting Name
-- #param ConstantInstallation	Company Installation
-- #param CompanyConstant		Company Setting
-- #param OrderRestric			Order Restrict
-- #param AddressNumber			Address Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetRecentDocsFnc
( 
	Company					GRAPHIC(5) CCSID 13488 , 
	OrderINID				GRAPHIC(3) CCSID 13488 , 
	OrderConstant			GRAPHIC(10) CCSID 13488 , 
	ConstantInstallation	GRAPHIC(3) CCSID 13488 , 
	CompanyConstant			VARGRAPHIC(1) CCSID 13488 , 
	OrderRestric			VARGRAPHIC(1) CCSID 13488 , 
	AddresSNumber			NUMERIC(8, 0) 
) 
RETURNS TABLE 
( 
	SHDOCO NUMERIC(8,0),
	SHDCTO GRAPHIC(2) CCSID 13488,
	SHKCOO GRAPHIC(5) CCSID 13488,
	SHTRDJ NUMERIC(6,0),
	SHVR01 GRAPHIC(25) CCSID 13488,
	SHCRCD GRAPHIC(3) CCSID 13488,
	SHCRRM GRAPHIC(1) CCSID 13488,
	SHHOLD GRAPHIC(2) CCSID 13488,
	SHOTOT DECIMAL(15,0) , 
	SHFAP DECIMAL(15,0) , 
	RNUM DECIMAL(15,0) 
) 
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetRecentDocsFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
RETURN 
	WITH CTE AS ( 
		SELECT 
			A.SHDOCO,
			A.SHDCTO,
			A.SHKCOO,
			A.SHTRDJ,
			A.SHVR01,
			A.SHCRCD,
			A.SHCRRM,
			A.SHHOLD,
			A.SHOTOT,
			A.SHFAP,
			A.SHCO
		FROM [SCDATA].F4201 A			 /* Sales Order Header */
		WHERE 
			A.SHAN8 = AddressNumber 
		AND ( Company = '*' OR A . SHCO = Company )	 
		UNION ALL 
		SELECT 
			A.SHDOCO, 
			A.SHDCTO, 
			A.SHKCOO,			 
			A.SHTRDJ, 
			A.SHVR01, 
			A.SHCRCD, 
			A.SHCRRM, 
			A.SHHOLD, 
			A.SHOTOT, 
			A.SHFAP, 
			A.SHCO 
		FROM [SCDATA].F42019 A			 /* Sales Order Header */
		WHERE 
			A.SHAN8 = AddressNumber 
		AND ( Company = '*' OR A.SHCO = Company )	 
	) 
	SELECT				 
		A.SHDOCO,
		A.SHDCTO,
		A.SHKCOO,			 
		A.SHTRDJ,
		A.SHVR01,
		A.SHCRCD,
		A.SHCRRM,
		A.SHHOLD,
		A.SHOTOT,
		A.SHFAP,
		ROW_NUMBER ( ) OVER ( ORDER BY SHTRDJ DESC , SHDOCO DESC ) AS RNUM 
	FROM CTE A 
	LEFT OUTER JOIN [SCDATA].FQ679912 CR 
		ON CR.CICO = SHCO 
		AND CR.CI$9INID = ConstantInstallation 
	LEFT OUTER JOIN [SCDATA].FQ67008 DR 
		ON DR.DRKY = SHDCTO 
		AND DR.DR$9INID = OrderINID 
		AND DR.DR$9CNST = OrderConstant 
	WHERE 
		( CompanyConstant = 'A' OR CR.CICO IS NOT NULL ) 
		AND ( OrderRestric = '0' OR DR.DRKY IS NOT NULL ); 
-- #desc						Delete Announcement History
-- #bl_class					Premier.Common.UserAnnouncementHistory.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param AnnouncementType		Installation ID
-- #param WebAccountID			Web Account ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcUserAnnounceClearHist
(
	IN AnnouncementID		NUMERIC(15,0),
	IN AnnouncementType	    VARCHAR(4),
	IN WebAccountID	        NUMERIC(15,0)
)
DYNAMIC RESULT SETS 0
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcUserAnnounceClearHist 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DELETE FROM
		[SCDATA].FQ67105H
	WHERE
		MH$9NID = AnnouncementID AND 
		MH$9APFL = AnnouncementType AND 
		((WebAccountID IS NULL) OR (MH$9WAN8 = WebAccountID));
END;
-- #desc							Relate All Companies
-- #bl_class						Premier.Common.CompanyList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param SalesQtyPriorMonth01		Sales Qty Prior Month 01
-- #param SalesQtyPriorMonth02		Sales Qty Prior Month 02
-- #param Amount					Amount
-- #param AmountAa1					Amount Aa1
-- #param ADPDate01					ADP Date 01
-- #param ADPDate02					ADP Date 02
-- #param SalesReportingCode1		Sales Reporting Code 1
-- #param SalesReportingCode2		Sales Reporting Code 2
-- #param SalesReportingCode3		Sales Reporting Code 3
-- #param SalesReportingCode4		Sales Reporting Code 4
-- #param SalesReportingCode5		Sales Reporting Code 5
-- #param SalesReportingCode6		Sales Reporting Code 6
-- #param SalesReportingCode7		Sales Reporting Code 7
-- #param SalesReportingCode8		Sales Reporting Code 8
-- #param SalesReportingCode9		Sales Reporting Code 9
-- #param SalesReportingCode10		Sales Reporting Code 10
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param DateUpdated				Date Updated 
-- #param TimeLastUpdated			Time Last Updated
-- #param WorkStationID				WorkStation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddAllCompaniesByInst   
(
    IN InstallationID			VARCHAR(3),
	IN SalesQtyPriorMonth01		NUMERIC(15,0),
	IN SalesQtyPriorMonth02		NUMERIC(15,0),
	IN Amount					NUMERIC(15,0),
	IN AmountAa1				NUMERIC(15,0),
	IN ADPDate01				NUMERIC(15,0),
	IN ADPDate02				NUMERIC(15,0),
	IN SalesReportingCode1		VARCHAR(3),
	IN SalesReportingCode2		VARCHAR(3),
	IN SalesReportingCode3		VARCHAR(3),
	IN SalesReportingCode4		VARCHAR(3),
	IN SalesReportingCode5		VARCHAR(3),
	IN SalesReportingCode6		VARCHAR(6),
	IN SalesReportingCode7		VARCHAR(6),
	IN SalesReportingCode8		VARCHAR(6),
	IN SalesReportingCode9		VARCHAR(6),
	IN SalesReportingCode10		VARCHAR(6),
	IN UserReservedNumber		NUMERIC(15,0), 
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN UserID					VARCHAR(10),
	IN ProgramID				VARCHAR(10),	
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN WorkStationID			VARCHAR(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddAllCompaniesByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DELETE FROM
		[SCDATA].FQ679912 
	WHERE 
		CI$9INID = InstallationID;

	INSERT INTO [SCDATA].FQ679912
	(	
		CI$9INID,		
		CICO,		
		CIDSC1,
		CIDSC2,
		CISQ01,
		CISQ02,
		CIAA,
		CIAA1,
		CIDATE01,
		CIDATE02,
		CISRP1,
		CISRP2,
		CISRP3,
		CISRP4,
		CISRP5,
		CISRP6,
		CISRP7,
		CISRP8,
		CISRP9,
		CISRP0,
		CIURAB,
		CIURAT,
		CIURCD,
		CIURDT,
		CIURRF,
		CIUSER,   
		CIPID,		
		CIUPMJ,
        CIUPMT,
		CIJOBN             
	)
	SELECT	
		InstallationID,
		CCCO,					--Company ID
		CCNAME,					--Description 1
		'',						--Description 2
		SalesQtyPriorMonth01,
		SalesQtyPriorMonth02,
		Amount,
		AmountAa1,
		ADPDate01,
		ADPDate02,
		SalesReportingCode1,
		SalesReportingCode2,
		SalesReportingCode3,
		SalesReportingCode4,
		SalesReportingCode5,
		SalesReportingCode6,
		SalesReportingCode7,
		SalesReportingCode8,
		SalesReportingCode9,
		SalesReportingCode10,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,		
		DateUpdated,
		TimeLastUpdated,
		WorkStationID			
	FROM	
		[SCDATA].F0010;
    
END
		
			 ;
-- #desc						Provides the constant values for the Manage the Document Restriction.
-- #bl_class					Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation Id
-- #param Constant				Constant Id
-- #param ProductCode			Product code
-- #param UserDefinedCode		User define code 
-- #param UserDefinedKey		UDC Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddAllDocRestric 
(
    IN InstallationID			varchar(3),
    IN ConstantID				varchar(10),
    IN ProductCode				varchar(4),
    IN UserDefinedCode			varchar(2),
    IN UserReservedCode			varchar(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0), 
	IN UserReservedNumber		NUMERIC(15,0), 
	IN UserReservedReference	varchar(15),
	IN "USERID"					varchar(10),
	IN "PROGRAMID"				varchar(10),
	IN WorkStationID			varchar(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddAllDocRestric   
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

    DECLARE	CODELENGTH INTEGER;
	SET CODELENGTH = 0 ; 
	SET CODELENGTH = ( SELECT DTCDL FROM [SCCTL].F0004 
						WHERE DTSY = ProductCode AND DTRT = UserDefinedCode);
						 
    DELETE FROM [SCDATA].FQ67008 WHERE         DR$9INID = InstallationID
										 AND    DR$9CNST = ConstantID
										 AND	DRSY	 = ProductCode
										 AND    DRRT     = UserDefinedCode;
	INSERT INTO [SCDATA].FQ67008
	(	
		DR$9INID,		-- Installation Id
		DR$9CNST,		-- Constant ID
		DRSY,			-- Product Code
		DRRT,			-- User defined Code  
		DRKY,			-- User defined Key 
		DRURCD,   
		DRURDT,
		DRURAT,  
		DRURAB, 
		DRURRF,  
		DRUSER,   
		DRPID,
		DRJOBN,
		DRUPMJ,
        DRUPMT             
	)
	SELECT	
			InstallationID,
			ConstantID,
			ProductCode,
			UserDefinedCode,
			SUBSTRING ( A.DRKY , LENGTH ( A.DRKY)-CODELENGTH+1 ,CODELENGTH ) AS UserDefinedKey ,
			UserReservedCode,
			UserReservedDate,
			UserReservedAmount,
			UserReservedNumber,
			UserReservedReference,
			"USERID",
			"PROGRAMID",
			WorkStationID,
			DateUpdated,
			TimeLastUpdated
			
			FROM	[SCCTL].F0005 A
			WHERE	A.DRSY = ProductCode
			AND		A.DRRT = UserDefinedCode
			
			ORDER BY DRKY;
END
		
			 ;
-- #desc					Add Announcement Installation.
-- #bl_class				Premier.Common.AnnouncementStore.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AnnouncementID	Announcement ID
-- #param InstallationID	Installation ID
-- #param AnnouncementType	Announcement Type  AGen | ATag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddAnnounceInstallation 
(
    IN AnnouncementID				NUMERIC(15,0),
    IN InstallationID				VARCHAR(3),
	IN AnnouncementType			    VARCHAR(4),
	IN UserReservedCode			    VARCHAR(2),
	IN UserReservedDate			    NUMERIC(15,0), 
	IN UserReservedAmount			NUMERIC(15,0),
	IN UserReservedNumber			NUMERIC(15,0),
	IN UserReservedReference		VARCHAR(15),
	IN "UserID"						VARCHAR(10),
	IN "ProgramID"					VARCHAR(10),
	IN WorkStationID				VARCHAR(10),
	IN DateUpdated					NUMERIC(15,0),
	IN TimeOfDay					NUMERIC(15,0)
)
DYNAMIC RESULT SETS 0
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddAnnounceInstallation
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	INSERT INTO [SCDATA].FQ67105I
	(
		MI$9NID,
		MI$9INID,
		MI$9APFL,
		MIURCD,
		MIURDT,
		MIURAT,
		MIURAB,
		MIURRF,
		MIUSER,
		MIPID,
		MIJOBN,
		MIUPMJ,
		MITDAY
	)
	VALUES
	(
		AnnouncementID,
		InstallationID,
		AnnouncementType,
		UserReservedCode,
		UserReservedDate, 
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		"UserID",
		"ProgramID",
		WorkStationID,
		DateUpdated,
		TimeOfDay
	);
END;
-- #desc					Add Branch Plants to a Installation.
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param BranchPlant		Branch Plant (MCU)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddBranchPlantByInst
(
    IN InstallationID varchar(3),
	IN BranchPlant	  varchar(12)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddBranchPlantByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	INSERT INTO [SCDATA].FQ679910
	(
		BI$9INID,		-- Installation Id
		BIMCU,			-- Branch Plant
		BILCNF          -- AllowPickup
	)
	VALUES
	(
		InstallationID,
		BranchPlant,
		'N'
	);
END ;
-- #desc							Relate Company
-- #bl_class						Premier.Common.CompanyList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param Company					Company
-- #param Description1				Description 1
-- #param Description2				Description 2
-- #param SalesQtyPriorMonth01		Sales Qty Prior Month 01
-- #param SalesQtyPriorMonth02		Sales Qty Prior Month 02
-- #param Amount					Amount
-- #param AmountAa1					Amount Aa1
-- #param ADPDate01					ADP Date 01
-- #param ADPDate02					ADP Date 02
-- #param SalesReportingCode1		Sales Reporting Code 1
-- #param SalesReportingCode2		Sales Reporting Code 2
-- #param SalesReportingCode3		Sales Reporting Code 3
-- #param SalesReportingCode4		Sales Reporting Code 4
-- #param SalesReportingCode5		Sales Reporting Code 5
-- #param SalesReportingCode6		Sales Reporting Code 6
-- #param SalesReportingCode7		Sales Reporting Code 7
-- #param SalesReportingCode8		Sales Reporting Code 8
-- #param SalesReportingCode9		Sales Reporting Code 9
-- #param SalesReportingCode10		Sales Reporting Code 10
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param DateUpdated				Date Updated 
-- #param TimeLastUpdated			Time Last Updated
-- #param WorkStationID				WorkStation ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddCompanyByInst
(
    IN InstallationID			VARCHAR(3),
    IN Company					VARCHAR(5),
	IN Description1				VARGRAPHIC(30) CCSID 13488,
	IN Description2				VARGRAPHIC(30) CCSID 13488,
	IN SalesQtyPriorMonth01		NUMERIC(15,0),
	IN SalesQtyPriorMonth02		NUMERIC(15,0),
	IN Amount					NUMERIC(15,0),
	IN AmountAa1				NUMERIC(15,0),
	IN ADPDate01				NUMERIC(15,0),
	IN ADPDate02				NUMERIC(15,0),
	IN SalesReportingCode1		VARCHAR(3),
	IN SalesReportingCode2		VARCHAR(3),
	IN SalesReportingCode3		VARCHAR(3),
	IN SalesReportingCode4		VARCHAR(3),
	IN SalesReportingCode5		VARCHAR(3),
	IN SalesReportingCode6		VARCHAR(6),
	IN SalesReportingCode7		VARCHAR(6),
	IN SalesReportingCode8		VARCHAR(6),
	IN SalesReportingCode9		VARCHAR(6),
	IN SalesReportingCode10		VARCHAR(6),
	IN UserReservedNumber		NUMERIC(15,0), 
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN UserID					VARCHAR(10),
	IN ProgramID				VARCHAR(10),	
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN WorkStationID			VARCHAR(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddCompanyByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	INSERT INTO [SCDATA].FQ679912
	(
		CI$9INID,		
		CICO,		
		CIDSC1,
		CIDSC2,
		CISQ01,
		CISQ02,
		CIAA,
		CIAA1,
		CIDATE01,
		CIDATE02,
		CISRP1,
		CISRP2,
		CISRP3,
		CISRP4,
		CISRP5,
		CISRP6,
		CISRP7,
		CISRP8,
		CISRP9,
		CISRP0,
		CIURAB,
		CIURAT,
		CIURCD,
		CIURDT,
		CIURRF,
		CIUSER,   
		CIPID,		
		CIUPMJ,
        CIUPMT,
		CIJOBN    
	)
	VALUES
	(
		InstallationID,
		Company,
		Description1,
		Description2,
		SalesQtyPriorMonth01,
		SalesQtyPriorMonth02,
		Amount,
		AmountAa1,
		ADPDate01,
		ADPDate02,
		SalesReportingCode1,
		SalesReportingCode2,
		SalesReportingCode3,
		SalesReportingCode4,
		SalesReportingCode5,
		SalesReportingCode6,
		SalesReportingCode7,
		SalesReportingCode8,
		SalesReportingCode9,
		SalesReportingCode10,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,		
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);

END ;
-- #desc							Add contant detail
-- #bl_class						Premier.Common.Constant.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID
-- #param ConstantValue				Constant Value

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_AddConstant
(	
	IN Constant		varchar(10),
	IN InstallationID varchar(3),
	IN ConstantValue	VARGRAPHIC(256) CCSID 13488
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddConstant 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	INSERT INTO [SCDATA].FQ670004
	(
		CN$9INID,  CN$9CNST,  CN$9VAL
	)
	VALUES
	(
		InstallationID, Constant, ConstantValue
	);

END ;
-- #desc					Insert currency detail
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param Description		Currency Description
-- #param Amount			Denomination Amount
-- #param CoinBillFlag		IS Coin or Bill
-- #param IsSpeedCash		mark as speed cash button

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddCurrencyDetail 
(
    IN CurrencyCode				VARCHAR(3),
    IN Amount					NUMERIC(15,0),
    IN Description				VARCHAR(30),
    IN CoinBillFlag				VARCHAR(1),
    IN IsSpeedCash				VARCHAR(1),
    INOUT SequenceID			NUMERIC(15,0),
    IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationID			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CMM_AddCurrencyDetail
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN

	--Get max sequence number
	SET SequenceID = (COALESCE((SELECT MAX (CILNID) FROM [SCDATA].FQ67012 WHERE CICRCD = CurrencyCode),0) + 1);
	 
	INSERT INTO [SCDATA].FQ67012
	(
		CICRCD,
		CILNID,
		CIAEXP,
		CIDL01,
		CIBCF8,
		CISPEOW,
		CIURAB,
	    CIURAT,
	    CIURCD,
	    CIURDT,
	    CIURRF,
		CIUSER,   
		CIPID,
		CIJOBN,
		CIUPMJ,
		CIUPMT
	)
	VALUES
	(	
		CurrencyCode,
		SequenceID,
		Amount,
		Description,
		CoinBillFlag,
		IsSpeedCash,
		UserReservedNumber,
	    UserReservedAmount,
	    UserReservedCode,
	    UserReservedDate,
	    UserReservedReference,
		"USERID",
		"PROGRAMID",
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);
END ;
-- #desc					Insert currency header
-- #bl_class				Premier.Common.CurrencyHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param CurrencySymbol	Currency Symbol
-- #param RoundingRule		Rounding Rule Name

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_AddCurrencyHeader 
(
    IN CurrencyCode				VARCHAR(3),
    IN CurrencySymbol			VARCHAR(3),
    IN RoundingRule				VARCHAR(10),
    IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationID			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddCurrencyHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	INSERT INTO [SCDATA].FQ67011
	(
		CICRCD,
		CICC0,
		CIRULENAME,
		CIURAB,
	    CIURAT,
	    CIURCD,
	    CIURDT,
	    CIURRF,
		CIUSER,   
		CIPID,
		CIJOBN,
		CIUPMJ,
		CIUPMT
	)
	VALUES
	(	
		CurrencyCode,
		CurrencySymbol,
		RoundingRule,
		UserReservedNumber,
	    UserReservedAmount,
	    UserReservedCode,
	    UserReservedDate,
	    UserReservedReference,
		"USERID",
		"PROGRAMID",
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);
END ;
-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 
-- #param UserDefinedKey	UDC Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddDocRestric 
(
    IN InstallationID			varchar(3),
    IN ConstantID				varchar(10),
    IN ProductCode				varchar(4),
    IN UserDefinedCode			varchar(2),
    IN UserDefinedKey			varchar(10),
    IN UserReservedCode			varchar(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0), 
	IN UserReservedNumber		NUMERIC(15,0), 
	IN UserReservedReference	varchar(15),
	IN "USERID"					varchar(10),
	IN "PROGRAMID"				varchar(10),
	IN WorkStationID			varchar(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddDocRestric
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	INSERT INTO [SCDATA].FQ67008
	(
		DR$9INID,		-- Installation Id
		DR$9CNST,		-- Constant ID
		DRSY,			-- Product Code
		DRRT,			-- User defined Code  
		DRKY,			-- User defined Key 
		DRURCD,   
		DRURDT,
		DRURAT,  
		DRURAB, 
		DRURRF,  
		DRUSER,   
		DRPID,
		DRJOBN,
		DRUPMJ,
        DRUPMT    
	)
	VALUES
	(
		InstallationID,
		ConstantID,
		ProductCode,
		UserDefinedCode,
		UserDefinedKey,
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		"USERID",
		"PROGRAMID",
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);

END ;
-- #desc							Add GeneralAnnouncement Lang
-- #bl_class						Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AnnouncementID			AnnouncementID
-- #param DesignStatus				DesignStatus
-- #param LangPref 					Language
-- #param Title						Title
-- #param HtmlContent				HtmlContent


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddGeneralAnnounceLang
(
	IN AnnouncementID         NUMERIC(15,0),
	IN DesignStatus	          NUMERIC(15,0),
	IN LangPref 	          VARCHAR(2),
	IN Title	              VARGRAPHIC(100) CCSID 13488,
	IN HtmlContent	          DBCLOB CCSID 13488
)

DYNAMIC RESULT SETS 0
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddGeneralAnnounceLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	INSERT INTO [SCDATA].FQ67105L
	(
		ML$9NID,
		ML$9DS,
		MLLNGP,
		ML$9MTT,
		ML$9MSC
	)
	VALUES
	(
		AnnouncementID,
		DesignStatus,
		LangPref,
		Title,
		HtmlContent
	);
END ;
-- #desc						Add General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.
-- #param Priority				Priority.
-- #param AccessLevel			AccessLevel.
-- #param EffectiveDate			EffectiveDate.
-- #param ExpirationDate		ExpirationDate.
-- #param Title					Title.
-- #param HtmlContent			HtmlContent.
-- #param Url					Url.


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddGeneralAnnouncement 
(
	INOUT	AnnouncementID		NUMERIC(15,0),	
	IN	DesignStatus			NUMERIC(15,0),
	IN	Priority				NUMERIC(15,0),
	IN	AccessLevel				NUMERIC(15,0),
	IN	EffectiveDate			NUMERIC(15,0),
	IN	ExpirationDate			NUMERIC(15,0),
	IN  Title					VARGRAPHIC(100) CCSID 13488,
	IN	HtmlContent				DBCLOB CCSID 13488,
	IN	Url						VARGRAPHIC(256) CCSID 13488,
	IN	UserReservedCode		VARCHAR(2),
	IN	UserReservedDate		NUMERIC(15,0),
	IN	UserReservedAmount		NUMERIC(15,0),
	IN	UserReservedNumber		NUMERIC(15,0),
	IN	UserReservedReference	VARCHAR(15),
	IN	"USERID"				VARCHAR(10),
	IN	"PROGRAMID"				VARCHAR(10),
	IN	WorkStationId			VARCHAR(10),
	IN	DateUpdated				NUMERIC(15,0),
	IN	TimeOfDay				NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddGeneralAnnouncement 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN

	IF (AnnouncementID IS NULL) THEN
		SELECT COALESCE(MAX (MS$9NID), 0) + 1 INTO AnnouncementID FROM [SCDATA].FQ67105;
	END IF;

	INSERT INTO [SCDATA].FQ67105
    (
        MS$9NID
       ,MS$9DS
       ,MS$9PRI
       ,MS$9MST
       ,MSEFFF
       ,MSEFFT
       ,MS$9MTT
       ,MS$9MSC
       ,MS$9MLK
       ,MSURCD
       ,MSURDT
       ,MSURAT
       ,MSURAB
       ,MSURRF
       ,MSUSER
       ,MSPID
       ,MSJOBN
       ,MSUPMJ
       ,MSTDAY
    )
    VALUES
    (	
        AnnouncementID,
		DesignStatus,
		Priority,
		AccessLevel,
		EffectiveDate,
		ExpirationDate,
		Title,
		HtmlContent,
		Url,
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		"USERID",
		"PROGRAMID",
		WorkStationId,
		DateUpdated,
		TimeOfDay
    );
END ;
-- #desc						Add a General Announcement Assignments
-- #bl_class					Premier.Common.GeneralAnnouncementAssignment.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param UniqueKeyID			Unique ID	
-- #param AssignmentType		Assignment Type
-- #param WebAccountID			Web Account ID
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param DataItem				Data Item
-- #param UserDefinedKey		User Defined Key

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_AddGnrlAnnounceAssign
(
     IN AnnouncementID			NUMERIC(15,0),
     INOUT UniqueKeyID			NUMERIC(15,0),
     IN AssignmentType			NUMERIC(15,0),	
     IN WebAccountID			NUMERIC(15,0),
     IN AddressNumber			NUMERIC(15,0),
     IN AddressBookType			NUMERIC(15,0),
     IN DataItem				VARCHAR(10),
     IN UserDefinedKey			VARCHAR(10),
     IN UserReservedCode		VARCHAR(2),
     IN UserReservedDate		NUMERIC(15,0),
     IN UserReservedAmount		NUMERIC(15,0),
     IN UserReservedNumber		NUMERIC(15,0),
     IN UserReservedReference	VARCHAR(15),
     IN UserID				    VARCHAR(10),
     IN ProgramID				VARCHAR(10),
     IN WorkStationID			VARCHAR(10),
     IN DateUpdated			    NUMERIC(15,0),
     IN TimeOfDay			    NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddGnrlAnnounceAssign 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
                             
	    SELECT COALESCE(MAX(MAUKID) ,0) + 1 INTO UniqueKeyID 
	    FROM [SCDATA].FQ67105A
	    WHERE MA$9NID = AnnouncementID;
	

	INSERT INTO [SCDATA].FQ67105A
	(
		MA$9NID,
		MAUKID,
		MA$9ATYP,
		MA$9WAN8,
		MA$9AN8,
		MA$9TYP,
		MADTAI,
		MAKY,
		MAURCD,
		MAURDT,
		MAURAT,
		MAURAB,
		MAURRF,
		MAUSER,
		MAPID,
		MAJOBN,
		MAUPMJ,
		MATDAY
	)
	VALUES
	(
		AnnouncementID,
		UniqueKeyID,
		AssignmentType,
		WebAccountID,
		AddressNumber,
		AddressBookType,
		DataItem,
		UserDefinedKey,
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		UserID,
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeOfDay
	);
END;

-- #desc							Add an Installation.
-- #bl_class						Premier.Common.Store.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID.
-- #param description				Description
-- #param ApplicationUseFlag		POS WEB NONE app Use Flag

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_AddInstallation
(
	IN InstallationID varchar(3),
	IN Description VARGRAPHIC(30) CCSID 13488,
	IN ApplicationUseFlag varchar(8)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddInstallation 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	INSERT INTO [SCDATA].FQ670001
		(
		  IN$9INID,  
		  INDSC1,
		  IN$9APFL
		)
		VALUES
		(
		  InstallationID, 
		  Description,
		  ApplicationUseFlag
		);
END ;
-- #desc							Create next number into table FQ67002
-- #bl_class						Premier.Common.NextNumber.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param NextNumberID				key
-- #param UseDescription1			Description
-- #param UseDescription2			Description 2
-- #param NextValue					Next value
-- #param UserReservedCode			
-- #param UserReservedDate
-- #param UserReservedAmount
-- #param UserReservedNumber
-- #param UserReservedReference
-- #param "USERID"
-- #param "PROGRAMID"
-- #param WorkStationId
-- #param DateUpdated
-- #param TimeOfDay

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_AddNextNumber 
(
	IN NextNumberID NUMERIC(15,0),
	IN UseDescription1 varchar(15),
	IN UseDescription2 varchar(15),
	IN NextValue NUMERIC(15,0),
	IN UserReservedCode varchar(6),
	IN UserReservedDate NUMERIC(15,0),
	IN UserReservedAmount NUMERIC(15,0),
	IN UserReservedNumber NUMERIC(15,0),
	IN UserReservedReference  varchar(30),
	IN "USERID" varchar(10),
	IN "PROGRAMID" varchar(10),
	IN WorkStationId varchar(10),
	IN DateUpdated NUMERIC(15,0),
	IN TimeOfDay NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_AddNextNumber
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	INSERT INTO [SCDATA].FQ67002
	(
		NN$9UKID,  NNUD01,  NNUD02, 
		NN$9N001,  NNURCD,  NNURDT,  NNURAT, 
		NNURAB,    NNURRF,  NNUSER,  NNPID, 
		NNJOBN,    NNUPMJ,  NNTDAY
	)
	VALUES
	(
		NextNumberID, UseDescription1, UseDescription2, 
		NextValue, UserReservedCode, UserReservedDate, UserReservedAmount, 
		UserReservedNumber,   UserReservedReference, "USERID", "PROGRAMID", 
		WorkStationId,   DateUpdated, TimeOfDay
	);
END


 ;
-- #desc						Associates ItemNumbers and BranchPlants sent as parameters separated by a ','
-- #bl_class					N/A	
-- #db_dependencies				N/A
-- #db_references				COM_GetCrossSegmentRulesList

-- #param ItemNumberList		Item Number List
-- #param BranchPlantList		Branch Plant List
-- #param Separator				Separator

CREATE OR REPLACE FUNCTION [SCLIBRARY].CMM_AssocItemBranchPlantFnc
(
	ItemNumberList		VARGRAPHIC(4000) CCSID 13488,
	BranchPlantList 	VARGRAPHIC(4000) CCSID 13488,
	Separator			NVARCHAR(1)
)
RETURNS TABLE(
	ItemNumber		NUMERIC(8,0),
	BranchPlant		GRAPHIC(12) CCSID 13488
)
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CMM_AssocItemBranchPlantFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE SeparatorPositionIN 	INT;
	DECLARE SeparatorPositionBP 	INT;
    DECLARE ItemNumber 				NUMERIC(8,0);
	DECLARE BranchPlant 			GRAPHIC(12) CCSID 13488;
	DECLARE TMPBranchPlant 			GRAPHIC(12) CCSID 13488;
	DECLARE StartPositionIN 		INT; 
	DECLARE StartPositionBP 		INT;
	
	SET SeparatorPositionIN = LOCATE_IN_STRING(ItemNumberList, Separator);
	SET SeparatorPositionBP = LOCATE_IN_STRING(BranchPlantList, Separator);
	SET StartPositionIN = 1; 
	SET StartPositionBP = 1;
	
	BEGIN
		
		DECLARE GLOBAL TEMPORARY TABLE SESSION.ITEMBRANCHPLANT
		( 
			ItemNumber		NUMERIC(8,0),
			BranchPlant		GRAPHIC(12) CCSID 13488
		) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
		
		IF (SeparatorPositionIN = 0) THEN
			SET TMPBranchPlant = (SELECT KUMCU
							FROM [SCDATA].F3292
							WHERE KUKIT = ItemNumberList
							AND KUMCU = BranchPlantList
							FETCH FIRST 1 ROWS ONLY); /*Retrieve first MCU valid for the specified product in the cross segment rules table*/

			SET ItemNumber = CAST(ItemNumberList AS NUMERIC(8,0));
			SET BranchPlant = CASE WHEN TMPBranchPlant IS NULL THEN '' ELSE TMPBranchPlant END;

			INSERT INTO SESSION.ITEMBRANCHPLANT VALUES(ItemNumber, BranchPlant);
		END IF;
		
		SET ItemNumberList = ItemNumberList || Separator;
		SET BranchPlantList = BranchPlantList || Separator;
		
		WHILE (SeparatorPositionIN > 0)
		DO
			SET ItemNumber = CAST(SUBSTR(ItemNumberList , StartPositionIN, SeparatorPositionIN - StartPositionIN) AS NUMERIC(8,0));
			SET BranchPlant = SUBSTR(BranchPlantList , StartPositionBP, SeparatorPositionBP - StartPositionBP);

		   SET TMPBranchPlant = (SELECT KUMCU
							FROM [SCDATA].F3292
							WHERE KUKIT = ItemNumber
							AND KUMCU = BranchPlant
							FETCH FIRST 1 ROWS ONLY); /*Retrieve first MCU valid for the specified product in the cross segment rules table*/

			SET BranchPlant = CASE WHEN TMPBranchPlant IS NULL THEN '' ELSE TMPBranchPlant END;

			IF(ItemNumber <> 0) THEN
				INSERT INTO SESSION.ITEMBRANCHPLANT VALUES(ItemNumber, BranchPlant);
			END IF;

			SET StartPositionIN = SeparatorPositionIN + 1;
			SET SeparatorPositionIN = LOCATE_IN_STRING(ItemNumberList, Separator, StartPositionIN);
			SET StartPositionBP = SeparatorPositionBP + 1;
			SET SeparatorPositionBP = LOCATE_IN_STRING(BranchPlantList, Separator, StartPositionBP);
		END WHILE;
		
		RETURN
		( 
			SELECT 
				A.ItemNumber,
				A.BranchPlant
			FROM SESSION.ITEMBRANCHPLANT A
		);
	END;
END;

-- #desc					Un Relate All Companies
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation ID 

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelAllCompaniesByInst
(
	IN InstallationID		VARCHAR(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelAllCompaniesByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DELETE FROM
		[SCDATA].FQ679912
	WHERE
		CI$9INID = InstallationID;

END
		 ;
-- #desc						Deletes an Installation description.
-- #bl_class					Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation Id
-- #param Constant				Constant Id
-- #param ProductCode			Product code
-- #param UserDefinedCode		User define code 

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelAllDocRestric
(
	IN InstallationID		varchar(3),
    IN ConstantID			varchar(10),
    IN ProductCode			varchar(4),
    IN UserDefinedCode		varchar(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelAllDocRestric 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DELETE  
	FROM  [SCDATA].FQ67008
		
	WHERE
		    DR$9INID =	InstallationID
		AND DR$9CNST =	ConstantID	
		AND DRSY =		ProductCode
		AND DRRT =		UserDefinedCode;
END
		 ;
-- #desc						Delete Announcement Installation
-- #bl_class					Premier.Common.AnnouncementStore.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param InstallationID		Installation ID
-- #param AnnouncementType		Announcement Type  AGen | ATag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelAnnounceInstallation
(
	IN AnnouncementID    NUMERIC(15,0),
	IN InstallationID	 VARCHAR(3),
	IN AnnouncementType  VARCHAR(4)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelAnnounceInstallation 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN

	DELETE FROM
		[SCDATA].FQ67105I
	WHERE
		MI$9NID = AnnouncementID AND 
		(InstallationID = '*' OR MI$9INID = InstallationID) AND 
		MI$9APFL = AnnouncementType;

END ;
-- #desc					Delete Branch Plant from installation
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param BranchPlant		Branch Plant (MCU)


CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelBranchPlantByInst
(
	IN InstallationID varchar(3),
	IN BranchPlant	varchar(12)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelBranchPlantByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	/* Item Branch Plant Override By Installation */
	DELETE FROM [SCDATA].FQ670005 WHERE BP$9INID = InstallationID AND TRIM(BPMCU) = TRIM(BranchPlant);

	Delete from
		[SCDATA].FQ679910
	Where
		BI$9INID = InstallationID 
		and BIMCU = BranchPlant;		

END ;
-- #desc						Un Relate Company
-- #bl_class					Premier.Common.CompanyList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param Company				Company

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelCompanyByInst
(
	IN InstallationID			VARCHAR(3),
    IN Company					VARCHAR(5)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelCompanyByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DELETE FROM
		[SCDATA].FQ679912		
	WHERE
		CI$9INID = InstallationID		
		AND CICO = Company;

END
		 ;
-- #desc							Delete contant detail
-- #bl_class						Premier.Common.Constant.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelConstant
(	
	IN Constant		varchar(10),
	IN InstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelConstant 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DELETE FROM
		[SCDATA].FQ670004
	WHERE
		    CN$9INID = InstallationID 
		AND CN$9CNST = Constant;
END


 ;
-- #desc					Remove currency Detail
-- #bl_class				Premier.Common.CurrencyDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param SequenceId		Sequence Id

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelCurrencyDetail
(
    IN CurrencyCode		VARCHAR(3),
    IN SequenceId		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelCurrencyDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DELETE FROM 
		[SCDATA].FQ67012 
	WHERE 
		CICRCD = CurrencyCode 
		AND CILNID = SequenceId;
	
END ;
-- #desc						Remove currency header
-- #bl_class					Premier.Common.CurrencyHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CurrencyCode			Currency Code

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelCurrencyHeader
(
    IN CurrencyCode		VARCHAR(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelCurrencyHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DELETE FROM [SCDATA].FQ67011 WHERE CICRCD = CurrencyCode;

	DELETE FROM [SCDATA].FQ67012 WHERE CICRCD = CurrencyCode;
	
END ;
-- #desc						Deletes an Installation description.
-- #bl_class					Premier.Common.DocRestrictionsCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param Installation			Installation Id
-- #param Constant				Constant Id
-- #param ProductCode			Product code
-- #param UserDefinedCode		User define code 
-- #param UserDefinedKey		UDC Key

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelDocRestric
(
	IN InstallationID			varchar(3),
    IN ConstantID				varchar(10),
    IN ProductCode				varchar(4),
    IN UserDefinedCode			varchar(2),
    IN UserDefinedKey			varchar(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelDocRestric 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DELETE  
	FROM  [SCDATA].FQ67008
		
	WHERE
		    DR$9INID = InstallationID
		AND DR$9CNST = ConstantID
		AND DRSY = ProductCode	
		AND DRRT = UserDefinedCode
		AND DRKY = UserDefinedKey;

END
		 ;
-- #desc						Del General Announcement Lang
-- #bl_class					Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param DesignStatus			Design Status
-- #param LangPref				Language


CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelGeneralAnnounceLang
(
	IN AnnouncementID	NUMERIC(15,0),
	IN DesignStatus		NUMERIC(15,0),
	IN LangPref		    VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelGeneralAnnounceLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DELETE FROM
		[SCDATA].FQ67105L
	WHERE
		ML$9NID = ANNOUNCEMENTID
		AND ( LANGPREF = '*' OR MLLNGP = LANGPREF )
		AND ( DESIGNSTATUS IS NULL OR ML$9DS = DESIGNSTATUS );
END

	 ;
-- #desc					Delete General Announcement
-- #bl_class				Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies			CMM_DelGeneralAnnouncLang, CMM_DelGeneralAnnouncInst
-- #db_references			N/A

-- #param AnnouncementID	Announcement ID
-- #param DesignStatus		Design Status

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_DelGeneralAnnouncement
(
	IN	AnnouncementID		Numeric(15,0),
	IN	DesignStatus		Numeric(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelGeneralAnnouncement 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE numberOfChildren INT;
	/* IF COUNTANNOUNCE = 1 doesn't have copy (draft and published) */
	/* IF DesignStatus delete published and draft version */
	SET numberOfChildren  = (SELECT COUNT(*)  FROM [SCDATA].FQ67105 WHERE MS$9NID = AnnouncementID);
	IF (numberOfChildren = 1 OR DesignStatus IS NULL) THEN 
		/* Delete relation with installations */
		CALL [SCLIBRARY].CMM_DelAnnounceInstallation(AnnouncementID, '*', 'AGen');	
		/* History */
		CALL [SCLIBRARY].CMM_ExcUserAnnounceClearHist(AnnouncementID, 'AGen', NULL);
		/* Delete assignments */
		CALL [SCLIBRARY].CMM_DelGnrlAnnounceAssign(AnnouncementID, NULL);
	END IF;

	CALL [SCLIBRARY].CMM_DelGeneralAnnounceLang(AnnouncementID, DesignStatus, '*');

	DELETE FROM 
		[SCDATA].FQ67105
	WHERE 
		MS$9NID = AnnouncementID AND
		(DesignStatus IS NULL OR MS$9DS = DesignStatus);	
END;
-- #desc						Deletes an Installation and all related information
-- #bl_class					Premier.Common.Store.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelInstallation
(
	IN InstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelInstallation 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	--Line of Business By Installation
	DELETE FROM [SCDATA].FQ671031 WHERE LI$9INID = InstallationID;
		
	--Item Branch Priority
	DELETE FROM [SCDATA].FQ674101 WHERE PR$9INID = InstallationID;	
	
	/* Item Branch Plant Override By Installation */
	DELETE FROM [SCDATA].FQ670005 WHERE BP$9INID = InstallationID;
	
	--Branch Plant By Installation
	DELETE FROM [SCDATA].FQ679910 WHERE BI$9INID = InstallationID;
	
	--Constant Value By Installation
	DELETE FROM [SCDATA].FQ670004 WHERE CN$9INID = InstallationID;
		
	--Sales Unit of Measure
	DELETE FROM [SCDATA].FQ67415 WHERE UM$9INID = InstallationID;
	
	--Sales Unit of Measure (language)
	DELETE FROM [SCDATA].FQ67415L WHERE UM$9INID = InstallationID AND UMUOM NOT IN (SELECT UMUOM FROM [SCDATA].FQ67415);
	
	--Items Fast Buttons (language)
	DELETE FROM [SCDATA].FQ67416L WHERE FB$9INID = InstallationID;
	
	--Items Fast Buttons
	DELETE FROM [SCDATA].FQ67416 WHERE FB$9INID = InstallationID;
	
	--Document Restrictions (AR - SO)
	DELETE FROM [SCDATA].FQ67008 WHERE DR$9INID = InstallationID;
	
	--Permission Setup by Installation (eCommerce Permissions)
	DELETE FROM [SCDATA].FQ67994E WHERE PE$9INID = InstallationID;
	
	--Item Web Content Detail
	DELETE FROM [SCDATA].FQ67411 WHERE CD$9INID = InstallationID;
	
	--Item Web Content Detail (Language)
	DELETE FROM [SCDATA].FQ67411L WHERE CL$9INID = InstallationID;
		
	--Item Web Content Header
	DELETE FROM [SCDATA].FQ67410 WHERE CH$9INID = InstallationID;
	
	--Item Web Content Header ( Language)
	DELETE FROM [SCDATA].FQ67410L WHERE CL$9INID = InstallationID;
	
	--Receipts by Installation ID or Registers
	DELETE FROM [SCDATA].FQ674213 WHERE RR$9INID = InstallationID;
	
	--Drawers by Register
	DELETE FROM [SCDATA].FQ674261 WHERE EXISTS(SELECT * FROM [SCDATA].FQ67426 
												WHERE RG$9REGID = DR$9REGID AND RG$9INID = InstallationID);
	
	--Registers Master
	DELETE FROM [SCDATA].FQ67426 WHERE RG$9INID = InstallationID;

	--Catalog Detail (language)
	DELETE FROM [SCDATA].FQ67413L AS CDL WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 AS C
												WHERE C.CA$9CLGID = CDL.CD$9CLGID AND C.CA$9INID = InstallationID);
	--Catalogs Detail
	DELETE FROM [SCDATA].FQ67413 AS CD WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 AS C
												WHERE C.CA$9CLGID = CD.CD$9CLGID AND C.CA$9INID = InstallationID);
	--Catalogs (language)
	DELETE FROM [SCDATA].FQ67412L AS CL WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 AS C
												WHERE C.CA$9CLGID = CL.CA$9CLGID AND C.CA$9INID = InstallationID);
	
	--Catalog Node Items
	DELETE FROM [SCDATA].FQ67413I AS I WHERE EXISTS(SELECT * FROM [SCDATA].FQ67412 AS C
												WHERE C.CA$9CLGID = I.IN$9CLGID AND C.CA$9INID = InstallationID);
	--Catalogs
	DELETE FROM [SCDATA].FQ67412 WHERE CA$9INID = InstallationID;
	
	--- P4210 Settings Detail	
	DELETE FROM [SCDATA].FQ674231 WHERE RD$9INID = InstallationID;
	
	--- P4210 Settings Header	
	DELETE FROM [SCDATA].FQ674230 WHERE RH$9INID = InstallationID;
	
	--- Sales Person Clients	
	DELETE FROM [SCDATA].FQ67125 WHERE SP$9INID = InstallationID;
	
	--Recently View Items
	DELETE FROM [SCDATA].FQ67120 WHERE WI$9INID = InstallationID;
	
	--Companies By Installation
	DELETE FROM [SCDATA].FQ679912 WHERE CI$9INID = InstallationID;

	--///////////// Delete User /////////////////////////
		
	--User Permissions
	DELETE FROM [SCDATA].FQ67997 WHERE EXISTS(SELECT US$9USER FROM [SCDATA].FQ67991
														INNER JOIN [SCDATA].FQ67101
															ON WA$9USER = US$9USER
														INNER JOIN [SCDATA].FQ67996
															ON WA$9USER = UI$9USER
														WHERE US$9USER = UP$9USER 
															AND UI$9INID = InstallationID);
	
	--User Password History
	DELETE FROM [SCDATA].FQ679911 WHERE EXISTS(SELECT US$9USER FROM [SCDATA].FQ67991
														INNER JOIN [SCDATA].FQ67101
															ON WA$9USER = US$9USER
														INNER JOIN [SCDATA].FQ67996
															ON WA$9USER = UI$9USER
														WHERE US$9USER = PH$9USER
															AND UI$9INID = InstallationID);
	
	--Users
	DELETE FROM [SCDATA].FQ67991 WHERE EXISTS(SELECT WA$9USER FROM [SCDATA].FQ67101	
																INNER JOIN [SCDATA].FQ67996
																	ON WA$9USER = UI$9USER
																WHERE WA$9USER = US$9USER
																	AND UI$9INID = InstallationID); 
		
	--Shopping Cart Detail (Persist Information)	
	DELETE FROM [SCDATA].FQ67411W WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = SD$9WAN8
														AND UI$9INID = InstallationID);
		
	--Shopping Cart Header (Persist Information)
	DELETE FROM [SCDATA].FQ6742WF WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = SH$9WAN8
														AND UI$9INID = InstallationID);	
	
	--Wish List Detail
	DELETE FROM [SCDATA].FQ674215 WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = WD$9WAN8
														AND UI$9INID = InstallationID);
	
	--Wish List Header
	DELETE FROM [SCDATA].FQ674214 WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101
													INNER JOIN [SCDATA].FQ67996
														ON WA$9USER = UI$9USER
													WHERE WA$9WAN8 = WH$9WAN8
														 AND UI$9INID = InstallationID);
	
	--Announcements - Assignments by web account 
	DELETE FROM [SCDATA].FQ67105A WHERE EXISTS(SELECT WA$9WAN8 FROM [SCDATA].FQ67101 
													WHERE WA$9INID = InstallationID AND WA$9WAN8 = MA$9WAN8) AND MA$9ATYP = 5;		
	--Web Accounts
	DELETE FROM [SCDATA].FQ67101 WHERE EXISTS(SELECT UI$9USER FROM [SCDATA].FQ67996
														WHERE UI$9USER = WA$9USER
															AND UI$9INID = InstallationID);
	
	--Users by Installation Id
	DELETE FROM [SCDATA].FQ67996 WHERE UI$9INID = InstallationID;
	
	--Announcements  History
	DELETE FROM [SCDATA].FQ67105H WHERE MH$9INID = InstallationID;

	--Announcements 
	DELETE FROM [SCDATA].FQ67105I WHERE MI$9INID = InstallationID;	
	
	--InstallationId Master
	DELETE FROM [SCDATA].FQ670001 WHERE IN$9INID = InstallationID;
	
END ;
-- #desc						Update next number from table FQ67002
-- #bl_class					Premier.Common.NextNumber.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param NextNumberID			key

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_DelNextNumber
(
	IN NextNumberID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_DelNextNumber 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DELETE 

	FROM  
		[SCDATA].FQ67002
	WHERE 
		NN$9UKID = NextNumberID;
END



 ;
-- #desc					Check BranchPlant Related Exist
-- #bl_class				Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param BranchPlantID		BranchPlant ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcBranchPlantRelatedExist
(	
	IN BranchPlantID	VARCHAR(12)
)	
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcBranchPlantRelatedExist 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE EXIST_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		COUNT(*)
	FROM
		[SCDATA].FQ679910			
	WHERE 
		BIMCU = BranchPlantID AND 
		BI$9INID <> '***'
	FOR FETCH ONLY;
	
	OPEN EXIST_CURSOR;
END;
-- #desc						Check dry state
-- #bl_class					Premier.Common.CheckDryStateCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param State					State

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcCheckDryState
(
	IN State	varchar(10)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcCheckDryState
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			SC$9CLR
		FROM [SCDATA].FQ675520
		WHERE
			SCADDS = State
		FOR FETCH ONLY;
	
		OPEN TEMP_CURSOR1;
END
   ;
-- #desc						Copy an Installation
-- #bl_class					Premier.Common.CopyStoreCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param State					State 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcCopyInstallation
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN InstallationIDFrom	GRAPHIC(3) CCSID 13488,
	IN "USERID"				double,
	IN SelectionKeys		VARGRAPHIC(256) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcCopyInstallation
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE Pos INTEGER DEFAULT 0;
	DECLARE NextString VARGRAPHIC(1000) CCSID 13488;
	
		
	IF (SelectionKeys <> '') THEN
		SET Pos = POSSTR(SelectionKeys, '|@');
		WHILE_LOOP:	
		WHILE ( Pos <> 0 ) DO
				SET NextString = substring(SelectionKeys, 1, Pos - 1);
				SET SelectionKeys = substring(SelectionKeys,Pos + 2,LENGTH(SelectionKeys));
				SET Pos = POSSTR(SelectionKeys,'|@');
				
				
				
				IF (NextString = 'CONSTANT')THEN
						INSERT INTO [SCDATA].FQ670004 (CN$9INID,CN$9CNST,CN$9VAL)
							SELECT
								InstallationID,
								A.CN$9CNST,
								A.CN$9VAL
							FROM [SCDATA].FQ670004 A
							INNER JOIN [SCDATA].FQ670003 B
								ON B.CN$9CNST= A.CN$9CNST
							WHERE A.CN$9INID = InstallationIDFrom
								AND CN$9SOF = 0
								AND NOT EXISTS (SELECT 1 FROM [SCDATA].FQ670004 C WHERE C.CN$9INID = InstallationID AND C.CN$9CNST = A.CN$9CNST);

						INSERT INTO [SCDATA].FQ679912 (CI$9INID,CICO,CIDSC1,CIDSC2,CISQ01,CISQ02,CIAA,CIAA1,CIDATE01,CIDATE02,CISRP1,CISRP2,CISRP3,CISRP4,
						CISRP5,CISRP6,CISRP7,CISRP8,CISRP9,CISRP0,CIURAB,CIURAT,CIURCD,CIURDT,CIURRF,CIUSER,CIPID,CIUPMJ,CIUPMT,CIJOBN) 
						SELECT
								InstallationID,
								CICO,
								CIDSC1,
								CIDSC2,
								CISQ01,
								CISQ02,
								CIAA,
								CIAA1,
								CIDATE01,
								CIDATE02,
								CISRP1,
								CISRP2,
								CISRP3,
								CISRP4,
								CISRP5,
								CISRP6,
								CISRP7,
								CISRP8,
								CISRP9,
								CISRP0,
								CIURAB,
								CIURAT,
								CIURCD,
								CIURDT,
								CIURRF,
								CIUSER,
								CIPID,
								CIUPMJ,
								CIUPMT,
								CIJOBN
							FROM [SCDATA].FQ679912
							WHERE CI$9INID = InstallationIDFrom;

				ELSEIF (NextString = 'LOB')THEN
						INSERT INTO [SCDATA].FQ671031 (LI$9LOB,LI$9INID,LIPID,LIJOBN,LIUSER,LIUPMJ,LIUPMT)
							SELECT	
								LI$9LOB,
								InstallationID,
								LIPID,
								LIJOBN,
								LIUSER,
								LIUPMJ,
								LIUPMT
							FROM [SCDATA].FQ671031
							WHERE LI$9INID = InstallationIDFrom;
				
				ELSEIF (NextString = 'MCU')THEN				
						INSERT INTO [SCDATA].FQ679910 (BI$9INID,BIMCU)
							SELECT
								InstallationID,
								BIMCU
							FROM [SCDATA].FQ679910
							WHERE BI$9INID = InstallationIDFrom;
					
				ELSEIF (NextString = 'UOM')THEN
						INSERT INTO [SCDATA].FQ67415 (UM$9INID,UMUOM,UMDSC1)
							SELECT
								InstallationID,
								UMUOM,	
								UMDSC1
							FROM [SCDATA].FQ67415
							WHERE UM$9INID = InstallationIDFrom;
					
				ELSEIF (NextString = 'DOCREST')THEN
						INSERT INTO [SCDATA].FQ67008 (DR$9INID,DR$9CNST,DRSY,DRRT,DRKY,DRURCD,DRURDT,DRURAT,DRURAB,DRURRF,DRUSER,DRPID,DRUPMJ,DRJOBN,DRUPMT)
							SELECT	
								InstallationID,
								DR$9CNST,
								DRSY,
								DRRT,
								DRKY,
								DRURCD,
								DRURDT,
								DRURAT,
								DRURAB,
								DRURRF,
								DRUSER,
								DRPID,
								DRUPMJ,
								DRJOBN,
								DRUPMT
							FROM [SCDATA].FQ67008
							WHERE DR$9INID = InstallationIDFrom;
					
				ELSEIF (NextString = 'ITEMCNT')THEN
						INSERT INTO [SCDATA].FQ67411L (CLITM,CLUKID,CL$9INID,CL$9DS,CLLNGP,CL$9PTL,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
							SELECT
								CLITM,
								CLUKID,
								InstallationID,       
								CL$9DS,
								CLLNGP,
								CL$9PTL,
								CL$9HTML,
								CLURCD,
								CLURDT,
								CLURAT,
								CLURAB,
								CLURRF,
								CLUSER,
								CLPID,
								CLJOBN,
								CLUPMJ,
								CLTDAY
							FROM [SCDATA].FQ67411L
							WHERE CL$9INID = InstallationIDFrom;
						
						INSERT INTO [SCDATA].FQ67411 (CDITM,CDUKID,CD$9INID,CD$9DS,CDSEQ,CD$9PTL,CD$9HTML,CDASAI,CDEFFF,CDEFFT,CDURCD,CDURDT,CDURAT,CDURAB,CDURRF,CDUSER,CDPID,CDJOBN,CDUPMJ,CDTDAY)
							SELECT
								CDITM,
								CDUKID,
								InstallationID,
								CD$9DS,
								CDSEQ,
								CD$9PTL,
								CD$9HTML,
								CDASAI,
								CDEFFF,
								CDEFFT,
								CDURCD,
								CDURDT,
								CDURAT,
								CDURAB,
								CDURRF,
								CDUSER,
								CDPID,
								CDJOBN,
								CDUPMJ,
								CDTDAY
							FROM [SCDATA].FQ67411
							WHERE CD$9INID = InstallationIDFrom;


						INSERT INTO [SCDATA].FQ67410L (CLITM,CL$9INID,CL$9DS,CLLNGP,CLDSC1,CLDSC2,CLDSC3,CLPGTX,CLDL01,CLDL02,CLDL03,CLDL04,CLDL05,CLDL06,CLDL07,CLDL08,CLDL09,CLDL10,CLCOMMENTS,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
							SELECT
								CLITM,
								InstallationID,       
								CL$9DS,
								CLLNGP,
								CLDSC1,
								CLDSC2,
								CLDSC3,
								CLPGTX,
								CLDL01,
								CLDL02,
								CLDL03,
								CLDL04,
								CLDL05,
								CLDL06,
								CLDL07,
								CLDL08,
								CLDL09,
								CLDL10,
								CLCOMMENTS,
								CL$9HTML,
								CLURCD,
								CLURDT,
								CLURAT,
								CLURAB,
								CLURRF,
								CLUSER,
								CLPID,
								CLJOBN,
								CLUPMJ,
								CLTDAY
							FROM [SCDATA].FQ67410L
							WHERE CL$9INID = InstallationIDFrom;


						INSERT INTO [SCDATA].FQ67410 (CHITM,CH$9INID,CH$9DS,CHDSC1,CHDSC2,CHDSC3,CHPGTX,CHDL01,CHDL02,CHDL03,CHDL04,CHDL05,CHDL06,CHDL07,CHDL08,CHDL09,CHDL10,CHCOMMENTS,CH$9PRI,CH$9HTML,CHPTURL,CHURCD,CHURDT,CHURAT,CHURAB,CHURRF,CHUSER,CHPID,CHJOBN,CHUPMJ,CHTDAY)
							SELECT
								CHITM,
								InstallationID,
								CH$9DS,
								CHDSC1,
								CHDSC2,
								CHDSC3,
								CHPGTX,
								CHDL01,
								CHDL02,
								CHDL03,
								CHDL04,
								CHDL05,
								CHDL06,
								CHDL07,
								CHDL08,
								CHDL09,
								CHDL10,
								CHCOMMENTS,
								CH$9PRI,
								CH$9HTML,
								CHPTURL,
								CHURCD,
								CHURDT,
								CHURAT,
								CHURAB,
								CHURRF,
								CHUSER,
								CHPID,
								CHJOBN,
								CHUPMJ,
								CHTDAY
							FROM [SCDATA].FQ67410
							WHERE CH$9INID = InstallationIDFrom;
					
				ELSEIF (NextString = 'PERMISSION')THEN
						INSERT INTO [SCDATA].FQ67994E (PE$9INID,PE$9PCD,PE$9ICF,PE$9ALLOW,PE$9WEBA)
							SELECT
							InstallationID,
							PE$9PCD,
							PE$9ICF,
							(CASE 
								WHEN (PE$9PCD IN ('EOVAB', 'EOCIH', 'EOIVP', 'EBAAD', 'EBAMF', 'EBASW', 'ECCSW', 'ECCAD', 'ECCMF')) 
								THEN PE$9ALLOW
								ELSE 1 
							END),
							(CASE 
								WHEN (PE$9PCD IN ('EOVAB', 'EOCIH', 'EOIVP', 'EBAAD', 'EBAMF', 'EBASW', 'ECCSW', 'ECCAD', 'ECCMF')) 
								THEN PE$9WEBA
								ELSE 0 
							END)
						FROM [SCDATA].FQ67994E
						WHERE PE$9INID = InstallationIDFrom;		
					
				ELSEIF (NextString = 'RECEIPT')THEN
						INSERT INTO [SCDATA].FQ674213(RR$9RCID,RR$9INID,RR$9REGID,RR$9XML,RRPID,RRJOBN,RRUSER,RRUPMJ,RRUPMT)
							SELECT
								RR$9RCID,
								InstallationID,
								RR$9REGID,
								RR$9XML,
								RRPID,
								RRJOBN,
								RRUSER,
								RRUPMJ,
								RRUPMT
							FROM [SCDATA]. FQ674213
							WHERE RR$9INID = InstallationIDFrom;
					
				ELSEIF (NextString = 'FASTBTN')THEN
						INSERT INTO [SCDATA].FQ67416L (FB$9INID,FBLNID,FBLNGP,FBDSC1,FBDSC2)
							SELECT
								InstallationID,
								FBLNID,
								FBLNGP,
								FBDSC1,
								FBDSC2
							FROM [SCDATA].FQ67416L
							WHERE FB$9INID = InstallationIDFrom;
							
						INSERT INTO [SCDATA].FQ67416 (FB$9INID,FBLNID,FBITM,FBUOM,FBUORG,FBDSC1,FBDSC2)
							SELECT
								InstallationID,
								FBLNID,
								FBITM,
								FBUOM,
								FBUORG,
								FBDSC1,
								FBDSC2
							FROM [SCDATA].FQ67416
							WHERE FB$9INID = InstallationIDFrom;
				
				ELSEIF (NextString = 'P4210')THEN
						INSERT INTO [SCDATA].FQ674230 (RH$9INID,RHUKID,RHDSC1,RHVER,RHSEQ,RHRUDTP,RHRT,RHURAB,RHURAT,RHURCD,RHURDT,RHURRF,RHUSER,RHPID,RHUPMJ,RHUPMT,RHJOBN)
							SELECT
								InstallationID,
								RHUKID,
								RHDSC1,
								RHVER,
								RHSEQ,
								RHRUDTP,
								RHRT,
								RHURAB,
								RHURAT,
								RHURCD,
								RHURDT,
								RHURRF,
								RHUSER,
								RHPID,
								RHUPMJ,
								RHUPMT,
								RHJOBN
							FROM [SCDATA].FQ674230
							WHERE RH$9INID = InstallationIDFrom;

						INSERT INTO [SCDATA].FQ674231 (RD$9INID,RDUKID,RDLNID,RDKY,RDMCU,RD$9AN8,RDURAB,RDURAT,RDURCD,RDURDT,RDURRF,RDUSER,RDPID,RDUPMJ,RDUPMT,RDJOBN)
							SELECT
								InstallationID,
								RDUKID,
								RDLNID,
								RDKY,
								RDMCU,
								RD$9AN8,
								RDURAB,
								RDURAT,
								RDURCD,
								RDURDT,
								RDURRF,
								RDUSER,
								RDPID,
								RDUPMJ,
								RDUPMT,
								RDJOBN
							FROM [SCDATA].FQ674231
							WHERE RD$9INID = InstallationIDFrom;							
					END IF;	
									
			END WHILE WHILE_LOOP;
	END IF;
END
			
		
 ;
  -- #desc						Get country address format from table F0070
-- #bl_class					Premier.Common.GetCountryAddressFormatCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Country				Country id
-- #param AddressFormatId		Output value

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcGetCountryAddrFormat
(
  IN Country			varchar(3),
  OUT AddressFormatId	varchar(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcGetCountryAddrFormat 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
  
	SELECT 
		A.CKADID INTO AddressFormatId
	FROM 
		[SCDATA].F0070 A
	WHERE 
		A.CKCTR = Country
		FETCH FIRST 1 ROWS ONLY;
	
	IF(AddressFormatId IS NULL)
	THEN
	
		SELECT 
			A.CKADID INTO AddressFormatId
		FROM 
			[SCDATA].F0070 A
		WHERE 
			A.CKCTR = ''
			FETCH FIRST 1 ROWS ONLY;
	
		IF(AddressFormatId IS NULL)
		THEN
			SET AddressFormatId = '04';
		END IF;
	
	END IF;

END



 ;
-- #desc					Publish Announcement.
-- #bl_class				Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AnnouncementID	Announcement ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcGnrlAnnouncePublish 
(
	IN AnnouncementID  	NUMERIC(15,0),
	IN "UserID"			VARCHAR(10),
	IN WorkStationID	VARCHAR(10),
	IN DateUpdated		NUMERIC(15,0),
	IN TimeOfDay		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcGnrlAnnouncePublish
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	/* Delete Announcement Languages */
	DELETE FROM [SCDATA].FQ67105L 
	WHERE  
	ML$9NID = AnnouncementID AND
	ML$9DS = 0;							/* Published = 0 | Draft = 1 */

	/* Delete Published version	*/
	DELETE FROM [SCDATA].FQ67105 
	WHERE  
	MS$9NID = AnnouncementID AND
	MS$9DS = 0;							/* Published = 0 | Draft = 1 */
	/* Update Announcement status (Draft to Published) */
	UPDATE [SCDATA].FQ67105 
	SET MS$9DS = 0,						/* Published = 0 | Draft = 1 */
		MSUSER = "UserID",
		MSJOBN = WorkStationID,
		MSUPMJ = DateUpdated,
		MSTDAY = TimeOfDay
	WHERE 
	MS$9NID = AnnouncementID AND 
	MS$9DS = 1;

	/* Update Announcement Langs */
	UPDATE [SCDATA].FQ67105L 
	SET ML$9DS = 0						/* Published = 0 | Draft = 1 */
	WHERE 
	ML$9NID = AnnouncementID AND 
	ML$9DS = 1;
END;


-- #desc				        Execute a command of Default Data Syncronization
-- #bl_class			        Premier.SysBase.SystemDefaultDataSyncCommand.cs
-- #db_dependencies		        N/A
-- #db_references		        N/A

-- #param TableName		        Table Name
-- #param ExecuteCommand	    Command(s) To Execute

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcSystemDefaultDataSync
(
	IN TableName  VARCHAR(50),
	IN ExecuteCommand  VARCHAR(30000)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcSystemDefaultDataSync 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN  
  DECLARE queryCursor INTEGER ;
  DECLARE queryLenght INTEGER ;
  DECLARE subQuery VARCHAR(30000);
  DECLARE queryChar VARCHAR(1);
  DECLARE containsSplitter INTEGER;

  DECLARE DTAOWNER VARCHAR(30);  
  DECLARE CTLOWNER VARCHAR(30);

  DECLARE originalExistingRecords INTEGER;
  DECLARE overallResult INTEGER;
  DECLARE getCountRowsSql VARGRAPHIC(300) CCSID 13488;
  DECLARE sqlToExecute VARCHAR(30000);

  DECLARE OriginalRecordsCur CURSOR FOR StmtOriginal;
  DECLARE overalResultCur CURSOR FOR StmtOveral;  
  DECLARE resultCursor CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
  SELECT originalExistingRecords as OriginalExistingRecords , overallResult as OverallResult  FROM sysibm.sysdummy1 FOR FETCH ONLY;

  DECLARE Result_CursorTest CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
  SELECT subQuery  FROM sysibm.sysdummy1 FOR FETCH ONLY;

  SET queryCursor =1;
  SET queryLenght=0;
  SET subQuery='';
  SET containsSplitter=0;

  SET DTAOWNER = '[SCDATA]';
  SET CTLOWNER = '[SCCTL]';

  SET tableName = Replace(tableName, '[JDEDTA]', DTAOWNER);
  SET tableName = Replace(tableName, '[JDECTL]', CTLOWNER);

  SET getCountRowsSql = 'select  Count(*)  FROM ' || tableName; 
   
	--Original existing records result
  PREPARE StmtOriginal from  getCountRowsSql;
  OPEN OriginalRecordsCur;
  FETCH OriginalRecordsCur INTO originalExistingRecords;
  CLOSE OriginalRecordsCur;
  --Replace owner and dummy table also add the BEGIN and END of PLSQL block statement
	SET sqlToExecute = Replace(Replace(Replace(executeCommand,'[JDEDTA]', DTAOWNER),'[JDECTL]', CTLOWNER),'{DUMMYTABLE}','from sysibm.sysdummy1');
  --Set the length of the query
  SELECT LENGTH(sqlToExecute) INTO queryLenght from sysibm.sysdummy1;

  --Execute the query fill the items asociated        
  WHILE (queryCursor<=queryLenght) DO

    SELECT SUBSTR(sqlToExecute,queryCursor,1) INTO queryChar from sysibm.sysdummy1;
    --Concat the subquery
    SELECT subQuery CONCAT queryChar INTO subQuery from sysibm.sysdummy1;
    --Verify if the subquery has a spplitter
    SELECT LOCATE('{SPLITTER}',subQuery)  INTO containsSplitter from sysibm.sysdummy1;
    IF (containsSplitter > 0) THEN      
      SELECT REPLACE(subQuery,'{SPLITTER}','') INTO subQuery from sysibm.sysdummy1;    
      EXECUTE IMMEDIATE subQuery;
      SET subQuery = '';
    END IF;
    SET queryCursor = queryCursor + 1 ;

  END WHILE;
  PREPARE StmtOveral from  getCountRowsSql;
  OPEN overalResultCur;
  FETCH overalResultCur INTO overallResult;
  CLOSE overalResultCur;
	--Get the results
  OPEN resultCursor;    
  
END;

-- #desc						Update pickup flag for Branchplants by Installations
-- #bl_class					Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param BranchPlant			Branch Plant (MCU)
-- #param AllowPickup			AllowPickup

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_ExcUpdBranchPlantPickup
(	
	IN InstallationID varchar(3),
	IN BranchPlant	  varchar(12),
	IN AllowPickup	  varchar(1) 
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcUpdBranchPlantPickup 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	UPDATE 
		[SCDATA].FQ679910
	SET  
		BILCNF = AllowPickup
	WHERE 
		    BI$9INID = InstallationID 
		AND BIMCU = BranchPlant;
END ;
-- #desc							Add User Announcement History
-- #bl_class						Premier.Common.UserAnnouncementHistory.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AnnouncementID			Announcement ID		
-- #param AnnouncementType			Announcement Type		
-- #param WebAccountID				WebAccount ID			
-- #param InstallationID			Installation ID		
-- #param AddressNumber				Address Number			
-- #param ContactID					Contact ID				
-- #param AddressBookType			Address Book Type		
-- #param Priority					Priority	
-- #param UserAnnouncementStatus	Announcement Record History Status			
-- #param AcceptanceDate			Acceptance Date

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_ExcUserAnnounceUpdHist 
(
	IN AnnouncementID			NUMERIC(15,0),
	IN AnnouncementType			VARCHAR(4),
	IN WebAccountID				NUMERIC(15,0),
	IN InstallationID			VARCHAR(3),
	IN AddressNumber			NUMERIC(15,0),
	IN ContactID				NUMERIC(15,0),
	IN AddressBookType			NUMERIC(15,0),
	IN Priority					NUMERIC(15,0),
	IN UserAnnouncementStatus	VARCHAR(2),
	IN AcceptanceDate			NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "UserID"					VARCHAR(10),
	IN ProgramID				VARCHAR(10),
	IN WorkStationID			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_ExcUserAnnounceUpdHist
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	IF(UserAnnouncementStatus = 'U') THEN
		DELETE 
		FROM [SCDATA].FQ67105H
		WHERE MH$9WAN8 = WebAccountID AND 
				MH$9NID = AnnouncementID AND 
				MH$9APFL = AnnouncementType;
	ELSEIF EXISTS (SELECT * FROM [SCDATA].FQ67105H WHERE (MH$9WAN8 = WebAccountID AND MH$9NID = AnnouncementID AND MH$9APFL = AnnouncementType))
	THEN
		UPDATE [SCDATA].FQ67105H
		SET 
			MH$9NID = AnnouncementID,
			MH$9APFL = AnnouncementType, 
			MH$9WAN8 = WebAccountID, 
			MH$9INID = InstallationID, 
			MH$9AN8 = AddressNumber, 
			MHIDLN = ContactID, 
			MH$9TYP = AddressBookType, 
			MH$9PRI = Priority, 
			MH$9A1ST = UserAnnouncementStatus,
			MH$9MDT =
			CASE 
				WHEN UserAnnouncementStatus = 'R' THEN AcceptanceDate ELSE MH$9MDT
			END, 
			MHURCD = UserReservedCode, 
			MHURDT = UserReservedDate, 
			MHURAT = UserReservedAmount, 
			MHURAB = UserReservedNumber, 
			MHURRF = UserReservedReference, 
			MHUSER = "UserID", 
			MHPID = ProgramID, 
			MHJOBN = WorkStationID, 
			MHUPMJ =
			CASE 
				WHEN UserAnnouncementStatus = 'RB' 
				OR UserAnnouncementStatus = 'B' 
				OR UserAnnouncementStatus = 'D' THEN  DateUpdated ELSE MHUPMJ
			END, 
			MHTDAY = TimeOfDay
		WHERE
			MH$9WAN8 = WebAccountID 
			AND MH$9NID = AnnouncementID 
			AND MH$9APFL = AnnouncementType;
	ELSE
		INSERT INTO [SCDATA].FQ67105H
	(
		MH$9NID, MH$9APFL, MH$9WAN8, MH$9INID, MH$9AN8, MHIDLN, MH$9TYP, MH$9PRI, MH$9A1ST, MH$9MDT, 
		MHURCD, MHURDT, MHURAT, MHURAB, MHURRF, MHUSER, MHPID, MHJOBN, MHUPMJ, MHTDAY
	)
	VALUES 
	(
		AnnouncementID,
		AnnouncementType,
		WebAccountID,
		InstallationID,
		AddressNumber,
		ContactID,
		AddressBookType,
		Priority,
		UserAnnouncementStatus,
		AcceptanceDate,
		UserReservedCode,
		UserReservedDate,
		UserReservedAmount,
		UserReservedNumber,
		UserReservedReference,
		"UserID",
		ProgramID,
		WorkStationID,
		DateUpdated,
		TimeOfDay				
	);
	END IF;
END
 ;
-- #desc						Get Announceent Installations.
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID.
-- #param AnnouncementType		Announcement Type   AGen | ATag

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetAnnounceInstallations
(
	AnnouncementID	    NUMERIC(15,0),
	AnnouncementType	VARCHAR(4)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetAnnounceInstallations 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
    SELECT 
		MI$9NID AS AnnouncementID,
		MI$9INID AS InstallationID,
		MI$9APFL AS AnnouncementType,
	    INDSC1 AS Description,
		MIURCD AS UserReservedCode,
		MIURDT AS UserReservedDate,
		MIURAT AS UserReservedAmount,
		MIURAB AS UserReservedNumber,
		MIURRF AS UserReservedReference,
		MIUSER AS UserID,
		MIPID AS ProgramID,
		MIJOBN AS WorkStationID,
		MIUPMJ AS DateUpdated,
		MITDAY AS TimeOfDay
    FROM  
	    [SCDATA].FQ67105I ANNI
		INNER JOIN 
			[SCDATA].FQ670001 INID 
		ON 
			INID.IN$9INID = ANNI.MI$9INID
    WHERE 
			MI$9NID = AnnouncementID AND
			MI$9APFL = AnnouncementType
FOR FETCH ONLY;


OPEN TEMP_CURSOR1;
END ;
-- #desc						Get Announce User Acceptance List
-- #bl_class					Premier.Common.AnnounceUserAcceptHistList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID.
-- #param AnnouncementType		Announcement Type  AGen | ATag
-- #param FilterTerm			Criteria to search by username or mailing name
-- #param PageIndex				Page number
-- #param PageSize				Page size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetAnnounceUserAcceptLst
(
	IN AnnouncementID		NUMERIC(15,0),
	IN AnnouncementType		VARCHAR(30),
	IN FilterTerm		    VARGRAPHIC(256) CCSID 13488,
	IN PageIndex			NUMERIC(15,0),
    IN PageSize			    NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetAnnounceUserAcceptLst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
DECLARE FilterTermtemp VARGRAPHIC(256) CCSID 13488;
DECLARE ResultData1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR WITH CTE1 AS (

     SELECT MH$9NID AS AnnouncementID,
			MH$9APFL AS AnnouncementType,
			MH$9WAN8 AS WebAccountID,
			MH$9INID AS InstallationID,
			MH$9AN8 AS AddressNumber,
			MHIDLN AS ContactId,
			MH$9MDT AS AcceptanceDate,
			CASE ANNH.MH$9TYP WHEN 0 THEN CUST.WWMLNM ELSE CONS.PCMLNM END AS  MailingName, 
			WUSR.WAEMAL AS UserName,
			INID.INDSC1 AS Installation,
			INID.IN$9APFL AS ApplicationUseFlag,
			ROWNUMBER() OVER(ORDER BY MH$9APFL) AS RNUM
		FROM [SCDATA].FQ67105H ANNH
		  INNER JOIN [SCDATA].FQ670001 INID 
			  ON INID.IN$9INID =  ANNH.MH$9INID 	  
		  INNER JOIN [SCDATA].FQ67101 WUSR 
			  ON ANNH.MH$9WAN8 = WUSR.WA$9WAN8 
		  LEFT OUTER JOIN [SCDATA].F0111 CUST
			  ON CUST.WWAN8 = ANNH.MH$9AN8 AND 
			  CUST.WWIDLN = ANNH.MHIDLN  AND
			  ANNH.MH$9TYP = 0 /*Customer Only*/
		  LEFT OUTER JOIN [SCDATA].FQ67303 CONS
			  ON ANNH.MH$9AN8 = CONS.PC$9AN8 AND 
			  ANNH.MHIDLN = CONS.PCIDLN AND		  
			  ANNH.MH$9TYP = 1 /*Consumer Only*/      
		  WHERE 
			  MH$9NID = AnnouncementID AND
			  MH$9APFL = AnnouncementType AND
			  (FilterTermTemp = '*' OR 
			  UPPER(TRIM(WUSR.WAEMAL)) LIKE '%' || FilterTermTemp || '%' 
			  OR UPPER(TRIM(CUST.WWMLNM)) LIKE '%' || FilterTermTemp || '%' 
			  OR UPPER(TRIM(CONS.PCMLNM)) LIKE '%' ||  FilterTermTemp || '%') AND
			  (MH$9A1ST = 'R' OR MH$9A1ST = 'RB' OR MH$9A1ST = 'D')
			ORDER BY MH$9MDT DESC
),
CTE2 AS (
    SELECT COUNT(1) AS TotalRowCount 
    FROM CTE1   
)
SELECT
	        AnnouncementID,
		    AnnouncementType,
			WebAccountID,
			InstallationID,
			AddressNumber, 
			ContactId, 
			AcceptanceDate,
			MailingName, 
			UserName,
			Installation,
			ApplicationUseFlag,
			TotalRowCount
FROM CTE1,CTE2
WHERE ((PageIndex = 0 OR PageSize = 0) OR (RNUM BETWEEN (PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize))
FOR FETCH ONLY;
SET FilterTermTemp = UPPER(RTRIM(LTRIM(FilterTerm)));
OPEN ResultData1;
END ;
-- #desc					Reads BranchPlant information
-- #bl_class				Premier.Common.BranchPlantInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param BranchPlant		BranchPlant
-- #param PhoneType			PhoneType

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetBranchPlantInfo
(
	IN BranchPlant		GRAPHIC(12) CCSID 13488,
	IN PhoneType		GRAPHIC(4) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetBranchPlantInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			A.MCCO	 AS Company,
			P.BILCNF AS AllowPickup,
			C.WWMLNM AS MailingName,
			D.ALCTY1 AS City,
			D.ALADDS AS State,
			D.ALADDZ AS ZipCode,
			D.ALCTR  AS Country,
			D.ALADD1 AS AddressLine1,
			D.ALADD2 AS AddressLine2,
			''		 AS Area,
			''		 AS PhoneNumber
		FROM	
			[SCDATA].F0006 A				/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 B
				ON A.MCMCU = B.CIMCU
			INNER JOIN [SCDATA].FQ679910 P ON	/*AllowPickup*/
			A.MCMCU = P.BIMCU
			LEFT OUTER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = A.MCAN8
				AND C.WWIDLN = 0
			LEFT OUTER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (COALESCE(B.CIAN8,A.MCAN8), CurrentJulianDate)) D	/*Address*/
				ON D.ALAN8 = A.MCAN8
		WHERE A.MCMCU = BranchPlant
		FOR FETCH ONLY; 

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			A.MCCO	 AS Company,
			B.BILCNF AS AllowPickup,
			C.WWMLNM AS MailingName,
			D.ALCTY1 AS City,
			D.ALADDS AS State,
			D.ALADDZ AS ZipCode,
			D.ALCTR  AS Country,
			D.ALADD1 AS AddressLine1,
			D.ALADD2 AS AddressLine2,
			E.WPAR1	 AS Area,
			E.WPPH1	 AS PhoneNumber
		FROM	
			[SCDATA].F0006 A				/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 F
				ON A.MCMCU = F.CIMCU
			INNER JOIN [SCDATA].FQ679910 B ON	/*AllowPickup*/
			A.MCMCU = B.BIMCU
			LEFT OUTER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = A.MCAN8
				AND C.WWIDLN = 0
			LEFT OUTER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (COALESCE(F.CIAN8, A.MCAN8), CurrentJulianDate)) D	/*Address*/
				ON D.ALAN8 = A.MCAN8
			LEFT OUTER JOIN (
				SELECT  WPAR1,WPPH1,WPAN8,WPIDLN  
				FROM  [SCDATA].F0115
					INNER JOIN [SCDATA].F0006 
						ON  WPAN8 = MCAN8      
				WHERE	WPPHTP = PhoneType 
						AND WPIDLN = 0
						AND MCMCU = BranchPlant
				FETCH FIRST 1 ROWS ONLY /* Get only First Record by sequence number*/) AS  E /*Phone*/
				ON A.MCAN8 = E.WPAN8
		WHERE A.MCMCU = BranchPlant
		FOR FETCH ONLY; 

	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	IF (PhoneType = '*') THEN
		OPEN TEMP_CURSOR1;
	ELSE
		OPEN TEMP_CURSOR2;
	END IF;
END ;
-- #desc					Reads Branch Plants by Store
-- #bl_class				Premier.Common.BranchPlantInfoList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			Store Id
-- #param PhoneType			Phone Type Setting
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetBranchPlantInfoList
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN PhoneType		GRAPHIC(4) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetBranchPlantInfoList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	-- Dynamic
	DECLARE SQL_DYNAMIC VARGRAPHIC(10000) CCSID 13488;
	DECLARE JOIN_DYNAMIC VARGRAPHIC(100) CCSID 13488;
	DECLARE COLUMNS_DYNAMIC VARGRAPHIC(60) CCSID 13488;
	
	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC VARGRAPHIC(8000) CCSID 13488;
	
	/*Paging */ 
	DECLARE RowStart INT;
	DECLARE RowEnd INT;

	IF EXISTS (SELECT 1 FROM QSYS2.SYSTABLES WHERE TABLE_NAME = 'F0119' AND TABLE_SCHEMA = '[SCDATA]') THEN
		SET COLUMNS_DYNAMIC = N' F.PXNLATT AS Latitude, F.PXNLONG AS Longitude, ';
		SET JOIN_DYNAMIC = N' LEFT OUTER JOIN [SCDATA].F0119 F ON F.PXAN8 = A.MCAN8 ';
	ELSE
		SET COLUMNS_DYNAMIC = N' 0 AS Latitude, 0 AS Longitude, ';
		SET JOIN_DYNAMIC = N' ';
	END IF;

	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;
	
		SET SQL_DYNAMIC =
		'WITH CTE AS (
			SELECT
				A.MCMCU		AS BranchPlant,
				COALESCE(G.CIAN8, A.MCAN8)		AS AddressNumber,
				A.MCCO		AS Company,
				B.BILCNF	AS AllowPickup,
				C.WWMLNM	AS MailingName,
				D.ALADD1	AS AddressLine1,
				D.ALADD2	AS AddressLine2,
				D.ALCTY1	AS City,
				D.ALADDS	AS State,
				D.ALADDZ	AS ZipCode,
				D.ALCTR		AS Country,
				' || COLUMNS_DYNAMIC || '
				ROW_NUMBER() OVER(ORDER BY A.MCMCU) RNUM
			FROM	
				[SCDATA].F0006 A			/*BranchPlant*/
			LEFT JOIN [SCDATA].F41001 G
				ON A.MCMCU = G.CIMCU
			INNER JOIN [SCDATA].FQ679910 B /*AllowPickup*/
				ON B.BI$9INID = ?
				AND B.BIMCU = A.MCMCU
			INNER JOIN [SCDATA].F0111 C	/*Contact*/
				ON C.WWAN8 = COALESCE(G.CIAN8, A.MCAN8)
				AND C.WWIDLN = 0
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.MCAN8, '|| CurrentJulianDate ||')) D	/*Address*/
				ON D.ALAN8 = A.MCAN8
			' || JOIN_DYNAMIC || ' 			/* Address Book Geo Code */
		)
		SELECT
			A.BranchPlant,
			A.AddressNumber,
			A.Company,
			A.MailingName,
			A.AddressLine1,
			A.AddressLine2,
			A.City,
			A.State,
			A.ZipCode,
			A.Country,
			A.AllowPickup,
			E.WPAR1		AS Area,
			E.WPPH1		AS PhoneNumber,
			A.Latitude,
			A.Longitude,
			(SELECT COUNT(1) FROM CTE) TotalRowCount
		FROM CTE A
		LEFT OUTER JOIN LATERAL (
				SELECT  WPAN8, WPAR1, WPPH1 
				FROM  [SCDATA].F0115
				WHERE 
					WPAN8 = A.AddressNumber
					AND WPIDLN = 0
					AND WPPHTP = ?
				FETCH FIRST 1 ROWS ONLY /* Get only First Record by sequence number*/
		) AS  E /*Phone*/
			ON E.WPAN8 = A.AddressNumber
		WHERE ((? = 0 OR ? = 0) OR (A.RNUM BETWEEN ? AND ?))
		FOR FETCH ONLY ';

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;

		OPEN TEMP_CURSOR1 USING StoreId, PhoneType, PageIndex, PageSize, RowStart, RowEnd;
	END;
END ;
-- #desc						Get Branch Plants 
-- #bl_class					Premier.Common.BranchPlantList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param BranchPlant			Branch Plant (MCU)
-- #param Description			Description

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetBranchPlantList
(
	IN InstallationID varchar(3),
	IN BranchPlant	varchar(12),
	IN Description	varchar(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetBranchPlantList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			A.MCMCU AS BranchPlant, 
			A.MCDL01 AS Description		
		FROM 
			[SCDATA].F0006 A
		WHERE 		
			(BranchPlant = '*' OR UPPER(RTRIM(A.MCMCU)) LIKE '%' || UPPER(RTRIM(BranchPlant)) || '%') 
			AND
			(Description = '*' OR UPPER(LTRIM(RTRIM(A.MCDL01))) LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%')
		ORDER BY 
			A.MCMCU
		FOR FETCH ONLY;
	
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			A.MCMCU AS BranchPlant, 
			A.MCDL01 AS Description		
		FROM 
			[SCDATA].F0006 A
			INNER JOIN [SCDATA].FQ679910 B ON
			A.MCMCU = B.BIMCU
		WHERE 
			-- Installation ID filter	
			B.BI$9INID = InstallationID AND
			(BranchPlant = '*' OR UPPER(RTRIM(A.MCMCU)) LIKE '%' || UPPER(RTRIM(BranchPlant)) || '%') AND 
			(Description = '*' OR UPPER(LTRIM(RTRIM(A.MCDL01))) LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%')
		ORDER BY 
			A.MCMCU
		FOR FETCH ONLY;
					
	IF ( TRIM(InstallationID) = '*')THEN		
		OPEN TEMP_CURSOR1;	 
	ELSE
		OPEN TEMP_CURSOR2;
	END IF;
	 	 
END ;
-- #desc						Get Branch Plants Not Related
-- #bl_class					Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param BranchPlant			Branch Plant
-- #param Description			Description

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetBranchPlantListNotRel
(
	IN InstallationID varchar(3),
	IN BranchPlant	varchar(12),
	IN Description	varchar(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetBranchPlantListNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT
			A.MCMCU BranchPlant, 
			A.MCDL01 Description,
			'N' AllowPickup
		FROM
			[SCDATA].F0006 A			
		WHERE 
			-- Installation ID filter				
			A.MCMCU Not in (SELECT B.BIMCU FROM [SCDATA].FQ679910 AS B WHERE B.BI$9INID = InstallationID) AND
			(BranchPlant = '*' OR UPPER(RTRIM(A.MCMCU)) LIKE '%' || UPPER(RTRIM(BranchPlant)) || '%') AND
			(Description = '*' OR UPPER(RTRIM(A.MCDL01)) LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%')
		ORDER BY
			A.MCMCU ASC
		FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Get Branch Plants Related
-- #bl_class					Premier.Common.BranchPlantByStoreList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetBranchPlantListRelated
(
	IN	InstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetBranchPlantListRelated 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT
			A.MCMCU BranchPlant, 
			A.MCDL01 Description,
			B.BILCNF AllowPickup
		FROM
			[SCDATA].F0006 A
			INNER JOIN [SCDATA].FQ679910 B ON
			A.MCMCU = B.BIMCU
		WHERE 
			-- Installation ID filter	
			B.BI$9INID = InstallationID
		ORDER BY
			A.MCMCU ASC
		FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
END
			
 ;
-- #desc						Get Companies By Installation List
-- #bl_class					Premier.Common.CompanyList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCompaniesByInstList
(
	IN	InstallationID GRAPHIC(3) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCompaniesByInstList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE CompanyConstant		VARGRAPHIC(1) CCSID 13488;	
	DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488;

	--RGM this call change the output installation back up before send it. 	
	SET ConstantInstallation = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT 
				CCCO AS CompanyID, 
				CCNAME AS Description1, 
				CCCRCD	AS CurrencyCode,
				(CASE WHEN CICO IS NULL THEN 'N' ELSE 'Y' END) AS IsRelated  
			FROM 
				[SCDATA].F0010
			LEFT OUTER JOIN [SCDATA].FQ679912
				ON CICO = CCCO 
				AND CI$9INID = ConstantInstallation
			WHERE 
				CCCO <> '00000'
			FOR FETCH ONLY;
		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc					Get Company Info
-- #bl_class				Premier.Common.CompanyInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CompanyID			Company ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCompanyInfo
(
	IN CompanyID VARCHAR(5)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCompanyInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			CCCO	AS CompanyID, 
			CCNAME	AS Description1,
			CCCRCD	AS CurrencyCode,
			' '		AS IsRelated  
		FROM 
			[SCDATA].F0010
		WHERE
			CCCO = CompanyID		
		FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
	
END ;
-- #desc					Get Company List
-- #bl_class				Premier.Common.CompanyList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCompanyList
(	
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCompanyList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			CCCO	AS CompanyID, 
			CCNAME	AS Description1, 
			CCCRCD	AS CurrencyCode,
			' '		AS IsRelated  
		FROM 
			[SCDATA].F0010		
		FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
	
END ;
-- #desc							Get constant by installation 
-- #bl_class						Premier.Common.Constant.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetConstant
(	
	IN Constant		varchar(10),
	IN InstallationID varchar(3)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetConstant 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT  
		A.CN$9VAL  ConstantValue,
		A.CN$9CNST  Constant,
		A.CN$9INID InstallationID,
		B.CN$9SOF  SystemOnlyFlag
	FROM  
		[SCDATA].FQ670004 A
		INNER JOIN [SCDATA].FQ670003 B 
		ON A.CN$9CNST = B.CN$9CNST
	WHERE 
		A.CN$9INID = InstallationID AND 
		UPPER(RTRIM(A.CN$9CNST)) = UPPER(RTRIM(Constant))
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Reads contant header
-- #bl_class				Premier.Common.ConstantHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ConstantID		Constant ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetConstantHeader
(
	ConstantID		varchar(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetConstantHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

		SELECT  
			CN$9CNST ConstantID,
			CNSYS SubSystemCode,  
			CNDTA1 Description1,
			CNDTA2 Description2,
			CNSY ProductCode,
			CNRT UserDefinedCode,
			CN$9SOF SystemOnlyFlag
			-- Constants Master 	
		 FROM  
			[SCDATA].FQ670003 CNST
		 WHERE 
			-- Constant Id filter	
  			UPPER(RTRIM(CNST.CN$9CNST)) = UPPER(RTRIM(ConstantID))
  		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Get constant header list
-- #bl_class					Premier.Common.ConstantHeaderList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Constant				Constant ID
-- #param Description1			Description
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetConstantHeaderList
(	
	IN ConstantID	VARGRAPHIC(10) CCSID 13488,
	IN Description1 VARGRAPHIC(256) CCSID 13488,
	IN PageIndex	INT,
    IN PageSize		INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetConstantHeaderList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE ROWSTART INT DEFAULT 0;
	DECLARE ROWEND INT DEFAULT 0;
	
	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT 
				CN$9CNST	AS ConstantID,
				CNDTA1		AS Description1,
				CNDTA2		AS Description2,
				CNSY		AS ProductCode,
				CNRT		AS UserDefinedCode,
				CN$9SOF		AS SystemOnlyFlag,
				ROW_NUMBER() OVER (ORDER BY CN$9CNST) AS RNUM
			FROM 
				[SCDATA].FQ670003
		)
		SELECT 
			A.ConstantID,
			A.Description1,
			A.Description2,
			A.ProductCode,
			A.UserDefinedCode,
			A.SystemOnlyFlag,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT 
				CN$9CNST	AS ConstantID,
				CNDTA1		AS Description1,
				CNDTA2		AS Description2,
				CNSY		AS ProductCode,
				CNRT		AS UserDefinedCode,
				CN$9SOF		AS SystemOnlyFlag,
				ROW_NUMBER() OVER (ORDER BY CN$9CNST) AS RNUM
			FROM 
				[SCDATA].FQ670003 
			WHERE		
				(ConstantID = '*' OR UPPER(CN$9CNST) LIKE '%' || ConstantID || '%') 
				AND
				(Description1 = '*' OR UPPER(CNDTA1) LIKE '%' || Description1 || '%')
		)
		SELECT 
			A.ConstantID,
			A.Description1,
			A.Description2,
			A.ProductCode,
			A.UserDefinedCode,
			A.SystemOnlyFlag,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		IF (ConstantID = '*' AND Description1 = '*') THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;
	
	END;
END;

-- #desc							Get constant by installation 
-- #bl_class						Premier.Common.ConstantInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetConstantInfo
(
	IN Constant		varchar(10),
	IN InstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetConstantInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 			
	
	Declare ConstantValue VARGRAPHIC(256) CCSID 13488 DEFAULT NULL; 
	BEGIN		
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		
			SELECT  
				ConstantValue as  ConstantValue,
				InstallationID as InstallationID,
				Constant as Constant 
			FROM SYSIBM.SYSDUMMY1
			FOR READ ONLY; 
				
		
		--SET ConstantValue = null;
		
		--First try to get constant by installation defined value
		SELECT  
			CN$9VAL INTO ConstantValue
		FROM  
			[SCDATA].FQ670004 A
		WHERE 
			A.CN$9INID = InstallationID AND 
			A.CN$9CNST = Constant;

		--select ConstantValue as value
		
		--Check value, if null then get base value
		IF (ConstantValue IS NULL)THEN
			SET InstallationID = '***';	
			
			SELECT  
				CN$9VAL INTO ConstantValue 
			FROM  
				[SCDATA].FQ670004 A
			WHERE 
				A.CN$9INID = InstallationID AND 
				A.CN$9CNST = Constant;
		END IF;
			
		--Return
		OPEN TEMP_CURSOR1;
	END;
END
			
 ;
-- #desc						Get constant by value
-- #bl_class					Premier.Common.ConstantInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Constant				Constant ID
-- #param ConstantValue			Constant Value

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetConstantInfobyValue
(
	IN Constant			VARCHAR(10),
	IN ConstantValue	VARGRAPHIC(256) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetConstantInfobyValue 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 			
	
	DECLARE InstallationID		VARCHAR(3)		DEFAULT NULL;
	DECLARE ConstantValueTemp	VARGRAPHIC(256) CCSID 13488	DEFAULT NULL; 

	BEGIN		
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT  
				ConstantValueTemp	AS	ConstantValue,
				InstallationID	AS	InstallationID,
				Constant		AS	Constant 
			FROM SYSIBM.SYSDUMMY1
			FOR READ ONLY; 
		
		SET ConstantValueTemp = REPLACE(REPLACE(ConstantValue,'http://',''), 'https://','');
		
		--Get installationID constant by value
		SELECT  
			A.CN$9INID INTO InstallationID
		FROM  
			[SCDATA].FQ670004 A
		WHERE 
			REPLACE(REPLACE(A.CN$9VAL,'http://',''), 'https://','') = ConstantValueTemp AND
			A.CN$9CNST = Constant
		FETCH FIRST 1 ROWS ONLY;

		--Return
		OPEN TEMP_CURSOR1;
	END;
END
			
   ;
-- #desc                    Get Constant List.
-- #bl_class                Premier.Common.ConstantList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Constant         Constant ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetConstantList
(
	IN Constant	varchar(10)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetConstantList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT  
			A.CN$9VAL  ConstantValue,
			A.CN$9CNST  Constant,
			A.CN$9INID InstallationID,
			B.CN$9SOF  SystemOnlyFlag
		FROM  
			[SCDATA].FQ670004 A
			INNER JOIN [SCDATA].FQ670003 B 
				ON A.CN$9CNST = B.CN$9CNST
		WHERE 
			UPPER(RTRIM(A.CN$9CNST)) = UPPER(RTRIM(Constant))
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Get currency header List
-- #bl_class					Premier.Common.CurrencyDetailList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CurrencyCode			Currency Code

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCurrencyDetailList
(
	IN CurrencyCode	VARCHAR(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCurrencyDetailList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		CICRCD	AS CurrencyCode,
		CILNID	AS SequenceID,
		CIAEXP	AS Amount,
		CIDL01	AS Description,
		CIBCF8	AS CoinBillFlag,
		CISPEOW AS IsSpeedCash,
		CIUSER	AS UserID,   
		CIPID	AS ProgramID,
		CIJOBN	AS WorkStationID,
		CIUPMJ	AS DateUpdated,
		CIUPMT	AS TimeLastUpdated  
	FROM 
		[SCDATA].FQ67012
	WHERE 
		CICRCD = CurrencyCode
	ORDER BY CIAEXP
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Get currency header
-- #bl_class					Premier.Common.CurrencyHeader.cs/CurrencyHeaderInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CurrencyCode			Currency Code

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCurrencyHeader
(
    IN CurrencyCode		varchar(3)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCurrencyHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		A.CICRCD		AS CurrencyCode,
		B.CVDL01		AS CurrencyDescription,
		A.CICC0			AS CurrencySymbol,
		A.CIRULENAME	AS RoundingRule
	FROM
		[SCDATA].FQ67011 A
	LEFT OUTER JOIN [SCDATA].F0013 B
		ON B.CVCRCD = A.CICRCD
	WHERE
		A.CICRCD = CurrencyCode
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;

	CALL [SCLIBRARY].CMM_GetCurrencyDetailList(CurrencyCode);
END
 ;
-- #desc					Get currency header List
-- #bl_class				Premier.Common.CurrencyHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCurrencyHeaderList
(
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCurrencyHeaderList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		A.CICRCD		AS CurrencyCode,
		B.CVDL01		AS CurrencyDescription,
		A.CICC0			AS CurrencySymbol,
		A.CIRULENAME	AS RoundingRule
	FROM 
		[SCDATA].FQ67011 A
	LEFT OUTER JOIN [SCDATA].F0013 B
		ON B.CVCRCD = A.CICRCD
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
 -- #desc							Get description for currency 
-- #bl_class						Premier.Common.GetCurrencyInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCurrencyInfo
(	
	IN CurrencyCode		varchar(3)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCurrencyInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	
	SELECT
		CVCRCD AS CurrencyCode,
		CVDL01 AS CurrencyDesc
	FROM [SCDATA].F0013
	WHERE  CVCRCD = CurrencyCode
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc				Get Currency List
-- #bl_class			Premier.Common.CurrencyList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetCurrencyList
(	
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetCurrencyList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		C.CVDL01 AS CurrencyDesc,
		C.CVCRCD AS CurrencyCode
	FROM
		[SCDATA].F0013 C
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetDocRestricListNotRel
(
    IN InstallationID	varchar(3),
    IN ConstantID		varchar(10),
	IN ProductCode		varchar(4),
	IN UserDefinedCode	varchar(2)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetDocRestricListNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
DECLARE	CODELENGTH INTEGER;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	
			InstallationID	AS InstallationID,
			ConstantID		AS ConstantID,
			A.DRSY			AS ProductCode,
			A.DRRT			AS UserDefinedCode,
			SUBSTRING (A.DRKY , 10 - CODELENGTH + 1 ,CODELENGTH) AS UserDefinedKey,
			A.DRDL01 		AS DescriptionUDC,
			A.DRDL02		AS DescriptionUDC2,
			'' AS UserReservedCode,
			0  AS UserReservedDate,
			0  AS UserReservedAmount,
			0  AS UserReservedNumber,
			'' AS UserReservedReference
	FROM	[SCCTL].F0005 A
	WHERE	A.DRSY = ProductCode
	AND		A.DRRT = UserDefinedCode
	
	AND	SUBSTRING(A.DRKY , 10 - CODELENGTH + 1 ,CODELENGTH) NOT IN (SELECT COALESCE(DRKY,'')
								FROM	 [SCDATA].FQ67008 DR
									WHERE DR$9INID = InstallationID
									AND DR$9CNST =	 ConstantID
									AND DRSY =	ProductCode
									AND DRRT =	UserDefinedCode)
	ORDER BY DRKY
	FOR FETCH ONLY;
	
	SET CODELENGTH = 0;
	SET CODELENGTH = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = ProductCode AND DTRT = UserDefinedCode);
		
	OPEN TEMP_CURSOR1;

END ;
-- #desc					Provides the constant values for the Manage the Document Restriction.
-- #bl_class				Premier.Common.DocRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 
-- #param LangPref			LangPref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetDocRestricListRelated  
(
    IN InstallationID	varchar(3),
    IN ConstantID		varchar(10),
	IN ProductCode		varchar(4),
	IN UserDefinedCode	varchar(2),
	IN LangPref			varchar(2)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetDocRestricListRelated 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE CodeLength  INTEGER;
      
/*Note: Join with table F0005 must be an outer join because Related Doc Restrictions list must display all values even when
 the UDC was deleted from F0005*/    
      
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	
			A.DR$9INID	AS InstallationID,
			A.DR$9CNST	AS ConstantID,
			A.DRSY		AS ProductCode,
			A.DRRT		AS UserDefinedCode,
			A.DRKY 		AS UserDefinedKey,
			COALESCE(C.DRDL01,B.DRDL01) AS DescriptionUDC,
			B.DRDL02	AS DescriptionUDC2,
			A.DRURCD AS UserReservedCode,
			A.DRURDT AS UserReservedDate,
			A.DRURAT AS UserReservedAmount,
			A.DRURAB AS UserReservedNumber,
			A.DRURRF AS UserReservedReference
	FROM	[SCDATA].FQ67008 A
	
	LEFT OUTER JOIN [SCCTL].F0005 B
		ON  B.DRRT = A.DRRT
		AND B.DRSY = A.DRSY
		AND SUBSTRING(B.DRKY, 10 - CodeLength + 1, CodeLength) = A.DRKY
	LEFT OUTER JOIN [SCCTL].F0005D C
        ON	C.DRSY = B.DRSY
        AND C.DRRT = B.DRRT
        AND C.DRKY = B.DRKY
        AND C.DRLNGP = LangPref
	WHERE	
		A.DR$9INID = InstallationID AND
		A.DR$9CNST = ConstantID AND
		A.DRSY = ProductCode AND
		A.DRRT = UserDefinedCode 
	ORDER BY A.DRKY
	FOR FETCH ONLY;
	
	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
		  WHERE DTSY = ProductCode AND DTRT = UserDefinedCode);
	
	OPEN TEMP_CURSOR1;	
END ;
-- #desc					Reads an Document Restriction information
-- #bl_class				Premier.Common.DocRestricInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param Installation		Installation Id
-- #param Constant			Constant Id
-- #param ProductCode		Product code
-- #param UserDefinedCode	User define code 
-- #param UserDefinedKey	User Defined Key
-- #param LangPref			Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetDocRestricRelatedInfo
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
    IN ConstantID		GRAPHIC(10) CCSID 13488,
	IN ProductCode		GRAPHIC(4) CCSID 13488,
	IN UserDefinedCode	GRAPHIC(2) CCSID 13488,
	IN UserDefinedKey	GRAPHIC(10) CCSID 13488,		
	IN LangPref			GRAPHIC(2) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetDocRestricRelatedInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CodeLength INTEGER;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT	
		A.DR$9INID					AS InstallationID,
		A.DR$9CNST					AS ConstantID,
		A.DRSY						AS ProductCode,
		A.DRRT						AS UserDefinedCode,
		A.DRKY 						AS UserDefinedKey,
		COALESCE(C.DRDL01,B.DRDL01)	AS DescriptionUDC,
		B.DRDL02					AS DescriptionUDC2,
		A.DRURCD					AS UserReservedCode,
		A.DRURDT					AS UserReservedDate,
		A.DRURAT					AS UserReservedAmount,
		A.DRURAB					AS UserReservedNumber,
		A.DRURRF					AS UserReservedReference
	FROM [SCDATA].FQ67008 A	
	LEFT OUTER JOIN [SCCTL].F0005 B
		ON  B.DRRT = A.DRRT
		AND B.DRSY = A.DRSY
		AND SUBSTRING(B.DRKY, 10 - CodeLength + 1, CodeLength) = A.DRKY
	LEFT OUTER JOIN [SCCTL].F0005D C
        ON	C.DRSY = B.DRSY
        AND C.DRRT = B.DRRT
        AND C.DRKY = B.DRKY
        AND C.DRLNGP = LangPref
	WHERE	
		A.DR$9INID = InstallationID AND
		A.DR$9CNST = ConstantID AND
		A.DRSY = ProductCode AND
		A.DRRT = UserDefinedCode AND
		A.DRKY = UserDefinedKey
	FOR FETCH ONLY;
	
	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004 WHERE DTSY = ProductCode AND DTRT = UserDefinedCode);

	OPEN TEMP_CURSOR1;
END  ;
-- #desc						Gets dry state list
-- #bl_class					Premier.Common.DryStateList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LangPref				LangPref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetDryStateList
(
	IN InstallationID	VARCHAR(3),
	IN DocumentType		VARCHAR(2),
	IN ItemNumber		NUMERIC(15,0),
	IN LangPref			VARCHAR(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetDryStateList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	
		DECLARE	CodeLength	INTEGER;
		DECLARE SalesReportingCode1 VARCHAR(3);

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT 	
				SC$9CLR || ';' || LTRIM(RTRIM(DRKY)) AS UserDefinedKey,
				[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','S',SCADDS,LangPref) AS DescriptionUDC
			FROM [SCDATA].FQ675520
			INNER JOIN [SCCTL].F0005	
				ON 	DRSY = '00' 
				AND	DRRT = 'S' 
			WHERE 
				SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) = SCADDS	
				AND SC$9CSR = CASE SC$9CSR 
						WHEN '1' THEN  
							COALESCE((SELECT	SC$9CSR 
									FROM	[SCDATA].FQ675522  
									WHERE  	SCADDS = DTADDS 
										AND DTDCT = DocumentType
										AND SCCTR = DTCTR),'0')
						ELSE 
							SC$9CSR 
						END
				AND ((LTRIM(SalesReportingCode1) <> '' 
						AND (SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) 
						IN (SELECT	
								DISTINCT LDADDS
							FROM [SCDATA].FQ675511  	A
							INNER JOIN [SCDATA].FQ679910    	B
								ON B.BIMCU = A.LDMCU
							WHERE	B.BI$9INID = InstallationID
								AND	A.LD$9SRP1 = SalesReportingCode1))) -- IF LICENSE EXISTS LOOKS FOR STATES WITH PERMISSION
					  OR
					 (LTRIM(SalesReportingCode1) = '') -- LICENSE DOESN'T EXISTS
					)
				FOR FETCH ONLY;
					
		-- Get Code Length
		SET CodeLength = 0;
		SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'S');
		
		SELECT	IMSRP1 INTO SalesReportingCode1
		FROM 	[SCDATA].F4101
		WHERE	IMITM = ItemNumber
		FETCH FIRST 1 ROW ONLY;
		
		OPEN TEMP_CURSOR1;
END ;
-- #desc						Read General Announcement Langs
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		Announcement ID
-- #param DesignStatus			DesignStatus

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGeneralAnnounceLangs
(
  IN AnnouncementID	NUMERIC(15,0),
  IN DesignStatus	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetGeneralAnnounceLangs 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
DECLARE ResultData1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		ML$9NID			AS AnnouncementID,
		ML$9DS			AS DesignStatus,
		MLLNGP			AS LangPref,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc( '01', 'LP', MLLNGP, '*') AS LanguageDescE1,
		ML$9MTT			AS Title,
		ML$9MSC			AS HtmlContent
	  FROM  
		[SCDATA].FQ67105L AS L
	  WHERE 
			ML$9NID = AnnouncementID AND
			ML$9DS = DesignStatus
	  ORDER BY L.ML$9NID, L.MLLNGP
	FOR FETCH ONLY;
	  OPEN ResultData1; 	
 END;
-- #desc						Get General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				CMM_GetGeneralAnnounceLangs
-- #db_references				N/A

-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGeneralAnnouncement
(
	IN AnnouncementID	    NUMERIC(15,0),
	IN DesignStatus		    NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 3 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetGeneralAnnouncement 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	    DECLARE ResultData1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT  
		
			MS$9NID AS AnnouncementID,
			MS$9DS AS DesignStatus,
			MS$9PRI AS Priority,
			MS$9MST AS AccessLevel,
			MSEFFF AS EffectiveDate,
			MSEFFT AS ExpirationDate,
			MS$9MTT AS Title,
			MS$9MSC AS HtmlContent,
			MS$9MLK AS Url,
			MSURCD AS UserReservedCode,
			MSURDT AS UserReservedDate,
			MSURAT AS UserReservedAmount,
			MSURAB AS UserReservedNumber,
			MSURRF AS UserReservedReference,
			MSUSER AS UserID,
			MSPID AS ProgramID,
			MSJOBN AS WorkStationID,
			MSUPMJ AS DateUpdated,
			MSTDAY AS TimeOfDay
		
		FROM  
			[SCDATA].FQ67105
		WHERE  
			MS$9NID  =  AnnouncementID
			AND ((DesignStatus IS NULL) OR MS$9DS = DesignStatus)
		FOR FETCH ONLY;

		OPEN ResultData1;

	CALL [SCLIBRARY].CMM_GetGeneralAnnounceLangs( AnnouncementID, DesignStatus);
	CALL [SCLIBRARY].CMM_GetAnnounceInstallations( AnnouncementID, 'AGen');
END;



-- #desc							Get the General Announcements Assignments
-- #bl_class						Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param AnnouncementID			Announcement ID	
--	#param AssignmentType			Assignment Type		Any = 0 |  AddressBookCategoryCode = 1 | ConsumerCategoryCode = 2 | CustomerNumber = 3 | ConsumerNumber = 4 | WebAccount = 5
--	#param FilterTerm				Filter Term
--	#param PageIndex				PageIndex		
--  #param PageSize					PageSize		
--  #param TotalRowCount			TotalRowCount

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGnrlAnnounceAssignLst
(
	IN AnnouncementID			NUMERIC(15,0),
	IN AssignmentType			NUMERIC(15,0),
	IN FilterTerm				VARGRAPHIC(15) CCSID 13488,
	IN PageIndex				NUMERIC(15,0),
	IN PageSize					NUMERIC(15,0),
	INOUT TotalRowCount			INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetGnrlAnnounceAssignLst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBL
	(
		AnnouncementID		NUMERIC(15,0),
		UniqueKeyID			NUMERIC(15,0),
		AssignmentType		NUMERIC(15,0),
		AssignmentValue		VARCHAR(40),
		Description			VARGRAPHIC(256) CCSID 13488,
		CategoryCode		VARCHAR(10)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	BEGIN

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT B.AnnouncementID, B.UniqueKeyID, B.AssignmentType, B.AssignmentValue, B.Description, B.CategoryCode  FROM (
			SELECT 
				A.AnnouncementID,
				A.UniqueKeyID,
				A.AssignmentType,
				A.AssignmentValue,
				A.Description,
				A.CategoryCode,
				ROW_NUMBER() OVER() AS nID
			FROM SESSION.TBL A) AS B
			WHERE ((PageIndex = 0 OR PageSize = 0) OR (B.nID BETWEEN (PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize))
			FOR FETCH ONLY;

		IF( AssignmentType = 1 OR AssignmentType IS NULL )THEN /* CUSTOMER CATEGORY CODE */
		
     INSERT INTO SESSION.TBL( AnnouncementID, UniqueKeyID, AssignmentType, AssignmentValue, Description, CategoryCode )   
         SELECT 
              A.AnnouncementID,
              A.UniqueKeyID,
              A.AssignmentType,
              A.AssignmentValue,
              A.Description, 
              A.CategoryCode
        FROM (
            SELECT 
              AA.MA$9NID           AS AnnouncementID,
              AA.MAUKID            AS UniqueKeyID,
              AA.MA$9ATYP          AS AssignmentType,
              AA.MAKY              AS AssignmentValue,
              [SCLIBRARY].CMM_GetUserDefinedCodeFnc('01', SUBSTRING(AA.MADTAI,3,LENGTH(AA.MADTAI)-2),AA.MAKY,'*') AS Description,
              SUBSTRING(AA.MADTAI,3,LENGTH(AA.MADTAI)-2) AS CategoryCode
             FROM [SCDATA].FQ67105A AA    
             WHERE  AA.MA$9NID =  AnnouncementID
                    AND AA.MA$9ATYP = 1
            ) A           
         WHERE (FilterTerm = '*' OR A.AssignmentValue LIKE '%' ||  FilterTerm || '%' OR A.Description LIKE '%' ||  FilterTerm || '%');
		END IF;
		
		IF(AssignmentType = 2 OR AssignmentType IS NULL)THEN /* CONSUMER CATEGORY CODE */
		INSERT INTO SESSION.TBL( AnnouncementID, UniqueKeyID, AssignmentType, AssignmentValue, Description, CategoryCode)		
            SELECT 
                A.AnnouncementID,
                A.UniqueKeyID,
                A.AssignmentType,
                A.AssignmentValue,
                A.Description, 
                A.CategoryCode
            FROM (
                   SELECT 
                        AA.MA$9NID           AS AnnouncementID,
                        AA.MAUKID            AS UniqueKeyID,
                        AA.MA$9ATYP          AS AssignmentType,
                        AA.MAKY              AS AssignmentValue,
                        [SCLIBRARY].CMM_GetUserDefinedCodeFnc('59',SUBSTRING(AA.MADTAI,5,LENGTH(AA.MADTAI)-4),AA.MAKY,'*') AS Description, 
                        SUBSTRING(AA.MADTAI,5,LENGTH(AA.MADTAI)-4) AS CategoryCode
                        FROM [SCDATA].FQ67105A AA    
                   WHERE  AA.MA$9NID = AnnouncementID
              AND AA.MA$9ATYP = 2) A
             WHERE (FilterTerm = '*' OR A.AssignmentValue LIKE '%' ||  FilterTerm || '%' OR A.Description LIKE '%' ||  FilterTerm || '%');

		END IF;
		
		IF( AssignmentType = 3 OR AssignmentType IS NULL )THEN /* CUSTOMER NUMBER */
			INSERT INTO SESSION.TBL( AnnouncementID, UniqueKeyID, AssignmentType, AssignmentValue, Description, CategoryCode )
				SELECT 
					AA.MA$9NID							AS AnnouncementID,
					AA.MAUKID							AS UniqueKeyID,
					AA.MA$9ATYP							AS AssignmentType,
					CAST(AA.MA$9AN8	AS NUMERIC(15,0))	AS AssignmentValue,
					CUST.ABALPH							AS Description,
					''									AS CategoryCode
				FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */
				LEFT OUTER JOIN [SCDATA].F0101 CUST			/* CUSTOMER TABLE */
				ON	CUST.ABAN8 = AA.MA$9AN8			   		
				WHERE
					AA.MA$9NID = AnnouncementID AND
					( FilterTerm = '*' OR UPPER(RTRIM(LTRIM(AA.MA$9AN8))) LIKE '%' ||  UPPER(RTRIM(LTRIM(FilterTerm))) || '%' 
										OR UPPER(RTRIM(LTRIM(CUST.ABALPH))) LIKE '%' ||  UPPER(RTRIM(LTRIM(FilterTerm))) || '%') AND
					AA.MA$9ATYP = 3;
		END IF;
		
		IF( AssignmentType = 4 OR AssignmentType IS NULL )THEN /* CONSUMER NUMBER */
			INSERT INTO SESSION.TBL( AnnouncementID, UniqueKeyID, AssignmentType, AssignmentValue, Description, CategoryCode )
				SELECT 
					AA.MA$9NID							AS AnnouncementID,
					AA.MAUKID							AS UniqueKeyID,
					AA.MA$9ATYP							AS AssignmentType,			
					CAST(AA.MA$9AN8 AS NUMERIC(15,0))	AS AssignmentValue,
					CONS.PRALPH							AS Description,
					''									AS CategoryCode
				FROM [SCDATA].FQ67105A AA						/* ANNOUNCEMENT ASSIGNMENTS */
				LEFT OUTER JOIN [SCDATA].FQ670302 CONS		/* CONSUMER TABLE */
				ON	CONS.PR$9AN8 = AA.MA$9AN8			   		
				WHERE
					AA.MA$9NID = AnnouncementID AND
					( FilterTerm = '*' OR UPPER(RTRIM(LTRIM(AA.MA$9AN8))) LIKE '%' ||  UPPER(RTRIM(LTRIM(FilterTerm))) || '%' 
										OR UPPER(RTRIM(LTRIM(CONS.PRALPH))) LIKE '%' ||  UPPER(RTRIM(LTRIM(FilterTerm))) || '%') AND
					AA.MA$9ATYP = 4;
		END IF;
		
		IF(AssignmentType = 5 OR AssignmentType IS NULL)THEN  /* WEB ACCOUNT ID */
			INSERT INTO SESSION.TBL( AnnouncementID, UniqueKeyID, AssignmentType, AssignmentValue, Description, CategoryCode )
				SELECT 
					AA.MA$9NID						AS AnnouncementID,
					AA.MAUKID						AS UniqueKeyID,
					AA.MA$9ATYP						AS AssignmentType,
					WA.WA$9AN8 || '-' || WA.WAIDLN	AS AssignmentValue,
					WA.WAEMAL						AS Description,
					''								AS CategoryCode
				FROM [SCDATA].FQ67105A AA							/* ANNOUNCEMENT ASSIGNMENTS */
				LEFT OUTER JOIN [SCDATA].FQ67101 WA				/* WEB ACCOUNT TABLE */
				ON	WA.WA$9WAN8 = AA.MA$9WAN8			   		
				WHERE
					AA.MA$9NID = AnnouncementID AND
					( FilterTerm = '*' OR UPPER(RTRIM(LTRIM(WA.WA$9AN8 || '-' || WA.WAIDLN))) LIKE '%' ||  UPPER(RTRIM(LTRIM(FilterTerm))) || '%' 
										OR UPPER(RTRIM(LTRIM(WA.WAEMAL))) LIKE '%' ||  UPPER(RTRIM(LTRIM(FilterTerm))) || '%') AND
					AA.MA$9ATYP = 5;
		END IF;

		/* Obtain the total count of the result */
		SET TotalRowCount = (SELECT COUNT(*) FROM SESSION.TBL);

		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc							Get the General Announcements Assignments
-- #bl_class						Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param AnnouncementID			Announcement ID	
--	#param AssignmentType			Assignment Type		Any = 0 |  AddressBookCategoryCode = 1 | ConsumerCategoryCode = 2 | CustomerNumber = 3 | ConsumerNumber = 4 | WebAccount = 5

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGnrlAnnounceAssigns
(
	IN AnnouncementID	DECIMAL(8,0),
	IN AssignmentType   DECIMAL(31,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetGnrlAnnounceAssigns 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE INSTALLATIONID GRAPHIC(3) CCSID 13488;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT MA$9NID	AS AnnouncementID,
			MAUKID		AS UniqueKeyID,
			MA$9ATYP	AS AssignmentType,
			MA$9WAN8	AS WebAccountID,
			WA.WA$9INID	AS InstallationID,
			MA$9AN8		AS AddressNumber,
			MA$9TYP		AS AddressBookType,
			MADTAI		AS DataItem,
			MAKY		AS UserDefinedKey,
			MAURCD		AS UserReservedCode,
			MAURDT		AS UserReservedDate,
			MAURAT		AS UserReservedAmount,
			MAURAB		AS UserReservedNumber,
			MAURRF		AS UserReservedReference,
			MAUSER		AS UserID,
			MAPID		AS ProgramID,
			MAJOBN		AS WorkStationID,
			MAUPMJ		AS DateUpdated,
			MATDAY		AS TimeOfDay
		FROM 
			[SCDATA].FQ67105A AA
			LEFT OUTER JOIN 
				[SCDATA].FQ67101 WA
				ON WA.WA$9WAN8 = AA.MA$9WAN8 AND AA.MA$9ATYP = 5 /* Web Account */
		WHERE
			AA.MA$9NID = AnnouncementID AND
			(AssignmentType IS NULL OR AA.MA$9ATYP = AssignmentType)
		FOR FETCH ONLY;

	SET INSTALLATIONID = '***';

OPEN TEMP_CURSOR1;
END;		
-- #desc							Get the General Announcements List
-- #bl_class						Premier.Common.GeneralAnnouncementAssignList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

--	#param DesignStatus				Design Status		0 = Published | 1 = Draft | 2 = Any
--	#param InstallationID			Installation ID
--	#param FilterTerm				Filter Term
--	#param Relation					Relation			Any = 0 | Related = 1 | NotRelated = 2 
--	#param AnnouncementType			Announcement Type	AGen | ATag
--	#param PageIndex				PageIndex		
--  #param PageSize					PageSize

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetGnrlAnnouncementList
(
	IN DesignStatus		NUMERIC(15,0),
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN FilterTerm		VARGRAPHIC(100) CCSID 13488,
	IN Relation			INT,
	IN AnnouncementType	GRAPHIC(4) CCSID 13488,
	IN PageIndex		INT,
	IN PageSize			INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetGnrlAnnouncementList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN
		/* Relationship		Related = 1 */
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID		AS	AnnouncementID, 
				ANNOUNCE.MS$9DS, 
				ANNOUNCE.MSEFFF			AS	EffectiveDate,
				ANNOUNCE.MSEFFT			AS  ExpirationDate,
				ANNOUNCE.MSUPMJ			AS	PublishedSince,
				ANNOUNCE.MS$9MTT		AS	Title, 
				CASE 
					WHEN PUBLISH.MS$9DS IS NOT NULL AND DRAFT.MS$9DS IS NOT NULL THEN 1 ELSE 0 
				END						AS	DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = AnnouncementType) = 0 THEN 3 /* Shared */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = InstallationID AND MI$9APFL = AnnouncementType) > 0 THEN 1 /* Related */
					ELSE 2 /* Restricted */
				END AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
				LEFT OUTER JOIN [SCDATA].FQ67105 PUBLISH 
					ON PUBLISH.MS$9NID = ANNOUNCE.MS$9NID 
					AND PUBLISH.MS$9DS = 0
				LEFT OUTER JOIN [SCDATA].FQ67105 DRAFT 
					ON DRAFT.MS$9NID = ANNOUNCE.MS$9NID 
					AND DRAFT.MS$9DS = 1
			WHERE
				( FilterTerm = '*' OR UPPER(ANNOUNCE.MS$9MTT) LIKE '%' ||  FilterTerm || '%')
		), STS AS (
			SELECT	
				A.AnnouncementID, 
				A.MS$9DS	AS DesignStatus, 
				A.EffectiveDate,
				A.ExpirationDate,
				A.PublishedSince,
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM
			FROM CTE A
			WHERE ((A.MS$9DS = DesignStatus) OR (DesignStatus = 2 AND (A.MS$9DS = 1 OR (A.MS$9DS = 0 AND A.DraftAndPublished = 0))))
				AND A.RelationShip IN (1, 3)
		)
		SELECT 
			A.AnnouncementID, 
			A.DesignStatus, 
			A.EffectiveDate, 
			A.ExpirationDate, 
			A.PublishedSince, 
			A.Title, 
			A.DraftAndPublished, 
			A.RelationShip,
			(SELECT COUNT(1) FROM STS)	AS TotalRowCount
		FROM STS A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Relationship		NotRelated = 2 */
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID		AS	AnnouncementID, 
				ANNOUNCE.MS$9DS, 
				ANNOUNCE.MSEFFF			AS	EffectiveDate,
				ANNOUNCE.MSEFFT			AS  ExpirationDate,
				ANNOUNCE.MSUPMJ			AS	PublishedSince,
				ANNOUNCE.MS$9MTT		AS	Title, 
				CASE 
					WHEN PUBLISH.MS$9DS IS NOT NULL AND DRAFT.MS$9DS IS NOT NULL THEN 1 ELSE 0 
				END						AS	DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = AnnouncementType) = 0 THEN 3 /* Shared */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = InstallationID AND MI$9APFL = AnnouncementType) > 0 THEN 1 /* Related */
					ELSE 2 /* Restricted */
				END AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
				LEFT OUTER JOIN [SCDATA].FQ67105 PUBLISH 
					ON PUBLISH.MS$9NID = ANNOUNCE.MS$9NID 
					AND PUBLISH.MS$9DS = 0
				LEFT OUTER JOIN [SCDATA].FQ67105 DRAFT 
					ON DRAFT.MS$9NID = ANNOUNCE.MS$9NID 
					AND DRAFT.MS$9DS = 1
			WHERE
				( FilterTerm = '*' OR UPPER(ANNOUNCE.MS$9MTT) LIKE '%' ||  FilterTerm || '%')
		), STS AS (
			SELECT	
				A.AnnouncementID, 
				A.MS$9DS	AS DesignStatus, 
				A.EffectiveDate,
				A.ExpirationDate,
				A.PublishedSince,
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM
			FROM CTE A
			WHERE ((A.MS$9DS = DesignStatus) OR (DesignStatus = 2 AND (A.MS$9DS = 1 OR (A.MS$9DS = 0 AND A.DraftAndPublished = 0))))
				AND A.RelationShip = 2
		)
		SELECT 
			A.AnnouncementID, 
			A.DesignStatus, 
			A.EffectiveDate, 
			A.ExpirationDate, 
			A.PublishedSince, 
			A.Title, 
			A.DraftAndPublished, 
			A.RelationShip,
			(SELECT COUNT(1) FROM STS)	AS TotalRowCount
		FROM STS A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Relationship		Any = 0 */
		DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT	
				ANNOUNCE.MS$9NID		AS	AnnouncementID, 
				ANNOUNCE.MS$9DS, 
				ANNOUNCE.MSEFFF			AS	EffectiveDate,
				ANNOUNCE.MSEFFT			AS  ExpirationDate,
				ANNOUNCE.MSUPMJ			AS	PublishedSince,
				ANNOUNCE.MS$9MTT		AS	Title, 
				CASE 
					WHEN PUBLISH.MS$9DS IS NOT NULL AND DRAFT.MS$9DS IS NOT NULL THEN 1 ELSE 0 
				END						AS	DraftAndPublished,
				CASE 
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9APFL = AnnouncementType) = 0 THEN 3 /* Shared */
					WHEN (SELECT COUNT(1) FROM [SCDATA].FQ67105I WHERE MI$9NID = ANNOUNCE.MS$9NID AND MI$9INID = InstallationID AND MI$9APFL = AnnouncementType) > 0 THEN 1 /* Related */
					ELSE 2 /* Restricted */
				END AS RelationShip
			FROM 
				[SCDATA].FQ67105 ANNOUNCE
				LEFT OUTER JOIN [SCDATA].FQ67105 PUBLISH 
					ON PUBLISH.MS$9NID = ANNOUNCE.MS$9NID 
					AND PUBLISH.MS$9DS = 0
				LEFT OUTER JOIN [SCDATA].FQ67105 DRAFT 
					ON DRAFT.MS$9NID = ANNOUNCE.MS$9NID 
					AND DRAFT.MS$9DS = 1
			WHERE
				( FilterTerm = '*' OR UPPER(ANNOUNCE.MS$9MTT) LIKE '%' ||  FilterTerm || '%')
		), STS AS (
			SELECT	
				A.AnnouncementID, 
				A.MS$9DS	AS DesignStatus, 
				A.EffectiveDate,
				A.ExpirationDate,
				A.PublishedSince,
				A.Title, 
				A.DraftAndPublished,
				A.RelationShip,
				ROW_NUMBER() OVER (ORDER BY A.Title)	AS RNUM
			FROM CTE A
			WHERE ((A.MS$9DS = DesignStatus) OR (DesignStatus = 2 AND (A.MS$9DS = 1 OR (A.MS$9DS = 0 AND A.DraftAndPublished = 0))))
		)
		SELECT 
			A.AnnouncementID, 
			A.DesignStatus, 
			A.EffectiveDate, 
			A.ExpirationDate, 
			A.PublishedSince, 
			A.Title, 
			A.DraftAndPublished, 
			A.RelationShip,
			(SELECT COUNT(1) FROM STS)	AS TotalRowCount
		FROM STS A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		/* Relationship		Any = 0 | Related = 1 | NotRelated = 2 | Shared = 3 */
		IF ( Relation = 1 )THEN			/* Related */
			OPEN TEMP_CURSOR1;
		ELSEIF ( Relation = 2 )THEN		/* Not related */
			OPEN TEMP_CURSOR2;
		ELSE							/* Any */
			OPEN TEMP_CURSOR3;
		END IF;
		
	END;
		
END ;
-- #desc					Reads an Installation description.
-- #bl_class				Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetInstallation
(
	IN InstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetInstallation 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT  
			IN$9INID AS InstallationID, 
			INDSC1 AS	Description,
			IN$9APFL AS ApplicationUseFlag
		FROM  
			-- Installation Id's 	
			[SCDATA].FQ670001 INID
		  WHERE 
			-- Installation Id filter	
			INID.IN$9INID = InstallationID 
  		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Get the row count of installation related tables.
-- #bl_class					Premier.Common.StoreDeleteStatInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param IsECOMInstallation	IsECOMInstallation

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetInstallationDelStatInfo
(
	InstallationID				VARCHAR(3),	
	IsECOMInstallation			INT,
	OUT BranchPlantByInst		NUMERIC(15,0),
	OUT ItemBranchOverride		NUMERIC(15,0),
	OUT Catalogs				NUMERIC(15,0),
	OUT ItemsFastButtons		NUMERIC(15,0),			
	OUT ItemWebContentHeader	NUMERIC(15,0),
	OUT LobByInst				NUMERIC(15,0),
	OUT Registers				NUMERIC(15,0),
	OUT SalesUnitOfMeasure		NUMERIC(15,0),		
	OUT WebAccounts				NUMERIC(15,0),
	OUT SalesPersonClient		NUMERIC(15,0),
	OUT P4210Settings			NUMERIC(15,0),	
	OUT RecentlyViewedItems		NUMERIC(15,0),
	OUT CompaniesByInst			NUMERIC(15,0),						
	OUT TotalCount				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetInstallationDelStatInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN					
	
	--Line of Business By Installation
	SET LobByInst = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ671031 WHERE LI$9INID = InstallationID);
	
	--BraNch Plant By Installation
	SET BranchPlantByInst = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ679910 WHERE BI$9INID = InstallationID);
	
	/* Item Branch Plant Override By Installation */
	SET ItemBranchOverride = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ670005 WHERE BP$9INID = InstallationID);
	
	--Sales Unit of Measure
	SET SalesUnitOfMeasure = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ67415 WHERE UM$9INID = InstallationID);
	
	--Items Fast Buttons
	SET ItemsFastButtons = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ67416 WHERE FB$9INID = InstallationID);
	
	IF(IsECOMInstallation = 0) THEN
		--Item Web Content Header
		SET ItemWebContentHeader = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ67410 WHERE CH$9INID = InstallationID);

		--Catalogs
		SET Catalogs = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ67412 WHERE CA$9INID = InstallationID);
	ELSE 
		--Item Web Content Header
		SET ItemWebContentHeader = 0;

		--Catalogs
		SET Catalogs = 0;
	END IF;
			
	--Web Accounts
	SET WebAccounts = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) 
					FROM [SCDATA].FQ67101 
					WHERE EXISTS (SELECT UI$9USER FROM [SCDATA].FQ67996	
									WHERE UI$9USER = WA$9USER AND UI$9INID = InstallationID));
		
	--Registers Master
	SET Registers = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ67426 WHERE RG$9INID = InstallationID);
	


	--Sales Person Client
	SET SalesPersonClient = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ67125 WHERE SP$9INID = InstallationID);
		
	--- P4210 Settings Header	
	SET P4210Settings = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ674230 WHERE RH$9INID = InstallationID);
		
	--Recently View Items
	SET RecentlyViewedItems = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ67120 WHERE WI$9INID = InstallationID);

	--Companies By Installation
	SET CompaniesByInst = (SELECT CAST (COUNT(*)AS NUMERIC(15,0)) FROM [SCDATA].FQ679912 WHERE CI$9INID = InstallationID);

	SET TotalCount = (SELECT SUM(LobByInst + BranchPlantByInst + ItemBranchOverride +
									SalesUnitOfMeasure + ItemsFastButtons + ItemWebContentHeader + 
									WebAccounts + Registers + Catalogs + SalesPersonClient + P4210Settings +
									RecentlyViewedItems + CompaniesByInst) FROM SYSIBM.SYSDUMMY1);	

END ;
-- #desc					Reads an Installation information.
-- #bl_class				Premier.Common.StoreInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetInstallationInfo
(
	IN InstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetInstallationInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT  
			IN$9INID AS InstallationID, 
			INDSC1 AS	Description,
			IN$9APFL AS ApplicationUseFlag
		FROM  
			-- Installation Id's 	
			[SCDATA].FQ670001
		  WHERE 
			-- Installation Id filter	
			IN$9INID = InstallationID
  		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Read InstallationID list.
-- #bl_class					Premier.Common.StoreList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param Description			Description.
-- #param ApplicationUseFlag	Application Use Flag.

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetInstallationsList
(
	IN InstallationID		VARGRAPHIC(3) CCSID 13488,
	IN Description			VARGRAPHIC(256) CCSID 13488,
	IN ApplicationUseFlag	VARGRAPHIC(8) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetInstallationsList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT  
			IN$9INID as InstallationID, 
			INDSC1 as Description,
			IN$9APFL as ApplicationUseFlag
		FROM  
			-- Installation Id's 	
			[SCDATA].FQ670001 
		WHERE 
			-- Installation Id filter	    
			(InstallationID = '*' OR IN$9INID like '%' || InstallationID || '%')
			and
			(Description = '*' OR UPPER(INDSC1) like '%' || Description || '%') 
			and
			(ApplicationUseFlag = '*' OR IN$9APFL like '%' ||  ApplicationUseFlag || '%') 
			ORDER BY IN$9APFL ASC, IN$9INID ASC
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Get next number from table FQ67002
-- #bl_class					Premier.Common.NextNumber.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param NextNumberID			Key

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetNextNumber
(
	NextNumberID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetNextNumber 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

		SELECT 
			NN$9UKID NextNumberID ,
			NNUD01 UseDescription1,
			NNUD02 UseDescription2,
			NN$9N001 NextValue ,
			NNURCD UserReservedCode  ,
			NNURDT UserReservedDate  ,
			NNURAT UserReservedAmount  ,
			NNURAB UserReservedNumber  ,
			NNURRF UserReservedReference  ,
			NNUSER "USERID"  ,
			NNPID "PROGRAMID"  ,
			NNJOBN WorkStationId  ,
			NNUPMJ DateUpdated  ,
			NNTDAY TimeOfDay  
			
		FROM
			[SCDATA].FQ67002
		WHERE
			NN$9UKID = NextNumberID
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Get next number list
-- #bl_class				Premier.Common.NextNumberList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param NextNumberID		Next number ID
-- #param Description1		Description 
-- #param Description2		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetNextNumberList
(
   IN NextNumberID NUMERIC(15,0),
   IN Description1 varchar (15),
   IN Description2 varchar (15)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetNextNumberList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

		SELECT 
			NN$9UKID NextNumberID,
			NNUD01 UseDescription1,
			NNUD02 UseDescription2,
			NN$9N001 NextValue
		FROM 
			[SCDATA].FQ67002 
		WHERE 		
			(NextNumberID IS NULL OR NN$9UKID = NextNumberID) 
			and
			(Description1 = '*' OR UPPER(RTRIM(NNUD01)) like '%' || UPPER(RTRIM(Description1)) || '%') 
			and
			(Description2 = '*' OR UPPER(RTRIM(NNUD02)) like '%' || UPPER(RTRIM(Description2)) || '%')
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END

 



 ;
-- #desc					Read Payment Terms List
-- #bl_class				Premier.Common.PaymentTermsList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetPaymentTermList
(
	IN PaymentTermCode varchar(3),
	IN PaymentTermDescription varchar(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetPaymentTermList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

		SELECT 
			PNPTC  PaymentTermCode,
			PNPTD PaymentTermDescription
		FROM
			[SCDATA].F0014
		WHERE
			 (PaymentTermCode = '*' OR UPPER(RTRIM(PNPTC)) LIKE '%' || UPPER(RTRIM(PaymentTermCode)) || '%')	
			 AND
			 (PaymentTermDescription = '*' OR UPPER(RTRIM(PNPTD)) LIKE '%' || UPPER(RTRIM(PaymentTermDescription)) || '%')	 
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Read Branch Plant by Installation info incluing address information
-- #bl_class					Premier.Common.PickUpAddressInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param BranchPlant			Branch Plant.

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetPickUpAddressInfo
(
	IN InstallationID	VARCHAR(3),
	IN BranchPlant		VARCHAR(12)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetPickUpAddressInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		A.MCAN8 AS AddressNumber,
		A.MCMCU AS BranchPlant,
		A.MCCO	 AS Company,
		C.WWMLNM AS MailingName,
		D.ALCTY1 AS City,
		D.ALADDS AS State,
		D.ALADDZ AS ZipCode,
		D.ALCTR  AS Country,
		D.ALADD1 AS AddressLine1,
		D.ALADD2 AS AddressLine2
	FROM
		[SCDATA].F0006 A
	INNER JOIN [SCDATA].FQ679910 B
		ON A.MCMCU = B.BIMCU
	INNER JOIN [SCDATA].F0111 C	/*Contact*/
		ON C.WWAN8 = A.MCAN8
		AND C.WWIDLN = 0
	INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.MCAN8, CurrentJulianDate)) D	/*Address*/
		ON D.ALAN8 = A.MCAN8
	WHERE 
		B.BI$9INID = InstallationID
		AND A.MCMCU = BranchPlant
		AND B.BILCNF = 'Y'	
	FOR FETCH ONLY;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	OPEN TEMP_CURSOR1;
	
END

 ;
-- #desc						Read Branch Plant by Installation list incluing address information
-- #bl_class					Premier.Common.PickUpAddressList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetPickUpAddressList
(
	IN InstallationID VARCHAR(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetPickUpAddressList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		A.MCAN8 AS AddressNumber,
		A.MCMCU AS BranchPlant,
		A.MCCO	 AS Company,
		C.WWMLNM AS MailingName,
		D.ALCTY1 AS City,
		D.ALADDS AS State,
		D.ALADDZ AS ZipCode,
		D.ALCTR  AS Country,
		D.ALADD1 AS AddressLine1,
		D.ALADD2 AS AddressLine2
	FROM
		[SCDATA].F0006 A			/*BranchPlant Master*/
	INNER JOIN [SCDATA].FQ679910 B /*BranchPlant by Installation*/
		ON A.MCMCU = B.BIMCU
	INNER JOIN [SCDATA].F0111 C	/*Contact*/
		ON C.WWAN8 = A.MCAN8
		AND C.WWIDLN = 0
	INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.MCAN8, CurrentJulianDate)) D	/*Address*/
		ON D.ALAN8 = A.MCAN8
	WHERE 
		B.BI$9INID = InstallationID
		AND B.BILCNF = 'Y'
	ORDER BY
		A.MCMCU ASC
	FOR FETCH ONLY;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc				Get Rounding Rule List
-- #bl_class			Premier.Common.RoundingRuleList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetRoundingRuleList
(
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetRoundingRuleList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		C.RRRULENAME AS RuleName,
		C.RRRULEDESC AS RuleDescription
	FROM 
		[SCDATA].F95701 C
	GROUP BY 
		C.RRRULENAME, C.RRRULEDESC
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Reads the UDC Header
-- #bl_class				Premier.Common.UserDefinedCodeHeaderInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ProductCode		Product code to search for
-- #param UserDefinedCode	User define code to search for    
-- #param UserDefinedKey	User Defined Key search criteria	  
-- #param LangPref			Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetUDCHeaderInfo 
( 
	IN PRODUCTCODE VARCHAR(4) , 
	IN USERDEFINEDCODE VARCHAR(2) , 
	IN LANGPREF VARCHAR(2) 
) 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetUDCHeaderInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

	BEGIN 
  
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
		HUDC . DTSY AS PRODUCTCODE , 
		HUDC . DTRT AS USERDEFINEDCODE , 
		CASE WHEN RTRIM ( LTRIM ( HUDC . DTDL01 ) ) = '.' THEN '' ELSE HUDC . DTDL01 END AS DESCRIPTION , 
		HUDC . DTCDL AS CODELENGTH 
		FROM [SCCTL] . F0004 HUDC  -- UDC Header Master 	 
		WHERE 
		HUDC . DTSY  = PRODUCTCODE  -- Product Code filter	 
		AND HUDC . DTRT = USERDEFINEDCODE  -- User Defined Codes filter	 
		ORDER BY HUDC . DTSY , HUDC . DTRT 
		FOR FETCH ONLY ; 
	 
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
		HUDC . DTSY AS PRODUCTCODE , 
		HUDC . DTRT AS USERDEFINEDCODE , 
		CASE WHEN RTRIM ( LTRIM ( COALESCE ( HUDCLNG . DTDL01, HUDC . DTDL01 ) ) ) = '.' THEN '' ELSE RTRIM ( LTRIM ( COALESCE ( HUDCLNG . DTDL01,HUDC . DTDL01 ) ) ) END AS DESCRIPTION , 
		HUDC . DTCDL AS CODELENGTH 
		FROM [SCCTL] . F0004 HUDC  -- UDC Header Master 
		LEFT JOIN [SCCTL] . F0004D HUDCLNG  -- UDC Header Language Master 	 
		ON HUDCLNG . DTSY = HUDC . DTSY 
		AND HUDCLNG . DTRT = HUDC . DTRT 
		AND HUDCLNG . DTLNGP = LANGPREF
		WHERE 
		HUDC . DTSY  = PRODUCTCODE  -- Product Code filter	 
		AND HUDC . DTRT = USERDEFINEDCODE -- User Defined Codes filter	 
		ORDER BY HUDC . DTSY , HUDC . DTRT 
		FOR FETCH ONLY ; 
			 
	IF LANGPREF IS NULL OR RTRIM ( LANGPREF ) = '' THEN 
		OPEN TEMP_CURSOR1 ;	 
	ELSE 
		OPEN TEMP_CURSOR2 ; 
	END IF ; 
  
END ;
-- #desc						Reads the UDC Header
-- #bl_class					Premier.Common.UserDefinedCodeHeaderList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ProductCode			Product code to search for
-- #param UserDefinedCode		User define code to search for    
-- #param UserDefinedKey		User Defined Key search criteria	  
-- #param Description			Description to search for  
-- #param LangPref				Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GetUDCHeaderList ( 

	IN PRODUCTCODE VARCHAR(4) , 

	IN USERDEFINEDCODE VARCHAR(2) , 

	IN DESCRIPTION VARCHAR(30) , 

	IN LANGPREF VARCHAR(2) ) 

	DYNAMIC RESULT SETS 1
	LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetUDCHeaderList 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 


	BEGIN 

  

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

	SELECT 

	HUDC . DTRT AS USERDEFINEDCODE , 

	CASE WHEN RTRIM ( LTRIM ( HUDC . DTDL01 ) ) = '.' THEN '' ELSE HUDC . DTDL01 END AS DESCRIPTION 

	-- UDC Header Master 	 

	FROM [SCCTL] . F0004 HUDC 

	WHERE 

	 -- Product Code filter	 

	HUDC . DTSY = PRODUCTCODE

	-- User Defined Codes filter	 

	AND ( USERDEFINEDCODE = '*' OR HUDC . DTRT LIKE '%' || USERDEFINEDCODE || '%' ) 

	 -- Description filter 

	AND ( DESCRIPTION = '*' OR HUDC . DTDL01 LIKE '%' || DESCRIPTION || '%' ) 

	ORDER BY HUDC . DTSY , HUDC . DTRT 

	FOR FETCH ONLY ; 

	

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

	SELECT 

	HUDC . DTRT AS USERDEFINEDCODE , 

	CASE WHEN RTRIM ( LTRIM ( COALESCE ( HUDCLNG . DTDL01 , HUDC . DTDL01 ) ) ) = '.' THEN '' ELSE RTRIM ( LTRIM ( COALESCE ( HUDCLNG . DTDL01,HUDC . DTDL01 ) ) ) END AS DESCRIPTION 

	-- UDC Header Master 	 

	FROM [SCCTL] . F0004 HUDC 

	-- UDC Header Language Master 	 

	LEFT JOIN [SCCTL] . F0004D HUDCLNG 

	ON HUDCLNG . DTSY = HUDC . DTSY 

	AND HUDCLNG . DTRT = HUDC . DTRT 

	AND HUDCLNG . DTLNGP = LANGPREF

	WHERE 

	-- Product Code filter	 

	HUDC . DTSY = PRODUCTCODE

	-- User Defined Codes filter	 

	AND ( USERDEFINEDCODE = '*' OR HUDC . DTRT LIKE '%' || USERDEFINEDCODE || '%' ) 

	-- Description filter 

	AND ( DESCRIPTION = '*' OR HUDC . DTDL01 LIKE '%' || DESCRIPTION || '%' ) 

	ORDER BY HUDC . DTSY , HUDC . DTRT 

	FOR FETCH ONLY ; 

			 

	IF LANGPREF IS NULL OR RTRIM ( LANGPREF ) = '' THEN 

		OPEN TEMP_CURSOR1 ;	 

	ELSE 

		OPEN TEMP_CURSOR2 ; 

	END IF ; 

  

END  ;
-- #desc						Get User Announcement List 
-- #bl_class					Premier.Common.UserAnnouncementList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param WebAccountId			Web Account ID
-- #param AddressNumber			Address Number
-- #param AddressType			Address book type
-- #param DisplayType			Display Type /* 0= Prompt - 1=Floating - 2=List*/ 
-- #param MaxItemsToDisplay		Max Items To Display /* 0 returs all */
-- #param LangPref				Language preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST
(
  IN InstallationID    VARCHAR(3),
  IN WebAccountId      NUMERIC(15,0),
  IN AddressNumber     NUMERIC(15,0),
  IN AddressBookType   NUMERIC(15,0),  
  IN DisplayType       NUMERIC(15,0), /* 0= Prompt - 1=Floating - 2=List*/
  IN MaxItemsToDisplay NUMERIC(15,0),
  IN LangPref          VARCHAR(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CMM_GETUSERANNOUNCEMENTLIST
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBL_CATEGORYCODE
	(
		ANNOUNCEMENTID NUMERIC(15,0)
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBL_ANNOUNCETEMP
	(			
		MS$9NID NUMERIC(15,0) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	BEGIN

		DECLARE CurrentJulianDate				INT;
		DECLARE ConstantINID					VARCHAR(3);
		DECLARE CCAssignmentType				NUMERIC(15,0);
		DECLARE AssignmentConstant				VARCHAR(256);
		DECLARE AnnounceLastDaysConstant		VARCHAR(256);
		DECLARE LastDays						INT;
		DECLARE UserDefinedKey					VARCHAR(10);
		DECLARE STRSQL							VARGRAPHIC(10000) CCSID 13488;

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT  
				MG.MS$9NID        AS AnnouncementID,       
				COALESCE(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
				COALESCE(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
				CASE ANNOUNCE.MSEFFF 
					WHEN 0 THEN ANNOUNCE.MSUPMJ 
					ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
				ANNOUNCE.MSTDAY   AS PublishedTimeSince,
				ANNOUNCE.MS$9PRI  AS Priority,
				COALESCE(H.MH$9A1ST, '') AS Status,
				ANNOUNCE.MSEFFF AS EffectiveDate,
				ANNOUNCE.MSEFFT AS ExpirationDate,
				0 AS TotalRowCount
			FROM SESSION.TBL_ANNOUNCETEMP MG
				INNER JOIN [SCDATA].FQ67105 ANNOUNCE
					ON MG.MS$9NID = ANNOUNCE.MS$9NID
					AND ANNOUNCE.MS$9DS = 0
				LEFT JOIN [SCDATA].FQ67105L LANG
					ON LANG.ML$9NID = MG.MS$9NID 
					AND LANG.ML$9DS = ANNOUNCE.MS$9DS
					AND LANG.MLLNGP = LangPref
				LEFT OUTER JOIN [SCDATA].FQ67105H H
					ON H.MH$9NID = ANNOUNCE.MS$9NID AND H.MH$9WAN8 = WebAccountID
			WHERE 
				H.MH$9A1ST IS NULL OR TRIM(H.MH$9A1ST) NOT IN ('R', 'RB')
			ORDER BY ANNOUNCE.MS$9PRI DESC, ANNOUNCE.MSEFFT
			FOR FETCH ONLY;

		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			
				WITH CTE1 AS (SELECT  
						MG.MS$9NID        AS AnnouncementID,       
						COALESCE(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
						COALESCE(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
						CASE ANNOUNCE.MSEFFF 
							WHEN 0 THEN ANNOUNCE.MSUPMJ 
							ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
						ANNOUNCE.MSTDAY   AS PublishedTimeSince,
						ANNOUNCE.MS$9PRI  AS Priority,
						COALESCE(H.MH$9A1ST, '') AS Status,
						ANNOUNCE.MSEFFF AS EffectiveDate,
						ANNOUNCE.MSEFFT AS ExpirationDate,
						ROW_NUMBER() OVER() AS ROWNUM
					FROM SESSION.TBL_ANNOUNCETEMP MG
					INNER JOIN [SCDATA].FQ67105 ANNOUNCE
						ON MG.MS$9NID = ANNOUNCE.MS$9NID
						AND ANNOUNCE.MS$9DS = 0
					LEFT JOIN [SCDATA].FQ67105L LANG
						ON LANG.ML$9NID = MG.MS$9NID 
						AND LANG.ML$9DS = ANNOUNCE.MS$9DS
						AND LANG.MLLNGP = LangPref
					LEFT OUTER JOIN [SCDATA].FQ67105H H 
						ON H.MH$9NID = ANNOUNCE.MS$9NID AND H.MH$9WAN8 = WebAccountID
					WHERE 
						H.MH$9A1ST IS NULL OR TRIM(H.MH$9A1ST) NOT IN ('R', 'RB')
						ORDER BY ANNOUNCE.MS$9PRI DESC
					),
				CTE2 AS ( 
					SELECT COUNT(1) AS TotalRowCount 
					FROM CTE1 
				)
				SELECT CTE1.AnnouncementID, CTE1.Title, CTE1.HtmlContent, CTE1.PublishedDateSince, CTE1.PublishedTimeSince, CTE1.Priority, 
						CTE1.Status, CTE1.EffectiveDate, CTE1.ExpirationDate, CTE2.TotalRowCount
				FROM CTE2, CTE1	 
				WHERE MaxItemsToDisplay = 0 OR (ROWNUM <= MaxItemsToDisplay)
			FOR FETCH ONLY;

		DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT  
					MG.MS$9NID        AS AnnouncementID,       
					COALESCE(LANG.ML$9MTT, ANNOUNCE.MS$9MTT)  AS Title,
					COALESCE(LANG.ML$9MSC, ANNOUNCE.MS$9MSC)  AS HtmlContent,
					CASE ANNOUNCE.MSEFFF 
						WHEN 0 THEN ANNOUNCE.MSUPMJ 
						ELSE ANNOUNCE.MSEFFF END AS PublishedDateSince,
					ANNOUNCE.MSTDAY   AS PublishedTimeSince,
					ANNOUNCE.MS$9PRI  AS Priority,
					COALESCE(HIST.MH$9A1ST, '') AS Status,
					ANNOUNCE.MSEFFF AS EffectiveDate,
					ANNOUNCE.MSEFFT AS ExpirationDate,
					0 AS TotalRowCount
				FROM SESSION.TBL_ANNOUNCETEMP MG
					INNER JOIN [SCDATA].FQ67105 ANNOUNCE
						ON MG.MS$9NID = ANNOUNCE.MS$9NID
						AND ANNOUNCE.MS$9DS = 0
					LEFT JOIN [SCDATA].FQ67105L LANG
						ON LANG.ML$9NID = MG.MS$9NID 
						AND LANG.ML$9DS = ANNOUNCE.MS$9DS
						AND LANG.MLLNGP = LangPref
					LEFT JOIN [SCDATA].FQ67105H HIST
						ON HIST.MH$9NID = MG.MS$9NID
						AND MH$9APFL = 'AGen'
						AND HIST.MH$9WAN8 = WebAccountID
				ORDER BY ANNOUNCE.MS$9PRI, ANNOUNCE.MSEFFT
			FOR FETCH ONLY;


		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		SET ConstantINID = InstallationID;
		SET UserDefinedKey = ' ';

		CALL [SCLIBRARY].CMM_GetConstantValue ('ANMDSPDAYS', ConstantINID, AnnounceLastDaysConstant);
		SET LastDays = CAST(COALESCE(AnnounceLastDaysConstant, 0) AS INT);
		SET ConstantINID = InstallationID;
  
		/*Assignment By CategoryCode*/ 
		IF ( AddressBookType = 1 )THEN /*Category Code Assignments (Consumer)*/
        BEGIN
        INSERT INTO SESSION.TBL_CATEGORYCODE (ANNOUNCEMENTID) 
            SELECT MA$9NID AnnouncementID
            FROM (
                 SELECT PRDTAI, PRKY
		         FROM [SCDATA].FQ670302 AS S, 
			     LATERAL(VALUES
                    ('$9AC01', PR$9AC01),('$9AC02', PR$9AC02),('$9AC03', PR$9AC03),('$9AC04', PR$9AC04),('$9AC05', PR$9AC05),('$9AC06', PR$9AC06),('$9AC07', PR$9AC07),('$9AC08', PR$9AC08),('$9AC09', PR$9AC09),('$9AC10', PR$9AC10),
				    ('$9AC11', PR$9AC11),('$9AC12', PR$9AC12),('$9AC13', PR$9AC13),('$9AC14', PR$9AC14),('$9AC15', PR$9AC15),('$9AC16', PR$9AC16),('$9AC17', PR$9AC17),('$9AC18', PR$9AC18),('$9AC19', PR$9AC19),('$9AC20', PR$9AC20),
                    ('$9AC21', PR$9AC21),('$9AC22', PR$9AC22),('$9AC23', PR$9AC23),('$9AC24', PR$9AC24),('$9AC25', PR$9AC25),('$9AC26', PR$9AC26),('$9AC27', PR$9AC27),('$9AC28', PR$9AC28),('$9AC29', PR$9AC29),('$9AC30', PR$9AC30)
                    ) AS T(PRDTAI, PRKY) 
            WHERE PR$9AN8 = AddressNumber) B
            INNER JOIN	[SCDATA].FQ67105A A
            	ON B.PRDTAI = A.MADTAI
            	AND B.PRKY = A.MAKY
            WHERE A.MA$9ATYP = 2;
        END;   
        ELSEIF ( AddressBookType = 0 OR AddressBookType = 2 )THEN /*(Customer/Sales Person)*/
        BEGIN
        INSERT INTO SESSION.TBL_CATEGORYCODE (ANNOUNCEMENTID) 
                SELECT MA$9NID AnnouncementID
                FROM 
                (
                SELECT ABDTAI, ABKY
	        	FROM [SCDATA].F0101 AS S, 
				LATERAL(VALUES
                ('AC01', ABAC01),('AC02', ABAC02),('AC03', ABAC03),('AC04', ABAC04),('AC05', ABAC05),('AC06', ABAC06),('AC07', ABAC07),('AC08', ABAC08),	('AC09', ABAC09),('AC10', ABAC10),
				('AC11', ABAC11),('AC12', ABAC12),('AC13', ABAC13),('AC14', ABAC14),('AC15', ABAC15),('AC16', ABAC16),('AC17', ABAC17),('AC18', ABAC18),('AC19', ABAC19),('AC20', ABAC20),
                ('AC21', ABAC21),('AC22', ABAC22),('AC23', ABAC23),('AC24', ABAC24),('AC25', ABAC25),('AC26', ABAC26),('AC27', ABAC27),('AC28', ABAC28),('AC29', ABAC29),('AC30', ABAC30)) AS T(ABDTAI, ABKY)
             WHERE ABAN8 = AddressNumber) B
                INNER JOIN	[SCDATA].FQ67105A A
	               ON B.ABDTAI = A.MADTAI
	               AND B.ABKY = A.MAKY
                WHERE A.MA$9ATYP = 1;
        END;
		END IF; /*Category Code Assignments*/
	   
		INSERT INTO SESSION.TBL_ANNOUNCETEMP ( MS$9NID)
		SELECT A.MS$9NID 
		FROM (/*Without assignment*/
			SELECT ANNOUNCE.MS$9NID
			FROM [SCDATA].FQ67105 ANNOUNCE   
			WHERE
				ANNOUNCE.MS$9DS = 0  /*Live Status*/
				AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
				AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
				AND (LastDays = 0 OR ((CurrentJulianDate - LastDays) <= ANNOUNCE.MSUPMJ))
				AND (
					(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/      
					OR
					(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = InstallationID) > 0 
					)   
				AND ((SELECT COUNT(*) FROM [SCDATA].FQ67105A WHERE MA$9NID= ANNOUNCE.MS$9NID) = 0)
			UNION       
			/*Assignment By Web Account*/
			SELECT ANNOUNCE.MS$9NID
			FROM [SCDATA].FQ67105 ANNOUNCE 
			INNER JOIN [SCDATA].FQ67105A ANNASSIG
				ON  ANNOUNCE.MS$9NID = ANNASSIG.MA$9NID
				AND  ANNASSIG.MA$9ATYP = 5 
				AND ANNASSIG.MA$9WAN8 = WebAccountId
			WHERE
				ANNOUNCE.MS$9DS = 0  /*Live Status*/
				AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
				AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
				AND (LastDays = 0 OR ((CurrentJulianDate - LastDays) <= ANNOUNCE.MSUPMJ))
			UNION
				/*Assignment By Address Number*/
			SELECT ANNOUNCE.MS$9NID
			FROM [SCDATA].FQ67105 ANNOUNCE   
			INNER JOIN [SCDATA].FQ67105A ANNASSIG
				ON  ANNOUNCE.MS$9NID = ANNASSIG.MA$9NID
				AND  ANNASSIG.MA$9ATYP IN(3, 4) 
				AND ANNASSIG.MA$9AN8 = AddressNumber
			WHERE
				ANNOUNCE.MS$9DS = 0  /*Live Status*/
				AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
				AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
				AND (LastDays = 0 OR ((CurrentJulianDate - LastDays) <= ANNOUNCE.MSUPMJ))
				AND (
					(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/      
					OR
					(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = InstallationID) > 0 
					)) A 
		LEFT OUTER JOIN [SCDATA].FQ67105H H
			ON A.MS$9NID = H.MH$9NID AND H.MH$9WAN8 = WebAccountID
		WHERE H.MH$9A1ST IS NULL OR TRIM(H.MH$9A1ST) <> 'D';
   
		INSERT INTO SESSION.TBL_ANNOUNCETEMP ( MS$9NID)
			SELECT DISTINCT A.MS$9NID 
			FROM (
				SELECT  
				ANNOUNCE.MS$9NID         
				FROM 
					[SCDATA].FQ67105 ANNOUNCE        
					INNER JOIN SESSION.TBL_CATEGORYCODE ANNASSIG
						ON ANNASSIG.ANNOUNCEMENTID = ANNOUNCE.MS$9NID 
				WHERE
					ANNOUNCE.MS$9DS = 0  /*Live Status*/
					AND (DisplayType <> 0 OR (ANNOUNCE.MS$9PRI = 1 OR ANNOUNCE.MS$9PRI = 2))
					AND (ANNOUNCE.MSEFFF = 0 OR (CurrentJulianDate >= ANNOUNCE.MSEFFF AND CurrentJulianDate <= ANNOUNCE.MSEFFT))
					AND (LastDays = 0 OR ((CurrentJulianDate - LastDays) <= ANNOUNCE.MSUPMJ))
					AND (
							(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID) = 0 /*Shared*/      
							OR
							(SELECT COUNT(*) FROM [SCDATA].FQ67105I WHERE MI$9APFL ='AGen' AND MI$9NID = ANNOUNCE.MS$9NID  AND MI$9INID = InstallationID) > 0 
						)) A 
			LEFT OUTER JOIN [SCDATA].FQ67105H H
				ON A.MS$9NID = H.MH$9NID AND H.MH$9WAN8 = WebAccountID
			WHERE H.MH$9A1ST IS NULL OR TRIM(H.MH$9A1ST) <> 'D';
		
   
		IF( DisplayType = 0 ) THEN /*Prompt*/
			OPEN TEMP_CURSOR1;
			
		ELSEIF( DisplayType = 1 )THEN /*Floating*/
			OPEN TEMP_CURSOR2;
				
		ELSE /*List*/
			OPEN TEMP_CURSOR3;
		END IF;
	END;
END ;
-- #desc						Reads the UDC Info
-- #bl_class					Premier.Common.UserDefinedCodeInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ProductCode			Product code to search for
-- #param UserDefinedCode		User define code to search for    
-- #param UserDefinedKey		User Defined Key search criteria	  
-- #param LangPref				Language preference

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetUserDefinedCode
(
  IN ProductCode		varChar(4),
  IN UserDefinedCode	varChar(2),
  IN UserDefinedKey		varChar(10),
  IN LangPref			varChar(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetUserDefinedCode 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE	CodeLength INTEGER;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT  
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN RTRIM(LTRIM(DUDC.DRDL01)) = '.' THEN '' ELSE RTRIM(LTRIM(DUDC.DRDL01)) END AS Description1,
			RTRIM(LTRIM(DUDC.DRDL02))AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength 
	         	-- UDC Detail Master 	
		FROM  [SCCTL].F0005 DUDC
		
		INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
		
		WHERE 
			-- Product Code filter	
		  	DUDC.DRSY = ProductCode
			-- User Defined Codes filter	
		    AND DUDC.DRRT = UserDefinedCode
	         -- User Defined Key filter
		    AND DUDC.DRKY = UserDefinedKey
		FOR FETCH ONLY;
		
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN COALESCE(RTRIM(LTRIM(DUDCLNG.DRDL01)),RTRIM(LTRIM(DUDC.DRDL01))) = '.' THEN '' ELSE COALESCE(RTRIM(LTRIM(DUDCLNG.DRDL01)),RTRIM(LTRIM(DUDC.DRDL01))) END AS Description1,
			COALESCE(RTRIM(LTRIM(DUDCLNG.DRDL02)),RTRIM(LTRIM(DUDC.DRDL02))) AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength
	        -- UDC Detail Master 	
		 FROM [SCCTL].F0005 DUDC
		 INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
	        -- UDC Detail Language Master
		  LEFT JOIN [SCCTL].F0005D DUDCLNG
				 ON DUDCLNG.DRSY = DUDC.DRSY
				AND DUDCLNG.DRRT = DUDC.DRRT
				AND DUDCLNG.DRKY = DUDC.DRKY
				AND DUDCLNG.DRLNGP = LangPref
		 WHERE
			-- Product Code filter
		  	DUDC.DRSY = ProductCode
			-- User Defined Codes filter
		    AND DUDC.DRRT = UserDefinedCode
	        -- User Defined Key filter
		    AND DUDC.DRKY = UserDefinedKey
		FOR FETCH ONLY;

	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004 
						WHERE DTSY = ProductCode AND DTRT = UserDefinedCode);
	
	-- set UserDefinedKey with blank spaces
	
	SET UserDefinedKey = REPEAT(' ' ,10 - CodeLength ) || LTRIM(UserDefinedKey);
	
	IF LangPref IS NULL OR RTRIM(LangPref) = '' THEN
		OPEN TEMP_CURSOR1;	
	ELSE
		OPEN TEMP_CURSOR2;
	END IF;

END ;
-- #desc						Reads the UDC detail
-- #bl_class					Premier.Common.UserDefinedCodeList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ProductCode			Product code to search for
-- #param UserDefinedCode		User define code to search for    
-- #param UserDefinedKey		User Defined Key search criteria	  
-- #param Description1			Description to search for  
-- #param Description2			Description 2 to search for
-- #param LangPref				Language preference

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_GetUserDefinedCodeList
(
  IN ProductCode		varChar(4),
  IN UserDefinedCode	varChar(2),
  IN UserDefinedKey	varChar(10),
  IN Description1		varChar(30),
  IN Description2		varChar(30),
  IN LangPref			varChar(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_GetUserDefinedCodeList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT  
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN RTRIM(LTRIM(DUDC.DRDL01)) = '.' THEN '' ELSE RTRIM(LTRIM(DUDC.DRDL01)) END AS Description1,
			RTRIM(LTRIM(DUDC.DRDL02))AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength
	         	-- UDC Detail Master 	
		FROM  [SCCTL].F0005 DUDC
		
		INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
			
		WHERE 
			-- Product Code filter	
		  	DUDC.DRSY = ProductCode
			-- User Defined Codes filter	
		    AND DUDC.DRRT = UserDefinedCode
	                -- User Defined Key filter
		    AND (UserDefinedKey = '*' OR DUDC.DRKY LIKE '%' || UserDefinedKey || '%')
	                -- Description filter
            AND (Description1 = '*' OR UPPER(RTRIM(DUDC.DRDL01)) LIKE '%' || UPPER(RTRIM(Description1)) || '%')
                -- Description2 filter
            AND (Description2 = '*' OR UPPER(RTRIM(DUDC.DRDL02)) LIKE '%' || UPPER(RTRIM(Description2)) || '%')
		ORDER BY DUDC.DRSY, DUDC.DRRT, DUDC.DRKY
		FOR FETCH ONLY;
	
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			DUDC.DRSY AS ProductCode, 
			DUDC.DRRT AS UserDefinedCode, 
			DUDC.DRKY AS UserDefinedKey,
			CASE WHEN COALESCE(RTRIM(LTRIM(DUDCLNG.DRDL01)),RTRIM(LTRIM(DUDC.DRDL01))) = '.' THEN '' ELSE COALESCE(RTRIM(LTRIM(DUDCLNG.DRDL01)),RTRIM(LTRIM(DUDC.DRDL01))) END AS Description1,
			COALESCE(RTRIM(LTRIM(DUDCLNG.DRDL02)),RTRIM(LTRIM(DUDC.DRDL02))) AS Description2,
			DUDC.DRSPHD AS SpecialHandlingCode, 
			DUDC.DRUDCO AS UdcOwnershipflag, 
			DUDC.DRHRDC AS HardCodedYN,
			B.DTCDL AS	CodeLength
	        -- UDC Detail Master 	
		 FROM [SCCTL].F0005 DUDC
		 
		 INNER JOIN [SCCTL].F0004 B
			ON B.DTSY = DUDC.DRSY
			AND B.DTRT = DUDC.DRRT
			
	         	-- UDC Detail Language Master 	
              LEFT JOIN [SCCTL].F0005D DUDCLNG
                     ON DUDCLNG.DRSY = DUDC.DRSY
                    AND DUDCLNG.DRRT = DUDC.DRRT
                    AND DUDCLNG.DRKY = DUDC.DRKY
                    AND DUDCLNG.DRLNGP = LangPref
		 WHERE 
			-- Product Code filter	
		  	DUDC.DRSY = ProductCode
			-- User Defined Codes filter	
		    AND DUDC.DRRT = UserDefinedCode
	                -- User Defined Key filter
		    AND (UserDefinedKey = '*' OR DUDC.DRKY LIKE '%' || UserDefinedKey || '%')
                -- Description filter
            AND (Description1 = '*' OR UPPER(RTRIM(DUDC.DRDL01)) LIKE '%' || UPPER(RTRIM(Description1)) || '%')
                -- Description2 filter
            AND (Description2 = '*' OR UPPER(RTRIM(DUDC.DRDL02)) LIKE '%' || UPPER(RTRIM(Description2)) || '%')
		  ORDER BY DUDC.DRSY, DUDC.DRRT, DUDC.DRKY
		  FOR FETCH ONLY;

	IF LangPref IS NULL OR LangPref = '' THEN
		OPEN TEMP_CURSOR1;	
	ELSE
		OPEN TEMP_CURSOR2; 
	END IF;

END ;
-- #desc							Add contant detail
-- #bl_class						Premier.Common.UserDefinedCodeList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param Constant					Constant ID
-- #param InstallationID			Installation ID
-- #param ConstantValue				Constant Value

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_UpdConstant
(	
	IN Constant		    varchar(10),
	IN InstallationID   varchar(3),
	IN ConstantValue	VARGRAPHIC(256) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdConstant 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	UPDATE 
		[SCDATA].FQ670004
	SET  
		CN$9VAL = ConstantValue
	WHERE 
		    CN$9INID = InstallationID 
		AND CN$9CNST = Constant;
END
 ;
-- #desc						Updates contant header
-- #bl_class					Premier.Common.Constant.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ConstantID			Constant ID
-- #param SubSystemCode	Sub		System code
-- #param Description1			Description 1
-- #param Description2			Description 2

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_UpdConstantHeader
(
	IN ConstantID		VARCHAR(10),
	IN SubSystemCode	VARCHAR(2),
	IN Description1	    VARGRAPHIC(256) CCSID 13488,
	IN Description2	    VARGRAPHIC(256) CCSID 13488,	
	IN ProductCode	    VARCHAR(4),
	IN UserDefinedCode  VARCHAR(2),
	IN SystemOnlyFlag	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdConstantHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	UPDATE 
		[SCDATA].FQ670003
	SET  
		CNSYS = SubSystemCode,
	    CNDTA1 = Description1,
	    CNDTA2 = Description2,
	    CNSY = ProductCode,
	    CNRT = UserDefinedCode,
	    CN$9SOF = SystemOnlyFlag
	    
	WHERE 
		CN$9CNST = ConstantID;
END
 ;
-- #desc					Insert currency detail
-- #bl_class				Premier.Common.ConstantHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CurrencyCode		Currency Code
-- #param Description		Currency Description
-- #param Amount			Denomination Amount
-- #param CoinBillFlag		IS Coin or Bill
-- #param IsSpeedCash		mark as speed cash button

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_UpdCurrencyDetail 
(
    IN CurrencyCode			varchar(3),
    IN SequenceID			NUMERIC(15,0),
    IN Amount				NUMERIC(15,0),
    IN Description			varchar(30),
    IN CoinBillFlag			varchar(1),
    IN IsSpeedCash			varchar(1),
	IN "USERID"				varchar(10),
	IN "PROGRAMID"			varchar(10),
	IN WorkStationID		varchar(10),
	IN DateUpdated			NUMERIC(15,0),
	IN TimeLastUpdated		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdCurrencyDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE 
		[SCDATA].FQ67012
	SET
		CIAEXP	= Amount,
		CIDL01	= Description,
		CIBCF8	= CoinBillFlag,
		CISPEOW = IsSpeedCash,
		CIUSER	= "USERID",   
		CIPID	= "PROGRAMID",
		CIJOBN	= WorkStationID,
		CIUPMJ	= DateUpdated,
		CIUPMT	= TimeLastUpdated    
	WHERE 
		CICRCD = CurrencyCode AND 
		CILNID = SequenceID;
END ;
-- #desc						Update currency header
-- #bl_class					Premier.Common.CurrencyDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CurrencyCode			Currency Code
-- #param CurrencySymbol		Currency Symbol
-- #param RoundingRule			Rounding Rule Name

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdCurrencyHeader 
(
    IN CurrencyCode			varchar(3),
    IN CurrencySymbol		varchar(3),
    IN RoundingRule			varchar(10),
	IN "USERID"				varchar(10),
	IN "PROGRAMID"			varchar(10),
	IN WorkStationID		varchar(10),
	IN DateUpdated			NUMERIC(15,0),
	IN TimeLastUpdated		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdCurrencyHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE [SCDATA].FQ67011
	SET
		CICC0		= CurrencySymbol,
		CIRULENAME	= RoundingRule,
		CIUSER		= "USERID",   
		CIPID		= "PROGRAMID",
		CIJOBN		= WorkStationID,
		CIUPMJ		= DateUpdated,
		CIUPMT		= TimeLastUpdated
	WHERE
		CICRCD = CurrencyCode;
END ;
-- #desc				    Update User Reserved Reference Enhancement for DME
-- #bl_class			    Premier.Common.DocRestricInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param InstallationID				
-- #param ConstantID				
-- #param ProductCode				
-- #param UserDefinedCode				
-- #param UserDefinedKey				
-- #param UserReservedReference		

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_UpdDocRestricRef
(	
	IN InstallationID		    varchar(3),
    IN ConstantID				varchar(10),
    IN ProductCode				varchar(4),
    IN UserDefinedCode			varchar(2),
    IN UserDefinedKey			varchar(10),
    IN UserReservedReference	varchar(15)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdDocRestricRef 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE
		[SCDATA].FQ67008
	SET 
	    DRURRF = UserReservedReference
  WHERE
	    DR$9INID =  InstallationID				
    AND	DR$9CNST =  ConstantID					
    AND	DRSY =      ProductCode				
    AND	DRRT=       UserDefinedCode			
    AND	DRKY =      UserDefinedKey;
END ;
-- #desc							Update General Announcement Lang
-- #bl_class						Premier.Common.GeneralAnnouncementLang.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AnnouncementID			AnnouncementID
-- #param DesignStatus				DesignStatus
-- #param Language					Language
-- #param Title						Title
-- #param HtmlContent				Html Content

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdGeneralAnnounceLang
(
	IN AnnouncementID		NUMERIC(15,0),
	IN DesignStatus			NUMERIC(15,0),
	IN LangPref				VARCHAR(2),
	IN Title			    VARGRAPHIC(100) CCSID 13488,
	IN HtmlContent			DBCLOB CCSID 13488
)
DYNAMIC RESULT SETS 0
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdGeneralAnnounceLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE [SCDATA].FQ67105L
	  SET 
		ML$9MTT = Title,
		ML$9MSC = HtmlContent
	WHERE
		ML$9NID = AnnouncementID
		AND ML$9DS = DesignStatus
		AND MLLNGP = LangPref;
END;





	
-- #desc						Update General Announcement
-- #bl_class					Premier.Common.GeneralAnnouncement.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AnnouncementID		AnnouncementID.
-- #param DesignStatus			DesignStatus.
-- #param Priority				Priority.
-- #param AccessLevel			AccessLevel.
-- #param EffectiveDate			EffectiveDate.
-- #param ExpirationDate		ExpirationDate.
-- #param Title					Title.
-- #param HtmlContent			HtmlContent.
-- #param Url					Url.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CMM_UpdGeneralAnnouncement 
(
		AnnouncementID			NUMERIC(15,0),	
		DesignStatus			NUMERIC(15,0),	
		Priority				NUMERIC(15,0),	
		AccessLevel				NUMERIC(15,0),	
		EffectiveDate			NUMERIC(15,0),	
		ExpirationDate			NUMERIC(15,0),	
		Title					VARGRAPHIC(100) CCSID 13488,
		HtmlContent				DBCLOB CCSID 13488,
		Url						VARGRAPHIC(256) CCSID 13488,
		UserReservedCode		VARCHAR(2),
		UserReservedDate		NUMERIC(15,0),	
		UserReservedAmount		NUMERIC(15,0),	
		UserReservedNumber		NUMERIC(15,0),	
		UserReservedReference	VARCHAR(15),
		UserId					VARCHAR(10),
		ProgramId				VARCHAR(10),
		WorkStationId			VARCHAR(10),
		DateUpdated				NUMERIC(15,0),	
		TimeOfDay				NUMERIC(15,0)
)
SPECIFIC [SCLIBRARY].CMM_UpdGeneralAnnouncement 
BEGIN
	UPDATE [SCDATA].FQ67105
	SET 
	    MS$9PRI = Priority,
	    MS$9MST = AccessLevel,
	    MSEFFF  = EffectiveDate,
	    MSEFFT  = ExpirationDate,
	    MS$9MTT = Title,
	    MS$9MSC = HtmlContent,
	    MS$9MLK = Url,
	    MSURCD  = UserReservedCode,
	    MSURDT  = UserReservedDate,
	    MSURAT  = UserReservedAmount,
	    MSURAB  = UserReservedNumber,
	    MSURRF  = UserReservedReference,
	    MSUSER  = UserId,
	    MSPID   = ProgramId,
	    MSJOBN  = WorkStationId,
	    MSUPMJ  = DateUpdated,
	    MSTDAY  = TimeOfDay
	WHERE
		MS$9NID = AnnouncementID AND
		MS$9DS  = DesignStatus;
END ;
-- #desc					Updates an Installation description.
-- #bl_class				Premier.Common.Store.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID.
-- #param description		Description

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_UpdInstallation
(
	IN InstallationID       VARCHAR(3),
	IN Description          VARGRAPHIC(30) CCSID 13488,
	IN ApplicationUseFlag   VARCHAR(8)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdInstallation 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE 
		[SCDATA].FQ670001
	SET  
		INDSC1 = Description,
		IN$9APFL = ApplicationUseFlag 
	WHERE 
		IN$9INID = InstallationID;
END ;
-- #desc							Update next number from table FQ67002
-- #bl_class						Premier.Common.NextNumber.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param NextNumberID				Key
-- #param UseDescription1			Description
-- #param UseDescription2			Description 2
-- #param NextValue					Next value
-- #param UserReservedCode			
-- #param UserReservedDate
-- #param UserReservedAmount
-- #param UserReservedNumber
-- #param UserReservedReference
-- #param "USERID"
-- #param "PROGRAMID"
-- #param WorkStationId
-- #param DateUpdated
-- #param TimeOfDay

CREATE OR REPLACE Procedure [SCLIBRARY].CMM_UpdNextNumber 
(
	IN NextNumberID NUMERIC(15,0),
	IN UseDescription1 varchar(15),
	IN UseDescription2 varchar(15),
	IN NextValue NUMERIC(15,0),
	IN UserReservedCode varchar(6),
	IN UserReservedDate NUMERIC(15,0),
	IN UserReservedAmount NUMERIC(15,0),
	IN UserReservedNumber NUMERIC(15,0),
	IN UserReservedReference  varchar(30),
	IN "USERID" varchar(10),
	IN "PROGRAMID" varchar(10),
	IN WorkStationId varchar(10),
	IN DateUpdated NUMERIC(15,0),
	IN TimeOfDay NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CMM_UpdNextNumber
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE
		[SCDATA].FQ67002
	SET
		NNUD01 = UseDescription1,
		NNUD02 = UseDescription2,
		NN$9N001 = NextValue,
		NNURCD = UserReservedCode,
		NNURDT = UserReservedDate,
		NNURAT = UserReservedAmount,
		NNURAB = UserReservedNumber,
		NNURRF = UserReservedReference,
		NNUSER = "USERID",
		NNPID = "PROGRAMID",
		NNJOBN = WorkStationId,
		NNUPMJ = DateUpdated,
		NNTDAY = TimeOfDay
	WHERE 
		NN$9UKID = NextNumberID;
END ;
-- #desc						Add Item Related to Branch Plants
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param BranchPlant    	    Branch Plant.
-- #param ProductListXML			XML Short Item Numbers List.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddBranchPlantItems 
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN BranchPlant				GRAPHIC(12) CCSID 13488,
	IN ProductListXML				XML,
	IN Sequence					NUMERIC(6, 2),
	IN UserReservedNumber		NUMERIC(8, 0),
	IN UserReservedAmount		DECIMAL(15, 0),
	IN UserReservedCode			GRAPHIC(2) CCSID 13488,
	IN UserReservedDate			NUMERIC(6, 0),
	IN UserReservedReference	GRAPHIC(15) CCSID 13488,
	IN "USERID"					GRAPHIC(10) CCSID 13488,
	IN "PROGRAMID"				GRAPHIC(10) CCSID 13488,
	IN DateUpdated				NUMERIC(6, 0),
	IN TimeLastUpdated			NUMERIC(6, 0),
	IN WorkStationID			GRAPHIC(10) CCSID 13488
)
DYNAMIC RESULT SETS 0 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddBranchPlantItems 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 

	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLSITEMNUMBERSTABLE (
		ShortProductNumber		NUMERIC(8,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;


	IF (ProductListXML IS NOT NULL) THEN

		/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
		INSERT INTO SESSION.XMLSITEMNUMBERSTABLE (ShortProductNumber)
		SELECT 
			items.ShortProductNumber
			FROM XMLTABLE ('$d/items/item'
			PASSING ProductListXML AS "d"
			COLUMNS ShortProductNumber NUMERIC(8,0) PATH 'text()') AS items;

		DELETE FROM [SCDATA].FQ670005 A
        WHERE A.BP$9INID = StoreId
          AND A.BPMCU = BranchPlant
          AND EXISTS (
              SELECT 1 
              FROM SESSION.XMLSITEMNUMBERSTABLE X
              WHERE X.ShortProductNumber = A.BPITM
          );

		INSERT INTO [SCDATA].FQ670005
		( 
			BP$9INID, BPITM, BPMCU, BPSEQ, BPURAB, BPURAT, BPURCD, 
			BPURDT, BPURRF, BPUSER, BPPID, BPUPMJ, BPUPMT, BPJOBN 
		)
		SELECT 		
			StoreId, I.ShortProductNumber, BranchPlant, Sequence, UserReservedNumber, UserReservedAmount, UserReservedCode,
			UserReservedDate, UserReservedReference, UserID, ProgramID, DateUpdated, TimeLastUpdated, WorkStationID
		FROM SESSION.XMLSITEMNUMBERSTABLE I;

	END IF;
END;
 -- #desc							Add Catalog
-- #bl_class						Premier.Inventory.Catalog.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param CatalogId					Catalog Id.
-- #param EffectiveModeFlag			Effective Mode Flag.		
-- #param EffectiveFromDate			Effective From Date.
-- #param EffectiveThruDate			Effective Thru Date.
-- #param Description				Description.
-- #param SequenceNumber			SequenceNumber.
-- #param InstallationID			InstallationID.
-- #param MCU						MCU					
-- #param MCUBehavior				MCU Behavior
-- #param UserReservedNumber		User Reserved Number	
-- #param UserReservedAmount		User Reserved Amount	
-- #param UserReservedCode			User Reserved Code		
-- #param UserReservedDate			User Reserved Date		
-- #param UserReservedReference		User Reserved Reference
-- #param "USERID"					User Id
-- #param "PROGRAMID"				Program Id
-- #param WorkStationID				WorkStation ID		
-- #param DateUpdated				Date Updated			
-- #param TimeLastUpdated			Time Last Updated		

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddCatalog 
( 
	
	IN InstallationID			VARCHAR(3),	
	IN CatalogId				VARCHAR(3),
	IN EffectiveModeFlag 		NUMERIC(15,0),	
	IN EffectiveFromDate		NUMERIC(15,0),
	IN EffectiveThruDate		NUMERIC(15,0),
	IN Description				VARGRAPHIC(30) CCSID 13488,
	IN SequenceNumber			NUMERIC(15,0),
	IN MCU						VARCHAR(12),	
	IN MCUBehavior				VARCHAR(1),	
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationID			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddCatalog
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN  

	INSERT INTO [SCDATA] .FQ67412 
			   (CA$9CLGID 
			   ,CA$9EFM 
			   ,CAEFFF 
			   ,CAEFFT 
			   ,CADSC1 
			   ,CASEQ 
			   ,CA$9INID
			   ,CAMCU
			   ,CA$9CCFU
			   ,CAURAB  
			   ,CAURAT  
			   ,CAURCD  
			   ,CAURDT  
			   ,CAURRF  
			   ,CAUSER  
			   ,CAPID   
			   ,CAUPMJ  
			   ,CAUPMT  
			   ,CAJOBN )
		 VALUES
			   ( CatalogID,
				 EffectiveModeFlag,
				 EffectiveFromDate,
				 EffectiveThruDate,
				 Description,
				 SequenceNumber,
				 InstallationID,
				 MCU,
				 MCUBehavior,
				 UserReservedNumber,
				 UserReservedAmount,
				 UserReservedCode,
				 UserReservedDate,
				 UserReservedReference,
				 "USERID",
				 "PROGRAMID",
				 DateUpdated,
				 TimeLastUpdated,
				 WorkStationID
				);
END ;
 -- #desc						Add Catalog Detail
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param UniqueKeyID			UniqueKeyID
-- #param ParentKeyID    	    ParentKeyID.
-- #param IncludeInSearch		Include In Search.
-- #param DataItem				Data Item.
-- #param UserDefinedCode	    User Defined Code.
-- #param Description			Description.
-- #param EffectiveModeFlag	    Effective Mode Flag.		
-- #param EffectiveFromDate	    Effective From Date.
-- #param EffectiveThruDate	    Effective Thru Date.
-- #param SequenceNumber		SequenceNumber.
-- #param ImageName		        Node Image Name.
-- #param TemplateID		    TemplateID.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddCatalogDetail
(
	IN CatalogId			VARCHAR(3),
	INOUT UniqueKeyID		NUMERIC(15,0),
	IN ParentKeyID    		NUMERIC(15,0),
	IN IncludeInSearch		NUMERIC(15,0),
	IN DataItem				VARCHAR(10),
	IN UserDefinedCode		VARCHAR(10),
	IN Description			VARGRAPHIC(30) CCSID 13488,
	IN EffectiveModeFlag 	NUMERIC(15,0),
	IN EffectiveFromDate	NUMERIC(15,0),
	IN EffectiveThruDate	NUMERIC(15,0),
	IN SequenceNumber		NUMERIC(15,0),
	IN ImageName			VARGRAPHIC(256) CCSID 13488,
	IN TemplateID			VARCHAR(10)
	
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddCatalogDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN

	DECLARE seqNum NUMERIC(15,0);
	
	IF(UniqueKeyID = 0)THEN
		SELECT MAX(CDUKID) +1  INTO UniqueKeyID FROM [SCDATA].FQ67413
		WHERE CD$9CLGID = CatalogID;
	END IF;

	IF(UniqueKeyID IS NULL) THEN
		SET UniqueKeyID = 1;
	END IF;

	SET seqNum = SequenceNumber;
	
	IF(SequenceNumber IS NULL) THEN
		SET seqNum = 1;
	END IF;
	

	INSERT INTO [SCDATA].FQ67413
			   (
				CD$9CLGID
			   ,CDUKID
			   ,CD$9PKID
			   ,CD$9IIS
			   ,CDDTAI
			   ,CDKY
			   ,CDDL01
			   ,CD$9EFM
			   ,CDEFFF
			   ,CDEFFT
			   ,CDSEQ
			   ,CDIMGURL
			   ,CDTMPI
			   )
		 VALUES
			   (
				CatalogID,
				UniqueKeyID,
				ParentKeyID,
				IncludeInSearch,
				DataItem,
				UserDefinedCode,
				Description,
				EffectiveModeFlag,	
				EffectiveFromDate,
				EffectiveThruDate,
				seqNum,
				ImageName,
				TemplateID
				 );
END  ;
-- #desc						Add Catalog Detail Lang
-- #bl_class					Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID			UniqueKeyID.
-- #param LangPref    	        Language Preference.
-- #param Description			Description.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddCatalogDetailLang
( 
		
	IN CatalogId		 VARCHAR(3),
	IN UniqueKeyID       NUMERIC(15,0),
	IN LangPref	     	 VARCHAR(2),	
	IN Description	     VARGRAPHIC(30) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddCatalogDetailLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN  

	INSERT INTO [SCDATA].FQ67413L
			   (CD$9CLGID
			   ,CDUKID
			   ,CDLNGP
			   ,CDDL01)
		 VALUES
			   (CatalogID,
				UniqueKeyID,
				LangPref,
				Description
				)  ;
END  ;
-- #desc						Add Catalog Lang
-- #bl_class					Premier.Inventory.CatalogLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param LangPref    	        Language Preference.
-- #param Description			Description.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddCatalogLang
( 
		
	IN CatalogId		 VARCHAR(3),
	IN LangPref	     	 VARCHAR(2),	
	IN Description	     VARGRAPHIC(30) CCSID 13488	
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddCatalogLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN  

	INSERT INTO [SCDATA].FQ67412L
			  (CA$9CLGID
			   ,CALNGP
			   ,CADSC1)
		 VALUES
			   (CatalogID,
				LangPref,
				Description
				);
END   ;
-- #desc						Add Catalog Node Item
-- #bl_class					Premier.Inventory.CatalogNodeItem.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id
-- #param UniqueKeyID			UniqueKey ID
-- #param ItemNumber			Item Number
-- #param SequenceNumber		Sequence Number

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddCatalogNodeItem
(
	CatalogId				VARCHAR(3),
	UniqueKeyID				NUMERIC(15,0),
	ItemNumber				NUMERIC(15,0),
	SequenceNumber			NUMERIC(15,0),
	UserReservedNumber		NUMERIC(15,0),
	UserReservedAmount		NUMERIC(15,0),
	UserReservedCode		VARCHAR(2),
	UserReservedDate		NUMERIC(15,0),
	UserReservedReference	VARCHAR(15),
	UserID					VARCHAR(10),
	ProgramID				VARCHAR(10),
	DateUpdated				NUMERIC(15,0),
	TimeLastUpdated			NUMERIC(15,0),
	WorkStationID			VARCHAR(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddCatalogNodeItem 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	INSERT INTO [SCDATA].FQ67413I
	(
		IN$9CLGID,
		INUKID,
		INITM,
		INSEQ,
		INURAB,--UserReservedNumber 
		INURAT,--UserReservedAmount
		INURCD,--UserReservedCode
		INURDT,--UserReservedDate
		INURRF,--UserReservedReference
		INUSER,--UserId
		INPID, --ProgramId
		INUPMJ,--DateUpdated
		INUPMT,--TimeLastUpdated
		INJOBN --WorkstationId
	)
	VALUES
	(
		CatalogId,
		UniqueKeyID,
		ItemNumber,
		SequenceNumber,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);

END ;
-- #desc						Add Item Web Content Detail
-- #bl_class					Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID	    InstallationID.
-- #param ItemNumber			ItemNumber.
-- #param DesignStatus			DesignStatus.
-- #param SequenceNumber		SequenceNumber.
-- #param ParagraphTitle		ParagraphTitle.
-- #param HtmlContent			HtmlContent.
-- #param ActiveInactive		Active-Inactive.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddItemWebContentDetail 
( 
	IN InstallationID			VARCHAR(3),
	IN ItemNumber				NUMERIC(15,0),
	OUT UniqueKeyID				NUMERIC(15,0),
	IN DesignStatus				NUMERIC(15,0),
	IN SequenceNumber			NUMERIC(8,3),
	IN ParagraphTitle			VARGRAPHIC(30) CCSID 13488,
	IN HtmlContent				DBCLOB CCSID 13488,--Ntext Field
	IN ActiveInactive			VARCHAR(1),
	IN EffectiveFromDate		NUMERIC(15,0),
	IN EffectiveThruDate		NUMERIC(15,0),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationId			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddItemWebContentDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN
	
	-- Get next Unique Key Id   
	SELECT MAX(CDUKID) + 1 INTO UniqueKeyID
	FROM [SCDATA].FQ67411 A 
	WHERE 
		CDITM = ItemNumber 
		AND CD$9INID = InstallationID 
		AND CD$9DS = DesignStatus;
		
	IF UniqueKeyID IS NULL THEN
		SET UniqueKeyID = 1;
	END IF;

	INSERT INTO [SCDATA].FQ67411
           (CDITM
           ,CDUKID
           ,CD$9INID
           ,CD$9DS
           ,CDSEQ
           ,CD$9PTL
           ,CD$9HTML
           ,CDASAI
           ,CDEFFF
           ,CDEFFT
           ,CDURDT
           ,CDURAT
           ,CDURAB
           ,CDURRF
           ,CDUSER
           ,CDPID
           ,CDJOBN
           ,CDUPMJ
           ,CDTDAY)
     VALUES
           ( ItemNumber ,
			UniqueKeyID ,
			InstallationID ,
			DesignStatus ,
			SequenceNumber ,
			ParagraphTitle ,
			HtmlContent ,
			ActiveInactive ,
			EffectiveFromDate ,
			EffectiveThruDate ,
			UserReservedDate ,
			UserReservedAmount ,
			UserReservedNumber ,
			UserReservedReference ,
			"USERID" ,
			"PROGRAMID" ,
			WorkStationId ,
			DateUpdated ,
			TimeOfDay );
		
END ;
-- #desc						Add Language override for Item Web Content Detail
-- #bl_class					Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID	    InstallationID.
-- #param ItemNumber			ItemNumber.
-- #param DesignStatus			DesignStatus.
-- #param LangPref				Language Preference.
-- #param UniqueKeyID			UniqueKeyID.
-- #param ParagraphTitle		ParagraphTitle.
-- #param HtmlContent			HtmlContent.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddItemWebContentDetLang 
( 
	IN InstallationID			VARCHAR(3),
	IN ItemNumber				NUMERIC(15,0),
	IN DesignStatus				NUMERIC(15,0),
	IN UniqueKeyID				NUMERIC(15,0),
	IN LangPref					VARCHAR(2),
	IN ParagraphTitle			VARGRAPHIC(30) CCSID 13488,
	IN HtmlContent				DBCLOB CCSID 13488,--ntext
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationId			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
	
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddItemWebContentDetLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN

	INSERT INTO [SCDATA].FQ67411L
           (CLITM
           ,CLUKID
           ,CL$9INID
           ,CL$9DS
           ,CLLNGP
           ,CL$9PTL
           ,CL$9HTML
           ,CLURCD
           ,CLURDT
           ,CLURAT
           ,CLURAB
           ,CLURRF
           ,CLUSER
           ,CLPID
           ,CLJOBN
           ,CLUPMJ
           ,CLTDAY)
     VALUES
		   (ItemNumber ,
			UniqueKeyID ,
			InstallationID ,
			DesignStatus ,
			LangPref ,
			ParagraphTitle ,
			HtmlContent ,
			UserReservedCode ,
			UserReservedDate ,
			UserReservedAmount ,
			UserReservedNumber ,
			UserReservedReference ,
			"USERID" ,
			"PROGRAMID" ,
			WorkStationId ,
			DateUpdated ,
			TimeOfDay);
		
END ;
-- #desc						Add Content Header
-- #bl_class					Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumber			ItemNumber.
-- #param InstallationID		InstallationID.
-- #param DesignStatus			DesignStatus.
-- #param Description1			Description1.
-- #param Description2			Description2.
-- #param Description3			Description3.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddItemWebContentHeader 
( 
		IN InstallationID			VARCHAR(3),	
		IN ItemNumber				NUMERIC(15,0),
		IN DesignStatus				NUMERIC(15,0),
		IN Description1				VARGRAPHIC(30) CCSID 13488,
		IN Description2				VARGRAPHIC(30) CCSID 13488,
		IN Description3				VARGRAPHIC(30) CCSID 13488,
		IN MessagePriority			NUMERIC(15,0),
		IN HtmlContent				DBCLOB CCSID 13488, --Field NTEXT*******
		IN PortalUrl				VARGRAPHIC(256) CCSID 13488,
		IN UserReservedCode			VARCHAR(2),
		IN UserReservedDate			NUMERIC(15,0),
		IN UserReservedAmount		NUMERIC(15,0),
		IN UserReservedNumber		NUMERIC(15,0),
		IN UserReservedReference	VARCHAR(15),
		IN "USERID"					VARCHAR(10),
		IN "PROGRAMID"				VARCHAR(10),
		IN WorkStationId			VARCHAR(10),
		IN DateUpdated				NUMERIC(15,0),
		IN TimeOfDay				NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddItemWebContentHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO [SCDATA].FQ67410
			   (CHITM
			   ,CH$9INID
			   ,CH$9DS
			   ,CHDSC1
			   ,CHDSC2
			   ,CHDSC3
			   ,CH$9PRI
			   ,CH$9HTML
			   ,CHPTURL
			   ,CHURCD
			   ,CHURDT
			   ,CHURAT
			   ,CHURAB
			   ,CHURRF
			   ,CHUSER
			   ,CHPID
			   ,CHJOBN
			   ,CHUPMJ
			   ,CHTDAY)
		 VALUES
		  (	ItemNumber,
			InstallationID ,	
			DesignStatus ,
			Description1 ,
			Description2 ,
			Description3 ,
			MessagePriority ,
			HtmlContent ,
			PortalUrl,
			UserReservedCode ,
			UserReservedDate ,
			UserReservedAmount ,
			UserReservedNumber ,
			UserReservedReference ,
			"USERID" ,
			"PROGRAMID" ,
			WorkStationId,
			DateUpdated,
			TimeOfDay  );
		
END ;
 -- #desc						Add Content Header Lang
-- #bl_class					Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumber			ItemNumber.
-- #param InstallationID		InstallationID.
-- #param LangPref				Language Preference
-- #param DesignStatus			DesignStatus.
-- #param Description1			Description1.
-- #param Description2			Description2.
-- #param Description3			Description3.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddItemWebContentHeadLang 
( 
		IN InstallationID			VARCHAR(3),	
		IN ItemNumber				NUMERIC(15,0),
		IN DesignStatus				NUMERIC(15,0),
		IN LangPref					VARCHAR(2),
		IN Description1				VARGRAPHIC(30) CCSID 13488,
		IN Description2				VARGRAPHIC(30) CCSID 13488,
		IN Description3				VARGRAPHIC(30) CCSID 13488,
		IN HtmlContent				DBCLOB CCSID 13488, --Field NTEXT*******
		IN UserReservedCode			VARCHAR(2),
		IN UserReservedDate			NUMERIC(15,0),
		IN UserReservedAmount		NUMERIC(15,0),
		IN UserReservedNumber		NUMERIC(15,0),
		IN UserReservedReference	VARCHAR(15),
		IN "USERID"					VARCHAR(10),
		IN "PROGRAMID"				VARCHAR(10),
		IN WorkStationId			VARCHAR(10),
		IN DateUpdated				NUMERIC(15,0),
		IN TimeOfDay				NUMERIC(15,0)				
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddItemWebContentHeadLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO [SCDATA].FQ67410L
			   (CLITM
			   ,CL$9INID
			   ,CL$9DS
			   ,CLLNGP
			   ,CLDSC1
			   ,CLDSC2
			   ,CLDSC3
			   ,CL$9HTML
			   ,CLURCD
			   ,CLURDT
			   ,CLURAT
			   ,CLURAB
			   ,CLURRF
			   ,CLUSER
			   ,CLPID
			   ,CLJOBN
			   ,CLUPMJ
			   ,CLTDAY)
		 VALUES
		  (	ItemNumber,
			InstallationID ,	
			DesignStatus ,
			LangPref,
			Description1 ,
			Description2 ,
			Description3 ,
			HtmlContent ,
			UserReservedCode ,
			UserReservedDate ,
			UserReservedAmount ,
			UserReservedNumber ,
			UserReservedReference ,
			"USERID" ,
			"PROGRAMID" ,
			WorkStationId,
			DateUpdated,
			TimeOfDay  );
		
END ;
-- #desc					Add UOM 
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number

CREATE OR REPLACE Procedure [SCLIBRARY].INV_AddUnitOfMeasure
(
    IN InstallationID	VARCHAR(3), 
	IN UnitOfMeasure	VARCHAR(10),
	IN Description		VARGRAPHIC(30) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddUnitOfMeasure 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO  [SCDATA].FQ67415
	(
	 UM$9INID,  UMUOM,  UMDSC1
	)
	VALUES
	(
	 InstallationID, UnitOfMeasure, Description
	);

END ;
-- #desc					Add UOM Lang
-- #bl_class				Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param  UnitOfMeasure	Unit of Measure
-- #param  LangPref			Language Preference
-- #param  Description		Description	

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_AddUnitOfMeasureLang
(
	IN UnitOfMeasure  	VARCHAR(10),	
	IN Description		VARGRAPHIC(30) CCSID 13488,
	IN LangPref		    VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_AddUnitOfMeasureLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO [SCDATA].FQ67415L
	(
	 UM$9INID,  
	 UMUOM, 
	 UMLNGP,    
	 UMDSC1
	)
	VALUES
	(
	 '', 
	 UnitOfMeasure, 
	 LangPref,   
	 Description
	);
END ;
-- #desc						Check if item has associated items by reference type
-- #bl_class					Premier.Inventory.ItemAssociatedList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ShortItemNumber		Short Item Number
-- #param RefType				Reference Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_CheckAssociatedItems
(		
  IN	ShortItemNumber NUMERIC(15,0),
  IN	RefType	VARGRAPHIC(256) CCSID 13488,
  IN	AddressNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_CheckAssociatedItems 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
BEGIN
	DECLARE CurrentJulianDate INT DEFAULT 0;	
    DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			COUNT(*) 
		FROM 
			[SCDATA].F4104               
		WHERE 
			IVITM = ShortItemNumber
			AND IVXRT = RefType
			AND ((CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ) OR
				 (CurrentJulianDate >= IVEFTJ AND IVEXDJ = 0))
			AND (IVAN8 = AddressNumber OR IVAN8 = 0)
		FOR FETCH ONLY;
	 SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);		
	OPEN TEMP_CURSOR1;
END ;
-- #desc						Add Item Related to Branch Plants
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId		Installation ID
-- #param BranchPlant    	    Branch Plant.
-- #param ShortProductNumbersXML	XML with short item numbers list.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_DelBranchPlantItems
(
	IN StoreId	GRAPHIC(3) CCSID 13488,
	IN BranchPlant		GRAPHIC(12) CCSID 13488,
	IN ShortProductNumbersXML	XML
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelBranchPlantItems 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLSHORTITEMNUMBERSTABLE (
		ShortProductNumber		NUMERIC(8,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	IF (ShortProductNumbersXML IS NOT NULL) THEN

		/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
		INSERT INTO SESSION.XMLSHORTITEMNUMBERSTABLE (ShortProductNumber)
		SELECT 
			items.ShortProductNumber
			FROM XMLTABLE ('$d/items/item'
			PASSING ShortProductNumbersXML AS "d"
			COLUMNS ShortProductNumber NUMERIC(8,0) PATH 'text()') AS items;
	
		DELETE FROM [SCDATA].FQ670005 A
        WHERE A.BP$9INID = StoreId
          AND A.BPMCU = BranchPlant
          AND EXISTS (
              SELECT 1 
              FROM SESSION.XMLSHORTITEMNUMBERSTABLE X
              WHERE X.ShortProductNumber = A.BPITM
          );

		-- Drop the temporary table 
        DROP TABLE SESSION.XMLSHORTITEMNUMBERSTABLE;

	END IF;
END;
-- #desc				        Delete Catalog,Delete Catalog Language
--					            Delete Catalog Detail and Delete Catalog Detail Language
-- #bl_class			        Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId			    Catalog Id.
-- #param InstallationID    	InstallationID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelCatalog
(    
	IN InstallationID     varchar(3),
	IN CatalogId		  varchar(3)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelCatalog 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DELETE FROM [SCDATA].FQ67412
WHERE
     (CA$9CLGID = CatalogId AND
      CA$9INID  = InstallationID);
      
--DELETE CATALOG LANG
CALL [SCLIBRARY].INV_DelCatalogLang(CatalogId,NULL);
--DELETE CATALOG DETAIL
CALL [SCLIBRARY].INV_DelCatalogDetail(CatalogId,NULL);
END ;
-- #desc					Delete Catalog Node Item
-- #bl_class				Premier.Inventory.CatalogNodeItem.cs/CatalogNodeItems.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AttributeID		Catalog ID
-- #param UniqueKeyID		UniqueKey ID
-- #param ItemNumber		ItemNumber

CREATE OR REPLACE Procedure [SCLIBRARY].INV_DelCatalogNodeItem
(
	CatalogID		VARCHAR(10),
	UniqueKeyID		NUMERIC(15,0),
	ItemNumber		NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelCatalogNodeItem 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DELETE FROM
		[SCDATA].FQ67413I
	WHERE
		IN$9CLGID = CatalogID AND
	    INUKID	= UniqueKeyID  AND
	    INITM	= ItemNumber;

END ;
-- #desc				    Delete Item Web Content Header and related registers
-- #bl_class			    Premier.Inventory.cs
-- #db_dependencies		    INV_DelItemWebContentHeadLang, INV_DelItemWebContentDetail
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param ItemNumber	    Item Number	 
-- #param DesignStatus		Design Status

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_DelItemWebContentHeader
(
	IN InstallationID varchar(3),
	IN ItemNumber NUMERIC(15,0),
	IN DesignStatus NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelItemWebContentHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE FROM [SCDATA].FQ67410

    WHERE(CHITM = ItemNumber AND
        CH$9INID = InstallationID AND
        CH$9DS = DesignStatus);
        
    CALL [SCLIBRARY].INV_DelItemWebContentHeadLang (InstallationID,ItemNumber,DesignStatus,null);
    
    --Delete all Item Web Content Detail asociated with Header
    CALL [SCLIBRARY].INV_DelItemWebContentDetail (InstallationID, ItemNumber, DesignStatus, null);

END ;
-- #desc					Del UOM 
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_DelUnitOfMeasure
(
    IN InstallationID   VARCHAR(3),
	IN UnitOfMeasure    VARCHAR(10)
	
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_DelUnitOfMeasure 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DELETE FROM
		[SCDATA].FQ67415
	WHERE
		UM$9INID = InstallationID
	    AND UMUOM = UnitOfMeasure;
	    
	CALL [SCLIBRARY].INV_DelUnitOfMeasureLang(UnitOfMeasure, null);
END

	 ;
-- #desc				            Verify if exist items for the DisplayItemNumber List provided and return the ShortItemNumber respective.
-- #bl_class				        Premier.Inventory.CheckDisplayItemNumbersCommand.cs
-- #db_dependencies			        N/A
-- #db_references			        N/A

-- #param DisplayItemSetting		Display Item Setting
-- #param DisplayItemnumbersXML		Display Item Number List

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcCheckDisplayItemNumbers
(
	IN DisplayItemSetting		GRAPHIC(4) CCSID 13488,
	IN DisplayItemnumbersXML	XML
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_ExcCheckDisplayItemNumbers 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
        
    /* Display Item Number as Long Item Number */
    DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT 
		I.IMITM AS ShortItemNumber, 
		I.IMLITM AS DisplayItemNumber 
    FROM 
        XMLTABLE('$d/items/item' PASSING DisplayItemNumbersXML AS "d" 
        COLUMNS displayitemnumber GRAPHIC(25) CCSID 13488 PATH 'text()') AS X
    INNER JOIN [SCDATA].F4101 I 
        ON I.IMLITM = X.displayitemnumber;
        
    /* Display Item Number as Auxiliar Item Number */
    DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT 
		I.IMITM AS ShortItemNumber, 
		I.IMAITM AS DisplayItemNumber 
    FROM 
        XMLTABLE('$d/items/item' PASSING DisplayItemNumbersXML AS "d" 
        COLUMNS displayitemnumber GRAPHIC(25) CCSID 13488 PATH 'text()') AS X
    INNER JOIN [SCDATA].F4101 I 
        ON I.IMAITM = X.displayitemnumber;

    /* Display Item Number as Short Item Number */
    DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT 
		I.IMITM AS ShortItemNumber, 
		CAST(I.IMITM AS VARGRAPHIC(25) CCSID 13488) AS DisplayItemNumber
    FROM 
        XMLTABLE('$d/items/item' PASSING DisplayItemNumbersXML AS "d" 
        COLUMNS displayitemnumber NUMERIC(8, 0) PATH 'text()') AS X
    INNER JOIN [SCDATA].F4101 I 
        ON I.IMITM = X.displayitemnumber;
        
	IF (DisplayItemSetting = 'LITM') THEN
        OPEN TEMP_CURSOR1;
	ELSEIF (DisplayItemSetting = 'AITM') THEN 
        OPEN TEMP_CURSOR2;		
    ELSE 
		OPEN TEMP_CURSOR3;	
    END IF;
END;

-- #desc				
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param ShortItemNumber		Short Item Number		

CREATE OR REPLACE Procedure [SCLIBRARY].INV_ExcCheckItemBranchOverr
(
	IN InstallationID			VARCHAR(3),
	IN ShortItemNumber			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcCheckItemBranchOverr 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT A.BPMCU AS BranchPlantID
	FROM
		[SCDATA].FQ670005 A			/*Branch Plant Override by Item and Installation ID*/
	INNER JOIN [SCDATA].FQ679910 B		/*BranchPlant by Installation*/
		ON B.BI$9INID = A.BP$9INID
		AND B.BIMCU = A.BPMCU
	WHERE
		A.BP$9INID = InstallationID AND
		A.BPITM = ShortItemNumber
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
 -- #desc						Copy a Catalog from Source Installation to Target Installation.
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID	    Installation ID.
-- #param InstallationIDFrom	Copy Installation ID.
-- #param SelectionKeys			Selection Keys.
-- #param UserID				User ID.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcCopyCatalog
(
		IN SourceInstallationID varchar(3),
		IN SourceCatalogID varchar(3),
		IN NewInstallationID varchar(3),
		IN NewCatalogID varchar(3)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcCopyCatalog 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN  

	--CATALOG COPY
	INSERT INTO [SCDATA].FQ67412 (CA$9CLGID, CA$9EFM, CAEFFF, CAEFFT, CADSC1, CASEQ, CA$9INID)
	(SELECT 
		NewCatalogID,
		CA$9EFM,
		CAEFFF,
		CAEFFT,
		CADSC1,
		CASEQ,
		NewInstallationID
	FROM [SCDATA].FQ67412
	WHERE CA$9CLGID = SourceCatalogID);

	--CATALOG HEADER LANG
	INSERT INTO [SCDATA].FQ67412L (CA$9CLGID, CALNGP, CADSC1)
	(SELECT 
		NewCatalogID,
		CALNGP,
		CADSC1
	FROM [SCDATA].FQ67412L
	WHERE CA$9CLGID = SourceCatalogID);

	--NODES COPY
	INSERT INTO [SCDATA].FQ67413 (CD$9CLGID, CDUKID, CD$9PKID, CD$9IIS, CDDTAI, CDKY, CDDL01, CD$9EFM, CDEFFF, CDEFFT, CDSEQ, CDIMGURL, CDTMPI)
	(SELECT
		NewCatalogID,
		CDUKID,
		CD$9PKID,
		CD$9IIS,
		CDDTAI,
		CDKY,
		CDDL01,
		CD$9EFM,
		CDEFFF,
		CDEFFT,
		CDSEQ,
		CDIMGURL,
		CDTMPI
	FROM [SCDATA].FQ67413
	WHERE CD$9CLGID = SourceCatalogID);
		
	--NODE ITEMS COPY
	INSERT INTO [SCDATA].FQ67413I (IN$9CLGID, INUKID, INITM, INSEQ, INURAB, INURAT, INURCD, INURDT, INURRF, INUSER, INPID, INUPMJ, INUPMT, INJOBN)
	(SELECT
		NewCatalogID,
		INUKID,
		INITM,
		INSEQ,
		INURAB,
		INURAT,
		INURCD,
		INURDT,
		INURRF,
		INUSER,
		INPID,
		INUPMJ,
		INUPMT,
		INJOBN
	FROM [SCDATA].FQ67413I
	WHERE IN$9CLGID = SourceCatalogID);

	--NODE LANGUAGES COPY
	INSERT INTO [SCDATA].FQ67413L (CD$9CLGID, CDUKID, CDLNGP, CDDL01)
	(SELECT
		NewCatalogID,
		CDUKID,
		CDLNGP,
		CDDL01
	FROM [SCDATA].FQ67413L
	WHERE CD$9CLGID = SourceCatalogID);
		
END ;
 -- #desc							Copy Item Web Content to Specific Installation
-- #bl_class						Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param SourceInstallation		Source Installation ID
-- #param TargetInstallation		Target Installation ID
-- #param ItemNumber				Item Number.
-- #param Status					Item Web Status.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcCopyItemWebContenToInst
(
		IN SourceInstallation varchar(3),
		IN TargetInstallation varchar(3),
		IN ItemNumber NUMERIC(15,0),
        IN Status NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcCopyItemWebContenToInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN  

	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = ItemNumber AND
    CH$9INID = TargetInstallation AND
	CH$9DS = Status;
	--Delete main header table language
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = TargetInstallation AND
	CL$9DS = Status;
	--Delete detail table
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = ItemNumber AND
    CD$9INID = TargetInstallation AND
	CD$9DS = Status;
	--Delete detail table language
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = TargetInstallation AND
	CL$9DS = Status;
	
INSERT INTO [SCDATA].FQ67410 (CHITM,CH$9INID,CH$9DS,CHDSC1,CHDSC2,CHDSC3,CHPGTX,CHDL01,CHDL02,CHDL03,CHDL04,CHDL05,CHDL06,CHDL07,CHDL08,CHDL09,CHDL10,CHCOMMENTS,CH$9PRI,CH$9HTML,CHPTURL,CHURCD,CHURDT,CHURAT,CHURAB,CHURRF,CHUSER,CHPID,CHJOBN,CHUPMJ,CHTDAY)
(
		 SELECT 
		    CHITM
           ,TargetInstallation
		   ,CH$9DS
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CHPGTX
           ,CHDL01
           ,CHDL02
           ,CHDL03
           ,CHDL04
           ,CHDL05
           ,CHDL06
           ,CHDL07
           ,CHDL08
           ,CHDL09
           ,CHDL10
           ,CHCOMMENTS
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,CHUPMJ
           ,CHTDAY
	FROM [SCDATA].FQ67410
	WHERE  
		CHITM = ItemNumber AND
        CH$9INID = SourceInstallation AND
		CH$9DS = Status
		);

INSERT INTO [SCDATA].FQ67410L (CLITM,CL$9INID,CL$9DS,CLLNGP,CLDSC1,CLDSC2,CLDSC3,CLPGTX,CLDL01,CLDL02,CLDL03,CLDL04,CLDL05,CLDL06,CLDL07,CLDL08,CLDL09,CLDL10,CLCOMMENTS,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
(
	SELECT 
			   CLITM
			  ,TargetInstallation
			  ,CL$9DS
			  ,CLLNGP
			  ,CLDSC1
			  ,CLDSC2
			  ,CLDSC3
			  ,CLPGTX
			  ,CLDL01
			  ,CLDL02
			  ,CLDL03
			  ,CLDL04
			  ,CLDL05
			  ,CLDL06
			  ,CLDL07
			  ,CLDL08
			  ,CLDL09
			  ,CLDL10
			  ,CLCOMMENTS
			  ,CL$9HTML
			  ,CLURCD
			  ,CLURDT
			  ,CLURAT
			  ,CLURAB
			  ,CLURRF
			  ,CLUSER
			  ,CLPID
			  ,CLJOBN
			  ,CLUPMJ
			  ,CLTDAY
	FROM [SCDATA].FQ67410L
	WHERE  
		CLITM = ItemNumber AND
        CL$9INID = SourceInstallation AND
		CL$9DS = Status		
		);
		
INSERT INTO [SCDATA].FQ67411(CDITM,CDUKID,CD$9INID,CD$9DS,CDSEQ,CD$9PTL,CD$9HTML,CDASAI,CDEFFF,CDEFFT,CDURCD,CDURDT,CDURAT,CDURAB,CDURRF,CDUSER,CDPID,CDJOBN,CDUPMJ,CDTDAY)
(
	SELECT 
		 CDITM
		,CDUKID
		,TargetInstallation
		,CD$9DS
		,CDSEQ
		,CD$9PTL
		,CD$9HTML
		,CDASAI
		,CDEFFF
		,CDEFFT
		,CDURCD
		,CDURDT
		,CDURAT
		,CDURAB
		,CDURRF
		,CDUSER
		,CDPID
		,CDJOBN
		,CDUPMJ
		,CDTDAY
	FROM [SCDATA].FQ67411
	WHERE  
		CDITM = ItemNumber AND
        CD$9INID = SourceInstallation AND
		CD$9DS = Status
);

INSERT INTO [SCDATA].FQ67411L (CLITM,CLUKID,CL$9INID,CL$9DS,CLLNGP,CL$9PTL,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
(
	SELECT 
		 CLITM
		,CLUKID
		,TargetInstallation
		,CL$9DS
		,CLLNGP
		,CL$9PTL
		,CL$9HTML
		,CLURCD
		,CLURDT
		,CLURAT
		,CLURAB
		,CLURRF
		,CLUSER
		,CLPID
		,CLJOBN
		,CLUPMJ
		,CLTDAY
	FROM [SCDATA].FQ67411L
	WHERE  
		CLITM = ItemNumber AND
        CL$9INID = SourceInstallation AND
		CL$9DS = Status
		);
		
END ;
-- DROP PROCEDURE [SCLIBRARY].INV_ExcExistItemContentByInst; 

-- #desc					Indicates if the Item Content of an installation exist
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number.
-- #param InstallationID	Installation ID.
-- #param DesignStatus		Desing Status.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_ExcExistItemContentByInst
(
	IN InstallationID	VARCHAR(3),
	IN ItemNumber	NUMERIC(15,0),
	IN DesignStatus	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcExistItemContentByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	IF NOT EXISTS(SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE (CH$9INID = InstallationID AND CHITM = ItemNumber) AND (DesignStatus IS NULL OR CH$9DS = DesignStatus))
	   THEN
	              set  InstallationID='***';
	   END IF;
	
	begin
	
	DECLARE  EXISTITEM_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		COUNT(*) AS ItemsCount
		, CH$9INID AS InstallationID 
		FROM [SCDATA].FQ67410 
		WHERE CH$9INID = InstallationID AND CHITM = ItemNumber
		AND (DesignStatus IS NULL OR CH$9DS = DesignStatus)
		GROUP BY CH$9INID
	
	FOR FETCH ONLY;
	OPEN EXISTITEM_CURSOR;
	end;
END;
-- #bl_class					Premier.Inventory.GetCatalogNodeXMLItemsCommand.cs
-- #desc						Returns the data of the items, langs.
-- #db_dependencies				INV_GetCatalogNodeListFnc
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param CatalogID				Catalog Id
-- #param CatalogMCU			Catalog MCU
														
CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatNodeXMLItemList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN CatalogID		GRAPHIC(3) CCSID 13488,
	IN CatalogMCU		GRAPHIC(12) CCSID 13488
)
DYNAMIC RESULT SETS 3
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_ExcGetCatNodeXMLItemList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	--Nodes and Installation vars
	DECLARE CountNodes			INTEGER;
	DECLARE IndexNode			INTEGER;
	DECLARE CurrentNode			NUMERIC(15,0);
	DECLARE SQL1				VARGRAPHIC(8000) CCSID 13488;
	DECLARE WhereConditions		VARGRAPHIC(1000) CCSID 13488;			
	DECLARE FromCondition		VARGRAPHIC(1000) CCSID 13488;

	DECLARE CurrentJulianDate	NUMERIC(9);
	DECLARE CurrentNodeIncludeInsearch NUMERIC(31,0);
	DECLARE EffectiveThruDate	NUMERIC(9);
	DECLARE EffectiveModeFlag	NUMERIC(9);
	DECLARE IsOverdue			Smallint;--Indicate if apply effective dates is on and the dates are overdue
	DECLARE EffectiveThruDateParent NUMERIC(9);
	DECLARE EffectiveModeFlagParent NUMERIC(9);
	-- Gets Cust Cross Document Restrictions
	DECLARE IncludeInSearch		NUMERIC(31,0);
	DECLARE Parent				NUMERIC(15,0);
	DECLARE ParentTmp			NUMERIC(15,0);	
	DECLARE CategoryCode		VARGRAPHIC(10) CCSID 13488; 
	DECLARE CategoryValue		VARGRAPHIC(10) CCSID 13488;       
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.NODELEAVES 
	(
		nodeId				NUMERIC(15,0) ,
		templateId			VARCHAR(10),
		parentId			NUMERIC(15,0),
		rankNode			NUMERIC(15,0),
		includeInsearch		NUMERIC(31,0),		 
		effectiveThruDate	NUMERIC(9),
		effectiveModeFlag	NUMERIC(9)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	CREATE UNIQUE  INDEX SESSION.NODELEAVES_TEMP_RANK  ON  SESSION.NODELEAVES (rankNode ASC) CLUSTER ;
	CREATE  UNIQUE  INDEX SESSION.NODELEAVES_TEMP_NODEID ON  SESSION.NODELEAVES (nodeId ASC) CLUSTER;
	
	/* Final table with items informations included matrix children items */
	DECLARE GLOBAL TEMPORARY TABLE SESSION.FINALITEMSTABLE (
		ItemNumber			NUMERIC(15,0) ,
		Description1		VARGRAPHIC(30) CCSID 13488,
		Description2		VARGRAPHIC(30) CCSID 13488,
		Description3		VARGRAPHIC(30) CCSID 13488,
		BranchPlant			VARCHAR(8000),
		PrimaryUnitMeasure	VARCHAR(2),
		PricingUnitMeasure	VARCHAR(2),
		ShippingUnitMeasure VARCHAR(2),
		Content				DBCLOB CCSID 13488,
		InventoryFlag		VARCHAR(1),
		CrossReference		VARCHAR(8000),
		LongItemNumber		VARCHAR(25),
		AuxiliaryItemNumber VARCHAR(25),
		StockingType		VARCHAR(2),
		InstallationID		VARCHAR(3),
		ScType				VARCHAR(1),
		Template			VARCHAR(20)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	CREATE UNIQUE INDEX SESSION.FINALITEMSTABLE_TEMP_ItemNumber ON SESSION.FINALITEMSTABLE (ItemNumber ASC) CLUSTER;
	
	/* Contains all items related directly with a catalog node, without Matrix children */	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.ITEMSTABLE (
		ItemNumber	NUMERIC(8,0),
		ScType		GRAPHIC(1) CCSID 13488,
		Template	GRAPHIC(20) CCSID 13488,
		Segment1	GRAPHIC(10) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	CREATE UNIQUE  INDEX SESSION.ITEMSTABLE_TEMP_ItemNumber  ON  SESSION.ITEMSTABLE (ItemNumber ASC) CLUSTER ;
	CREATE INDEX SESSION.ITEMSTABLE_TEMP_ScType ON SESSION.ITEMSTABLE (ScType ASC) CLUSTER;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.NODEITEM(
		nodeId	   NUMERIC(15,0),
		itemNumber NUMERIC(8,0),
		priority   DECIMAL(31,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
	/* All items per node */
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TEMPORARYITEMS(
		ItemNumber	NUMERIC(8,0),
		Priority	VARCHAR(25),
		ScType		GRAPHIC(1) CCSID 13488,
		Template	GRAPHIC(20) CCSID 13488,
		Segment1	GRAPHIC(10) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	CREATE UNIQUE  INDEX SESSION.TEMPORARYITEMS_ItemNumber  ON  SESSION.TEMPORARYITEMS(ItemNumber ASC) CLUSTER ;

	--Get leaf nodes
	INSERT INTO SESSION.NODELEAVES 
	(
		nodeId,
		templateId,
		parentId,
		rankNode,
		includeInSearch,
		effectiveThruDate,
		effectiveModeFlag
	)
	SELECT 
		A.UniqueKeyID, 
		A.TemplateID, 
		A.ParentKeyID, 
		RANK() OVER(ORDER BY  A.UniqueKeyID) AS RANK, 
		A.IncludeInSearch, 
		A.EffectiveThruDate, 
		A.EffectiveModeFlag
	FROM TABLE(SCLIBRARY.INV_GetCatalogNodeListFnc(CatalogID)) AS A
	WHERE NOT EXISTS (SELECT 1 FROM [SCDATA].FQ67413 B WHERE B.CD$9CLGID = CatalogID AND B.CD$9PKID = A.UniqueKeyID);
	GET DIAGNOSTICS CountNodes = ROW_COUNT;	
	
	SET IndexNode =0;
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	WHILE (IndexNode <  CountNodes )
	DO --Begin Loop 1
		SELECT NL.nodeId, NL.includeInsearch, NL.effectiveThruDate, NL.effectiveModeFlag INTO CurrentNode,CurrentNodeIncludeInsearch,EffectiveThruDate,EffectiveModeFlag FROM  SESSION.NODELEAVES NL WHERE rankNode =  IndexNode+1  FETCH FIRST 1 ROWS ONLY;
		 -------EXTRACT ITEMS DATA
		 IF EffectiveModeFlag =0 OR(EffectiveModeFlag=1 AND CurrentJulianDate <=EffectiveThruDate) THEN
			SET  WhereConditions = '';        
			SET  Parent =  currentNode;     			
			SET  ParentTmp =0;				
			SET  IsOverdue =0;
			SET  FromCondition = '';

						/* Verifies the availables include in search codes */
			IF currentNodeIncludeInsearch=0 OR currentNodeIncludeInsearch=2 OR currentNodeIncludeInsearch=4 OR currentNodeIncludeInsearch=5 THEN						
				WHILE Parent <> 0 AND  Parent IS NOT NULL AND IsOverdue=0 DO	/* Begin While 2 */
					SET  ParentTmp =  Parent;							
					SELECT A.CD$9IIS, A.CDDTAI,  A.CDKY,  A.CD$9PKID,A.CDEFFT, A.CD$9EFM
					INTO  IncludeInSearch, CategoryCode,CategoryValue, Parent, EffectiveThruDateParent, EffectiveModeFlagParent
					FROM [SCDATA].FQ67413 A
					WHERE A.CD$9CLGID =  CatalogID 
					AND A.CDUKID =  ParentTmp;
					
					IF EffectiveModeFlagParent=0 OR (EffectiveModeFlagParent=1 AND CurrentJulianDate <= EffectiveThruDateParent) THEN
						IF IncludeInSearch = 0 OR  IncludeInSearch = 2 THEN								
								IF  WhereConditions <> '' THEN									
									SET  WhereConditions =  WhereConditions ||  ' AND ';
								END IF; 									
								SET  WhereConditions =  WhereConditions ||  'IM' ||  LTRIM(RTRIM( CategoryCode)) ||  ' = ''' ||  LTRIM(RTRIM( CategoryValue)) ||  '''';									
							END IF;							
						IF  ParentTmp =  Parent THEN							
							SET  Parent = NULL;
						END IF;
					
					ELSE
						/* Break the While Process and set the node as excluded */
						SET IsOverdue= 1;
						SET Parent = NULL;
					END IF;
				END WHILE;									/* End While 2 */
				
				IF IsOverdue =0 THEN /* Begin Overdue verification */
					SET SQL1 = 'INSERT INTO SESSION.TEMPORARYITEMS (ItemNumber, Priority, ScType, Template, Segment1) ';
					IF(CurrentNodeIncludeInsearch = 0) THEN /*Filter by Cat Code  Include = 0*/
								
								SET FromCondition = ' [SCDATA].F4101 A 
														INNER JOIN [SCDATA].F40205 C
														ON C.LFLNTY = A.IMLNTY
														INNER JOIN [SCDATA].FQ679910 E                                 
														ON E.BI$9INID = ''' ||   InstallationID ||  '''                                                                                                                                       
														INNER JOIN [SCDATA].F4102 B
														ON B.IBITM = A.IMITM
														AND B.IBMCU = E.BIMCU';

								SET  SQL1 =	SQL1 ||
								'SELECT DISTINCT
									A.IMITM ItemNumber,	
									COALESCE (CONTENTINS.CH$9PRI, CONTENTBASE.CH$9PRI, 0) AS Priority,
									CASE 
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN N''M''
										ELSE N''S''
									END AS ScType, A.IMTMPL AS Template, A.IMSEG1 AS Segment1
								FROM ' || FromCondition ||        
								  ' LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  --Contents by Installation
									ON CONTENTINS.CHITM = A.IMITM  
									AND CONTENTINS.CH$9INID = ?
									AND CONTENTINS.CH$9DS =0  
									LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  --Contents Base
												ON CONTENTBASE.CHITM = A.IMITM  
												AND CONTENTBASE.CH$9INID = ''***''
												AND CONTENTBASE.CH$9DS =0     	                          
								WHERE ' ||   WhereConditions ||   ' AND (A.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D'')) 
								AND (IMTMPL = '''' OR IMMIC IN (''1'', ''''))
								UNION 
								SELECT   
									A.IMITM ItemNumber,
									COALESCE (CONTENTINS.CH$9PRI, CONTENTBASE.CH$9PRI, 0) AS Priority,
									CASE 
										WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
										WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN N''M''
										ELSE N''N''
									END AS ScType, A.IMTMPL AS Template, A.IMSEG1 AS Segment1
								FROM [SCDATA].F4101 A
								INNER JOIN [SCDATA].F40205 C
									ON C.LFLNTY = A.IMLNTY
								LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  --Contents by Installation
									ON CONTENTINS.CHITM = A.IMITM  
									AND CONTENTINS.CH$9INID = ?
									AND CONTENTINS.CH$9DS =0  
									LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  --Contents Base
												ON CONTENTBASE.CHITM = A.IMITM  
												AND CONTENTBASE.CH$9INID = ''***''
												AND CONTENTBASE.CH$9DS =0     	                         
								WHERE ' ||   WHERECONDITIONS ||  ' AND (A.IMSTKT =''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D'')) 
								AND (A.IMTMPL = '''' OR A.IMMIC IN (''1'', ''''))';
						ELSE /* If IncludeInSearch is ItemList = 2*/
						
								SET FromCondition = ' [SCDATA].FQ67413I D   /*Catalog Node Items*/						
														INNER JOIN  [SCDATA].F4101 A    															
														ON A.IMITM = D.INITM 
														INNER JOIN [SCDATA].F40205 C 
														ON C.LFLNTY = A.IMLNTY
														INNER JOIN [SCDATA].FQ679910 E                                 
														ON E.BI$9INID = ''' ||   InstallationID ||  '''                                                                                                                                         
														INNER JOIN [SCDATA].F4102 B
														ON B.IBITM = D.INITM 
														AND B.IBMCU = E.BIMCU  ';

						 SET  SQL1 =	SQL1||
							'
							SELECT DISTINCT
								A.IMITM ItemNumber,
								D.INSEQ AS Priority, 
								CASE 
									WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
									WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN N''M''
									ELSE N''S''
								END AS ScType, A.IMTMPL AS Template, A.IMSEG1 AS Segment1
							FROM ' || FromCondition || ' 
							WHERE D.IN$9CLGID = ? 
							AND D.INUKID = ?
							AND (A.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))
							UNION
							SELECT 
								A.IMITM ItemNumber,
								D.INSEQ AS Priority,  
								CASE 
									WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
									WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN N''M''
									ELSE N''N''
								END AS ScType, A.IMTMPL AS Template, A.IMSEG1 AS Segment1
							FROM
							[SCDATA].FQ67413I D 
							INNER JOIN [SCDATA].F4101 A 
							ON A.IMITM = D.INITM 
							INNER JOIN [SCDATA].F40205 C
							ON C.LFLNTY = A.IMLNTY
							WHERE D.IN$9CLGID = ? 
							AND D.INUKID = ? 
							AND (A.IMSTKT=''N'' OR (C.LFIVI<> ''Y'' AND C.LFIVI<> ''D''))';	
						 END IF;				
						/* CLEAR TEMP LOOP DATA */
						DELETE FROM SESSION.TEMPORARYITEMS;						 
						/* Execute the query fill the items associated */
						IF(CurrentNodeIncludeInsearch = 0) THEN
							PREPARE S1 FROM SQL1;
							EXECUTE S1 USING InstallationID, InstallationID;
						ELSE
							PREPARE S1 FROM SQL1;
							EXECUTE S1 USING CatalogID, currentNode, CatalogID, currentNode;
						END IF;
						
						/* Insert the relation of Items of Node with the items owned by the Node (@TEMPORARYITEMS) */
						INSERT INTO SESSION.NODEITEM(nodeId, itemNumber, priority)									
						SELECT currentNode,itemNumber,priority
						FROM SESSION.TEMPORARYITEMS;	   	
						
						/* Insert temporal items in list of all items */
						INSERT INTO SESSION.ITEMSTABLE (ItemNumber, ScType, Template, Segment1)
						SELECT A.ItemNumber, A.ScType, A.Template, A.Segment1
						FROM SESSION.TEMPORARYITEMS A
						WHERE										
							NOT EXISTS (SELECT B.ItemNumber FROM SESSION.ITEMSTABLE B WHERE B.ItemNumber = A.ItemNumber);             					 									
					END IF; /* END Overdue verification */
			END IF; /* Include in Search Codes */
		END IF; /* EFFECTIVE MODE FLAG */
		SET IndexNode = IndexNode+1;
	END WHILE; /* End Loop 1 */

	/* Gets all item information and insert that into #FINALITEMSTABLE */
	INSERT INTO SESSION.FINALITEMSTABLE (itemNumber,description1, description2, description3, branchPlant, crossReference, 
			primaryUnitMeasure, pricingUnitMeasure, shippingUnitMeasure, content, installationID, longItemNumber, auxiliaryItemNumber, inventoryFlag,
			stockingType, scType, template)
	SELECT 
			I.itemNumber	AS ItemNumber,
			COALESCE (CONTENTINS.CHDSC1, CONTENTBASE.CHDSC1, A.IMDSC1)					AS Description1, /* Description 1 */                           
			COALESCE (CONTENTINS.CHDSC2, CONTENTBASE.CHDSC2, A.IMDSC2)					AS Description2, /* DescRiption 2 */
			COALESCE (CONTENTINS.CHDSC3, CONTENTBASE.CHDSC3, ' ')						AS Description3 , /* Description 3 */
			COALESCE ((SCLIBRARY.INV_GetItemBranchPlantStrFnc(InstallationID, A.IMITM)), ' ')	AS BranchPlant,
			COALESCE ((SCLIBRARY.INV_GetItemCrossRefStrFnc(A.IMITM, ' ')), ' ')					AS CrossReference,
			A.IMUOM1		AS PrimaryUnitMeasure,
			A.IMUOM4		AS PricingUnitMeasure,
			A.IMUOM6		AS ShippingUnitMeasure, 							
			A.IMSRTX		AS Content,
			COALESCE (CONTENTINS.CH$9INID, '***') AS InstallationID,
			A.IMLITM		AS LongItemNumber,
			A.IMAITM		AS AuxiliaryItemNumber,
			C.LFIVI			AS InventoryFlag,
			A.IMSTKT		AS StockingType,
			I.ScType		AS ScType,
			A.IMTMPL		AS Template
		FROM SESSION.ITEMSTABLE I
		INNER JOIN [SCDATA].F4101 A
			ON A.IMITM = I.itemNumber
		INNER JOIN [SCDATA].F40205 C
			ON C.LFLNTY = A.IMLNTY
		LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  /* Contents by Installation */
			ON CONTENTINS.CHITM = I.itemNumber
			AND CONTENTINS.CH$9INID = InstallationID     
			AND CONTENTINS.CH$9DS = 0  
		LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  /* Contents Base */
			ON CONTENTBASE.CHITM = I.itemNumber 
			AND CONTENTBASE.CH$9INID = '***'
			AND CONTENTBASE.CH$9DS = 0;

	BEGIN
		/* Items Data Cursor */
		DECLARE ItemsData_Cursor CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT 
				I.ItemNumber,
				I.Description1,
				I.Description2,
				I.Description3,
				I.BranchPlant,
				I.CrossReference,
				I.PrimaryUnitMeasure,
				I.PricingUnitMeasure,
				I.ShippingUnitMeasure,
				I.LongItemNumber,
				I.AuxiliaryItemNumber,
				I.Content,
				InstallationID AS InstallationID, /*Return input installation*/
				I.StockingType,
				I.InventoryFlag,
				I.ScType,
				I.Template
			FROM SESSION.FINALITEMSTABLE AS I 
			FOR FETCH ONLY;
			
			/* Items Node List Cursor */
			DECLARE ItemsNodeList_Cursor CURSOR  WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT * FROM SESSION.NODEITEM FOR FETCH ONLY;

		/* Lags cursor */
			DECLARE Langs_Cursor CURSOR WITH  HOLD WITH RETURN TO CLIENT FOR			
				SELECT  ITMLANG.CLITM ItemId,ITMLANG.CLLNGP LangId,COALESCE(ITMLANG.CLDSC1,'') Description1,COALESCE(ITMLANG.CLDSC2,'') Description2,COALESCE(ITMLANG.CLDSC3  ,'')Description3,
						 ITM.crossReference,ITM.longItemNumber,ITM.auxiliaryItemNumber
				FROM 	 [SCDATA].FQ67410L ITMLANG,  SESSION.FINALITEMSTABLE	ITM
				WHERE ITMLANG.CLITM = itemNumber 
				   AND (ITMLANG.CL$9INID =  ITM.installationID) /* INSTALLATION */
				   AND(ITMLANG.CL$9DS =0)FOR FETCH ONLY ;	
							
		/*Open Cursors region */
			OPEN ItemsData_Cursor;	
			OPEN ItemsNodeList_Cursor;
			OPEN Langs_Cursor;
		/* End region of Cursors */
		
		COMMIT;
	END; /* End region Attributes */
END ;
-- #desc							Get the list of cross reference by installation
-- #bl_class						Premier.Inventory.GetCatXMLCrossReferencesCommand.cs	
-- #db_dependencies					N/A
-- #db_references					N/A					

-- #param InstallationID		    Installation ID
-- #param AddressNumber				Optional  -- Address Number
-- #param ShortItemNumber		    Optional  -- Item Number 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatXMLCrossRefList
(
	IN InstallationID GRAPHIC(3) CCSID 13488,
	IN AddressNumber NUMERIC(15,0),
	IN ShortItemNumber NUMERIC(8,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcGetCatXMLCrossRefList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	
	--Gets the custom cross reference type of installation
	DECLARE CustCrossRefType	GRAPHIC(2) CCSID 13488;
	DECLARE CustCrossConstantINID GRAPHIC(3) CCSID 13488;	
	DECLARE CurrentJulianDate NUMERIC(6,0);

	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate(CURRENT DATE);
	SET CustCrossConstantINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('CUST_CROSS',  CustCrossConstantINID,  CustCrossRefType)  ;
	BEGIN
   		DECLARE CROSSREF_CUR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 	
		SELECT DISTINCT
			   A.WA$9AN8  AS AddressNumber,
			   B.IVITM AS ShortItemNumber,
			   B.IVXRT AS CrossRefType,
			   B.IVCITM AS RefProductNumber,
			   B.IVEFTJ AS EfectiveDate, 		   
			   B.IVEXDJ AS ExpirationDate
		   
		FROM [SCDATA].FQ67101 A,
			 [SCDATA].F4104 B
		WHERE B.IVAN8 = A.WA$9AN8
			AND A.WA$9INID = InstallationID
			AND B.IVXRT = CustCrossRefType
			AND CurrentJulianDate <= B.IVEXDJ
			AND ( AddressNumber IS NULL OR A.WA$9AN8 =  AddressNumber)
			AND (  ShortItemNumber IS NULL OR B.IVITM =  ShortItemNumber) 
		FOR FETCH ONLY;
		OPEN CROSSREF_CUR;
	END;		
END;
-- #desc								Get the list of items by installation
-- #bl_class							Premier.Inventory.GetCatXMLCutomersItemsCommand.cs
-- #db_dependencies						N/A
-- #db_references						N/A						

-- #param InstallationID				Installation ID
-- #param AddressNumber				    (AN8) Address Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatXMLCustomersItems
(
	IN InstallationID	VARCHAR(3),
	IN AddressNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcGetCatXMLCustomersItems 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE DefCustomerConstant		VARGRAPHIC(256) CCSID 13488;
	DECLARE DefCustomer				NUMERIC(15,0) DEFAULT 0;
	DECLARE ConstantINID			VARCHAR(3);

	DECLARE CUSTOMERSITEMS_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT DISTINCT 
		CAST(SXXRVF AS NUMERIC(15,0)) AddressNumber,
		CAST(SXXRVT AS NUMERIC(15,0)) ItemNumber
	FROM [SCDATA].FQ67101
    INNER JOIN [SCDATA].F4013
        ON WA$9AN8=SXXRVF  AND
        SXEDF1 = 'S' AND SXXRTC = 'IR'  
    WHERE	
		((AddressNumber IS NULL OR SXXRVF = AddressNumber) AND WA$9INID = InstallationID )
		OR (AddressNumber IS NULL AND SXXRVF = DefCustomer)
	FOR FETCH ONLY;


	-- Get the Default Customer value constant
	SET ConstantINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue ('DEFCUSTOM', ConstantINID, DefCustomerConstant);
	SET DefCustomer = CAST(DefCustomerConstant AS NUMERIC(15,0));

	OPEN CUSTOMERSITEMS_CURSOR1;
				 
END;


-- #desc						Returns the nodes  and languages of a catalog
-- #bl_class					Premier.Inventory.GetCatalogXMLNodesCommand.cs
-- #db_dependencies				INV_GetCatalogNodeListFnc, INV_GetCatalogDetailLang
-- #db_references				N/A

-- #param CatalogID				Catalog Id

 CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetCatXMLNodeList
(
	  IN CatalogID VARCHAR(3)
)
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcGetCatXMLNodeList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE  NODE_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT     
		UniqueKeyID,
		ParentKeyID,
		IncludeInSearch,
		Description,
		EffectiveModeFlag,
		EffectiveFromDate,
		EffectiveThruDate,
		SequenceNumber,
		ImageName,
		TemplateID         
	FROM TABLE(SCLIBRARY.INV_GetCatalogNodeListFnc(CatalogID)) AS F
	ORDER BY ParentKeyID, SequenceNumber
	FOR FETCH  ONLY;
	OPEN NODE_CURSOR;
	
	CALL [SCLIBRARY].INV_GetCatalogDetailLang(CatalogID,NULL,'*');
END

 ;
--DROP SPECIFIC PROCEDURE [SCLIBRARY].INV_ExcGetConfigProdSegments;

-- #desc							Return configured product segment options
-- #bl_class						Premier.Inventory.ConfiguredProductComponentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A						

-- #param ProductNumber				Long Product Number
-- #param StoreId					Store Id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetConfigProdSegments
(
	IN ProductNumber GRAPHIC(25) CCSID 13488,
	IN StoreId GRAPHIC(3) CCSID 13488
)
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcGetConfigProdSegments
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN

	DECLARE MCU VARGRAPHIC(12) CCSID 13488;
	DECLARE SHORTPRODUCTNUMBER		NUMERIC(8,0) DEFAULT 0;
	DECLARE CurrentJulianDate NUMERIC(6,0) DEFAULT 0;

	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	
	SET SHORTPRODUCTNUMBER = (SELECT IMITM AS ShortProductNumber FROM [SCDATA].F4101 WHERE IMLITM = ProductNumber);

	SET MCU = (SELECT A.BPMCU
				FROM
					[SCDATA].FQ670005 A			/*Branch Plant Override by Item and Installation ID*/
				INNER JOIN [SCDATA].FQ679910 B		/*BranchPlant by Installation*/
					ON B.BI$9INID = A.BP$9INID
					AND B.BIMCU = A.BPMCU
				WHERE
					A.BP$9INID = StoreId AND
					A.BPITM = SHORTPRODUCTNUMBER);

	IF MCU IS NULL THEN
		SET MCU = (SELECT KWMCU
				FROM [SCDATA].F3291 
				WHERE KWKIT = SHORTPRODUCTNUMBER
				FETCH FIRST 1 ROWS ONLY);
	END IF;
	
		BEGIN
			DECLARE  NODE_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			 
			 WITH 
				CTE (KYKIT, KYITM) AS
					(SELECT KYKIT,
							KYITM
						FROM [SCDATA].F3293
						WHERE KYKIT = SHORTPRODUCTNUMBER AND 
								KYKIT <> KYITM AND
								KYITM <> 0 AND
								((CurrentJulianDate BETWEEN KYEFFF AND KYEFFT) OR (KYEFFF = 0 AND KYEFFT = 0 AND KYAO IN ('I','A','O'))) /*Validate if rules are not expired*/
						UNION ALL
						SELECT
							B.KYKIT,
							B.KYITM
						FROM CTE A, [SCDATA].F3293 B
						WHERE A.KYITM = B.KYKIT AND 
								B.KYKIT <> B.KYITM AND 
								B.KYITM <> 0 AND
								((CurrentJulianDate BETWEEN B.KYEFFF AND B.KYEFFT) OR (B.KYEFFF = 0 AND B.KYEFFT = 0 AND B.KYAO IN ('I','A','O')))), /*Validate if rules are not expired*/
				CTE2 AS 
					(SELECT DISTINCT(KYITM) /*Retrieve assembly product numbers*/
					 FROM CTE
					 UNION ALL
					 SELECT SHORTPRODUCTNUMBER AS KYITM
					 FROM SYSIBM.SYSDUMMY1)
			
				SELECT 
					KWKIT AS ShortProductNumber,
					KWPEL AS SegmentNumber, 
					MIN(KWDSC1) AS SegmentDescription, 
					KWSY AS ProductCode, 
					KWRT AS UserDefinedCode, 
					DRKY AS UserDefinedKey, 
					DRDL01 AS SegmentValueDescription,
					MIN(KWDTAS) AS SegmentSequence
				FROM CTE2 
					INNER JOIN [SCDATA].F3291 
						ON KYITM = KWKIT
					LEFT OUTER JOIN [SCCTL].F0005 
						ON DRRT = KWRT AND 
						   DRSY = KWSY
				WHERE 
					(KWMCU = MCU OR KWMCU = '') 
					AND KWATRQ <> 'C'
				GROUP BY KWKIT, KWPEL, KWSY, KWRT, DRKY, DRDL01
				ORDER BY KWPEL
				FOR FETCH  ONLY;

			OPEN NODE_CURSOR;
		END;
END;

--DROP PROCEDURE [SCLIBRARY].INV_ExcGetItemXMLInfo;

-- #desc				
-- #bl_class						Premier.Inventory.CatalogNSMItemUpdateCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

 CREATE OR REPLACE Procedure [SCLIBRARY].INV_ExcGetItemXMLInfo
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN ShortItemNumber	NUMERIC(8,0)
	
)
DYNAMIC RESULT SETS 3
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcGetItemXMLInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE RECORDFOUND  INT DEFAULT 0;	
	DECLARE ItemWebContentINID     GRAPHIC(3) CCSID 13488;
	SET ItemWebContentINID = InstallationID;
	
	/* CHECK IF ITEM HAS CONTENT */
	SELECT COUNT(1)
	INTO RECORDFOUND
	FROM [SCDATA].FQ67410 
	WHERE CHITM = ShortItemNumber
	   AND CH$9INID = InstallationID
	   AND CH$9DS = 0;
	   
	IF (RECORDFOUND = 0) 
	THEN
		SET ItemWebContentINID = '***';
	END IF;	
	
	BEGIN /* Region Item Data */
		DECLARE  ITEMS_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT
			A.IMITM ItemNumber,
			COALESCE(CONTENT.CHDSC1, A.IMDSC1) AS description1, /* Description 1 */
			COALESCE(CONTENT.CHDSC2, A.IMDSC2) AS description2, /* Description 2 */
			COALESCE(CONTENT.CHDSC3, ' ') AS description3, /* Description 3 */
			COALESCE((SCLIBRARY.INV_GetItemBranchPlantStrFnc(  InstallationID ,A.IMITM)), ' ') branchPlant,
			COALESCE((SCLIBRARY.INV_GetItemCrossRefStrFnc(A.IMITM,' ')), ' ') crossReference,
			A.IMUOM1 primaryUnitMeasure,
			A.IMUOM4 pricingUnitMeasure,
			A.IMUOM6 shippingUnitMeasure,
			A.IMLITM longItemNumber,
			A.IMAITM auxiliaryItemNumber,					
			A.IMSRTX  AS Content,
			A.IMSTKT  StockingType,
			B.LFIVI   InventoryFlag,
			CASE 
				WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
				WHEN A.IMMIC = '1' AND TRIM(A.IMTMPL) <> '' THEN N'M'
				WHEN (A.IMSTKT <> N'N' AND (B.LFIVI = N'Y' OR B.LFIVI = N'D')) THEN N'S'
				ELSE N'N'
			END AS ScType,
			A.IMTMPL AS Template
		FROM
			[SCDATA].F4101 A			  
			LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENT
						ON  CONTENT.CHITM = A.IMITM  
						AND CONTENT.CH$9INID = ItemWebContentINID
						AND CONTENT.CH$9DS = 0     	    
			INNER JOIN [SCDATA].F40205 B   /*Line Type Control Table*/
				ON B.LFLNTY = A.IMLNTY  	                                                
		WHERE A.IMITM = ShortItemNumber
	FOR FETCH ONLY;
	OPEN ITEMS_CURSOR;	
	END;
	
	BEGIN /* Region LANGS */
		DECLARE  ITEMSlANGS_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		/* SELECT THE ITEMS BY INSTALLATION */
		(
			SELECT  ITMLANG.CLITM ItemId,ITMLANG.CLLNGP LangId,COALESCE(ITMLANG.CLDSC1,'') Description1,COALESCE(ITMLANG.CLDSC2,'') Description2,COALESCE(ITMLANG.CLDSC3  ,'')Description3
			FROM 	 [SCDATA].FQ67410L ITMLANG
			WHERE ITMLANG.CLITM =  ShortItemNumber 
			   AND ITMLANG.CL$9INID = ItemWebContentINID /* INSTALLATION */
			   AND ITMLANG.CL$9DS = 0			
		)
		FOR FETCH ONLY;
		OPEN ITEMSlANGS_CURSOR;
	END;				
	
END;
--DROP PROCEDURE [SCLIBRARY].INV_ExcGetItemXMLInfo;

-- #desc				
-- #bl_class							Premier.Inventory.CatalogNSMMassiveItemsUpdateCommand.cs
-- #db_dependencies						N/A
-- #db_references						N/A	

--	#param InstallationID				Installation ID
--	#param ShortItemNumbersXML			XML of Short Item Numbers to be published, XML Template : <items><item>60020</item></items>

 CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcGetItemXMLList
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN ShortItemNumbersXML	XML
)
DYNAMIC RESULT SETS 3
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcGetItemXMLList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBL 
	(
		ShortItemNumber		NUMERIC(8,0), 
		InstallationID		GRAPHIC(3) CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	/* Check if item has content */
	INSERT INTO SESSION.TBL(ShortItemNumber, InstallationID)
	SELECT 
		A.ShortItemNumber,
		COALESCE(B.CH$9INID, '***') AS InstallationID
    FROM 
        XMLTABLE('$d/items/item' PASSING ShortItemNumbersXML AS "d" 
        COLUMNS shortItemNumber NUMERIC(8, 0) PATH 'text()') AS A
    LEFT OUTER JOIN [SCDATA].FQ67410 B
		ON B.CHITM = A.ShortItemNumber
			AND B.CH$9INID = InstallationID
			AND B.CH$9DS = 0;

	/* Region Item Data */
	BEGIN 
		DECLARE  ITEMS_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT
			A.IMITM ItemNumber,
			COALESCE(CONTENT.CHDSC1, A.IMDSC1) AS description1, /* Description 1 */
			COALESCE(CONTENT.CHDSC2, A.IMDSC2) AS description2, /* Description 2 */
			COALESCE(CONTENT.CHDSC3, ' ') AS description3, /* Description 3 */
			COALESCE((SCLIBRARY.INV_GetItemBranchPlantStrFnc(  InstallationID ,A.IMITM)), ' ') branchPlant,
			COALESCE((SCLIBRARY.INV_GetItemCrossRefStrFnc(A.IMITM,' ')), ' ') crossReference,
			A.IMUOM1 primaryUnitMeasure,
			A.IMUOM4 pricingUnitMeasure,
			A.IMUOM6 shippingUnitMeasure,
			A.IMLITM longItemNumber,
			A.IMAITM auxiliaryItemNumber,					
			A.IMSRTX  AS Content,
			A.IMSTKT  StockingType,
			B.LFIVI   InventoryFlag,
			CASE 
				WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
				WHEN A.IMMIC = '1' AND A.IMTMPL <> '' THEN N'M'
				WHEN (A.IMSTKT <> N'N' AND (B.LFIVI = N'Y' OR B.LFIVI = N'D')) THEN N'S'
				ELSE N'N'
			END AS ScType,
			A.IMTMPL AS Template
		FROM
			[SCDATA].F4101 A
			INNER JOIN SESSION.TBL C
				ON C.ShortItemNumber = A.IMITM
			INNER JOIN [SCDATA].F40205 B   /*Line Type Control Table*/
				ON B.LFLNTY = A.IMLNTY
			LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENT
				ON  CONTENT.CHITM = C.ShortItemNumber
				AND CONTENT.CH$9INID = C.InstallationID
				AND CONTENT.CH$9DS = 0
		FOR FETCH ONLY;

		OPEN ITEMS_CURSOR;	
	END;/* End region Item Data */

	/* Region LANGS */
	BEGIN 
		DECLARE  ITEMSlANGS_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		/* SELECT THE ITEMS BY INSTALLATION */
		(
			SELECT  ITMLANG.CLITM ItemId, ITMLANG.CLLNGP LangId, COALESCE(ITMLANG.CLDSC1,'') Description1, COALESCE(ITMLANG.CLDSC2,'') Description2, COALESCE(ITMLANG.CLDSC3  ,'') Description3,
					 COALESCE ( ( [SCLIBRARY].INV_GETITEMCROSSREFSTRFNC ( ITMLANG.CLITM , ' ' ) ) , ' ' ) crossReference, 
				      D.IMLITM AS longItemNumber ,
					  D.IMAITM AS auxiliaryItemNumber 
			FROM	[SCDATA].FQ67410L ITMLANG 
			INNER JOIN SESSION.TBL C 
				ON C.SHORTITEMNUMBER = ITMLANG.CLITM 
				AND C.INSTALLATIONID = ITMLANG.CL$9INID 
            INNER JOIN [SCDATA] . F4101 D
                ON D.IMITM = ITMLANG.CLITM 
			WHERE ITMLANG.CL$9DS = 0			
		)
		FOR FETCH ONLY;

		OPEN ITEMSlANGS_CURSOR;
	END; /* End region LANGS */
	
END;
-- #desc							Check the Item back order status
-- #bl_class						Premier.Inventory.ItemBackOrderStatus.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param AddressNumber				Address Number
-- #param ShortItemNumber			Short Item Number
-- #param BranchPlant				Branch Plant

CREATE OR REPLACE Procedure [SCLIBRARY].INV_ExcItemBackOrderStatus
(
    IN Company			VARCHAR(5),
	IN AddressNumber	NUMERIC(15,0),
	IN ShortItemNumber	NUMERIC(15,0),
	IN BranchPlant		VARCHAR(12)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcItemBackOrderStatus 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE AllowBackOrder VARCHAR(1);
	
	DECLARE ALLOWEDCURSOR CURSOR WITH HOLD WITH RETURN FOR 
		SELECT 'Y' AS AllowBackOrder 
			FROM SYSIBM.SYSDUMMY1
	FOR FETCH ONLY;
	
	DECLARE NOTALLOWEDCURSOR CURSOR WITH HOLD WITH RETURN FOR 
		SELECT 'N' AS AllowBackOrder 
			FROM SYSIBM.SYSDUMMY1
	FOR FETCH ONLY;
	
	SELECT IMBACK INTO AllowBackOrder FROM [SCDATA].F4101 WHERE IMITM = ShortItemNumber;
	IF (AllowBackOrder = 'Y') THEN
		SELECT IBBACK INTO AllowBackOrder FROM [SCDATA].F4102 WHERE IBITM = ShortItemNumber AND IBMCU = BranchPlant;
		IF (AllowBackOrder = 'Y')THEN
			SELECT AIBACK INTO AllowBackOrder FROM TABLE(SCLIBRARY.CST_GetCustomerInfoFnc(Company, AddressNumber)) AS IA;
			IF (AllowBackOrder = 'Y')THEN
				SELECT CIBACK INTO AllowBackOrder FROM [SCDATA].F41001 WHERE CIMCU = BranchPlant;
				IF (AllowBackOrder = 'Y')THEN
					OPEN ALLOWEDCURSOR;
					RETURN;
				END IF;
			END IF;
		END IF;
	END IF;
	OPEN NOTALLOWEDCURSOR;
END
 ;
-- #desc					Return if the Item is or not  Category Code Validation Restricted
-- #bl_class				Premier.Inventory.ItemCategoryCodeValidationCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param InstallationID	Installation ID
-- #param ShortItemNumber   Item Number
-- #param BranchPlant		BranchPlant
-- #param IsValid			The Item IsValid or Not 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcItemCatCodeValidation
(
	IN InstallationID	GRAPHIC(3) CCSID 13488, 		
	IN BranchPlant		GRAPHIC(12) CCSID 13488,
	IN ShortItemNumber	NUMERIC(8,0),
	INOUT IsValid		INT 
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcItemCatCodeValidation
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE STRSQL VARGRAPHIC(1000) CCSID 13488;
	DECLARE StockingType GRAPHIC(1) CCSID 13488;
	DECLARE InventoryFlag GRAPHIC(1) CCSID 13488;
	
	/*Reads Category Code Restriction Constant*/	
	DECLARE strInstallationId GRAPHIC(3) CCSID 13488;
	DECLARE strConstantValue VARGRAPHIC(10) CCSID 13488;
	
	DECLARE strCategoryValue GRAPHIC(10) CCSID 13488;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.CATEGORYCODE
	(
		CATEGORY GRAPHIC(10) CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	/*************************************************************************************/
	/*Reads Category Code Restriction Constant*/
	SET strInstallationId = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue ('CC_RESTRIC', strInstallationId, strConstantValue);
	
	/*************************************************************************************/
	
	
	IF (strConstantValue = '' OR strConstantValue IS NULL )
		THEN
			SET IsValid = 1; --true
			
	ELSE 
		SET StockingType = (SELECT IMSTKT FROM [SCDATA].F4101 WHERE IMITM = ShortItemNumber);
		IF(StockingType <> 'N') THEN			
			SET InventoryFlag = (SELECT LFIVI FROM [SCDATA].F4101 
								 INNER JOIN [SCDATA].F40205 
									ON IMLNTY = LFLNTY 
								 WHERE IMITM = ShortItemNumber);
		END IF;

		IF(StockingType = 'N' OR (InventoryFlag <> 'Y' AND InventoryFlag <> 'D')) THEN
			SET STRSQL = ' INSERT INTO SESSION.CATEGORYCODE SELECT IM' || strConstantValue ||
			' FROM [SCDATA].F4101 WHERE IMITM = ? 
			  AND (1 = 1 OR ? IS NULL) ' ;
        ELSE 
			SET STRSQL = ' INSERT INTO SESSION.CATEGORYCODE SELECT IB' || strConstantValue ||
			' FROM [SCDATA].F4102 WHERE IBITM = ?
			  AND IBMCU = ? ' ;
		END IF;
		
		PREPARE S1 FROM STRSQL; 
		EXECUTE S1 USING ShortItemNumber, BranchPlant;
		
		SET strCategoryValue = (SELECT CATEGORY FROM SESSION.CATEGORYCODE);

		SET IsValid = (SELECT COUNT(1) FROM [SCDATA].FQ67008 DR
						WHERE DR.DR$9INID = strInstallationId
							AND DR.DR$9CNST = 'CC_RESTRIC'
							AND DR.DRKY = strCategoryValue
						FETCH FIRST 1 ROW ONLY);

	END IF;

	DROP TABLE SESSION.CATEGORYCODE;

END ;
-- #desc						Return if the Item is or not StockingType restricted
-- #bl_class					Premier.Inventory.ItemStockingTypeValidationCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param InstallationID		Installation ID
-- #param ShortItemNumber		Item Number
-- #param BranchPlant			BranchPlant
-- #param IsValid				The Item IsValid or Not
-- #param IsObsolete			The Item IsObsolete or Not
-- #param IsInBranchPlant		The Item IsInBranchPlant or Not

-- Note /*	1= True    0 = False	*/

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcItemStockTypeValidation
(
	IN InstallationID 	GRAPHIC(3) CCSID 13488,
	IN BranchPlant		GRAPHIC(12) CCSID 13488,
	IN ShortItemNumber	NUMERIC(8,0),
	INOUT IsValid		INT,
	INOUT IsObsolete	INT,
	INOUT IsInBranchPlant INT,
	OUT StockingType	GRAPHIC(1) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcItemStockTypeValidation
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	-- Gets the ST_RESTRIC Document Restrictions Parameters
	DECLARE RestrictConst		VARGRAPHIC(1) CCSID 13488;
	DECLARE ItemConstantINID    GRAPHIC(3) CCSID 13488;
	DECLARE tmpStockingType		GRAPHIC(1) CCSID 13488;
	DECLARE InventoryFlag		GRAPHIC(1) CCSID 13488;
	SET ItemConstantINID = InstallationID;

	SELECT IMSTKT INTO tmpStockingType 
	FROM [SCDATA].F4101 
	WHERE IMITM = ShortItemNumber 
	FETCH FIRST 1 ROW ONLY;

	SELECT LFIVI INTO InventoryFlag
	FROM [SCDATA].F4101 AS A
	INNER JOIN [SCDATA].F40205 AS B
		ON A.IMLNTY = B.LFLNTY 
	WHERE A.IMITM = ShortItemNumber
	FETCH FIRST 1 ROW ONLY;
	
	IF (tmpStockingType <> 'N' AND (InventoryFlag = 'Y' OR InventoryFlag = 'D')) THEN
		SET tmpStockingType = (SELECT IBSTKT 
								FROM [SCDATA].F4102 
								WHERE IBITM = ShortItemNumber AND IBMCU = BranchPlant 
								FETCH FIRST 1 ROW ONLY);
    END IF;

	IF (tmpStockingType IS NULL) THEN
			SET IsInBranchPlant = 0;	--FALSE
			SET IsValid = 0;			--FALSE
			SET IsObsolete = 1;		--Is Obsolete		
			SET StockingType = '';
	ELSE
		IF (tmpStockingType <> 'O')THEN
			SET IsInBranchPlant = 1;	--TRUE
			SET IsObsolete = 0;			-- Is not Obsolete
			CALL [SCLIBRARY].CMM_GetConstantValue('ST_RESTRIC', ItemConstantINID, RestrictConst);

			IF (RestrictConst = '1') THEN
				SET IsValid = (SELECT COUNT(1) FROM [SCDATA].FQ67008 DR
								WHERE DR.DR$9INID = ItemConstantINID
									AND DR.DR$9CNST = 'ST_RESTRIC'
									AND DR.DRKY = tmpStockingType
								FETCH FIRST 1 ROW ONLY);
			ELSE
				SET IsValid = 1;
			END IF;
		ELSE
			SET IsInBranchPlant = 1;	/*TRUE*/
			SET IsValid = 0;			/*FALSE*/
			SET IsObsolete = 1;			/*TRUE*/
		END IF;
		SET StockingType = tmpStockingType;
	END IF;
END ;
-- #desc						Move items from a Branch Plant to another
-- #bl_class					Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param BranchPlantTo  	    Branch Plant.
-- #param ShortProductNumbersXML XML Short Product Numbers List.
-- #param UserID				User ID
-- #param ProgramID				Program ID
-- #param WorkStationID			WorkStation ID
-- #param DateUpdated			Date Updated 
-- #param TimeLastUpdated		Time Last Updated

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcMoveItemBranchOverr
(   
	IN StoreId				GRAPHIC(3) CCSID 13488,
	IN BranchPlantTo		GRAPHIC(12) CCSID 13488,
	IN ShortProductNumbersXML	XML,
	IN UserID				GRAPHIC(10) CCSID 13488,
	IN ProgramId			GRAPHIC(10) CCSID 13488,
	IN WorkStationID		GRAPHIC(10) CCSID 13488,
	IN DateUpdated			NUMERIC(6,0),
	IN TimeLastUpdated		NUMERIC(6,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcMoveItemBranchOverr 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN
	DECLARE SQL_DYNAMIC DBCLOB CCSID 13488;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLPRODUCTNUMBERSTABLE (
		ShortProductNumber		NUMERIC(8,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	IF (ShortProductNumbersXML IS NOT NULL) THEN
		
		/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
		INSERT INTO SESSION.XMLPRODUCTNUMBERSTABLE (ShortProductNumber)
		SELECT 
			items.ShortProductNumber
			FROM XMLTABLE ('$d/items/item'
			PASSING ShortProductNumbersXML AS "d"
			COLUMNS ShortProductNumber NUMERIC(8,0) PATH 'text()') AS items;
	

	    /* Update using MERGE statement */
    MERGE INTO [SCDATA].FQ670005 AS item
    USING (
        SELECT 
            X.ShortProductNumber,
            BranchPlantTo,
            UserID,
            ProgramId,
            WorkStationID,
            DateUpdated,
            TimeLastUpdated,
            StoreId
        FROM SESSION.XMLPRODUCTNUMBERSTABLE X
    ) AS uv
    ON item.BPITM = uv.ShortProductNumber AND item.BP$9INID = uv.StoreId
    WHEN MATCHED THEN
        UPDATE SET
            item.BPMCU = uv.BranchPlantTo,
            item.BPUSER = uv.UserID,
            item.BPPID = uv.ProgramId,
            item.BPJOBN = uv.WorkStationID,
            item.BPUPMJ = uv.DateUpdated,
            item.BPUPMT = uv.TimeLastUpdated;
	END IF; 	
END ;
-- #desc						Update Catalog Sequence
-- #bl_class					Premier.Inventory.CatalogList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param CatalogIDs 			Catalog IDs

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcUpdCatalogSequence 
(
	CatalogIDs 		VARGRAPHIC(8000) CCSID 13488
)

LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcUpdCatalogSequence
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN 

	DECLARE Pos INTEGER DEFAULT 0;
	DECLARE SequenceNumb DECIMAL DEFAULT 0;
	DECLARE NextString VARCHAR(6);

	IF (CatalogIDs <> '') THEN
		SET Pos = POSSTR(CatalogIDs, '|@');
		WHILE_LOOP:
		WHILE ( Pos <> 0 ) DO
			SET NextString = substring(CatalogIDs, 1, Pos - 1);
			SET CatalogIDs = substring(CatalogIDs,Pos + 2,LENGTH(CatalogIDs));
			SET Pos = POSSTR(CatalogIDs,'|@');
			SET SequenceNumb = SequenceNumb + 1;

			UPDATE
				[SCDATA].FQ67412
			SET
				CASEQ   = SequenceNumb
			WHERE
				UPPER(LTRIM(RTRIM(CA$9CLGID))) = UPPER(LTRIM(RTRIM(NextString)));
		END WHILE WHILE_LOOP;
	END IF;
END ;
-- #desc					Update Content Status.
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID		
-- #param ItemNumber		Item Number.

/*Item Status: Published: 0 / Draft: 1 */

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_ExcUpdItemWebContentStatus
(
		IN InstallationID varchar(3),
		IN ItemNumber NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_ExcUpdItemWebContentStatus 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN  
	
	/*Delete all new status record when changing status
	Avoid any primary key violation
	Delete main header table	*/
	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = ItemNumber AND
    CH$9INID = InstallationID AND
	CH$9DS = 0;
	/*Delete main header table language*/
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 0;
	/*Delete detail table*/
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = ItemNumber AND
    CD$9INID = InstallationID AND
	CD$9DS = 0;
	/*Delete detail table language*/
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 0;
	
	/*Copy main header table*/
	INSERT INTO [SCDATA].FQ67410 (CHITM,CH$9INID,CH$9DS,CHDSC1,CHDSC2,CHDSC3,CHPGTX,CHDL01,CHDL02,CHDL03,CHDL04,CHDL05,CHDL06,CHDL07,CHDL08,CHDL09,CHDL10,CHCOMMENTS,CH$9PRI,CH$9HTML,CHPTURL,CHURCD,CHURDT,CHURAT,CHURAB,CHURRF,CHUSER,CHPID,CHJOBN,CHUPMJ,CHTDAY)
	(
	SELECT 
		    CHITM
           ,CH$9INID
           ,0
           ,CHDSC1
           ,CHDSC2
           ,CHDSC3
           ,CHPGTX
           ,CHDL01
           ,CHDL02
           ,CHDL03
           ,CHDL04
           ,CHDL05
           ,CHDL06
           ,CHDL07
           ,CHDL08
           ,CHDL09
           ,CHDL10
           ,CHCOMMENTS
           ,CH$9PRI
           ,CH$9HTML
           ,CHPTURL
           ,CHURCD
           ,CHURDT
           ,CHURAT
           ,CHURAB
           ,CHURRF
           ,CHUSER
           ,CHPID
           ,CHJOBN
           ,CHUPMJ
           ,CHTDAY
	FROM [SCDATA].FQ67410
	WHERE  
		CHITM = ItemNumber AND
        CH$9INID = InstallationID
		);
	/*Copy header Lang Table	*/
	INSERT INTO [SCDATA].FQ67410L (CLITM,CL$9INID,CL$9DS,CLLNGP,CLDSC1,CLDSC2,CLDSC3,CLPGTX,CLDL01,CLDL02,CLDL03,CLDL04,CLDL05,CLDL06,CLDL07,CLDL08,CLDL09,CLDL10,CLCOMMENTS,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
	(
	SELECT 
	 CLITM
      ,CL$9INID
      ,0
      ,CLLNGP
      ,CLDSC1
      ,CLDSC2
      ,CLDSC3
      ,CLPGTX
      ,CLDL01
      ,CLDL02
      ,CLDL03
      ,CLDL04
      ,CLDL05
      ,CLDL06
      ,CLDL07
      ,CLDL08
      ,CLDL09
      ,CLDL10
      ,CLCOMMENTS
      ,CL$9HTML
      ,CLURCD
      ,CLURDT
      ,CLURAT
      ,CLURAB
      ,CLURRF
      ,CLUSER
      ,CLPID
      ,CLJOBN
      ,CLUPMJ
      ,CLTDAY
	FROM [SCDATA].FQ67410L
	WHERE  
		CLITM = ItemNumber AND
        CL$9INID = InstallationID
		);
	/*Copy Detail Table*/
	INSERT INTO [SCDATA].FQ67411(CDITM,CDUKID,CD$9INID,CD$9DS,CDSEQ,CD$9PTL,CD$9HTML,CDASAI,CDEFFF,CDEFFT,CDURCD,CDURDT,CDURAT,CDURAB,CDURRF,CDUSER,CDPID,CDJOBN,CDUPMJ,CDTDAY)
	(
	SELECT 
		CDITM
		,CDUKID
		,CD$9INID
		,0
		,CDSEQ
		,CD$9PTL
		,CD$9HTML
		,CDASAI
		,CDEFFF
		,CDEFFT
		,CDURCD
		,CDURDT
		,CDURAT
		,CDURAB
		,CDURRF
		,CDUSER
		,CDPID
		,CDJOBN
		,CDUPMJ
		,CDTDAY
	FROM [SCDATA].FQ67411
	WHERE  
		CDITM = ItemNumber AND
        CD$9INID = InstallationID
	);
	/*Copy Lang Detail Table*/
	INSERT INTO [SCDATA].FQ67411L (CLITM,CLUKID,CL$9INID,CL$9DS,CLLNGP,CL$9PTL,CL$9HTML,CLURCD,CLURDT,CLURAT,CLURAB,CLURRF,CLUSER,CLPID,CLJOBN,CLUPMJ,CLTDAY)
	(
	SELECT 
	   CLITM
      ,CLUKID
      ,CL$9INID
      ,0
      ,CLLNGP
      ,CL$9PTL
      ,CL$9HTML
      ,CLURCD
      ,CLURDT
      ,CLURAT
      ,CLURAB
      ,CLURRF
      ,CLUSER
      ,CLPID
      ,CLJOBN
      ,CLUPMJ
      ,CLTDAY
	FROM [SCDATA].FQ67411L
	WHERE  
		CLITM = ItemNumber AND
        CL$9INID = InstallationID
	
	);
	
	/*Delete design record when changing to live
	Delete main header table*/
	DELETE FROM [SCDATA].FQ67410
	WHERE  
	CHITM = ItemNumber AND
    CH$9INID = InstallationID AND
	CH$9DS = 1;
	/*Delete main header table language*/
	DELETE FROM [SCDATA].FQ67410L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 1;
	/*Delete detail table*/
	DELETE FROM [SCDATA].FQ67411
	WHERE  
	CDITM = ItemNumber AND
    CD$9INID = InstallationID AND
	CD$9DS = 1;
	/*Delete detail table language*/
	DELETE FROM [SCDATA].FQ67411L
	WHERE  
	CLITM = ItemNumber AND
    CL$9INID = InstallationID AND
	CL$9DS = 1;

END
 ;
-- #desc					Get Items Related to Branch Plants
-- #bl_class				Premier.Inventory.BranchPlantItemList.cs
-- #db_dependencies			N/A
-- #db_references			N/A		

-- #param StoreId			Store Id
-- #param BranchPlant    	Branch Plant.
-- #param FilterTerm		Criteria to search by Item Number or Description
-- #param PageIndex			Page number
-- #param PageSize			Page size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetBranchPlantItemList
(	
	IN StoreId		GRAPHIC(3) CCSID 13488,
	IN BranchPlant			GRAPHIC(12) CCSID 13488,
	IN FilterTerm	  		VARGRAPHIC(30) CCSID 13488,
	IN PageIndex			INT,
    IN PageSize				INT
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetBranchPlantItemList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE RowStart	INT DEFAULT 0; 
	DECLARE RowEnd		INT DEFAULT 0; 

	DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC					VARGRAPHIC(8000) CCSID 13488;
	
	DECLARE ShortItemNumber			NUMERIC(8,0);

	SET WHERE_DYNAMIC = N'';

	/* Paging */
	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);

	IF(BranchPlant <> '*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || ' AND BP.MCMCU = ? ';
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || ' AND (1 = 1 OR ?  = ''*'') ';
	END IF;
	
	IF (FilterTerm <> '*') THEN
		/* ISNUMERIC validation */
		IF (TRIM(FilterTerm) <> '' AND LENGTH(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(COALESCE(FilterTerm , ''), '0', ''), '1', ''), '2', ''), '3', ''), '4', ''), '5', ''), '6', ''), '7', ''), '8', ''), '9', '')) = 0) THEN
			SET ShortItemNumber = CAST(FilterTerm AS NUMERIC(8, 0));
		END IF;
		SET WHERE_DYNAMIC = WHERE_DYNAMIC ||
		' AND (		(IM.IMITM = ?)
				OR	( IM.IMLITM LIKE ''%'' || ? || ''%'')
				OR	( IM.IMAITM LIKE ''%'' || ? || ''%'')
				OR  ( UPPER(IM.IMDSC1) LIKE ''%'' || ? || ''%'')
				OR  ( UPPER(IM.IMDSC2) LIKE ''%'' || ? || ''%'')
				OR  ( UPPER(IM.IMSRTX) LIKE ''%'' || ? || ''%'')) ';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC ||
		' AND (		(1 = 1 OR ? IS NULL)
				OR	(1 = 1 OR ?  = ''*'')
				OR	(1 = 1 OR ?  = ''*'')
				OR  (1 = 1 OR ?  = ''*'')
				OR  (1 = 1 OR ?  = ''*'')
				OR  (1 = 1 OR ?  = ''*'')) ';
	END IF;

	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;

		SET SQL_DYNAMIC = N'
		WITH CTE1 AS (
			SELECT
				IBO.BP$9INID AS StoreId,
				IBO.BPITM AS ShortItemNumber,
				IM.IMLITM AS LongItemNumber,
				IM.IMAITM AS AuxItemNumber,
				IM.IMDSC1 AS ItemDescription1,
				IM.IMDSC2 AS ItemDescription2,
				BP.MCMCU AS BranchPlant,
				COALESCE(BP.MCDL01,'' '') AS BranchPlantDescription,
				IBO.BPUPMJ AS DateUpdated,
				ROW_NUMBER() OVER(ORDER BY IM.IMITM ASC) AS RNUM
			FROM [SCDATA].FQ670005 IBO
				INNER JOIN [SCDATA].F0006 BP
					ON IBO.BPMCU = BP.MCMCU
				INNER JOIN [SCDATA].F4101 IM
					ON IBO.BPITM = IM.IMITM 
			WHERE IBO.BP$9INID = ?
				' || WHERE_DYNAMIC || '
		)
		SELECT	CTE1.StoreId, CTE1.ShortItemNumber, CTE1.LongItemNumber, CTE1.AuxItemNumber, CTE1.ItemDescription1,
				CTE1.ItemDescription2, CTE1.BranchPlant, CTE1.BranchPlantDescription, CTE1.DateUpdated, 
				(SELECT COUNT(1) FROM CTE1) AS TotalRowCount
		FROM CTE1	 
		WHERE (( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? )) ';

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;

		OPEN TEMP_CURSOR1 USING StoreId, BranchPlant, ShortItemNumber, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm,
												PageIndex, PageSize, RowStart, RowEnd;
	END;
END
 ;
-- #desc						Get Catalog.
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				dbo.INV_GetCatalogLang
--								dbo.INV_GetCatalogDetail
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param InstallationID    	InstallationID.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalog
(
	IN InstallationID     varchar(3),
    IN CatalogId		  varchar(3)
	
)
DYNAMIC RESULT SETS 4
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalog 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE CATALOG_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT     CA$9CLGID AS CatalogId,
				   CA$9EFM   AS EffectiveModeFlag,
				   CAEFFF    AS EffectiveFromDate,
				   CAEFFT	 AS EffectiveThruDate,
				   CADSC1	 AS Description,
				   CASEQ	 AS SequenceNumber,
				   CA$9INID	 AS InstallationID,
				   CAMCU	 AS MCU,
				   CA$9CCFU  AS MCUBehavior,
				   CAUSER    AS "USERID",
				   CAPID     AS "PROGRAMID",
                   CAUPMJ    AS DateUpdated,
                   CAUPMT    AS TimeLastUpdated,
                   CAJOBN    AS WorkStationId
		FROM [SCDATA].FQ67412
		WHERE
	       (CA$9CLGID = CatalogID) AND
		   (TRIM(InstallationID) = '*' OR CA$9INID  =  InstallationID) 
	FOR FETCH ONLY;
	
	OPEN CATALOG_CURSOR; 
	
	CALL [SCLIBRARY].INV_GetCatalogLang(CatalogId,'*');
	CALL [SCLIBRARY].INV_GetCatalogDetail(CatalogId,null);
	
END
	
  ;
-- #desc						Get Catalog Detail Info.
-- #bl_class					Premier.Inventory.CatalogDetailInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID    		UniqueKeyID (Node ID)
-- #param LangPref				Language Preference


CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogDetailInfo
(
    IN CatalogId		varchar(3),
	IN UniqueKeyID		NUMERIC(15,0),
	IN LangPref			varchar(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogDetailInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT     
		   A.CD$9CLGID		AS CatalogId,
		   A.CDUKID			AS UniqueKeyID,
		   A.CD$9PKID		AS ParentKeyID,
		   COALESCE(B.CDDL01, A.CDDL01) AS Description,
		   ' '				AS NodePath,
		   A.CD$9IIS		AS IncludeInSearch,
           A.CDDTAI			AS DataItem,
           A.CDKY			AS UserDefinedCode,
           A.CDIMGURL		AS ImageURL,
           A.CDTMPI			AS TemplateID,
		   ' '				AS InstallationID,
		   ' '				AS InstallationDesc         		    
		FROM [SCDATA].FQ67413 A
		LEFT JOIN [SCDATA].FQ67413L B
			ON B.CD$9CLGID = A.CD$9CLGID 
			AND A.CDUKID = B.CDUKID
			AND B.CDLNGP = LangPref
		WHERE A.CD$9CLGID = CatalogID 
		AND	A.CDUKID = UniqueKeyID			
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1; 	
END
	
  ;
-- #desc						Get Catalog Detail Detail List
-- #bl_class					Premier.Inventory.CatalogDetailList.cs
-- #db_dependencies				N/A
-- #db_references				N/A				

-- #param CatalogID				Catalog ID	
-- #param ParentKeyID			Catalog Detail Node ID	
-- #param RetrieveAllTree		0 = Specific , 1 = ALL
-- #param EffectiveOnly			Effective Only 
-- #param LangPref				Language Preference

   CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogDetailList
(
    CatalogID			varchar(3),
	ParentKeyID			NUMERIC(15,0),
	RetrieveAllTree		NUMERIC(15,0),
	EffectiveOnly		NUMERIC(15,0),
	LangPref			varchar(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogDetailList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
		
		DECLARE CurrentJulianDate INT DEFAULT 0;
		
        DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
        SELECT 
			A.CDUKID		AS UniqueKeyID,
			A.CD$9CLGID	    AS CatalogId,
			A.CD$9PKID		AS ParentKeyID,
			COALESCE(B.CDDL01 ,A.CDDL01 ) AS Description,
			' '				AS NodePath,
			A.CD$9IIS		AS IncludeInSearch,
            A.CDDTAI		AS DataItem,
            A.CDKY			AS UserDefinedCode,
            A.CDIMGURL		AS ImageURL,
			A.CDTMPI		AS TemplateID,
			' ' AS InstallationID,
		    ' ' AS InstallationDesc  			
		FROM [SCDATA].FQ67413 A	
		LEFT JOIN [SCDATA].FQ67413L B
			ON B.CD$9CLGID = A.CD$9CLGID
			AND	A.CDUKID = B.CDUKID
			AND B.CDLNGP = LangPref			
		WHERE A.CD$9CLGID= CatalogID
		AND (RetrieveAllTree > 0 OR A.CD$9PKID = ParentKeyID)
		AND	(A.CD$9EFM = 0 OR (EffectiveOnly =0 OR (CurrentJulianDate >= A.CDEFFF and CurrentJulianDate <=A.CDEFFT)))
		ORDER BY CDSEQ
		FOR FETCH ONLY;
		
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
        SELECT 
			A.CDUKID		AS UniqueKeyID,
			A.CD$9CLGID	    AS CatalogId,
			A.CD$9PKID		AS ParentKeyID,
			COALESCE(B.CDDL01 ,A.CDDL01 ) AS Description,
			' '				AS NodePath,
			A.CD$9IIS		AS IncludeInSearch,
            A.CDDTAI		AS DataItem,
            A.CDKY			AS UserDefinedCode,
            A.CDIMGURL		AS ImageURL,
			A.CDTMPI		AS TemplateID,
			' '				AS InstallationID,
		    ' '				AS InstallationDesc  			
		FROM [SCDATA].FQ67413 A		
		LEFT JOIN [SCDATA].FQ67413L B
			ON B.CD$9CLGID = A.CD$9CLGID
			AND	A.CDUKID = B.CDUKID
			AND B.CDLNGP = LangPref			
		WHERE A.CD$9CLGID = CatalogID
			AND (RetrieveAllTree > 0 OR (A.CD$9PKID is null OR A.CD$9PKID = 0))
			AND	(A.CD$9EFM = 0 OR (EffectiveOnly =0 OR (CurrentJulianDate >= A.CDEFFF and CurrentJulianDate <=A.CDEFFT)))	
		ORDER BY CDSEQ
		FOR FETCH ONLY;
		
		
		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
		IF(ParentKeyID IS NULL) THEN
			OPEN TEMP_CURSOR2; 
		ELSE
			OPEN TEMP_CURSOR1; 
		END IF;
END ;
-- #desc						Get Catalog Detail Detail List
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A				

-- #param CatalogID				Catalog ID	
-- #param UniqueKeyID			Unique Key ID	

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogDetails
(
    IN CatalogId		    varchar(3),
	IN UniqueKeyID			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogDetails 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT     
		   CD$9CLGID AS CatalogId,
		   CDUKID    AS UniqueKeyID,
		   CD$9PKID  AS ParentKeyID,
		   CD$9IIS   AS IncludeInSearch,
		   CDDTAI	 AS DataItem,
		   CDKY	     AS UserDefinedCode,
           CDDL01	 AS Description,
           CD$9EFM   AS EffectiveModeFlag,
		   CDEFFF	 AS EffectiveFromDate,
	       CDEFFT    AS EffectiveThruDate,
		   CDSEQ     AS SequenceNumber,
		   CDIMGURL	 AS	ImageName,
           CDTMPI	 AS TemplateID

		FROM [SCDATA].FQ67413
		WHERE
		   (CD$9CLGID = CatalogID AND
			CDUKID    = UniqueKeyID)

	FOR FETCH ONLY;

	OPEN TEMP_CURSOR2;
END
	
  ;
-- #desc						Get - Search Catalog Detail List by Installation
-- #bl_class					Premier.Inventory.CatalogDetailList.cs
-- #db_references				N/A		
-- #db_dependencies				INV_GetCatalogNodePathFnc

-- #param InstallationList		Installation List- optional	. For example "DV1, DV2"
-- #param FilterTerm			Filter Term to search nodes
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param TotalRowCount			Total Count of Rows

   CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogDetListByInst
(
    IN InstallationList	varchar(50),
	IN FilterTerm		varchar(40),
	IN PageIndex		NUMERIC(15,0),
    IN PageSize			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogDetListByInst
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT

BEGIN				
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR					 
	WITH CTE1 AS ( 
		SELECT
			A.CDUKID	AS UniqueKeyID,
			A.CD$9CLGID	AS CatalogId,
			A.CD$9PKID	AS ParentKeyID,
			A.CDDL01	AS Description,
			A.CD$9IIS	AS IncludeInSearch,				
			A.CDDTAI	AS DataItem,
			A.CDKY		AS UserDefinedCode,
			A.CDIMGURL	AS ImageURL,
			A.CDTMPI	AS TemplateID,			
			B.CA$9INID	AS InstallationID,			
			ROWNUMBER() OVER (ORDER BY A.CDDL01) AS RNUM 
		FROM [SCDATA].FQ67413 A 
		INNER JOIN  [SCDATA].FQ67412 B
			ON A.CD$9CLGID = B.CA$9CLGID 			
		WHERE (InstallationList = '*' OR InstallationList LIKE '%' || B.CA$9INID || '%') 
		AND (FilterTerm = '*' OR TRIM(UPPER(A.CDDL01)) LIKE '%' || TRIM(UPPER(FilterTerm)) || '%')
	),
	CTE2 AS ( 
		SELECT COUNT(1) AS TotalRowCount 
		FROM CTE1 
	) 
	SELECT UniqueKeyID, CatalogId, ParentKeyID, Description, [SCLIBRARY].INV_GetCatalogNodePathFnc(CatalogId, UniqueKeyID) AS NodePath, 
		   IncludeInSearch, DataItem, UserDefinedCode, ImageURL, TemplateID, InstallationID,  C.INDSC1 AS	InstallationDesc, TotalRowCount 
	FROM CTE2, CTE1	 
	INNER JOIN [SCDATA].FQ670001 C 
		ON InstallationID = C.IN$9INID
	WHERE ((PageIndex = 0 OR PageSize = 0) OR (RNUM BETWEEN (PageSize * PageIndex) - PageSize + 1 AND (PageIndex * PageSize)))
	FOR FETCH ONLY;
				
	OPEN TEMP_CURSOR1;	
END ;
-- #desc						Get Catalog Info
-- #bl_class					Premier.Inventory.CatalogInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A				

-- #param CatalogID				Catalog ID	
-- #param InstallationID		Installation ID	
-- #param LangPref				Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogInfo
(
	IN InstallationID   varchar(3),
    IN CatalogId		varchar(3),
	IN LangPref			varchar(2)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT     A.CA$9CLGID AS CatalogId,
				   A.CADSC1   AS CatalogName,
				   A.CA$9EFM   AS EffectiveModeFlag,
				   A.CAEFFF    AS EffectiveFromDate,
				   A.CAEFFT	 AS EffectiveThruDate,
				   COALESCE(B.CADSC1 ,A.CADSC1 ) AS Description,
				   A.CASEQ		AS SequenceNumber,
				   A.CA$9INID	AS InstallationID,
				   A.CAMCU AS MCU,
				   A.CA$9CCFU AS MCUBehavior     
		FROM [SCDATA].FQ67412 A 
			LEFT JOIN [SCDATA].FQ67412L B 
			ON	A.CA$9CLGID = B.CA$9CLGID
			AND B.CALNGP = LangPref
		WHERE
				   (A.CA$9CLGID = CatalogID AND
					A.CA$9INID  =  InstallationID) 
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 
	
	CALL [SCLIBRARY].INV_GetCatalogLang(CatalogId,'*');
	
END
	
  ;
-- #desc								Gets catalog List
-- #bl_class							Premier.Inventory.CatalogList.cs
-- #db_dependencies						N/A
-- #db_references						N/A						

-- #param CatalogId						Catalog ID
-- #param UniqueKey						Unique Key
-- #param ParentKey						Parent Key
-- #param EffectiveOnly					Retrieve only the effective catalogs for today or retrieve all catalogs
-- #param EffectiveFromDate				Effective From Date
-- #param EffectiveThruDate				Effective Thru Date
-- #param PageIndex						Paging - Current page
-- #param PageSize						Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogList
(
    IN InstallationID			varchar(3),
	IN CatalogId				varchar (3),
	IN Description				VARGRAPHIC(30) CCSID 13488,
	IN EffectiveOnly			NUMERIC(15,0),
	IN EffectiveFromDate	    NUMERIC(15,0),
	IN EffectiveThruDate	    NUMERIC(15,0),
	IN PageIndex				NUMERIC(15,0),
    IN PageSize					NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE today INT DEFAULT 0;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR WITH CTE1 AS (
		/* Select the rows betwen the range of ROWSTART ans ROWEND */
		SELECT  
			A.CA$9CLGID	AS CatalogId, 
			A.CADSC1	AS CatalogName,
			A.CA$9EFM	AS EffectiveModeFlag,	
			A.CAEFFF	AS EffectiveFromDate,
			A.CAEFFT	AS EffectiveThruDate,
			A.CADSC1	AS Description,
			A.CASEQ		AS SequenceNumber,
			A.CA$9INID	AS InstallationID,
			A.CAMCU		AS MCU,
			A.CA$9CCFU	AS MCUBehavior,
			ROWNUMBER() OVER(ORDER BY A.CASEQ) AS RNUM
		FROM  
			[SCDATA].FQ67412 A
		WHERE 
			(TRIM(InstallationID) = '*' OR A.CA$9INID  = InstallationID) 
			AND (CatalogId = '*' OR UPPER(LTRIM(RTRIM(A.CA$9CLGID))) LIKE UPPER(LTRIM(RTRIM('%'||CatalogId || '%' )))) 
			AND ((EffectiveFromDate = 0 AND EffectiveThruDate= 0) 
				OR (A.CAEFFF BETWEEN EffectiveFromDate AND EffectiveThruDate OR A.CAEFFT BETWEEN EffectiveFromDate AND EffectiveThruDate) 
				OR A.CA$9EFM = 0)  
			AND(A.CA$9EFM = 0 OR EffectiveOnly = 0 OR (today >= A.CAEFFF and today <= A.CAEFFT) ) 
			AND (Description = '*' OR UPPER(LTRIM(RTRIM(A.CADSC1))) LIKE UPPER(LTRIM(RTRIM( '%'|| Description || '%' ))))
		ORDER BY A.CASEQ
	),
	CTE2 AS (
		SELECT COUNT(1) AS TotalRowCount 
		FROM CTE1   
	)
	SELECT
					CTE1.InstallationID,
					CTE1.CatalogId,
					CTE1.CatalogName,
					CTE1.EffectiveModeFlag,	
					CTE1.EffectiveFromDate,
					CTE1.EffectiveThruDate,
					CTE1.Description,
					CTE1.SequenceNumber,
					CTE1.MCU,
					CTE1.MCUBehavior,
					CTE2.TotalRowCount
	FROM CTE1, CTE2
	WHERE ((PageIndex = 0 OR PageSize = 0) OR (CTE1.RNUM BETWEEN (PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize))
	FOR FETCH ONLY;

	SET today = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	OPEN TEMP_CURSOR1;
END ;
-- #desc								Gets Catalog Node Item List. 
-- #bl_class							Premier.Inventory.CatalogNodeItemList.cs
-- #db_dependencies						N/A
-- #db_references						N/A					

-- #param InstallationID				Installation Id
-- #param CatalogId						Catalog Id
-- #param CatalogDetailId				Catalog Detail Id (Node id)
-- #param CatalogMCU					Catalog MCU
-- #param SelectedProductsXML				Selected Items: used when the node is configured as a NodeItemList and the user is adding new items that haven't been saved
-- #param DeletedItemsXML				Items Removed: used when the node is configured as a NodeItemList and the user deleted items that haven't been saved
-- #param WhereCondition				Where Condition (Category code)
-- #param FilterByCategoryCodes			Filter By Category Codes (Y/N)

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GETCATALOGNODEITEMLIST
( 
	IN INSTALLATIONID			GRAPHIC(3) CCSID 13488, 
	IN CATALOGID				GRAPHIC(3) CCSID 13488, 
	IN CATALOGDETAILID			DECIMAL(15, 0), 
	IN CATALOGMCU				GRAPHIC(12) CCSID 13488,
	IN SELECTEDPRODUCTSXML			XML, 
	IN DELETEDPRODUCTSXML			XML, 
	IN WHERECONDITION			VARGRAPHIC(1000) CCSID 13488, 
	IN FILTERBYCATEGORYCODES	VARCHAR(1)
) 
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GETCATALOGNODEITEMLIST 	
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 
  
	DECLARE GLOBAL TEMPORARY TABLE SESSION . ITEMS 
	( 
		ITEMNUMBER			NUMERIC ( 15 , 0 ) , 
		LongItemNumber		VARGRAPHIC(25) CCSID 13488,
		AuxItemNumber		VARGRAPHIC(25) CCSID 13488,
		DESCRIPTION1		VARGRAPHIC(30) CCSID 13488,
		DESCRIPTION2		VARGRAPHIC(30) CCSID 13488,
		SEARCHTEXT			VARGRAPHIC(300) CCSID 13488,
		Template			VARCHAR(20),
		Segment1			VARCHAR(10),
		MatrixControlled	VARCHAR(1)
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ; 


	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLSELECTEDPRODUCTSTABLE (
		ShortItemNumber		NUMERIC(8,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLDELETEDPRODUCTSTABLE (
		ShortItemNumber		NUMERIC(8,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
  
	BEGIN 
		DECLARE V_DYNAMIC VARGRAPHIC(8000) CCSID 13488 ; 
		DECLARE SQL1			VARGRAPHIC(8000) CCSID 13488 ;
				 
		 --Declare the variables for add/remove items in memory 
		DECLARE SELECTEDPRODUCTSQUERY	VARGRAPHIC(8000) CCSID 13488 ; 
		DECLARE DELETEDPRODUCTSQUERY	VARGRAPHIC(8000) CCSID 13488 ;
		DECLARE WHERECONDITIONQUERY1 VARGRAPHIC(1500) CCSID 13488 ;
		DECLARE WHERECONDITIONQUERY2 VARGRAPHIC(1500) CCSID 13488 ;
		DECLARE FROMCONDITION		 VARGRAPHIC(1500) CCSID 13488 ;
  
	    DECLARE FETCH_STATUS	INTEGER DEFAULT 0 ; 
		 ------------------------------------------ 
		DECLARE RESULTDATA CURSOR WITH RETURN FOR V_DYNAMIC ; 

		DECLARE CONTINUE HANDLER FOR NOT FOUND 
			SET FETCH_STATUS = - 1 ; 
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
			SET FETCH_STATUS = - 1 ; 
		 
		--SET Default Values 
		SET SELECTEDPRODUCTSQUERY	 = ''; 
		SET DELETEDPRODUCTSQUERY	 = '';
		SET WHERECONDITIONQUERY1 = '';
		SET WHERECONDITIONQUERY2 = '';
		SET FROMCONDITION = '';
		---------------------

		SET ITEMINID = INSTALLATIONID ;

		IF (SELECTEDPRODUCTSXML IS NOT NULL) THEN
		--Quote Detail
		SET SELECTEDPRODUCTSQUERY = ' INNER JOIN SESSION.XMLSELECTEDPRODUCTSTABLE S
						ON IM.IMITM = S.ShortItemNumber ';

		/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
		INSERT INTO SESSION.XMLSELECTEDPRODUCTSTABLE (ShortItemNumber)
		SELECT 
			items.ShortItemNumber
			FROM XMLTABLE ('$d/items/item'
			PASSING SELECTEDPRODUCTSXML AS "d"
			COLUMNS ShortItemNumber NUMERIC(8,0) PATH 'text()') AS items;
		END IF;

		IF (DELETEDPRODUCTSXML IS NOT NULL) THEN
		--Quote Detail
		SET DELETEDPRODUCTSQUERY = ' INNER JOIN SESSION.XMLDELETEDPRODUCTSTABLE D
						ON A.INITM <> D.ShortItemNumber ';

		/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
		INSERT INTO SESSION.XMLDELETEDPRODUCTSTABLE (ShortItemNumber)
		SELECT 
			items.ShortItemNumber
			FROM XMLTABLE ('$d/items/item'
			PASSING DELETEDPRODUCTSXML AS "d"
			COLUMNS ShortItemNumber NUMERIC(8,0) PATH 'text()') AS items;
		END IF;

  
		/* Validate filter by Cat Cod */
		IF ( FILTERBYCATEGORYCODES = 'Y' )	THEN
			IF ( WHERECONDITION IS NOT NULL ) AND ( WHERECONDITION <> '' ) THEN 
				SET WHERECONDITIONQUERY1 =  WHERECONDITION || ' AND (IM.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))' ; 
				SET WHERECONDITIONQUERY2 = WHERECONDITION || ' AND (IM.IMSTKT=''N'' OR (C.LFIVI<> ''Y'' AND C.LFIVI<> ''D''))';
			ELSE 
				SET WHERECONDITIONQUERY1 = ' (IM.IMSTKT <> ''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))' ; 
				SET WHERECONDITIONQUERY2 = ' (IM.IMSTKT=''N'' OR (C.LFIVI<> ''Y'' AND C.LFIVI<> ''D''))';
			END IF ; 

			/*Filter Matrix items children */
			SET WHERECONDITIONQUERY1 = WHERECONDITIONQUERY1 || ' AND (IM.IMTMPL = '''' OR IM.IMMIC IN (''1'', ''''))';
			SET WHERECONDITIONQUERY2 = WHERECONDITIONQUERY2 || ' AND (IM.IMTMPL = '''' OR IM.IMMIC IN (''1'', ''''))';

			SET FROMCONDITION = ' [SCDATA].F4101 IM 
									INNER JOIN [SCDATA].F40205 C
										ON C.LFLNTY = IM.IMLNTY
									INNER JOIN [SCDATA].FQ679910 E                                 
										ON E.BI$9INID = ?                                                                                                                                        
									INNER JOIN [SCDATA].F4102 B
										ON B.IBITM = IM.IMITM
										AND B.IBMCU = E.BIMCU';

			SET SQL1 =	 
			'INSERT INTO SESSION.ITEMS
			(	ItemNumber,
				LongItemNumber,
				AuxItemNumber,
				Description1,
				Description2,
				SearchText,
				Template,
				Segment1,
				MatrixControlled
			)
			SELECT DISTINCT
				IM.IMITM ItemNumber,
				IM.IMLITM LongItemNumber,
				IM.IMAITM AuxItemNumber,
				IM.IMDSC1 AS Description1,
				IM.IMDSC2 AS Description2,
				IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText, 
				IM.IMTMPL AS Template,
				IM.IMSEG1 AS Segment1,
				IM.IMMIC  AS MatrixControlled
			FROM '
				 || FROMCONDITION ||
			' WHERE ' || WHERECONDITIONQUERY1 
			|| ' UNION
				SELECT
					IM.IMITM ItemNumber,
					IM.IMLITM LongItemNumber,
					IM.IMAITM AuxItemNumber,
					IM.IMDSC1 AS Description1,
					IM.IMDSC2 AS Description2,
					IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
					IM.IMTMPL AS Template,
					IM.IMSEG1 AS Segment1,
					IM.IMMIC   AS MatrixControlled
				FROM [SCDATA].F4101 IM
				INNER JOIN [SCDATA].F40205 C
					ON C.LFLNTY = IM.IMLNTY
				WHERE ' || WHERECONDITIONQUERY2; 
		ELSE  --By Catalog Node Items 
						
			SET FROMCONDITION = '[SCDATA].FQ67413I A --Catalog Node Items
									INNER JOIN [SCDATA].F4101 IM
										ON IM.IMITM = A.INITM
									INNER JOIN [SCDATA].F40205 C
										ON C.LFLNTY = IM.IMLNTY
									INNER JOIN [SCDATA].FQ679910 E
										ON E.BI$9INID = ? 
									INNER JOIN [SCDATA].F4102 B
										ON B.IBITM = IM.IMITM
										AND B.IBMCU = E.BIMCU';

			SET SQL1 = 
			'INSERT INTO SESSION.ITEMS
			(
				ItemNumber,
				LongItemNumber,
				AuxItemNumber,
				Description1,
				Description2,
				SearchText,
				Template,
				Segment1,
				MatrixControlled
			)
			SELECT DISTINCT
				IM.IMITM ItemNumber,
				IM.IMLITM LongItemNumber,
				IM.IMAITM AuxItemNumber,
				IM.IMDSC1 AS Description1,
				IM.IMDSC2 AS Description2,
				IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
				IM.IMTMPL AS Template,
				IM.IMSEG1 AS Segment1,
				IM.IMMIC  AS MatrixControlled
			FROM '
				|| FROMCONDITION || ' '
				|| DELETEDPRODUCTSQUERY ||
			' WHERE A.IN$9CLGID = ?
				AND A.INUKID = ? 
			    AND (IM.IMSTKT <>''N'' AND (C.LFIVI= ''Y'' OR C.LFIVI= ''D''))
				UNION
				SELECT
					IM.IMITM ItemNumber,
					IM.IMLITM LongItemNumber,
					IM.IMAITM AuxItemNumber,
					IM.IMDSC1 AS Description1,
					IM.IMDSC2 AS Description2,
					IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText,
					IM.IMTMPL AS Template,
					IM.IMSEG1 AS Segment1,
					IM.IMMIC  AS MatrixControlled
				FROM
					[SCDATA].FQ67413I A 
				INNER JOIN [SCDATA].F4101 IM
					ON IM.IMITM = A.INITM
				INNER JOIN [SCDATA].F40205 C
					ON C.LFLNTY = IM.IMLNTY
				'|| DELETEDPRODUCTSQUERY ||'
		    	 WHERE A.IN$9CLGID = ?
					AND A.INUKID = ? 
				 AND (IM.IMSTKT=''N'' OR (C.LFIVI <> ''Y'' AND C.LFIVI <> ''D''))' ; 
				IF (SELECTEDPRODUCTSXML IS NOT NULL) THEN 
				SET SQL1 = SQL1 || 
				' UNION 
				  SELECT 
					IM.IMITM ItemNumber,
					IM.IMLITM LongItemNumber,
					IM.IMAITM AuxItemNumber,
					IM.IMDSC1 AS Description1,
					IM.IMDSC2 AS Description2,
					IM.IMLITM || '' '' || IM.IMAITM || '' '' || IM.IMSRTX SearchText, 
					IM.IMTMPL AS Template,
					IM.IMSEG1 AS Segment1,
					IM.IMMIC  AS MatrixControlled
					FROM [SCDATA].F4101 IM ' || SELECTEDPRODUCTSQUERY; 
				END IF ; 
		END IF ;

		IF ( FILTERBYCATEGORYCODES = 'Y' )	THEN	/* Validate filter by Cat Cod */
			PREPARE S1 FROM SQL1;
			EXECUTE S1 USING INSTALLATIONID;
		ELSE /* By Catalog Node Items */
			PREPARE S1 FROM SQL1;
			EXECUTE S1 USING INSTALLATIONID, CatalogID, CatalogDetailID, CatalogID, CatalogDetailID;
		END IF;
		 
		 			 
		SET SQL1 = 'SELECT 
		A . ItemNumber AS ItemNumber,
		A.LongItemNumber AS LongItemNumber,
		A.AuxItemNumber AS AuxItemNumber,
		COALESCE (CONTENTINS.CHDSC1, COALESCE( CONTENTBASE.CHDSC1, A.Description1)) Description1, --Description 1                            
		COALESCE (CONTENTINS.CHDSC2, COALESCE( CONTENTBASE.CHDSC2, A.Description2)) Description2, --Desciption 2
		COALESCE (COALESCE (CONTENTINS.CHDSC3, CONTENTBASE.CHDSC3),'' '') || A.SearchText SearchText,
		A.Template,
		A.Segment1,
		A.MatrixControlled 
		FROM SESSION.Items A 
		LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS  --Contents by Installation
			ON CONTENTINS.CHITM = A.ItemNumber  
			AND CONTENTINS.CH$9INID = ?
			AND CONTENTINS.CH$9DS =0  
		LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE  --Contents Base
			ON CONTENTBASE.CHITM = A.ItemNumber  
			AND CONTENTBASE.CH$9INID = ''***''
			AND CONTENTBASE.CH$9DS =0 '; 
						 
			 
			-- CURSOR FOR DYNAMIC SQL 
		PREPARE V_DYNAMIC FROM SQL1; 
			
		/* Return second record:Item Attribute Values*/
		OPEN RESULTDATA USING INSTALLATIONID;

		DROP TABLE SESSION . ITEMS ; 
	END ; 
END  ;
 -- #desc							Read Catalog Node Items by Installation
-- #bl_class						Premier.Inventory.CatalogNodeItems.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param InstallationID			Installation ID.
-- #param ItemNumber				Short Item Number
-- #param Description				Description
-- #param CatalodId					CatalogId
-- #param CatalogDetailId			CatalogDetailId
-- #param CatalogMCU				Catalog MCU
-- #param RetrieveMatrixChildren	Retrieve Matrix children, 

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogNodeItems
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN ItemNumber			NUMERIC(8,0),
	IN Description		    VARGRAPHIC(30) CCSID 13488,
	IN CatalogId			GRAPHIC(3) CCSID 13488,	
	IN CatalogDetailID		DECIMAL(15,0),
	IN CatalogMCU			GRAPHIC(12) CCSID 13488,
	IN RetrieveMatrixChildren		INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogNodeItems
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBLFilter
	(
		CatalogId					GRAPHIC(3) CCSID 13488,
		UniqueKeyID					DECIMAL(15,0),
		ItemNumber					NUMERIC(8,0),
		LongItemNumber				GRAPHIC(25) CCSID 13488,
		AuxItemNumber				GRAPHIC(25) CCSID 13488,
		Description1				GRAPHIC(30) CCSID 13488,
		Description2				GRAPHIC(30) CCSID 13488,
		SequenceNumber				NUMERIC(6,2),
		InventoryFlag				GRAPHIC(1) CCSID 13488,
		StockingType				GRAPHIC(1) CCSID 13488,
		ScType						GRAPHIC(1) CCSID 13488,
		Template					GRAPHIC(20) CCSID 13488,
		Segment1					GRAPHIC(10) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	BEGIN
			
			DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
				SELECT
					A.CatalogId,
					A.UniqueKeyID,
					A.ItemNumber,
					A.LongItemNumber,
					A.AuxItemNumber,
					A.Description1,
					A.Description2,
					A.SequenceNumber AS SequenceNumber,
				 	A.StockingType,
					A.InventoryFlag,
					A.ScType,
					A.Template AS Template
				 FROM SESSION.TBLFILTER A
			FOR FETCH ONLY;

			--If the item number is zero set this to null
			IF (ItemNumber = 0) THEN
				SET ItemNumber = NULL;
			END IF;
			
			-------------------------------------------------------
			-- Insert the result of the select query using criteria
			-- filter, into the Temporary Table 				
			INSERT INTO SESSION.TBLFILTER (CatalogId, UniqueKeyID, ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, SequenceNumber, InventoryFlag, StockingType, ScType, Template, Segment1)
			SELECT
				B.IN$9CLGID	AS CatalogId,
				B.INUKID	AS UniqueKeyID,
				A.IMITM		AS ItemNumber,
				A.IMLITM	AS LongItemNumber,
				A.IMAITM	AS AuxItemNumber,
				A.IMDSC1	AS Description1,
				A.IMDSC2	AS Description2,
				B.INSEQ		AS SequenceNumber,
				C.LFIVI		AS InventoryFlag,
				A.IMSTKT	AS StockingType,
				CASE 
					WHEN A.IMSTKT IN ('K', 'C') THEN A.IMSTKT
					WHEN A.IMMIC = '1' AND A.IMTMPL <> '' THEN N'M'
					WHEN (A.IMSTKT <> N'N' AND (C.LFIVI = N'Y' OR C.LFIVI = N'D')) THEN N'S'
					ELSE N'N'
				END AS ScType,
				A.IMTMPL	AS Template,
				A.IMSEG1	AS Segment1
			FROM [SCDATA].FQ67413I B				--Item Master
				INNER JOIN [SCDATA].F4101 A     --Catalog Node Items
					ON B.INITM = A.IMITM
				INNER JOIN [SCDATA].F40205 C		--Line Type Control Table
					ON C.LFLNTY = A.IMLNTY
			WHERE B.IN$9CLGID = CatalogId
				AND B.INUKID = CatalogDetailId
				AND (ItemNumber IS NULL OR A.IMITM = ItemNumber)	 /*Item Number filter*/
				AND (Description = '*' OR UPPER(A.IMDSC1) LIKE '%' || Description || '%' )      /* Description filter*/
			ORDER BY B.INSEQ ASC;
			
			/* Get Matrix children based in the setting */
			IF (RetrieveMatrixChildren = 1) THEN
				INSERT INTO SESSION.TBLFILTER (CatalogId, UniqueKeyID, ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, SequenceNumber, InventoryFlag, StockingType, ScType, Template, Segment1)
				SELECT 
					B.CatalogId	AS CatalogId,
					B.UniqueKeyID	AS UniqueKeyID,
					A.IMITM		AS ItemNumber,
					A.IMLITM	AS LongItemNumber,
					A.IMAITM	AS AuxItemNumber,
					A.IMDSC1	AS Description1,
					A.IMDSC2	AS Description2,
					B.SequenceNumber		AS SequenceNumber,
					C.LFIVI		AS InventoryFlag,
					A.IMSTKT	AS StockingType,
					N'R'		AS ScType,
					A.IMTMPL	AS Template,
					A.IMSEG1	AS Segment1
				FROM [SCDATA].F4101 A						/* Item Master */
				INNER JOIN (SELECT DISTINCT FT.Template, FT.Segment1, CatalogId, UniqueKeyID, SequenceNumber FROM SESSION.TBLFILTER FT WHERE FT.Template <> '' AND FT.ScType = 'M') B
					ON A.IMTMPL = B.Template AND A.IMSEG1 = B.Segment1 AND A.IMMIC = '2'
				INNER JOIN [SCDATA].F40205 C			/* Line Type Control Table */
					ON C.LFLNTY = A.IMLNTY
				WHERE (ItemNumber IS NULL OR A.IMITM = ItemNumber) /* Item Number filter */
					AND (Description = '*' OR UPPER(A.IMDSC1) LIKE '%' || Description || '%') /* Description filter */
					AND NOT EXISTS(SELECT 1 FROM SESSION.TBLFILTER I WHERE I.ItemNumber = A.IMITM);
			END IF;

			DELETE FROM SESSION.TBLFILTER A
			WHERE (A.StockingType <> 'N' AND (A.INVENTORYFLAG ='Y' OR A.INVENTORYFLAG ='D'))
			AND NOT EXISTS (SELECT 1 FROM [SCDATA].F4102 B  				
				INNER JOIN [SCDATA].FQ679910 C  					
					ON  C.BI$9INID =  INSTALLATIONID 
					AND  C.BIMCU = B.IBMCU 						 				
				WHERE B.IBITM = A.ITEMNUMBER );
			
		OPEN TEMP_CURSOR1;		
	END;		
END
 ;
-- #desc					Get Catalog Public List
-- #bl_class	 	 		Premier.Inventory.CatalogList.cs
-- #db_dependencies			N/A
-- #db_references			N/A					

-- #param InstallationID	Installation ID
-- #param LangPref			Language Pref

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatalogPublicList
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN LangPref				GRAPHIC(2) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatalogPublicList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN	
	
	DECLARE CurrentJulianDate NUMERIC(6,0);
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT  
		   A.CA$9CLGID  AS CatalogId,
		   A.CADSC1		AS CatalogName,
           A.CA$9EFM    AS EffectiveModeFlag,
           A.CAEFFF     AS EffectiveFromDate,
           A.CAEFFT	    AS EffectiveThruDate,
           COALESCE(B.CADSC1 ,A.CADSC1) AS Description,
           A.CASEQ		AS SequenceNumber,
           A.CA$9INID	AS InstallationID,
		   A.CAMCU		 AS MCU,
		   A.CA$9CCFU	 AS MCUBehavior  
	FROM [SCDATA].FQ67412 A
	LEFT OUTER JOIN [SCDATA].FQ67412L B 
			ON B.CA$9CLGID = A.CA$9CLGID
			AND B.CALNGP = LangPref	
	WHERE 
		A.CA$9INID  = InstallationID AND 
		(A.CA$9EFM = 0 OR (CurrentJulianDate BETWEEN A.CAEFFF AND A.CAEFFT))
	ORDER BY 
		A.CASEQ
	FOR FETCH ONLY;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate(CURRENT DATE);

	OPEN TEMP_CURSOR1; 		
END;
 -- #desc						Read Catalog Node Items by Installation
-- #bl_class					Premier.Inventory.CatalogNodeItems.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param StoreId				Store ID.
-- #param FilterTerm			Filter Term
-- #param CatalogId				Catalog Id
-- #param CatalogDetailId		Catalog Detail Id
-- #param CatalogMCU			Catalog MCU
-- #param RemovedProductsXML	Products removed from the Detail in memory
-- #param DisplayItemSetting	Display Item Setting
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param TotalRowCount			Total Count of Rows

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCatNodeItemsNotRel
(
	IN StoreId		GRAPHIC(3) CCSID 13488,
	IN FilterTerm			VARGRAPHIC(800) CCSID 13488,
	IN CatalogId			GRAPHIC(3) CCSID 13488,
	IN CatalogDetailId		DECIMAL(15,0),
	IN CatalogMCU			GRAPHIC(12) CCSID 13488,
	IN RemovedProductsXML		XML,
	IN DisplayItemSetting	GRAPHIC(4) CCSID 13488,
	IN PageIndex			INT,
    IN PageSize			    INT,
    INOUT TotalRowCount		INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCatNodeItemsNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE RowStart	INT DEFAULT 0;
	DECLARE RowEnd		INT DEFAULT 0;
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBLFilter
	(		
		ItemNumber					NUMERIC(8,0),
		LongItemNumber				GRAPHIC(25) CCSID 13488,
		AuxItemNumber				GRAPHIC(25) CCSID 13488,
		Description1				VARGRAPHIC(30) CCSID 13488,
		Description2				VARGRAPHIC(30) CCSID 13488,
		DisplayItemNumber			GRAPHIC(25) CCSID 13488,
		InventoryFlag				GRAPHIC(1) CCSID 13488,
		StockingType				GRAPHIC(1) CCSID 13488,
		DesignStatus				DECIMAL(31,0),
		ScType						GRAPHIC(1) CCSID 13488,
		Template					GRAPHIC(20) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	/*Define removed items temporary table*/
	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLSREMOVEDITEMSTABLE (
		ShortItemNumber		NUMERIC(8,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	BEGIN
		DECLARE ShortItemNumber NUMERIC(8, 0);

		/* Variables for manage actions in application memory */
		DECLARE SQLITEMS			VARGRAPHIC(8000) CCSID 13488;
		DECLARE RemoveItemsSql		VARGRAPHIC(8000) CCSID 13488;
		DECLARE ItemNumberCondition VARGRAPHIC(50) CCSID 13488;
		DECLARE DISPLAYITEM_DYNAMIC VARGRAPHIC(100) CCSID 13488;
		-------------------------------------------------------
		/* Select the rows from temporary table between the */
		/* range of ROWSTART ans ROWEND */
			
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR						
		WITH CTE AS (
			SELECT 
				A.ItemNumber,
				A.LongItemNumber,
				A.AuxItemNumber,
				A.Description1 AS Description1,
				A.Description2 AS Description2,
				A.InventoryFlag,
				A.StockingType,
				A.ScType,
				A.Template,
				ROWNUMBER() OVER (ORDER BY A.DisplayItemNumber ) AS ROW_NEXT 
			FROM SESSION.TBLFILTER A
		)
		SELECT	
			CatalogId AS CatalogId,
			0  AS UniqueKeyID,
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.Description1,
			A.Description2,
			0 AS SequenceNumber,
			A.InventoryFlag,
			A.StockingType,
			A.ScType,
			A.Template 
		FROM CTE A 
		WHERE 
			ROW_NEXT >= ROWSTART AND  ROW_NEXT <= ROWEND
		FOR FETCH ONLY;
			
		/* SET RemoveItemsSql to default value empty */
		SET RemoveItemsSql = ''; 
		SET DISPLAYITEM_DYNAMIC = '';

		IF (DisplayItemSetting = 'LITM') THEN
			SET DISPLAYITEM_DYNAMIC = ' A.IMLITM AS DisplayItemNumber,';
		ELSE
			IF (DisplayItemSetting = 'AITM') THEN
				SET DISPLAYITEM_DYNAMIC = ' A.IMAITM AS DisplayItemNumber,';
			ELSE
				SET DISPLAYITEM_DYNAMIC = ' CAST(A.IMITM AS VARCHAR(25)) AS DisplayItemNumber,';
			END IF;
		END IF;

		IF ( LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( FilterTerm , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 AND FilterTerm <> '') THEN
			SET ItemNumberCondition =' (A.IMITM = ?) OR ';
			SET ShortItemNumber = CAST(FilterTerm AS NUMERIC(8, 0));
		ELSE
			SET ItemNumberCondition =' (1 = 1 OR ? IS NULL) AND ';
			SET ShortItemNumber = NULL;
		END IF;

		/* Add the removed Items */
		IF (RemovedProductsXML IS NOT NULL) THEN

			SET RemoveItemsSql = ' OR EXISTS (SELECT 1 FROM SESSION.XMLSREMOVEDITEMSTABLE X WHERE X.ShortItemNumber = A.IMITM ) ';

			/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
			INSERT INTO SESSION.XMLSREMOVEDITEMSTABLE (ShortItemNumber)
			SELECT 
				items.ShortItemNumber
				FROM XMLTABLE ('$d/items/item'
				PASSING RemovedProductsXML AS "d"
				COLUMNS ShortItemNumber NUMERIC(8,0) PATH 'text()') AS items;

		END IF;


			-------------------------------------------------------
			-- Insert the result of the select query using criteria
			-- filter, into the Temporary Table 				
			
			SET SQLITEMS=
			'INSERT INTO SESSION.TBLFILTER (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2, DisplayItemNumber, InventoryFlag, StockingType, DesignStatus, ScType, Template)
			SELECT DISTINCT
				A.IMITM		AS ItemNumber,
				A.IMLITM	AS LongItemNumber,
				A.IMAITM	AS AuxItemNumber,
				COALESCE(CONTENTINS.CHDSC1, CONTENTBASE.CHDSC1, A.IMDSC1)	AS Description1,
				COALESCE(CONTENTINS.CHDSC2, CONTENTBASE.CHDSC2, A.IMDSC2)	AS Description2,
				'|| DISPLAYITEM_DYNAMIC || '
				C.LFIVI		AS InventoryFlag,
				A.IMSTKT	AS StockingType,
				COALESCE(CONTENTINS.CH$9DS, CONTENTBASE.CH$9DS)	AS DesigStatus,
				CASE 
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC = ''1'' AND A.IMTMPL <> '''' THEN N''M''
					WHEN (A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'')) THEN N''S''
					ELSE N''N''
				END AS ScType,
				A.IMTMPL	AS Template
			FROM  [SCDATA].F4101 A		
			INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
			LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTINS 
				ON CONTENTINS.CHITM = A.IMITM  
				AND CONTENTINS.CH$9INID = ?
			LEFT OUTER JOIN [SCDATA].FQ67410 AS CONTENTBASE 
				ON CONTENTBASE.CHITM = A.IMITM  
				AND CONTENTBASE.CH$9INID = ''***''		
			WHERE  	
				( '||ItemNumberCondition||'			
					A.IMLITM LIKE ''%'' || ? || ''%''
					OR A.IMAITM LIKE ''%'' || ? || ''%''
					OR UPPER ( COALESCE(CONTENTINS.CHDSC1, CONTENTBASE.CHDSC1, A.IMDSC1)) LIKE ''%'' || ? || ''%''
					OR UPPER ( COALESCE(CONTENTINS.CHDSC2, CONTENTBASE.CHDSC2, A.IMDSC2)) LIKE ''%'' || ? || ''%''
					OR UPPER ( COALESCE(CONTENTINS.CHDSC3, CONTENTBASE.CHDSC3 , '''')) LIKE ''%'' || ? || ''%''
					OR UPPER ( A.IMSRTX) LIKE ''%'' || ? || ''%''
				)
				AND	
				( NOT EXISTS (SELECT 1 FROM [SCDATA].FQ67413I AS B WHERE B.IN$9CLGID = ? AND B.INUKID = ? AND B.INITM = A.IMITM) 
					'|| RemoveItemsSql||'
				)';

			/* CLEAR TEMP LOOP DATA */
			DELETE FROM SESSION.TBLFILTER;						 
			/* Execute the query fill the items associated */
			PREPARE S1 FROM SQLITEMS;	
			EXECUTE S1 USING StoreId, ShortItemNumber, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm, FilterTerm, CatalogId, CatalogDetailId;		

			/* Removes the Draft version when item has both versions from SESSION.TBLFILTER */
			DELETE FROM SESSION.TBLFILTER A
			WHERE 
				A.ItemNumber IN (SELECT I.ItemNumber 
			FROM (SELECT B.ItemNumber, COUNT(B.ItemNumber) CNT 
					FROM SESSION.TBLFILTER B GROUP BY (B.ItemNumber)) I WHERE I.CNT > 1) AND A.DesignStatus = 1;

			DELETE FROM SESSION.TBLFILTER A 			
			WHERE (A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D'))
			AND NOT EXISTS (SELECT 1 FROM [SCDATA].F4102 B  		/* Item Master by BranchPlant */
								INNER JOIN [SCDATA].FQ679910 C		/* BranchPlant by Installation */
								ON C.BI$9INID = StoreId AND C.BIMCU = B.IBMCU 						 				
							WHERE B.IBITM = A.ITEMNUMBER);
			
			-------------------------------------------------------
			-- Obtain the total count of the result
			SET TotalRowCount = (SELECT	COUNT(1) FROM SESSION.TBLFILTER);			

			-------------------------------------------------------
			-- Validate if paging is not required			
			IF(PageIndex = 0 OR PageSize = 0) THEN
				-- Set the first row to be selected
				SET ROWSTART = 1;
				-- Set the last row to be selected
				SET ROWEND = TotalRowCount;			
			ELSE			
				-- Set the first row to be selected
				SET ROWSTART = (PageSize * PageIndex) - PageSize + 1;
				-- Set the last row to be selected
				SET ROWEND = PageIndex * PageSize;
			END IF;
			
		OPEN TEMP_CURSOR1;		
	END;		
END ;
-- #desc							Get Cookie Crumb
-- #bl_class						Premier.Inventory.CookieCrumbList.cs
-- #db_dependencies					N/A
-- #db_references					N/A					

-- #param CatalogID					Catalog ID
-- #param CatalodDetailId			Catalod Detail Id
-- #param LangPref					Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCookieCrumb
(
	IN CatalogId VARCHAR(3),
	IN CatalogDetailId NUMERIC(15,0),
	IN LangPref	varchar(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCookieCrumb 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
    DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_TABLE
    (
            CatalogId				varchar (3),
		    CatalogDetailId			NUMERIC(15,0),
		    ParentKeyID				NUMERIC(15,0),
		    Description				VARGRAPHIC(30) CCSID 13488,
		    IncludeInSearch			NUMERIC(15,0),
			DataItem				varchar(10),
			UserDefinedCode			varchar(10),
			TemplateID				varchar(10)

    )WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
    
    BEGIN
        DECLARE Parent NUMERIC(15,0) DEFAULT 0;
        DECLARE ParentTmp NUMERIC(15,0) DEFAULT 0;
        DECLARE Exist  NUMERIC(15,0);
                
        DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
            select * from SESSION.TMP_TABLE
        FOR FETCH ONLY;
                    
        SET Parent = CatalogDetailId;
        WHILE_LOOP:
	    WHILE(Parent <> '' AND Parent IS NOT NULL AND Parent <> 0) DO
			
			SET Exist =(SELECT	COUNT(*) 
						FROM [SCDATA].FQ67413 
						WHERE CD$9CLGID = CatalogId AND CDUKID = Parent);
		    		    
			IF (Exist > 0)
			 THEN
				INSERT INTO SESSION.TMP_TABLE (CatalogId, CatalogDetailId, ParentKeyID, Description, IncludeInSearch, DataItem,UserDefinedCode,TemplateID)		    
				SELECT A.CD$9CLGID, A.CDUKID, A.CD$9PKID, COALESCE(B.CDDL01,A.CDDL01), A.CD$9IIS, A.CDDTAI, A.CDKY, A.CDTMPI
				FROM [SCDATA].FQ67413 A
				LEFT OUTER JOIN [SCDATA].FQ67413L B 
				ON	B.CD$9CLGID = A.CD$9CLGID
				AND A.CDUKID = B.CDUKID
				AND B.CDLNGP = LangPref
				WHERE A.CD$9CLGID = CatalogId 
				AND A.CDUKID = Parent;
				
				Set ParentTmp = Parent;
				select CD$9PKID INTO Parent 
				FROM [SCDATA].FQ67413
				where CD$9CLGID = CatalogId 
				AND CDUKID = Parent
				FETCH FIRST 1 ROW ONLY;
				
				if (ParentTmp = Parent)THEN
					SET Parent = NULL;
					DELETE FROM SESSION.TMP_TABLE;
				END IF;
			    
			  ELSE
				SET Parent = NULL;
				DELETE FROM SESSION.TMP_TABLE;
			  END IF;

	    END WHILE WHILE_LOOP;


        OPEN TEMP_CURSOR1;
    END;
END ;
-- #desc							Get Customer Cross Ref List
-- #bl_class						Premier.Inventory.ItemCrossReferenceList.cs	
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param ShortProductNumbersXML	Short Product Numbers List XML 

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetCustCrossReferenceLst
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN AddressNumber		NUMERIC(8,0),
    IN ShortProductNumbersXML	XML
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetCustCrossReferenceLst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	-- Gets Cust Cross Type
	DECLARE CustCrossRefType	GRAPHIC(2) CCSID 13488;
	DECLARE CustCrossINID		GRAPHIC(3) CCSID 13488;
	DECLARE CurrentJulianDate NUMERIC(6,0) DEFAULT 0;
	
    DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT 
		X.ShortProductNumber	AS	ShortProductNumber,
		COALESCE(I.IVCITM, '')	AS RefProductNumber
    FROM 
        XMLTABLE('$d/items/item' PASSING ShortProductNumbersXML AS "d" 
        COLUMNS ShortProductNumber NUMERIC(8, 0) PATH 'text()') AS X
    LEFT OUTER JOIN [SCDATA].F4104 I
			ON  I.IVITM = X.ShortProductNumber
			AND I.IVAN8 = AddressNumber 
			AND I.IVXRT = CustCrossRefType 
			AND CurrentJulianDate BETWEEN I.IVEFTJ AND I.IVEXDJ
	FOR FETCH ONLY;
	
	--Get the current Julian Date
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	SET CustCrossINID = InstallationID;	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);

	OPEN TEMP_CURSOR1;
END;

-- #desc						Get Item Replacement Items
-- #bl_class					Premier.Inventory.ItemAssociatedList.cs	
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param AddressNumber			Address Number --It will be 0 when is called from POS or when the AN8 is a Consumer not has to return Cross-References items
-- #param ShortItemNumber		Short Item Number
-- #param RefProductNumber		Reference Product Number

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemAssociatedList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN ShortItemNumber	NUMERIC(8,0),
	IN RefType			GRAPHIC(2) CCSID 13488,
	IN LangPref			GRAPHIC(2) CCSID 13488,
	IN RetrieveWebContentInfo INT,
	IN PageIndex		INT,
    IN PageSize			INT,    
    INOUT TotalRowCount	INT 
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemAssociatedList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
		
	DECLARE ROWSTART INT DEFAULT 0;
	DECLARE ROWEND INT DEFAULT 0;
	
	-- Gets Cust Cross Document Restrictions
	DECLARE CustCrossRefType	GRAPHIC(2) CCSID 13488;
	DECLARE CustCrossINID       GRAPHIC(3) CCSID 13488;
	
	-- Get Current Date
	DECLARE CurrentJulianDate NUMERIC(6,0);
	
	/* AddressNumbCustomerCrossRef is for read customer references information */
	DECLARE AddressNumbCustomerCrossRef NUMERIC(8,0);
	
	 -- Get the Default Customer value constant
	DECLARE DEFCUSTOMERCONSTANT       VARGRAPHIC(256) CCSID 13488;
	DECLARE ConstantINID   GRAPHIC(3) CCSID 13488;
	
	-------------------------------------------------------
	-- Define the table to do the filtering and paging
	DECLARE GLOBAL TEMPORARY TABLE SESSION.ITEMTEMPFilter
	(
		ItemNumber 				NUMERIC(8,0),
		LongItemNumber 			GRAPHIC(25) CCSID 13488,
		AuxItemNumber			GRAPHIC(25) CCSID 13488,
		RefProductNumber		GRAPHIC(25) CCSID 13488,
		Description1			GRAPHIC(30) CCSID 13488,
		Description2			GRAPHIC(30) CCSID 13488,
		PrimaryUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		SecondaryUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		PricingUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		StockingType			GRAPHIC(1) CCSID 13488,
		LineType				GRAPHIC(2) CCSID 13488,
		InventoryFlag			GRAPHIC(1) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.ITEMTEMPPaging 
	(
		nID INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1, NO CACHE) NOT NULL,
		ItemNumber 				NUMERIC(8,0),
		LongItemNumber 			GRAPHIC(25) CCSID 13488,
		AuxItemNumber			GRAPHIC(25) CCSID 13488,
		RefProductNumber		GRAPHIC(25) CCSID 13488,
		Description1			GRAPHIC(30) CCSID 13488,
		Description2			GRAPHIC(30) CCSID 13488,
		PrimaryUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		SecondaryUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		PricingUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		StockingType			GRAPHIC(1) CCSID 13488,
		LineType				GRAPHIC(2) CCSID 13488,
		InventoryFlag			GRAPHIC(1) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;


	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		
		/* Select the rows from temporary table between the
		 * range of ROWSTART ans ROWEND 
		 */
		SELECT 	
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,		
			A.RefProductNumber,	
			COALESCE(ContenDesc.DESC1, A.Description1)	AS Description1 ,
			COALESCE(ContenDesc.DESC2, A.Description2)	AS Description2,			
			ContenDesc.URL  AS URL,
			A.PrimaryUnitOfMeasure,
			A.SecondaryUnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.StockingType,
			A.LineType,
			A.InventoryFlag 
		FROM 
			SESSION.ITEMTEMPPaging A
		LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.ItemNumber, LangPref , 0 ) ) AS ContenDesc
			ON ContenDesc.DESCITM = A.ItemNumber
		WHERE A.nID >=  ROWSTART AND A.nID <= ROWEND
		FOR FETCH ONLY;	

		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		
		/* Select the rows from temporary table between the
		 * range of ROWSTART ans ROWEND 
		 */
		SELECT 	
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,		
			A.RefProductNumber,	
			A.Description1	AS Description1 , /* Retrieve Description 1 for Tracking lines */
			N''	AS Description2,			
			N''	AS URL,
			A.PrimaryUnitOfMeasure,
			A.SecondaryUnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.StockingType,
			A.LineType,
			A.InventoryFlag 
		FROM 
			SESSION.ITEMTEMPPaging A
		WHERE A.nID >=  ROWSTART AND A.nID <= ROWEND
		FOR FETCH ONLY;	
		
		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
		 -- Gets Cust Cross Document Restrictions
		SET CustCrossINID = InstallationID;
	    
	    /* AddressNumbCustomerCrossRef is for read customer references information */
	    SET AddressNumbCustomerCrossRef = AddressNumber;

		-- Get the Default Customer value constant
	    SET ConstantINID = InstallationID;
	    CALL [SCLIBRARY].CMM_GetConstantValue ('DEFCUSTOM', ConstantINID, DEFCUSTOMERCONSTANT);
	
		/* if addressNumber is equal to DefaultCustomer the user 
			is consumer so does not read customer references information*/
		IF(AddressNumbCustomerCrossRef = DEFCUSTOMERCONSTANT) THEN		
		  SET AddressNumber = 0;
		END IF;
			    
		/*
			IF AddressNumber equal 0 does not read customer references 
			information (AN8 will be zero when the Stored Procedure 
			is called from POS or is an SmarterPages consumer)
		*/
		IF(AddressNumber <> 0) THEN
			-- Gets Cust Cross Document Restrictions
			CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);
			INSERT INTO SESSION.ITEMTEMPFilter
			SELECT 
				IM2.IMITM AS ShortItemNumber,
				IM2.IMLITM AS LongItemNumber,
				IM2.IMAITM AS AuxItemNumber,
				B.IVCITM AS RefProductNumber,
				IM2.IMDSC1	AS ItemDescription1,
				IM2.IMDSC2	AS ItemDescription2,		    		    
				IM2.IMUOM1 AS PrimaryUnitOfMeasure,
				IM2.IMUOM2 AS SecondaryUnitOfMeasure,
				IM2.IMUOM4 AS PricingUnitOfMeasure,
				IM2.IMSTKT AS StockingType,
				IM2.IMLNTY AS LineType,
				C.LFIVI AS InventoryFlag
			FROM 
				[SCDATA].F4104 A					--CROSS REFERENCE
				INNER JOIN [SCDATA].F4101 IM1		--ITEM MASTER JOIN
				ON IM1.IMITM = A.IVITM
				INNER JOIN [SCDATA].F4101 IM2		--ITEM MASTER JOIN
				ON IM2.IMLITM = A.IVCITM
				INNER JOIN [SCDATA].F40205 C		--Line Type Control Table
				ON C.LFLNTY = IM2.IMLNTY
				LEFT OUTER JOIN [SCDATA].F4104 B	--Customer/Item Cross Ref Table
				ON B.IVAN8 = AddressNumbCustomerCrossRef
				AND B.IVITM = IM2.IMITM
				AND B.IVXRT = CustCrossRefType
				AND CurrentJulianDate >= B.IVEFTJ AND CurrentJulianDate <= B.IVEXDJ			
			WHERE 
				A.IVITM = ShortItemNumber
				AND A.IVXRT = RefType
				AND ((CurrentJulianDate >= A.IVEFTJ AND CurrentJulianDate <= A.IVEXDJ) OR
					 (CurrentJulianDate >= A.IVEFTJ AND A.IVEXDJ = 0))
				AND (A.IVAN8 = AddressNumber OR A.IVAN8 = 0)
			ORDER BY IM2.IMLITM ASC;
		ELSE
			INSERT INTO SESSION.ITEMTEMPFilter
			SELECT 
				IM2.IMITM AS ShortItemNumber,
				IM2.IMLITM AS LongItemNumber,
				IM2.IMAITM AS AuxItemNumber,
				ShortItemNumber AS RefProductNumber,
				IM2.IMDSC1	AS ItemDescription1,
				IM2.IMDSC2	AS ItemDescription2,		    		    
				IM2.IMUOM1 AS PrimaryUnitOfMeasure,
				IM2.IMUOM2 AS SecondaryUnitOfMeasure,
				IM2.IMUOM4 AS PricingUnitOfMeasure,
				IM2.IMSTKT AS StockingType,
				IM2.IMLNTY AS LineType,
				C.LFIVI AS InventoryFlag
			FROM 
				[SCDATA].F4104 A					--CROSS REFERENCE
				INNER JOIN [SCDATA].F4101 IM1		--ITEM MASTER JOIN
				ON IM1.IMITM = A.IVITM
				INNER JOIN [SCDATA].F4101 IM2		--ITEM MASTER JOIN
				ON IM2.IMLITM = A.IVCITM
				INNER JOIN [SCDATA].F40205 C		--Line Type Control Table
				ON C.LFLNTY = IM2.IMLNTY				
			WHERE 
				A.IVITM = ShortItemNumber
				AND A.IVXRT = RefType
				AND ((CurrentJulianDate >= A.IVEFTJ AND CurrentJulianDate <= A.IVEXDJ) OR
					 (CurrentJulianDate >= A.IVEFTJ AND A.IVEXDJ = 0))
			ORDER BY IM2.IMLITM ASC;
		END IF;	
			
		INSERT INTO SESSION.ITEMTEMPPaging (ItemNumber, LongItemNumber, AuxItemNumber, RefProductNumber,
		 Description1, Description2, PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, StockingType, LineType, InventoryFlag )
		SELECT 
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.RefProductNumber,
			A.Description1,
			A.Description2,
			A.PrimaryUnitOfMeasure,
			A.SecondaryUnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.StockingType,
			A.LineType,
			A.InventoryFlag 
		FROM SESSION.ITEMTEMPFilter A
			INNER JOIN [SCDATA].F4102 B		--Item Master by BranchPlant
			ON B.IBITM = A.ItemNumber 
			INNER JOIN [SCDATA].FQ679910 E	--BrachPlant by Installation
			ON E.BI$9INID = InstallationID 
			AND E.BIMCU = B.IBMCU
		WHERE 
			A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')			--Inventory Interface
		UNION
		SELECT 
			A.ItemNumber,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.RefProductNumber,
			A.Description1,
			A.Description2,
			A.PrimaryUnitOfMeasure,
			A.SecondaryUnitOfMeasure,
			A.PricingUnitOfMeasure,
			A.StockingType,
			A.LineType,
			A.InventoryFlag 
		FROM SESSION.ITEMTEMPFilter A
		WHERE 
			A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D')			--Inventory Interface
		ORDER BY LongItemNumber ASC;
				

		/* Obtain the total count of the result	*/	
		SET TotalRowCount = (SELECT	COUNT(1) FROM SESSION.ITEMTEMPPaging);			
		
		/* Validate if paging is not required */
		IF(PageIndex = 0 OR PageSize = 0)THEN
			SET ROWSTART = 1;
			SET ROWEND = TotalRowCount;			
		ELSE
			SET ROWSTART = (PageSize * PageIndex) - PageSize + 1;
			SET ROWEND = PageIndex * PageSize;
		END IF;

		/*Validate if retrieve web content*/
		IF(RetrieveWebContentInfo = 1) THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;
	END;
END ;
-- #desc						Return the value of the cross reference
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumber		    ItemNumber
-- #param Type			        type of the reference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemCrossRefCodes
(
	ItemNumber	NUMERIC(15,0),
	Type        Varchar(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemCrossRefCodes 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT  
BEGIN        
	------------------------------------------
	DECLARE crossRef_cursor CURSOR FOR
		SELECT LTRIM(RTRIM(IVCITM)) code FROM [SCDATA].F4104 WHERE IVITM=ItemNumber AND IVXRT=Type 
	FOR FETCH ONLY;  	       	
   	
	OPEN crossRef_cursor;		

	
END  ;
-- #desc						Get Item Cross Ref List
-- #bl_class					Premier.Inventory.ItemCrossReferenceList.cs	
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param AddressNumber			Address Number
-- #param DisplayItemNumber		Display Item Number
-- #param RefProductNumber		Reference Product Number
-- #param Description			Description
-- #param DataFilterMode		Data Filter Mode
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param SortBy				Column to filter by ItemNumber, YourProductNumber, Description, DateFrom, DateTo
-- #param SortDir				Direction to filter (A = Ascendent, D = Descendent) 

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemCrossReferenceList
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN AddressNumber		NUMERIC(8,0),
	IN DisplayItemNumber	VARGRAPHIC(25) CCSID 13488,
	IN RefProductNumber		VARGRAPHIC(25) CCSID 13488, 
	IN Description			VARGRAPHIC(60) CCSID 13488,
	IN DataFilterMode		VARCHAR(2),
	IN DisplayItemSetting	VARGRAPHIC(4) CCSID 13488,
	IN PageIndex			INT,
    IN PageSize				INT,
    IN SortBy				VARCHAR(40),
	IN SortDir				VARCHAR(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemCrossReferenceList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE RowStart INT DEFAULT 0; 
	DECLARE RowEnd INT DEFAULT 0; 

	DECLARE today				NUMERIC(6,0);
	DECLARE SHORTITEMNUMBER		NUMERIC(8,0);
	
	-- Gets Cust Cross Type
	DECLARE CustCrossRefType	VARGRAPHIC(2) CCSID 13488;
	DECLARE CustCrossINID		GRAPHIC(3) CCSID 13488;
	
	/* Dynamic */
	DECLARE SQL_DYNAMIC			VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE SORT_DYNAMIC		VARGRAPHIC(60) CCSID 13488;
	DECLARE SORTDIR_DYNAMIC		VARGRAPHIC(5) CCSID 13488;
	DECLARE DISPLAYITEM_DYNAMIC VARGRAPHIC(100) CCSID 13488;

	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC					VARGRAPHIC(8000) CCSID 13488;
		
	/* Resolve Display Item Number */
	IF (DisplayItemSetting = N'LITM')THEN
		SET DISPLAYITEM_DYNAMIC = ' LongItemNumber ';
	ELSEIF (DisplayItemSetting = N'AITM')THEN
		SET DISPLAYITEM_DYNAMIC = ' AuxItemNumber ';
	ELSE
		SET DISPLAYITEM_DYNAMIC = ' ShortItemNumber ';
	END IF;

	/* Dynamic sort direction statement */
    SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

    /* Dynamic sort statement */
    SET SORT_DYNAMIC = CASE SortBy 
        WHEN 'ProductNumber' THEN DISPLAYITEM_DYNAMIC || SORTDIR_DYNAMIC
        WHEN 'YourProductNumber' THEN 'RefProductNumber' || SORTDIR_DYNAMIC 
        WHEN 'Description' THEN 'Description1' || SORTDIR_DYNAMIC 
        WHEN 'DateFrom' THEN 'EffectiveDate' || SORTDIR_DYNAMIC
        WHEN 'DateTo' THEN 'ExpirationDate' || SORTDIR_DYNAMIC
        ELSE DISPLAYITEM_DYNAMIC || ' ASC'
    END;	
		
	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;
		
		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		SET today = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		SET SHORTITEMNUMBER = NULL;
		SET CustCrossINID = InstallationID;	
		
		CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);
		
		IF(DisplayItemNumber <> '*')THEN
			IF (DisplayItemSetting = 'ITM') THEN
				IF ( LENGTH(DisplayItemNumber) <= 8 AND LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( DisplayItemNumber , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 ) 
					THEN
						SET SHORTITEMNUMBER = CAST(COALESCE(DisplayItemNumber, '0') AS NUMERIC(8,0));
				END IF;
			ELSE
				IF (DisplayItemSetting = 'LITM') THEN
						SET SHORTITEMNUMBER = COALESCE((SELECT IMITM FROM [SCDATA].F4101 WHERE IMLITM = DisplayItemNumber), 0);
												
				ELSE
					SET SHORTITEMNUMBER = COALESCE((SELECT IMITM FROM [SCDATA].F4101 WHERE IMAITM = DisplayItemNumber), 0);
									
				END IF;
			END IF;
		END IF;


		IF (DisplayItemNumber = '*' OR SHORTITEMNUMBER <> 0)THEN
			
			SET WHERE_DYNAMIC = '';

			/* Dynamic query conditions */
			IF (SHORTITEMNUMBER IS NOT NULL) THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND IVITM = ? ';
			ELSE
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ';
			END IF;

			IF (RefProductNumber <> '*') THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND IVCITM LIKE ''%'' || ? || ''%''';
			ELSE
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			END IF;

			IF (Description <> '*') THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (UPPER(RTRIM(IVDSC1)) || '' '' || UPPER(IVDSC2) LIKE ''%'' || ? || ''%'')';
			ELSE
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			END IF;

			IF (DataFilterMode <> '*') THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || CASE DataFilterMode
										WHEN 'E' THEN N' AND IVEXDJ < ' || today
										WHEN 'A' THEN N' AND ' || today || ' >= IVEFTJ AND ' || today || ' <= IVEXDJ'
										WHEN 'F' THEN N' AND IVEFTJ > ' || today END;
			END IF;

			SET SQL_DYNAMIC = N'
			WITH CTE1 AS (
				SELECT CrossReference.*, ROW_NUMBER() OVER(ORDER BY ' || SORT_DYNAMIC || ') AS RNUM FROM 
				(
					SELECT
						IVITM AS ShortItemNumber,
						IVLITM AS LongItemNumber,
						IVAITM AS AuxItemNumber,
						IVCITM AS RefProductNumber,
						IVXRT  AS CrossReferenceType,
						IVDSC1 AS Description1,
						IVDSC2 AS Description2,
						IVEFTJ AS EffectiveDate,
						IVEXDJ AS ExpirationDate
					FROM 
						[SCDATA].F4104 						/*CROSS REFERENCE*/
					WHERE 
						IVAN8 = ? AND IVXRT = ? ' || WHERE_DYNAMIC || N') CrossReference
			)
			SELECT 
				CTE1.ShortItemNumber, CTE1.LongItemNumber, CTE1.AuxItemNumber, CTE1.RefProductNumber, CTE1.CrossReferenceType, CTE1.Description1, CTE1.Description2, 
				CTE1.EffectiveDate, CTE1.ExpirationDate, (SELECT COUNT(1) FROM CTE1) AS TotalRowCount
			FROM CTE1	 
			WHERE (( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? )) ';
					 
			PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
			OPEN TEMP_CURSOR1 USING AddressNumber, CustCrossRefType, SHORTITEMNUMBER, RefProductNumber, Description,
									PageIndex, PageSize, RowStart, RowEnd;

		END IF;
	END;
END;
-- #desc						Get Item Cross Ref Info
-- #bl_class					Premier.Inventory.ItemCrossRefInfo.cs	
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param IN InstallationID		Installation Id
-- #param IN AddressNumber		Address Number
-- #param IN ShortItemNumber	Short Item Number
-- #param IN RefProductNumber	Reference Product Number
-- #param IN EffectiveOnly		Effective Only 

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemCrossRefInfo
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN ShortItemNumber	NUMERIC(8,0),
	IN RefProductNumber	GRAPHIC(25) CCSID 13488,
	IN EffectiveOnly	INT
)
	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemCrossRefInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	-- Gets Cust Cross Type
	DECLARE CustCrossRefType	GRAPHIC(2) CCSID 13488;
	DECLARE CustCrossINID		GRAPHIC(3) CCSID 13488;
    DECLARE CurrentJulianDate	NUMERIC(6,0);
    
    
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			CR.IVITM AS ShortItemNumber,
			IVLITM AS LongItemNumber,
			IVAITM AS AuxItemNumber,
			IVCITM AS RefProductNumber,
			IVXRT  AS CrossReferenceType,
			IVDSC1 AS Description1,
			IVDSC2 AS Description2,
			IVEFTJ AS EffectiveDate,
			IVEXDJ AS ExpirationDate
		FROM 
			[SCDATA].F4104 CR						--CROSS REFERENCE
		WHERE 
			IVITM = ShortItemNumber
			AND IVAN8 = AddressNumber
			AND IVXRT = CustCrossRefType
			AND (EffectiveOnly = 0 OR (IVEFTJ <= CurrentJulianDate AND IVEXDJ >= CurrentJulianDate))
		FOR FETCH ONLY;

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			CR.IVITM AS ShortItemNumber,
			IVLITM AS LongItemNumber,
			IVAITM AS AuxItemNumber,
			IVCITM AS RefProductNumber,
			IVXRT  AS CrossReferenceType,
			IVDSC1 AS Description1,
			IVDSC2 AS Description2,
			IVEFTJ AS EffectiveDate,
			IVEXDJ AS ExpirationDate
		FROM 
			[SCDATA].F4104 CR						--CROSS REFERENCE
		WHERE 
			IVAN8 = AddressNumber
			AND IVXRT = CustCrossRefType
			AND IVCITM = RefProductNumber
			AND (EffectiveOnly = 0 OR (IVEFTJ <= CurrentJulianDate AND IVEXDJ >= CurrentJulianDate))
		FOR FETCH ONLY;
		
	SET CustCrossINID = InstallationID;
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);
	
	/* Filter by item number */
	IF (ShortItemNumber IS NOT NULL) THEN
		OPEN TEMP_CURSOR1;
	ELSE
		OPEN TEMP_CURSOR2;
	END IF;
END

 ;
-- #bl_class					Premier.Inventory.GetItemPublishCommand.cs
-- #desc						Returns kit components
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumbersXML		Item Numbers XML

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemKitChildren
(
	IN ItemNumbersXML	XML
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemKitChildren
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		KT.IXITM	AS ComponentItemNumber
	FROM 
		[SCDATA].F3002 KT 
	INNER JOIN XMLTABLE('$d/items/item'
									PASSING ItemNumbersXML AS "d" 
									COLUMNS ShortItemNumber NUMERIC(8, 0) PATH 'text()') AS X
										ON IXKIT = X.ShortItemNumber
	WHERE 
		IXTBM = 'M'
		AND IXOPTK <> 'F'
	UNION
	SELECT
		KT.IXKIT	AS ParentItemNumber,
		KT.IXITM	AS ComponentItemNumber
	FROM 
		[SCDATA].F3002 KT
	WHERE EXISTS (SELECT 1 FROM [SCDATA].F3002 A 
						INNER JOIN XMLTABLE('$d/items/item'
									PASSING ItemNumbersXML AS "d" 
									COLUMNS ShortItemNumber NUMERIC(8, 0) PATH 'text()') AS X
										ON IXKIT = X.ShortItemNumber
						WHERE IXOPTK ='F'
							AND IXTBM = 'M'
							AND KT.IXKIT  = A.IXITM
				)
							
	ORDER BY ParentItemNumber

	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;
	
END;
-- #desc				
-- #bl_class				Premier.Inventory.ItemLotList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number
-- #param BranchPlant		Branch Plant
-- #param LotNumber			Lot/Serial Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemLotList
(
    ItemNumber		NUMERIC(15,0),
    BranchPlant		VARCHAR(12),
    LotNumber		VARCHAR(60)    
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemLotList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			LIITM	AS	ItemNumber,
			LIMCU	AS	BranchPlant,
			LILOCN	AS	Location,
			LILOTN	AS	LotNumber,
			LILOTS	AS	LotStatus
		FROM [SCDATA].F41021
		WHERE LIITM = ItemNumber 
			AND (BranchPlant = '*' OR LIMCU = BranchPlant)
			AND (LotNumber = '*' OR UPPER(LTRIM(RTRIM(LILOTN))) LIKE '%' || UPPER(LTRIM(RTRIM(LotNumber))) || '%')	
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
	
END
 ;
-- #desc					Return Lot Required Flag from F4201.IMSRCE
-- #bl_class				Premier.Inventory.GetItemLotRequiredCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item Number
-- #param BranchPlant		Branch Plant

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemLotRequiredFlag
(
    ItemNumber	NUMERIC(15,0),
    BranchPlant	VARCHAR(12)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemLotRequiredFlag 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			IBSRCE AS LotRequiredFlag
		FROM [SCDATA].F4102
		WHERE IBITM = ItemNumber
			  AND UPPER(LTRIM(RTRIM(IBMCU))) = UPPER(LTRIM(RTRIM(BranchPlant)))
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
	
END  ;
-- #desc						Gets item info by item number
-- #bl_class                    Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A	                                                                                 

-- #param InstallationID		Installation Id
-- #param ShortItemNumber		Short Item Number to Search For
-- #param LongItemNumber		Long Item Number to Search For
-- #param AuxItemNumber			Aux Item Number to Search For

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterBasicInfo 
( 
	IN InstallationID	GRAPHIC(3) CCSID 13488, 
	IN ShortItemNumber	NUMERIC(15,0), 
	IN LongItemNumber	GRAPHIC(25) CCSID 13488, 
	IN AuxItemNumber	GRAPHIC(25) CCSID 13488
) 
	
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemMasterBasicInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT                  
	 
	BEGIN 
		DECLARE InventoryFlagValue	GRAPHIC(1) CCSID 13488;	

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			InstallationID INSTALLATIONID, 
			'' 		 AS  BRANCHPLANT , 
			'' 		 AS  BRANCHPLANTDESC , 
			A.IMITM  AS  ITEMNUMBER , 
			A.IMLITM AS  LONGITEMNUMBER , 
			A.IMAITM AS  AUXITEMNUMBER , 
			A.IMDSC1 AS  DESCRIPTION1, 
			A.IMDSC2 AS  DESCRIPTION2,
			'' 		 AS  URL,
			A.IMUOM1 AS  PRIMARYUNITOFMEASURE, 
			A.IMUOM2 AS  SECONDARYUNITOFMEASURE, 
			A.IMUOM4 AS  PRICINGUNITOFMEASURE, 
			A.IMSRTX AS  SEARCHITEMTEXT, 
			A.IMSTKT AS  STOCKINGTYPE, 
			A.IMLNTY AS  LINETYPE, 
			InventoryFlagValue AS INVENTORYFLAG, 
			A.IMIFLA AS       ITEMFLASHMESSAGE,
			A.IMTMPL AS MatrixTemplate,
			A.IMMIC  AS MatrixControlled,
			0		 AS MatrixParentItemNumber,
			0   AS AddressNumber,
			''	AS AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A                                                                       /*ITEM MASTER */
		WHERE 
			A.IMITM = ShortItemNumber
		FETCH FIRST 1 ROW ONLY
		OPTIMIZE FOR 1 ROW;
		 
		IF ( ShortItemNumber = 0 ) THEN 
			SET ShortItemNumber = NULL ; 
		END IF ; 
		 
		IF ShortItemNumber IS NULL THEN 
			IF LongItemNumber <> '*' THEN 
				SELECT A.IMITM INTO ShortItemNumber        /*SHORT ITEM NUMBER */
				FROM [SCDATA].F4101 A  /*ITEM MASTER */
				WHERE A.IMLITM = LongItemNumber 
				FETCH FIRST 1 ROW ONLY ; 								
			ELSE
				IF AuxItemNumber <> '*' THEN 
					SELECT A.IMITM INTO ShortItemNumber        /*SHORT ITEM NUMBER */
					FROM [SCDATA].F4101 A  /*ITEM MASTER */
					WHERE A.IMAITM = AuxItemNumber 
					FETCH FIRST 1 ROW ONLY ; 
				END IF ; 
			END IF ; 
		END IF ; 
		
		/*FIRST RESOLVE THE INVENTORY FLAG OF THE ITEM. */
		SELECT B.LFIVI INTO INVENTORYFLAGVALUE    /*INVENTORY INTERFACE */
		FROM [SCDATA].F4101 A					  /*ITEM MASTER */
		INNER JOIN [SCDATA].F40205 B             /*LINE TYPE CONTROL TABLE */
			ON B.LFLNTY = A.IMLNTY 
		WHERE A.IMITM = ShortItemNumber; 

		OPEN TEMP_CURSOR1; 
	END;

-- #desc							Read Item Master list with branchplant information
-- #bl_class						Premier.Inventory.ItemMasterBranchList.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param InstallationID			Installation ID.
-- #param BranchPlant				Branch Plant (mcu)
-- #param ItemNumber				Short Item Number
-- #param LongItemNumber			Long Item Number
-- #param AuxItemNumber				Aux Item Number
-- #param RetrieveWebContentInfo	Retrieve Web Content Info

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemMasterBranchList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN BranchPlant		GRAPHIC(12) CCSID 13488,
	IN ItemNumber		NUMERIC(8,0),
	IN LongItemNumber	GRAPHIC(25) CCSID 13488,
	IN AuxItemNumber	GRAPHIC(25) CCSID 13488,
	IN RetrieveWebContentInfo INT,
	IN LangPref         GRAPHIC(2) CCSID 13488
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemMasterBranchList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	/* Retrieve descriptions */
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		E.BI$9INID AS	InstallationID, 
		B.IBMCU	   AS 	BranchPlant, 
		D1.MCDL01  AS	BranchPlantDesc, 
		A.IMITM	   AS	ItemNumber, 
		A.IMLITM   AS	LongItemNumber, 
		A.IMAITM   AS	AuxItemNumber,
		COALESCE(ContenDesc.DESC1, A.IMDSC1)	AS Description1,
		COALESCE(ContenDesc.DESC2, A.IMDSC2)	AS Description2,
		ContenDesc.URL AS URL,
		A.IMUOM1   AS	PrimaryUnitOfMeasure,
		A.IMUOM2   AS	SecondaryUnitOfMeasure,
		A.IMUOM4   AS	PricingUnitOfMeasure,
		A.IMSRTX   AS	SearchItemText,
		A.IMSTKT   AS	StockingType ,
		A.IMLNTY   AS	LineType ,
		C.LFIVI	   AS	InventoryFlag,
		A.IMIFLA   AS	ItemFlashMessage,
		A.IMTMPL   AS MatrixTemplate,
		A.IMMIC	   AS MatrixControlled,
		0		   AS MatrixParentItemNumber,
	   D1.MCAN8	AddressNumber,
	   E.BILCNF	AllowPickup,
		IMCYCL AS CYCL,
		IMPRP0 AS PRP0,
		IMPRP1 AS PRP1,
		IMPRP2 AS PRP2,
		IMPRP3 AS PRP3,
		IMPRP4 AS PRP4,
		IMPRP5 AS PRP5,
		IMPRP6 AS PRP6,
		IMPRP7 AS PRP7,
		IMPRP8 AS PRP8,
		IMPRP9 AS PRP9,
		IMSHCM AS SHCM,
		IMSHCN AS SHCN,
		IMSRP0 AS SRP0,
		IMSRP1 AS SRP1,
		IMSRP2 AS SRP2,
		IMSRP3 AS SRP3,
		IMSRP4 AS SRP4,
		IMSRP5 AS SRP5,
		IMSRP6 AS SRP6,
		IMSRP7 AS SRP7,
		IMSRP8 AS SRP8,
		IMSRP9 AS SRP9
	FROM 
		[SCDATA].F4101 A					--Item Master
	INNER JOIN [SCDATA].F4102 B				--Item Master Branch
		ON B.IBITM = A.IMITM
	INNER JOIN [SCDATA].F40205 C				--Line type Control Table
		ON C.LFLNTY = A.IMLNTY
	INNER JOIN [SCDATA].F0006 D1				--Branch Plant Master
		ON B.IBMCU = D1.MCMCU
	INNER JOIN [SCDATA].FQ679910 E		-- BrachPlant by Installation
		ON E.BI$9INID = InstallationID 
			AND E.BIMCU = B.IBMCU
	LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.IMITM, LangPref , 0 ) ) AS ContenDesc
		ON ContenDesc.DESCITM = A.IMITM
	WHERE 
		(BranchPlant = '*' OR B.IBMCU = BranchPlant) AND
		(A.IMITM = ItemNumber) 
	FOR FETCH ONLY; 

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		E.BI$9INID AS	InstallationID, 
		B.IBMCU	   AS 	BranchPlant, 
		D1.MCDL01  AS	BranchPlantDesc, 
		A.IMITM	   AS	ItemNumber, 
		A.IMLITM   AS	LongItemNumber, 
		A.IMAITM   AS	AuxItemNumber,
		A.IMDSC1   AS   Description1,	/* Retrieve Description 1 for Tracking lines */
		N''	AS Description2,
		N'' AS URL,
		A.IMUOM1   AS	PrimaryUnitOfMeasure,
		A.IMUOM2   AS	SecondaryUnitOfMeasure,
		A.IMUOM4   AS	PricingUnitOfMeasure,
		A.IMSRTX   AS	SearchItemText,
		A.IMSTKT   AS	StockingType ,
		A.IMLNTY   AS	LineType ,
		C.LFIVI	   AS	InventoryFlag,
		A.IMIFLA   AS	ItemFlashMessage,
		A.IMTMPL   AS MatrixTemplate,
		A.IMMIC	   AS MatrixControlled,
		0		   AS MatrixParentItemNumber,
	   D1.MCAN8	AddressNumber,
	   E.BILCNF	AllowPickup,
		IMCYCL AS CYCL,
		IMPRP0 AS PRP0,
		IMPRP1 AS PRP1,
		IMPRP2 AS PRP2,
		IMPRP3 AS PRP3,
		IMPRP4 AS PRP4,
		IMPRP5 AS PRP5,
		IMPRP6 AS PRP6,
		IMPRP7 AS PRP7,
		IMPRP8 AS PRP8,
		IMPRP9 AS PRP9,
		IMSHCM AS SHCM,
		IMSHCN AS SHCN,
		IMSRP0 AS SRP0,
		IMSRP1 AS SRP1,
		IMSRP2 AS SRP2,
		IMSRP3 AS SRP3,
		IMSRP4 AS SRP4,
		IMSRP5 AS SRP5,
		IMSRP6 AS SRP6,
		IMSRP7 AS SRP7,
		IMSRP8 AS SRP8,
		IMSRP9 AS SRP9
	FROM 
		[SCDATA].F4101 A					--Item Master
	INNER JOIN [SCDATA].F4102 B				--Item Master Branch
		ON B.IBITM = A.IMITM
	INNER JOIN [SCDATA].F40205 C				--Line type Control Table
		ON C.LFLNTY = A.IMLNTY
	INNER JOIN [SCDATA].F0006 D1				--Branch Plant Master
		ON B.IBMCU = D1.MCMCU
	INNER JOIN [SCDATA].FQ679910 E		-- BrachPlant by Installation
		ON E.BI$9INID = InstallationID 
			AND E.BIMCU = B.IBMCU
	WHERE 
		(BranchPlant = '*' OR B.IBMCU = BranchPlant) AND
		(A.IMITM = ItemNumber) 
	FOR FETCH ONLY; 
	
	IF (ItemNumber = 0) THEN
		SET ItemNumber = NULL;
	END IF;
	
	
	IF ItemNumber IS NULL THEN 
		IF LongItemNumber <> '*' THEN 
			SELECT A.IMITM INTO ItemNumber	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMLITM = LongItemNumber 
			FETCH FIRST 1 ROW ONLY ;
		ELSE 
	
			IF AuxItemNumber <> '*' THEN 
				SELECT A.IMITM INTO ItemNumber	 /*SHORT ITEM NUMBER */
				FROM [SCDATA].F4101 A  /*ITEM MASTER */
				WHERE A.IMAITM = AuxItemNumber 
				FETCH FIRST 1 ROW ONLY ; 
			END IF ; 
		END IF ; 
	END IF ;
	
	/* Retrieve content */
	IF (RetrieveWebContentInfo = 1) THEN
		OPEN TEMP_CURSOR1; 
	ELSE 
		OPEN TEMP_CURSOR2;
	END IF;
    
END
 ;
-- #desc							Read Item Master Table by Installation, read only info
-- #bl_class						Premier.Inventory.ItemMasterContentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param InstallationID			Installation ID.
-- #param FilterTerm				Free Form Search Text
-- #param PageIndex					Paging - Current page
-- #param PageSize					Paging - Items to be shown
-- #param TotalRowCount				Paging - Quantity of rows, result of search filter.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemMasterContentList
(	
	IN InstallationID		varchar(3),
	IN FilterTerm			VARGRAPHIC(30) CCSID 13488,
	IN DesignStatus	 		NUMERIC(15,0),
    IN WithContent			varchar(2),	
	IN PageIndex			NUMERIC(15,0),
    IN PageSize				NUMERIC(15,0),
   	INOUT TotalRowCount		int
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemMasterContentList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	-------------------------------------------------------
	-- Define the table to do the filtering and paging
	------------------------------------------------------- 
	DECLARE ROWSTART INT DEFAULT 0 ;
	DECLARE ROWEND INT DEFAULT 0 ;
	
	DECLARE ITEMNUMBER INT DEFAULT 0 ;
	
	IF ( LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( FILTERTERM , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 )
	THEN
		SET ITEMNUMBER = CAST ( COALESCE ( NULLIF ( FILTERTERM , '' ) , '0' ) AS INT ) ;
	END IF ;
	
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------    
	DECLARE GLOBAL TEMPORARY TABLE SESSION . FILTERTABLE
	(
		ITEMNUMBER				NUMERIC ( 15 , 0 ) ,
		LONGITEMNUMBER			VARCHAR ( 25 ) ,
		AUXITEMNUMBER			VARCHAR ( 25 ) ,
		DESCRIPTION1			VARGRAPHIC(30) CCSID 13488,
		DESCRIPTION2			VARGRAPHIC(30) CCSID 13488,
		DESCRIPTION3			VARGRAPHIC(30) CCSID 13488,
		PRIMARYUNITOFMEASURE	VARCHAR ( 2 ) ,
		SECONDARYUNITOFMEASURE	VARCHAR ( 2 ) ,
		PRICINGUNITOFMEASURE	VARCHAR ( 2 ) ,
		SEARCHITEMTEXT			VARCHAR ( 30 ) ,
		STOCKINGTYPE			VARCHAR ( 1 ) ,
		LINETYPE				VARCHAR ( 2 ) ,
		INVENTORYFLAG			VARCHAR ( 1 ) ,
		ITEMFLASHMESSAGE		VARCHAR ( 2 ) ,
		CONTENTINSTALLATIONID   VARCHAR ( 3 ),
        DESIGNSTATUS            NUMERIC ( 5 , 0 ),
        CONTAINSCONTENT         VARCHAR ( 2 )
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
	-------------------------------------------------------
	-- Define the table to do the paging
	-------------------------------------------------------    
	DECLARE GLOBAL TEMPORARY TABLE SESSION . PAGINGTABLE
	(
		NID				INT GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 , INCREMENT BY 1 , NO CACHE ) NOT NULL ,
		ITEMNUMBER				NUMERIC ( 15 , 0 ) ,
		LONGITEMNUMBER			VARCHAR ( 25 ) ,
		AUXITEMNUMBER			VARCHAR ( 25 ) ,
		DESCRIPTION1			VARGRAPHIC(30) CCSID 13488,
		DESCRIPTION2			VARGRAPHIC(30) CCSID 13488,
		DESCRIPTION3			VARGRAPHIC(30) CCSID 13488,
		PRIMARYUNITOFMEASURE	VARCHAR ( 2 ) ,
		SECONDARYUNITOFMEASURE	VARCHAR ( 2 ) ,
		PRICINGUNITOFMEASURE	VARCHAR ( 2 ) ,
		SEARCHITEMTEXT			VARCHAR ( 30 ) ,
		STOCKINGTYPE			VARCHAR ( 1 ) ,
		LINETYPE				VARCHAR ( 2 ) ,
		INVENTORYFLAG			VARCHAR ( 1 ) ,
		ITEMFLASHMESSAGE		VARCHAR ( 2 ) ,
		CONTENTINSTALLATIONID   VARCHAR ( 3 ),
		DESIGNSTATUS            NUMERIC ( 5 , 0 ),
        CONTAINSCONTENT         VARCHAR ( 2 )
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT	
				A . ITEMNUMBER ,
				A . LONGITEMNUMBER ,
				A . AUXITEMNUMBER ,				
				A . DESCRIPTION1 ,
				A . DESCRIPTION2 ,
				A . DESCRIPTION3 ,
				A . PRIMARYUNITOFMEASURE ,
				A . SECONDARYUNITOFMEASURE ,
				A . PRICINGUNITOFMEASURE ,
				A . SEARCHITEMTEXT ,
				A . STOCKINGTYPE ,
				A . LINETYPE ,
				A . INVENTORYFLAG ,
				A . ITEMFLASHMESSAGE,
				A . CONTENTINSTALLATIONID ,
                A . DESIGNSTATUS ,
                A . CONTAINSCONTENT
			FROM SESSION . PAGINGTABLE A
			WHERE A . NID >= ROWSTART AND A . NID <= ROWEND
			FOR FETCH ONLY ;	
			
			INSERT INTO SESSION . FILTERTABLE ( ITEMNUMBER , LONGITEMNUMBER , AUXITEMNUMBER , DESCRIPTION1 , DESCRIPTION2, DESCRIPTION3 , PRIMARYUNITOFMEASURE , SECONDARYUNITOFMEASURE , PRICINGUNITOFMEASURE , 							SEARCHITEMTEXT , STOCKINGTYPE , LINETYPE , INVENTORYFLAG , ITEMFLASHMESSAGE , CONTENTINSTALLATIONID , DESIGNSTATUS , CONTAINSCONTENT)
			SELECT
				A . IMITM 	AS ITEMNUMBER ,
				A . IMLITM	AS LONGITEMNUMBER ,
				A . IMAITM	AS AUXITEMNUMBER ,
				COALESCE(B . CHDSC1, COALESCE( D . CHDSC1, A . IMDSC1 ))	AS DESCRIPTION1 ,				
				COALESCE(B . CHDSC2, COALESCE( D . CHDSC2, A . IMDSC2 ))	AS DESCRIPTION2 ,
				COALESCE(B . CHDSC3, COALESCE( D . CHDSC3, ''))	AS DESCRIPTION3 ,		
				A . IMUOM1	AS PRIMARYUNITOFMEASURE ,
				A . IMUOM2	AS SECONDARYUNITOFMEASURE ,
				A . IMUOM4	AS PRICINGUNITOFMEASURE ,
				A . IMSRTX	AS SEARCHITEMTEXT ,
				A . IMSTKT	AS STOCKINGTYPE ,
				A . IMLNTY	AS LINETYPE ,
				C . LFIVI	                AS INVENTORYFLAG ,
				A . IMIFLA	AS ITEMFLASHMESSAGE,
				COALESCE(B . CH$9INID,'***')  AS CONTENTINSTALLATIONID,
			    COALESCE(B . CH$9DS, COALESCE(D . CH$9DS, 0))   AS DESIGNSTATUS,
			    CASE WHEN (B . CHITM IS NOT NULL OR D . CHITM IS NOT NULL) THEN 'Y' ELSE 'N' END AS CONTAINSCONTENT          
			FROM
				[SCDATA] . F4101 A						--Item Master
				INNER JOIN [SCDATA] . F40205 C			--Line Type Control Table
					ON C . LFLNTY = A . IMLNTY
				LEFT OUTER JOIN [SCDATA] . FQ67410 AS B
	                                                                		ON B . CH$9INID = INSTALLATIONID
	                                                                		AND B . CHITM = A . IMITM
				LEFT OUTER JOIN [SCDATA] . FQ67410 AS D
	                                                                		ON D . CH$9INID = '***'
	                                                                		AND D . CHITM = A . IMITM	
			WHERE
				( ITEMNUMBER IS NOT NULL AND A . IMITM = ITEMNUMBER ) -- Item Number filter
				OR ( FILTERTERM = '*'						-- DB engine do not short-circuiting so it includes more posible matches here
					OR UPPER ( RTRIM ( A . IMLITM ) ) LIKE '%' || UPPER ( RTRIM ( FILTERTERM ) ) || '%' -- Second Item Number filter
					OR UPPER ( RTRIM ( A . IMAITM ) ) LIKE '%' || UPPER ( RTRIM ( FILTERTERM ) ) || '%' -- Third Item Number filter
					OR UPPER ( RTRIM ( COALESCE(B . CHDSC1, COALESCE(D . CHDSC1 ,A . IMDSC1 ) ) ) ) LIKE '%' || UPPER ( RTRIM ( FILTERTERM ) ) || '%' -- Description filter
					OR UPPER ( RTRIM ( COALESCE(B . CHDSC2, COALESCE(D . CHDSC2 ,A . IMDSC1 ) ) ) ) LIKE '%' || UPPER ( RTRIM ( FILTERTERM ) ) || '%' -- Description filter
					OR UPPER ( RTRIM ( COALESCE(B . CHDSC3, COALESCE(D . CHDSC3 , '' ) ) ) ) LIKE '%' || UPPER ( RTRIM ( FILTERTERM ) ) || '%' -- Description filter
					OR UPPER ( RTRIM ( A . IMSRTX ) ) LIKE '%' || UPPER ( RTRIM ( FILTERTERM ) ) || '%' ) -- Search Text filter
			ORDER BY A . IMLITM ASC ;
                                                
			--If DesignStatus is not specified we prefer Design over Live.
	                                	IF DESIGNSTATUS IS NULL THEN 
		                        	    	DELETE FROM SESSION . FILTERTABLE
		                        		WHERE ITEMNUMBER IN (SELECT ITEMNUMBER 
					              	FROM SESSION . FILTERTABLE
					              	GROUP BY ITEMNUMBER 
					              	HAVING COUNT(ITEMNUMBER) > 1)
		                         		AND DESIGNSTATUS = 0; --live records
                                                 		END IF;

			INSERT INTO SESSION . PAGINGTABLE ( ITEMNUMBER , LONGITEMNUMBER , AUXITEMNUMBER , DESCRIPTION1 , DESCRIPTION2, DESCRIPTION3 , PRIMARYUNITOFMEASURE , SECONDARYUNITOFMEASURE , PRICINGUNITOFMEASURE , 					SEARCHITEMTEXT , STOCKINGTYPE , LINETYPE , INVENTORYFLAG , ITEMFLASHMESSAGE , CONTENTINSTALLATIONID , DESIGNSTATUS , CONTAINSCONTENT)
			SELECT DISTINCT
				A . ITEMNUMBER ,
				A . LONGITEMNUMBER ,
				A . AUXITEMNUMBER ,
				A . DESCRIPTION1 ,
				A . DESCRIPTION2 ,
				A . DESCRIPTION3 ,		
				A . PRIMARYUNITOFMEASURE ,
				A . SECONDARYUNITOFMEASURE ,
				A . PRICINGUNITOFMEASURE ,
				A . SEARCHITEMTEXT ,
				A . STOCKINGTYPE ,
				A . LINETYPE ,
				A . INVENTORYFLAG ,
				A . ITEMFLASHMESSAGE ,
				A . CONTENTINSTALLATIONID ,
                                                               		A . DESIGNSTATUS ,
                                                                		A . CONTAINSCONTENT
			FROM
				SESSION . FILTERTABLE A							
				INNER JOIN [SCDATA] . FQ679910 E	                --BranchPlant by Installation
				      ON E . BI$9INID = INSTALLATIONID		
				INNER JOIN [SCDATA] . F4102 B		--Item Master by BranchPlant
				      ON B . IBITM = A . ITEMNUMBER
				      AND B . IBMCU = E . BIMCU
			WHERE
				(A.INVENTORYFLAG = 'Y' OR A.INVENTORYFLAG = 'D')	                --Inventory Interface
				AND ( DESIGNSTATUS IS NULL OR A . DESIGNSTATUS = DESIGNSTATUS ) 
				AND ( CONTAINSCONTENT = '*' OR A . CONTAINSCONTENT = CONTAINSCONTENT ) 	
			UNION ALL
			SELECT
				A . ITEMNUMBER ,
				A . LONGITEMNUMBER ,
				A . AUXITEMNUMBER ,
				A . DESCRIPTION1 ,
				A . DESCRIPTION2 ,
				A . DESCRIPTION3 ,
				A . PRIMARYUNITOFMEASURE ,
				A . SECONDARYUNITOFMEASURE ,
				A . PRICINGUNITOFMEASURE ,
				A . SEARCHITEMTEXT ,
				A . STOCKINGTYPE ,
				A . LINETYPE ,
				A . INVENTORYFLAG ,
				A . ITEMFLASHMESSAGE ,
				A . CONTENTINSTALLATIONID ,
                                                                		A . DESIGNSTATUS ,
                                                               		A . CONTAINSCONTENT
			FROM
				SESSION . FILTERTABLE A						
			WHERE
				(A.INVENTORYFLAG <> 'Y' AND A.INVENTORYFLAG <> 'D')				--Inventory Interface	
				AND ( DESIGNSTATUS IS NULL OR A . DESIGNSTATUS = DESIGNSTATUS ) 
				AND ( CONTAINSCONTENT = '*' OR A . CONTAINSCONTENT = CONTAINSCONTENT ) ;
				
	                	-------------------------------------------------------
		-- Obtain the total count of the result		
		SET TOTALROWCOUNT = ( SELECT COUNT ( * ) FROM SESSION . FILTERTABLE ) ;			
		
		-- Validate if paging is not required
		IF ( PAGEINDEX = 0 OR PAGESIZE = 0 ) THEN
			-- Set the first row to be selected
			SET ROWSTART = 1 ;
			-- Set the last row to be selected
			SET ROWEND = TOTALROWCOUNT ;			
		ELSE			
			-- Set the first row to be selected
			SET ROWSTART = ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 ;
			-- Set the last row to be selected
			SET ROWEND = PAGEINDEX * PAGESIZE ;
		END IF ;
		OPEN TEMP_CURSOR1 ;
	END ;
END  ;
-- #desc						Return a table with Item Info
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		Installation ID.
-- #param BranchPlant			Branch Plant (mcu)
-- #param ShortItemNumber		Short Item Number
-- #param LongItemNumber		Long Item Number
-- #param AuxItemNumber			Aux Item Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].INV_GetItemMasterInfoFnc
(
	InstallationID	GRAPHIC(3) CCSID 13488,
	BranchPlant		GRAPHIC(12) CCSID 13488,
	ShortItemNumber	NUMERIC(8,0),
	LongItemNumber	VARGRAPHIC(25) CCSID 13488,
	AuxItemNumber	VARGRAPHIC(25) CCSID 13488,
	InformationFlag	INT,			/* 0 return the DSC1 and DSC2 from IM, 1 returns info from FQ67410*/
	LangPref		GRAPHIC(2) CCSID 13488,
	DesignStatus 	DECIMAL(31, 0)
)

Returns Table
(
	InstallationID			GRAPHIC(3) CCSID 13488,
	BranchPlant				GRAPHIC(12) CCSID 13488,
	BranchPlantDesc			GRAPHIC(30) CCSID 13488, 
	ItemNumber 				NUMERIC(8,0),
	LongItemNumber 			GRAPHIC(25) CCSID 13488,
	AuxItemNumber			GRAPHIC(25) CCSID 13488,
	Description1			GRAPHIC(30) CCSID 13488,
	Description2			GRAPHIC(30) CCSID 13488,
	URL                     VARGRAPHIC(256) CCSID 13488,
	PrimaryUnitOfMeasure	GRAPHIC(2) CCSID 13488,
	SecondaryUnitOfMeasure	GRAPHIC(2) CCSID 13488,
	PricingUnitOfMeasure	GRAPHIC(2) CCSID 13488,
	SearchItemText			GRAPHIC(30) CCSID 13488,
	StockingType			GRAPHIC(1) CCSID 13488,
	lineType				GRAPHIC(2) CCSID 13488,
	InventoryFlag			GRAPHIC(1) CCSID 13488,
	ItemFlashMessage		GRAPHIC(2) CCSID 13488,
	MatrixTemplate			GRAPHIC(20) CCSID 13488,
	MatrixControlled		GRAPHIC(1) CCSID 13488,
	MatrixParentItemNumber	NUMERIC(8,0),
	AddressNumber			NUMERIC(8,0),
	AllowPickup				varchar(1),
	CYCL					GRAPHIC(3) CCSID 13488,
	PRP0					GRAPHIC(6) CCSID 13488,
	PRP1					GRAPHIC(3) CCSID 13488,
	PRP2					GRAPHIC(3) CCSID 13488,
	PRP3					GRAPHIC(3) CCSID 13488,
	PRP4					GRAPHIC(3) CCSID 13488,
	PRP5					GRAPHIC(3) CCSID 13488,
	PRP6					GRAPHIC(6) CCSID 13488,
	PRP7					GRAPHIC(6) CCSID 13488,
	PRP8					GRAPHIC(6) CCSID 13488,
	PRP9					GRAPHIC(6) CCSID 13488,
	SHCM					GRAPHIC(3) CCSID 13488,
	SHCN					GRAPHIC(3) CCSID 13488,
	SRP0					GRAPHIC(6) CCSID 13488,
	SRP1					GRAPHIC(3) CCSID 13488,
	SRP2					GRAPHIC(3) CCSID 13488,
	SRP3					GRAPHIC(3) CCSID 13488,
	SRP4					GRAPHIC(3) CCSID 13488,
	SRP5					GRAPHIC(3) CCSID 13488,
	SRP6					GRAPHIC(6) CCSID 13488,
	SRP7					GRAPHIC(6) CCSID 13488,
	SRP8					GRAPHIC(6) CCSID 13488,
	SRP9					GRAPHIC(6) CCSID 13488
)

LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemMasterInfoFnc
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
MODIFIES SQL DATA 

BEGIN 
	 
	DECLARE GLOBAL TEMPORARY TABLE SESSION.ITEMTBL 
	( 
		InstallationID				GRAPHIC(3) CCSID 13488, 
		BranchPlant					GRAPHIC(12) CCSID 13488, 
		BranchPlantDesc				GRAPHIC(30) CCSID 13488, 
		ItemNumber					NUMERIC(8,0), 
		LongItemNumber				GRAPHIC(25) CCSID 13488, 
		AuxItemNumber				GRAPHIC(25) CCSID 13488, 
		Description1				GRAPHIC(30) CCSID 13488,
		Description2				GRAPHIC(30) CCSID 13488, 
		PrimaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SecondaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		PricingUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SearchItemText				GRAPHIC(30) CCSID 13488, 
		StockingType				GRAPHIC(1) CCSID 13488, 
		LineType					GRAPHIC(2) CCSID 13488, 
		InventoryFlag				GRAPHIC(1) CCSID 13488,
		ItemFlashMessage			GRAPHIC(2) CCSID 13488,
		MatrixTemplate				GRAPHIC(20) CCSID 13488,
		MatrixControlled			GRAPHIC(1) CCSID 13488,
		CYCL						GRAPHIC(3) CCSID 13488,
		PRP0						GRAPHIC(6) CCSID 13488,
		PRP1						GRAPHIC(3) CCSID 13488,
		PRP2						GRAPHIC(3) CCSID 13488,
		PRP3						GRAPHIC(3) CCSID 13488,
		PRP4						GRAPHIC(3) CCSID 13488,
		PRP5						GRAPHIC(3) CCSID 13488,
		PRP6						GRAPHIC(6) CCSID 13488,
		PRP7						GRAPHIC(6) CCSID 13488,
		PRP8						GRAPHIC(6) CCSID 13488,
		PRP9						GRAPHIC(6) CCSID 13488,
		SHCM						GRAPHIC(3) CCSID 13488,
		SHCN						GRAPHIC(3) CCSID 13488,
		SRP0						GRAPHIC(6) CCSID 13488,
		SRP1						GRAPHIC(3) CCSID 13488,
		SRP2						GRAPHIC(3) CCSID 13488,
		SRP3						GRAPHIC(3) CCSID 13488,
		SRP4						GRAPHIC(3) CCSID 13488,
		SRP5						GRAPHIC(3) CCSID 13488,
		SRP6						GRAPHIC(6) CCSID 13488,
		SRP7						GRAPHIC(6) CCSID 13488,
		SRP8						GRAPHIC(6) CCSID 13488,
		SRP9						GRAPHIC(6) CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED; 
	
	BEGIN
	
	DECLARE InventoryFlagValue	GRAPHIC(1) CCSID 13488;
	DECLARE StockingTypeValue	GRAPHIC(1) CCSID 13488;

	DECLARE MatrixTemplate			GRAPHIC(20) CCSID 13488;
	DECLARE MatrixControlled		GRAPHIC(1) CCSID 13488;
	DECLARE MatrixParentItemNumber	NUMERIC(8,0);
	DECLARE Segment1				GRAPHIC(10) CCSID 13488;
	 
	IF ( ShortItemNumber = 0 ) THEN 
		SET ShortItemNumber = NULL ; 
	END IF ; 
	 
	IF ShortItemNumber IS NULL THEN 
		IF LongItemNumber <> '*' THEN 
			SELECT A.IMITM INTO ShortItemNumber	 /*SHORT ITEM NUMBER */
			FROM [SCDATA].F4101 A  /*ITEM MASTER */
			WHERE A.IMLITM = LongItemNumber
			FETCH FIRST 1 ROW ONLY ; 
	
		ELSE 
	
			IF AuxItemNumber <> '*' THEN 
				SELECT A.IMITM INTO ShortItemNumber	 /*SHORT ITEM NUMBER */
				FROM [SCDATA].F4101 A  /*ITEM MASTER */
				WHERE A.IMAITM = AuxItemNumber
				FETCH FIRST 1 ROW ONLY ; 
			END IF ; 
		END IF ; 
	END IF ; 
	
	 /*FIRST RESOLVE THE INVENTORY FLAG OF THE ITEM. */
	SELECT B.LFIVI	INTO InventoryFlagValue	 /*INVENTORY INTERFACE */
	FROM [SCDATA].F4101 A					 /*ITEM MASTER */
	INNER JOIN [SCDATA].F40205 B			 /*LINE TYPE CONTROL TABLE */
		ON B.LFLNTY = A.IMLNTY 
	WHERE A.IMITM = ShortItemNumber; 

	/*Resolve StockingType and MatrixParentItemNumber*/
	SELECT 
		A.IMSTKT, A.IMTMPL, A.IMMIC, A.IMSEG1
	INTO 
		StockingTypeValue, MatrixTemplate, MatrixControlled, Segment1
	FROM 
		[SCDATA].F4101 A
	WHERE 
		A.IMITM = ShortItemNumber;

	IF(MatrixTemplate <> '' AND MatrixControlled = '2')
	THEN
		SELECT IMITM INTO MatrixParentItemNumber FROM [SCDATA].F4101 WHERE IMTMPL = MatrixTemplate AND IMSEG1 = Segment1 AND IMMIC = '1';
	END IF;
	
	 
	IF (StockingTypeValue = 'N' OR (InventoryFlagValue <> 'Y' AND InventoryFlagValue <> 'D'))	THEN	 /* INVENTORY INTERFACE	 */
		INSERT INTO SESSION.ITEMTBL 
		SELECT 
			INSTALLATIONID AS INSTALLATIONID , 
			''	AS	BRANCHPLANT , 
			'' AS	BRANCHPLANTDESC , 
			A.IMITM	AS	ITEMNUMBER , 
			A.IMLITM AS	LONGITEMNUMBER , 
			A.IMAITM AS	AUXITEMNUMBER , 
			A.IMDSC1 , 
			A.IMDSC2 , 
			A.IMUOM1 AS	PRIMARYUNITOFMEASURE , 
			A.IMUOM2 AS	SECONDARYUNITOFMEASURE , 
			A.IMUOM4 AS	PRICINGUNITOFMEASURE , 
			A.IMSRTX AS	SEARCHITEMTEXT , 
			A.IMSTKT AS	STOCKINGTYPE , 
			A.IMLNTY AS	LINETYPE , 
			INVENTORYFLAGVALUE AS INVENTORYFLAG , 
			A.IMIFLA AS	ITEMFLASHMESSAGE,
			A.IMTMPL AS MATRIXTEMPLATE,
			A.IMMIC AS MATRIXCONTROLLED,
			A.IMCYCL AS CYCL,
			A.IMPRP0 AS PRP0,
			A.IMPRP1 AS PRP1,
			A.IMPRP2 AS PRP2,
			A.IMPRP3 AS PRP3,
			A.IMPRP4 AS PRP4,
			A.IMPRP5 AS PRP5,
			A.IMPRP6 AS PRP6,
			A.IMPRP7 AS PRP7,
			A.IMPRP8 AS PRP8,
			A.IMPRP9 AS PRP9,
			A.IMSHCM AS SHCM,
			A.IMSHCN AS SHCN,
			A.IMSRP0 AS SRP0,
			A.IMSRP1 AS SRP1,
			A.IMSRP2 AS SRP2,
			A.IMSRP3 AS SRP3,
			A.IMSRP4 AS SRP4,
			A.IMSRP5 AS SRP5,
			A.IMSRP6 AS SRP6,
			A.IMSRP7 AS SRP7,
			A.IMSRP8 AS SRP8,
			A.IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A					 /*ITEM MASTER */
		WHERE 
			A.IMITM = SHORTITEMNUMBER 
		FETCH FIRST 1 ROW ONLY;
	ELSE
		INSERT INTO SESSION.ITEMTBL 
		SELECT 
			E.BI$9INID AS	INSTALLATIONID , 
			B.IBMCU	AS	BRANCHPLANT , 
			D1.MCDL01 AS	BRANCHPLANTDESC , 
			A.IMITM	AS	ITEMNUMBER , 
			A.IMLITM AS	LONGITEMNUMBER , 
			A.IMAITM AS	AUXITEMNUMBER , 
			A.IMDSC1 , 
			A.IMDSC2 , 
			A.IMUOM1 AS	PRIMARYUNITOFMEASURE , 
			A.IMUOM2 AS	SECONDARYUNITOFMEASURE , 
			A.IMUOM4 AS	PRICINGUNITOFMEASURE , 
			A.IMSRTX AS	SEARCHITEMTEXT , 
			A.IMSTKT AS	STOCKINGTYPE , 
			A.IMLNTY AS	LINETYPE , 
			INVENTORYFLAGVALUE AS INVENTORYFLAG , 
			A.IMIFLA AS	ITEMFLASHMESSAGE,
			A.IMTMPL AS MATRIXTEMPLATE,
			A.IMMIC AS MATRIXCONTROLLED,
			A.IMCYCL AS CYCL,
			A.IMPRP0 AS PRP0,
			A.IMPRP1 AS PRP1,
			A.IMPRP2 AS PRP2,
			A.IMPRP3 AS PRP3,
			A.IMPRP4 AS PRP4,
			A.IMPRP5 AS PRP5,
			A.IMPRP6 AS PRP6,
			A.IMPRP7 AS PRP7,
			A.IMPRP8 AS PRP8,
			A.IMPRP9 AS PRP9,
			A.IMSHCM AS SHCM,
			A.IMSHCN AS SHCN,
			A.IMSRP0 AS SRP0,
			A.IMSRP1 AS SRP1,
			A.IMSRP2 AS SRP2,
			A.IMSRP3 AS SRP3,
			A.IMSRP4 AS SRP4,
			A.IMSRP5 AS SRP5,
			A.IMSRP6 AS SRP6,
			A.IMSRP7 AS SRP7,
			A.IMSRP8 AS SRP8,
			A.IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A					 /*ITEM MASTER */
			INNER JOIN [SCDATA].FQ679910 E		 /* BRACHPLANT BY INSTALLATION */
			ON E.BI$9INID = INSTALLATIONID 
			JOIN [SCDATA].F4102 B				 /*ITEM MASTER BRANCH */
			ON B.IBITM = A.IMITM 
			AND B.IBMCU = E.BIMCU 
			JOIN [SCDATA].F0006 D1				 /*BRANCH PLANT MASTER */
			ON B.IBMCU = D1.MCMCU 
		WHERE 
			A.IMITM = SHORTITEMNUMBER AND	 
			( BRANCHPLANT = '*' OR B.IBMCU = BRANCHPLANT ) 
		FETCH FIRST 1 ROW ONLY ; 
	END IF ; 
		
	RETURN 
	( 
		SELECT 
			TMP.INSTALLATIONID , 
			TMP.BRANCHPLANT , 
			TMP.BRANCHPLANTDESC , 
			TMP.ITEMNUMBER , 
			TMP.LONGITEMNUMBER , 
			TMP.AUXITEMNUMBER , 
			CASE InformationFlag 
				WHEN 0 THEN TMP.DESCRIPTION1 
				ELSE COALESCE ( ContenDesc.DESC1, TMP.DESCRIPTION1 ) 
			END AS Description1 , 
			CASE INFORMATIONFLAG 
				WHEN 0 THEN TMP.DESCRIPTION2 
				ELSE COALESCE ( ContenDesc.DESC2, TMP.DESCRIPTION2 ) 
			END AS Description2 , 
			CASE InformationFlag 
				WHEN 0 THEN '' 
				ELSE ContenDesc.URL 
			END AS URL , 
			TMP.PRIMARYUNITOFMEASURE , 
			TMP.SECONDARYUNITOFMEASURE , 
			TMP.PRICINGUNITOFMEASURE , 
			TMP.SEARCHITEMTEXT , 
			TMP.STOCKINGTYPE , 
			TMP.LINETYPE , 
			TMP.INVENTORYFLAG , 
			TMP.ITEMFLASHMESSAGE , 
			TMP.MATRIXTEMPLATE,
			TMP.MATRIXCONTROLLED,
			MatrixParentItemNumber AS MatrixParentItemNumber,
			0  AS	AddressNumber,
			'' AS	AllowPickup,
			TMP.CYCL,
			TMP.PRP0,
			TMP.PRP1,
			TMP.PRP2,
			TMP.PRP3,
			TMP.PRP4,
			TMP.PRP5,
			TMP.PRP6,
			TMP.PRP7,
			TMP.PRP8,
			TMP.PRP9,
			TMP.SHCM,
			TMP.SHCN,
			TMP.SRP0,
			TMP.SRP1,
			TMP.SRP2,
			TMP.SRP3,
			TMP.SRP4,
			TMP.SRP5,
			TMP.SRP6,
			TMP.SRP7,
			TMP.SRP8,
			TMP.SRP9	 	 
		FROM SESSION.ITEMTBL TMP
		LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , TMP.ITEMNUMBER, LangPref , DesignStatus ) ) AS ContenDesc
			ON ContenDesc.DESCITM = TMP.ITEMNUMBER); /* END SELECT RETURN SECTION */
	 
	END;
END ;
-- #desc							Gets item info by item number
-- #bl_class						Premier.Inventory.ItemMasterInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A						

-- #param InstallationID			Installation Id
-- #param BranchPlant				Specific Branch Plant (mcu)
-- #param UnknownItemNumber			Item Number to Search For
-- #param FirstSearchCriteria		First Search Criteria
-- #param SecondSearchCriteria		Second Search Criteria
-- #param ThirdSearchCriteria		Third Search Criteria

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMasterInfoUnknown 
( 
	IN InstallationID		GRAPHIC(3) CCSID 13488, 
	IN BranchPlant			GRAPHIC(12) CCSID 13488, 
	IN UnknownItemnumber	VARGRAPHIC(25) CCSID 13488, 
	IN FirstSearchCriteria	INT, 
	IN SecondSearchCriteria INT, 
	IN ThirdSearchCriteria	INT,
	IN InformationFlag		INT,
	IN LangPref				GRAPHIC(2) CCSID 13488
) 
	
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemMasterInfoUnknown
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN 
	 
	DECLARE GLOBAL TEMPORARY TABLE SESSION.ITEMTEMP 
	( 
		InstallationID				GRAPHIC(3) CCSID 13488, 
		BranchPlant					GRAPHIC(12) CCSID 13488, 
		BranchPlantDesc				GRAPHIC(30) CCSID 13488, 
		ItemNumber					NUMERIC(8,0), 
		LongItemNumber				GRAPHIC(25) CCSID 13488, 
		AuxItemNumber				GRAPHIC(25) CCSID 13488, 
		Description1				VARGRAPHIC(30) CCSID 13488, 
		Description2				VARGRAPHIC(30) CCSID 13488,
		URL                         VARGRAPHIC(256) CCSID 13488,
		PrimaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SecondaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		PricingUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SearchItemText				GRAPHIC(30) CCSID 13488, 
		StockingType				GRAPHIC(1) CCSID 13488, 
		LineType					GRAPHIC(2) CCSID 13488, 
		InventoryFlag				GRAPHIC(1) CCSID 13488,
		ItemFlashMessage			GRAPHIC(2) CCSID 13488,
		MatrixTemplate				GRAPHIC(20) CCSID 13488,
		MatrixControlled			GRAPHIC(1) CCSID 13488,
		MatrixParentItemNumber		NUMERIC(8,0),
		AddressNumber				NUMERIC(8,0),
		AllowPickup					varchar (1),
		CYCL						GRAPHIC(3) CCSID 13488,
		PRP0						GRAPHIC(6) CCSID 13488,
		PRP1						GRAPHIC(3) CCSID 13488,
		PRP2						GRAPHIC(3) CCSID 13488,
		PRP3						GRAPHIC(3) CCSID 13488,
		PRP4						GRAPHIC(3) CCSID 13488,
		PRP5						GRAPHIC(3) CCSID 13488,
		PRP6						GRAPHIC(6) CCSID 13488,
		PRP7						GRAPHIC(6) CCSID 13488,
		PRP8						GRAPHIC(6) CCSID 13488,
		PRP9						GRAPHIC(6) CCSID 13488,
		SHCM						GRAPHIC(3) CCSID 13488,
		SHCN						GRAPHIC(3) CCSID 13488,
		SRP0						GRAPHIC(6) CCSID 13488,
		SRP1						GRAPHIC(3) CCSID 13488,
		SRP2						GRAPHIC(3) CCSID 13488,
		SRP3						GRAPHIC(3) CCSID 13488,
		SRP4						GRAPHIC(3) CCSID 13488,
		SRP5						GRAPHIC(3) CCSID 13488,
		SRP6						GRAPHIC(6) CCSID 13488,
		SRP7						GRAPHIC(6) CCSID 13488,
		SRP8						GRAPHIC(6) CCSID 13488,
		SRP9						GRAPHIC(6) CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ; 
	 
	BEGIN 
	DECLARE RC INT DEFAULT 0 ; 
	DECLARE ITEMCONSTANT		GRAPHIC(2) CCSID 13488;
	DECLARE ItemConstantINID	GRAPHIC(3) CCSID 13488;
	DECLARE ShortINCrossRef		NUMERIC(8,0);
	DECLARE ShortInUPC			NUMERIC(8,0);
	DECLARE SHORTITEMNUMBER		NUMERIC(8,0) DEFAULT 0;  --CHANGE POSITION 
	DECLARE CurrentJulianDate NUMERIC(6,0);
	 
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT * FROM SESSION.ITEMTEMP 
	FOR FETCH ONLY 
	OPTIMIZE FOR 1 ROW;
	
	SET ItemConstantINID = InstallationID;
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	
	-- *********** FIRST Search Criteria Resolution ************
	IF ( FIRSTSEARCHCRITERIA = 5 ) THEN -- Search by Universal Product Code 
		
		SELECT IMITM INTO ShortInUPC  FROM [SCDATA].F4101 
		WHERE IMUPCN = UnknownItemNumber FETCH FIRST 1 ROW ONLY;
		
		INSERT INTO SESSION.ITEMTEMP 
		SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortInUPC, '*' , '*', InformationFlag, LangPref, 0) ) AS F ; 
	ELSE
		IF (FirstSearchCriteria = 3 ) THEN -- Search by Cross Reference 
			CALL [SCLIBRARY].CMM_GetConstantValue ('ITM1STXREF', ItemConstantINID, ItemConstant);
		
			SELECT IVITM INTO ShortINCrossRef  FROM [SCDATA].F4104 
			WHERE IVCITM = UnknownItemNumber AND IVXRT = ItemConstant AND CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ FETCH FIRST 1 ROW ONLY;
		
			INSERT INTO SESSION.ITEMTEMP 
			SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortINCrossRef, '*' , '*', InformationFlag, LangPref, 0) ) AS F ; 
		ELSE
			IF ( FirstSearchCriteria = 2 ) THEN -- Search by Third Item Number 
				INSERT INTO SESSION.ITEMTEMP 
				SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, 0 , '*' , UnknownItemNumber, InformationFlag, LangPref, 0) ) AS F ; 
			ELSE
				IF ( FirstSearchCriteria = 1 ) THEN -- Search by Second Item Number 
					INSERT INTO SESSION.ITEMTEMP 
					SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, 0, UnknownItemNumber, '*', InformationFlag, LangPref, 0) ) AS F ; 
				ELSE   -- Search by First Item Number
					IF ( LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( UNKNOWNITEMNUMBER , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 ) 
						THEN 
						SET ShortItemNumber = CAST(UnknownItemNumber AS NUMERIC(8,0)); 

						INSERT INTO SESSION.ITEMTEMP 
						SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortItemNumber, '*' , '*', InformationFlag, LangPref, 0) ) AS F ; 
					END IF; 
				END IF; 
			END IF;
		END IF;
	END IF;

	-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
	-- *********** SECOND Search Criteria Resolution ************
	SET RC = (SELECT COUNT(1) FROM SESSION.ITEMTEMP); 
 
	IF (RC = 0) 
		THEN 
		IF (SecondSearchCriteria IS NOT NULL) THEN
			IF (SecondSearchCriteria = 5) THEN -- Search by Universal Product Code 
		
				SELECT IMITM INTO ShortInUPC  FROM [SCDATA].F4101 
				WHERE IMUPCN = UnknownItemNumber FETCH FIRST 1 ROW ONLY;
		
				INSERT INTO SESSION.ITEMTEMP 
				SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortInUPC , '*' , '*', InformationFlag, LangPref, 0) ) AS F ; 
			ELSE
				IF (SecondSearchCriteria = 3) THEN  -- Search by Cross Reference 
					CALL [SCLIBRARY].CMM_GetConstantValue('ITM2NTXREF', ItemConstantINID, ItemConstant);
				
					SELECT IVITM INTO ShortINCrossRef  FROM [SCDATA].F4104 
					WHERE IVCITM = UnknownItemNumber AND IVXRT = ItemConstant AND CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ  FETCH FIRST 1 ROW ONLY;
		
					INSERT INTO SESSION.ITEMTEMP 
					SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(installationID, BranchPlant, ShortINCrossRef , '*' , '*', InformationFlag, LangPref, 0) ) AS F ; 
				ELSE
					IF (SecondSearchCriteria = 2) THEN  -- Search by Third Item Number 
						INSERT INTO SESSION.ITEMTEMP 
						SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID , BranchPlant, 0, '*', UnknownItemNumber, InformationFlag, LangPref, 0) ) AS F ; 
					ELSE
						IF (SecondSearchCriteria = 1) THEN -- Search by Second Item Number 
							INSERT INTO SESSION.ITEMTEMP 
							SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, 0, UnknownItemNumber, '*', InformationFlag, LangPref, 0) ) AS F ; 
						ELSE   -- Search by First Item Number
							IF ( LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( UNKNOWNITEMNUMBER , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 ) 
								THEN 
								SET ShortItemNumber = CAST(UnknownItemNumber AS NUMERIC(8,0)); 

								INSERT INTO SESSION.ITEMTEMP 
								SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortItemNumber, '*' , '*', InformationFlag, LangPref, 0) ) AS F ; 
							END IF ;	
						END IF ; 
					END IF;
				END IF;
			END IF;
		END IF;
	END IF;
	
	-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
	-- *********** THIRD Search Criteria Resolution ************
	SET RC = (SELECT COUNT(1) FROM SESSION.ITEMTEMP); 
 
	IF (RC = 0) 
		THEN 
		IF (ThirdSearchCriteria IS NOT NULL) THEN
			IF ( ThirdSearchCriteria = 5 ) THEN -- Search by Universal Product Code 
		
				SELECT IMITM INTO ShortInUPC  FROM [SCDATA].F4101 
				WHERE IMUPCN = UnknownItemNumber FETCH FIRST 1 ROW ONLY;
		
				INSERT INTO SESSION.ITEMTEMP 
				SELECT * FROM TABLE(SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortInUPC, '*', '*', InformationFlag, LangPref, 0) ) AS F ; 
			ELSE
				IF ( ThirdSearchCriteria = 3 ) THEN -- Search by Cross Reference 
					CALL [SCLIBRARY].CMM_GetConstantValue ('ITM3RTXREF', ItemConstantINID, ItemConstant);
				
					SELECT IVITM INTO ShortINCrossRef  FROM [SCDATA].F4104 
					WHERE IVCITM = UnknownItemNumber AND IVXRT = ItemConstant AND CurrentJulianDate >= IVEFTJ AND CurrentJulianDate <= IVEXDJ FETCH FIRST 1 ROW ONLY;
				
					INSERT INTO SESSION.ITEMTEMP 
					SELECT * FROM TABLE (SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortINCrossRef , '*', '*', InformationFlag, LangPref, 0) ) AS F ; 
				ELSE
					IF (ThirdSearchCriteria = 2) THEN -- Search by Third Item Number 
						INSERT INTO SESSION.ITEMTEMP 
						SELECT * FROM TABLE(SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, 0, '*', UnknownItemNumber, InformationFlag, LangPref, 0) ) AS F ; 
					ELSE
						IF (ThirdSearchCriteria = 1) THEN -- Search by Second Item Number 
							INSERT INTO SESSION.ITEMTEMP 
							SELECT * FROM TABLE(SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, 0, UnknownItemNumber, '*', InformationFlag, LangPref, 0) ) AS F ; 
						ELSE   -- Search by First Item Number 
							IF ( LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( UNKNOWNITEMNUMBER , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 ) 
								THEN 
								SET ShortItemNumber = CAST(UnknownItemNumber AS NUMERIC(8,0)); 

								INSERT INTO SESSION.ITEMTEMP 
								SELECT * FROM TABLE(SCLIBRARY.INV_GetItemMasterInfoFnc(InstallationID, BranchPlant, ShortItemNumber, '*', '*', InformationFlag, LangPref, 0) ) AS F ; 
							END IF;
						END IF; 
					END IF;
				END IF;
			END IF;
		 END IF;
	END IF; 

	OPEN TEMP_CURSOR1 ; 
	 
	END ; 
END ;
-- #desc							Read Item Master Table by Installation, read only info
-- #bl_class						Premier.Inventory.ItemMasterList.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param InstallationID			Installation ID.
-- #param FilterTerm				Free Form Search Text
-- #param PageIndex					Paging - Current page
-- #param PageSize					Paging - Items to be shown
-- #param TotalRowCount				Paging - Quantity of rows, result of search filter.
-- #param RetrieveWebContentInfo	if value=1 then return values of web content item, value =0 return the information from Item master

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemMasterList
(	
	IN InstallationID			GRAPHIC(3) CCSID 13488,
	IN FilterTerm				VARGRAPHIC(30) CCSID 13488,
	IN RetrieveWebContentInfo	INT,
    IN BranchPlant				GRAPHIC(12) CCSID 13488,
	IN LangPref					GRAPHIC(2) CCSID 13488,	
	IN PageIndex				INT,
    IN PageSize					INT,
    INOUT TotalRowCount			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemMasterList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	-------------------------------------------------------
	-- Define the table to do the filtering and paging 
	------------------------------------------------------- 
	DECLARE ROWSTART INT DEFAULT 0;
	DECLARE ROWEND INT DEFAULT 0;
	
	DECLARE ItemNumber NUMERIC(8,0);
	
	IF ( LENGTH(FilterTerm) <= 8 AND LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( FilterTerm , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 ) 
	THEN
		SET ItemNumber = CAST(COALESCE(NULLIF(FilterTerm,''), '0') AS NUMERIC(8,0));
	END IF;
	
	-------------------------------------------------------
	-- Define the table to do the filtering
	-------------------------------------------------------    
	DECLARE GLOBAL TEMPORARY TABLE SESSION.FilterTable 
	( 
		ItemNumber					NUMERIC(8,0), 
		LongItemNumber				GRAPHIC(25) CCSID 13488, 
		AuxItemNumber				GRAPHIC(25) CCSID 13488, 
		Description1				GRAPHIC(30) CCSID 13488, 
		Description2				GRAPHIC(30) CCSID 13488,
		PrimaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SecondaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		PricingUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SearchItemText				GRAPHIC(30) CCSID 13488, 
		StockingType				GRAPHIC(1) CCSID 13488, 
		LineType					GRAPHIC(2) CCSID 13488, 
		InventoryFlag				GRAPHIC(1) CCSID 13488,
		ItemFlashMessage			GRAPHIC(2) CCSID 13488,
		MatrixTemplate				GRAPHIC(20) CCSID 13488,
		MatrixControlled			GRAPHIC(1) CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	-------------------------------------------------------
	-- Define the table to do the paging
	-------------------------------------------------------    
	DECLARE GLOBAL TEMPORARY TABLE SESSION.PagingTable
	(
		ItemNumber					NUMERIC(8,0), 
		LongItemNumber				GRAPHIC(25) CCSID 13488, 
		AuxItemNumber				GRAPHIC(25) CCSID 13488, 
		Description1				GRAPHIC(30) CCSID 13488, 
		Description2				GRAPHIC(30) CCSID 13488, 
		PrimaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SecondaryUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		PricingUnitOfMeasure		GRAPHIC(2) CCSID 13488, 
		SearchItemText				GRAPHIC(30) CCSID 13488, 
		StockingType				GRAPHIC(1) CCSID 13488, 
		LineType					GRAPHIC(2) CCSID 13488, 
		InventoryFlag				GRAPHIC(1) CCSID 13488,
		ItemFlashMessage			GRAPHIC(2) CCSID 13488,
		MatrixTemplate				GRAPHIC(20) CCSID 13488,
		MatrixControlled			GRAPHIC(1) CCSID 13488

	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT 
				A.ItemNumber, 
				A.LongItemNumber, 
				A.AuxItemNumber, 				
				A.Description1,
				A.Description2,
				A.PrimaryUnitOfMeasure, 
				A.SecondaryUnitOfMeasure, 
				A.PricingUnitOfMeasure, 
				A.SearchItemText, 
				A.StockingType, 
				A.LineType, 
				A.InventoryFlag,
				A.ItemFlashMessage,
				A.MatrixTemplate,
				A.MatrixControlled,
				ROW_NUMBER() OVER(ORDER BY A.LongItemNumber) RNUM
			FROM SESSION.PagingTable A
		)
		SELECT 	
			InstallationID 		AS InstallationID, 
			'' 					AS BranchPlant, 
			'' 					AS BranchPlantDesc, 
			A.ItemNumber, 
			A.LongItemNumber, 
			A.AuxItemNumber, 				
			CASE RetrieveWebContentInfo		
				WHEN 0 THEN A.Description1
				ELSE COALESCE(ContenDesc.DESC1, A.Description1)	
			END AS Description1 ,
			CASE RetrieveWebContentInfo
				WHEN 0 THEN A.Description2
				ELSE COALESCE(ContenDesc.DESC2, A.Description2)	
			END AS Description2,		
			ContenDesc.URL AS URL,
			A.PrimaryUnitOfMeasure, 
			A.SecondaryUnitOfMeasure, 
			A.PricingUnitOfMeasure, 
			A.SearchItemText, 
			A.StockingType, 
			A.LineType, 
			A.InventoryFlag,
			A.ItemFlashMessage,
			A.MatrixTemplate,
			A.MatrixControlled,
			0 AS MatrixParentItemNumber,
			0   AS AddressNumber,
			''	AS	AllowPickup,
			''  AS CYCL,
			''  AS PRP0,
			''  AS PRP1,
			''  AS PRP2,
			''  AS PRP3,
			''  AS PRP4,
			''  AS PRP5,
			''  AS PRP6,
			''  AS PRP7,
			''  AS PRP8,
			''  AS PRP9,
			''  AS SHCM,
			''  AS SHCN,
			''  AS SRP0,
			''  AS SRP1,
			''  AS SRP2,
			''  AS SRP3,
			''  AS SRP4,
			''  AS SRP5,
			''  AS SRP6,
			''  AS SRP7,
			''  AS SRP8,
			''  AS SRP9
		FROM CTE A
		LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.ItemNumber, LangPref , 0 ) ) AS ContenDesc
			ON ContenDesc.DESCITM = A.ItemNumber
		WHERE A.RNUM >=  ROWSTART AND A.RNUM <= ROWEND
		FOR FETCH ONLY;	
			
			INSERT INTO SESSION.FilterTable (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2,PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, MatrixTemplate, MatrixControlled)
			SELECT
				A.IMITM		AS ItemNumber,
				A.IMLITM	AS LongItemNumber,
				A.IMAITM	AS AuxItemNumber,
				A.IMDSC1	AS Description1,		
				A.IMDSC2	AS Description2,		
				A.IMUOM1	AS PrimaryUnitOfMeasure,
				A.IMUOM2	AS SecondaryUnitOfMeasure,
				A.IMUOM4	AS PricingUnitOfMeasure,
				A.IMSRTX	AS SearchItemText,
				A.IMSTKT	AS StockingType,
				A.IMLNTY	AS LineType,
				C.LFIVI		AS InventoryFlag,
				A.IMIFLA	AS ItemFlashMessage,
				A.IMTMPL	AS MatrixTemplate,
				A.IMMIC		AS MatrixControlled
			FROM
				[SCDATA].F4101 A						--Item Master
				INNER JOIN [SCDATA].F40205 C			--Line Type Control Table
				ON C.LFLNTY = A.IMLNTY		
			WHERE 
				(ItemNumber IS NOT NULL AND A.IMITM = ItemNumber)-- Item Number filter
				OR (FilterTerm = '*'						  -- DB engine do not short-circuiting so it includes more possible matches here
					OR A.IMLITM LIKE '%' || FilterTerm || '%'  -- Second Item Number filter
					OR A.IMAITM LIKE '%' || FilterTerm || '%'  -- Third Item Number filter
					OR UPPER(A.IMDSC1) LIKE '%' || FilterTerm || '%'  -- Description filter
					OR UPPER(A.IMDSC2) LIKE '%' || FilterTerm || '%'  -- Description filter
					OR UPPER(A.IMSRTX) LIKE '%' || FilterTerm || '%' )-- Search Text filter
			ORDER BY A.IMLITM ASC;
			
			INSERT INTO SESSION.PagingTable (ItemNumber, LongItemNumber, AuxItemNumber, Description1, Description2,PrimaryUnitOfMeasure, SecondaryUnitOfMeasure, PricingUnitOfMeasure, SearchItemText, StockingType, LineType, InventoryFlag, ItemFlashMessage, MatrixTemplate, MatrixControlled)
			SELECT DISTINCT 
				A.ItemNumber, 
				A.LongItemNumber, 
				A.AuxItemNumber, 
				A.Description1, 
				A.Description2,		
				A.PrimaryUnitOfMeasure, 
				A.SecondaryUnitOfMeasure, 
				A.PricingUnitOfMeasure, 
				A.SearchItemText, 
				A.StockingType, 
				A.LineType, 
				A.InventoryFlag, 
				A.ItemFlashMessage,
				A.MatrixTemplate,
				A.MatrixControlled
			FROM
				SESSION.FilterTable A							
				INNER JOIN [SCDATA].FQ679910 E	    /*BranchPlant by Installation*/
					ON E.BI$9INID = InstallationID 		
				INNER JOIN [SCDATA].F4102 B		/*Item Master by BranchPlant*/
					ON B.IBITM = A.ItemNumber 
					AND B.IBMCU = E.BIMCU 
			WHERE 
				A.StockingType <> 'N' AND (A.InventoryFlag = 'Y' OR A.InventoryFlag = 'D')			/*Inventory Interface: Stock items*/
				AND (BranchPlant = '*' OR E.BIMCU = BranchPlant)
			UNION ALL
			SELECT  
				A.ItemNumber, 
				A.LongItemNumber, 
				A.AuxItemNumber, 
				A.Description1, 
				A.Description2,
				A.PrimaryUnitOfMeasure, 
				A.SecondaryUnitOfMeasure, 
				A.PricingUnitOfMeasure, 
				A.SearchItemText, 
				A.StockingType, 
				A.LineType, 
				A.InventoryFlag, 
				A.ItemFlashMessage,
				A.MatrixTemplate,
				A.MatrixControlled
			FROM
				SESSION.FilterTable A						
			WHERE 
				A.StockingType = 'N' OR (A.InventoryFlag <> 'Y' AND A.InventoryFlag <> 'D');	/*Inventory Interface- Non stock items */
	
		/* Obtain the total count of the result */
		SET TotalRowCount = (SELECT	COUNT(1) FROM SESSION.PagingTable);			
				
		IF(PageIndex = 0 OR PageSize = 0)THEN		
			SET ROWSTART = 1;		
			SET ROWEND = TotalRowCount;			
		ELSE		
			SET ROWSTART = (PageSize * PageIndex) - PageSize + 1;			
			SET ROWEND = PageIndex * PageSize;
		END IF;
		OPEN TEMP_CURSOR1;
	END;
END;
-- #bl_class					Premier.Inventory.GetItemPublishCommand.cs
-- #desc						Returns Matrix Children information
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumbersXML		Item Numbers XML

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemMatrixChildren
(
	IN ItemNumbersXML	XML
)
DYNAMIC RESULT SETS 3
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetItemMatrixChildren
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE GLOBAL TEMPORARY TABLE SESSION.MATRIXITEMSTABLE (
	ItemNumber			NUMERIC(15,0),
	ParentItemNumber	NUMERIC(15,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	CREATE UNIQUE INDEX SESSION.MATRIXITEMSTABLE_ItemNumber ON SESSION.MATRIXITEMSTABLE (ItemNumber ASC) CLUSTER;

	BEGIN

	
	/* Gets matrix items children */
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT  
			A.ItemNumber, 
			A.ParentItemNumber,
			B.IMLITM AS LongItemNumber 
		FROM SESSION.MATRIXITEMSTABLE A
		INNER JOIN [SCDATA].F4101 B
			ON B.IMITM = A.ItemNumber
	FOR FETCH ONLY;

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			NM.ParentItemNumber AS MatrixParentItem,
			S0.S0ITM	AS ShortItemNumber,
			S0.S0MRNO	AS RowNumber,
			S0.S0MCNO	AS ColumnNumber,
			S0.S0TMPL	AS Template,
			S0.S0SEG1   AS Segment1,
			S0.S0SGD1   AS Segment1Desc,
			S0.S0SEG2	AS Segment2,
			S0.S0SGD2	AS Segment2Desc,
			S0.S0SEG3	AS Segment3,
			S0.S0SGD3	AS Segment3Desc,
			S0.S0SEG4	AS Segment4,
			S0.S0SGD4	AS Segment4Desc,
			S0.S0SEG5	AS Segment5,
			S0.S0SGD5	AS Segment5Desc,
			S0.S0SEG6	AS Segment6,
			S0.S0SGD6	AS Segment6Desc,
			S0.S0SEG7	AS Segment7,
			S0.S0SGD7	AS Segment7Desc,
			S0.S0SEG8	AS Segment8,
			S0.S0SGD8	AS Segment8Desc,
			S0.S0SEG9	AS Segment9,
			S0.S0SGD9	AS Segment9Desc,
			S0.S0SEG0	AS Segment0,
			S0.S0SGD0	AS Segment0Desc
		FROM [SCDATA].F41008 S0
		INNER JOIN (SELECT DISTINCT ItemNumber, ParentItemNumber FROM SESSION.MATRIXITEMSTABLE) NM
			ON NM.ItemNumber= S0.S0ITM
	FOR FETCH ONLY;

	/*Gets Matrix Template Master*/
	DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	WITH CTE AS (
		SELECT
			MTM.T7TMPL AS Template,
			NM.ParentItemNumber AS MatrixParentItem,
			MTM.T7MCU  AS BusinessUnit,
			MTM.T7HSEG AS HorizontalSegment,
			MTM.T7NSEG AS NumberofSegments,
			MTM.T7VSEG AS VerticalSegment,
			MTM.T7TDES AS TemplateDesc,
			MTM.T7SGD0 AS Segment0Desc,
			MTM.T7SGD1 AS Segment1Desc,
			MTM.T7SGD2 AS Segment2Desc,
			MTM.T7SGD3 AS Segment3Desc,
			MTM.T7SGD4 AS Segment4Desc,
			MTM.T7SGD5 AS Segment5Desc,
			MTM.T7SGD6 AS Segment6Desc,
			MTM.T7SGD7 AS Segment7Desc,
			MTM.T7SGD8 AS Segment8Desc,
			MTM.T7SGD9 AS Segment9Desc,
			ROW_NUMBER() OVER(PARTITION BY MTM.T7TMPL, NM.ParentItemNumber ORDER BY MTM.T7MCU) AS RNUM
		FROM [SCDATA].F410014 MTM
		INNER JOIN [SCDATA].F41008 S0
			ON S0.S0TMPL = MTM.T7TMPL
		INNER JOIN SESSION.MATRIXITEMSTABLE NM
			ON NM.ItemNumber= S0.S0ITM
	)
	SELECT
		A.Template,
		A.MatrixParentItem,
		A.BusinessUnit,
		A.HorizontalSegment,
		A.NumberofSegments,
		A.VerticalSegment,
		A.TemplateDesc,
		A.Segment0Desc,
		A.Segment1Desc,
		A.Segment2Desc,
		A.Segment3Desc,
		A.Segment4Desc,
		A.Segment5Desc,
		A.Segment6Desc,
		A.Segment7Desc,
		A.Segment8Desc,
		A.Segment9Desc
	FROM CTE A
	WHERE RNUM = 1 /* Avoid duplicated records */
	FOR FETCH ONLY;

	/* Gets matrix children and Inserts into MATRIXITEMSTABLE */
	INSERT INTO SESSION.MATRIXITEMSTABLE (ItemNumber, ParentItemNumber)
	SELECT 
		A.IMITM, items.ITEMNUMBER
	FROM XMLTABLE ('$d/items/item'
					PASSING ItemNumbersXML AS "d"
					COLUMNS ITEMNUMBER NUMERIC(15,0) PATH 'itemNumber',
							TEMPLATE VARCHAR(20) PATH 'template',
							SEGMENT1 VARCHAR(10) PATH 'segment1') AS items 
	INNER JOIN [SCDATA].F4101 A 
		ON A.IMTMPL = items.TEMPLATE AND A.IMSEG1 = items.SEGMENT1 AND A.IMMIC = '2';

	OPEN TEMP_CURSOR1;/* Gets matrix items children */
	OPEN TEMP_CURSOR2;/*Gets Matrix Segments*/
	OPEN TEMP_CURSOR3;/*Gets Matrix Template Master*/
	
	END;
END ;
-- #desc					Read UOM list by Item
-- #bl_class				Premier.Inventory.ItemUnitOfMeasureList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID		
-- #param ItemNumber		Short Item Number

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemUnitOfMeasureList
(
	IN InstallationID	varchar(3),
	IN ItemNumber		NUMERIC(15,0),
	IN LangPref			VARCHAR(2)		
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemUnitOfMeasureList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE ItemFlag VARCHAR(2);
	DECLARE ItemPrimaryUOM VARCHAR(3);
	DECLARE ItemPricingUOM VARCHAR(3);

	--Basic UOM table
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT DISTINCT UOM.UnitOfMeasure AS UnitOfMeasure, COALESCE(UOMLang.UMDSC1,UOMByInstallation.UMDSC1) AS Description
		FROM
		(
			SELECT A.UCUM AS UnitOfMeasure FROM [SCDATA].F41003 A WHERE A.UCRUM = ItemPrimaryUOM OR A.UCRUM = ItemPricingUOM
			UNION
			SELECT A.UCRUM AS UnitOfMeasure FROM [SCDATA].F41003 A WHERE A.UCUM = ItemPrimaryUOM OR A.UCUM = ItemPricingUOM
			UNION
			SELECT ItemPrimaryUOM AS UnitOfMeasure FROM SYSIBM.SYSDUMMY1
			UNION
			SELECT ItemPricingUOM AS UnitOfMeasure FROM SYSIBM.SYSDUMMY1
		) AS UOM
		INNER JOIN [SCDATA].FQ67415 AS UOMByInstallation
			ON UOMByInstallation.UMUOM = UOM.UnitOfMeasure
			AND UOMByInstallation.UM$9INID = InstallationID
		LEFT OUTER JOIN [SCDATA].FQ67415L AS UOMLang
			ON  UOMLang.UMUOM = UOMByInstallation.UMUOM
			AND UOMLang.UMLNGP = LangPref
		ORDER BY UOM.UnitOfMeasure
		FOR FETCH ONLY;
	
	--Item specific UOM Table
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT DISTINCT UOM.UnitOfMeasure AS UnitOfMeasure, COALESCE(UOMLang.UMDSC1, UOMByInstallation.UMDSC1) AS Description
		FROM 
		(
			SELECT A.UMUM AS UnitOfMeasure FROM [SCDATA].F41002 AS A WHERE A.UMITM = ItemNumber
			UNION
			SELECT A.UMRUM AS UnitOfMeasure FROM [SCDATA].F41002 AS A WHERE A.UMITM = ItemNumber
			UNION
			SELECT ItemPrimaryUOM AS UnitOfMeasure FROM SYSIBM.SYSDUMMY1
			UNION
			SELECT ItemPricingUOM AS UnitOfMeasure FROM SYSIBM.SYSDUMMY1
		) AS UOM
		INNER JOIN [SCDATA].FQ67415 AS UOMByInstallation
			ON UOMByInstallation.UMUOM = UOM.UnitOfMeasure
			AND UOMByInstallation.UM$9INID = InstallationID
		LEFT OUTER JOIN [SCDATA].FQ67415L AS UOMLang
			ON  UOMLang.UMUOM = UOMByInstallation.UMUOM
			AND UOMLang.UMLNGP = LangPref
		ORDER BY UOM.UnitOfMeasure
		FOR FETCH ONLY;

	--Read the Item Using the short Item Number
	SELECT A.IMTFLA , A.IMUOM1, A.IMUOM4
	INTO ItemFlag, ItemPrimaryUOM, ItemPricingUOM
	FROM [SCDATA].F4101 A	--Item Master
	WHERE A.IMITM = ItemNumber
	FETCH FIRST 1 ROW ONLY;

	
	IF ( RTRIM(ItemFlag) = '1' )
	THEN
		--Basic UOM table
		OPEN TEMP_CURSOR1; 
	ELSE
		--Item specific UOM Table
		OPEN TEMP_CURSOR2; 
	END IF;
	
	
END ;
 -- #desc				    Get Web Content Detail
-- #bl_class			    Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param ItemNumber	    Item Number.
-- #param InstallationID    Installation ID.
-- #param DesignStatus      Desing Status.
-- #param UniqueKeyID       UniqueKeyID

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemWebContentDetail
(
	IN InstallationID varchar(3),
	IN ItemNumber NUMERIC(15,0),
    IN DesignStatus NUMERIC(15,0),
    IN UniqueKeyID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContentDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	
	BEGIN
		DECLARE TEMP_CONTENTDETAIL CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

	SELECT 
	   CDITM AS ItemNumber
      ,CDUKID AS UniqueKeyID
      ,CD$9INID AS InstallationID
      ,CD$9DS AS DesignStatus
      ,CDSEQ AS SequenceNumber
      ,CD$9PTL AS ParagraphTitle
      ,CD$9HTML AS HtmlContent
      ,CDASAI AS ActiveInactive
      ,CDEFFF AS EffectiveFromDate
      ,CDEFFT AS EffectiveThruDate
      ,CDURDT AS UserReservedDate
      ,CDURAT AS UserReservedAmount
      ,CDURAB AS UserReservedNumber
      ,CDURRF AS UserReservedReference
      ,CDUSER AS "USERID"
      ,CDPID AS "PROGRAMID"
      ,CDJOBN AS WorkStationId
      ,CDUPMJ AS DateUpdated
      ,CDTDAY AS TimeOfDay
  FROM [SCDATA].FQ67411
 WHERE  (CDITM =ItemNumber)AND
		(CD$9INID = InstallationID)AND
		(CD$9DS =DesignStatus)AND
        (CDUKID = UniqueKeyID)
   
      	FOR FETCH ONLY;
		
		OPEN TEMP_CONTENTDETAIL;

		CALL [SCLIBRARY].INV_GetItemWebContentDetLangs(InstallationID,ItemNumber,DesignStatus,UniqueKeyID,'*');		
		
	END;		
END
 ;
-- #desc						Get item web content detail list
-- #bl_class					Premier.Inventory.ItemWebContentDetailList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ItemNumber			Item Number.
-- #param InstallationID		Installation ID.	
-- #param DesignStatus			Design Status. (Live Status = 0, Design Status = 1)
-- #param LangPref				Language Preference
-- #param Status				Active and Inactive, (Both = '*', Active= 'A', Inactive = 'I')
-- #param EffectiveOnly			Retrieve only the effective paragraphs for today or retrieve all paragraphs (0 = Off, 1 = ON)

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemWebContentDetList
(
		IN InstallationID varchar(3),
		IN ItemNumber NUMERIC(15,0),
		IN DesignStatus NUMERIC(15,0),
		IN LangPref varchar(2),
		IN Status varchar(1),
		IN EffectiveOnly NUMERIC(1)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContentDetList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate INT DEFAULT 0;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
        SELECT
			A.CD$9INID AS InstallationID,
			A.CDITM    AS ItemNumber,
			A.CD$9DS	 AS DesignStatus,
			A.CDUKID   AS UniqueKeyID,
			A.CDASAI   AS ActiveInactive,
			A.CDSEQ	 AS SequenceNumber,
			COALESCE(B.CL$9PTL,A.CD$9PTL) AS ParagraphTitle,
		    COALESCE(B.CL$9HTML,A.CD$9HTML) AS HtmlContent,
			A.CDEFFF   AS EffectiveFromDate,
			A.CDEFFT   AS EffectiveThruDate
		FROM
			[SCDATA].FQ67411 A
			left join  [SCDATA].FQ67411L B ON 
				A.CD$9INID = B.CL$9INID AND
				CLLNGP = LangPref AND
				A.CDITM =CLITM AND 
				A.CDUKID = B.CLUKID AND 
				A.CD$9DS = B.CL$9DS			
		WHERE 
			ItemNumber = A.CDITM 
			and A.CD$9INID=InstallationID
			AND A.CD$9DS = DesignStatus
			AND (Status = 'X' or CDASAI = Status)		
			and (EffectiveOnly=0 OR(CurrentJulianDate >= A.CDEFFF AND CurrentJulianDate <= A.CDEFFT))  	
		ORDER BY SequenceNumber ASC
		FOR FETCH ONLY;

	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
	IF(InstallationID <> '***')THEN	
		IF NOT EXISTS(SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE (CH$9INID = InstallationID AND CHITM = ItemNumber AND CH$9DS = DesignStatus))
			THEN
				SET InstallationID = '***';
			END IF;
	END IF;
			
	OPEN TEMP_CURSOR1;
END
 ;
-- #desc				    Updates Item Web Content Information
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param ItemNumber		Item number
-- #param InstallationID	Installation ID		
-- #param DesignStatus		Item Content Design status

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemWebContentHeader
(
	  IN InstallationID varchar(3),
	  IN ItemNumber NUMERIC(15,0),
      IN DesignStatus NUMERIC(15,0)
)
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContentHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	
	BEGIN
		DECLARE TEMP_WEBHEADER CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

	SELECT 
	    CHITM AS ItemNumber
      , CH$9INID AS InstallationID
      , CH$9DS AS DesignStatus
      , CHDSC1 AS Description1
      , CHDSC2 AS Description2
      , CHDSC3 AS Description3
      , CH$9PRI AS MessagePriority
      , CH$9HTML AS HtmlContent
      , CHPTURL AS PortalUrl
      , CHURCD AS UserReservedCode
      , CHURDT AS UserReservedDate
      , CHURAT AS UserReservedAmount
      , CHURAB AS UserReservedNumber
      , CHURRF AS UserReservedReference
      , CHUSER AS "USERID"
      , CHPID AS "PROGRAMID"
      , CHJOBN AS WorkStationId
      , CHUPMJ AS DateUpdated
      , CHTDAY AS TimeOfDay
      
 FROM [SCDATA].FQ67410
 
 WHERE  (CHITM =ItemNumber)AND
		(CH$9INID = InstallationID)AND
		(DesignStatus IS NULL OR CH$9DS = DesignStatus)
			
			FOR FETCH ONLY;
		
		OPEN TEMP_WEBHEADER;
			
	END;	
		
CALL [SCLIBRARY].INV_GetItemWebContentHeadLangs(InstallationID,ItemNumber,DesignStatus,'*');
END
 ;
-- #desc						Get item web content detail list
-- #bl_class					Premier.Inventory.ItemWebContentHeaderInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param IN InstallationID		Installation Id
-- #param IN UnitOfMeasure		Unit of Measure
-- #param IN LangPref		    Language preference
-- #param DesignStatus			Design Status

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemWebContentHeadInfo
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN ItemNumber		NUMERIC(8,0),
	IN LangPref			GRAPHIC(2) CCSID 13488,
	IN DesignStatus		DECIMAL(31,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContentHeadInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 	
BEGIN
	
	IF NOT EXISTS(SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE (CH$9INID=InstallationID AND CHITM=ItemNumber AND CH$9DS=DesignStatus))
	THEN
		set InstallationID='***';
	END IF;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			IMITM AS ItemNumber,
			IMLITM AS LongItemNumber,
			IMAITM AS AuxItemNumber,
			CH$9INID AS InstallationID,
			CH$9DS AS DesignStatus,
			COALESCE(CLDSC1,CHDSC1) AS Description1,
			COALESCE(CLDSC2,CHDSC2) AS Description2,
			COALESCE(CLDSC3,CHDSC3) AS Description3,
			CHUPMJ  AS PublishedSince,
			0 AS DraftAndPublished,
			COALESCE(CL$9HTML,CH$9HTML) AS HTML
		FROM  [SCDATA].FQ67410
		INNER JOIN [SCDATA].F4101 
			ON CHITM = IMITM
		LEFT OUTER JOIN [SCDATA].FQ67410L 
			ON CLLNGP = LangPref 
			AND (CL$9INID = CH$9INID 
				AND CLITM = CHITM 
				AND CL$9DS=CH$9DS)
		WHERE (CH$9INID=InstallationID and CHITM=ItemNumber AND CH$9DS=DesignStatus)
	    FOR FETCH ONLY;

		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc						Get Web Content Header List
-- #bl_class					Premier.Inventory.ItemWebContentHeaderList.cs
-- #db_dependencies				N/A
-- #db_references				N/A


-- #param InstallationID		Installation ID.
-- #param DesignStatus			Design STATUS.
-- #param FilterTerm			Filter Term.

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetItemWebContentHeadList
(
	  IN InstallationID GRAPHIC(3) CCSID 13488,
	  IN DesignStatus 	DECIMAL(31,0),
	  IN ItemNumber 	NUMERIC(8,0),
      IN FilterTerm	  	VARGRAPHIC(30) CCSID 13488,
	  IN ContentStatus	INT,
	  IN PageIndex	  	INT,
	  IN PageSize	  	INT,
	  INOUT TotalRowCount	INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContentHeadList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	-------------------------------------------------------
	-- Define the table to do the filtering AND paging
	------------------------------------------------------- 
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	DECLARE SQL_DYNAMIC					VARGRAPHIC(8000) CCSID 13488;
	DECLARE WHERE_DYNAMIC				VARGRAPHIC(1000) CCSID 13488;
	DECLARE SELECT_DYNAMIC				VARGRAPHIC(1000) CCSID 13488;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TBL 
	( 	
		TBLItemNumber		NUMERIC(15,0),
		TBLInstallationID	GRAPHIC(3) CCSID 13488,
		DesignStatus		DECIMAL(31,0),
		LongItemNumber		VARGRAPHIC(25) CCSID 13488,
		AuxItemNumber		VARGRAPHIC(25) CCSID 13488,
		Description1		VARGRAPHIC(30) CCSID 13488,
		Description2		VARGRAPHIC(30) CCSID 13488,
		Description3		VARGRAPHIC(30) CCSID 13488,
		PublishedSince		NUMERIC(6,0),
		DraftAndPublished   INT
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	BEGIN                   
        /* Select the rows FROM temporary table between the  range of ROWSTART AND ROWEND */
        DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT 
				T.TBLItemNumber,
                T.LongItemNumber,
                T.AuxItemNumber,
				T.TBLInstallationID,
				T.DesignStatus,
				T.Description1,
				T.Description2,
				T.Description3, 
				T.PublishedSince,
				T.DraftAndPublished,
                ROW_NUMBER () OVER (ORDER BY T.TBLItemNumber) AS RNUM 
			FROM SESSION.TBL T
		)
        SELECT 
			B.TBLItemNumber AS ItemNumber,
            B.LongItemNumber,
            B.AuxItemNumber,
			B.TBLInstallationID AS InstallationID,
			B.DesignStatus,
			B.Description1,
			B.Description2,
			B.Description3,
			B.PublishedSince,
			B.DraftAndPublished,
			'' AS HTML
		FROM CTE B
		WHERE RNUM BETWEEN RowStart AND RowEnd
        FOR FETCH ONLY;

		/* Content columns dynamic */
		IF(DesignStatus IS NULL) THEN
			SET SELECT_DYNAMIC = N'
			COALESCE(DRAFT_INS.ch$9inid, COALESCE(LIVE_INS.ch$9inid, COALESCE (DRAFT_BASE.ch$9inid, LIVE_BASE.ch$9inid)))	TBLInstallationID,
			COALESCE(DRAFT_INS.CH$9DS, COALESCE(LIVE_INS.CH$9DS, COALESCE(DRAFT_BASE.CH$9DS, LIVE_BASE.CH$9DS)))			DesignStatus,
			COALESCE(DRAFT_INS.CHDSC1, LIVE_INS.CHDSC1, DRAFT_BASE.CHDSC1, LIVE_BASE.CHDSC1, '''')			CHDSC1,
			COALESCE(DRAFT_INS.CHDSC2, LIVE_INS.CHDSC2, DRAFT_BASE.CHDSC2, LIVE_BASE.CHDSC2, '''')			CHDSC2,
			COALESCE(DRAFT_INS.CHDSC3, LIVE_INS.CHDSC3, DRAFT_BASE.CHDSC3, LIVE_BASE.CHDSC3, '''')			CHDSC3,
			';
		ELSEIF(DesignStatus = 1) THEN
			SET SELECT_DYNAMIC = N'
			CASE WHEN (DRAFT_INS.CH$9DS IS NOT NULL) THEN DRAFT_INS.CH$9INID ELSE DRAFT_BASE.CH$9INID END		TBLInstallationID,
			CASE WHEN (DRAFT_INS.CH$9DS IS NOT NULL) OR (DRAFT_BASE.CH$9DS IS NOT NULL AND LIVE_INS.CH$9DS IS NULL) THEN 1 ELSE 0 END	DesignStatus,
			COALESCE(DRAFT_INS.CHDSC1, DRAFT_BASE.CHDSC1, '''')			CHDSC1,
			COALESCE(DRAFT_INS.CHDSC2, DRAFT_BASE.CHDSC2, '''')			CHDSC2,
			COALESCE(DRAFT_INS.CHDSC3, DRAFT_BASE.CHDSC3, '''')			CHDSC3,
			';
		ELSEIF(DesignStatus = 0) THEN
			SET SELECT_DYNAMIC = N'
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) THEN LIVE_INS.CH$9INID ELSE LIVE_BASE.CH$9INID END	TBLInstallationID,
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) OR (LIVE_BASE.CH$9DS IS NOT NULL) THEN 0 ELSE 1 END	DesignStatus,
			COALESCE(LIVE_INS.CHDSC1, LIVE_BASE.CHDSC1, '''')			CHDSC1,
			COALESCE(LIVE_INS.CHDSC2, LIVE_BASE.CHDSC2, '''')			CHDSC2,
			COALESCE(LIVE_INS.CHDSC3, LIVE_BASE.CHDSC3, '''')			CHDSC3,
			';
		ELSE
			SET SELECT_DYNAMIC = N'
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) THEN LIVE_INS.CH$9INID ELSE LIVE_BASE.CH$9INID END	TBLInstallationID,
			CASE WHEN (LIVE_INS.CH$9DS IS NOT NULL) OR (LIVE_BASE.CH$9DS IS NOT NULL) THEN 0 ELSE 1 END	DesignStatus,
			COALESCE(DRAFT_INS.CHDSC1, LIVE_INS.CHDSC1, DRAFT_BASE.CHDSC1, LIVE_BASE.CHDSC1, '''')			CHDSC1,
			COALESCE(DRAFT_INS.CHDSC2, LIVE_INS.CHDSC2, DRAFT_BASE.CHDSC2, LIVE_BASE.CHDSC2, '''')			CHDSC2,
			COALESCE(DRAFT_INS.CHDSC3, LIVE_INS.CHDSC3, DRAFT_BASE.CHDSC3, LIVE_BASE.CHDSC3, '''')			CHDSC3,
			';
		END IF;

        SET SQL_DYNAMIC = N'
		INSERT INTO SESSION.TBL(TBLItemNumber, TBLInstallationID, DesignStatus, LongItemNumber, AuxItemNumber, Description1, Description2, Description3, PublishedSince, DraftAndPublished)
		WITH CTE AS (
			SELECT 
				ITEMS.CHITM,
				'|| SELECT_DYNAMIC ||N'
				CASE 
					WHEN (DRAFT_INS.chitm IS NOT NULL OR LIVE_INS.chitm IS NOT NULL) THEN COALESCE(LIVE_INS.CHUPMJ, 0) 
					ELSE COALESCE (LIVE_BASE.CHUPMJ, 0)  
				END AS PublishedSince,
				  
				CASE 
					WHEN (DRAFT_INS.CHITM IS NOT NULL AND LIVE_INS.CHITM IS NOT NULL) THEN 1 
					WHEN (DRAFT_INS.CHITM IS NULL AND LIVE_INS.CHITM IS NULL AND DRAFT_BASE.CHITM IS NOT NULL AND LIVE_BASE.CHITM IS NOT NULL) THEN 1 
					WHEN (DRAFT_INS.CHITM IS NOT NULL AND LIVE_INS.CHITM IS NULL AND LIVE_BASE.CHITM IS NOT NULL) THEN 1
				ELSE 0
				END AS DraftAndPublished
                  
			FROM  
				(SELECT DISTINCT CHITM
					FROM [SCDATA].FQ67410
					WHERE CH$9INID IN (?, ''***'')
					AND (? IS NULL OR CH$9DS = ?)) AS ITEMS
								
				LEFT OUTER JOIN [SCDATA].FQ67410 LIVE_INS
					ON LIVE_INS.CHITM = ITEMS.CHITM
					AND LIVE_INS.CH$9INID = ?
					AND LIVE_INS.CH$9DS = 0 
						 
				LEFT OUTER JOIN [SCDATA].FQ67410 DRAFT_INS
					ON DRAFT_INS.CHITM = ITEMS.CHITM  
					AND DRAFT_INS.CH$9INID = ?
					AND DRAFT_INS.CH$9DS = 1
						  
				LEFT OUTER JOIN [SCDATA].FQ67410 LIVE_BASE
					ON LIVE_BASE.CHITM = ITEMS.CHITM 
					AND LIVE_BASE.CH$9INID = ''***''
					AND LIVE_BASE.CH$9DS = 0
						  
				LEFT OUTER JOIN [SCDATA].FQ67410 DRAFT_BASE
					ON DRAFT_BASE.CHITM = ITEMS.CHITM
					AND DRAFT_BASE.CH$9INID =''***''
					AND DRAFT_BASE.CH$9DS = 1
		)
		SELECT 
			A.CHITM,
			A.TBLInstallationID,
			A.DesignStatus,
			MAS.IMLITM,
			MAS.IMAITM,
			A.CHDSC1,
			A.CHDSC2,
			A.CHDSC3,	
			A.PublishedSince,
			A.DraftAndPublished
		FROM CTE A
		INNER JOIN [SCDATA].F4101 MAS
			ON MAS.IMITM = A.CHITM
		WHERE '; 
					   
		IF  FilterTerm <> '*' OR ItemNumber IS NOT NULL THEN 
			IF (ItemNumber IS NOT NULL) THEN 
				SET WHERE_DYNAMIC = N' (A.CHITM = ? 
				OR ( UPPER(A.CHDSC1 || '' '' || A.CHDSC2 || '' '' || A.CHDSC3 || '' '' || MAS.IMLITM || '' '' || MAS.IMAITM ) LIKE ''%'' || ?  || ''%'')) ';
			ELSE
				SET WHERE_DYNAMIC = N' ((1 = 1 OR ? IS NULL) 
				AND ( UPPER(A.CHDSC1 || '' '' || A.CHDSC2 || '' '' || A.CHDSC3 || '' '' || MAS.IMLITM || '' '' || MAS.IMAITM ) LIKE ''%'' || ?  || ''%'')) ';
			END IF;
		ELSE
			SET WHERE_DYNAMIC = N' (1 = 1 OR ? IS NULL) AND (1 = 1 OR ? = ''*'') ';
		END IF;
		
		SET SQL_DYNAMIC = SQL_DYNAMIC || WHERE_DYNAMIC;

		PREPARE S1 FROM SQL_DYNAMIC;
		EXECUTE S1 USING InstallationID, DesignStatus, DesignStatus, InstallationID, InstallationID, ItemNumber, FilterTerm;

		/*If the filter is ALL then delete Published version when the item has a draft copy*/
		IF DesignStatus IS NULL OR DesignStatus = 2 THEN
			DELETE FROM SESSION.TBL A 
			WHERE  A.DesignStatus = 0 AND A.DraftAndPublished = 1;
		/*If the filter is Design then delete Published records and viceversa*/
		ELSEIF (DesignStatus = 0) THEN
			DELETE FROM SESSION.TBL A 
			WHERE A.DesignStatus = 1;
		ELSEIF (DesignStatus = 1) THEN
			DELETE FROM SESSION.TBL A
			WHERE A.DesignStatus = 0;
		END IF;

		IF ContentStatus = 0 THEN
			DELETE FROM SESSION.TBL A
			WHERE A.TBLInstallationID = '***';
		ELSEIF ContentStatus = 1 THEN
			DELETE FROM SESSION.TBL A
			WHERE A.TBLInstallationID = InstallationID;
		END IF;
            
		/*Obtain the total count of the result */
        SET TotalRowCount = (SELECT COUNT(1) FROM SESSION.TBL);
		/* Validate if paging is not required */
        IF (PageIndex = 0 OR PageSize = 0) THEN 
			/* Set the first row to be SELECTED */
            SET RowStart = 1 ; 
            /* Set the last row to be SELECTED */
            SET RowEnd = TotalRowCount;                                         
		ELSE                                       
			/*Set the first row to be SELECTED*/ 
            SET RowStart = (PageSize * PageIndex) - PageSize + 1 ; 
            /*Set the last row to be SELECTED */
            SET RowEnd = PageIndex * PageSize ; 
		END IF ; 
            
        OPEN TEMP_CURSOR1; 
	END;
END ;
-- #desc					Reads installations that share the content
-- #bl_class				Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ItemNumber		Item number

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetItemWebContSharedInst
(
	  IN ItemNumber NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetItemWebContSharedInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT	
			IN$9INID AS InstallationId,
			INDSC1 AS Description,
			IN$9APFL AS ApplicationUseFlag
		FROM
			[SCDATA].FQ670001
		WHERE
			IN$9INID NOT IN (SELECT CH$9INID FROM [SCDATA].FQ67410 WHERE CHITM = ItemNumber)
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
END
 ;
-- #bl_class								Premier.Inventory.KitComponentList.cs
-- #db_dependencies							N/A
-- #db_references							N/A

-- #param InstallationID					InstallationID 
-- #param AddressNumber						AddressNumber
-- #param ItemNumber						Parent (short) Item Number
-- #param BranchPlant						BranchPlant
-- #param Company							Company
-- #param RetrieveWebContentInfo			Retrieve Web Content Info
-- #param LangPref							Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetKitComponentsList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN ItemNumber		NUMERIC(8,0),
	IN BranchPlant		GRAPHIC(12) CCSID 13488,
	IN Company			GRAPHIC(5) CCSID 13488,
	IN RetrieveWebContentInfo  INT, 
	IN LangPref			GRAPHIC(2) CCSID 13488
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetKitComponentsList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_KITCOMP
	 (
		ParentItemNumber		NUMERIC(8,0),
		FeatureParentItem		NUMERIC(8,0),
		ComponentItemNumber		NUMERIC(8,0),
		ComponentLineNumber		DECIMAL(8,0),
		ComponentType			GRAPHIC(1) CCSID 13488,
		Required				GRAPHIC(1) CCSID 13488,
		Quantity				DECIMAL(15,0),
		UnitOfMeasure			GRAPHIC(2) CCSID 13488
	 )WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	BEGIN
		DECLARE ItemRestrictionsCode	GRAPHIC(1) CCSID 13488;
		
		-- Get ItemRestrictionsCode
		SET ItemRestrictionsCode = NULL;
		SET ItemRestrictionsCode = (SELECT AIEDF2 FROM [SCDATA].F03012 WHERE AICO = Company AND AIAN8 = AddressNumber);
		
		IF(ItemRestrictionsCode IS NULL)THEN
			SET ItemRestrictionsCode = (SELECT AIEDF2 FROM [SCDATA].F03012 WHERE AICO = '00000' AND AIAN8 = AddressNumber);
		END IF;	

		BEGIN

			DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT
				KT.ParentItemNumber		AS ParentItemNumber,
				KT.FeatureParentItem	AS FeatureParentItem,
				KT.ComponentItemNumber	AS ComponentItemNumber,
				IM.IMLITM AS LongItemNumber,
				IM.IMAITM AS AuxItemNumber,
				KT.ComponentLineNumber	AS ComponentLineNumber,
				KT.ComponentType		AS ComponentType,
				KT.Required				AS Required,
				KT.Quantity				AS Quantity,
				KT.UnitOfMeasure		AS UnitOfMeasure,
				COALESCE(COALESCE(UOMLNG.UMDSC1, UOM.UMDSC1), KT.UnitOfMeasure)	AS UnitOfMeasureDesc,						
				COALESCE(ContenDesc.DESC1, IM.IMDSC1)	AS ItemDescription1,
				COALESCE(ContenDesc.DESC2, IM.IMDSC2)	AS ItemDescription2,
				ContenDesc.URL AS URL
			FROM 
				SESSION.TMP_KITCOMP KT
			INNER JOIN [SCDATA].F4101 IM	--ITEM MASTER
				ON IM.IMITM = KT.ComponentItemNumber 
			LEFT JOIN [SCDATA].FQ67415 UOM
				ON UOM.UMUOM = KT.UnitOfMeasure
				AND UOM.UM$9INID = InstallationID
			LEFT JOIN [SCDATA].FQ67415L UOMLNG
				ON UOMLNG.UMUOM = UOM.UMUOM
				AND UOMLNG.UMLNGP = LangPref
			LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , IM.IMITM, LangPref , 0 ) ) AS ContenDesc
				ON ContenDesc.DESCITM = IM.IMITM
			ORDER BY KT.ParentItemNumber,KT.ComponentLineNumber
			FOR FETCH ONLY;
			
			DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT
				KT.ParentItemNumber		AS ParentItemNumber,
				KT.FeatureParentItem	AS FeatureParentItem,
				KT.ComponentItemNumber	AS ComponentItemNumber,
				IM.IMLITM AS LongItemNumber,
				IM.IMAITM AS AuxItemNumber,
				KT.ComponentLineNumber	AS ComponentLineNumber,
				KT.ComponentType		AS ComponentType,
				KT.Required				AS Required,
				KT.Quantity				AS Quantity,
				KT.UnitOfMeasure		AS UnitOfMeasure,
				COALESCE(COALESCE(UOMLNG.UMDSC1, UOM.UMDSC1), KT.UnitOfMeasure)	AS UnitOfMeasureDesc,						
				IM.IMDSC1				AS ItemDescription1, /* Retrieve Description 1 for Tracking lines */
				N''						AS ItemDescription2,
				N''						AS URL
			FROM 
				SESSION.TMP_KITCOMP KT
			INNER JOIN [SCDATA].F4101 IM	--ITEM MASTER
				ON IM.IMITM = KT.ComponentItemNumber 
			LEFT JOIN [SCDATA].FQ67415 UOM
				ON UOM.UMUOM = KT.UnitOfMeasure
				AND UOM.UM$9INID = InstallationID
			LEFT JOIN [SCDATA].FQ67415L UOMLNG
				ON UOMLNG.UMUOM = UOM.UMUOM
				AND UOMLNG.UMLNGP = LangPref
			ORDER BY KT.ParentItemNumber,KT.ComponentLineNumber
			FOR FETCH ONLY;

			INSERT INTO SESSION.TMP_KITCOMP
			(
				ParentItemNumber,
				FeatureParentItem,
				ComponentItemNumber,
				ComponentLineNumber,
				ComponentType,
				Required,
				Quantity,
				UnitOfMeasure
			)
			(SELECT
				KT.IXKIT	AS ParentItemNumber,
				0			AS FeatureParentItem,
				KT.IXITM	AS ComponentItemNumber,
				KT.IXCPNB	AS ComponentLineNumber,
				KT.IXOPTK	AS ComponentType,
				KT.IXFTRC	AS Required,
				KT.IXQNTY	AS Quantity,
				KT.IXUOM	AS UnitOfMeasure
			FROM 
				[SCDATA].F3002 KT
			WHERE
				KT.IXKIT = ItemNumber 
				AND IXMMCU = BranchPlant
				AND IXTBM = 'M'
			UNION
			SELECT
				KT.IXKIT	AS ParentItemNumber,
				ItemNumber	AS FeatureParentItem,
				KT.IXITM	AS ComponentItemNumber,
				KT.IXCPNB	AS ComponentLineNumber,
				KT.IXOPTK	AS ComponentType,
				KT.IXFTRC	AS Required,
				KT.IXQNTY	AS Quantity,
				KT.IXUOM	AS UnitOfMeasure
			FROM 
				[SCDATA].F3002 KT
			WHERE KT.IXKIT in (SELECT IXITM FROM [SCDATA].F3002 WHERE
								IXKIT = ItemNumber
								AND IXMMCU = BranchPlant
								AND IXOPTK ='F'
								AND IXTBM = 'M'));
								
			IF(ItemRestrictionsCode = 'E') THEN--Exclude
				DELETE FROM SESSION.TMP_KITCOMP A
				WHERE A.ComponentType = 'O' AND
				EXISTS(SELECT SXXRVF FROM [SCDATA].F4013 R
									WHERE R.SXXRVF = AddressNumber 
									AND R.SXXRVT = A.ComponentItemNumber
									AND R.SXEDF1 = 'S' AND R.SXXRTC = 'IR');
			ELSEIF (ItemRestrictionsCode = 'I') THEN--Include
				DELETE FROM SESSION.TMP_KITCOMP A
				WHERE 
					A.ComponentType = 'O' AND
					A.ComponentItemNumber NOT IN (SELECT SXXRVT FROM [SCDATA].F4013 WHERE SXXRVF = AddressNumber AND SXEDF1 = 'S' AND SXXRTC = 'IR');
			END IF;		

			IF(RetrieveWebContentInfo = 1) THEN
				OPEN TEMP_CURSOR1;
			ELSE
				OPEN TEMP_CURSOR2;
			END IF;

		END;
	END;
END
	  ;
-- #desc				Get LineType Item info
-- #bl_class			Premier.Inventory.LineTypeInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param LineType		Line Type Id

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetLineTypeInfo
(
	LineType	VARCHAR(3)	
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetLineTypeInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		SELECT
			A.LFLNTY LineType, 
			A.LFLNDS Description1, 
			A.LFLND2 Description2,
			A.LFTX01 IsTaxable
		FROM 
			[SCDATA].F40205 A 
		WHERE 
			A.LFLNTY = LTRIM(RTRIM(LineType))
		FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
	
END
                  ;
-- #desc					Gets itemNumber List
-- #bl_class				Premier.Inventory.LineTypeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param ItemNumber		Short Item Number
-- #param Description1		Description1
-- #param Description2		Description2

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetLineTypeList
(
	LineType		varchar(3),
	Description1	varchar(30),
	Description2	varchar(30)	
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetLineTypeList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		A.LFLNTY LineType,
		A.LFLNDS Description1, 
		A.LFLND2 Description2,
		A.LFTX01 IsTaxable
	FROM 
		[SCDATA].F40205 A 
	WHERE 
		(UPPER(LTRIM(RTRIM(LineType)))  = '*' OR A.LFLNTY = UPPER(LTRIM(RTRIM(LineType))))
		AND (LTRIM(RTRIM(Description1)) = '*' OR A.LFLNDS LIKE '%' || LTRIM(RTRIM(Description1)) || '%') 
		AND (LTRIM(RTRIM(Description2)) = '*' OR A.LFLND2  LIKE '%' || LTRIM(RTRIM(Description2)) || '%') 
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1; 
	
END
	

               
     ;
-- #desc						Gets list of Matrix segment values for an specific segment
-- #bl_class					Premier.Inventory.MatrixAttributeValueList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param Template				Template
-- #param Style					Style =  Segment 1
-- #param SegmentNumber			Segment Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetMatrixAttrValueList
(
	IN Template			GRAPHIC(20) CCSID 13488,
	IN Style			GRAPHIC(10) CCSID 13488,
	IN SegmentNumber	INT
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetMatrixAttrValueList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE VerticalSegment INT DEFAULT 0;
	DECLARE HorizontalSegment INT DEFAULT 0;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	WITH CTE AS (
		SELECT
			A.S0TMPL AS Template,
			CASE SegmentNumber
				WHEN 2 THEN A.S0SEG2
				WHEN 3 THEN A.S0SEG3
				WHEN 4 THEN A.S0SEG4
				WHEN 5 THEN A.S0SEG5
				WHEN 6 THEN A.S0SEG6
				WHEN 7 THEN A.S0SEG7
				WHEN 8 THEN A.S0SEG8
				WHEN 9 THEN A.S0SEG9
				WHEN 0 THEN A.S0SEG0
			END AS SegmentValue,
			CASE SegmentNumber
				WHEN 2 THEN A.S0SGD2
				WHEN 3 THEN A.S0SGD3
				WHEN 4 THEN A.S0SGD4
				WHEN 5 THEN A.S0SGD5
				WHEN 6 THEN A.S0SGD6
				WHEN 7 THEN A.S0SGD7
				WHEN 8 THEN A.S0SGD8
				WHEN 9 THEN A.S0SGD9
				WHEN 0 THEN A.S0SGD0
			END AS SegmentDescription,
			CASE 
				WHEN SegmentNumber = VerticalSegment THEN S0MRNO
				WHEN SegmentNumber = HorizontalSegment THEN S0MCNO
				ELSE 0
			END AS SegmentSequence
		FROM 
			[SCDATA].F41008 A
		WHERE
			A.S0TMPL = Template
	)
	/* Distinct without SegmentDescription to avoid same code with different description */
	SELECT 
		B.Template,
		Style			AS Style,
		SegmentNumber	AS SegmentNumber, 
		B.SegmentValue, 
		MAX(B.SegmentDescription) AS SegmentDescription,
		MIN(B.SegmentSequence) AS SegmentSequence
	FROM 
		CTE B
	WHERE 
		B.SegmentValue <> N''
	GROUP BY B.Template, B.SegmentValue
	FOR FETCH ONLY;

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	WITH CTE AS (
		SELECT
			A.S0TMPL AS Template,
			CASE SegmentNumber
				WHEN 2 THEN A.S0SEG2
				WHEN 3 THEN A.S0SEG3
				WHEN 4 THEN A.S0SEG4
				WHEN 5 THEN A.S0SEG5
				WHEN 6 THEN A.S0SEG6
				WHEN 7 THEN A.S0SEG7
				WHEN 8 THEN A.S0SEG8
				WHEN 9 THEN A.S0SEG9
				WHEN 0 THEN A.S0SEG0
			END AS SegmentValue,
			CASE SegmentNumber
				WHEN 2 THEN A.S0SGD2
				WHEN 3 THEN A.S0SGD3
				WHEN 4 THEN A.S0SGD4
				WHEN 5 THEN A.S0SGD5
				WHEN 6 THEN A.S0SGD6
				WHEN 7 THEN A.S0SGD7
				WHEN 8 THEN A.S0SGD8
				WHEN 9 THEN A.S0SGD9
				WHEN 0 THEN A.S0SGD0
			END AS SegmentDescription,
			CASE 
				WHEN SegmentNumber = VerticalSegment THEN S0MRNO
				WHEN SegmentNumber = HorizontalSegment THEN S0MCNO
				ELSE 0
			END AS SegmentSequence
		FROM 
			[SCDATA].F41008 A
		WHERE  
			A.S0TMPL = Template 
			AND A.S0SEG1 = Style
	)
	/* Distinct without Description to avoid same code with different description */
	SELECT 
		B.Template,
		Style			AS Style,
		SegmentNumber	AS SegmentNumber, 
		B.SegmentValue, 
		MAX(B.SegmentDescription) AS SegmentDescription,
		MIN(B.SegmentSequence) AS SegmentSequence
	FROM 
		CTE B
	WHERE 
		B.SegmentValue <> N''
	GROUP BY B.Template, B.SegmentValue
	FOR FETCH ONLY;

	/* Retrieve horizontal and vertical segment numbers */
	SELECT MTM.T7HSEG,			
		(CASE 
			WHEN MTM.T7HSEG =  MTM.T7NSEG THEN MTM.T7NSEG - 1 
			ELSE MTM.T7NSEG 
		END)   		
	INTO HorizontalSegment, VerticalSegment
	FROM [SCDATA].F410014 MTM
	WHERE MTM.T7TMPL= Template;


	IF (Style = '*') THEN
		OPEN TEMP_CURSOR1;
	ELSE
		OPEN TEMP_CURSOR2;
	END IF;

END;
-- #desc							
-- #bl_class						Premier.Inventory.MatrixItemList.cs
-- #db_dependencies					N/A
-- #db_references					N/A						

-- #param InstallationID			Installation Id
-- #param Template					Matrix Template

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetMatrixItemList 
( 
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN ItemNumber			NUMERIC(8,0),
	IN Template				GRAPHIC(20) CCSID 13488
) 
	
	DYNAMIC RESULT SETS 1
	LANGUAGE SQL
	SPECIFIC [SCLIBRARY].INV_GetMatrixItemList 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT                  
	 
	BEGIN 
		DECLARE Segment1		GRAPHIC(10) CCSID 13488;
		DECLARE TempLangPref	GRAPHIC(2) CCSID 13488;

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			INSTALLATIONID	AS InstallationID, 
			'' 				AS Branchplant, 
			'' 				AS BranchplantDesc, 
			A.IMITM			AS ItemNumber, 
			A.IMLITM		AS LongItemNumber, 
			A.IMAITM		AS AuxItemNumber,
			COALESCE(ContenDesc.DESC1, A.IMDSC1)	AS Description1,
		    COALESCE(ContenDesc.DESC2, A.IMDSC2)	AS Description2,
			'' 				AS URL,
			A.IMUOM1		AS PrimaryUnitOfMeasure, 
			A.IMUOM2		AS SecondaryUnitOfMeasure, 
			A.IMUOM4		AS PricingUnitOfMeasure, 
			A.IMSRTX		AS SearchItemText, 
			A.IMSTKT		AS StockingType, 
			A.IMLNTY		AS LineType, 
			''				AS InventoryFlag, 
			A.IMIFLA		AS ItemFlashMessage,
			A.IMTMPL		AS MatrixTemplate,
			A.IMMIC			AS MatrixControlled,
			0				AS MatrixParentItemNumber,
			0   AS  AddressNumber,
			''	AS	AllowPickup,
			IMCYCL AS CYCL,
			IMPRP0 AS PRP0,
			IMPRP1 AS PRP1,
			IMPRP2 AS PRP2,
			IMPRP3 AS PRP3,
			IMPRP4 AS PRP4,
			IMPRP5 AS PRP5,
			IMPRP6 AS PRP6,
			IMPRP7 AS PRP7,
			IMPRP8 AS PRP8,
			IMPRP9 AS PRP9,
			IMSHCM AS SHCM,
			IMSHCN AS SHCN,
			IMSRP0 AS SRP0,
			IMSRP1 AS SRP1,
			IMSRP2 AS SRP2,
			IMSRP3 AS SRP3,
			IMSRP4 AS SRP4,
			IMSRP5 AS SRP5,
			IMSRP6 AS SRP6,
			IMSRP7 AS SRP7,
			IMSRP8 AS SRP8,
			IMSRP9 AS SRP9
		FROM 
			[SCDATA].F4101 A		/*ITEM MASTER */
		LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.IMITM, TempLangPref , 0 ) ) AS ContenDesc
			ON ContenDesc.DESCITM = A.IMITM
		WHERE 
			A.IMTMPL= Template AND A.IMSEG1 = Segment1 AND A.IMMIC = '2'
		FOR FETCH ONLY;
		
		SET TempLangPref = N'';

		/*Get Segment 1*/
		SET Segment1 = (SELECT IMSEG1 FROM [SCDATA].F4101 WHERE IMITM = ItemNumber AND IMTMPL = Template AND IMMIC = '1'); -- IMMIC = 1 Parent Matrix Item

		OPEN TEMP_CURSOR1; 
	END

 ;
-- #bl_class					Premier.Inventory.MatrixTemplateItemList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param Template				Template
-- #param Style					Style = Segment 1
-- #param ChildItemNumber		Optional Short Item Number
-- #param BranchPlant			Optional Branch Plant (MCU)
-- #param SearchValue			Optional Search Value
-- #param SearchCriteria		Optional Search Criteria
-- #param PageIndex			    Optional Page Index
-- #param PageSize			    Optional Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetMatrixTemplateItemList
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN Template			GRAPHIC(20) CCSID 13488,
	IN Style			GRAPHIC(10) CCSID 13488,
	IN ChildItemNumber	NUMERIC(8,0),
	IN BranchPlant		GRAPHIC(12) CCSID 13488,
	IN SearchValue		VARGRAPHIC(200) CCSID 13488,
	IN SearchCriteria	GRAPHIC(5) CCSID 13488,
	IN PageIndex		INT,
	IN PageSize			INT
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetMatrixTemplateItemList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE SQL_DYNAMIC	VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC VARGRAPHIC(10000) CCSID 13488;	

	SET WHERE_DYNAMIC = N'';

BEGIN

	/* Paging */
	DECLARE RowStart INT DEFAULT 0; 
	DECLARE RowEnd INT DEFAULT 0; 
	
	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);	
	
BEGIN

	/* CURSOR FOR DYNAMIC SQL */
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC;

	/*CHILD ITEM NUMBER CONDITION*/
	IF(ChildItemNumber IS NOT NULL) THEN		
		SET WHERE_DYNAMIC = N' AND M.S0ITM = ? ';
	ELSE
		SET WHERE_DYNAMIC = N' AND (1 = 1 OR ? IS NULL) ';
	END IF;	
	
	/*BRANCH PLANT CONDITION*/
	IF(BranchPlant <> '*') THEN		
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND C.BIMCU = ? ';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
	END IF;	

	/*DYNAMIC QUERY CONDITIONS*/
	IF(SearchValue <> '*') THEN
		IF (SearchCriteria = '0') THEN /*Product Number*/
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND D.IMLITM LIKE ''%'' || ? || ''%'' ';
			
		ELSEIF (SearchCriteria = '1') THEN /*Description*/
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(TRIM(D.IMDSC1)) || '' '' || UPPER(TRIM(D.IMDSC2)) LIKE ''%'' || ? || ''%'' ';
		
		ELSE /*Product Number and Description*/
			SET WHERE_DYNAMIC =  WHERE_DYNAMIC || N' AND TRIM(D.IMLITM) || '' '' || UPPER(TRIM(D.IMDSC1)) || '' '' || UPPER(D.IMDSC2) LIKE ''%'' || ? || ''%'' ';
		END IF;
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
	END IF;
	
	SET SQL_DYNAMIC = N'
	WITH CTE AS (
		SELECT
			M.S0ITM		AS ItemNumber,
			D.IMLITM    AS LongItemNumber,
			D.IMAITM    AS AuxItemNumber,
			D.IMDSC1    AS Description1,
			D.IMDSC2    AS Description2,
			M.S0MRNO	AS RowNumber,
			M.S0MCNO	AS ColumnNumber,
			M.S0SEG1	AS Segment1,
			M.S0SGD1	AS Segment1Desc,
			M.S0SEG2	AS Segment2,
			M.S0SGD2	AS Segment2Desc,
			M.S0SEG3	AS Segment3,
			M.S0SGD3	AS Segment3Desc,
			M.S0SEG4	AS Segment4,
			M.S0SGD4	AS Segment4Desc,
			M.S0SEG5	AS Segment5,
			M.S0SGD5	AS Segment5Desc,
			M.S0SEG6	AS Segment6,
			M.S0SGD6	AS Segment6Desc,
			M.S0SEG7	AS Segment7,
			M.S0SGD7	AS Segment7Desc,
			M.S0SEG8	AS Segment8,
			M.S0SGD8	AS Segment8Desc,
			M.S0SEG9	AS Segment9,
			M.S0SGD9	AS Segment9Desc,
			M.S0SEG0	AS Segment10,
			M.S0SGD0	AS Segment10Desc,
			ROW_NUMBER() OVER(PARTITION BY M.S0ITM ORDER BY M.S0ITM) AS RNUM /* Top 1 */			
		FROM
			[SCDATA].F41008 M
		INNER JOIN [SCDATA].F4102 B
			ON B.IBITM = M.S0ITM
		INNER JOIN [SCDATA].F4101 D
			ON D.IMITM = M.S0ITM
		INNER JOIN [SCDATA].FQ679910 C
			ON C.BI$9INID = ?
			AND C.BIMCU = B.IBMCU
		WHERE
			M.S0SEG1 = ?
			AND M.S0TMPL = ?	
			AND D.IMSTKT <> N''N'' 
			AND (D.IMTMPL = '' '' OR (D.IMTMPL <> '' '' AND D.IMMIC IN (''1'', ''2'', '' '')))
			'|| WHERE_DYNAMIC ||N' 
	UNION
		SELECT
			M.S0ITM		AS ItemNumber,
			D.IMLITM    AS LongItemNumber,
			D.IMAITM    AS AuxItemNumber,
			D.IMDSC1    AS Description1,
			D.IMDSC2    AS Description2,
			M.S0MRNO	AS RowNumber,
			M.S0MCNO	AS ColumnNumber,
			M.S0SEG1	AS Segment1,
			M.S0SGD1	AS Segment1Desc,
			M.S0SEG2	AS Segment2,
			M.S0SGD2	AS Segment2Desc,
			M.S0SEG3	AS Segment3,
			M.S0SGD3	AS Segment3Desc,
			M.S0SEG4	AS Segment4,
			M.S0SGD4	AS Segment4Desc,
			M.S0SEG5	AS Segment5,
			M.S0SGD5	AS Segment5Desc,
			M.S0SEG6	AS Segment6,
			M.S0SGD6	AS Segment6Desc,
			M.S0SEG7	AS Segment7,
			M.S0SGD7	AS Segment7Desc,
			M.S0SEG8	AS Segment8,
			M.S0SGD8	AS Segment8Desc,
			M.S0SEG9	AS Segment9,
			M.S0SGD9	AS Segment9Desc,
			M.S0SEG0	AS Segment10,
			M.S0SGD0	AS Segment10Desc,
			ROW_NUMBER() OVER(PARTITION BY M.S0ITM ORDER BY M.S0ITM) AS RNUM /* Top 1 */			
		FROM
			[SCDATA].F41008 M
		INNER JOIN [SCDATA].F4101 D
			ON D.IMITM = M.S0ITM
		WHERE
			M.S0SEG1 = ?
			AND M.S0TMPL = ?		
			AND D.IMSTKT = N''N'' 
			AND (D.IMTMPL = '' '' OR (D.IMTMPL <> '' '' AND D.IMMIC IN (''1'', ''2'', '' '')))
			'|| WHERE_DYNAMIC ||N'
	), PAGING AS (
		SELECT 
		ItemNumber,
		LongItemNumber,
		AuxItemNumber,
		Description1,
		Description2,
		RowNumber,
		ColumnNumber,
		Segment1,
		Segment1Desc,
		Segment2,
		Segment2Desc,
		Segment3,
		Segment3Desc,
		Segment4,
		Segment4Desc,
		Segment5,
		Segment5Desc,
		Segment6,
		Segment6Desc,
		Segment7,
		Segment7Desc,
		Segment8,
		Segment8Desc,
		Segment9,
		Segment9Desc,
		Segment10,
		Segment10Desc,
		ROW_NUMBER() OVER(ORDER BY ItemNumber) AS PAGINATION
	FROM 
		CTE
	WHERE RNUM = 1
	)
	SELECT 
		A.ItemNumber,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.Description1,
		A.Description2,
		A.RowNumber,
		A.ColumnNumber,
		A.Segment1,
		A.Segment1Desc,
		A.Segment2,
		A.Segment2Desc,
		A.Segment3,
		A.Segment3Desc,
		A.Segment4,
		A.Segment4Desc,
		A.Segment5,
		A.Segment5Desc,
		A.Segment6,
		A.Segment6Desc,
		A.Segment7,
		A.Segment7Desc,
		A.Segment8,
		A.Segment8Desc,
		A.Segment9,
		A.Segment9Desc,
		A.Segment10,
		A.Segment10Desc,
		(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
	FROM 
		PAGING A
	WHERE ((? = 0 OR ? = 0) OR (PAGINATION BETWEEN ? AND ?))';
	

	 PREPARE V_DYNAMIC FROM SQL_DYNAMIC;

	 OPEN TEMP_CURSOR1 using StoreId, Style, Template, ChildItemNumber, BranchPlant, SearchValue,
				Style, Template, ChildItemNumber, BranchPlant, SearchValue,
				PageIndex, PageSize, RowStart, RowEnd;	 
END;

END;
END;
-- #bl_class						Premier.Inventory.ProductCrossRefCodeList.cs
-- #desc							Returns Product list with the associated cross-reference
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param CrossReferenceTypesXML	Cross Reference Types (XRT) XML: <products><product>60011</product><product>60020</product></products>
-- #param ProductNumbersXML			Product Numbers (ITM) XML: <codes><code>C</code><code>R</code></codes>

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetProdCrossRefCodeLst
(
	IN ProductNumbersXML		XML,
	IN CrossReferenceTypesXML	XML
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetProdCrossRefCodeLst
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		A.IVITM		AS ShortProductNumber,
		A.IVCITM	AS CrossReference,
		A.IVXRT		AS CrossReferenceType
	FROM 
		[SCDATA].F4104 A
	INNER JOIN XMLTABLE ('$d/products/product'  
					PASSING ProductNumbersXML AS "d"
					COLUMNS shortItemNumber NUMERIC(8, 0) PATH 'text()') products 
		ON A.IVITM = products.shortItemNumber 
	INNER JOIN XMLTABLE ('$d/codes/code'
					PASSING CrossReferenceTypesXML AS "d" 
					COLUMNS code GRAPHIC(2) CCSID 13488 PATH 'text()') codes 
		ON A.IVXRT = codes.code 
	ORDER BY A.IVITM ASC

	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;
	
END;
-- #bl_class						Premier.Inventory.GetProdPublishBasicDetailCommand.cs
-- #desc							Returns the basic detail of all the products
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param StoreId					Store Id
-- #param WhereCondition			Where Condition
-- #param RetrieveNonStockProducts	Retrieve Non Stock Products
-- #param SortBy					Sort By Colum name
-- #param SortDir					Sort Dir ASC / DESC
-- #param PageIndex					Page Index
-- #param PageSize					Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetProdPublishBasicDetail
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN WhereCondition			VARGRAPHIC(4000) CCSID 13488,
	IN RetrieveNonStockProducts	INT,
	IN SortBy					VARCHAR(60),
	IN SortDir					VARCHAR(1),
	IN PageIndex				INT,
    IN PageSize					INT
)
DYNAMIC RESULT SETS 5
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetProdPublishBasicDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
		DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
		DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;

		DECLARE ROWSTART INT;
		DECLARE ROWEND	INT;
		DECLARE SORT_DYNAMIC				VARGRAPHIC(60) CCSID 13488;
		DECLARE SORTDIR_DYNAMIC				VARGRAPHIC(20) CCSID 13488;

		/*Region Items Data*/

		DECLARE GLOBAL TEMPORARY TABLE SESSION.PRODUCTMASTERBASICDETAILTABLE (
		ShortProductNumber			NUMERIC(8,0),
		LongProductNumber			VARGRAPHIC(25)	CCSID 13488,
		AuxiliaryProductNumber		VARGRAPHIC(25)	CCSID 13488,
		Description1			VARGRAPHIC(30)	CCSID 13488,
		Description2			VARGRAPHIC(30)	CCSID 13488,
		StockingType			GRAPHIC(1)	CCSID 13488,
		InventoryFlag			GRAPHIC(1)	CCSID 13488,
		LineType				GRAPHIC(2)	CCSID 13488,
		PrimaryUom				GRAPHIC(2)	CCSID 13488,
		PricingUom				GRAPHIC(2)	CCSID 13488,
		ShippingUom				GRAPHIC(2)	CCSID 13488,
		AbcCodeSales			GRAPHIC(1)	CCSID 13488,
		AbcCodeMargin			GRAPHIC(1)	CCSID 13488,
		AbcCodeInvestment		GRAPHIC(1)	CCSID 13488,
		UpcNumber				GRAPHIC(13)	CCSID 13488,
		SCType					GRAPHIC(1)	CCSID 13488,
		MatrixTemplate			GRAPHIC(20)	CCSID 13488,
		MatrixControlled		GRAPHIC(1)	CCSID 13488,
		Segment1				GRAPHIC(10)	CCSID 13488,
		CycleCountCategory		GRAPHIC(3)	CCSID 13488, 
		CategoryCode10			GRAPHIC(6)	CCSID 13488, 
		CategoryCode1			GRAPHIC(3)	CCSID 13488, 
		CategoryCode2			GRAPHIC(3)	CCSID 13488, 
		CategoryCode3			GRAPHIC(3)	CCSID 13488, 
		CategoryCode4			GRAPHIC(3)	CCSID 13488, 
		CategoryCode5			GRAPHIC(3)	CCSID 13488, 
		CategoryCode6			GRAPHIC(6)	CCSID 13488, 
		CategoryCode7			GRAPHIC(6)	CCSID 13488, 
		CategoryCode8			GRAPHIC(6)	CCSID 13488, 
		CategoryCode9			GRAPHIC(6)	CCSID 13488, 
		ShippingCommodityClass	GRAPHIC(3)	CCSID 13488, 
		ShippingConditionsCode	GRAPHIC(3)	CCSID 13488, 
		SalesCode10				GRAPHIC(6)	CCSID 13488, 
		SalesCode1				GRAPHIC(3)	CCSID 13488, 
		SalesCode2				GRAPHIC(3)	CCSID 13488, 
		SalesCode3				GRAPHIC(3)	CCSID 13488, 
		SalesCode4				GRAPHIC(3)	CCSID 13488, 
		SalesCode5				GRAPHIC(3)	CCSID 13488, 
		SalesCode6				GRAPHIC(6)	CCSID 13488, 
		SalesCode7				GRAPHIC(6)	CCSID 13488, 
		SalesCode8				GRAPHIC(6)	CCSID 13488, 
		SalesCode9				GRAPHIC(6)	CCSID 13488,
		SearchText				VARGRAPHIC(30)	CCSID 13488,
		StandardUnitOfMeasure	GRAPHIC(2)	CCSID 13488,
		TotalRowCount			INT
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
		CREATE UNIQUE INDEX SESSION.PRODUCTMASTERBASICDETAILTABLE_ShortProductNumber ON SESSION.PRODUCTMASTERBASICDETAILTABLE (ShortProductNumber ASC) CLUSTER;

		

		BEGIN

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
		A.ShortProductNumber, 
		A.LongProductNumber, 
		A.AuxiliaryProductNumber,
		B.IMITM AS parentProductNumber,
		A.Description1, 
		A.Description2, 
		A.StockingType, 
		A.InventoryFlag, 
		A.LineType, 
		A.PrimaryUom, 
		A.PricingUom, 
		A.ShippingUom, 
		A.AbcCodeSales, 
		A.AbcCodeMargin, 
		A.AbcCodeInvestment, 
		A.UpcNumber, 
		A.SCType,
		A.MatrixTemplate, 
		A.MatrixControlled, 
		A.Segment1, 
		A.CycleCountCategory, 
		A.CategoryCode10, 
		A.CategoryCode1, 
		A.CategoryCode2, 
		A.CategoryCode3, 
		A.CategoryCode4, 
		A.CategoryCode5, 
		A.CategoryCode6, 
		A.CategoryCode7, 
		A.CategoryCode8, 
		A.CategoryCode9, 
		A.ShippingCommodityClass, 
		A.ShippingConditionsCode, 
		A.SalesCode10, 
		A.SalesCode1, 
		A.SalesCode2, 
		A.SalesCode3, 
		A.SalesCode4, 
		A.SalesCode5, 
		A.SalesCode6, 
		A.SalesCode7, 
		A.SalesCode8, 
		A.SalesCode9,
		A.SearchText,
		A.StandardUnitOfMeasure,
		A.TotalRowCount 
		FROM SESSION.PRODUCTMASTERBASICDETAILTABLE A --#PRODUCTMASTERBASICDETAILTABLE
		LEFT OUTER JOIN [SCDATA].F4101 B	/* Resolve parent Product Number */	
		ON B.IMTMPL = A.matrixTemplate 	
		AND B.IMSEG1 = A.segment1 	
		AND B.IMMIC = '1'	
		AND A.matrixControlled = '2'
	FOR FETCH ONLY;

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		D.ShortProductNumber	AS ShortProductNumber,
		A.MCMCU				AS BranchPlant
	FROM
		SESSION.PRODUCTMASTERBASICDETAILTABLE D 
	INNER JOIN [SCDATA].F4102 C ON
		C.IBITM = D.ShortProductNumber
	INNER JOIN [SCDATA].F0006 A ON
		A.MCMCU = C.IBMCU
	FOR FETCH ONLY;

	/* Dynamic sort direction statement */ 
	SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 

	SET SORT_DYNAMIC = CASE SortBy 
							WHEN 'ShortProductNumber' 		THEN 'A.IMITM'
							WHEN 'LongProductNumber' 		THEN 'A.IMLITM'
							WHEN 'AuxiliaryProductNumber' 	THEN 'A.IMAITM'
							WHEN 'Description1'  		THEN 'A.IMDSC1'
							WHEN 'Description2' 		THEN 'A.IMDSC2'
							WHEN 'StockingType'  		THEN 'A.IMSTKT'
							WHEN 'InventoryFlag' 		THEN 'A.LFIVI'
							WHEN 'LineType'				THEN 'A.IMLNTY'
							WHEN 'PrimaryUom' 			THEN 'A.IMUOM1'
							WHEN 'PricingUom'			THEN 'A.IMUOM4'
							WHEN 'ShippingUom' 			THEN 'A.IMUOM6'	
							WHEN 'AbcCodeSales' 		THEN 'A.IMABCS'
							WHEN 'AbcCodeMargin' 		THEN 'A.IMABCM'
							WHEN 'AbcCodeInvestment' 	THEN 'A.IMABCI'
							WHEN 'UpcNumber' 			THEN 'A.IMUPCN'
							WHEN 'TemplateName' 		THEN 'A.IMTMPL'
							WHEN 'MatrixControlled' 	THEN 'A.IMMIC'
							WHEN 'Style'	 			THEN 'A.IMSEG1'
							WHEN 'CycleCountCategory' 	THEN 'A.IMCYCL'
							WHEN 'CategoryCode10' 		THEN 'A.IMPRP0' 
							WHEN 'CategoryCode1' 		THEN 'A.IMPRP1'
							WHEN 'CategoryCode2' 		THEN 'A.IMPRP2'
							WHEN 'CategoryCode3' 		THEN 'A.IMPRP3'
							WHEN 'CategoryCode4' 		THEN 'A.IMPRP4'
							WHEN 'CategoryCode5' 		THEN 'A.IMPRP5'
							WHEN 'CategoryCode6' 		THEN 'A.IMPRP6'
							WHEN 'CategoryCode7' 		THEN 'A.IMPRP7'
							WHEN 'CategoryCode8' 		THEN 'A.IMPRP8'
							WHEN 'CategoryCode9' 		THEN 'A.IMPRP9'
							WHEN 'ShippingCommodityClass' THEN 'A.IMSHCM'
							WHEN 'ShippingConditionsCode' THEN 'A.IMSHCN'
							WHEN 'SalesCode10' 			THEN 'A.IMSRP0'
							WHEN 'SalesCode1' 			THEN 'A.IMSRP1'
							WHEN 'SalesCode2' 			THEN 'A.IMSRP2'
							WHEN 'SalesCode3' 			THEN 'A.IMSRP3'
							WHEN 'SalesCode4' 			THEN 'A.IMSRP4'
							WHEN 'SalesCode5' 			THEN 'A.IMSRP5'
							WHEN 'SalesCode6' 			THEN 'A.IMSRP6'
							WHEN 'SalesCode7' 			THEN 'A.IMSRP7'
							WHEN 'SalesCode8' 			THEN 'A.IMSRP8'
							WHEN 'SalesCode9' 			THEN 'A.IMSRP9'
							WHEN 'SearchText' 			THEN 'A.IMSRTX'
							WHEN 'StandardUnitOfMeasure'	THEN 'A.IMTFLA'
							ELSE 'A.IMITM'
						END ; 
	SET SORT_DYNAMIC = SORT_DYNAMIC || SORTDIR_DYNAMIC;
	
	SET WHERE_DYNAMIC = '';

	IF(WhereCondition IS NOT NULL AND WhereCondition <> '*') THEN
		SET WHERE_DYNAMIC = ' AND ' || WhereCondition; 
	END IF;

	/* Get item master data */
	SET SQL_DYNAMIC = '
		WITH CTE AS (
			SELECT 
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M'' 
					ELSE ''S''	/* Stock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
				INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = ?
				INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE (A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'') AND 
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' '')))) ' || WHERE_DYNAMIC;
		
	/* UNION to retrieve NonStock products */
	IF (RetrieveNonStockProducts = 1) THEN
		SET SQL_DYNAMIC = SQL_DYNAMIC || '
			UNION
			SELECT 
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M''
					ELSE ''N''	/* NonStock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
				INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = ?
				INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE (A.IMSTKT = N''N'' OR (C.LFIVI <> N''Y'' AND C.LFIVI <> N''D'') AND 
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' '')))) ' || WHERE_DYNAMIC  || ' ) ';
	ELSE
		SET SQL_DYNAMIC = SQL_DYNAMIC || '
				GROUP BY	A.IMITM	 ,
							A.IMLITM ,
							A.IMAITM ,
							A.IMDSC1 ,
							A.IMDSC2 ,
							A.IMSTKT ,
							C.LFIVI	 ,
							A.IMLNTY ,
							A.IMUOM1 ,
							A.IMUOM4 ,
							A.IMUOM6 ,
							A.IMABCS ,
							A.IMABCM ,
							A.IMABCI ,
							A.IMUPCN ,
							A.IMTMPL ,
							A.IMMIC	,
							A.IMSEG1 ,
							A.IMCYCL , 
							A.IMPRP0 , 
							A.IMPRP1 , 
							A.IMPRP2 , 
							A.IMPRP3 , 
							A.IMPRP4 , 
							A.IMPRP5 , 
							A.IMPRP6 , 
							A.IMPRP7 , 
							A.IMPRP8 , 
							A.IMPRP9 , 
							A.IMSHCM , 
							A.IMSHCN , 
							A.IMSRP0 , 
							A.IMSRP1 , 
							A.IMSRP2 , 
							A.IMSRP3 , 
							A.IMSRP4 , 
							A.IMSRP5 , 
							A.IMSRP6 , 
							A.IMSRP7 , 
							A.IMSRP8 , 
							A.IMSRP9,
							A.IMSRTX,
							A.IMTFLA
			) ';
		END IF;

		/* Concat Row Count for paging scenario only */
		SET SQL_DYNAMIC = SQL_DYNAMIC || ', PAGING AS (SELECT 
				A.IMITM		AS ShortProductNumber,
				A.IMLITM	AS LongProductNumber,
				A.IMAITM	AS AuxiliaryProductNumber,
				A.IMDSC1	AS Description1,
				A.IMDSC2	AS Description2,
				A.IMSTKT	AS StockingType,
				A.LFIVI		AS InventoryFlag,
				A.IMLNTY	AS LineType,
				A.IMUOM1	AS PrimaryUom,
				A.IMUOM4	AS PricingUom,
				A.IMUOM6	AS ShippingUom,
				A.IMABCS	AS AbcCodeSales,
				A.IMABCM	AS AbcCodeMargin,
				A.IMABCI	AS AbcCodeInvestment,
				A.IMUPCN	AS UpcNumber,
				A.ScType,
				A.IMTMPL	AS MatrixTemplate,
				A.IMMIC		AS MatrixControlled,
				A.IMSEG1	AS Segment1,
				A.IMCYCL	AS CycleCountCategory, 
				A.IMPRP0	AS CategoryCode10, 
				A.IMPRP1	AS CategoryCode1, 
				A.IMPRP2	AS CategoryCode2, 
				A.IMPRP3	AS CategoryCode3, 
				A.IMPRP4	AS CategoryCode4, 
				A.IMPRP5	AS CategoryCode5, 
				A.IMPRP6	AS CategoryCode6, 
				A.IMPRP7	AS CategoryCode7, 
				A.IMPRP8	AS CategoryCode8, 
				A.IMPRP9	AS CategoryCode9, 
				A.IMSHCM	AS ShippingCommodityClass, 
				A.IMSHCN	AS ShippingConditionsCode, 
				A.IMSRP0	AS SalesCode10, 
				A.IMSRP1	AS SalesCode1, 
				A.IMSRP2	AS SalesCode2, 
				A.IMSRP3	AS SalesCode3, 
				A.IMSRP4	AS SalesCode4, 
				A.IMSRP5	AS SalesCode5, 
				A.IMSRP6	AS SalesCode6, 
				A.IMSRP7	AS SalesCode7, 
				A.IMSRP8	AS SalesCode8, 
				A.IMSRP9	AS SalesCode9, 
				A.IMSRTX	AS SearchText, 
				A.IMTFLA	AS StandardUnitOfMeasure,
				ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||') AS RowCount 
			FROM CTE A 
			)
			SELECT 
				A.ShortProductNumber,
				A.LongProductNumber,
				A.AuxiliaryProductNumber,
				A.Description1,
				A.Description2,
				A.StockingType,
				A.InventoryFlag,
				A.LineType,
				A.PrimaryUom,
				A.PricingUom,
				A.ShippingUom,
				A.AbcCodeSales,
				A.AbcCodeMargin,
				A.AbcCodeInvestment,
				A.UpcNumber,
				A.ScType,
				A.MatrixTemplate,
				A.MatrixControlled,
				A.Segment1,
				A.CycleCountCategory, 
				A.CategoryCode10, 
				A.CategoryCode1, 
				A.CategoryCode2, 
				A.CategoryCode3, 
				A.CategoryCode4, 
				A.CategoryCode5, 
				A.CategoryCode6, 
				A.CategoryCode7, 
				A.CategoryCode8, 
				A.CategoryCode9, 
				A.ShippingCommodityClass, 
				A.ShippingConditionsCode, 
				A.SalesCode10, 
				A.SalesCode1, 
				A.SalesCode2, 
				A.SalesCode3, 
				A.SalesCode4, 
				A.SalesCode5, 
				A.SalesCode6, 
				A.SalesCode7, 
				A.SalesCode8, 
				A.SalesCode9,
				A.SearchText,
				A.StandardUnitOfMeasure,
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
			FROM PAGING A
			WHERE (A.RowCount BETWEEN ? AND ?)
			';
		
		/*Paging */ 
		SET ROWSTART = ( ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 ) ; 
		SET ROWEND = ( PAGEINDEX * PAGESIZE ) ; 
			
		/*Concat INSERT with DYNAMIC SELECT*/
		SET SQL_DYNAMIC = 'INSERT INTO SESSION.PRODUCTMASTERBASICDETAILTABLE (ShortProductNumber, LongProductNumber, AuxiliaryProductNumber, Description1, Description2, StockingType, InventoryFlag, LineType, PrimaryUom, PricingUom, ShippingUom, AbcCodeSales, AbcCodeMargin, AbcCodeInvestment, UpcNumber, SCType, MatrixTemplate, MatrixControlled, Segment1, CycleCountCategory, CategoryCode10, CategoryCode1, CategoryCode2, CategoryCode3, CategoryCode4, CategoryCode5, CategoryCode6, CategoryCode7, CategoryCode8, CategoryCode9, ShippingCommodityClass, ShippingConditionsCode, SalesCode10, SalesCode1, SalesCode2, SalesCode3, SalesCode4, SalesCode5, SalesCode6, SalesCode7, SalesCode8, SalesCode9, SearchText, StandardUnitOfMeasure, TotalRowCount)' || SQL_DYNAMIC;
		PREPARE S1 FROM SQL_DYNAMIC;

		EXECUTE S1  USING StoreId, StoreId, RowStart, RowEnd;
		
		/* Get the item information detail from the temporary table */
		OPEN TEMP_CURSOR1;

		/* End Region Items Data */

		/* Get BranchPlants by item*/
		OPEN TEMP_CURSOR2;	
	END;

END;
-- #bl_class						Premier.Inventory.GetItemPublishDetailCommand.cs
-- #desc							Returns the detail of all the items
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param StoreId					Store Id
-- #param LongProductNumbersXML		Long Product Numbers XML
-- #param WhereCondition			Where Condition
-- #param RetrieveNonStockProducts	Retrieve Non Stock Products
-- #param IsPreviewMode				Is Preview mode: only return two result sets: Products and ProductsMCUs.
-- #param SortBy					Sort By Colum name
-- #param SortDir					Sort Dir ASC / DESC
-- #param PageIndex					Page Index
-- #param PageSize					Page Size

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetProdPublishDetail
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN LongProductNumbersXML	XML,
	IN WhereCondition			VARGRAPHIC(4000) CCSID 13488,
	IN RetrieveNonStockProducts	INT,
	IN IsPreviewMode			INT,
	IN SortBy					VARCHAR(60),
	IN SortDir					VARCHAR(1),
	IN PageIndex				INT,
    IN PageSize					INT
)
DYNAMIC RESULT SETS 5
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetProdPublishDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
		DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
		DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;

		DECLARE ROWSTART INT;
		DECLARE ROWEND	INT;
		DECLARE SORT_DYNAMIC				VARGRAPHIC(60) CCSID 13488;
		DECLARE SORTDIR_DYNAMIC				VARGRAPHIC(20) CCSID 13488;

		/*Region Products Data*/

		DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLPRODUCTSTABLE (
			LongProductNumber			VARGRAPHIC(25)	CCSID 13488
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

		DECLARE GLOBAL TEMPORARY TABLE SESSION.PRODMASTERDETAILTABLE (
		ShortProductNumber			NUMERIC(8,0),
		LongProductNumber			VARGRAPHIC(25)	CCSID 13488,
		AuxiliaryProductNumber		VARGRAPHIC(25)	CCSID 13488,
		Description1			VARGRAPHIC(30)	CCSID 13488,
		Description2			VARGRAPHIC(30)	CCSID 13488,
		StockingType			GRAPHIC(1)	CCSID 13488,
		InventoryFlag			GRAPHIC(1)	CCSID 13488,
		LineType				GRAPHIC(2)	CCSID 13488,
		PrimaryUom				GRAPHIC(2)	CCSID 13488,
		PricingUom				GRAPHIC(2)	CCSID 13488,
		ShippingUom				GRAPHIC(2)	CCSID 13488,
		AbcCodeSales			GRAPHIC(1)	CCSID 13488,
		AbcCodeMargin			GRAPHIC(1)	CCSID 13488,
		AbcCodeInvestment		GRAPHIC(1)	CCSID 13488,
		UpcNumber				GRAPHIC(13)	CCSID 13488,
		SCType					GRAPHIC(1)	CCSID 13488,
		MatrixTemplate			GRAPHIC(20)	CCSID 13488,
		MatrixControlled		GRAPHIC(1)	CCSID 13488,
		Segment1				GRAPHIC(10)	CCSID 13488,
		CycleCountCategory		GRAPHIC(3)	CCSID 13488, 
		CategoryCode10			GRAPHIC(6)	CCSID 13488, 
		CategoryCode1			GRAPHIC(3)	CCSID 13488, 
		CategoryCode2			GRAPHIC(3)	CCSID 13488, 
		CategoryCode3			GRAPHIC(3)	CCSID 13488, 
		CategoryCode4			GRAPHIC(3)	CCSID 13488, 
		CategoryCode5			GRAPHIC(3)	CCSID 13488, 
		CategoryCode6			GRAPHIC(6)	CCSID 13488, 
		CategoryCode7			GRAPHIC(6)	CCSID 13488, 
		CategoryCode8			GRAPHIC(6)	CCSID 13488, 
		CategoryCode9			GRAPHIC(6)	CCSID 13488, 
		ShippingCommodityClass	GRAPHIC(3)	CCSID 13488, 
		ShippingConditionsCode	GRAPHIC(3)	CCSID 13488, 
		SalesCode10				GRAPHIC(6)	CCSID 13488, 
		SalesCode1				GRAPHIC(3)	CCSID 13488, 
		SalesCode2				GRAPHIC(3)	CCSID 13488, 
		SalesCode3				GRAPHIC(3)	CCSID 13488, 
		SalesCode4				GRAPHIC(3)	CCSID 13488, 
		SalesCode5				GRAPHIC(3)	CCSID 13488, 
		SalesCode6				GRAPHIC(6)	CCSID 13488, 
		SalesCode7				GRAPHIC(6)	CCSID 13488, 
		SalesCode8				GRAPHIC(6)	CCSID 13488, 
		SalesCode9				GRAPHIC(6)	CCSID 13488,
		SearchText				VARGRAPHIC(30)	CCSID 13488,
		StandardUnitOfMeasure	GRAPHIC(2)	CCSID 13488,
		TotalRowCount			INT
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
		CREATE UNIQUE INDEX SESSION.PRODMASTERDETAILTABLE_ShortProductNumber ON SESSION.PRODMASTERDETAILTABLE (ShortProductNumber ASC) CLUSTER;

		DECLARE GLOBAL TEMPORARY TABLE SESSION.PRODUNITOFMEASURETABLE (
		shortProductNumber			NUMERIC(8,0),
		unitOfMeasure			GRAPHIC(3) 	CCSID 13488
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

		BEGIN

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
		A.ShortProductNumber, 
		A.LongProductNumber, 
		A.AuxiliaryProductNumber,
		B.IMITM AS parentProductNumber,
		A.Description1, 
		A.Description2, 
		A.StockingType, 
		A.InventoryFlag, 
		A.LineType, 
		A.PrimaryUom, 
		A.PricingUom, 
		A.ShippingUom, 
		A.AbcCodeSales, 
		A.AbcCodeMargin, 
		A.AbcCodeInvestment, 
		A.UpcNumber, 
		A.SCType,
		A.MatrixTemplate, 
		A.MatrixControlled, 
		A.Segment1, 
		A.CycleCountCategory, 
		A.CategoryCode10, 
		A.CategoryCode1, 
		A.CategoryCode2, 
		A.CategoryCode3, 
		A.CategoryCode4, 
		A.CategoryCode5, 
		A.CategoryCode6, 
		A.CategoryCode7, 
		A.CategoryCode8, 
		A.CategoryCode9, 
		A.ShippingCommodityClass, 
		A.ShippingConditionsCode, 
		A.SalesCode10, 
		A.SalesCode1, 
		A.SalesCode2, 
		A.SalesCode3, 
		A.SalesCode4, 
		A.SalesCode5, 
		A.SalesCode6, 
		A.SalesCode7, 
		A.SalesCode8, 
		A.SalesCode9,
		A.TotalRowCount 
		FROM SESSION.PRODMASTERDETAILTABLE A --#PRODMASTERDETAILTABLE
		LEFT OUTER JOIN [SCDATA].F4101 B	/* Resolve parent Product Number */	
		ON B.IMTMPL = A.MatrixTemplate 	
		AND B.IMSEG1 = A.Segment1 	
		AND B.IMMIC = '1'	
		AND A.MatrixControlled = '2'
	FOR FETCH ONLY;

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		D.ShortProductNumber	AS ShortProductNumber,
		A.MCMCU					AS BranchPlant
	FROM
		SESSION.PRODMASTERDETAILTABLE D 
	INNER JOIN [SCDATA].F4102 C ON
		C.IBITM = D.ShortProductNumber
	INNER JOIN [SCDATA].F0006 A ON
		A.MCMCU = C.IBMCU
	FOR FETCH ONLY;

	DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.shortProductNumber, 
		A.unitOfMeasure
	FROM
		SESSION.PRODUNITOFMEASURETABLE A
	FOR FETCH ONLY;

	/* Global UOMs */
	DECLARE TEMP_CURSOR4 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		A.UCUM	AS UnitOfMeasure,
		A.UCRUM AS UnitOfMeasureTo, 
		A.UCCONV AS ConversionFactor
	FROM
		[SCDATA].F41003 A
	FOR FETCH ONLY;

	/* Unit of measure conversion Factory */
	DECLARE TEMP_CURSOR5 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			A.ShortProductNumber AS ShortProductNumber, 
			B.UMMCU AS BranchPlant,
			B.UMUM	AS UnitOfMeasure,
			B.UMRUM AS UnitOfMeasureTo, 
			B.UMCONV AS ConversionFactor
		FROM
			SESSION.PRODMASTERDETAILTABLE A
		INNER JOIN [SCDATA].F41002 B
			ON B.UMITM = A.ShortProductNumber
			AND (A.PrimaryUom IN (B.UMUM, B.UMRUM))
		WHERE A.StandardUnitOfMeasure = N''
	FOR FETCH ONLY;

		/* Dynamic sort direction statement */ 
	SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 

	SET SORT_DYNAMIC = CASE SortBy 
							WHEN 'ShortProductNumber' 		THEN 'A.IMITM'
							WHEN 'LongProductNumber' 		THEN 'A.IMLITM'
							WHEN 'AuxiliaryProductNumber' 	THEN 'A.IMAITM'
							WHEN 'Description1'  			THEN 'A.IMDSC1'
							WHEN 'Description2' 			THEN 'A.IMDSC2'
							WHEN 'StockingType'  			THEN 'A.IMSTKT'
							WHEN 'InventoryFlag' 			THEN 'A.LFIVI'
							WHEN 'LineType'					THEN 'A.IMLNTY'
							WHEN 'PrimaryUom' 				THEN 'A.IMUOM1'
							WHEN 'PricingUom'				THEN 'A.IMUOM4'
							WHEN 'ShippingUom' 				THEN 'A.IMUOM6'	
							WHEN 'AbcCodeSales' 			THEN 'A.IMABCS'
							WHEN 'AbcCodeMargin' 			THEN 'A.IMABCM'
							WHEN 'AbcCodeInvestment' 		THEN 'A.IMABCI'
							WHEN 'UpcNumber' 				THEN 'A.IMUPCN'
							WHEN 'TemplateName' 			THEN 'A.IMTMPL'
							WHEN 'MatrixControlled' 		THEN 'A.IMMIC'
							WHEN 'Style'	 				THEN 'A.IMSEG1'
							WHEN 'CycleCountCategory' 		THEN 'A.IMCYCL'
							WHEN 'CategoryCode10' 			THEN 'A.IMPRP0' 
							WHEN 'CategoryCode1' 			THEN 'A.IMPRP1'
							WHEN 'CategoryCode2' 			THEN 'A.IMPRP2'
							WHEN 'CategoryCode3' 			THEN 'A.IMPRP3'
							WHEN 'CategoryCode4' 			THEN 'A.IMPRP4'
							WHEN 'CategoryCode5' 			THEN 'A.IMPRP5'
							WHEN 'CategoryCode6' 			THEN 'A.IMPRP6'
							WHEN 'CategoryCode7' 			THEN 'A.IMPRP7'
							WHEN 'CategoryCode8' 			THEN 'A.IMPRP8'
							WHEN 'CategoryCode9' 			THEN 'A.IMPRP9'
							WHEN 'ShippingCommodityClass'	THEN 'A.IMSHCM'
							WHEN 'ShippingConditionsCode'	THEN 'A.IMSHCN'
							WHEN 'SalesCode10' 				THEN 'A.IMSRP0'
							WHEN 'SalesCode1' 				THEN 'A.IMSRP1'
							WHEN 'SalesCode2' 				THEN 'A.IMSRP2'
							WHEN 'SalesCode3' 				THEN 'A.IMSRP3'
							WHEN 'SalesCode4' 				THEN 'A.IMSRP4'
							WHEN 'SalesCode5' 				THEN 'A.IMSRP5'
							WHEN 'SalesCode6' 				THEN 'A.IMSRP6'
							WHEN 'SalesCode7' 				THEN 'A.IMSRP7'
							WHEN 'SalesCode8' 				THEN 'A.IMSRP8'
							WHEN 'SalesCode9' 				THEN 'A.IMSRP9'
							WHEN 'SearchText' 				THEN 'A.IMSRTX'
							WHEN 'StandardUnitOfMeasure'	THEN 'A.IMTFLA'
							ELSE 'A.IMITM'
						END ; 

	SET SORT_DYNAMIC = SORT_DYNAMIC || SORTDIR_DYNAMIC;
		
	SET WHERE_DYNAMIC = '';
	/* Get item master data */
	SET SQL_DYNAMIC = '
		WITH CTE AS (
			SELECT 
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M'' 
					ELSE ''S''	/* Stock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
				INNER JOIN [SCDATA].FQ679910 E
				ON E.BI$9INID = ?
				INNER JOIN [SCDATA].F4102 B
				ON B.IBITM = A.IMITM
				AND B.IBMCU = E.BIMCU
			WHERE A.IMSTKT <> N''N'' AND (C.LFIVI = N''Y'' OR C.LFIVI = N''D'') AND 
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' '')))';
		
	/* UNION to retrieve NonStock products */
	IF (RetrieveNonStockProducts = 1) THEN
		SET SQL_DYNAMIC = SQL_DYNAMIC || '
			UNION
			SELECT 
				A.IMITM,
				A.IMLITM,
				A.IMAITM,
				A.IMDSC1,
				A.IMDSC2,
				A.IMSTKT,
				C.LFIVI,
				A.IMLNTY,
				A.IMUOM1,
				A.IMUOM4,
				A.IMUOM6,
				A.IMABCS,
				A.IMABCM,
				A.IMABCI,
				A.IMUPCN,
				CASE
					WHEN A.IMSTKT IN (''K'', ''C'') THEN A.IMSTKT
					WHEN A.IMMIC IN (''1'', ''2'') AND A.IMTMPL <> '' '' THEN ''M''
					ELSE ''N''	/* NonStock */
				END AS ScType,
				A.IMTMPL,
				A.IMMIC,
				A.IMSEG1,
				A.IMCYCL, 
				A.IMPRP0, 
				A.IMPRP1, 
				A.IMPRP2, 
				A.IMPRP3, 
				A.IMPRP4, 
				A.IMPRP5, 
				A.IMPRP6, 
				A.IMPRP7, 
				A.IMPRP8, 
				A.IMPRP9, 
				A.IMSHCM, 
				A.IMSHCN, 
				A.IMSRP0, 
				A.IMSRP1, 
				A.IMSRP2, 
				A.IMSRP3, 
				A.IMSRP4, 
				A.IMSRP5, 
				A.IMSRP6, 
				A.IMSRP7, 
				A.IMSRP8, 
				A.IMSRP9,
				A.IMSRTX,
				A.IMTFLA
			FROM 
				[SCDATA].F4101 A
				INNER JOIN [SCDATA].F40205 C
				ON C.LFLNTY = A.IMLNTY
			WHERE A.IMSTKT = N''N'' OR (C.LFIVI <> N''Y'' AND C.LFIVI <> N''D'') AND 
				 (A.IMTMPL = '' '' OR (A.IMTMPL <> '' '' AND A.IMMIC IN (''1'', ''2'', '' '')))	) ';
	ELSE
		SET SQL_DYNAMIC = SQL_DYNAMIC || '
				GROUP BY	A.IMITM	 ,
							A.IMLITM ,
							A.IMAITM ,
							A.IMDSC1 ,
							A.IMDSC2 ,
							A.IMSTKT ,
							C.LFIVI	 ,
							A.IMLNTY ,
							A.IMUOM1 ,
							A.IMUOM4 ,
							A.IMUOM6 ,
							A.IMABCS ,
							A.IMABCM ,
							A.IMABCI ,
							A.IMUPCN ,
							A.IMTMPL ,
							A.IMMIC	,
							A.IMSEG1 ,
							A.IMCYCL , 
							A.IMPRP0 , 
							A.IMPRP1 , 
							A.IMPRP2 , 
							A.IMPRP3 , 
							A.IMPRP4 , 
							A.IMPRP5 , 
							A.IMPRP6 , 
							A.IMPRP7 , 
							A.IMPRP8 , 
							A.IMPRP9 , 
							A.IMSHCM , 
							A.IMSHCN , 
							A.IMSRP0 , 
							A.IMSRP1 , 
							A.IMSRP2 , 
							A.IMSRP3 , 
							A.IMSRP4 , 
							A.IMSRP5 , 
							A.IMSRP6 , 
							A.IMSRP7 , 
							A.IMSRP8 , 
							A.IMSRP9,
							A.IMSRTX,
							A.IMTFLA
			) ';
		END IF;

		IF(WhereCondition IS NOT NULL AND WhereCondition <> '*') THEN
				SET WHERE_DYNAMIC = ' WHERE ' || WhereCondition; 
		END IF;
		IF(LongProductNumbersXML IS NOT NULL) THEN
			SET SQL_DYNAMIC = SQL_DYNAMIC || N'
					SELECT 
						A.IMITM		AS ShortProductNumber,
						A.IMLITM	AS LongProductNumber,
						A.IMAITM	AS AuxiliaryProductNumber,
						A.IMDSC1	AS Description1,
						A.IMDSC2	AS Description2,
						A.IMSTKT	AS StockingType,
						A.LFIVI		AS InventoryFlag,
						A.IMLNTY	AS LineType,
						A.IMUOM1	AS PrimaryUom,
						A.IMUOM4	AS PricingUom,
						A.IMUOM6	AS ShippingUom,
						A.IMABCS	AS AbcCodeSales,
						A.IMABCM	AS AbcCodeMargin,
						A.IMABCI	AS AbcCodeInvestment,
						A.IMUPCN	AS UpcNumber,
						A.ScType,
						A.IMTMPL	AS MatrixTemplate,
						A.IMMIC		AS MatrixControlled,
						A.IMSEG1	AS Segment1,
						A.IMCYCL	AS CycleCountCategory, 
						A.IMPRP0	AS CategoryCode10, 
						A.IMPRP1	AS CategoryCode1, 
						A.IMPRP2	AS CategoryCode2, 
						A.IMPRP3	AS CategoryCode3, 
						A.IMPRP4	AS CategoryCode4, 
						A.IMPRP5	AS CategoryCode5, 
						A.IMPRP6	AS CategoryCode6, 
						A.IMPRP7	AS CategoryCode7, 
						A.IMPRP8	AS CategoryCode8, 
						A.IMPRP9	AS CategoryCode9, 
						A.IMSHCM	AS ShippingCommodityClass, 
						A.IMSHCN	AS ShippingConditionsCode, 
						A.IMSRP0	AS SalesCode10, 
						A.IMSRP1	AS SalesCode1, 
						A.IMSRP2	AS SalesCode2, 
						A.IMSRP3	AS SalesCode3, 
						A.IMSRP4	AS SalesCode4, 
						A.IMSRP5	AS SalesCode5, 
						A.IMSRP6	AS SalesCode6, 
						A.IMSRP7	AS SalesCode7, 
						A.IMSRP8	AS SalesCode8, 
						A.IMSRP9	AS SalesCode9,
						A.IMSRTX	AS SearchText,
						A.IMTFLA	AS StandardUnitOfMeasure,
						0 AS TotalRowCount
					FROM CTE A
					INNER JOIN SESSION.XMLPRODUCTSTABLE X
						ON X.LongProductNumber = A.IMLITM ' || WHERE_DYNAMIC; 

			/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
			INSERT INTO SESSION.XMLPRODUCTSTABLE (LongProductNumber)
			SELECT 
				items.LongProductNumber
				FROM XMLTABLE ('$d/items/item'
				PASSING LongProductNumbersXML AS "d"
				COLUMNS LongProductNumber VARGRAPHIC(25) CCSID 13488 PATH 'text()') AS items;
		ELSE
			/* Concat Row Count for paging scenario only */
			SET SQL_DYNAMIC = SQL_DYNAMIC || ', PAGING AS (SELECT 
				A.IMITM		AS ShortProductNumber,
				A.IMLITM	AS LongProductNumber,
				A.IMAITM	AS AuxiliaryProductNumber,
				A.IMDSC1	AS Description1,
				A.IMDSC2	AS Description2,
				A.IMSTKT	AS StockingType,
				A.LFIVI		AS InventoryFlag,
				A.IMLNTY	AS LineType,
				A.IMUOM1	AS PrimaryUom,
				A.IMUOM4	AS PricingUom,
				A.IMUOM6	AS ShippingUom,
				A.IMABCS	AS AbcCodeSales,
				A.IMABCM	AS AbcCodeMargin,
				A.IMABCI	AS AbcCodeInvestment,
				A.IMUPCN	AS UpcNumber,
				A.ScType,
				A.IMTMPL	AS MatrixTemplate,
				A.IMMIC		AS MatrixControlled,
				A.IMSEG1	AS Segment1,
				A.IMCYCL	AS CycleCountCategory, 
				A.IMPRP0	AS CategoryCode10, 
				A.IMPRP1	AS CategoryCode1, 
				A.IMPRP2	AS CategoryCode2, 
				A.IMPRP3	AS CategoryCode3, 
				A.IMPRP4	AS CategoryCode4, 
				A.IMPRP5	AS CategoryCode5, 
				A.IMPRP6	AS CategoryCode6, 
				A.IMPRP7	AS CategoryCode7, 
				A.IMPRP8	AS CategoryCode8, 
				A.IMPRP9	AS CategoryCode9, 
				A.IMSHCM	AS ShippingCommodityClass, 
				A.IMSHCN	AS ShippingConditionsCode, 
				A.IMSRP0	AS SalesCode10, 
				A.IMSRP1	AS SalesCode1, 
				A.IMSRP2	AS SalesCode2, 
				A.IMSRP3	AS SalesCode3, 
				A.IMSRP4	AS SalesCode4, 
				A.IMSRP5	AS SalesCode5, 
				A.IMSRP6	AS SalesCode6, 
				A.IMSRP7	AS SalesCode7, 
				A.IMSRP8	AS SalesCode8, 
				A.IMSRP9	AS SalesCode9, 
				A.IMSRTX	AS SearchText,
				A.IMTFLA	AS StandardUnitOfMeasure,
				ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||') AS RowCount
			FROM CTE A 
			' || WHERE_DYNAMIC  || ' ) 
			SELECT 
				A.ShortProductNumber,
				A.LongProductNumber,
				A.AuxiliaryProductNumber,
				A.Description1,
				A.Description2,
				A.StockingType,
				A.InventoryFlag,
				A.LineType,
				A.PrimaryUom,
				A.PricingUom,
				A.ShippingUom,
				A.AbcCodeSales,
				A.AbcCodeMargin,
				A.AbcCodeInvestment,
				A.UpcNumber,
				A.ScType,
				A.MatrixTemplate,
				A.MatrixControlled,
				A.Segment1,
				A.CycleCountCategory, 
				A.CategoryCode10, 
				A.CategoryCode1, 
				A.CategoryCode2, 
				A.CategoryCode3, 
				A.CategoryCode4, 
				A.CategoryCode5, 
				A.CategoryCode6, 
				A.CategoryCode7, 
				A.CategoryCode8, 
				A.CategoryCode9, 
				A.ShippingCommodityClass, 
				A.ShippingConditionsCode, 
				A.SalesCode10, 
				A.SalesCode1, 
				A.SalesCode2, 
				A.SalesCode3, 
				A.SalesCode4, 
				A.SalesCode5, 
				A.SalesCode6, 
				A.SalesCode7, 
				A.SalesCode8, 
				A.SalesCode9,
				A.SearchText,
				A.StandardUnitOfMeasure,
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
			FROM PAGING A
			WHERE (A.RowCount BETWEEN ? AND ?)
			';
		END IF;
		
		/*Paging */ 
		SET ROWSTART = ( ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 ) ; 
		SET ROWEND = ( PAGEINDEX * PAGESIZE ) ; 
			
		/*Concat INSERT with DYNAMIC SELECT*/
		SET SQL_DYNAMIC = 'INSERT INTO SESSION.PRODMASTERDETAILTABLE (ShortProductNumber, LongProductNumber, AuxiliaryProductNumber, Description1, Description2, StockingType, InventoryFlag, LineType, PrimaryUom, PricingUom, ShippingUom, AbcCodeSales, AbcCodeMargin, AbcCodeInvestment, UpcNumber, SCType, MatrixTemplate, MatrixControlled, Segment1, CycleCountCategory, CategoryCode10, CategoryCode1, CategoryCode2, CategoryCode3, CategoryCode4, CategoryCode5, CategoryCode6, CategoryCode7, CategoryCode8, CategoryCode9, ShippingCommodityClass, ShippingConditionsCode, SalesCode10, SalesCode1, SalesCode2, SalesCode3, SalesCode4, SalesCode5, SalesCode6, SalesCode7, SalesCode8, SalesCode9, SearchText, StandardUnitOfMeasure, TotalRowCount)' || SQL_DYNAMIC;
		PREPARE S1 FROM SQL_DYNAMIC;

		IF(LongProductNumbersXML IS NULL) THEN
			EXECUTE S1  USING StoreId, RowStart, RowEnd;
		ELSE
			EXECUTE S1  USING StoreId;
		END IF;
			
			

		/* Get the item information detail from the temporary table */
		OPEN TEMP_CURSOR1;

		/* End Region Products Data */

		/* Get BranchPlants by item*/
		OPEN TEMP_CURSOR2;

		IF(IsPreviewMode = 0) THEN
			/* Specific UOMs */
			INSERT INTO SESSION.PRODUNITOFMEASURETABLE (shortProductNumber, unitOfMeasure)
			SELECT DISTINCT ShortProductNumber, UM
			FROM (
					SELECT UM, A.ShortProductNumber
					FROM SESSION.PRODMASTERDETAILTABLE A
					LEFT OUTER JOIN [SCDATA].F41002 B
						ON B.UMITM = A.ShortProductNumber, 
					LATERAL(VALUES
							('PrimaryUom', PrimaryUom),('PricingUom', PricingUom),('UMRUM', UMRUM),('UMUM', UMUM)
							) AS T(UOM, UM) 
					WHERE A.StandardUnitOfMeasure = N'') B
			WHERE UM IS NOT NULL;

			/* Global UOMs */
			INSERT INTO SESSION.PRODUNITOFMEASURETABLE (shortProductNumber, unitOfMeasure)
			SELECT DISTINCT ShortProductNumber, UM
			FROM (
					SELECT UM, A.ShortProductNumber
					FROM SESSION.PRODMASTERDETAILTABLE A
					LEFT OUTER JOIN [SCDATA].F41003 B
						ON B.UCRUM IN (A.PrimaryUom, A.PricingUom)
						OR B.UCUM IN (A.PrimaryUom, A.PricingUom), 
					LATERAL(VALUES
							('PrimaryUom', PrimaryUom),('PricingUom', PricingUom),('UCRUM', UCRUM),('UCUM', UCUM)
							) AS T(UOM, UM) 
					WHERE A.StandardUnitOfMeasure = N'1') B
			WHERE UM IS NOT NULL;

			/* Unit of measure List */
			OPEN TEMP_CURSOR3;

			/* Global UOMs */
			OPEN TEMP_CURSOR4;
			
			/* Unit of measure conversion Factory */
			OPEN TEMP_CURSOR5;

		END IF;
	
	END;

END;
-- #desc							Get PunchOut Product Info List
-- #bl_class						Premier.Inventory.PunchOutProductList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param ShortProductNumbersXML	Short Product Numbers XML	<punchOutProducts><punchOutProduct><![CDATA[60020]]></punchOutProduct></punchOutProducts>


CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetPunchOutProductList
(
	IN ShortProductNumbersXML	XML
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetPunchOutProductList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
    SELECT 
		IM.IMITM  AS ProductNumber,
		CF.IVCITM AS ManufacturerId,
		DR.DRDL01 AS ManufacturerName
    FROM 
        XMLTABLE('$d/punchOutProducts/punchOutProduct' PASSING ShortProductNumbersXML AS "d" 
        COLUMNS ShortProductNumber GRAPHIC(25) CCSID 13488 PATH 'text()') AS X
    INNER JOIN [SCDATA].F4101 IM
			ON IM.IMITM = X.ShortProductNumber
		LEFT JOIN [SCCTL].F0005 DR
			ON LTRIM(RTRIM(DR.DRKY)) = LTRIM(RTRIM(IM.IMSRP9))
			AND DRSY = '41' AND DRRT = '09'		
		LEFT OUTER JOIN [SCDATA].F4104 CF
            ON CF.IVXRT = 'M'
            AND CF.IVITM = IM.IMITM
			AND CurrentJulianDate BETWEEN CF.IVEFTJ AND CF.IVEXDJ
		FOR FETCH ONLY;

	--Get the current Julian Date
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	OPEN TEMP_CURSOR1;
END;

-- #desc					Get Supplier AddressBook Info
-- #bl_class				Premier.Inventory.SupplierAddressBookInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetSupplierAddressBookInfo
(
	IN AddressNumber 	NUMERIC(8,0),
	IN ContactID 		DECIMAL(5,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetSupplierAddressBookInfo
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

	SELECT
		WWAN8	AS AddressNumber,
		WWIDLN	AS ContactId,
		WWMLNM	AS MailingName		
	FROM
		[SCDATA].F0111
	WHERE
		WWAN8 = AddressNumber 
		AND WWIDLN = ContactID
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Gets list of Matrix Extended segments
-- #bl_class				Premier.Inventory.TemplateAndSegmentList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetTemplateAndSegmentList
(
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].INV_GetTemplateAndSegmentList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	WITH CTE AS (
		SELECT
			S0TMPL		AS TEMPLATE,
			S0SEG1		AS SEGMENT1,
			T7SGD1		AS Segment1Description,
			T7SGD2		AS Segment2Description,
			T7SGD3		AS Segment3Description,
			T7SGD4		AS Segment4Description,
			T7SGD5		AS Segment5Description,
			T7SGD6		AS Segment6Description,
			T7SGD7		AS Segment7Description,
			T7SGD8		AS Segment8Description,
			T7SGD9		AS Segment9Description,
			T7SGD0		AS Segment0Description,
			ROW_NUMBER() OVER(PARTITION BY A.S0TMPL, A.S0SEG1 ORDER BY B.T7MCU) AS RNUM
		FROM [SCDATA].F41008 A
		INNER JOIN  [SCDATA].F410014 B
			ON A.S0TMPL = B.T7TMPL
	)
	SELECT
		A.TEMPLATE,
		A.SEGMENT1,
		A.Segment1Description,
		A.Segment2Description,
		A.Segment3Description,
		A.Segment4Description,
		A.Segment5Description,
		A.Segment6Description,
		A.Segment7Description,
		A.Segment8Description,
		A.Segment9Description,
		A.Segment0Description
	FROM CTE A
	WHERE RNUM = 1
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1; 
END;
-- #desc					Get Template Catalog Node List
-- #bl_class				Premier.Inventory.TemplateCatalogNodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param TemplateID		Template ID

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetTemplateCatalogNodeList
(
	IN TemplateID varchar(10)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetTemplateCatalogNodeList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

	SELECT
		A.CD$9CLGID		AS	CatalogID,
		A.CDUKID		AS	UniqueKeyID,
		B.CADSC1		AS	CatalogDescription,
		A.CDDL01		AS	NodeDescription,
		B.CA$9INID		AS  InstallationID
	FROM
		[SCDATA].FQ67413 A
		INNER JOIN [SCDATA].FQ67412 B
		ON B.CA$9CLGID = A.CD$9CLGID
	WHERE
		A.CDTMPI = TemplateID
	
	FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
	
END ;
-- #desc					Read UOM
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param UnitOfMeasure		Unit of measure
-- #param InstallationID	Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetUnitOfMeasure
(
    IN InstallationID	varchar(3),
	IN UnitOfMeasure	varchar(2)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetUnitOfMeasure 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.UM$9INID	InstallationID, 
		A.UMUOM		UnitOfMeasure,
		A.UMDSC1	Description
	FROM 
	 	-- Sales Unit of Measure Master
		[SCDATA].FQ67415 A
	WHERE 
		-- Installation Id filter
		A.UM$9INID = InstallationID AND
		-- Unit of Measure filter
		A.UMUOM = UnitOfMeasure
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 
	
	CALL [SCLIBRARY].INV_GetUnitOfMeasureLangs(InstallationID, UnitOfMeasure, null);
	
END
	
 ;
-- #desc					Read UOM info
-- #bl_class				Premier.Inventory.UnitOfMeasureInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID
-- #param UnitOfMeasure		Unit of Measure
-- #param LangPref			Language preference

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetUnitOfMeasureInfo
(
	InstallationID VARCHAR(3),
	UnitOfMeasure VARCHAR(2),
	LangPref	VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetUnitOfMeasureInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE CodeLength INTEGER;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			InstallationID  AS InstallationID, 
			A.DRKY			AS UnitOfMeasure,
			A.DRDL01		AS Description	
		FROM [SCCTL].F0005 A		
		WHERE 
			A.DRSY = '00'
			AND A.DRRT = 'UM'
			AND SUBSTRING(A.DRKY, 10 - CodeLength + 1, CodeLength) = UnitOfMeasure
		FOR FETCH ONLY;

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			A.UM$9INID AS	InstallationID, 
			A.UMUOM	 AS		UnitOfMeasure,
			COALESCE(B.UMDSC1, A.UMDSC1) AS Description
		FROM 
	 		-- Sales Unit of Measure Master
			[SCDATA].FQ67415 A 
			LEFT OUTER JOIN [SCDATA].FQ67415L B
				ON B.UMUOM = A.UMUOM
				AND B.UMLNGP = LangPref
		WHERE 
			-- Installation Id filter
			A.UM$9INID = InstallationID
			-- Unit of Measure filter
			AND A.UMUOM = UnitOfMeasure
			FOR FETCH ONLY;

	IF(InstallationID = '***') THEN
		-- Get Code Length	
		SET CodeLength = 0;	
		SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
		  WHERE DTSY = '00' AND DTRT = 'UM');

		OPEN TEMP_CURSOR1;
	ELSE
		OPEN TEMP_CURSOR2;
	END IF;
	
END
 ;
-- #desc					Read UOM list
-- #bl_class				Premier.Inventory.UnitOfMeasureList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_GetUnitOfMeasureList
(
	IN InstallationID	varchar(3),
	IN UnitOfMeasure	varchar(2),
	IN Description		varchar(30),
	IN LangPref			varchar(2)
)	
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetUnitOfMeasureList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.UM$9INID	InstallationID, 
		A.UMUOM		UnitOfMeasure,
		COALESCE(B.UMDSC1, A.UMDSC1) AS Description
	FROM 
	 	-- Sales Unit of Measure Master
		[SCDATA].FQ67415 A
		LEFT OUTER JOIN [SCDATA].FQ67415L B
		ON B.UMUOM = A.UMUOM
        AND B.UMLNGP = LangPref
	WHERE 
		-- Installation Id filter
		A.UM$9INID = InstallationID
		-- Unit of Measure filter
		AND (UnitOfMeasure = '*' OR A.UMUOM = UnitOfMeasure)
		-- Description filter
		AND (Description = '*' OR
		(B.UMDSC1 IS NULL AND UPPER(RTRIM(A.UMDSC1))  LIKE '%' || UPPER(RTRIM(Description)) || '%' ) OR
		(B.UMDSC1 IS NOT NULL AND UPPER(RTRIM(B.UMDSC1)) LIKE '%' || UPPER(RTRIM(Description)) || '%'))
	ORDER BY 
		A.UMUOM
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1; 
	
END ;
-- #desc						Get the UOM list of the not related
-- #bl_class					Premier.Inventory.UnitOfMeasureList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation Id
-- #param UnitOfMeasure			Unit Of Measure
-- #param Description			Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_GetUOMListNotRel
(
    IN InstallationID	VARCHAR(3),
    IN UnitOfMeasure	VARCHAR(2),
    IN Description		VARCHAR(30)   
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_GetUOMListNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
DECLARE	CODELENGTH INTEGER;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT				
			SUBSTRING (A.DRKY , 10 - CODELENGTH + 1 ,CODELENGTH) AS UnitOfMeasure,
			A.DRDL01 		AS Description		
	FROM	[SCCTL].F0005 A
	WHERE	A.DRSY = '00'
	AND		A.DRRT = 'UM'
	
	AND	SUBSTRING(A.DRKY , 10 - CODELENGTH + 1 ,CODELENGTH) NOT IN (SELECT COALESCE(B.UMUOM,'')
								  FROM	 [SCDATA].FQ67415 B
							  WHERE  B.UM$9INID = InstallationID)
	AND (UnitOfMeasure = '*' OR UPPER(RTRIM(SUBSTRING(A.DRKY , 10 - CODELENGTH + 1 ,CODELENGTH))) = UPPER(RTRIM(UnitOfMeasure)))
	AND	(Description = '*' OR UPPER(RTRIM(A.DRDL01)) LIKE '%' || UPPER(RTRIM(Description)) || '%') 	
	ORDER BY A.DRKY
	FOR FETCH ONLY;
	
	SET CODELENGTH = 0;
	SET CODELENGTH = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'UM');
		
	OPEN TEMP_CURSOR1;

END  ;
-- #desc						Update Catalog.
-- #bl_class					Premier.Inventory.Catalog.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param EffectiveModeFlag		Effective Mode Flag.		
-- #param EffectiveFromDate		Effective From Date.
-- #param EffectiveThruDate		Effective Thru Date.
-- #param Description			Description.
-- #param SequenceNumber		SequenceNumber.
-- #param InstallationID	    InstallationID.
-- #param MCU					MCU					
-- #param MCUBehavior			MCU Behavior
-- #param "USERID"				User Id
-- #param "PROGRAMID"			Program Id
-- #param WorkStationID			WorkStation ID		
-- #param DateUpdated			Date Updated			
-- #param TimeLastUpdated		Time Last Updated

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdCatalog 
( 
	IN InstallationID			VARCHAR(3),
	IN CatalogId				VARCHAR(3),
	IN EffectiveModeFlag 		NUMERIC(15,0),	
	IN EffectiveFromDate		NUMERIC(15,0),
	IN EffectiveThruDate		NUMERIC(15,0),
	IN Description				VARGRAPHIC(30) CCSID 13488,
	IN SequenceNumber			NUMERIC(15,0),
	IN MCU						VARCHAR(12),	
	IN MCUBehavior				VARCHAR(1),	
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationID			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdCatalog
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE [SCDATA].FQ67412
			SET 
				CA$9EFM = EffectiveModeFlag,
				CAEFFF  = EffectiveFromDate,
				CAEFFT  = EffectiveThruDate,
				CADSC1  = Description,
				CASEQ   = SequenceNumber,
				CAMCU	= MCU,
			    CA$9CCFU = MCUBehavior,
			    CAUSER  = "USERID",
			    CAPID   = "PROGRAMID",
			    CAUPMJ  = DateUpdated,
			    CAUPMT  = TimeLastUpdated,
			    CAJOBN  = WorkStationID      
		 WHERE
			   (CA$9CLGID = CatalogID AND
				CA$9INID =  InstallationID);
         
END ;
-- #desc						Update Catalog Detail
-- #bl_class					Premier.Inventory.CatalogDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID			UniqueKeyID
-- #param ParentKeyID    	    ParentKeyID.
-- #param IncludeInSearch		Include In Search.
-- #param DataItem				Data Item.
-- #param UserDefinedCode	    User Defined Code.
-- #param Description			Description.
-- #param EffectiveModeFlag		Effective Mode Flag.		
-- #param EffectiveFromDate		Effective From Date.
-- #param EffectiveThruDate		Effective Thru Date.
-- #param SequenceNumber		SequenceNumber.
-- #param ImageName				Image Name.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdCatalogDetail
( 
	IN CatalogId			VARCHAR(3),
	IN UniqueKeyID			NUMERIC(15,0),
	IN ParentKeyID    		NUMERIC(15,0),	
	IN IncludeInSearch		NUMERIC(15,0),
	IN DataItem				VARCHAR(10),
	IN UserDefinedCode		VARCHAR(10),
	IN Description			VARGRAPHIC(30) CCSID 13488,
	IN EffectiveModeFlag 	NUMERIC(15,0),	
	IN EffectiveFromDate	NUMERIC(15,0),
	IN EffectiveThruDate	NUMERIC(15,0),
	IN SequenceNumber		NUMERIC(15,0),
	IN ImageName			VARGRAPHIC(256) CCSID 13488,
	IN TemplateID			VARCHAR(10)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdCatalogDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE [SCDATA].FQ67413
		 SET
			   CD$9PKID =	ParentKeyID,
			   CD$9IIS  =	IncludeInSearch,
			   CDDTAI	=	DataItem,
			   CDKY		=	UserDefinedCode,
			   CDDL01	=	Description,
			   CD$9EFM  =	EffectiveModeFlag,
			   CDEFFF   =	EffectiveFromDate,
			   CDEFFT   =	EffectiveThruDate,   
			   CDSEQ    =	SequenceNumber,
			   CDIMGURL	=	ImageName,
			   CDTMPI   =	TemplateID
		WHERE
			   (CD$9CLGID = CatalogID AND
				CDUKID    = UniqueKeyID);
         
END ;
-- #desc						Update Catalog Detail Language
-- #bl_class					Premier.Inventory.CatalogDetailLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CatalogId				Catalog Id.
-- #param UniqueKeyID			UniqueKeyID.
-- #param LangPref	    	    Language Preference.
-- #param Description			Description.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdCatalogDetailLang
( 
	IN CatalogId		VARCHAR(3),
	IN UniqueKeyID		NUMERIC(15,0),
	IN LangPref    		VARCHAR(2),	
	IN Description	    VARGRAPHIC(30) CCSID 13488
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdCatalogDetailLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE [SCDATA].FQ67413L
		 SET
			  CDDL01 = Description

	WHERE
			   (CD$9CLGID = CatalogID    AND
				CDUKID    = UniqueKeyID  AND
				CDLNGP    = LangPref) ;
         
END ;
-- #desc						Update the image reference of the nodes of catalog copied.
-- #bl_class					Premier.Inventory.CopyCatalogCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param NewCatalogID			Catalog id to update
-- #param NodeImagesTrio		String of Trios with node id ~ the related old image id ~ new image id after copy

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdCatalogImages
(	
	IN NewCatalogID VARCHAR(3),
	IN NodeImagesTrios VARCHAR(32704)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdCatalogImages 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
	DECLARE Pos INT DEFAULT 0;
	DECLARE NextString VARCHAR(20);

	DECLARE InnerPos INT DEFAULT 0;
	DECLARE NodeID VARCHAR(3) DEFAULT '';
	DECLARE Old_NewImagesStr VARCHAR(50) DEFAULT '';
	DECLARE OldImageID VARCHAR(50) DEFAULT '';
	DECLARE NewImageID VARCHAR(50) DEFAULT '';


	IF (NodeImagesTrios <> '') THEN
		SET Pos = POSSTR(NodeImagesTrios, '|@');
		WHILE_LOOP:	
		WHILE (Pos <> 0) DO
			
			SET NextString = substring(NodeImagesTrios, 1, Pos - 1);
			SET NodeImagesTrios = substring(NodeImagesTrios,Pos + 2,LENGTH(NodeImagesTrios));
			SET Pos = POSSTR(NodeImagesTrios, '|@');

			SET InnerPos = POSSTR(NextString, '~');
			SET NodeID = substring(NextString, 1, InnerPos - 1);
				
			SET Old_NewImagesStr = substring(NextString, InnerPos + 1, LENGTH(NextString));
			SET InnerPos = POSSTR(Old_NewImagesStr, '~');

			SET OldImageID = substring(Old_NewImagesStr, 1, InnerPos - 1);
			SET NewImageID = substring(Old_NewImagesStr, InnerPos + 1, LENGTH(Old_NewImagesStr));

			UPDATE [SCDATA].FQ67413 SET CDIMGURL = NewImageID
				WHERE CD$9CLGID = NewCatalogID
					AND CDUKID = NodeID;

		END WHILE WHILE_LOOP;
	END IF;--IF 
END ;
-- #desc					Update 
-- #bl_class				Premier.Inventory.CatalogLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdCatalogLang
( 
	IN CatalogId		VARCHAR(3),
	IN LangPref    		VARCHAR(2),	
	IN Description	    VARGRAPHIC(30) CCSID 13488
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdCatalogLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE [SCDATA].FQ67412L
			SET 
			   CADSC1 = Description
		 WHERE
			   (CA$9CLGID = CatalogID AND
				CALNGP	= LangPref);
         
END  ;
-- #desc						Update Catalog Node Item
-- #bl_class					Premier.Inventory.CatalogNodeItem.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param CatalogId				Catalog Id
-- #param UniqueKeyID			UniqueKey ID
-- #param ItemNumber			Item Number
-- #param SequenceNumber		Sequence Number

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdCatalogNodeItem
(
	IN CatalogId				VARCHAR(3),
	IN UniqueKeyID				NUMERIC(15,0),
	IN ItemNumber				NUMERIC(15,0),
	IN SequenceNumber			NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN UserID					VARCHAR(10),
	IN ProgramID				VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN WorkStationID			VARCHAR(10)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdCatalogNodeItem 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE
		[SCDATA].FQ67413I
	SET
		INSEQ	=	SequenceNumber,
		INURAB	=	UserReservedNumber,
		INURAT	=	UserReservedAmount,
		INURCD	=	UserReservedCode,
		INURDT	=	UserReservedDate,
		INURRF	=	UserReservedReference,
		INUSER	=	UserID,
		INPID	=	ProgramID,
		INUPMJ	=	DateUpdated,
		INUPMT	=	TimeLastUpdated,
		INJOBN	=	WorkStationID
	WHERE
		IN$9CLGID =	CatalogId AND
	    INUKID = UniqueKeyID AND
	    INITM  = ItemNumber;
END
	     ;
-- #desc					Update the Item Web Content Detail Information
-- #bl_class				Premier.Inventory.ItemWebContentDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdItemWebContentDetail 
( 
	IN InstallationID			VARCHAR(3),
    IN ItemNumber				NUMERIC(15,0),
	IN DesignStatus				NUMERIC(15,0),
	IN UniqueKeyID				NUMERIC(15,0),
	IN SequenceNumber			NUMERIC(8,3),
	IN ParagraphTitle			VARGRAPHIC(30) CCSID 13488,
	IN HtmlContent				DBCLOB CCSID 13488,--Ntext Field
	IN ActiveInactive			VARCHAR(1),
	IN EffectiveFromDate		NUMERIC(15,0),
	IN EffectiveThruDate		NUMERIC(15,0),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationId			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdItemWebContentDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN 

UPDATE [SCDATA].FQ67411

   SET
	  CDSEQ = SequenceNumber,
      CD$9PTL = ParagraphTitle,
      CD$9HTML = HtmlContent,
      CDASAI = ActiveInactive,
      CDEFFF = EffectiveFromDate,
      CDEFFT = EffectiveThruDate,
      CDURDT = UserReservedDate,
      CDURAT = UserReservedAmount,
      CDURAB = UserReservedNumber,
      CDURRF = UserReservedReference,
      CDUSER = "USERID",
      CDPID = "PROGRAMID",
      CDJOBN = WorkStationId,
      CDUPMJ = DateUpdated,
      CDTDAY = TimeOfDay
      
WHERE (CD$9INID = InstallationID) AND
	  (CDITM = ItemNumber) AND
	  (CD$9DS = DesignStatus) AND
	  (CDUKID = UniqueKeyID);
         
END ;
 -- #desc					Updates Item Web Content Detail/ Language (Paragraphs)
-- #bl_class				Premier.Inventory.ItemWebContentDetailLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param ItemNumber		Item number
-- #param UniqueKeyID		Unique Key Id
-- #param InstallationID	Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdItemWebContentDetLang 
( 
	IN InstallationID			VARCHAR(3),
    IN ItemNumber				NUMERIC(15,0),
	IN UniqueKeyID				NUMERIC(15,0),
	IN DesignStatus				NUMERIC(15,0),
	IN LangPref					VARCHAR(2),
	IN ParagraphTitle			VARGRAPHIC(30) CCSID 13488,
	IN HtmlContent				DBCLOB CCSID 13488,--ntext
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationId			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
	
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdItemWebContentDetLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE [SCDATA].FQ67411L

	   SET  
			CL$9PTL = ParagraphTitle,
			CL$9HTML = HtmlContent,
			CLURCD = UserReservedCode,
			CLURDT = UserReservedDate,
			CLURAT = UserReservedAmount,
			CLURAB = UserReservedNumber,
			CLURRF = UserReservedReference,
			CLUSER = "USERID",
			CLPID = "PROGRAMID",
			CLJOBN = DateUpdated,
			CLUPMJ = DateUpdated,
			CLTDAY = TimeOfDay
        
	  WHERE CLITM = ItemNumber
	 AND CL$9INID = InstallationID
	 AND CLUKID = UniqueKeyID
	 AND CLLNGP = LangPref 
	 AND CL$9DS = DesignStatus;
         
END ;
-- #desc						Update 
-- #bl_class					Premier.Inventory.ItemWebContentHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param ItemNumber			ItemNumber.
-- #param InstallationID		InstallationID.
-- #param DesignStatus			DesignStatus.
-- #param Description1			Description1.
-- #param Description2			Description2.
-- #param Description3			Description3.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdItemWebContentHeader 
( 
		IN InstallationID			VARCHAR(3),	
        IN ItemNumber				NUMERIC(15,0),
		IN DesignStatus				NUMERIC(15,0),
		IN Description1				VARGRAPHIC(30) CCSID 13488,
		IN Description2				VARGRAPHIC(30) CCSID 13488,
		IN Description3				VARGRAPHIC(30) CCSID 13488,
		IN MessagePriority			NUMERIC(15,0),
		IN HtmlContent				DBCLOB CCSID 13488,--NTEXT Fiedl
		IN PortalUrl				VARGRAPHIC(256) CCSID 13488,
		IN UserReservedCode			VARCHAR(2),
		IN UserReservedDate			NUMERIC(15,0),
		IN UserReservedAmount		NUMERIC(15,0),
		IN UserReservedNumber		NUMERIC(15,0),
		IN UserReservedReference	VARCHAR(15),
		IN "USERID"					VARCHAR(10),
		IN "PROGRAMID"				VARCHAR(10),
		IN WorkStationId			VARCHAR(10),
		IN DateUpdated				NUMERIC(15,0),
		IN TimeOfDay				NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdItemWebContentHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE [SCDATA].FQ67410

	   SET CHDSC1 = Description1
		  ,CHDSC2 = Description2
		  ,CHDSC3 = Description3
		  ,CH$9HTML = HtmlContent
		  ,CH$9PRI = MessagePriority
		  ,CHPTURL = PortalUrl
		  ,CHURCD = UserReservedCode
		  ,CHURDT = UserReservedDate
		  ,CHURAT = UserReservedAmount
		  ,CHURAB = UserReservedNumber
		  ,CHURRF = UserReservedReference
		  ,CHUSER = "USERID" 
		  ,CHPID =  "PROGRAMID"
		  ,CHJOBN = WorkStationId
		  ,CHUPMJ = DateUpdated
		  ,CHTDAY = TimeOfDay
	 WHERE  CHITM =ItemNumber AND
			 CH$9INID = InstallationID  AND
			 CH$9DS = DesignStatus;
         
END ;
 -- #desc					Updates Item Content - Language
-- #bl_class				Premier.Inventory.ItemWebContentHeaderLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param ItemNumber		Item Number
-- #param InstallationID	Installation ID		
-- #param DesignStatus		Item Design Status

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdItemWebContentHeadLang 
( 
		IN InstallationID			VARCHAR(3),	
        IN ItemNumber				NUMERIC(15,0),
		IN DesignStatus				NUMERIC(15,0),
		IN LangPref					VARCHAR(2),
		IN Description1				VARGRAPHIC(30) CCSID 13488,
		IN Description2				VARGRAPHIC(30) CCSID 13488,
		IN Description3				VARGRAPHIC(30) CCSID 13488,
		IN HtmlContent				DBCLOB CCSID 13488,--NTEXT Fiedl
		IN UserReservedCode			VARCHAR(2),
		IN UserReservedDate			NUMERIC(15,0),
		IN UserReservedAmount		NUMERIC(15,0),
		IN UserReservedNumber		NUMERIC(15,0),
		IN UserReservedReference	VARCHAR(15),
		IN "USERID"					VARCHAR(10),
		IN "PROGRAMID"				VARCHAR(10),
		IN WorkStationId			VARCHAR(10),
		IN DateUpdated				NUMERIC(15,0),
		IN TimeOfDay				NUMERIC(15,0)

)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdItemWebContentHeadLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN 

	UPDATE [SCDATA].FQ67410L

	   SET
		   CLDSC1 = Description1
		  ,CLDSC2 = Description2
		  ,CLDSC3 = Description3
		  ,CL$9HTML = HtmlContent
		  ,CLURCD = UserReservedCode
		  ,CLURDT = UserReservedDate
		  ,CLURAT = UserReservedAmount
		  ,CLURAB = UserReservedNumber
		  ,CLURRF = UserReservedReference
		  ,CLUSER = "USERID"
		  ,CLPID =  "PROGRAMID"
		  ,CLJOBN = WorkStationId
		  ,CLUPMJ = DateUpdated
		  ,CLTDAY = TimeOfDay
	 WHERE  CLITM = ItemNumber 
	 AND CL$9INID = InstallationID 
	 AND CLLNGP = LangPref  
	 AND CL$9DS = DesignStatus;
         
END ;
-- #desc					Update UOM 
-- #bl_class				Premier.Inventory.UnitOfMeasure.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param UnitOfMeasure		Unit of Measure
-- #param InstallationID	Installation ID		
-- #param Description		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].INV_UpdUnitOfMeasure
(   
    IN InstallationID	VARCHAR(3), 
	IN UnitOfMeasure	VARCHAR(10),
	IN Description		VARGRAPHIC(30) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdUnitOfMeasure 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
	
	UPDATE 
		[SCDATA].FQ67415
	SET  
		UMDSC1 = Description
	WHERE 
		    (UM$9INID = InstallationID)
		AND (UMUOM = UnitOfMeasure);
END ;
-- #desc					Update UOM Lang
-- #bl_class				Premier.Inventory.UnitOfMeasureLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param UnitOfMeasure		Unit of Measure	
-- #param LangPref			Language Preference
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].INV_UpdUnitOfMeasureLang
(
	UnitOfMeasure	VARCHAR(10),
	Description		VARGRAPHIC(30) CCSID 13488,
	LangPref		VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].INV_UpdUnitOfMeasureLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE 
		[SCDATA].FQ67415L
	SET 
		UMDSC1 = Description
	WHERE 
	    UMUOM =	 UnitOfMeasure
		AND UMLNGP = LangPref;
END ;
-- #desc					Creates "How you heard about us" options
-- #bl_class				Premier.Profile.AboutUs.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AboutUsID			How you heard about us id
-- #param Description		How you heard about description
-- #param AllowedOnESOM		N/A
-- #param AllowedOnPOS		N/A
-- #param AllowedOnWEB		N/A
-- #param "PROGRAMID"		N/A
-- #param WorkStationID		N/A
-- #param "USERID"			N/A
-- #param DateUpdated		N/A
-- #param TimeLastUpdated	N/A
  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_AddAboutUs 
(
  IN AboutUsID			VARCHAR(3),
  IN Description		VARGRAPHIC(30) CCSID 13488,
  IN AllowedOnESOM		NUMERIC(15,0),
  IN AllowedOnPOS		NUMERIC(15,0),
  IN AllowedOnWEB		NUMERIC(15,0),
  IN "PROGRAMID"		VARCHAR(10),
  IN WorkStationID		VARCHAR(10),
  IN "USERID"			VARCHAR(10),
  IN DateUpdated		NUMERIC(15,0),
  IN TimeLastUpdated	NUMERIC(15,0)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_AddAboutUs
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

  INSERT INTO [SCDATA].FQ67102
  (
   HH$9HHA,  HHDSC1,  HH$9ESOM, HH$9POSA, HH$9WEBA,
   HHPID,    HHJOBN,  HHUSER,   HHUPMJ,   HHUPMT
  )
  VALUES
  (
   AboutUsID, Description, AllowedOnESOM, AllowedOnPOS, AllowedOnWEB, 
   "PROGRAMID",   WorkStationID, "USERID",   DateUpdated,   TimeLastUpdated
   );
END ;
-- #desc					Creates "How you heard about us Langs"
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param AboutUsID			AboutUs ID
-- #param LangPref			Language Preference
-- #param Description		Description

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_AddAboutUsLang 
(
	IN AboutUsID		VARCHAR(3),
	IN LangPref			VARCHAR(2),
	IN Description		VARGRAPHIC(30) CCSID 13488
)

LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_AddAboutUsLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO [SCDATA].FQ67102L
		(
		 HH$9HHA,  
		 HHLNGP,  
		 HHDSC1
		)
		VALUES
		(
		 AboutUsID,
		 LangPref,
		 Description 
		);
END ;
-- #desc						Create line of business.
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param LineOfBusinessID		Line of business 
-- #param Description			Description
-- #param BranchPlant			Branch Plant
-- #param AddressBookType		Address type
-- #param PersonCorporationCode	Person Code
-- #param AdjustmentSchedule	Adjustment Schedule
-- #param PriceGroup			Price Group
-- #param SequenceNumber		Sequence Number
-- #param CategoryCode01		N/A
-- #param CategoryCode02		N/A
-- #param CategoryCode03		N/A
-- #param CategoryCode04		N/A
-- #param CategoryCode05		N/A
-- #param CategoryCode06		N/A
-- #param CategoryCode07		N/A
-- #param CategoryCode08		N/A
-- #param CategoryCode09		N/A
-- #param CategoryCode10		N/A
-- #param CategoryCode11		N/A
-- #param CategoryCode12		N/A
-- #param CategoryCode13		N/A
-- #param CategoryCode14		N/A
-- #param CategoryCode15		N/A
-- #param CategoryCode16		N/A
-- #param CategoryCode17		N/A
-- #param CategoryCode18		N/A
-- #param CategoryCode19		N/A
-- #param CategoryCode20		N/A
-- #param CategoryCode21		N/A
-- #param CategoryCode22		N/A
-- #param CategoryCode23		N/A
-- #param CategoryCode24		N/A
-- #param CategoryCode25		N/A	
-- #param CategoryCode26		N/A
-- #param CategoryCode27		N/A
-- #param CategoryCode28		N/A
-- #param CategoryCode29		N/A
-- #param CategoryCode30		N/A
-- #param "PROGRAMID"			Program ID
-- #param WorkStationID			WorkStation ID
-- #param "USERID"				User ID
-- #param DateUpdated			Last Date Update
-- #param TimeLastUpdated		Last Updated time

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_AddLineOfBusiness 
(
	LineOfBusinessID		varchar(3),
	Description				VARGRAPHIC(30) CCSID 13488,
	BranchPlant				varchar(12),
	AddressBookType			NUMERIC(15,0),
	PersonCorporationCode	varchar(1),
	AdjustmentSchedule		varchar(8),
	PriceGroup				varchar(8),
	SequenceNumber			NUMERIC(15,0),
	CategoryCode01			varchar(3),
	CategoryCode02			varchar(3),
	CategoryCode03			varchar(3),
	CategoryCode04			varchar(3),
	CategoryCode05			varchar(3),
	CategoryCode06			varchar(3),
	CategoryCode07			varchar(3),
	CategoryCode08			varchar(3),
	CategoryCode09			varchar(3),
	CategoryCode10			varchar(3),
	CategoryCode11			varchar(3),
	CategoryCode12			varchar(3),
	CategoryCode13			varchar(3),
	CategoryCode14			varchar(3),
	CategoryCode15			varchar(3),
	CategoryCode16			varchar(3),
	CategoryCode17			varchar(3),
	CategoryCode18			varchar(3),
	CategoryCode19			varchar(3),
	CategoryCode20			varchar(3),
	CategoryCode21			varchar(3),
	CategoryCode22			varchar(3),
	CategoryCode23			varchar(3),
	CategoryCode24			varchar(3),
	CategoryCode25			varchar(3),
	CategoryCode26			varchar(3),
	CategoryCode27			varchar(3),
	CategoryCode28			varchar(3),
	CategoryCode29			varchar(3),
	CategoryCode30			varchar(3),
	"USERID"				varchar(10),
	"PROGRAMID"				varchar(10),
	DateUpdated				NUMERIC(15,0),
	WorkStationID			varchar(10),
	TimeLastUpdated			NUMERIC(15,0)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_AddLineOfBusiness
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN
		INSERT INTO [SCDATA].FQ67103
		(
		 LB$9LOB,  LBDSC1,  LBMCU,    LB$9TYP,
		 LBTAXC,   LBASN,   LBCPGP,   LBSEQ, 
		 LBAC01,   LBAC02,  LBAC03,   LBAC04, 
		 LBAC05,   LBAC06,  LBAC07,   LBAC08, 
		 LBAC09,   LBAC10,  LBAC11,   LBAC12, 
		 LBAC13,   LBAC14,  LBAC15,   LBAC16, 
		 LBAC17,   LBAC18,  LBAC19,   LBAC20, 
		 LBAC21,   LBAC22,  LBAC23,   LBAC24, 
		 LBAC25,   LBAC26,  LBAC27,   LBAC28, 
		 LBAC29,   LBAC30,  LBPID,    LBJOBN,
		 LBUSER,   LBUPMJ,  LBUPMT
		)
		VALUES
		(
		 LineOfBusinessID, Description, BranchPlant,   AddressBookType, 
		 PersonCorporationCode,  AdjustmentSchedule,  PriceGroup,  SequenceNumber, 
		 CategoryCode01,  CategoryCode02, CategoryCode03,  CategoryCode04, 
		 CategoryCode05,  CategoryCode06, CategoryCode07,  CategoryCode08, 
		 CategoryCode09,  CategoryCode10, CategoryCode11,  CategoryCode12, 
		 CategoryCode13,  CategoryCode14, CategoryCode15,  CategoryCode16, 
		 CategoryCode17,  CategoryCode18, CategoryCode19,  CategoryCode20, 
		 CategoryCode21,  CategoryCode22, CategoryCode23,  CategoryCode24, 
		 CategoryCode25,  CategoryCode26, CategoryCode27,  CategoryCode28, 
		 CategoryCode29,  CategoryCode30, "PROGRAMID",   WorkStationID,
		 "USERID",  DateUpdated, TimeLastUpdated
		);
END ;
-- #desc					Create line of business language.
-- #bl_class				Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param LineOfBusinessID	Line of business 
-- #param LangPref			Language Preference
-- #param Description		Description

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_AddLineOfBusinessLang 
(
	LineOfBusinessID	VARCHAR(3),
	LangPref			VARCHAR(30),
	Description			VARGRAPHIC(30) CCSID 13488
)

LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_AddLineOfBusinessLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO [SCDATA].FQ67103L
		(
		 LB$9LOB,  
		 LBLNGP,  
		 LBDSC1
		)
		VALUES
		(
		 LineOfBusinessID,
		 LangPref,
		 Description 
		);

END ;
-- #desc				Delete AboutUs.
-- #bl_class			Premier.Profile.AboutUs.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param AboutUsID		AboutUsID 

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_DelAboutUs 
(
   IN AboutUsID		 varchar(3)
)   
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_DelAboutUs
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DELETE FROM  
			[SCDATA].FQ67102 
	WHERE 
			HH$9HHA = AboutUsID;
END ;
-- #desc				    Delete Default Bank Account.
-- #bl_class			    Premier.Profile.BankAccount.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AddressNumber		AddressNumber
-- #param UniqueId			Unique Id

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_DelBankAccountDefault
(
	AddressNumber	IN NUMERIC(8, 0),
	UniqueId		IN DECIMAL (15, 0)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_DelBankAccountDefault
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
    UPDATE  [SCDATA].FQ670030 A
       SET  A.BA$9BADEF = '0'
       WHERE exists(
        SELECT 1 FROM [SCDATA].F0030 B
         WHERE b.AYUKID = a.BAUKID AND
               b.AYAN8 = AddressNumber AND b.AYUKID = UniqueId);
END;

		 
-- #desc						Delete line of business.
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param LineOfBusinessID		Line of business 

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_DelLineOfBusiness 
(
	LineOfBusinessID varchar(3)
)		
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_DelLineOfBusiness
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DELETE FROM [SCDATA].FQ67103 
	WHERE LB$9LOB = LineOfBusinessID;
	
	CALL [SCLIBRARY].PRO_DelLineOfBusinessLang(LineOfBusinessID,null);
END
 ;
-- #desc						Create a join between LOB and Installation
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		Installation ID
-- #param LineOfBusinessID		Line of business 
-- #param "PROGRAMID"			Program ID
-- #param WorkStationID			WorkStation ID
-- #param "USERID"				User ID
-- #param DateUpdated			Last Date Update
-- #param TimeLastUpdated		Last Updated time

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_ExcAddLineOfBusinessByInst 
(
	InstallationID varchar(3),
	LineOfBusinessID varchar(3),
	"PROGRAMID" varchar(10),
	WorkStationID varchar(10),
	"USERID" varchar(10),
	DateUpdated NUMERIC(15,0),
	TimeLastUpdated NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_ExcAddLineOfBusinessByInst
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE nRowCount INT DEFAULT 0;
	
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT nRowCount FROM SYSIBM.SYSDUMMY1
	FOR FETCH ONLY;
			
	INSERT INTO [SCDATA].FQ671031
	(
		LI$9LOB,  LI$9INID,  LIPID, 
		LIJOBN,   LIUSER,    LIUPMJ,  
		LIUPMT
	)
	VALUES
	(
		LineOfBusinessID, InstallationID, "PROGRAMID", 
		WorkStationID,  "USERID",   DateUpdated, 
		TimeLastUpdated
	);
	
	GET DIAGNOSTICS nRowCount = ROW_COUNT;
	
	--Used by command to check execution	
	OPEN TEMP_CURSOR;	
END ;
-- #desc							Get ship tos count by address number AND status
-- #bl_class						Premier.Profile.GetShipToCountCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A	
		
--�#param�StoreId					StoreId
-- #param Company					Company
-- #param AddressBookType			AddressBook Type 
-- #param ParentAddressNumber		Parent Address Number
-- #param Status					Status Active = 0 (AICUSTS <> 1), Inactive = 1, Any = 2

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcGetShipToCount
(
    IN StoreId				GRAPHIC(3) CCSID 13488,
	IN Company				VARCHAR(5),
	IN AddressBookType		NUMERIC(15,0),    
    IN ParentAddressNumber	NUMERIC(15,0),
    IN Status				NUMERIC(15,0),
	OUT ShipTosCount		NUMERIC(15,0)
) 
DYNAMIC RESULT SETS 0
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_ExcGetShipToCount 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
     
BEGIN   	
	--------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;
	SET OrgStrTypeINID = StoreId;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);
	
	IF (AddressBookType = 0) THEN
		WITH SHIPTOS AS 
		(
			SELECT MAAN8 FROM [SCDATA].F0150 WHERE MAPA8 = ParentAddressNumber AND MAOSTP = OrgStrType
			UNION ALL 
			SELECT ParentAddressNumber MAAN8 FROM SYSIBM.SYSDUMMY1    
		),
		CUSTOMERS AS (
			SELECT COALESCE(B.AIBADT, A.AIBADT) BADT, COALESCE(B.AICUSTS,A.AICUSTS) CUSTS 
			FROM SHIPTOS
			INNER JOIN [SCDATA].F03012 A
				ON MAAN8 = A.AIAN8
			LEFT OUTER JOIN [SCDATA].F03012 B
				ON MAAN8 = B.AIAN8
				AND B.AICO = Company
			WHERE A.AICO = '00000'
		)
		SELECT COUNT(1) INTO ShipTosCount
		FROM CUSTOMERS
		WHERE BADT IN ('S', 'X')
		AND (Status = 2 OR (Status= 1 AND CUSTS ='1') OR (Status = 0 AND CUSTS <> '1'));
	ELSE			
		SELECT COUNT(1) INTO ShipTosCount
		FROM [SCDATA].FQ670302
		WHERE (PR$9PA8 = ParentAddressNumber OR  PR$9AN8 = ParentAddressNumber)
		AND PRBADT IN ('S', 'X')
		AND (Status = 2 
			OR (Status= 1 AND PR$9STS  ='1') 
			OR (Status = 0 AND PR$9STS  <> '1')
			);
	END IF;	
END
  ;
-- #desc					Gets Customer/Consumer look up information
-- #bl_class				Premier.Profile.LookUpCommand.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param 	State 		
-- #param 	ZipCode	
-- #param 	CompressedName 
-- #param 	CompressedAddress1
-- #param 	CompressedAddress2

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_ExcLookUp
(
	State 		varchar(3) ,
	ZipCode	varchar(12) ,
	CompressedName varchar(40) ,
	CompressedAddress1 varchar(40) ,
	CompressedAddress2 varchar(40) ,
	AddressType	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_ExcLookUp 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE nCounter INT;
	
	--CUSTOMER CURSORS
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			CC$9AN8 AS AddressNumber, 
			CC$9TYP AS AddressType,  
			CC$9PA8 AS ParentNumber,
			COALESCE(PS$9ICF,-1) AS IndividualCompanyFlag,
			ABTAXC AS PersonCorporateCode
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].F03012 T0				--Join Customer Master
		ON AICO  = '00000'
		AND	AIAN8 = CC$9AN8
		AND (T0.AIBADT = 'B' OR T0.AIBADT = 'X')	--Billing Type Filter
		LEFT OUTER JOIN  [SCDATA].FQ67107			--Profile Extended Info
		ON PS$9AN8 = CC$9AN8
		AND PS$9TYP = 0
		INNER JOIN [SCDATA].F0101					--Customer Master
		ON ABAN8 = CC$9AN8
		WHERE 
		CC$9TYP = 0 AND -- Customers Only
		CCADDS = State AND 
		CCADDZ = ZipCode  AND 
		CC$9ADCN = CompressedName AND
		CC$9ADC1 = CompressedAddress1 AND
		CC$9ADC2 = CompressedAddress2 
	FOR FETCH ONLY;
		
	--CONSUMER CURSORS
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			CC$9AN8 AS AddressNumber, 
			CC$9TYP AS AddressType,  
			CC$9PA8 AS ParentNumber,
			COALESCE(PS$9ICF,-1) AS IndividualCompanyFlag,
			PRTAXC AS PersonCorporateCode
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].FQ670302 T0				--Join Consumer Master
		ON CC$9AN8 = T0.PR$9AN8
		AND (T0.PRBADT = 'B' OR T0.PRBADT = 'X')	--Billing Type Filter
		LEFT OUTER JOIN  [SCDATA].FQ67107			--Profile Extended Info
		ON PS$9AN8 = CC$9AN8
		AND PS$9TYP = 1
		WHERE 
		CC$9TYP = 1 AND -- Consumers Only
		CCADDS = State AND 
		CCADDZ = ZipCode  AND 
		CC$9ADCN = CompressedName AND
		CC$9ADC1 = CompressedAddress1 AND
		CC$9ADC2 = CompressedAddress2 AND
		T0.PR$9AN8 <> T0.PR$9PA8					--Exclude Parents
	FOR FETCH ONLY;
	
	DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
			CC$9AN8 AS AddressNumber, 
			CC$9TYP AS AddressType,  
			CC$9PA8 AS ParentNumber,
			COALESCE(PS$9ICF,-1) AS IndividualCompanyFlag,
			PRTAXC AS PersonCorporateCode
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].FQ670302 T0				--Join Consumer Master
		ON CC$9AN8 = T0.PR$9AN8
		AND (T0.PRBADT = 'B' OR T0.PRBADT = 'X')	--Billing Type Filter
		LEFT OUTER JOIN  [SCDATA].FQ67107			--Profile Extended Info
		ON PS$9AN8 = CC$9AN8
		AND PS$9TYP = 1
		WHERE 
		CC$9TYP = 1 AND -- Consumers Only
		CCADDS = State AND 
		CCADDZ = ZipCode  AND 
		CC$9ADCN = CompressedName AND
		CC$9ADC1 = CompressedAddress1 AND
		CC$9ADC2 = CompressedAddress2
	FOR FETCH ONLY;
		
	IF AddressType = 0 THEN --CUSTOMER
	
		OPEN TEMP_CURSOR1;		
	
	ELSE					--CONSUMER
		
		SELECT COUNT(*) INTO nCounter
		FROM [SCDATA].FQ670312
		INNER JOIN [SCDATA].FQ670302 T0
		ON CC$9AN8 = T0.PR$9AN8
		AND (T0.PRBADT = 'B' OR T0.PRBADT = 'X')		--Billing Type Filter
		WHERE 
		CC$9TYP = 1 AND -- Consumers Only
		CCADDS = State AND 
		CCADDZ = ZipCode  AND 
		CC$9ADCN = CompressedName AND
		CC$9ADC1 = CompressedAddress1 AND
		CC$9ADC2 = CompressedAddress2 AND
		T0.PR$9AN8 <> T0.PR$9PA8;					--Exclude Parents
	
		IF nCounter > 0 THEN
			OPEN TEMP_CURSOR2;		
		ELSE 
			OPEN TEMP_CURSOR3;
		END IF;
		
	END IF;
	
END



  ;
-- #desc					Remove a join between LOB and Installation
-- #bl_class				Premier.Profile.LineOfBusiness.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param InstallationID	Installation ID
-- #param LineOfBusinessID	Line of business 



CREATE OR REPLACE Procedure [SCLIBRARY].PRO_ExcRemLineOfBusinessByInst
(
	InstallationID varchar(3),
	LineOfBusinessID varchar(3)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_ExcRemLineOfBusinessByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE nRowCount INT DEFAULT 0;
	
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT nRowCount FROM SYSIBM.SYSDUMMY1
	FOR FETCH ONLY;
	
	DELETE FROM [SCDATA].FQ671031  
	WHERE 
		LI$9LOB = LineOfBusinessID AND 
		LI$9INID = InstallationID;

	GET DIAGNOSTICS nRowCount = ROW_COUNT;
	  
	--Used by command to check execution
	OPEN TEMP_CURSOR;
END ;
-- #desc					Resolve P4210 Version Rule
-- #bl_class				Premier.Profile.ResolveP4210VersRuleCommand.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param InstallationID	Installation ID
-- #param AddressBookType	Address Book Type
-- #param AddressNumber		Address Number

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_ExcResolP4210VerRule
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressBookType	NUMERIC(8,0),
	IN AddressNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_ExcResolP4210VerRule 
NOT DETERMINISTIC
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	/* RuleValues temporary table */
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_TABLE
	(
		UniqueId    DECIMAL(15,0),
		Hierarchy   NUMERIC(6,2),
		RuleType	GRAPHIC(2) CCSID 13488,
		Version		GRAPHIC(10) CCSID 13488	
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		DECLARE P4210Version		GRAPHIC(10) CCSID 13488;
		DECLARE RuleTypeHierarchy	GRAPHIC(2) CCSID 13488;
		DECLARE RuleUniqueId		DECIMAL(15,0);
		DECLARE CompareValue		GRAPHIC(12) CCSID 13488;
		DECLARE RuleCategoryCode	GRAPHIC(2) CCSID 13488;
		DECLARE fetch_status		INTEGER DEFAULT 0;
		DECLARE CountVersion        NUMERIC(15,0);
		/* Variable Customer/Consumer information */
		DECLARE PricingGroup		GRAPHIC(8) CCSID 13488;
		DECLARE AdjustmentSchedule	GRAPHIC(8) CCSID 13488;
		DECLARE State				GRAPHIC(3) CCSID 13488;
		DECLARE Country				GRAPHIC(3) CCSID 13488;
		DECLARE BusinessUnit		GRAPHIC(12) CCSID 13488;
		DECLARE CategoryCode01		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode02		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode03		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode04		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode05		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode06		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode07		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode08		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode09		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode10		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode11		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode12		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode13		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode14		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode15		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode16		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode17		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode18		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode19		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode20		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode21		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode22		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode23		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode24		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode25		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode26		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode27		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode28		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode29		GRAPHIC(3) CCSID 13488;
		DECLARE CategoryCode30		GRAPHIC(3) CCSID 13488;
		
		/* Cursor to SELECT the P4210Version variable */
		DECLARE FINALCURSOR CURSOR WITH HOLD WITH RETURN FOR 
			SELECT P4210Version AS P4210Version
			FROM SYSIBM.SYSDUMMY1
		FOR FETCH ONLY;
		
		/* ------------------------------------------
		 * Used WHILE LOOP
		 * Cursor to SELECT the hierarchy of the P4210VersRule */
		DECLARE RuleCursor CURSOR FOR
			SELECT UniqueId, RuleType, Version
			FROM SESSION.TMP_TABLE
			ORDER BY Hierarchy
		FOR FETCH ONLY;
		------------------------------------------
		
		DECLARE CONTINUE HANDLER FOR NOT FOUND 
		SET fetch_status = - 1; 
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
		SET fetch_status = - 1;
		
		/* Fill the tmp table with the rule type */
		INSERT INTO SESSION.TMP_TABLE
		SELECT
			RHUKID,
			RHSEQ,
			RHRUDTP,
			RHVER
		FROM
			[SCDATA].FQ674230
		WHERE
			RH$9INID = InstallationID
		ORDER BY RHSEQ;
	
		/* Get rule values from base installation */
		IF((SELECT COUNT(1) FROM SESSION.TMP_TABLE) = 0) THEN
				SET InstallationID = '***';
				INSERT INTO SESSION.TMP_TABLE
				SELECT
					RHUKID,
					RHSEQ,
					RHRUDTP
				FROM
					[SCDATA].FQ674230
				WHERE
					RH$9INID = InstallationID
				ORDER BY RHSEQ;
		END IF;
		
		SET P4210Version='';

		/* Insert into variables (PricingGroup -  AdjustmentSchedule - State - Country - BusinessUnit - CategoryCode) */
		IF((SELECT COUNT(1) FROM SESSION.TMP_TABLE) > 0) THEN
			IF(AddressBookType = 0) THEN /* CUSTOMER */
				SELECT
					B.AICPGP,B.AIASN,C.ALADDS,C.ALCTR,A.ABMCU,B.AIAC01,A.ABAC02,A.ABAC03,A.ABAC04,A.ABAC05,A.ABAC06,
					A.ABAC07,A.ABAC08,A.ABAC09,A.ABAC10,A.ABAC11,A.ABAC12,A.ABAC13,A.ABAC14,A.ABAC15,A.ABAC16,A.ABAC17,
					A.ABAC18,A.ABAC19,A.ABAC20,A.ABAC21,A.ABAC22,A.ABAC23,A.ABAC24,A.ABAC25,A.ABAC26,A.ABAC27,A.ABAC28,
					A.ABAC29,A.ABAC30
				INTO					
					PricingGroup,AdjustmentSchedule,State,Country,BusinessUnit,CategoryCode01,CategoryCode02,CategoryCode03,
					CategoryCode04,CategoryCode05,CategoryCode06,CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,
					CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
					CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,
					CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,CategoryCode29,CategoryCode30
				FROM  [SCDATA].F0101 A
				LEFT OUTER JOIN [SCDATA].F03012 B
					ON B.AIAN8 = A.ABAN8
					AND B.AICO = '00000'
				LEFT OUTER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.ABAN8, CurrentJulianDate)) C
					ON C.ALAN8 = A.ABAN8
				WHERE
					ABAN8 = AddressNumber
				FETCH FIRST 1 ROWS ONLY;
			ELSEIF (AddressBookType = 1) THEN /* CONSUMER */
				SELECT
					PRCPGP,PRASN,PRADDS,PRCTR,PRMCU,PR$9AC01,PR$9AC02,PR$9AC03,PR$9AC04,PR$9AC05,PR$9AC06,PR$9AC07,PR$9AC08,
					PR$9AC09,PR$9AC10,PR$9AC11,PR$9AC12,PR$9AC13,PR$9AC14,PR$9AC15,PR$9AC16,PR$9AC17,PR$9AC18,PR$9AC19,
					PR$9AC20,PR$9AC21,PR$9AC22,PR$9AC23,PR$9AC24,PR$9AC25,PR$9AC26,PR$9AC27,PR$9AC28,PR$9AC29,PR$9AC30
				INTO
					PricingGroup,AdjustmentSchedule,State,Country,BusinessUnit,CategoryCode01,CategoryCode02,CategoryCode03,
					CategoryCode04,CategoryCode05,CategoryCode06,CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,
					CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
					CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,
					CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,CategoryCode29,CategoryCode30
				FROM  [SCDATA].FQ670302
				WHERE
					PR$9AN8 = AddressNumber
				FETCH FIRST 1 ROWS ONLY;
			END IF;
			
			OPEN RuleCursor;
			WHILE_LOOP:
			WHILE ( fetch_status = 0 ) DO
				IF RuleUniqueId > 0 THEN
					/* ----------------------------------------------------------------------------
					 * pricing group, adjustment schedule, state, country, or category codes according to rule type */
					IF RuleTypeHierarchy IN('PG','AS','ST','CN','AC','CC') THEN				
						IF (RuleTypeHierarchy = 'PG') THEN
							SET CompareValue = PricingGroup;
						ELSEIF (RuleTypeHierarchy = 'AS') THEN
							SET CompareValue = AdjustmentSchedule;
						ELSEIF (RuleTypeHierarchy = 'ST') THEN
							SET CompareValue = State;
						ELSEIF (RuleTypeHierarchy = 'CN')THEN
							SET CompareValue = Country;
						ELSEIF (RuleTypeHierarchy = 'AC' OR RuleTypeHierarchy = 'CC') THEN
							SELECT RHRT INTO RuleCategoryCode FROM [SCDATA].FQ674230 WHERE RH$9INID = InstallationID AND RHUKID = RuleUniqueId;
							SELECT
								CASE RuleCategoryCode
									WHEN '01' THEN CategoryCode01
									WHEN '02' THEN CategoryCode02
									WHEN '03' THEN CategoryCode03
									WHEN '04' THEN CategoryCode04
									WHEN '05' THEN CategoryCode05
									WHEN '06' THEN CategoryCode06
									WHEN '07' THEN CategoryCode07
									WHEN '08' THEN CategoryCode08
									WHEN '09' THEN CategoryCode09
									WHEN '10' THEN CategoryCode10
									WHEN '11' THEN CategoryCode11
									WHEN '12' THEN CategoryCode12
									WHEN '13' THEN CategoryCode13
									WHEN '14' THEN CategoryCode14
									WHEN '15' THEN CategoryCode15
									WHEN '16' THEN CategoryCode16
									WHEN '17' THEN CategoryCode17
									WHEN '18' THEN CategoryCode18
									WHEN '19' THEN CategoryCode19
									WHEN '20' THEN CategoryCode20
									WHEN '21' THEN CategoryCode21
									WHEN '22' THEN CategoryCode22
									WHEN '23' THEN CategoryCode23
									WHEN '24' THEN CategoryCode24
									WHEN '25' THEN CategoryCode25
									WHEN '26' THEN CategoryCode26
									WHEN '27' THEN CategoryCode27
									WHEN '28' THEN CategoryCode28
									WHEN '29' THEN CategoryCode29
									WHEN '30' THEN CategoryCode30
								END CASE
							INTO CompareValue
							FROM SYSIBM.SYSDUMMY1;
						END IF;
						
						/* ----------------AddressBookType---------------- */
						IF (RuleTypeHierarchy = 'AC' AND AddressBookType = 0) OR(RuleTypeHierarchy = 'CC' AND AddressBookType = 1) OR (RuleTypeHierarchy <> 'AC' AND RuleTypeHierarchy <>'CC') THEN
							
							SET CountVersion=( SELECT COUNT(1)
								FROM [SCDATA].FQ674230
								INNER JOIN [SCDATA].FQ674231
									ON RD$9INID = RH$9INID 
									AND	RDUKID = RHUKID
									AND RDKY = CompareValue
								WHERE
									RH$9INID = InstallationID AND									
									 RHUKID = RuleUniqueId);						
							
						END IF;
					----------------------------------------------
						
					END IF;
					
					/* ----------------------------------------------------------------------------
					 * Business Unit */
					IF RuleTypeHierarchy IN('BU') THEN
						SET CompareValue = BusinessUnit;
						
						SET CountVersion=( SELECT COUNT(1)
						FROM [SCDATA].FQ674230
						INNER JOIN [SCDATA].FQ674231
							ON RD$9INID = RH$9INID 
							AND	RDUKID = RHUKID
							AND RDMCU = CompareValue
						WHERE 
							RH$9INID = InstallationID AND
							RHUKID = RuleUniqueId);
					END IF;
					
					/* ----------------------------------------------------------------------------
					 * Address Number */
					IF RuleTypeHierarchy IN('AB','CS') THEN
						/* ----------------AddressBookType---------------- */
						IF (AddressBookType = 0) THEN
							SET CompareValue = 'AB';
						ELSEIF (AddressBookType = 1) THEN
							SET CompareValue = 'CS';
						END IF;
						/* ---------------------------------------------- */
						
						SET CountVersion= (SELECT COUNT(1)
						FROM [SCDATA].FQ674230 
						INNER JOIN [SCDATA].FQ674231
							ON RD$9INID = RH$9INID 
							AND	RDUKID = RHUKID
							AND RD$9AN8 = AddressNumber
						WHERE RHRUDTP = CompareValue AND
							  RH$9INID = InstallationID AND
							  RHUKID = RuleUniqueId);
					END IF;
				END IF;
			
				/* Return the P4210 Version */
				IF (CountVersion > 0  AND P4210Version <> '' AND P4210Version IS NOT NULL) THEN
					LEAVE WHILE_LOOP;
				ELSE
					SET P4210Version='';
				END IF;
				
				FETCH NEXT FROM RuleCursor into RuleUniqueId, RuleTypeHierarchy,P4210Version;
				
			END WHILE WHILE_LOOP;
			
			CLOSE RuleCursor;
		
		END IF;/* no rule values */
		OPEN FINALCURSOR;/* P4210 Version */
	END;
END
 ;
-- #desc					Set Default Bank Account.
-- #bl_class				Premier.Profile.BankAccount
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AddressNumber		AddressNumber
-- #param UniqueId			Unique Id

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_ExcSetBankAccountDefault
(
	IN AddressNumber	NUMERIC(8,0),
	IN UniqueId			DECIMAL(15,0)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_ExcSetBankAccountDefault
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN
	UPDATE 
		[SCDATA].FQ670030
	SET  
	    BA$9BADEF = '0'
	WHERE EXISTS (SELECT 1 FROM [SCDATA].F0030 WHERE AYUKID = BAUKID AND AYAN8 = AddressNumber);

	UPDATE 
		[SCDATA].FQ670030
	SET  
	    BA$9BADEF = '1'
	WHERE EXISTS (SELECT 1 FROM [SCDATA].F0030 WHERE AYUKID = BAUKID AND AYAN8 = AddressNumber AND AYUKID = UniqueId);

END;
-- #desc							Update Line Of Business Sequence
-- #bl_class						Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param LineOfBusinessIDs 		Line Of Business IDs

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_ExcUpdLOBSequence 
(
	LineOfBusinessIDs 		VARGRAPHIC(8000) CCSID 13488
)

LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_ExcUpdLOBSequence
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN 

	DECLARE Pos INTEGER DEFAULT 0;
	DECLARE SequenceNumb DECIMAL DEFAULT 0;
	DECLARE NextString VARCHAR(6);

	IF (LineOfBusinessIDs <> '') THEN
		SET Pos = POSSTR(LineOfBusinessIDs, '|@');
		WHILE_LOOP:
		WHILE ( Pos <> 0 ) DO
			SET NextString = substring(LineOfBusinessIDs, 1, Pos - 1);
			SET LineOfBusinessIDs = substring(LineOfBusinessIDs,Pos + 2,LENGTH(LineOfBusinessIDs));
			SET Pos = POSSTR(LineOfBusinessIDs,'|@');
			SET SequenceNumb = SequenceNumb + 1;

			UPDATE
				[SCDATA].FQ67103
			SET
				LBSEQ   = SequenceNumb
			WHERE
				UPPER(LTRIM(RTRIM(LB$9LOB))) = UPPER(LTRIM(RTRIM(NextString)));
		END WHILE WHILE_LOOP;
	END IF;
END ;
-- #desc				    Reads "How you heard about us" options.
-- #bl_class			    Premier.Profile.AboutUs
-- #db_dependencies		    N/A
-- #db_references		    N/A			

-- #param AboutUsID		    How you heard about us id

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAboutUs
(
  IN AboutUsID		varchar(3)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetAboutUs  
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
     SELECT A.HH$9HHA	AS AboutUsID,
            A.HHDSC1	AS Description,
            A.HH$9ESOM	AS AllowedOnESOM, 
            A.HH$9POSA	AS AllowedOnPOS, 
            A.HH$9WEBA	AS AllowedOnWEB, 
            A.HHPID		AS "PROGRAMID",    
            A.HHJOBN	AS WorkStationID,   
            A.HHUSER	AS "USERID",   
   			A.HHUPMJ	AS DateUpdated,   
   			A.HHUPMT	AS TimeLastUpdated
    FROM [SCDATA].FQ67102 A
    WHERE UPPER(LTRIM(RTRIM(A.HH$9HHA))) = UPPER(LTRIM(RTRIM(AboutUsID)))
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR2;
	
	CALL [SCLIBRARY].PRO_GetAboutUsLangs(AboutUsID, null);
END  ;
--DROP PROCEDURE [SCLIBRARY].PRO_GetAboutUsList
-- #desc				    Read how do hear about us list.
-- #bl_class			    Premier.Profile.AboutUsList.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AboutUsID			How you heard about us id
-- #param Description		How you heard about description
-- #param AllowedOnESOM		N/A
-- #param AllowedOnPOS		N/A
-- #param AllowedOnWEB		N/A
-- #param LangPref			N/A

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetAboutUsList
(
  IN AboutUsID		varchar(3),
  IN Description	varchar(30),
  IN AllowedOnESOM	NUMERIC(15,0),
  IN AllowedOnPOS	NUMERIC(15,0),
  IN AllowedOnWEB	NUMERIC(15,0),
  IN LangPref		varchar(2)
)  
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetAboutUsList  
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
     SELECT HHHED.HH$9HHA	AS AboutUsID,
            COALESCE(HHLNGHED.HHDSC1,HHHED.HHDSC1) AS Description,
            HHHED.HH$9ESOM	AS AllowedOnESOM, 
            HHHED.HH$9POSA	AS AllowedOnPOS, 
            HHHED.HH$9WEBA	AS AllowedOnWEB, 
            HHHED.HHPID		AS "PROGRAMID",    
            HHHED.HHJOBN	AS WorkStationID,   
            HHHED.HHUSER	AS "USERID",   
   			HHHED.HHUPMJ	AS DateUpdated,   
   			HHHED.HHUPMT	AS TimeLastUpdated
    FROM [SCDATA].FQ67102 HHHED
	LEFT JOIN [SCDATA].FQ67102L HHLNGHED
         ON HHLNGHED.HH$9HHA = HHHED.HH$9HHA
         AND HHLNGHED.HHLNGP = LangPref
    WHERE (AboutUsID = '*' OR HHHED.HH$9HHA LIKE '%' ||  AboutUsID || '%')
    AND (Description = '*' OR
		(HHLNGHED.HHDSC1 IS NULL AND UPPER(LTRIM(RTRIM(HHHED.HHDSC1))) LIKE '%' ||  UPPER(LTRIM(RTRIM(Description))) || '%') OR
		(HHLNGHED.HHDSC1 IS NOT NULL AND UPPER(LTRIM(RTRIM(HHLNGHED.HHDSC1))) LIKE '%' ||  UPPER(LTRIM(RTRIM(Description))) || '%'))
	AND (AllowedOnESOM = 2 OR HHHED.HH$9ESOM = AllowedOnESOM)
	AND (AllowedOnPOS = 2 OR HHHED.HH$9POSA = AllowedOnPOS)
	AND (AllowedOnWEB = 2 OR HHHED.HH$9WEBA = AllowedOnWEB)
    ORDER BY HHHED.HH$9HHA, Description
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;	
END    
 ;
-- #desc						Get Category Code value list for Customer/Consumer by Address number.
-- #bl_class					Premier.Profile.AddressBookCategoryCodeList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_GetAddressBookCatCodeList  
(
	IN AddressNumber		NUMERIC(15,0),
	IN AddressBookType		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetAddressBookCatCodeList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
            SELECT PRDTAI AS Code, PRKY AS Value
		         FROM [SCDATA].FQ670302 AS S, 
			     LATERAL(VALUES
                    ('$9AC01', PR$9AC01),('$9AC02', PR$9AC02),('$9AC03', PR$9AC03),('$9AC04', PR$9AC04),('$9AC05', PR$9AC05),('$9AC06', PR$9AC06),('$9AC07', PR$9AC07),('$9AC08', PR$9AC08),('$9AC09', PR$9AC09),('$9AC10', PR$9AC10),
				    ('$9AC11', PR$9AC11),('$9AC12', PR$9AC12),('$9AC13', PR$9AC13),('$9AC14', PR$9AC14),('$9AC15', PR$9AC15),('$9AC16', PR$9AC16),('$9AC17', PR$9AC17),('$9AC18', PR$9AC18),('$9AC19', PR$9AC19),('$9AC20', PR$9AC20),
                    ('$9AC21', PR$9AC21),('$9AC22', PR$9AC22),('$9AC23', PR$9AC23),('$9AC24', PR$9AC24),('$9AC25', PR$9AC25),('$9AC26', PR$9AC26),('$9AC27', PR$9AC27),('$9AC28', PR$9AC28),('$9AC29', PR$9AC29),('$9AC30', PR$9AC30)
                    ) AS T(PRDTAI, PRKY) 
            WHERE PR$9AN8 = AddressNumber
	FOR FETCH ONLY; --END CURSOR 1

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
             SELECT ABDTAI AS Code, ABKY AS Value
	        	FROM [SCDATA].F0101 AS S, 
				LATERAL(VALUES
                ('AC01', ABAC01),('AC02', ABAC02),('AC03', ABAC03),('AC04', ABAC04),('AC05', ABAC05),('AC06', ABAC06),('AC07', ABAC07),('AC08', ABAC08),	('AC09', ABAC09),('AC10', ABAC10),
				('AC11', ABAC11),('AC12', ABAC12),('AC13', ABAC13),('AC14', ABAC14),('AC15', ABAC15),('AC16', ABAC16),('AC17', ABAC17),('AC18', ABAC18),('AC19', ABAC19),('AC20', ABAC20),
                ('AC21', ABAC21),('AC22', ABAC22),('AC23', ABAC23),('AC24', ABAC24),('AC25', ABAC25),('AC26', ABAC26),('AC27', ABAC27),('AC28', ABAC28),('AC29', ABAC29),('AC30', ABAC30)) AS T(ABDTAI, ABKY)
             WHERE ABAN8 = AddressNumber
	FOR FETCH ONLY; --END CURSOR 2

	IF(AddressBookType = 1)THEN /*CONSUMER	*/
		OPEN TEMP_CURSOR1;
	ELSEIF(AddressBookType = 0 OR AddressBookType = 2)THEN /*CUSTOMER*/
		OPEN TEMP_CURSOR2; 					
	END IF;
END ;
-- #desc					Read Address Book record, read only info
-- #bl_class				Premier.Common.AddressBookInfo.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AddressNumber		AddressNumber

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetAddressBookInfo
(
	IN AddressNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetAddressBookInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			A.ABAN8	 AS AddressNumber,
			A.ABALPH AS AlphaName,
			A.ABAT1  AS SearchType,
			A.ABMCU  AS BranchPlant,
			A.ABTAXC AS PersonCorporateCode,
			B.ALADD1 AS AddressLine1, 
			B.ALADD2 AS AddressLine2, 
			B.ALCTY1 AS City,
			B.ALADDS AS State,
			B.ALADDZ AS ZipCode,
			B.ALCTR  AS Country
		FROM
			[SCDATA].F0101 A				-- Address Book Master
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.ABAN8, CurrentJulianDate)) B		-- Address Book Detail
			ON  B.ALAN8 = A.ABAN8
		WHERE 
			A.ABAN8 = AddressNumber -- AddressNumber filter	
	FOR FETCH ONLY;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
	OPEN TEMP_CURSOR1;

END
 ;
-- #desc					Read Address Book, read only info
-- #bl_class				Premier.Common.AddressBookList.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param InstallationID	Installation ID
-- #param AddressNumber		AddressNumber
-- #param AlphaName			Alpha Name.
-- #param SearchType		Search Type
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetAddressBookList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(15,0),
	IN AlphaName 		VARGRAPHIC(40) CCSID 13488,
	IN SearchType		GRAPHIC(3) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetAddressBookList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			WITH CTE AS (
				SELECT
					A.ABAN8		AS AddressNumber,
					A.ABALPH	AS AlphaName,
					A.ABAT1		AS SearchType,
					A.ABMCU		AS BranchPlant,
					A.ABTAXC	AS PersonCorporateCode,
					B.ALADD1	AS AddressLine1,
					B.ALADD2	AS AddressLine2,
					B.ALCTY1	AS City,
					B.ALADDS	AS State,
					B.ALADDZ	AS ZipCode,
					B.ALCTR		AS Country,
					ROW_NUMBER() OVER (ORDER BY A.ABAN8) AS RNUM
				FROM
					[SCDATA].F0101 A				-- Address Book Master
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (A.ABAN8, CurrentJulianDate)) B		-- Address Book Detail
					ON  B.ALAN8 = A.ABAN8
				WHERE 
					(AddressNumber = 0 OR A.ABAN8 = AddressNumber)-- AddressNumber filter
					AND	(AlphaName = '*' OR UPPER(A.ABALPH) LIKE '%' || AlphaName || '%')	 -- AlphaName filter
					AND (SearchType = '*' OR A.ABAT1 = SearchType) -- Search Type filter
			)

		SELECT 
			A.AddressNumber,
			A.AlphaName,
			A.SearchType,
			A.BranchPlant,
			A.PersonCorporateCode,
			A.AddressLine1,
			A.AddressLine2,
			A.City,
			A.State,
			A.ZipCode,
			A.Country,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY; --END CURSOR 2

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		OPEN TEMP_CURSOR2;
	END;
END;

-- #desc						Get Bank Account Info
-- #bl_class					Premier.Profile.BankAccountInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param SequenceNumber		SequenceNumber

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetBankAccountInfo
(
	IN SequenceNumber		DECIMAL(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetBankAccountInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	
		AY.AYUKID		AS UniqueId,
		AY.AYAN8		AS AddressNumber,
		AY.AYTNST		AS MaskedBankRouting,
		AY.AYCBNK		AS MaskedBankAccount,
		AY.AYBKTP		AS AccountType,
		AY.AYAID		AS AccountId,
		BA.BAADD1		AS AddressLine1,
		BA.BAADD2		AS AddressLine2,
		BA.BACTY1		AS City,
		BA.BACTR		AS Country,
		BA.BAADDS		AS State,
		BA.BAADDZ		AS ZipCode,
		BA.BA$9COMMT	AS Comment,
		BA.BA$9RTENC	AS EncryptedBankRouting,
		BA.BA$9BAENC	AS EncryptedBankAccount,
		AY.AYCKSV		AS CheckType,
		BA.BAGNNM		AS FirstName,
		BA.BASRNM		AS LastName,
		BA.BAALPH		AS CompanyName,
		CASE WHEN BA.BAALPH = N'' THEN '0' ELSE '1' END AS	ACHCheckType,
		BA.BA$9BADEF	AS IsDefault,
		AY.AYDL01		AS BankName
	FROM [SCDATA].F0030 AY
	INNER JOIN [SCDATA].FQ670030 BA
		ON BA.BAUKID = AY.AYUKID
	WHERE AY.AYUKID = SequenceNumber
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;

END;

-- #desc					Get Bank Accounts
-- #bl_class				Premier.Profile.BankAccounts.cs/BankAccountList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			StoreId
-- #param AddressNumber		AddressNumber
-- #param Type				Account Type
-- #param BankAccount		Bank Account
-- #param BankName			Bank Name
-- #param SortBy			Column to filter by
-- #param SortDir			Direction to filter (A = Ascendant, D = Descendant)
-- #param PageIndex			Page Index 
-- #param PageSize			Page Size 

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetBankAccounts
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN Type				GRAPHIC(1) CCSID 13488,
	IN BankAccount		VARGRAPHIC(20) CCSID 13488,
	IN BankName			VARGRAPHIC(30) CCSID 13488,
	IN SortBy			VARGRAPHIC(30) CCSID 13488,
	IN SortDir			GRAPHIC(1) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetBankAccounts
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN
	DECLARE SQL_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC	VARGRAPHIC(10000) CCSID 13488;
	DECLARE RowStart		INT;
	DECLARE RowEnd			INT;
	DECLARE SORT_DYNAMIC	VARGRAPHIC(60) CCSID 13488;
	DECLARE SORTDIR_DYNAMIC	VARGRAPHIC(20) CCSID 13488;

	DECLARE	BA_Type						GRAPHIC(1) CCSID 13488;
	DECLARE BAINID						GRAPHIC(3) CCSID 13488;
	DECLARE BankAccountTypeSetting		GRAPHIC(10) CCSID 13488;
	SET BankAccountTypeSetting = N'BA_TYPE';
	SET BAINID = StoreId;
	CALL [SCLIBRARY].CMM_GetConstantValue(BankAccountTypeSetting, BAINID, BA_Type);
	
	SET WHERE_DYNAMIC = N' ';
	
	/* Paging */ 
	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);

	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC;

		/* Dynamic sort direction statement */ 
		SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 
  
		/* Dynamic sort statement */ 
		SET SORT_DYNAMIC = CASE SortBy 
								WHEN 'BankAccount' THEN 'AY.AYCBNK'
								WHEN 'BankTransit' THEN 'AY.AYTNST'
								WHEN 'BankName' THEN 'UPPER(AY.AYDL01)'
								ELSE 'AY.AYCBNK'
							END ; 
		SET SORT_DYNAMIC = SORT_DYNAMIC || SORTDIR_DYNAMIC;
		
		IF (BankAccount <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AY.AYCBNK LIKE N''%'' || ? || ''%'' ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;

		IF (BankName <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(AY.AYDL01) LIKE N''%'' || ? || ''%'' ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;

		IF (Type = 'S') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AY.AYCKSV = N''1'' ';
		ELSEIF (Type = 'C') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AY.AYCKSV = N''0'' ';
		END IF;

		SET SQL_DYNAMIC = N' WITH BA AS (
			SELECT 
				AY.AYUKID		AS UniqueId,
				AY.AYAN8		AS AddressNumber,
				AY.AYTNST		AS MaskedBankRouting,
				AY.AYCBNK		AS MaskedBankAccount,
				AY.AYBKTP		AS AccountType,
				AY.AYAID		AS AccountId,
				BA.BAADD1		AS AddressLine1,
				BA.BAADD2		AS AddressLine2,
				BA.BACTY1		AS City,
				BA.BACTR		AS Country,
				BA.BAADDS		AS State,
				BA.BAADDZ		AS ZipCode,
				BA.BA$9COMMT	AS Comment,
				BA.BA$9RTENC	AS EncryptedBankRouting,
				BA.BA$9BAENC	AS EncryptedBankAccount,
				AY.AYCKSV		AS CheckType,
				BA.BAGNNM		AS FirstName,
				BA.BASRNM		AS LastName,
				BA.BA$9BADEF	AS IsDefault,
				AY.AYDL01		AS BankName,
				BA.BA$9DPT		AS Department,
				BA.BAALPH		AS CompanyName,
				CASE WHEN BA.BAALPH = N'''' THEN ''0'' ELSE ''1'' END AS	ACHCheckType,
				ROW_NUMBER() OVER (ORDER BY '|| SORT_DYNAMIC ||N') AS RNUM
			FROM [SCDATA].F0030 AY
			INNER JOIN [SCDATA].FQ670030 BA
				ON BAUKID = AYUKID 
			WHERE AYAN8 = ? 
				AND AYBKTP = ?
				'|| WHERE_DYNAMIC ||N'
		) 
		SELECT UniqueId, AddressNumber, MaskedBankRouting, MaskedBankAccount, AccountType, AccountId, AddressLine1, AddressLine2, 
			City, Country, State, ZipCode, Comment, EncryptedBankRouting, EncryptedBankAccount, CheckType, FirstName, LastName, 
			A.CompanyName, A.ACHCheckType, IsDefault, BankName, Department, (SELECT COUNT(1) FROM BA) AS TotalRowCount
		FROM BA A
		WHERE (( ? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ? )) ';

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
		OPEN TEMP_CURSOR1 USING AddressNumber, BA_Type, BankAccount, BankName,
							PageIndex, PageSize, RowStart, RowEnd;
	END;
END;
-- #desc						Get Bank Accounts Summary
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				StoreId
-- #param AddressNumber			AddressNumber

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetBankAccountsSummary
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetBankAccountsSummary
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT

BEGIN
	DECLARE BankAccountsCount		INT;
	DECLARE DefaultBankAccount		INT;

	DECLARE	BA_Type						GRAPHIC(1) CCSID 13488;
	DECLARE BAINID						GRAPHIC(3) CCSID 13488;
	DECLARE BankAccountTypeSetting		GRAPHIC(10) CCSID 13488;
	SET BankAccountTypeSetting = N'BA_TYPE';
	SET BAINID = StoreId;
	CALL [SCLIBRARY].CMM_GetConstantValue(BankAccountTypeSetting, BAINID, BA_Type);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			BankAccountsCount AS BankAccountCount,
			DefaultBankAccount AS DefaultBankAccount
		FROM SYSIBM.SYSDUMMY1;

		SELECT COUNT(1) INTO BankAccountsCount 
		FROM [SCDATA].F0030
		INNER JOIN [SCDATA].FQ670030
			ON AYUKID = BAUKID 
		WHERE AYAN8 = AddressNumber AND AYBKTP = BA_Type;

		SELECT AYUKID INTO DefaultBankAccount 
		FROM [SCDATA].F0030
		INNER JOIN [SCDATA].FQ670030
			ON AYUKID = BAUKID 
		WHERE AYAN8 = AddressNumber and BA$9BADEF = '1'
		FETCH FIRST 1 ROW ONLY;

		OPEN TEMP_CURSOR1;
	END;
END;
-- #desc				Read specific Policy or all the table info
-- #bl_class			Premier.Profile.CompanyPolicyList.cs / CompanyPolicyInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param PolicyId		ID for specific. * to retrieve all the table info.

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetCompanyPolicyList
(
	PolicyId NUMERIC(15,0)
)		
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetCompanyPolicyList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		P.RFPLY as PolicyId,
		P.RFCO as PolicyCompany,
		P.RFPLYN as PolicyName,
		P.RFPLYD as PolicyDescription
	FROM 
		[SCDATA].F03B25 P
	WHERE 
		PolicyId IS NULL OR LTRIM(RTRIM(P.RFPLY)) = PolicyId;
	
	OPEN TEMP_CURSOR;

END ;
-- #desc					Get Contact and Ext Information
-- #bl_class	 	 		Premier.Profile.ContactInfo
-- #db_dependencies		    N/A
-- #db_references		    N/A		

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetConsumerContactInfo
(
	AddressNumber NUMERIC(15,0),	
	ContactID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetConsumerContactInfo  
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	
	SELECT 
			PC$9AN8 AS AddressNumber,   
			PCIDLN AS ContactID,    
			PCMLNM AS MailingName,
			PCEMAL AS EmailAddress,
			COALESCE(AB$9CRS,0) AS IsCrossRefOn,--Default Off
			COALESCE(ABAURCH1,'') AS UserReservedChar, --Display Images
			AB$9EMYN AS EmailPreference
	FROM [SCDATA].FQ67303	--Contact
	LEFT OUTER JOIN [SCDATA].FQ67104 --Extended Information
	ON 
		PC$9AN8 = AB$9AN8 AND 
		PCIDLN = ABIDLN AND 
		AB$9TYP = 1
	WHERE	PC$9AN8 = AddressNumber AND 
			PCIDLN = ContactID
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;
END
 ;
-- #desc					Get Contact and Ext Information
-- #bl_class	 	 		Premier.Profile.ContactInfo
-- #db_dependencies		    N/A
-- #db_references		    N/A

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID



CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetCustomerContactInfo
(
	AddressNumber NUMERIC(15,0),	
	ContactID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetCustomerContactInfo  
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR		
	SELECT 
			WWAN8 AS AddressNumber, 
			WWIDLN AS ContactID,
			WWMLNM AS MailingName,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(WWAN8 ,WWIDLN,'E') AS EmailAddress,				
			COALESCE(AB$9CRS,0) AS IsCrossRefOn,--Default Off
			COALESCE(ABAURCH1,'') AS UserReservedChar, --Display Images
			COALESCE(AB$9EMYN,1) AS EmailPreference
	FROM [SCDATA].F0111 --Contact
	LEFT OUTER JOIN [SCDATA].FQ67104 --Extended Information
	ON 
		WWAN8 = AB$9AN8 AND 
		WWIDLN = ABIDLN AND 
		AB$9TYP = 0
	WHERE WWAN8 = AddressNumber 
	AND WWIDLN = ContactID			
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
END
 ;
-- #desc						Create line of business.
-- #bl_class					Premier.Profile.LineOfBusiness.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param LineOfBusinessID		Line of business 

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetLineOfBusiness
(
	LineOfBusinessID varchar(3)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetLineOfBusiness  
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.LB$9LOB 	LineOfBusinessID,
		A.LBDSC1	Description,	
		A.LBMCU		BranchPlant,	
		A.LB$9TYP	AddressBookType,  
		A.LBTAXC	PersonCorporationCode,    
		A.LBASN		AdjustmentSchedule,  
		A.LBCPGP	PriceGroup	,
		A.LBSEQ		SequenceNumber,   
		A.LBAC01	CategoryCode01,   
		A.LBAC02	CategoryCode02, 
		A.LBAC03	CategoryCode03,	
		A.LBAC04	CategoryCode04,	   
		A.LBAC05	CategoryCode05,	    
		A.LBAC06	CategoryCode06,	  
		A.LBAC07	CategoryCode07,	
		A.LBAC08	CategoryCode08,	   
		A.LBAC09	CategoryCode09,	    
		A.LBAC10	CategoryCode10,	  
		A.LBAC11	CategoryCode11,	
		A.LBAC12	CategoryCode12,	   
		A.LBAC13	CategoryCode13,	    
		A.LBAC14	CategoryCode14,	  
		A.LBAC15	CategoryCode15,	
		A.LBAC16	CategoryCode16,	   
		A.LBAC17	CategoryCode17,	    
		A.LBAC18	CategoryCode18,	  
		A.LBAC19	CategoryCode19,	
		A.LBAC20	CategoryCode20,	   
		A.LBAC21	CategoryCode21,	    
		A.LBAC22	CategoryCode22,	  
		A.LBAC23	CategoryCode23,	
		A.LBAC24	CategoryCode24,	   
		A.LBAC25	CategoryCode25,	    
		A.LBAC26	CategoryCode26,	  
		A.LBAC27	CategoryCode27,	
		A.LBAC28	CategoryCode28,	   
		A.LBAC29	CategoryCode29,	    
		A.LBAC30	CategoryCode30,	  
		A.LBPID		"PROGRAMID",	
		A.LBJOBN	WorkStationID,	   
		A.LBUSER	"USERID",	    
		A.LBUPMJ	DateUpdated	,	  
		A.LBUPMT	TimeLastUpdated	
	FROM 
		[SCDATA].FQ67103 A
	WHERE 
		A.LB$9LOB  = LineOfBusinessID
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR2;	
	
	CALL [SCLIBRARY].PRO_GetLineOfBusinessLangs(LineOfBusinessID, null);
END 
 ;
 -- #desc						Get the info for specific line of business
-- #bl_class					Premier.Profile.LineOfBusinessInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param LineOfBusinessID		Line of business 

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetLineOfBusinessInfo
(
	IN InstallationID varchar(3),
	IN LineOfBusinessID varchar(3),
	IN LangPref	varchar(2)			
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetLineOfBusinessInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	
 SELECT 
	A.LB$9LOB as LineOfBusinessID,    
	coalesce(C.LBDSC1,A.LBDSC1) AS Description,
	A.LBMCU as BranchPlant,
	A.LB$9TYP as AddressBookType
	
 FROM 
	[SCDATA].FQ671031 B --By Installation
    INNER JOIN [SCDATA].FQ67103 A --Master
		ON A.LB$9LOB  = B.LI$9LOB 
	LEFT JOIN [SCDATA].FQ67103L C --Language
         ON A.LB$9LOB = C.LB$9LOB
         AND C.LBLNGP = LangPref
WHERE 
	 (B.LI$9INID = InstallationID AND 
	  A.LB$9LOB = LineOfBusinessID)
	  	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END
 ;
-- #desc						Read line of business
-- #bl_class					Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param LineOfBusinessID		Line of business 
-- #param Description			Description

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetLineOfBusinessList
(
	LineOfBusinessID varchar(3),
	Description varchar(30),
	LangPref	varchar(2)	
)		
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetLineOfBusinessList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
	A.LB$9LOB AS LineOfBusinessID,    
	COALESCE(B.LBDSC1,A.LBDSC1) AS Description,
	A.LBMCU AS BranchPlant,
	A.LB$9TYP AS AddressBookType	
	FROM [SCDATA].FQ67103 A	
	LEFT JOIN [SCDATA].FQ67103L B
         ON A.LB$9LOB = B.LB$9LOB
         AND B.LBLNGP = LangPref		
	WHERE 
		(LineOfBusinessID = '*' OR UPPER(LTRIM(RTRIM(A.LB$9LOB))) =  UPPER(LTRIM(RTRIM(LineOfBusinessID)))) AND
		(Description = '*' OR
		(B.LBDSC1 IS NULL AND UPPER(LTRIM(RTRIM(A.LBDSC1)))  LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%' ) OR
		(B.LBDSC1 IS NOT NULL AND UPPER(LTRIM(RTRIM(B.LBDSC1))) LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%'))
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;	
END
	

  ;
-- #desc						Read line of business by installation.
-- #bl_class					Premier.Profile.LineOfBusinessValueListByInst.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		Installation Id
-- #param LineOfBusinessID		Line of business 
-- #param Description			Description
-- #param LangPref				Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetLOBListByInst
(
	InstallationID varchar(3),
	LineOfBusinessID varchar(3),
	Description varchar(30),
	LangPref	varchar(2)
)		
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetLOBListByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.LB$9LOB as LineOfBusinessID,    
		COALESCE(C.LBDSC1,A.LBDSC1) AS Description,
		A.LBMCU as BranchPlant,
		A.LB$9TYP as AddressBookType
	FROM 
		[SCDATA].FQ671031 B --By Installation
		INNER JOIN [SCDATA].FQ67103 A --Master
			ON A.LB$9LOB  = B.LI$9LOB
		LEFT JOIN [SCDATA].FQ67103L C --Language
			 ON A.LB$9LOB = C.LB$9LOB
			 AND C.LBLNGP = LangPref
	WHERE 
		B.LI$9INID = InstallationID AND
		(LineOfBusinessID = '*' OR UPPER(LTRIM(RTRIM(A.LB$9LOB))) LIKE '%' || UPPER(LTRIM(RTRIM(LineOfBusinessID))) || '%') AND
		(Description = '*' OR
		(C.LBDSC1 IS NULL AND UPPER(LTRIM(RTRIM(A.LBDSC1)))  LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%' ) OR
		(C.LBDSC1 IS NOT NULL AND UPPER(LTRIM(RTRIM(C.LBDSC1))) LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%'))
	ORDER BY LBSEQ
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;	
END
  ;
-- #desc					Read line of business list not related.
-- #bl_class				Premier.Profile.LineOfBusinessList.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param InstallationID	Installation Id
-- #param LineOfBusinessID	Line of business 
-- #param Description		Description
-- #param LangPref			Language Preference

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetLOBListNotRel
(
	InstallationID varchar(3),
	LineOfBusinessID varchar(3),
	Description varchar(30),
	LangPref	varchar(2)
)		
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetLOBListNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
 		A.LB$9LOB as LineOfBusinessID,    
		COALESCE(B.LBDSC1,A.LBDSC1) AS Description,
		A.LBMCU as BranchPlant,
		A.LB$9TYP as AddressBookType
	FROM  
		[SCDATA].FQ67103 A 
		LEFT JOIN [SCDATA].FQ67103L B
			 ON A.LB$9LOB = B.LB$9LOB
			 AND B.LBLNGP = LangPref		
	WHERE
		A.LB$9LOB NOT IN (SELECT LI$9LOB FROM [SCDATA].FQ671031 Z WHERE Z.LI$9INID = InstallationID) AND
		(LineOfBusinessID = '*' OR UPPER(LTRIM(RTRIM(A.LB$9LOB))) LIKE '%' ||  UPPER(LTRIM(RTRIM(LineOfBusinessID))) || '%') AND
		(Description = '*' OR
		(B.LBDSC1 IS NULL AND UPPER(LTRIM(RTRIM(A.LBDSC1)))  LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%' ) OR
		(B.LBDSC1 IS NOT NULL AND UPPER(LTRIM(RTRIM(B.LBDSC1))) LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%'))
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;	
END
 

	
	

   ;
-- #desc						Get Personalization Info
-- #bl_class					Premier.Profile.ProfilePersonalizationInformation.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param Company				Company ID
-- #param AddressBookType		Address Book Type
-- #param AddressNumber		    Address Number
-- #param ContactId		        Contact Id

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetPersonalizationInfo
(
	IN Company				VARCHAR(5),
	IN AddressBookType		NUMERIC(15,0),
	IN AddressNumber	 	NUMERIC(15,0),
	IN ContactId 		    DECIMAL(5,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetPersonalizationInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_TABLE
	(
		SearchType			VARCHAR(8),
		BusinessUnit		VARCHAR(12),
		Industry			VARCHAR(20),
		PersonCorpCode		VARCHAR(1),
		CategoryCode01		VARCHAR(3),
		CategoryCode02		VARCHAR(3),
		CategoryCode03		VARCHAR(3),
		CategoryCode04		VARCHAR(3),
		CategoryCode05		VARCHAR(3),
		CategoryCode06		VARCHAR(3),
		CategoryCode07		VARCHAR(3),
		CategoryCode08		VARCHAR(3),
		CategoryCode09		VARCHAR(3),
		CategoryCode10		VARCHAR(3),
		CategoryCode11		VARCHAR(3),
		CategoryCode12		VARCHAR(3),
		CategoryCode13		VARCHAR(3),
		CategoryCode14		VARCHAR(3),
		CategoryCode15		VARCHAR(3),
		CategoryCode16		VARCHAR(3),
		CategoryCode17		VARCHAR(3),
		CategoryCode18		VARCHAR(3),
		CategoryCode19		VARCHAR(3),
		CategoryCode20		VARCHAR(3),
		CategoryCode21		VARCHAR(3),
		CategoryCode22		VARCHAR(3),
		CategoryCode23		VARCHAR(3),
		CategoryCode24		VARCHAR(3),
		CategoryCode25		VARCHAR(3),
		CategoryCode26		VARCHAR(3),
		CategoryCode27		VARCHAR(3),
		CategoryCode28		VARCHAR(3),
		CategoryCode29		VARCHAR(3),
		CategoryCode30		VARCHAR(3),
		City				GRAPHIC(25) CCSID 13488,
		State				GRAPHIC(3) CCSID 13488,
		Country				GRAPHIC(3) CCSID 13488,
		County				GRAPHIC(25) CCSID 13488,
		Adjustment			VARCHAR(8),
		PriceGroup				VARCHAR(8),
		ABCCodes1			VARCHAR(2),
		ABCCodes2			VARCHAR(2),
		ABCCodes3			VARCHAR(2),	
        CompanyName         GRAPHIC(40) CCSID 13488,
		MailingName         GRAPHIC(40) CCSID 13488


	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN 	
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			SearchType,
			BusinessUnit,
			Industry,
			PersonCorpCode,
			CategoryCode01,
			CategoryCode02,
			CategoryCode03,
			CategoryCode04,
			CategoryCode05,
			CategoryCode06,
			CategoryCode07,
			CategoryCode08,
			CategoryCode09,
			CategoryCode10,
			CategoryCode11,
			CategoryCode12,
			CategoryCode13,
			CategoryCode14,
			CategoryCode15,
			CategoryCode16,
			CategoryCode17,
			CategoryCode18,
			CategoryCode19,
			CategoryCode20,
			CategoryCode21,
			CategoryCode22,
			CategoryCode23,
			CategoryCode24,
			CategoryCode25,
			CategoryCode26,
			CategoryCode27,
			CategoryCode28,
			CategoryCode29,
			CategoryCode30,
			City,
			State,
			Country,
			County,
			Adjustment,
			PriceGroup,
			ABCCodes1,
			ABCCodes2,
			ABCCodes3,
			CompanyName,
			MailingName
		FROM SESSION.TMP_TABLE;

		IF (AddressBookType = 0) THEN /*CUSTOMER	*/
		IF(ContactId = 0) THEN
			INSERT INTO SESSION.TMP_TABLE(SearchType,BusinessUnit,Industry,PersonCorpCode,CategoryCode01,CategoryCode02,CategoryCode03,CategoryCode04,CategoryCode05,CategoryCode06,	
						CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
						CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,
						CategoryCode29,CategoryCode30,City,State,Country,County,Adjustment,PriceGroup,ABCCodes1,ABCCodes2,ABCCodes3,CompanyName,MailingName)
				SELECT 
					AB.ABAT1,
					AB.ABMCU,
					AB.ABSIC,
					AB.ABTAXC,
					AB.ABAC01,	AB.ABAC02,	AB.ABAC03,	AB.ABAC04,	AB.ABAC05,
					AB.ABAC06,	AB.ABAC07,	AB.ABAC08,	AB.ABAC09,	AB.ABAC10,
					AB.ABAC11,	AB.ABAC12,	AB.ABAC13,	AB.ABAC14,	AB.ABAC15,
					AB.ABAC16,	AB.ABAC17,	AB.ABAC18,	AB.ABAC19,	AB.ABAC20,
					AB.ABAC21,	AB.ABAC22,	AB.ABAC23,	AB.ABAC24,	AB.ABAC25,
					AB.ABAC26,	AB.ABAC27,	AB.ABAC28,	AB.ABAC29,	AB.ABAC30,
					AL.ALCTY1,
					AL.ALADDS,
					AL.ALCTR,
					AL.ALCOUN,
					COALESCE(OVERRIDECOMPANY.AIASN, DEFAULTCOMPANY.AIASN),
					COALESCE(OVERRIDECOMPANY.AICPGP, DEFAULTCOMPANY.AICPGP),
					COALESCE(OVERRIDECOMPANY.AIABC1, DEFAULTCOMPANY.AIABC1),
					COALESCE(OVERRIDECOMPANY.AIABC2, DEFAULTCOMPANY.AIABC2),
					COALESCE(OVERRIDECOMPANY.AIABC3, DEFAULTCOMPANY.AIABC3),
					MN.WWMLNM,
				    MN.WWMLNM
				FROM [SCDATA].F0101 AB	/*Address Book Master*/
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	/*Address Book Join*/
					ON	AL.ALAN8 = AB.ABAN8
				LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY  /*Address Book Join Customer Master */                                                                                 
					ON	OVERRIDECOMPANY.AIAN8 = AB.ABAN8                                                                               
					AND OVERRIDECOMPANY.AICO = Company                                                                         				
				INNER JOIN [SCDATA].F03012 AS DEFAULTCOMPANY       /*Address Book Join Customer Master */
					ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
					AND DEFAULTCOMPANY.AICO = '00000'
			    INNER JOIN [SCDATA].F0111 AS MN       /*Mailing Name */
					ON	MN.WWAN8 = AB.ABAN8                                                                                
					AND MN.WWIDLN = ContactId
				WHERE 
					AB.ABAN8 = AddressNumber;
              ELSE
			  INSERT INTO SESSION.TMP_TABLE(SearchType,BusinessUnit,Industry,PersonCorpCode,CategoryCode01,CategoryCode02,CategoryCode03,CategoryCode04,CategoryCode05,CategoryCode06,	
						CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
						CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,
						CategoryCode29,CategoryCode30,City,State,Country,County,Adjustment,PriceGroup,ABCCodes1,ABCCodes2,ABCCodes3,CompanyName,MailingName)
				SELECT 
					AB.ABAT1,
					AB.ABMCU,
					AB.ABSIC,
					AB.ABTAXC,
					AB.ABAC01,	AB.ABAC02,	AB.ABAC03,	AB.ABAC04,	AB.ABAC05,
					AB.ABAC06,	AB.ABAC07,	AB.ABAC08,	AB.ABAC09,	AB.ABAC10,
					AB.ABAC11,	AB.ABAC12,	AB.ABAC13,	AB.ABAC14,	AB.ABAC15,
					AB.ABAC16,	AB.ABAC17,	AB.ABAC18,	AB.ABAC19,	AB.ABAC20,
					AB.ABAC21,	AB.ABAC22,	AB.ABAC23,	AB.ABAC24,	AB.ABAC25,
					AB.ABAC26,	AB.ABAC27,	AB.ABAC28,	AB.ABAC29,	AB.ABAC30,
					AL.ALCTY1,
					AL.ALADDS,
					AL.ALCTR,
					AL.ALCOUN,
					COALESCE(OVERRIDECOMPANY.AIASN, DEFAULTCOMPANY.AIASN),
					COALESCE(OVERRIDECOMPANY.AICPGP, DEFAULTCOMPANY.AICPGP),
					COALESCE(OVERRIDECOMPANY.AIABC1, DEFAULTCOMPANY.AIABC1),
					COALESCE(OVERRIDECOMPANY.AIABC2, DEFAULTCOMPANY.AIABC2),
					COALESCE(OVERRIDECOMPANY.AIABC3, DEFAULTCOMPANY.AIABC3),
					CN.WWMLNM,
				    MN.WWMLNM
				FROM [SCDATA].F0101 AB	/*Address Book Master*/
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	/*Address Book Join*/
					ON	AL.ALAN8 = AB.ABAN8
				LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY  /*Address Book Join Customer Master */                                                                                 
					ON	OVERRIDECOMPANY.AIAN8 = AB.ABAN8                                                                               
					AND OVERRIDECOMPANY.AICO = Company                                                                         				
				INNER JOIN [SCDATA].F03012 AS DEFAULTCOMPANY       /*Address Book Join Customer Master */
					ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
					AND DEFAULTCOMPANY.AICO = '00000'
				INNER JOIN [SCDATA].F0111 AS CN       /*Company Name */
					ON	CN.WWAN8 = AB.ABAN8                                                                                
					AND CN.WWIDLN = 0
			    INNER JOIN [SCDATA].F0111 AS MN       /*Mailing Name */
					ON	MN.WWAN8 = AB.ABAN8                                                                                
					AND MN.WWIDLN = ContactId
				WHERE 
					AB.ABAN8 = AddressNumber;
			  END IF;
		ELSEIF (AddressBookType = 1) THEN /*CONSUMER*/
			IF(ContactId = 0)THEN
			INSERT INTO SESSION.TMP_TABLE(SearchType,BusinessUnit,Industry,PersonCorpCode,CategoryCode01,CategoryCode02,CategoryCode03,CategoryCode04,CategoryCode05,CategoryCode06,	
						CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
						CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,
						CategoryCode29,CategoryCode30,City,State,Country,County,Adjustment,PriceGroup,ABCCodes1,ABCCodes2,ABCCodes3,CompanyName,MailingName)
				SELECT 
					CM.PR$9AT1,
					CM.PRMCU,
					' ',
					CM.PRTAXC,
					CM.PR$9AC01,	CM.PR$9AC02,	CM.PR$9AC03,	CM.PR$9AC04,	CM.PR$9AC05,
					CM.PR$9AC06,	CM.PR$9AC07,	CM.PR$9AC08,	CM.PR$9AC09,	CM.PR$9AC10,
					CM.PR$9AC11,	CM.PR$9AC12,	CM.PR$9AC13,	CM.PR$9AC14,	CM.PR$9AC15,
					CM.PR$9AC16,	CM.PR$9AC17,	CM.PR$9AC18,	CM.PR$9AC19,	CM.PR$9AC20,
					CM.PR$9AC21,	CM.PR$9AC22,	CM.PR$9AC23,	CM.PR$9AC24,	CM.PR$9AC25,
					CM.PR$9AC26,	CM.PR$9AC27,	CM.PR$9AC28,	CM.PR$9AC29,	CM.PR$9AC30,
					CM.PRCTY1,
					CM.PRADDS,
					CM.PRCTR,
					CM.PRCOUN,
					CM.PRASN,
					CM.PRCPGP,
					' ',
					' ',
					' ',
					MNC.PCMLNM,
				    MNC.PCMLNM
				FROM [SCDATA].FQ670302 CM
			    INNER JOIN [SCDATA].FQ67303 AS MNC      /*Mailing Name */
					ON	MNC.PC$9AN8 = CM.PR$9AN8                                                                                
					AND MNC.PCIDLN = ContactId
				WHERE 
					CM.PR$9AN8 = AddressNumber;

			ELSE
			INSERT INTO SESSION.TMP_TABLE(SearchType,BusinessUnit,Industry,PersonCorpCode,CategoryCode01,CategoryCode02,CategoryCode03,CategoryCode04,CategoryCode05,CategoryCode06,	
						CategoryCode07,CategoryCode08,CategoryCode09,CategoryCode10,CategoryCode11,CategoryCode12,CategoryCode13,CategoryCode14,CategoryCode15,CategoryCode16,CategoryCode17,
						CategoryCode18,CategoryCode19,CategoryCode20,CategoryCode21,CategoryCode22,CategoryCode23,CategoryCode24,CategoryCode25,CategoryCode26,CategoryCode27,CategoryCode28,
						CategoryCode29,CategoryCode30,City,State,Country,County,Adjustment,PriceGroup,ABCCodes1,ABCCodes2,ABCCodes3,CompanyName,MailingName)
				SELECT 
					CM.PR$9AT1,
					CM.PRMCU,
					' ',
					CM.PRTAXC,
					CM.PR$9AC01,	CM.PR$9AC02,	CM.PR$9AC03,	CM.PR$9AC04,	CM.PR$9AC05,
					CM.PR$9AC06,	CM.PR$9AC07,	CM.PR$9AC08,	CM.PR$9AC09,	CM.PR$9AC10,
					CM.PR$9AC11,	CM.PR$9AC12,	CM.PR$9AC13,	CM.PR$9AC14,	CM.PR$9AC15,
					CM.PR$9AC16,	CM.PR$9AC17,	CM.PR$9AC18,	CM.PR$9AC19,	CM.PR$9AC20,
					CM.PR$9AC21,	CM.PR$9AC22,	CM.PR$9AC23,	CM.PR$9AC24,	CM.PR$9AC25,
					CM.PR$9AC26,	CM.PR$9AC27,	CM.PR$9AC28,	CM.PR$9AC29,	CM.PR$9AC30,
					CM.PRCTY1,
					CM.PRADDS,
					CM.PRCTR,
					CM.PRCOUN,
					CM.PRASN,
					CM.PRCPGP,
					' ',
					' ',
					' ',
					CNC.PCMLNM,
				    MNC.PCMLNM 
				FROM [SCDATA].FQ670302 CM
			    INNER JOIN [SCDATA].FQ67303 AS CNC      /*Company Name */
					ON	CNC.PC$9AN8 = CM.PR$9AN8                                                                                
					AND CNC.PCIDLN = 0
			    INNER JOIN [SCDATA].FQ67303 AS MNC      /*Mailing Name */
					ON	MNC.PC$9AN8 = CM.PR$9AN8                                                                                
					AND MNC.PCIDLN = ContactId
				WHERE 
					CM.PR$9AN8 = AddressNumber;
			END IF;
		END IF;
 		
	OPEN TEMP_CURSOR1;
	END;
END;


-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param AddressNumber 		Address number to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetProfileListByAddressNo
(
	AddressNumber 		NUMERIC(15,0),
	AddressBookType 	INT,
	PageIndex			INT,
	PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetProfileListByAddressNo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	-------------------------------------------------------
	-- Define the table to do the filtering and paging
	-------------------------------------------------------
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN

		DECLARE TMP_PROCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS(
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,  
				A.CCCTY1	AS City,   
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,				 
				AI.AICUSTS	AS Status,   
				AI.AIBADT	AS BillingAddressType
			FROM [SCDATA].FQ670312 A
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 0 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7			
			INNER JOIN [SCDATA].F03012 AI /*INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8	 
				AND AI.AICO = '00000'		 						
			UNION ALL
			SELECT
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,							 
				C.PR$9STS	AS Status,   
				C.PRBADT	AS BillingAddressType
			FROM [SCDATA].FQ670312 A
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 1 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7			
			INNER JOIN [SCDATA].FQ670302 C	 /*CONSUMER MASTER */
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,
				A.MailingName,				
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,				
				A.Status,   
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,				
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,				
			A.Status,   
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;	

		DECLARE TMP_PROCUR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS(
			SELECT 
				A.CC$9AN8	AS AddressNumber,    
				A.CC$9TYP	AS AddressType,    
				A.CCLNID	AS ContactID,    
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName,   
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,    
				A.CCCTY1	AS City,     
				A.CCADDS	AS State,    
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,				 
				AI.AICUSTS	AS Status,   
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM [SCDATA].FQ670312 A
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 0 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7			
			INNER JOIN [SCDATA].F03012 AI /*INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,				
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,				
			A.Status,   
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;	
		
		DECLARE TMP_PROCUR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS(
			SELECT
				A.CC$9AN8	AS AddressNumber,     
				A.CC$9TYP	AS AddressType,     
				A.CCLNID	AS ContactID,     
				A.CC$9PA8	AS ParentAddressNumber,  
				A.CCALPH	AS AlphaName,    
				A.CCMLNM	AS MailingName,			 
				A.CCADD1	AS AddressLine1,     
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,     
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,							 
				C.PR$9STS	AS Status,   
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM [SCDATA].FQ670312 A
			INNER JOIN (
				SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
				FROM [SCDATA].FQ670312 D
				WHERE D.CC$9AN8 = AddressNumber 
				GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
			) AS B
				ON A.CC$9AN8 = B.CC$9AN8 
				AND A.CC$9TYP = 1 
				AND A.CCLNID = B.CCLNID 
				AND A.CCRCK7 = B.CCRCK7			
			INNER JOIN [SCDATA].FQ670302 C	 /*CONSUMER MASTER */
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,				
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,				
			A.Status,   
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;	

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		IF(AddressBookType = 9) THEN		/* NotUsed */
			OPEN TMP_PROCUR1;
		ELSEIF(AddressBookType = 0) THEN	/* CUSTOMER */
			OPEN TMP_PROCUR2;
		ELSEIF (AddressBookType = 1) THEN	/* CONSUMER */
			OPEN TMP_PROCUR3;
		END IF;
	
	END;
	
END

 ;
-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AlternateAddressKey	N/A
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetProfileListByAltAddKey
(
	AlternateAddressKey	VARGRAPHIC(20) CCSID 13488,
	AddressBookType 	INT,
	PageIndex			INT,
	PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetProfileListByAltAddKey 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	-------------------------------------------------------
	-- Define the table to do the filtering and paging
	-------------------------------------------------------
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN

		/* AddressBookType = 9 NotUsed */
		DECLARE TMP_PROCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,   	
  				A.CCADD1	AS AddressLine1,
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,  		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	 -- INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER 
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,   
				A.CCMLNM	AS MailingName,   	   
  				A.CCADD1	AS AddressLine1,
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,  		  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName, 
				A.MailingName,	
				A.AddressLine1, 
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		
				A.Status,  
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID) AS RNUM
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,	
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,  
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;	
	
		/* AddressBookType = 0 CUSTOMER */
		DECLARE TMP_PROCUR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,
				A.CC$9TYP	AS AddressType,
				A.CCLNID	AS ContactID,
  				A.CC$9PA8	AS ParentAddressNumber,
  				A.CCALPH	AS AlphaName,
				A.CCMLNM	AS MailingName,
  				A.CCADD1	AS AddressLine1,
				A.CCCTY1	AS City,
				A.CCADDS	AS State,
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	 -- INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER 
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,	
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,  
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;	


		/* AddressBookType = 1 CONSUMER */
		DECLARE TMP_PROCUR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber, 
				A.CC$9TYP	AS AddressType, 
				A.CCLNID	AS ContactID, 
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,   
  				A.CCADD1	AS AddressLine1,
				A.CCCTY1	AS City,  
				A.CCADDS	AS State, 
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE D.CCALKY LIKE '%' || AlternateAddressKey || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,	
			A.AddressLine1, 
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,  
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;	


		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
	
		IF(AddressBookType = 9) THEN		/* NotUsed */
			OPEN TMP_PROCUR1;
		ELSEIF(AddressBookType = 0) THEN	/* CUSTOMER */
			OPEN TMP_PROCUR2;
		ELSEIF (AddressBookType = 1) THEN	/* CONSUMER */
			OPEN TMP_PROCUR3;
		END IF;

	END;
	
END;


-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param Email					Email to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetProfileListByEmail
(
	Email				VARGRAPHIC(256) CCSID 13488,
	AddressBookType 	INT,
	PageIndex			INT,
	PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetProfileListByEmail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	-------------------------------------------------------
	-- Define the table to do the filtering and paging
	-------------------------------------------------------
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN

		DECLARE TMP_PROCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || EMAIL || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || EMAIL || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName,
				A.MailingName,			
				A.AddressLine1,   
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,			
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID ) AS RNUM 
			FROM CTE A
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		DECLARE TMP_PROCUR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || EMAIL || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		
		DECLARE TMP_PROCUR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName, 
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			  		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM 
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCEMAL) LIKE '%' || EMAIL || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName,
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;


		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		IF(AddressBookType = 9) THEN		/* NotUsed */
			OPEN TMP_PROCUR1;
		ELSEIF(AddressBookType = 0) THEN	/* CUSTOMER */
			OPEN TMP_PROCUR2;
		ELSEIF (AddressBookType = 1) THEN	/* CONSUMER */
			OPEN TMP_PROCUR3;
		END IF;
	
	END;
	
END;
-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param AlphaName				Alpha name to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index


CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetProfileListByName
(
	AlphaName			VARGRAPHIC(40) CCSID 13488,
	AddressBookType 	INT,
	PageIndex			INT,
	PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetProfileListByName 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN
	
		DECLARE TMP_PROCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
				INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName, 
				A.MailingName,			
				A.AddressLine1,   
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,			
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID ) AS RNUM 
			FROM CTE A 
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		DECLARE TMP_PROCUR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;


		DECLARE TMP_PROCUR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
				INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCALPH) LIKE '%' || AlphaName || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;
			
		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		IF(AddressBookType = 9) THEN		/* NotUsed */
			OPEN TMP_PROCUR1;
		ELSEIF(AddressBookType = 0) THEN	/* CUSTOMER */
			OPEN TMP_PROCUR2;
		ELSEIF (AddressBookType = 1) THEN	/* CONSUMER */
			OPEN TMP_PROCUR3;
		END IF;
	
	END;
	
END;
-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param PhoneNumber			Phone Number to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetProfileListByPhoneNo
(
	PhoneNumber			VARGRAPHIC(20) CCSID 13488,
	AddressBookType 	INT,
	PageIndex			INT,
	PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetProfileListByPhoneNo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN
	
		DECLARE TMP_PROCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,   
				A.CC$9TYP	AS AddressType,   
				A.CCLNID	AS ContactID,   
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,   
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,      
				A.CCADDS	AS State,   
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 	
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType		
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName, 
				A.MailingName,			
				A.AddressLine1,   
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,			
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID ) AS RNUM 
			FROM CTE A 
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		DECLARE TMP_PROCUR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		DECLARE TMP_PROCUR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber,  
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,			   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,			 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCPH1) LIKE '%' || PhoneNumber || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,			
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,			
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		IF(AddressBookType = 9) THEN		/* NotUsed */
			OPEN TMP_PROCUR1;
		ELSEIF(AddressBookType = 0) THEN	/* CUSTOMER */
			OPEN TMP_PROCUR2;
		ELSEIF (AddressBookType = 1) THEN	/* CONSUMER */
			OPEN TMP_PROCUR3;
		END IF;
	
	END;
	
END

 ;
-- #desc						Gets Customer/Consumer Search information
-- #bl_class					Premier.Profile.ProfileList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param ZipCode				Zip Code to search for
-- #param AddressBookType		Address Book Type
-- #param PageSize				Page Size
-- #param PageIndex				Page Index

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetProfileListByZipCode
(
	ZipCode				VARGRAPHIC(12) CCSID 13488,
	AddressBookType 	INT,
	PageIndex			INT,
	PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetProfileListByZipCode 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN

		DECLARE TMP_PROCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,	  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCADDZ) LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
			UNION ALL
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,	   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCADDZ) LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		), PAGING AS (
			SELECT 
				A.AddressNumber, 
				A.AddressType, 
				A.ContactID, 
				A.ParentAddressNumber, 
				A.AlphaName, 
				A.MailingName,	
				A.AddressLine1,   
				A.City,  
				A.State, 
				A.ZipCode,
				A.AreaCode,
				A.PhoneNumber,
				A.Email,		
				A.Status,
				A.BillingAddressType,
				ROW_NUMBER() OVER  (ORDER BY A.AddressType, A.AddressNumber, A.ContactID ) AS RNUM 
			FROM CTE A 
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,	
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

	
		DECLARE TMP_PROCUR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT   
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,	  
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		
				AI.AICUSTS	AS Status,
				AI.AIBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCADDZ) LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 0 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7	
			INNER JOIN [SCDATA].F03012 AI	/* INNER JOIN TO CUSTOMER MASTER TABLE TO ENSURE THAT RECORD IS A VALID CUSTOMER */
				ON AI.AIAN8 = A.CC$9AN8
				AND AI.AICO = '00000'
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,	
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

	
		DECLARE TMP_PROCUR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				A.CC$9AN8	AS AddressNumber,  
				A.CC$9TYP	AS AddressType,  
				A.CCLNID	AS ContactID,  
  				A.CC$9PA8	AS ParentAddressNumber, 
  				A.CCALPH	AS AlphaName,  
				A.CCMLNM	AS MailingName,	   
  				A.CCADD1	AS AddressLine1,   
				A.CCCTY1	AS City,    
				A.CCADDS	AS State,  
				A.CCADDZ	AS ZipCode,
				A.CCAR1		AS AreaCode,
				A.CCPH1		AS PhoneNumber,
				A.CCEMAL	AS Email,		 		
  				C.PR$9STS	AS Status,
				C.PRBADT	AS BillingAddressType,
				ROW_NUMBER() OVER (ORDER BY A.CC$9AN8, A.CCLNID) AS RNUM
			FROM  [SCDATA].FQ670312 A 
			INNER JOIN (
					SELECT D.CC$9AN8, D.CC$9TYP, D.CCLNID, MIN(D.CCRCK7) AS CCRCK7
					FROM [SCDATA].FQ670312 D
					WHERE UPPER(D.CCADDZ) LIKE '%' || ZipCode || '%'
					GROUP BY D.CC$9AN8, D.CC$9TYP, D.CCLNID
				) AS B
					ON A.CC$9AN8 = B.CC$9AN8 
					AND A.CC$9TYP = 1 
					AND A.CCLNID = B.CCLNID 
					AND A.CCRCK7 = B.CCRCK7		
			INNER JOIN [SCDATA].FQ670302 C	--CONSUMER MASTER		
				ON C.PR$9AN8 = A.CC$9AN8
		)
		SELECT 
			A.AddressNumber, 
			A.AddressType, 
			A.ContactID, 
			A.ParentAddressNumber, 
			A.AlphaName, 
			A.MailingName,	
			A.AddressLine1,   
			A.City,  
			A.State, 
			A.ZipCode,
			A.AreaCode,
			A.PhoneNumber,
			A.Email,		
			A.Status,
			A.BillingAddressType,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

	
		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		IF(AddressBookType = 9) THEN		/* NotUsed */
			OPEN TMP_PROCUR1;
		ELSEIF(AddressBookType = 0) THEN	/* CUSTOMER */
			OPEN TMP_PROCUR2;
		ELSEIF (AddressBookType = 1) THEN	/* CONSUMER */
			OPEN TMP_PROCUR3;
		END IF;
	
	END;
	
END

 ;
-- #desc					Read Tax Rate Area.
-- #bl_class				Premier.Profile.TaxRateAreaList.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param TaxRateAreaCode	Tax Area Code.

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_GetTaxRateAreaList 
(
	TaxRateAreaCode varchar(10)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_GetTaxRateAreaList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		RTRIM(TATXA1) as TaxRateAreaCode ,  
		TATAXA as Description 
	FROM 
		[SCDATA].F4008  
	WHERE 
		(TATXA1 = TaxRateAreaCode or TaxRateAreaCode is null or TaxRateAreaCode = '*')
	ORDER BY TATXA1 ASC
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;	
END ;
-- #desc					Search existing web account
-- #bl_class				Premier.Profile.RequestAccessValidationCommand.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AddressNumber 	Address number to search for
-- #param Email				Email Address	


CREATE OR REPLACE Procedure [SCLIBRARY].PRO_RequestAccessEmail
(
	IN AddressNumber NUMERIC(15,0),
	IN Email VARCHAR(50)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].PRO_RequestAccessEmail
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	--Read Customer Information
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			EAAN8 AS AddressNumber ,
			EAIDLN AS ContactId ,
			EAEMAL AS Address
		FROM [SCDATA].F01151 /* Address Book Master*/
		WHERE
			EAAN8 = AddressNumber AND EAEMAL = Email AND EAETP = 'E'
			FOR FETCH ONLY
			OPTIMIZE FOR 1 ROW;

	OPEN TEMP_CURSOR;
END;
-- #desc					Search existing web account
-- #bl_class				Premier.Profile.RequestAccessValidationCommand.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AddressNumber 	Address number to search for
-- #param InvoiceNumber		Invoice Number	

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_RequestAccessValidation
(
	IN AddressNumber NUMERIC(15,0),
	IN InvoiceNumber NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].PRO_RequestAccessValidation
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	--Read Customer Information
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		AIAN8 AS CustomerNumber
	FROM [SCDATA].F03012 AI
		INNER JOIN [SCDATA].F03B11
		ON AIAN8 = RPAN8
	WHERE
		AIAN8 = AddressNumber AND RPDOC = InvoiceNumber AND AI . AICUSTS <> '1' AND AICO = '00000'
	FOR FETCH ONLY
	OPTIMIZE FOR 1 ROW;

	OPEN TEMP_CURSOR ;
END;
-- #desc					Search existing web account
-- #bl_class				Premier.Profile.SearchWebAccountCommand.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param nstallationID		Installation id
-- #param AddressNumber 	Address number to search for
-- #param AddressType		Address Type 		
-- #param ContactId 		Contact Id

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_SearchWebAccount
(
	InstallationID	varchar(3),
	AddressNumber	NUMERIC(15,0),
	AddressType		NUMERIC(15,0),
	ContactId		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_SearchWebAccount 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT COUNT(*)		
	FROM 
		[SCDATA].FQ67101 AS A
	INNER JOIN [SCDATA].FQ67996 B	--Installation By User
		ON A.WA$9USER = B.UI$9USER
		AND B.UI$9INID = InstallationID
	WHERE 
		A.WA$9AN8 = AddressNumber AND
		A.WA$9TYP = AddressType AND 
		A.WAIDLN = ContactId 
    FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;	
END
 ;
-- #desc					Update AboutUs.
-- #bl_class				Premier.Profile.AboutUs.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AboutUsID			AboutUsID

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_UpdAboutUs 
(
	IN AboutUsID		VARCHAR(3),
	IN Description		VARGRAPHIC(30) CCSID 13488,
	IN AllowedOnESOM	NUMERIC(15,0),
	IN AllowedOnPOS		NUMERIC(15,0),
	IN AllowedOnWEB		NUMERIC(15,0),
	IN "PROGRAMID"		VARCHAR(10),
	IN WorkStationID	VARCHAR(10),
	IN "USERID"			VARCHAR(10),
	IN DateUpdated		NUMERIC(15,0),
	IN TimeLastUpdated	NUMERIC(15,0)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_UpdAboutUs
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
	UPDATE 
		[SCDATA].FQ67102
	SET  
	    HHDSC1 		= Description,
        HH$9ESOM	= AllowedOnESOM, 
        HH$9POSA	= AllowedOnPOS, 
        HH$9WEBA	= AllowedOnWEB, 
		HHPID		= "PROGRAMID",    
        HHJOBN		= WorkStationID,   
        HHUSER		= "USERID",   
		HHUPMJ		= DateUpdated,   
		HHUPMT		= TimeLastUpdated
	WHERE 
		HH$9HHA = AboutUsID;
END	  ;
-- #desc					Update line of business Lang
-- #bl_class				Premier.Profile.AboutUsLang.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param AboutUsID			AboutUsLangID
-- #param LangPref			Language Preference
-- #param Description		Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_UpdAboutUsLang 
(
	IN AboutUsID	VARCHAR(3),
	IN LangPref		VARCHAR(2),
	IN Description	VARGRAPHIC(30) CCSID 13488
)	
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_UpdAboutUsLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN 
	UPDATE 
		  [SCDATA].FQ67102L
	  SET HHDSC1  =	 Description
	WHERE 
		  HH$9HHA  =  AboutUsID AND
	      HHLNGP   =  LangPref;
END ;
-- #desc						Update Allowed Ship To's For a Web Account
-- #bl_class					Premier.Profile.UpdateAllowedShiptoCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A			

-- #param StoreId				Store Id	
-- #param WebAccountId			Web Account Id	
-- #param AddressType			Address Book Type	
-- #param SelectedShipTosXML	XML with Selected Ship To's List
-- #param DeselectedShipTosXML	XML with Deselected Ship To's List

-- #param UserReservedNumber	User Reserved Number	
-- #param UserReservedAmount	User Reserved Amount	
-- #param UserReservedCode		User Reserved Code		
-- #param UserReservedDate		User Reserved Date		
-- #param UserReservedReference User Reserved Reference
-- #param UserID				User Id
-- #param ProgramID				Program Id
-- #param WorkStationID			WorkStation ID		
-- #param DateUpdated			Date Updated			
-- #param TimeLastUpdated		Time Last Updated

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_UpdAllowedShipto  
(
		StoreId					GRAPHIC(3) CCSID 13488,
		WebAccountId			NUMERIC(15,0),
		AddressNumber			NUMERIC(15,0),
		AddressType				NUMERIC(15,0),
		SelectedShipTosXML		XML,
		DeselectedShipTosXML	XML,		
		UserReservedNumber		NUMERIC(8, 0),
		UserReservedAmount		NUMERIC(15,0),
		UserReservedCode		GRAPHIC(2) CCSID 13488,
		UserReservedDate		NUMERIC(15,0),
		UserReservedReference	GRAPHIC(15) CCSID 13488,
		UserID					GRAPHIC(10) CCSID 13488,
		ProgramID				GRAPHIC(10) CCSID 13488,
		WorkStationID			GRAPHIC(10) CCSID 13488,
		DateUpdated				NUMERIC(6, 0),
		TimeLastUpdated			NUMERIC(15,0)
)
	DYNAMIC RESULT SETS 0 
	LANGUAGE SQL 
	SPECIFIC [SCLIBRARY].PRO_UpdAllowedShipto 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	BEGIN
		 -- Declare a handler to catch any exceptions and rollback
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
		    -- Rollback transaction
		    ROLLBACK;
		    -- Signal the error
		    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Transaction failed due to an error';
		END;

		-- Declare savepoint for rollback
		SAVEPOINT sp_begin ON ROLLBACK RETAIN CURSORS;

		-- Declare temporary tables for XML data
		DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLSELECTEDSHIPTONUMBERSTABLE (
		ShipToNumber		DECIMAL
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

		DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLDESELECTEDSHIPTONUMBERSTABLE (
		ShipToNumber		DECIMAL
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

		-- Delete Deselected Ship To's
		IF (DeselectedShipTosXML IS NOT NULL) THEN

			INSERT INTO SESSION.XMLDESELECTEDSHIPTONUMBERSTABLE (ShipToNumber)
			SELECT 
				items.ShipToNumber
				FROM XMLTABLE ('$d/items/item'
				PASSING DeselectedShipTosXML AS "d"
				COLUMNS ShipToNumber DECIMAL PATH 'text()') AS items;

			DELETE FROM [SCDATA].FQ67101S S
			WHERE  S.WS$9INID = StoreId AND S.WS$9WAN8 = WebAccountId AND S.WS$9AN8 = AddressNumber 
				  AND EXISTS (
					SELECT 1 
					FROM SESSION.XMLDESELECTEDSHIPTONUMBERSTABLE X
					WHERE X.ShipToNumber = S.WS$9SHAN
			);

		END IF;

		-- Insert Selected Ship To's
		IF (SelectedShipTosXML IS NOT NULL) THEN
			INSERT INTO SESSION.XMLSELECTEDSHIPTONUMBERSTABLE (ShipToNumber)
			SELECT 
				items.ShipToNumber
				FROM XMLTABLE ('$d/items/item'
				PASSING SelectedShipTosXML AS "d"
				COLUMNS ShipToNumber DECIMAL PATH 'text()') AS items;

			INSERT INTO [SCDATA].FQ67101S
			       (WS$9WAN8	--WebAccount
				   ,WS$9AN8		--AddressNumber
				   ,WS$9TYP		--AddressType
			       ,WS$9SHAN	--ShiptoNumber
			       ,WS$9INID	--StoreId
				   ,WSURAB		--UserReservedNumber
				   ,WSURAT		--UserReservedAmount
			       ,WSURCD		--UserReservedCode
				   ,WSURDT		--UserReservedDate
			       ,WSURRF		--UserReservedReference
				   ,WSUSER		--UserID
				   ,WSPID		--ProgramID
				   ,WSUPMJ		--DateUpdated
				   ,WSUPMT		--TimeLastUpdated
				   ,WSJOBN		--WorkStationID
				   )
			    SELECT 
					WebAccountId,
					AddressNumber,
					AddressType,
					X.ShipToNumber,
					StoreId,
					UserReservedNumber,
					UserReservedAmount,
					UserReservedCode,
					UserReservedDate,
					UserReservedReference,
					UserID,
					ProgramID,
					DateUpdated,
					TimeLastUpdated,
					WorkStationID
				FROM SESSION.XMLSELECTEDSHIPTONUMBERSTABLE X
				WHERE NOT EXISTS (
				   SELECT 1 
					FROM [SCDATA].FQ67101S S
					WHERE X.ShipToNumber = S.WS$9SHAN AND S.WS$9INID = StoreId AND S.WS$9AN8 = AddressNumber AND S.WS$9WAN8 = WebAccountId
				);		
		END IF;
		-- Commit the transaction
		COMMIT;
	END;
	
	
-- #desc							Update line of business.
-- #bl_class						Premier.Profile.LineOfBusiness.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param LineOfBusinessID			Line of business 
-- #param Description				Description
-- #param BranchPlant				Branch Plant
-- #param AddressBookType			Address type
-- #param PersonCorporationCode		Person Code
-- #param AdjustmentSchedule		Adjustment Schedule
-- #param PriceGroup				Price Group
-- #param SequenceNumber			Sequence Number
-- #param CategoryCode01			N/A
-- #param CategoryCode02			N/A
-- #param CategoryCode03			N/A
-- #param CategoryCode04			N/A
-- #param CategoryCode05			N/A
-- #param CategoryCode06			N/A
-- #param CategoryCode07			N/A
-- #param CategoryCode08			N/A
-- #param CategoryCode09			N/A
-- #param CategoryCode10			N/A
-- #param CategoryCode11			N/A
-- #param CategoryCode12			N/A
-- #param CategoryCode13			N/A
-- #param CategoryCode14			N/A
-- #param CategoryCode15			N/A
-- #param CategoryCode16			N/A
-- #param CategoryCode17			N/A
-- #param CategoryCode18			N/A
-- #param CategoryCode19			N/A
-- #param CategoryCode20			N/A
-- #param CategoryCode21			N/A
-- #param CategoryCode22			N/A
-- #param CategoryCode23			N/A
-- #param CategoryCode24			N/A
-- #param CategoryCode25			N/A	
-- #param CategoryCode26			N/A
-- #param CategoryCode27			N/A
-- #param CategoryCode28			N/A
-- #param CategoryCode29			N/A
-- #param CategoryCode30			N/A
-- #param "PROGRAMID"				Program ID
-- #param WorkStationID				WorkStation ID
-- #param "USERID"					User ID
-- #param DateUpdated				Last Date Update
-- #param TimeLastUpdated			Last Updated time

CREATE OR REPLACE Procedure [SCLIBRARY].PRO_UpdLineOfBusiness 
(
	LineOfBusinessID		VARCHAR(3),
	Description				VARGRAPHIC(30) CCSID 13488,
	BranchPlant				VARCHAR(12),
	AddressBookType			NUMERIC(15,0),
	PersonCorporationCode	VARCHAR(1),
	AdjustmentSchedule		VARCHAR(8),
	PriceGroup				VARCHAR(8),
	SequenceNumber			NUMERIC(15,0),
	CategoryCode01			VARCHAR(3),
	CategoryCode02			VARCHAR(3),
	CategoryCode03			VARCHAR(3),
	CategoryCode04			VARCHAR(3),
	CategoryCode05			VARCHAR(3),
	CategoryCode06			VARCHAR(3),
	CategoryCode07			VARCHAR(3),
	CategoryCode08			VARCHAR(3),
	CategoryCode09			VARCHAR(3),
	CategoryCode10			VARCHAR(3),
	CategoryCode11			VARCHAR(3),
	CategoryCode12			VARCHAR(3),
	CategoryCode13			VARCHAR(3),
	CategoryCode14			VARCHAR(3),
	CategoryCode15			VARCHAR(3),
	CategoryCode16			VARCHAR(3),
	CategoryCode17			VARCHAR(3),
	CategoryCode18			VARCHAR(3),
	CategoryCode19			VARCHAR(3),
	CategoryCode20			VARCHAR(3),
	CategoryCode21			VARCHAR(3),
	CategoryCode22			VARCHAR(3),
	CategoryCode23			VARCHAR(3),
	CategoryCode24			VARCHAR(3),
	CategoryCode25			VARCHAR(3),
	CategoryCode26			VARCHAR(3),
	CategoryCode27			VARCHAR(3),
	CategoryCode28			VARCHAR(3),
	CategoryCode29			VARCHAR(3),
	CategoryCode30			VARCHAR(3),
	"PROGRAMID"				VARCHAR(10),
	WorkStationID			VARCHAR(10),
	"USERID"				VARCHAR(10),
	DateUpdated				NUMERIC(15,0),
	TimeLastUpdated			NUMERIC(15,0)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_UpdLineOfBusiness
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE 
		[SCDATA].FQ67103
	SET  
		LBDSC1  = Description,
	    LBMCU   = BranchPlant,
	    LB$9TYP = AddressBookType,
	    LBTAXC  = PersonCorporationCode,
	    LBASN   = AdjustmentSchedule,
	    LBCPGP  = PriceGroup,
	    LBSEQ   = SequenceNumber,
	    LBAC01  = CategoryCode01,
	    LBAC02  = CategoryCode02,
	    LBAC03  = CategoryCode03,
	    LBAC04  = CategoryCode04,
	    LBAC05  = CategoryCode05,
	    LBAC06  = CategoryCode06,
	    LBAC07  = CategoryCode07,
	    LBAC08  = CategoryCode08,
	    LBAC09  = CategoryCode09,
	    LBAC10  = CategoryCode10,
	    LBAC11  = CategoryCode11,
	    LBAC12  = CategoryCode12,
	    LBAC13  = CategoryCode13,
	    LBAC14  = CategoryCode14,
	    LBAC15  = CategoryCode15,
	    LBAC16  = CategoryCode16,
	    LBAC17  = CategoryCode17,
	    LBAC18  = CategoryCode18,
	    LBAC19  = CategoryCode19,
	    LBAC20  = CategoryCode20,
	    LBAC21  = CategoryCode21,
	    LBAC22  = CategoryCode22,
	    LBAC23  = CategoryCode23,
	    LBAC24  = CategoryCode24,
	    LBAC25  = CategoryCode25,
	    LBAC26  = CategoryCode26,
	    LBAC27  = CategoryCode27,
	    LBAC28  = CategoryCode28,
	    LBAC29  = CategoryCode29,
	    LBAC30  = CategoryCode30,
	    LBPID   = "PROGRAMID",
	    LBJOBN  = WorkStationID,
	    LBUSER  = "USERID",
	    LBUPMJ  = DateUpdated,
	    LBUPMT  = TimeLastUpdated
	WHERE 
		LB$9LOB = LineOfBusinessID;
END ;
-- #desc						Update line of business Lang
-- #bl_class					Premier.Profile.LineOfBusinessLang.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param LineOfBusinessID		LineOfBusinessID
-- #param LangPref				Language Preference
-- #param Description			Description

CREATE OR REPLACE PROCEDURE [SCLIBRARY].PRO_UpdLineOfBusinessLang 
(
	LineOfBusinessID	VARCHAR(3),
	LangPref			VARCHAR(2),
	Description			VARGRAPHIC(30) CCSID 13488
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].PRO_UpdLineOfBusinessLang
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN 
	UPDATE 
		  [SCDATA].FQ67103L
	  SET LBDSC1  =	 Description
	WHERE 
		  LB$9LOB  =  LineOfBusinessID AND
	      LBLNGP   =  LangPref;
END
      ;
-- #desc							Add a entry for the User Password History.
-- #bl_class						Premier.Security.UserPasswordHistory.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param "USERID"					User ID
-- #param Password					Password
-- #param LastDatePwdChanged		Last Date Password Changed
-- #param LastTimePwdChanged		Last Time Password Changed

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_AddPasswordHistory 
(
	IN "USERID"		NUMERIC(15,0),
	IN Password		VARGRAPHIC(256) CCSID 13488,
	IN LastDatePwdChanged NUMERIC(15,0),
	IN LastTimePwdChanged NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_AddPasswordHistory
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	INSERT INTO [SCDATA].FQ679911
	(
	 PH$9USER, PH$9PWD, 
	 PH$9LDPC, PH$9LTPC
	)
	VALUES
	(
	 "USERID", Password, 
	 LastDatePwdChanged, 
	 LastTimePwdChanged
	);

END
 ;
-- #desc					Add User by Installation Table 
-- #bl_class				Premier.Security.StoreByUserList.cs/UserStore.cs
-- #db_dependencies		    N/A
-- #db_references		    N/A	

-- #param "USERID"			User ID number.
-- #param InstallationID	Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_AddUserByInst 
(	
	IN "USERID"			NUMERIC(15,0),
	IN InstallationID	VARCHAR(3)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_AddUserByInst
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO [SCDATA].FQ67996
	(
		UI$9USER,  
		UI$9INID   
	)
	VALUES
	(
		 "USERID", 
		 InstallationID 
	);
	
END
  ;
-- #desc						Creates a User Permission.
-- #bl_class					Premier.Security.UserPermission.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param "USERID"				User ID number.
-- #param PermissionCode		Permission Code.
-- #param ActionAllowed			Allow to do action.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_AddUserPermission 
(
	IN "USERID"			NUMERIC(15,0),
	IN PermissionCode	VARCHAR(5),
	IN ActionAllowed	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_AddUserPermission
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO 
		[SCDATA].FQ67997
		(
		 UP$9USER,  
		 UP$9PCD,  
		 UP$9ALLOW
		)
		VALUES
		(
		 "USERID", 
		 PermissionCode, 
		 ActionAllowed
		);

END ;
-- #desc					Delete an User. Uses procedures: .
-- #bl_class				Premier.Security.User.cs
-- #db_dependencies			SEC_DelUserPermission
-- #db_references			N/A

-- #param "USERID"			User ID number.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_DelUser 
(
	"USERID"	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_DelUser
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

--Delete children
CALL [SCLIBRARY].SEC_DelUserPermission ("USERID",null);
CALL [SCLIBRARY].SEC_DelPasswordHistory("USERID");
CALL [SCLIBRARY].SEC_DelUserByInst("USERID",'*');--All related Installations


DELETE  
FROM  
	[SCDATA].FQ67991
WHERE 
	US$9USER = "USERID";
	
END



 ;
-- #desc						Update the Account disable status.
-- #bl_class					Premier.Security.User.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param "USERID"				User id number.
-- #param AccountDisable		Enable o disable account.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_ExcChangeAccountDisable 
(
	"USERID"				NUMERIC(15,0),	
	AccountDisable		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_ExcChangeAccountDisable
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	UPDATE [SCDATA].FQ67991
	SET 		 
		US$9SFAD = AccountDisable
	WHERE 
		US$9USER = "USERID";

END
 ;
-- #desc								Change User Password
-- #bl_class							Premier.Security.User.cs
-- #db_dependencies						N/A
-- #db_references						N/A	

-- #param "USERID"						User ID
-- #param Password						Password
-- #param LastDatePasswordChanged		Last Date Password Changed

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_ExcChangeUserPassword 
(
	"USERID"					NUMERIC(15,0),
	Password					VARGRAPHIC(100) CCSID 13488,
	LastDatePasswordChanged		NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_ExcChangeUserPassword
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
		
	UPDATE 
		[SCDATA].FQ67991
	SET 
		US$9PWD  = Password,
		US$9LDPC = LastDatePasswordChanged, 
		US$9SFCP = 1
	WHERE 
		US$9USER = "USERID";
	
END


 ;
-- #desc				Search a password in the password history.
-- #bl_class			Premier.Security.UserPasswordHistory.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param "USERID"		User ID number.
-- #param Password		New password to validate.
-- #param Reviews		Number of old passwords in with look for.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_ExcCheckPasswordHistory 
(
	"USERID" NUMERIC(15,0),
	Reviews INTEGER
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_ExcCheckPasswordHistory
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE GLOBAL TEMPORARY TABLE SESSION.ExcCheckPasswordHistory_T1 
	( 
		NID INT GENERATED BY DEFAULT 
		AS IDENTITY ( START WITH 1 , INCREMENT BY 1 , CACHE 20 ) NOT NULL , 
		PH$9PWD VARGRAPHIC(256) CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ; 
	
	BEGIN 
	
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT PH$9PWD AS UserPassword
		FROM SESSION.ExcCheckPasswordHistory_T1
		WHERE NID <= Reviews;

		--CREATE TABLE t2 AS (SELECT t1.* FROM t1 ) DEFINITION ONLY;
		INSERT INTO SESSION.ExcCheckPasswordHistory_T1 (PH$9PWD)
		SELECT PH$9PWD
		FROM [SCDATA].FQ679911
		WHERE  PH$9USER = "USERID" 
		ORDER BY PH$9LDPC DESC ,PH$9LTPC DESC;

		OPEN TEMP_CURSOR1;
	
	END;

END ;
-- #desc						Copy all the e-Commerce Default Privileges from an Intallation to another.
-- #bl_class					Premier.Security.DefaultPrivileges.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param sourceInstallationID 
-- #param destinationInstallationID 

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_ExcCopyDefaultPrivileges
(
	IN sourceInstallationID varchar(3),
	IN destinationInstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_ExcCopyDefaultPrivileges 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DELETE FROM [SCDATA].FQ67994E WHERE PE$9INID = destinationInstallationID;
	
	INSERT INTO [SCDATA].FQ67994E
	(
		PE$9INID,
		PE$9PCD,
		PE$9ICF,
		PE$9ALLOW,
		PE$9WEBA
	)
	SELECT 
		destinationInstallationID,
		PE$9PCD,
		PE$9ICF,
		PE$9ALLOW,
		PE$9WEBA
	FROM [SCDATA].FQ67994E
	WHERE PE$9INID = sourceInstallationID;
	
END

 ;
-- #desc					Delete a Default Privileges.
-- #bl_class				Premier.Security.DefaultPrivileges.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_ExcDeleteDefaultPrivileges
(
	IN InstallationID varchar(3)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_ExcDeleteDefaultPrivileges 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 

	DELETE  
	FROM  
		[SCDATA].FQ67994E
	WHERE 
		PE$9INID = InstallationID;

END
 ;

-- #desc								Change Web Users Password
-- #bl_class							Premier.Security.WebAccountSyncPasswordCommand.cs
-- #db_dependencies						N/A
-- #db_references						N/A	

-- #param WebUserName					Web UserName
-- #param StoreListXML					Store ID List in XML Format
-- #param Password						Password
-- #param LastDatePasswordChanged		Last Date Password Changed

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_ExcSyncWebAcctPassword 
(
	WebUserName					VARGRAPHIC(256) CCSID 13488,
	StoreListXML				XML,
	Password					VARGRAPHIC(256) CCSID 13488,
	LastDatePasswordChanged		NUMERIC(6,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_ExcSyncWebAcctPassword
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
		
	UPDATE 
		[SCDATA].FQ67991 USR
	SET 
		USR.US$9PWD  = Password,
        USR.US$9LDPC = LastDatePasswordChanged,
        USR.US$9SFCP = 1
	WHERE
		EXISTS 
          (SELECT 1 
           FROM [SCDATA].FQ67101 WUSR /*Web Account User*/
			INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
				ON INBU.UI$9USER = WUSR.WA$9USER
			INNER JOIN XMLTABLE('$s/stores/storeID' PASSING StoreListXML AS "s" 
				COLUMNS storeID GRAPHIC(3) CCSID 13488 PATH 'text()') AS X
				ON X.storeID = INBU.UI$9INID
			        WHERE
						WUSR.WA$9USER = USR.US$9USER
						AND WUSR.WAEMAL = WebUserName);
END ;
-- #desc						Get the Individual or Company e-Commerce Default Privileges List.
-- #bl_class					Premier.Security.DefaultPrivileges.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID 
-- #param IndividualCompanyFlag 

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetDefaultPrivileges
(
	IN InstallationID varchar(3),
	IN IndividualCompanyFlag NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetDefaultPrivileges 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

	SELECT  
		A.PE$9PCD AS PermissionCode,
		COALESCE(B.PE$9ALLOW, 1) AS ActionAllowed,--0 is True, 1 is False
		COALESCE(B.PE$9WEBA, 0)  AS WebAllowed,-- 0 is True, 1 is False
		Case when B.PE$9PCD IS NULL then 'N' else 'Y' end AS Exist
	FROM  [SCDATA].FQ67994 A
	LEFT OUTER JOIN 
              [SCDATA].FQ67994E B
              ON A.PE$9PCD = B.PE$9PCD 
              and B.PE$9INID = InstallationID
              and (IndividualCompanyFlag IS NULL OR B.PE$9ICF = IndividualCompanyFlag)
	WHERE 
			PECLS='ECOM';
		

	OPEN TEMP_CURSOR1;
END




 ;
-- #desc						Read not related Installation list by "USERID" and Installation type.
-- #bl_class					Premier.Security.StoreByUserList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param "USERID"				User ID
-- #param ApplicationUseFlag	Installation type



CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetInstByUserListNotRel 
(
	IN "USERID"				NUMERIC(15,0),
	IN ApplicationUseFlag	varchar(4)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetInstByUserListNotRel
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT DISTINCT
		A.IN$9INID	AS InstallationID,
		"USERID"	AS "USERID", 
		INDSC1		AS Description,
		IN$9APFL	AS ApplicationUseFlag
	FROM  	
		[SCDATA].FQ670001 A
	LEFT JOIN [SCDATA].FQ67996 B --User by Installation
		ON A.IN$9INID = B.UI$9INID
	WHERE 	
		(ApplicationUseFlag = '*' OR IN$9APFL = ApplicationUseFlag)
		AND 	 	
		A.IN$9INID NOT IN (SELECT UI$9INID FROM [SCDATA].FQ67996 WHERE UI$9USER = "USERID")
		ORDER BY IN$9APFL ASC, INDSC1 ASC
	FOR FETCH ONLY;
      
    OPEN TEMP_CURSOR1;
     
END  ;
-- #desc					Read permission list filtered by permission id or description.
-- #bl_class				Premier.Security.PermisionList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param PermissionID		Permission ID number.
-- #param Description		Permission Description.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetPermissionList
(
	IN PermissionID varchar(10),
	IN Description varchar(60),
	IN ApplicationUseFlag varchar(4)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetPermissionList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
SELECT  
	A.PE$9PCD as PermissionID, 
	A.PEDSC1 as Description ,
	A.PESYS as InstallationType
FROM  
	[SCDATA].FQ67994 A
WHERE 
	(PermissionID = '*' OR UPPER(LTRIM(RTRIM(A.PE$9PCD))) LIKE '%' || UPPER(LTRIM(RTRIM(PermissionID))) || '%') AND
	(Description = '*' OR UPPER(LTRIM(RTRIM(A.PEDSC1))) LIKE '%' || UPPER(LTRIM(RTRIM(Description))) || '%') AND
	(ApplicationUseFlag = '*' OR UPPER(LTRIM(RTRIM(A.PECLS))) = UPPER(LTRIM(RTRIM(ApplicationUseFlag))))
FOR FETCH ONLY;

OPEN TEMP_CURSOR1;

END
 ;
-- #desc				Read all user information.  Uses procedures:  
-- #bl_class			Premier.Security.User.cs
-- #db_dependencies		SEC_GetUser
-- #db_references		N/A

-- #param UserName		User Name number.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetUserByName 
(
 -- User Name search criteria
  IN InstallationID		varchar(3),	
  IN UserName			varchar(80)
)
DYNAMIC RESULT SETS 4
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetUserByName
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE v_UserId NUMERIC(15,0) DEFAULT 0;

SET UserName = LOWER(UserName);

SELECT US$9USER 
INTO v_UserId
FROM 
	[SCDATA].FQ67991 A
INNER JOIN	[SCDATA].FQ67996 B -- User by Installation Table
	ON A.US$9USER = B.UI$9USER
	AND B.UI$9INID = InstallationID
WHERE 
	-- User Name filter	
    US$9USRN = UserName
    FETCH FIRST 1 ROWS ONLY ;

--call main SP
IF (v_UserId != 0) THEN
	CALL [SCLIBRARY].SEC_GetUser (v_UserId);
END IF;

END
 ;
-- #desc				Read user information by "USERID".
-- #bl_class			Premier.Security.UserInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param "USERID"	User ID number.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetUserInfo 
(	
	IN "USERID"  NUMERIC(15,0)
)  

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetUserInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_TABLE
	(
		US$9USER NUMERIC(15,0), 
		US$9USRN VARCHAR(40), 
		USLNGP VARCHAR(2), 
		US$9LDPC NUMERIC(15,0), 
		US$9SFAD NUMERIC(15,0), 
		US$9SFAL NUMERIC(15,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
	BEGIN

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			USR.US$9USER	AS "USERID" , 
			USR.US$9USRN	AS UserName ,   
			USR.USLNGP		AS LanguagePreference ,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',USLNGP,'*')		AS LanguagePrefDesc ,       
			USR.US$9LDPC	AS LastDatePasswordChanged,  
			USR.US$9SFAD	AS AccountDisable , 
			USR.US$9SFAL	AS AccountLockout
		FROM 
			SESSION.TMP_TABLE USR
		FOR FETCH ONLY;
		
		INSERT INTO SESSION.TMP_TABLE
		SELECT 
			US$9USER, 
			US$9USRN, 
			USLNGP, 
			US$9LDPC, 
			US$9SFAD, 
			US$9SFAL
		FROM 
			[SCDATA].FQ67991 --Users Table 
		WHERE 
			US$9USER = "USERID";

		OPEN TEMP_CURSOR1; 
		
	END;

END    
      ;
-- #desc				Read user information by UserName.
-- #bl_class			Premier.Security.UserInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param UserName	User Name.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetUserInfoByName
(  
	IN UserName			VARGRAPHIC(100) CCSID 13488
)  
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetUserInfoByName 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_TABLE
	(
		US$9USER NUMERIC(15,0), 
		US$9USRN VARCHAR(40), 
		USLNGP VARCHAR(2), 
		US$9LDPC NUMERIC(15,0), 
		US$9SFAD NUMERIC(15,0), 
		US$9SFAL NUMERIC(15,0)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
	BEGIN

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			USR.US$9USER	AS "USERID" , 
			USR.US$9USRN	AS UserName ,   
			USR.USLNGP		AS LanguagePreference ,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('01','LP',USLNGP,'*')		AS LanguagePrefDesc ,       
			USR.US$9LDPC	AS LastDatePasswordChanged,  
			USR.US$9SFAD	AS AccountDisable , 
			USR.US$9SFAL	AS AccountLockout
		FROM 
			SESSION.TMP_TABLE USR
		FOR FETCH ONLY;
		
		SET UserName = LOWER(UserName);
		
		INSERT INTO SESSION.TMP_TABLE
		SELECT 
			US$9USER, 
			US$9USRN, 
			USLNGP, 
			US$9LDPC, 
			US$9SFAD, 
			US$9SFAL
		FROM 
			[SCDATA].FQ67991 --Users Table 
		WHERE 
			US$9USRN = UserName;

		OPEN TEMP_CURSOR1; 
		
	END;

END  
      ;
-- #desc						Read user permissions(FQ67997,FQ67994). 
-- #bl_class					Premier.Security.UserPermissionList.cs
-- #db_dependencies				N/A
-- #db_references				N/A			


-- #param "USERID"				User ID number.
-- #param PermissionCode		Permission code.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetUserPermissionList 
(
	IN "USERID"	NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetUserPermissionList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT   
		A.UP$9PCD	AS	PermissionCode, 
		B.PEDSC1	AS	Description
	FROM  
		[SCDATA].FQ67997 A
		INNER JOIN [SCDATA].FQ67994 B
		ON A.UP$9PCD = B.PE$9PCD
	WHERE 
		A.UP$9USER = "USERID" 
		AND A.UP$9ALLOW = 0 -- ALLOWED = YES
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;

END		

 ;
-- #desc				Read not related Installation list by "USERID" and Installation type.
-- #bl_class			Premier.Security.UserPermissionList.cs
-- #db_dependencies		N/A
-- #db_references		N/A	

-- #param "USERID"				User ID
-- #param ApplicationUseFlag	Installation type

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_GetUserPermissListNotRel 
(
	IN "USERID"               NUMERIC(15,0),
	IN ApplicationUseFlag   VARCHAR(4)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_GetUserPermissListNotRel
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

    SELECT 
	    PE$9PCD AS  PermissionCode,
	    PEDSC1  AS  Description
    FROM  	
	    [SCDATA].FQ67994 A
    WHERE 	
	        (ApplicationUseFlag = '*' OR PECLS = ApplicationUseFlag) 
	    AND A.PE$9PCD NOT IN (SELECT UP$9PCD FROM [SCDATA].FQ67997 WHERE UP$9USER = "USERID")
	    
	    FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;

END		
	    
	     ;
-- #desc				Update e-Commerce Default Privileges.
-- #bl_class			Premier.Security.DefaultPrivilege.cs

-- #param InstallationID 
-- #param PermissionCode 
-- #param IndividualCompanyFlag 
-- #param ActionAllowed		
-- #param WebAllowed

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_UpdDefaultPrivilege
(
	IN InstallationID varchar(3),
	IN PermissionCode varchar(5),
	IN IndividualCompanyFlag NUMERIC(15,0),	
	IN ActionAllowed	NUMERIC(15,0),	
	IN WebAllowed		NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_UpdDefaultPrivilege 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	UPDATE [SCDATA].FQ67994E
		SET 
			PE$9ALLOW = ActionAllowed,
			PE$9WEBA = WebAllowed	
	WHERE 
		PE$9INID = InstallationID AND 
		PE$9PCD = PermissionCode AND
		PE$9ICF = IndividualCompanyFlag;

END



 ;
-- #desc								Updates an User.
-- #bl_class							Premier.Security.User.cs
-- #db_dependencies						N/A
-- #db_references						N/A	

-- #param "USERID"						User id number.
-- #param userName						User name.
-- #param languagePreference			Language preference.
-- #param secretQuestion				Encrypted Question.
-- #param secretAnswer					Encrypetd Answer.
-- #param changePassword				Change password indicator.
-- #param noPasswordChange				No change password.
-- #param passwordExpires				Indicate when password expire.
-- #param accountDisable				Enable o disable account.
-- #param accountLockout				Lock account when is necesary.
-- #param lastDateAccountLocked			Last date when account was locked.
-- #param lastTimeAccountLocked			Last time when account was locked.

CREATE OR REPLACE Procedure [SCLIBRARY].SEC_UpdUser 
(
	"USERID"					NUMERIC(15,0),
	userName					VARGRAPHIC(100) CCSID 13488,
	languagePreference			VARCHAR(2),
	secretQuestion				VARGRAPHIC(150) CCSID 13488,
	secretAnswer				VARGRAPHIC(150) CCSID 13488,
	changePassword				NUMERIC(15,0),
	noPasswordChange			NUMERIC(15,0),
	passwordExpires				NUMERIC(15,0),
	accountDisable				NUMERIC(15,0),
	accountLockout				NUMERIC(15,0),
	lastDateAccountLocked		NUMERIC(15,0),
	lastTimeAccountLocked		NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].SEC_UpdUser
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
	
	SET userName = LOWER(userName);
	
	UPDATE 
		[SCDATA].FQ67991
	SET 	
		US$9USRN	= userName , 
		USLNGP		= languagePreference , 
		US$9SQ		= secretQuestion ,   
		US$9ANS		= secretAnswer ,  
		US$9SFCP	= changePassword ,  
		US$9SFNP	= noPasswordChange , 
		US$9SFNE	= passwordExpires , 
		US$9SFAD	= accountDisable , 
		US$9SFAL	= accountLockout ,
		US$9LDAL	= lastDateAccountLocked, 
		US$9LTAL	= lastTimeAccountLocked
	WHERE 
		US$9USER = "USERID";
	
END


 ;
-- #desc							Add Brand Mailing
-- #bl_class	 	 				Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AddressNumber				AddressNumber
-- #param AddressBookType			AddressBookType
-- #param ContactID					ContactID
-- #param Brand						Brand
-- #param MailPreference			MailPreference
-- #param EmailPreference			EmailPreference
-- #param EmailFormat				EmailFormat
-- #param MailContentPreference		MailContentPreference
-- #param PartnerMail				PartnerMail
-- #param ShareEmail				ShareEmail

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_AddBrandMailSubscription 
(
	IN AddressNumber			NUMERIC(15,0),
	IN AddressBookType			NUMERIC(15,0),
	IN ContactID				NUMERIC(15,0),
	IN Brand					VARCHAR(3),
	IN MailPreference			VARCHAR(1),
	IN EmailPreference			NUMERIC(15,0),
	IN EmailFormat				NUMERIC(15,0),
	IN MailContentPreference	VARCHAR(3),
	IN PartnerMail  			VARCHAR(1),
	IN ShareEmail				VARCHAR(1),

	IN MailingFlag1				VARCHAR(1),
	IN MailingFlag2				VARCHAR(1),
	IN MailingFlag3				VARCHAR(1),
	IN MailingFlag4				VARCHAR(1),
	IN MailingFlag5				VARCHAR(1),
	IN MailingFlag6				VARCHAR(1),
	IN MailingFlag7				VARCHAR(1),
	IN MailingFlag8				VARCHAR(1),
	IN MailingFlag9				VARCHAR(1),
	IN MailingFlag10			VARCHAR(1),
	IN MailingCatCode1			VARCHAR(3),
	IN MailingCatCode2			VARCHAR(3),
	IN MailingCatCode3			VARCHAR(3),
	IN MailingCatCode4			VARCHAR(3),
	IN MailingCatCode5			VARCHAR(3),
	IN MailingCatCode6			VARCHAR(10),
	IN MailingCatCode7			VARCHAR(10),
	IN MailingCatCode8			VARCHAR(10),
	IN MailingCatCode9			VARCHAR(10),
	IN MailingCatCode10			VARCHAR(10),

	IN UserReserveCode1			VARCHAR(3),
	IN UserReserveCode2			VARCHAR(10),
	IN UserReservedReference	VARCHAR(15),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedChar			VARCHAR(1),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN WorkStationId			VARCHAR(10),
	IN TimeLastUpdated			NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CSM_AddBrandMailSubscription
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN

	INSERT INTO 
		[SCDATA].FQ671041
		(
		 PR$9AN8,    PR$9TYP,   PRIDLN, 
		 PR$9SRP1,   PR$9MAIL,  PR$9EMYN,   PR$9EMFP, 
		 PR$9MLCP,   PR$9MLP,   PR$9EMALS,  PR$9MLF1, 
		 PR$9MLF2,   PR$9MLF3,  PR$9MLF4,   PR$9MLF5, 
		 PR$9MLF6,   PR$9MLF7,  PR$9MLF8,   PR$9MLF9, 
		 PR$9MLF10,  PR$9MLC1,  PR$9MLC2,   PR$9MLC3, 
		 PR$9MLC4,   PR$9MLC5,  PR$9MLC6,   PR$9MLC7, 
		 PR$9MLC8,   PR$9MLC9,  PR$9MLC10,  PRURC1, 
		 PRURC2,     PRURRF,    PRURAB,     PRURDT, 
		 PRURAT,     PRAURCH1,  PRUSER,     PRPID, 
		 PRUPMJ,     PRJOBN,    PRUPMT
		)
		VALUES
		(
		 AddressNumber,			AddressBookType,			ContactID, 
		 Brand,					MailPreference,				EmailPreference,  
		 EmailFormat,			MailContentPreference ,		PartnerMail ,  
		 ShareEmail ,			MailingFlag1,				MailingFlag2,  
		 MailingFlag3,			MailingFlag4,				MailingFlag5, 
		 MailingFlag6,			MailingFlag7,				MailingFlag8,  
		 MailingFlag9, 			MailingFlag10,				MailingCatCode1,
		 MailingCatCode2,		MailingCatCode3,			MailingCatCode4,  
		 MailingCatCode5,		MailingCatCode6,			MailingCatCode7, 
		 MailingCatCode8,		MailingCatCode9,			MailingCatCode10, 
		 UserReserveCode1,		UserReserveCode2,			UserReservedReference,   
		 UserReservedNumber,	UserReservedDate,			UserReservedAmount,
		 UserReservedChar,		"USERID",						"PROGRAMID", 
		 DateUpdated,			WorkStationId,				TimeLastUpdated
		);
END ;
-- #desc						Read Master info from Consumer
-- #bl_class					Premier.Consumer.ConsumerMasterList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param AlphaName				AlphaName
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_ConsumerMasterList
(
	AddressNumber	NUMERIC(15,0),
	AlphaName 	VARGRAPHIC(40) CCSID 13488,
	PageIndex		INT,
    PageSize		INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_ConsumerMasterList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;	

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS
		(
			SELECT
				PR$9AN8 AS AddressNumber,
				PRALPH AS AlphaName,
				PRADD1 AS AddressLine1,
				ROW_NUMBER() OVER (ORDER BY PR$9AN8) AS RNUM
			FROM [SCDATA].FQ670302	/* Consumer Master*/
			WHERE 
				(AddressNumber = 0 OR PR$9AN8 = AddressNumber)/* AddressNumber filter*/
				AND (PR$9AN8 <> PR$9PA8) /* Exclude Parents */
				AND	(AlphaName = '*' OR UPPER(PRALPH) LIKE '%' || AlphaName || '%')	 /* AlphaName filter*/
		) 
		SELECT 
			A.AddressNumber,
			A.AlphaName,
			A.AddressLine1, 
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
			
		OPEN TEMP_CURSOR1;
	
	END;
END;

-- #desc					Update Brand Mailing
-- #bl_class	 	 		Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param AddressBookType	AddressBookType
-- #param ContactID			ContactID
-- #param Brand				Brand

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_DelBrandMailSubscription 
(
	IN AddressNumber		NUMERIC(15,0),
	IN AddressBookType		NUMERIC(15,0),
	IN ContactID			NUMERIC(15,0),
	IN Brand				VARCHAR(3)
)

LANGUAGE SQL
SPECIFIC [SCLIBRARY].CSM_DelBrandMailSubscription
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN

	DELETE FROM
			[SCDATA].FQ671041
	WHERE
			PR$9AN8  = AddressNumber
		AND PR$9TYP  = AddressBookType
		AND PRIDLN   = ContactID
		AND PR$9SRP1 = Brand;
		
END
 
  ;
-- #desc						Check Consumer Status
-- #bl_class					Premier.Consumer.Consumer.cs
-- #db_dependencies				N/A
-- #db_references				N/A		

-- #param AddressNumber			Address Number (consumer)

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_ExcCheckConsumerStatus
(
	IN AddressNumber NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_ExcCheckConsumerStatus 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 	
	SELECT
	PR$9STS AS Status
FROM
	[SCDATA].FQ670302
WHERE
	PR$9AN8 = AddressNumber
	
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;			
END  ;
-- #desc					Add ShipTo relation
-- #bl_class	 	 		Premier.Consumer.ShipToList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ParentAddress		New Parent Address Number
-- #param ShipToID			Address number

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_ExcRelateShipTo
(
	ParentAddress NUMERIC(15,0),
	ShipToID NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_ExcRelateShipTo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE nRowCount INT DEFAULT 0;
	
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT nRowCount FROM SYSIBM.SYSDUMMY1
	FOR FETCH ONLY;

	UPDATE
		[SCDATA].FQ670302
	SET
		PR$9PA8 = ParentAddress
	WHERE
		PR$9AN8 = ShipToID;
	
	GET DIAGNOSTICS nRowCount = ROW_COUNT;
	
	--Used by command to check execution	
	OPEN TEMP_CURSOR;			
END ;
-- #desc					Validate if consumer/contact exists.
-- #bl_class				Premier.Consumer.ConsumerInfo (ValidateConsumerInfoCommand)
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID 

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_ExcValidateConsumerInfo
(
	IN AddressNumber NUMERIC(15,0),
	IN ContactID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_ExcValidateConsumerInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	--Read Consumer Information
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 	
	SELECT 
		PCMLNM AS MailingName,
		PCEMAL AS EmailAddress
	FROM
		[SCDATA].FQ670302 A 
		INNER JOIN [SCDATA].FQ67303 B 
			ON PC$9AN8 = PR$9AN8
			AND PCIDLN = ContactID
	WHERE 
		PR$9AN8 = AddressNumber
    FOR FETCH ONLY
    OPTIMIZE FOR 1 ROW;
	
	OPEN TEMP_CURSOR;
END ;
-- #desc						Read if address Number is valid
-- #bl_class					Premier.Consumer.ValidateConsumerRecordCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			AddressNumber
-- #param IsBillTo 				Specific Is Bill To  /*1 when is Billto, 0 when is Shipto*/
-- #param ValidAddressNumber	When is B is valid Billto, S is valid Shipto when is * is invalid address number

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_ExcValidateConsumerRecord 
(
	IN AddressNumber NUMERIC(15,0),
	IN IsBillTo NUMERIC(15,0), /*1 when is Billto, 0 when is Shipto*/
	OUT ValidAddressNumber VARCHAR(3) 
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL  
SPECIFIC [SCLIBRARY].CSM_ExcValidateConsumerRecord
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE BillToType VARCHAR(1);
	DECLARE tmpValidAddressNumber  VARCHAR(3);
	
	SELECT DISTINCT PRBADT Into BillToType
		FROM
			[SCDATA].FQ670302
		WHERE
			PR$9AN8 = AddressNumber
			AND PR$9STS <> '1';	/* is active */
	
	IF(IsBillTo = 1 AND BillToType IN ('B','X'))THEN	     /* Is BillTo Only and Billto-Shipto(X)*/
		SET tmpValidAddressNumber = ('B');		/*Valid Bill to*/
	ELSEIF(IsBillTo = 0 AND BillToType IN ('S','X'))THEN	 /* Is Shito Only and Shipto-Billto(X)*/
		SET tmpValidAddressNumber = 'S';		/*Valid Ship to*/		
	ELSE
	    SET tmpValidAddressNumber = '*';			/*Not valid AddressNumber*/
	END IF;
	
	SET ValidAddressNumber = tmpValidAddressNumber;
END
  ;
-- #desc						Fetch Consumer Additional and Children information
-- #bl_class					N/A
-- #db_dependencies				PRO_GetProfileExtInformation, CSM_GetContacts
-- #db_references				CSM_GetConsumer

-- #param AddressNumber			Customer Number
-- #param ContactID				First ContactID 

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetConsumerChildren
(
	AddressNumber NUMERIC(15,0),
	ContactID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetConsumerChildren 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE AddressType INT;
	SET AddressType = 1; -- CONSUMER

	SET ContactID = COALESCE(ContactID,0);
		
	--Get Consumer Contact List excluding main ContactId
	CALL [SCLIBRARY].CSM_GetConsumerContacts(AddressNumber, ContactID);
	
END
 ;
-- #desc					Fetch Consumer minimal information
-- #bl_class				Premier.Consumer.ConsumerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetConsumerInfo
(
	IN AddressNumber NUMERIC(15,0),
	IN ContactID NUMERIC(15,0),
	IN LanguagePreference VARCHAR(2)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetConsumerInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	--Read Consumer Information
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 	
	SELECT 
		PR$9AN8 AS AddressNumber,
		PCIDLN AS ContactID,
		PCGNNM AS FirstName, 
		PCMDNM AS MiddleName, 
		PCSRNM AS LastName,
		PCMLNM AS MailingName,
		PRBADT AS BillingAddressType,
		PRADD1 AS AddressLine1,
		PRADD2 AS AddressLine2,
		PRADD3 AS AddressLine3,
		PRADD4 AS AddressLine4,
		PRCTY1 AS City,
		PRCOUN AS County,
		PRADDS AS State,
		PRADDZ AS ZipCode,
		PRCTR AS Country,
		PCEMAL AS EmailAddress,
		PREXR1 AS TaxExplanationCode,
		PRTXA1 AS TaxArea,
		PS.PS$9ICF AS IndividualCompanyFlag,
		PR$9STS AS Status,
		PRMCU AS BranchPlant
	FROM
		[SCDATA].FQ670302 A 
		inner join [SCDATA].FQ67303 B 
			ON PR$9AN8 = PC$9AN8
		LEFT OUTER JOIN  [SCDATA].FQ67107 PS
			ON PS.PS$9AN8 = PR$9AN8
			AND PS.PS$9TYP = 1		
	WHERE 
		PR$9AN8 = AddressNumber AND
		PCIDLN = ContactID
    FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR;			
	--Get Customer Phone List
	CALL [SCLIBRARY].CSM_GetPhones (AddressNumber, ContactID, null,LanguagePreference);
END ;
-- #desc						Read Customer read only info
-- #bl_class					Premier.Consumer.ConsumerList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param MailingName			AlphaName
-- #param SearchType			Search Type
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetConsumerList
(
	AddressNumber	NUMERIC(15,0),
	MailingName 	VARGRAPHIC(40) CCSID 13488,
	PageIndex		INT,
    PageSize		INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetConsumerList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;	

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS
		(
			SELECT
				PR$9AN8 AS AddressNumber,
				PCIDLN AS ContactID,
				PCGNNM AS FirstName, 
				PCMDNM AS MiddleName, 
				PCSRNM AS LastName,
				PCMLNM AS MailingName,
				PRBADT AS BillingAddressType,
				PRADD1 AS AddressLine1,
				PRADD2 AS AddressLine2,
				PRADD3 AS AddressLine3,
				PRADD4 AS AddressLine4,
				PRCTY1 AS City,
				PRCOUN AS County,
				PRADDS AS State,
				PRADDZ AS ZipCode,
				PRCTR AS Country,
				PCEMAL AS emailAddress,
				PREXR1 AS TaxExplanationCode,
				PRTXA1 AS TaxArea,
				PR$9STS AS Status,
				-1 AS IndividualCompanyFlag,
				PRMCU AS BranchPlant,
				ROW_NUMBER() OVER (ORDER BY PR$9AN8) AS RNUM
			FROM [SCDATA].FQ670302 PR	/* Consumer Master*/
			INNER JOIN [SCDATA].FQ67303 PC /*Contact Master*/
				ON PR$9AN8 = PC$9AN8	
			WHERE 
				(AddressNumber = 0 OR PR$9AN8 = AddressNumber)/* AddressNumber filter*/
				AND (PR$9AN8 <> PR$9PA8)
				AND	(MailingName = '*' OR UPPER(PCMLNM) LIKE '%' || MailingName || '%')	 /* AlphaName filter*/
		) 
		SELECT 
			A.AddressNumber,
			A.ContactID,
			A.FirstName, 
			A.MiddleName, 
			A.LastName,
			A.MailingName,
			A.BillingAddressType,
			A.AddressLine1,
			A.AddressLine2,
			A.AddressLine3,
			A.AddressLine4,
			A.City,
			A.County,
			A.State,
			A.ZipCode,
			A.Country,
			A.emailAddress,
			A.TaxExplanationCode,
			A.TaxArea,
			A.Status,
			A.IndividualCompanyFlag,
			A.BranchPlant,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
			
		OPEN TEMP_CURSOR1;
	
	END;
END;
-- #desc					Fetch Contact Additional and Children Information
-- #bl_class	 	 		Premier.Customer.Contact.cs
-- #db_dependencies			PRO_GetContactExtInformation, CSM_GetPhones, PRO_GetCreditCards
-- #db_references			N/A	

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID
-- #param ConnectionName	The Parameter envoy is only from Ecommerce (POS and MC send empty)
-- #param IsShipTo			Is ShipTo Y/N, N to retrieve additional information 

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetContactChildren
(
	IN AddressNumber NUMERIC(15,0),
	IN ContactID NUMERIC(15,0),
	IN LanguagePreference VARCHAR(2),
	IN IsShipTo VARCHAR(1)
)
DYNAMIC RESULT SETS 4
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetContactChildren 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE AddressType INT;
	SET AddressType = 1; /* CONSUMER */

	/* Get Contact Extended Information */
	IF(IsShipTo = 'N') THEN
		CALL [SCLIBRARY].PRO_GetContactExtInformation(AddressNumber, AddressType , ContactID);
	END IF;

	/* Get Contact Phone List */
	CALL [SCLIBRARY].CSM_GetPhones(AddressNumber, ContactID, null, LanguagePreference);

	/* Get CreditCard List */
	IF(IsShipTo = 'N') THEN
		CALL [SCLIBRARY].PRO_GetCreditCards(AddressNumber , AddressType , null, null, '*', '*', '*', '*', '*', 'ExpDate', 'A', 0, 0, LanguagePreference);
	END IF;
	
	/* Get Brand Mailing List */
	IF(IsShipTo = 'N') THEN
		CALL [SCLIBRARY].CSM_GetBrandMailSubscriptions(AddressNumber, AddressType , ContactID);
	END IF;

END
 ;
-- #desc						Get Non related consumer Shiptos 
-- #bl_class	 	 			Premier.Consumer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param MailingName			Mailing Name
-- #param EmailUrl				Email Url
-- #param ZipCode				Zip Code
-- #param Phone Number			Phone Number
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetNonRelatedShipToList
(
	IN AddressNumber	NUMERIC(15,0),
	IN MailingName		VARGRAPHIC(40) CCSID 13488,
	IN EmailUrl			VARGRAPHIC(40) CCSID 13488,
	IN ZipCode			VARGRAPHIC(12) CCSID 13488,
	IN PhoneNumber		VARGRAPHIC(20) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetNonRelatedShipToList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;

	BEGIN
		DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				PR$9AN8 AS AddressNumber,
				PCMLNM AS MailingName,
				PCEMAL AS EmailUrl,
				PRADD1 AS AddressLine1,
				PRADD2 AS AddressLine2,
				PRCTY1 AS City,
				PRADDS AS State, 
				PRADDZ AS ZipCodePostal, 
				PRMCU  AS BranchPlant, 
				PRASN  AS AdjustmentSchedule,
				PR$9STS AS Status,
				ROW_NUMBER() OVER(ORDER BY PCMLNM) AS RNUM
			FROM 
				[SCDATA].FQ670302 T0
				INNER JOIN [SCDATA].FQ67303 T1
					ON	T0.PR$9AN8 = T1.PC$9AN8
					AND T0.PR$9PA8 = 0
					AND T0.PRBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].FQ67304	T2
					ON PP$9AN8 = PR$9AN8
					AND PPIDLN = 0
					AND PPRCK7 = 1					-- Get only First Record by sequence number
			WHERE
					(AddressNumber IS NULL OR T0.PR$9AN8 = AddressNumber)
				AND	(MailingName = '*' OR UPPER(T1.PCMLNM) LIKE '%' || MailingName || '%')
				AND (EmailUrl = '*' OR UPPER(PCEMAL) LIKE '%' || EmailUrl || '%')				-- Email Address filter	
				AND	(ZipCode = '*' OR PRADDZ LIKE  '%' || ZipCode || '%')
				AND	(PhoneNumber = '*' OR PPPH1 LIKE '%' || PhoneNumber || '%')
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.EmailUrl,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd));

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
			
		OPEN TEMP_CURSOR;
	END;	
END;

-- #desc						Get Non related consumer Shiptos 
-- #bl_class	 	 			Premier.Consumer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param FilterTerm			Free Form Search Text
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown
-- #param TotalRowCount			Paging - Quantity of rows, result of search filter.

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetNonRelatedShipToSrchLst
(
	IN FilterTerm		VARGRAPHIC(40) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetNonRelatedShipToSrchLst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	DECLARE AddressNumber NUMERIC(15,0);

	IF ( LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( FilterTerm , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 ) 
	THEN
		SET AddressNumber = CAST(COALESCE(NULLIF(FilterTerm,''), '0') AS NUMERIC(15,0));
	END IF;

	BEGIN
		/* Cursor without filter */
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				PR$9AN8 AS AddressNumber,
				PCMLNM AS MailingName,
				PCEMAL AS EmailUrl,
				PRADD1 AS AddressLine1,
				PRADD2 AS AddressLine2,
				PRCTY1 AS City,
				PRADDS AS State, 
				PRADDZ AS ZipCodePostal, 
				PRMCU  AS BranchPlant, 
				PRASN  AS AdjustmentSchedule,
				PR$9STS AS Status,
				ROW_NUMBER() OVER (ORDER BY PCMLNM) AS RNUM
			FROM 
				[SCDATA].FQ670302 T0
				INNER JOIN [SCDATA].FQ67303 T1
					ON	T0.PR$9AN8 = T1.PC$9AN8
					AND T0.PR$9PA8 = 0
					AND T0.PRBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].FQ67304	T2
					ON PP$9AN8 = PR$9AN8
					AND PPIDLN = 0
					AND PPRCK7 = 1					-- Get only First Record by sequence number
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.EmailUrl,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;
		
		/* Cursor when filter terms is not '*' */
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				PR$9AN8 AS AddressNumber,
				PCMLNM AS MailingName,
				PCEMAL AS EmailUrl,
				PRADD1 AS AddressLine1,
				PRADD2 AS AddressLine2,
				PRCTY1 AS City,
				PRADDS AS State, 
				PRADDZ AS ZipCodePostal, 
				PRMCU  AS BranchPlant, 
				PRASN  AS AdjustmentSchedule,
				PR$9STS AS Status,
				ROW_NUMBER() OVER (ORDER BY PCMLNM) AS RNUM
			FROM 
				[SCDATA].FQ670302 T0
				INNER JOIN [SCDATA].FQ67303 T1
					ON	T0.PR$9AN8 = T1.PC$9AN8
					AND T0.PR$9PA8 = 0
					AND T0.PRBADT IN ('S', 'X')
				LEFT OUTER JOIN [SCDATA].FQ67304	T2
					ON PP$9AN8 = PR$9AN8
					AND PPIDLN = 0
					AND PPRCK7 = 1					-- Get only First Record by sequence number
			WHERE
				(AddressNumber IS NOT NULL AND T0.PR$9AN8 = AddressNumber)-- Address Number filter
				OR (UPPER(T1.PCMLNM) LIKE '%' || FilterTerm || '%'-- Contact Name filter
					OR UPPER(PCEMAL) LIKE '%' || FilterTerm || '%'-- Email Address filter	
					OR PRADDZ LIKE  '%' || FilterTerm || '%'-- Zip Code filter
					OR PPPH1 LIKE '%' || FilterTerm || '%')-- Phone filter
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.EmailUrl,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;
			
		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
			
		IF(FilterTerm = '*') THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;

	END;	
END;
-- #desc					Read ShipTo info
-- #bl_class				Premier.Consumer.ShipToInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param ContactID			Specific contact ID

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_GetShipToInfo
(	
	InstallationID	GRAPHIC(3) CCSID 13488,
	AddressNumber	NUMERIC(15,0),
	ContactID		DECIMAL(5,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_GetShipToInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	-- Get the PhoneType value constant
	DECLARE PHONECONSTANTCMP	VARGRAPHIC(4) CCSID 13488;
	DECLARE PHONECONSTANTIND	VARGRAPHIC(4) CCSID 13488;
	
	DECLARE PHONECMPINSTA		GRAPHIC(3) CCSID 13488;
	DECLARE PHONEINDINSTA		GRAPHIC(3) CCSID 13488;

	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT 	
		PR$9AN8		AS AddressNumber,		-- Address Number
		PR$9PA8		as ParentAddressNumber,	-- Parent Address
		PRALPH		AS AlphaName,			-- Alpha Name
		PCMLNM		AS MailingName,			-- Mailing Name
		PRADD1		AS AddressLine1,		-- Address Line 1
		PRADD2		AS AddressLine2,		-- Address Line 2
		PRADD3		AS AddressLine3,		-- Address Line 3
		PRADD4		AS AddressLine4,		-- Address Line 4
		PRCTY1		AS City,				-- City
		PRADDS		AS State, 				-- State
		PRADDZ		AS ZipCode, 			-- Zip Code
		PRCTR		AS Country,				-- Country
		PCIDLN		AS ContactID,		    -- Contact ID
		PCGNNM		AS Firstname,			-- First Name
		PCMDNM		AS Middlename,			-- Middle Name
		PCSRNM		AS Lastname,			-- Last Name
		PRURRF		AS Nickname,			-- Nick Name
		PS$9POBX	AS PoBoxFlag,			-- PoBoxFlag
		PRDEL1		AS DeliveryInstructions1,--DeliveryInstructions1
		PRDEL2		AS DeliveryInstructions2,--DeliveryInstructions2
		PR$9STS		AS Status,				-- Status
		MainPhone.Phone,					/* Phone*/
		0 as Selected
	FROM 
		[SCDATA].FQ670302 T0
		INNER JOIN [SCDATA].FQ67303 T1
			ON PR$9AN8 = PC$9AN8 AND
			PCIDLN = ContactID
		INNER JOIN [SCDATA].FQ67107					/* Profile Extended Information*/
			ON PS$9AN8 = T1.PC$9AN8
			AND PS$9TYP = 1 /* CONSUMER */
		LEFT OUTER JOIN TABLE(SCLIBRARY.CSM_GetConsumerPrimaryPhone(PR$9AN8, ContactID, CASE WHEN PS$9ICF = 0 THEN PHONECONSTANTIND ELSE PHONECONSTANTCMP END)) AS MainPhone
			ON MainPhone.ConsumerAddressNumber = PR$9AN8
	WHERE 
		PS$9AN8 = AddressNumber
	FOR FETCH ONLY;
	
	
	/* Get the PhoneType value constant */
	
	SET PHONECMPINSTA = InstallationID;
	SET PHONEINDINSTA = InstallationID;
	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	CALL [SCLIBRARY].CMM_GetConstantValue ('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);
	
	OPEN TEMP_CURSOR;	
END
 ;
-- #desc							Get Consumer ship to by address number
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param InstallationID			InstallationID 
-- #param ParentAddressNumber		Parent Address Number 
-- #param Status					Status

CREATE OR REPLACE FUNCTION [SCLIBRARY].CSM_GetShipToListFnc
(
	InstallationID		GRAPHIC(3) CCSID 13488,
	ParentAddressNumber DECIMAL(15,0),
	Status				VARGRAPHIC(1) CCSID 13488
)
RETURNS TABLE(
		AddressNumber			NUMERIC(15,0),	-- Address Number
		ParentAddressNumber		DECIMAL(15,0),	-- Parent Address
		AlphaName				GRAPHIC(40) CCSID 13488,		-- Alpha Name
		MailingName				GRAPHIC(40) CCSID 13488,		-- Mailing Name
		AddressLine1			GRAPHIC(40) CCSID 13488,		-- Address Line 1
		AddressLine2			GRAPHIC(40) CCSID 13488,		-- Address Line 2
		AddressLine3			GRAPHIC(40) CCSID 13488,		-- Address Line 3
		AddressLine4			GRAPHIC(40) CCSID 13488,		-- Address Line 4
		City					GRAPHIC(25) CCSID 13488,		-- City
		State 					GRAPHIC(3) CCSID 13488,		-- State
		ZipCode 				GRAPHIC(12) CCSID 13488,		-- Zip Code
		Country					GRAPHIC(3) CCSID 13488,		-- Country
		ContactId				DECIMAL(5,0),	-- Contact ID
		Firstname				GRAPHIC(25) CCSID 13488,		-- First Name
		Middlename				GRAPHIC(25) CCSID 13488,		-- Middle Name
		Lastname				GRAPHIC(25) CCSID 13488,		-- Last Name
		Nickname				GRAPHIC(15) CCSID 13488,		-- Nick Name
		PoBoxFlag				DECIMAL(31,0),		-- PoBoxFlag
		DeliveryInstructions1	GRAPHIC(30) CCSID 13488,		-- DeliveryInstructions1
		DeliveryInstructions2	GRAPHIC(30) CCSID 13488,		-- DeliveryInstructions2
		Status					GRAPHIC(1) CCSID 13488,		-- Status
		Selected				GRAPHIC(1) CCSID 13488,	-- Selected
		Phone					VARGRAPHIC(50) CCSID 13488,		-- Phone
		IndividualCompanyFlag	DECIMAL(31,0)
)
LANGUAGE SQL
SPECIFIC [SCLIBRARY].CSM_GetShipToListFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
BEGIN 

	-- Get the PhoneType value constant
	DECLARE PHONECONSTANTCMP VARGRAPHIC(4) CCSID 13488;
	DECLARE PHONECONSTANTIND VARGRAPHIC(4) CCSID 13488;
	
	DECLARE PHONECMPINSTA     GRAPHIC(3) CCSID 13488;
	DECLARE PHONEINDINSTA     GRAPHIC(3) CCSID 13488;
	
	SET PHONECMPINSTA = InstallationID;
	SET PHONEINDINSTA = InstallationID;
	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	CALL [SCLIBRARY].CMM_GetConstantValue ('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);
	
	IF(STATUS = '') THEN
		SET STATUS = NULL;
	END IF;

RETURN (SELECT 
		PR$9AN8		AS AddressNumber,		-- Address Number
		PR$9PA8		As ParentAddressNumber,	-- Parent Address
		PRALPH		AS AlphaName,			-- Alpha Name
		PCMLNM		AS MailingName,			-- Mailing Name
		PRADD1		AS AddressLine1,		-- Address Line 1
		PRADD2		AS AddressLine2,		-- Address Line 2
		PRADD3		AS AddressLine3,		-- Address Line 3
		PRADD4		AS AddressLine4,		-- Address Line 4
		PRCTY1		AS City,				-- City
		PRADDS		AS State, 				-- State
		PRADDZ		AS ZipCode, 			-- Zip Code
		PRCTR		AS Country,				-- Country
		PCIDLN		AS ContactId,			-- Contact ID
		PCGNNM		AS Firstname,			-- First Name
		PCMDNM		AS Middlename,			-- Middle Name
		PCSRNM		AS Lastname,			-- Last Name
		PRURRF		AS Nickname,			-- Nick Name
		PS$9POBX	AS PoBoxFlag,			-- PoBoxFlag
		PRDEL1		AS DeliveryInstructions1,--DeliveryInstructions1
		PRDEL2		AS DeliveryInstructions2,--DeliveryInstructions2	
		PR$9STS		AS Status,				-- Status
		'0'			AS Selected,			-- Selected
		MainPhone.Phone,					-- Phone
		PS$9ICF		AS IndividualCompanyFlag	
	FROM 
		[SCDATA].FQ670302 T0	
	INNER JOIN [SCDATA].FQ67303 T1
		ON  T0.PR$9AN8 = T1.PC$9AN8
		AND T1.PCIDLN = 0 --ONLY CONTACT 0
	INNER JOIN [SCDATA].FQ67107					-- Profile Extended Information
		ON PS$9AN8 =  T1.PC$9AN8
		AND PS$9TYP = 1 --CONSUMER
	LEFT OUTER JOIN TABLE(SCLIBRARY.CSM_GetConsumerPrimaryPhone(PR$9AN8, 0, CASE WHEN PS$9ICF = 0 THEN PHONECONSTANTIND ELSE PHONECONSTANTCMP END)) AS MainPhone
			ON MainPhone.ConsumerAddressNumber = PR$9AN8
	WHERE 
			T0.PRBADT IN ('S', 'X')
		AND T0.PR$9PA8 = ParentAddressNumber
		AND (Status = '*' OR T0.PR$9STS = Status)
			
	UNION ALL
		
	SELECT 	
		PR$9AN8		AS AddressNumber,		-- Address Number
		PR$9PA8		AS ParentAddressNumber,	-- Parent Address
		PRALPH		AS AlphaName,			-- Alpha Name
		PCMLNM		AS MailingName,			-- Mailing Name
		PRADD1		AS AddressLine1,		-- Address Line 1
		PRADD2		AS AddressLine2,		-- Address Line 2
		PRADD3		AS AddressLine3,		-- Address Line 3
		PRADD4		AS AddressLine4,		-- Address Line 4
		PRCTY1		AS City,				-- City
		PRADDS		AS State, 				-- State
		PRADDZ		AS ZipCode, 			-- Zip Code
		PRCTR		AS Country,				-- Country
		PCIDLN		AS ContactId,			-- Contact ID
		PCGNNM		AS Firstname,			-- First Name
		PCMDNM		AS Middlename,			-- Middle Name
		PCSRNM		AS Lastname,			-- Last Name
		PRURRF		AS Nickname,			-- Nick Name
		PS$9POBX	AS PoBoxFlag,			-- PoBoxFlag
		PRDEL1		AS DeliveryInstructions1,--DeliveryInstructions1
		PRDEL2		AS DeliveryInstructions2,--DeliveryInstructions2
		PR$9STS		AS Status,				-- Status
		'0' AS Selected,
		MainPhone.Phone,					-- Phone
		PS$9ICF		AS IndividualCompanyFlag	
	FROM 
		[SCDATA].FQ670302 T0	
	INNER JOIN [SCDATA].FQ67303 T1
		ON  T0.PR$9AN8 = T1.PC$9AN8
		AND T1.PCIDLN = 0 --ONLY CONTACT 0
	INNER JOIN [SCDATA].FQ67107					-- Profile Extended Information
		ON PS$9AN8 =  T1.PC$9AN8
		AND PS$9TYP = 1 --CONSUMER
	LEFT OUTER JOIN TABLE(SCLIBRARY.CSM_GetConsumerPrimaryPhone(PR$9AN8, 0, CASE WHEN PS$9ICF = 0 THEN PHONECONSTANTIND ELSE PHONECONSTANTCMP END)) AS MainPhone
			ON MainPhone.ConsumerAddressNumber = PR$9AN8
	WHERE 
		T0.PRBADT IN ('S', 'X')
		AND T0.PR$9AN8 = ParentAddressNumber
		AND (Status = '*' OR T0.PR$9STS = Status)
);

END;
-- #desc							Update Brand Mailing
-- #bl_class	 	 				Premier.Consumer.BrandMailingSubscription.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AddressNumber				AddressNumber
-- #param AddressBookType			AddressBookType
-- #param ContactID					ContactID
-- #param Brand						Brand
-- #param MailPreference			MailPreference
-- #param EmailPreference			EmailPreference
-- #param EmailFormat				EmailFormat
-- #param MailContentPreference		MailContentPreference
-- #param PartnerMail				PartnerMail
-- #param ShareEmail				ShareEmail

CREATE OR REPLACE Procedure [SCLIBRARY].CSM_UpdBrandMailSubscription 
(
	IN AddressNumber			NUMERIC(15,0),
	IN AddressBookType			NUMERIC(15,0),
	IN ContactID				NUMERIC(15,0),
	IN Brand					VARCHAR(3),
	IN MailPreference			VARCHAR(1),
	IN EmailPreference			NUMERIC(15,0),
	IN EmailFormat				NUMERIC(15,0),
	IN MailContentPreference	VARCHAR(3),
	IN PartnerMail  			VARCHAR(1),
	IN ShareEmail				VARCHAR(1),

	IN MailingFlag1				VARCHAR(1),
	IN MailingFlag2				VARCHAR(1),
	IN MailingFlag3				VARCHAR(1),
	IN MailingFlag4				VARCHAR(1),
	IN MailingFlag5				VARCHAR(1),
	IN MailingFlag6				VARCHAR(1),
	IN MailingFlag7				VARCHAR(1),
	IN MailingFlag8				VARCHAR(1),
	IN MailingFlag9				VARCHAR(1),
	IN MailingFlag10			VARCHAR(1),
	IN MailingCatCode1			VARCHAR(3),
	IN MailingCatCode2			VARCHAR(3),
	IN MailingCatCode3			VARCHAR(3),
	IN MailingCatCode4			VARCHAR(3),
	IN MailingCatCode5			VARCHAR(3),
	IN MailingCatCode6			VARCHAR(10),
	IN MailingCatCode7			VARCHAR(10),
	IN MailingCatCode8			VARCHAR(10),
	IN MailingCatCode9			VARCHAR(10),
	IN MailingCatCode10			VARCHAR(10),

	IN UserReserveCode1			VARCHAR(3),
	IN UserReserveCode2			VARCHAR(10),
	IN UserReservedReference	VARCHAR(15),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedChar			VARCHAR(1),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN WorkStationId			VARCHAR(10),
	IN TimeLastUpdated			NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CSM_UpdBrandMailSubscription
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	UPDATE 
		[SCDATA].FQ671041
	SET
		 PR$9MAIL	=	MailPreference,
		 PR$9EMYN	=	EmailPreference,
		 PR$9EMFP	=	EmailFormat,
		 PR$9MLCP	=	MailContentPreference,
		 PR$9MLP	=	PartnerMail,
		 PR$9EMALS	=	ShareEmail,
		 PR$9MLF1	=	MailingFlag1,
		 PR$9MLF2	=	MailingFlag2,
		 PR$9MLF3	=	MailingFlag3,
		 PR$9MLF4	=	MailingFlag4,
		 PR$9MLF5	=	MailingFlag5,
		 PR$9MLF6	=	MailingFlag6,
		 PR$9MLF7	=	MailingFlag7,
		 PR$9MLF8	=	MailingFlag8,
		 PR$9MLF9	=	MailingFlag9,
		 PR$9MLF10	=	MailingFlag10,
		 PR$9MLC1	=	MailingCatCode1,
		 PR$9MLC2	=	MailingCatCode2,
		 PR$9MLC3	=	MailingCatCode3,
		 PR$9MLC4	=	MailingCatCode4,
		 PR$9MLC5	=	MailingCatCode5,
		 PR$9MLC6	=	MailingCatCode6,
		 PR$9MLC7	=	MailingCatCode7,
		 PR$9MLC8	=	MailingCatCode8,
		 PR$9MLC9	=	MailingCatCode9,
		 PR$9MLC10	=	MailingCatCode10,
		 PRURC1		=	UserReserveCode1,
		 PRURC2		=	UserReserveCode2,
		 PRURRF		=	UserReservedReference,
		 PRURAB		=	UserReservedNumber,
		 PRURDT		=	UserReservedDate,
		 PRURAT		=	UserReservedAmount,
		 PRAURCH1	=	UserReservedChar,
		 PRUSER		=	"USERID",
		 PRPID		=	"PROGRAMID",
		 PRUPMJ		=	DateUpdated,
		 PRJOBN		=	WorkStationId,
		 PRUPMT		=	TimeLastUpdated
		
	WHERE 
			PR$9AN8  = AddressNumber
		AND PR$9TYP  = AddressBookType
		AND PRIDLN	 = ContactID
		AND PR$9SRP1 = Brand;
END ;
-- #desc					GET COSTUMER STATUS
-- #bl_class	 	 		Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address number

CREATE OR REPLACE Procedure [SCLIBRARY].CST_ExcCheckCustomerStatus
(
	IN AddressNumber NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_ExcCheckCustomerStatus 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR		

SELECT
	AICUSTS AS Status
FROM
	[SCDATA].F03012
WHERE
	AIAN8 = AddressNumber
	AND	AICO = '00000'
	
FOR FETCH ONLY;

OPEN TEMP_CURSOR1;
END ;
-- #desc					Validate if Customer/contact exists.
-- #bl_class				Premier.Customer.CustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID 

CREATE OR REPLACE Procedure [SCLIBRARY].CST_ExcValidateCustomerInfo
(
	IN AddressNumber	NUMERIC(15,0),
	IN ContactID		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_ExcValidateCustomerInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	--Read Customer Information
	DECLARE TEMP_CURSOR CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 	
	
	SELECT 
		WWMLNM AS MailingName,
		[SCLIBRARY].CST_GetPrimaryElectAddressFnc(WWAN8,WWIDLN,'E') AS EmailAddress
	FROM [SCDATA].F0101     	    /* Address Book Master*/
	INNER JOIN [SCDATA].F0111	/*Contact Information PS$9ICF*/
		ON WWAN8 = ABAN8
		AND WWIDLN = ContactID	
	WHERE 
		ABAN8 = AddressNumber
    FOR FETCH ONLY
    OPTIMIZE FOR 1 ROW;
	
	OPEN TEMP_CURSOR;
END ;
-- #desc						Validate if address Number is Active customer
-- #bl_class					Premier.Customer.ValidateCustomerRecordCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			AddressNumber
-- #param IsBillTo 				specific Is Bill To  /*1 when is Billto, 0 when is Shipto*/
-- #param ValidAddressNumber	Output validation result. B = Valid Billto, S = Valid Shipto, * = Invalid Address Number

CREATE OR REPLACE Procedure [SCLIBRARY].CST_ExcValidateCustomerRecord 
(
	IN AddressNumber NUMERIC(15,0),
	IN IsBillTo NUMERIC(15,0), /*1 when is Billto, 0 when is Shipto*/
	OUT ValidAddressNumber VARCHAR(3) 
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL  
SPECIFIC [SCLIBRARY].CST_ExcValidateCustomerRecord
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE BillToType VARCHAR(1);
	DECLARE tmpValidAddressNumber  VARCHAR(3);
	
	SELECT DISTINCT AIBADT Into BillToType
		FROM
			[SCDATA].F03012
		WHERE
			AIAN8 = AddressNumber
			AND AICUSTS <> '1'	/* is active */
			AND AICO = '00000';
	
	IF(IsBillTo = 1 AND BillToType IN ('B','X'))THEN	     /* Is BillTo Only and Billto-Shipto(X)*/
		SET tmpValidAddressNumber = ('B');		/*Valid Bill to*/
	ELSEIF(IsBillTo = 0 AND BillToType IN ('S','X'))THEN	 /* Is Shito Only and Shipto-Billto(X)*/
		SET tmpValidAddressNumber = 'S';		/*Valid Ship to*/		
	ELSE
	    SET tmpValidAddressNumber = '*';			/*Not valid AddressNumber*/
	END IF;
	
	SET ValidAddressNumber = tmpValidAddressNumber;
END;
-- #desc					Return the "Billto(B) and Shillto/Shipto(X)" actives
-- #bl_class				Premier.Customer.CustomerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID    Installation ID
-- #param AddressNumber		AddressNumber
-- #param MailingName		Mailing Name
-- #param State				State
-- #param ZipCode			Zip Code
-- #param Country			Country
-- #param AddressLine1      Address Line 1
-- #param City				City
-- #param SortBy			Sort By Colum name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageIndex			Page Index
-- #param PageSize			Page Size

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetBillToList
(	
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN MailingName 		VARGRAPHIC(40) CCSID 13488,
	IN State			GRAPHIC(3) CCSID 13488,
	IN ZipCode			VARGRAPHIC(12) CCSID 13488,
	IN Country			GRAPHIC(3) CCSID 13488,
	IN AddressLine1		VARGRAPHIC(40) CCSID 13488,
    IN City				VARGRAPHIC(25) CCSID 13488,
	IN SortBy			VARCHAR(20),
	IN SortDir			VARCHAR(1),
	IN PageIndex		INT,
    IN PageSize			INT
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetBillToList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE INNER_DYNAMIC				VARGRAPHIC(1000) CCSID 13488;
	DECLARE SORT_DYNAMIC				VARGRAPHIC(42) CCSID 13488;

	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC					VARGRAPHIC(8000) CCSID 13488;

	/* Gets the Document Restrictions Parameters */
	DECLARE	CtRestric	VARGRAPHIC(1) CCSID 13488;
	DECLARE CtINID		GRAPHIC(3) CCSID 13488;

	/* Paging */
    DECLARE RowStart INT;
    DECLARE RowEnd INT;

	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);

	SET CtINID = InstallationID;
	/* Gets the Document Restrictions Parameters*/
	CALL [SCLIBRARY].CMM_GetConstantValue ('CT_RESTRIC', CtINID, CtRestric);

	/* Dynamic sort statement */
	SET SORT_DYNAMIC = CASE SortBy 
							WHEN 'AddressNumber' THEN 'A.AIAN8' 
							WHEN 'City' THEN 'UPPER(AL.ALCTY1)' 
							WHEN 'State' THEN 'AL.ALADDS' 
							WHEN 'ZipCode' THEN 'AL.ALADDZ' 
							WHEN 'AddressLine1' THEN 'UPPER(AL.ALADD1)' 
							ELSE 'UPPER(WW.WWMLNM)' END;

	/* Dynamic sort direction statement */
	SET SORT_DYNAMIC = SORT_DYNAMIC || ' ' || CASE SortDir WHEN 'A' THEN 'ASC' WHEN 'D' THEN 'DESC' ELSE '' END;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;
		
		/* Dynamic query condition */
		SET WHERE_DYNAMIC = '';
		SET INNER_DYNAMIC = N' ';

		IF (MailingName <> '*') THEN
			SET WHERE_DYNAMIC = N' AND UPPER(WW.WWMLNM) LIKE ''%'' || ? || ''%''';
		ELSE
			SET WHERE_DYNAMIC = N' AND (1 = 1 OR ? = ''*'') ';
		END IF;
		
		IF (ZipCode <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AL.ALADDZ LIKE ''%'' || ? || ''%''';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;
		
		IF (State <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AL.ALADDS = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;
		
		IF (Country <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AL.ALCTR = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;
		
		IF (AddressNumber <> 0) THEN
			SET WHERE_DYNAMIC =  WHERE_DYNAMIC || N' AND A.AIAN8 = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = 0) ';
		END IF;
	
		IF (AddressLine1 <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(AL.ALADD1) LIKE ''%'' || ? || ''%''';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;
	
		IF (City <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(AL.ALCTY1) LIKE ''%'' || ? || ''%''';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;
		
		IF (CtRestric = '1') THEN
			SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
									ON DR.DR$9INID = ''' || CtINID || '''
									AND DR.DR$9CNST = ''CT_RESTRIC''
									AND DR.DRKY = WW.WWTYC ' ; 
		END IF;

		SET WHERE_DYNAMIC = N' WHERE A.AICO = ''00000'' AND A.AIBADT IN (''X'',''B'') AND A.AICUSTS <> ''1''' || WHERE_DYNAMIC;

		SET SQL_DYNAMIC = '
		WITH CTE1 AS (
				SELECT
					A.AICO      AS Company,
					A.AIAN8     AS AddressNumber,
					WW.WWTYC    AS WWTYC,            
					WW.WWIDLN   AS ContactID,
					WW.WWGNNM   AS FirstName,
					WW.WWMDNM   AS MiddleName,
					WW.WWSRNM   AS LastName,
					WW.WWMLNM   AS MailingName,                   
					AL.ALADD1   AS AddressLine1, 
					AL.ALADD2   AS AddressLine2, 
					AL.ALADD3   AS AddressLine3,
					AL.ALADD4   AS AddressLine4,
					AL.ALADDZ   AS ZipCode,
					AL.ALCTY1   AS City,
					AL.ALADDS   AS State,
					AL.ALCOUN   AS County,
					AL.ALCTR    AS Country,
					A.AITXA1    AS TaxAreaCode,
					A.AIEXR1    AS TaxExplanationCode,
					AB.ABTXCT   AS Certificate,
					AB.ABCM		AS CreditMessage,                 
					A.AIEDF2    AS ItemRestrictionsCode,
					AB.ABMCU    AS BranchPlant,
					ROW_NUMBER() OVER(ORDER BY ' || SORT_DYNAMIC || ') AS RNUM
				FROM [SCDATA].F03012 A
			INNER JOIN [SCDATA].F0111 WW
				ON A.AIAN8 = WW.WWAN8
			INNER JOIN [SCDATA].F0101 AB      /*Address Book*/
				ON A.AIAN8 = AB.ABAN8      
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, '|| CurrentJulianDate ||')) AL      /*Address*/
				ON  AB.ABAN8 = AL.ALAN8 ' ||
			INNER_DYNAMIC ||
			WHERE_DYNAMIC || '
			)
			SELECT 
				CTE1.Company, CTE1.AddressNumber, CTE1.ContactID, CTE1.FirstName, CTE1.MiddleName, CTE1.LastName, CTE1.MailingName,
				'''' AS BillingAddressType, CTE1.AddressLine1, CTE1.AddressLine2, CTE1.AddressLine3, CTE1.AddressLine4, CTE1.ZipCode, 
				CTE1.City, CTE1.State, CTE1.County, CTE1.Country, '''' AS AccountRepresentative, 0 AS Carrier, CTE1.TaxAreaCode, 
				CTE1.TaxExplanationCode, CTE1.Certificate, CTE1.CreditMessage, '''' AS Email, '''' AS Url, -1 AS IndividualCompanyFlag, 
				'''' AS modeOfTransport, '''' AS CustomerPORequired, CTE1.ItemRestrictionsCode, CTE1.BranchPlant, 
				0 AS MinimumOrderAmount, 0 AS MaximumOrderAmount, (SELECT COUNT(1) AS TotalRowCount FROM CTE1) AS TotalRowCount
			FROM CTE1	 
			WHERE ((? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ?)) ';

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
		OPEN TEMP_CURSOR1 USING MailingName, ZipCode, State, Country, AddressNumber, AddressLine1, City, PageIndex, PageSize, RowStart, RowEnd;

	END;
END
 ;
-- #desc					Fetch Contact Additional and Children Information
-- #bl_class	 	 		Premier.Customer.Contact.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number
-- #param ContactID			Contact ID
-- #param ConnectionName	The Parameter envoy is only from Ecommerce (POS and MC send empty)
-- #param IsShipTo			Is ShipTo Y/N, N to retrieve additional information 

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetContactChildren
(
	IN AddressNumber NUMERIC(15,0),
	IN ContactID NUMERIC(15,0),
    IN LanguagePreference VARCHAR(2),
	IN IsShipTo VARCHAR(1)
)
DYNAMIC RESULT SETS 4 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetContactChildren 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE AddressType NUMERIC(15,0) DEFAULT 0; /* CUSTOMER */	

	/* Get Contact Extended Information */
	IF(IsShipTo = 'N') THEN
		CALL [SCLIBRARY].PRO_GetContactExtInformation (AddressNumber, AddressType , ContactID);
	END IF;

	/* Get Contact Phone List */
	CALL [SCLIBRARY].CST_GetPhones (AddressNumber, ContactID, null, LanguagePreference);

	/* Get CreditCard List */
	IF(IsShipTo = 'N') THEN
		CALL [SCLIBRARY].PRO_GetCreditCards (AddressNumber , AddressType , null, null, '*', '*', '*', '*', '*', 'ExpDate', 'A', 0, 0, LanguagePreference);
	END IF;

	/* Get Electronic Address */
	IF(IsShipTo = 'N') THEN
		CALL [SCLIBRARY].CST_GetElectronicAddress (AddressNumber , ContactID, null, null);
	END IF;
		
END
 ;
-- #desc					Fetch Customer Additional and Children information
-- #bl_class	 	 		Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Customer Number
-- #param ContactID			First ContactID 

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetCustomerChildren
(
	IN AddressNumber NUMERIC(15,0),
	IN ContactID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetCustomerChildren 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE AddressType NUMERIC(15,0) DEFAULT 0;-- CUSTOMER
	
	SET ContactID = COALESCE(ContactID,0);
	
	--Get Customer Contact List excluding main ContactId
	CALL [SCLIBRARY].CST_GetCustomerContacts (AddressNumber , AddressType);

END


 ;
-- #desc					Get the companies for the AN8. These are the companies where the Address exists (F03012)
-- #bl_class	 	 		Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		Address Number 
-- #param StoreId			Store Id

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetCustomerCompanyByInst
(
	IN AddressNumber NUMERIC(15,0),
	IN StoreId       GRAPHIC(3) CCSID 13488
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetCustomerCompanyByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE ConstantStore		GRAPHIC(3) CCSID 13488; 
	DECLARE CompanyConstant		VARGRAPHIC(1) CCSID 13488;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			AICO AS CompanyID,
			CCNAME AS Description
		FROM
			[SCDATA].F03012
		INNER JOIN 
			[SCDATA].F0010
			ON CCCO = AICO
		WHERE
			AIAN8 = AddressNumber
			AND (AICO IN (SELECT CICO FROM [SCDATA].FQ679912 WHERE CI$9INID = ConstantStore) OR AICO = '00000');

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			AICO AS CompanyID,
			CCNAME AS Description
		FROM
			[SCDATA].F03012
		INNER JOIN 
			[SCDATA].F0010
			ON CCCO = AICO
		WHERE
			AIAN8 = AddressNumber;

	SET ConstantStore = StoreId; 
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantStore, CompanyConstant);
	
	IF CompanyConstant = 'L' THEN
		OPEN TEMP_CURSOR1;
	ELSE
		OPEN TEMP_CURSOR2;
	END IF;

END ;
-- #desc					Read Customer read only info
-- #bl_class				Premier.Customer.CustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param Company			Company number.
-- #param ContactID			specific contact ID

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetCustomerInfo
(
	IN Company				VARCHAR(10),
	IN AddressNumber		NUMERIC(15,0),
	IN ContactID			NUMERIC(15,0),
	IN LanguagePreference	VARCHAR(2)
)
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetCustomerInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			AICO		AS Company,
			AIAN8		AS AddressNumber,
			WW.WWIDLN	AS ContactID,
			WW.WWGNNM	AS FirstName,
			WW.WWMDNM	AS MiddleName,
			WW.WWSRNM	AS LastName,
			WW.WWMLNM	AS MailingName,
			AIBADT		AS BillingAddressType,
			AL.ALADD1	AS AddressLine1, 
			AL.ALADD2	AS AddressLine2, 
			AL.ALADD3	AS AddressLine3,
			AL.ALADD4	AS AddressLine4,
			AL.ALADDZ	AS ZipCode,
			AL.ALCTY1	AS City,
			AL.ALADDS	AS State,
			AL.ALCOUN	AS County,
			AL.ALCTR	AS Country,
			AICMGR		AS AccountRepresentative,
			AICARS		AS Carrier,
			AITXA1		AS TaxAreaCode,
			AIEXR1		AS TaxExplanationCode,
			AB.ABTXCT	AS Certificate,
			AB.ABCM		AS CreditMessage,	
			PS.PS$9ICF  AS IndividualCompanyFlag,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(AddressNumber, ContactID,'E') AS Email,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(AddressNumber, ContactID,'I') AS Url,
			PS.PS$9ICF	AS RecordType,
			''			AS modeOfTransport,
			AIPORQ		AS	CustomerPORequired,
			AIEDF2		AS	ItemRestrictionsCode,
			AB.ABMCU	AS BranchPlant,
			AIMINO		AS MinimumOrderAmount,
			AIMAXO		AS MaximumOrderAmount
		FROM [SCDATA].F0101 AB	 -- Address Book Master 		
		INNER JOIN  TABLE(SCLIBRARY.CST_GetCustomerInfoFnc(Company, AddressNumber)) IA -- Customer Master 
		    ON AIAN8 = AB.ABAN8		
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	 -- Address Book Join 
			ON AL.ALAN8 = AB.ABAN8	
		INNER JOIN [SCDATA].F0111 WW	 --Contact Information PS$9ICF 
			ON WW.WWAN8 = AB.ABAN8 
			AND WW. WWIDLN = CONTACTID 
		LEFT OUTER JOIN [SCDATA].FQ67107 PS /*Customer/Consumer Extended Information*/
			ON PS.PS$9AN8 = AB.ABAN8
			AND PS.PS$9TYP= 0
		WHERE 
			AB. ABAN8 = ADDRESSNUMBER 	
		FOR FETCH ONLY ; 
		
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
	OPEN TEMP_CURSOR1;
		
	--Get Customer Phone List
	CALL [SCLIBRARY].CST_GetPhones (AddressNumber, ContactID, null,LanguagePreference);
	
END



  ;
-- #desc					Read Customer read only info
-- #bl_class				Premier.Customer.CustomerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A


-- #param AddressNumber		Address Number
-- #param MailingName	    MailingName
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown
-- #param InstallationID	Installation Id.

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetCustomerList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN MailingName		VARGRAPHIC(40) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetCustomerList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;

	DECLARE CurrentJulianDate NUMERIC(6,0);
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		WITH CTE AS (
			SELECT 
				AB.ABAN8,
				WW.WWIDLN,
				WW.WWGNNM	AS FirstName,
				WW.WWMDNM	AS MiddleName,
				WW.WWSRNM	AS LastName,
				WW.WWMLNM	AS MailingName,
				AL.ALADD1	AS AddressLine1, 
				AL.ALADD2	AS AddressLine2, 
				AL.ALADD3	AS AddressLine3,
				AL.ALADD4	AS AddressLine4,
				AL.ALADDZ	AS ZipCode,
				AL.ALCTY1	AS City,
				AL.ALADDS	AS State,
				AL.ALCOUN	AS County,
				AL.ALCTR	AS Country,
				AB.ABTXCT	AS Certificate,
				AB.ABCM		AS CreditMessage,
				AB.ABMCU	AS BranchPlant,
				ROW_NUMBER() OVER (ORDER BY ABAN8) AS RNUM
			FROM [SCDATA].F0101 AB	/* Address Book Master*/
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	/* Address Book Join*/
				ON AL.ALAN8 = AB.ABAN8
			INNER JOIN [SCDATA].F0111 WW	/* Contact Information PS$9ICF */
				ON WWAN8 = ABAN8
			WHERE
				ABAN8 = AddressNumber	/* AddressNumber filter*/
		)
		SELECT
			'00000'		AS Company,
			ABAN8		AS AddressNumber,
			WWIDLN		AS ContactID,
			A.FirstName,
			A.MiddleName,
			A.LastName,
			A.MailingName,
			''			AS BillingAddressType,
			A.AddressLine1, 
			A.AddressLine2, 
			A.AddressLine3,
			A.AddressLine4,
			A.ZipCode,
			A.City,
			A.State,
			A.County,
			A.Country,
			''			AS AccountRepresentative,
			0			AS Carrier,
			''			AS TaxAreaCode,
			''			AS TaxExplanationCode,
			A.Certificate,
			A.CreditMessage,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(ABAN8, WWIDLN, 'E') AS Email,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(ABAN8, WWIDLN, 'I') AS Url,
			-1			AS IndividualCompanyFlag,
			''			AS modeOfTransport,
			''			AS CustomerPORequired,
			''			AS ItemRestrictionsCode,
			A.BranchPlant,
			0			AS MinimumOrderAmount,
			0			AS MaximumOrderAmount,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		WITH CTE AS (
			SELECT 
				AB.ABAN8,
				WW.WWIDLN,
				WW.WWGNNM	AS FirstName,
				WW.WWMDNM	AS MiddleName,
				WW.WWSRNM	AS LastName,
				WW.WWMLNM	AS MailingName,
				AL.ALADD1	AS AddressLine1, 
				AL.ALADD2	AS AddressLine2, 
				AL.ALADD3	AS AddressLine3,
				AL.ALADD4	AS AddressLine4,
				AL.ALADDZ	AS ZipCode,
				AL.ALCTY1	AS City,
				AL.ALADDS	AS State,
				AL.ALCOUN	AS County,
				AL.ALCTR	AS Country,
				AB.ABTXCT	AS Certificate,
				AB.ABCM		AS CreditMessage,
				AB.ABMCU	AS BranchPlant,
				ROW_NUMBER() OVER (ORDER BY ABAN8) AS RNUM
			FROM [SCDATA].F0101 AB	/* Address Book Master*/
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	/* Address Book Join*/
				ON AL.ALAN8 = AB.ABAN8
			INNER JOIN [SCDATA].F0111 WW	/* Contact Information PS$9ICF */
				ON WWAN8 = ABAN8
			WHERE
				UPPER(WWMLNM) LIKE '%' || MailingName || '%'
		)
		SELECT
			'00000'		AS Company,
			ABAN8		AS AddressNumber,
			WWIDLN		AS ContactID,
			A.FirstName,
			A.MiddleName,
			A.LastName,
			A.MailingName,
			''			AS BillingAddressType,
			A.AddressLine1, 
			A.AddressLine2, 
			A.AddressLine3,
			A.AddressLine4,
			A.ZipCode,
			A.City,
			A.State,
			A.County,
			A.Country,
			''			AS AccountRepresentative,
			0			AS Carrier,
			''			AS TaxAreaCode,
			''			AS TaxExplanationCode,
			A.Certificate,
			A.CreditMessage,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(ABAN8, WWIDLN, 'E') AS Email,
			[SCLIBRARY].CST_GetPrimaryElectAddressFnc(ABAN8, WWIDLN, 'I') AS Url,
			-1			AS IndividualCompanyFlag,
			''			AS modeOfTransport,
			''			AS CustomerPORequired,
			''			AS ItemRestrictionsCode,
			A.BranchPlant,
			0			AS MinimumOrderAmount,
			0			AS MaximumOrderAmount,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		IF(AddressNumber > 0) THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;
			
	END;
END;
-- #desc					Read Customer Parent Name
-- #bl_class				Premier.Customer.Customer.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetCustomerParentName
(
	AddressNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetCustomerParentName 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

		SELECT 
			LTRIM(RTRIM(ABALPH))  ParentName
		FROM 
			[SCDATA].F0101
		WHERE
			ABAN8 = AddressNumber
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END
 ;
-- #desc					Read Customer Stadistical Information
-- #bl_class				Premier.Customer.CustomerStatInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

--�#param�StoreId			StoreId
-- #param AddressNumber		AddressNumber
-- #param Company			Company number.

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetCustomerStatInfo
(
	IN StoreId GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN Company			GRAPHIC(5) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetCustomerStatInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE CreditCheckLevel	GRAPHIC(1) CCSID 13488;
	DECLARE CreditCheckLevelVal GRAPHIC(1) CCSID 13488;
	DECLARE	SeparatorFlex		GRAPHIC(1) CCSID 13488;
	DECLARE EXIST				INT;
	DECLARE CustomerCompany		GRAPHIC(5) CCSID 13488;

	--------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		AddressNumber AS AddressNumber,
		CustomerCompany AS Company,
		COALESCE(A.RTDAG,0) AS DateAgeAsOf , -- or cutoff date
		COALESCE(A.RTAAP,0) AS AccountBalanceDue,
		COALESCE(A.RTPDA,0)  AS AccountBalancePastDue,
		B.AIEXHD AS ExemptCreditHold,
		B.AIAPRC AS OpenOrders, 
		B.AIACL AS CreditLimit,
		B.AIDAOJ AS DateAccountOpened,
		B.AITRAR AS PaymentTermsCode,
		C.PNPTD AS PaymentsTermsDesc,
		B.AIASTY AS InvoicedYTD,
		B.AISPYE AS InvoicedPriorYear,
		COALESCE(A.RTCRCD,'') AS CurrencyCode,
		D1.CVDL01 AS CurrencyDesc,
		COALESCE(A.RTDAG,0) AS DateLastUpdated,
		COALESCE(E.RSALP,0) AS LastPaymentApplied,
		COALESCE(E.RSDLP,0) AS DateOfLastPayment,
		COALESCE(A.RTFTR,0) AS AgingFuture,
		COALESCE(A.RTCURR,0) AS AgingCurrent,
		COALESCE(A.RTAG1,0) AS AgingCategory1,
		COALESCE(A.RTAG2,0) AS AgingCategory2,
		COALESCE(A.RTAG3,0) AS AgingCategory3,
		COALESCE(A.RTAG4,0) AS AgingCategory4,
		COALESCE(A.RTAG5,0) AS AgingCategory5,
		COALESCE(A.RTAG6,0) AS AgingCategory6,
		COALESCE(A.RTAG7,0) AS AgingCategory7
	FROM  [SCDATA].F03012 B		 	
	LEFT OUTER JOIN [SCDATA].F03B15 A				--Credit and Cash Management		
		ON  A.RTAN8 = B.AIAN8 
		AND A.RTCO = Company 
		AND A.RTPART = CreditCheckLevelVal
	INNER JOIN [SCDATA].F0014 C		--Payment Terms
		ON B.AITRAR = C.PNPTC 
	LEFT OUTER JOIN [SCDATA].F0013 D1
		ON	D1.CVCRCD = A.RTCRCD
	LEFT OUTER JOIN [SCDATA].F03B16S E --A/R Statistical Summary file 
		ON E.RSAN8 = A.RTAN8
		AND E.RSCO = A.RTCO
		AND E.RSPART = CreditCheckLevelVal
	WHERE
		B.AIAN8 = AddressNumber AND
		B.AICO = CustomerCompany
	FOR FETCH ONLY;
			
	SELECT GCSEPF INTO SeparatorFlex
	FROM [SCDATA].F0009
	FETCH FIRST 1 ROWS ONLY;
	 
	/* If Separator Flex is equal to 2 */
	IF (SeparatorFlex = '2') THEN
		SET CustomerCompany = Company;
		
		SELECT count(1) INTO EXIST 
		FROM [SCDATA].F03012 
		WHERE AIAN8 = AddressNumber
		AND AICO = CustomerCompany;
		
		IF (EXIST=0) THEN
			SET CustomerCompany = '00000';
		END	IF;
	ELSE
		SET CustomerCompany = '00000';
	END IF;
		
	SET OrgStrTypeINID = StoreId ;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);
	
	SELECT AIARTO INTO CreditCheckLevel FROM [SCDATA].F03012 WHERE AIAN8=AddressNumber AND AICO = CustomerCompany;
	
	/* P   Credit check based on the customer's parent number (P for Parent) */
	IF(CreditCheckLevel = 'P') THEN	
		/* Set Parent AN8 from F0150 */
		SELECT MAPA8 INTO AddressNumber FROM [SCDATA].F0150 WHERE MAAN8 = AddressNumber AND MAOSTP=OrgStrType FETCH FIRST 1 ROWS ONLY;
		SET CreditCheckLevelVal = 'P';
	
	ELSE
		SET CreditCheckLevelVal = 'C';
	END	IF;
	
	OPEN TEMP_CURSOR1;
	
END;
-- #desc					Read Customer Info by AddressNumber
-- #bl_class				Premier.Customer.DefaultCustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetDefaultCustomerInfo
(
	AddressNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetDefaultCustomerInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

		SELECT 
			AI.AIAN8  AS AddressNumber,
			AB.ABALPH AS AlphaName, 
			AB.ABAT1  AS SearchType,
			AL.ALADD1 AS AddressLine1, 
			AL.ALADD2 AS AddressLine2, 
			AL.ALCTY1 AS City,
			AL.ALADDS AS State,
			AL.ALADDZ AS ZipCode,
			AL.ALCTR  AS Country
			
		FROM [SCDATA].F03012 AI-- Customer Master
		INNER JOIN [SCDATA].F0101 AB	-- Address Book Master
			ON ABAN8 = AIAN8
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, CurrentJulianDate)) AL	-- Address Book Join
			ON AL.ALAN8 = AB.ABAN8
		WHERE 
			(AIAN8 = AddressNumber)-- AddressNumber filter	
			AND AI.AIBADT IN ('B','X')
			AND AI.AICO = '00000' -- Company
		FOR FETCH ONLY;
		
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	OPEN TEMP_CURSOR1;
	
END



 ;
-- #desc					Read Customer read only info
-- #bl_class				Premier.Customer.DefaultCustomerList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber
-- #param AlphaName			AlphaName
-- #param SearchType		SearchType
-- #param PageIndex			Paging - Current page
-- #param PageSize			Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetDefaultCustomerList
(
	AddressNumber	NUMERIC(8,0),
	AlphaName 		VARGRAPHIC(40) CCSID 13488,
	SearchType		GRAPHIC(3) CCSID 13488,
	IN PageIndex	INT,
    IN PageSize		INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetDefaultCustomerList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE ROWSTART INT DEFAULT 0;
	DECLARE ROWEND INT DEFAULT 0;
	
	/* Dynamic */ 
	DECLARE SQL_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC	VARGRAPHIC(1000) CCSID 13488;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC;
		
		IF (AddressNumber > 0) THEN
			SET WHERE_DYNAMIC = N' AI.AIAN8 = ? ';
		ELSE
			SET WHERE_DYNAMIC = N' (1 = 1 OR ? = 0) ';
		END IF;

		IF (AlphaName <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(AB.ABALPH) LIKE N''%'' || ? || ''%'' ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;

		IF (SearchType <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AB.ABAT1 = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;


		SET SQL_DYNAMIC = N'
		WITH CTE AS (
			SELECT 
				AI.AIAN8,
				AB.ABALPH, 
				AB.ABAT1,
				AL.ALADD1, 
				AL.ALADD2, 
				AL.ALCTY1,
				AL.ALADDS,
				AL.ALADDZ,
				AL.ALCTR,
				ROW_NUMBER() OVER (ORDER BY AI.AIAN8) AS RNUM
			FROM [SCDATA].F03012 AI /* Customer Master */
			INNER JOIN [SCDATA].F0101 AB	/* Address Book Master */
				ON ABAN8 = AIAN8
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, '|| CurrentJulianDate ||')) AL	/* Address Book Join */
				ON AL.ALAN8 = AB.ABAN8
			WHERE 
				'|| WHERE_DYNAMIC ||N'
				AND AI.AIBADT IN (''B'',''X'')
				AND AI.AICO = ''00000''
		)
		SELECT 
			AIAN8  AS AddressNumber,
			ABALPH AS AlphaName, 
			ABAT1  AS SearchType,
			ALADD1 AS AddressLine1, 
			ALADD2 AS AddressLine2, 
			ALCTY1 AS City,
			ALADDS AS State,
			ALADDZ AS ZipCode,
			ALCTR  AS Country,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE 
			((? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ?)) ';

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
		OPEN TEMP_CURSOR1 USING AddressNumber, AlphaName, SearchType, PageIndex, PageSize, RowStart, RowEnd;	
		
	END;
END;
-- #desc						Get Non related customer Shiptos 
-- #bl_class	 	 			Premier.Customer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param AddressNumber			Address Number
-- #param MailingName			Mailing Name
-- #param EmailUrl				Email Url
-- #param ZipCode				Zip Code
-- #param PhoneNumber			Phone Number
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetNonRelatedShipToList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(8,0),
	IN MailingName		VARGRAPHIC(40) CCSID 13488,
	IN EmailUrl			VARGRAPHIC(40) CCSID 13488,
	IN ZipCode			VARGRAPHIC(12) CCSID 13488,
	IN PhoneNumber		VARGRAPHIC(20) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetNonRelatedShipToList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE ROWSTART INT DEFAULT 0;
	DECLARE ROWEND INT DEFAULT 0;
	DECLARE CurrentJulianDate NUMERIC(6,0);
	------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;

	SET ROWSTART = ((PageSize * PageIndex) - PageSize + 1); 
	SET ROWEND = (PageIndex * PageSize); 
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	SET OrgStrTypeINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		WITH CTE AS (
			SELECT DISTINCT
				ABAN8  AS AddressNumber,        		-- Address Number
				WWMLNM AS MailingName,					-- Mailing Name
				COALESCE(EAEMAL,'') AS EmailUrl,
				ALADD1 AS AddressLine1,            		-- Address Line 1
				ALADD2 AS AddressLine2,             	-- Address Line 2
				ALCTY1 AS City,                     	-- City
				ALADDS AS State,                    	-- State
				ALADDZ AS ZipCodePostal,               	-- Zip Code
				ABMCU AS BranchPlant,					--Branch plant
				AIASN AS AdjustmentSchedule,			-- Adjustment Schedule
				AICUSTS AS Status						-- Status
			FROM [SCDATA].F0101 
				LEFT OUTER JOIN [SCDATA].F0150 		-- Address Book Join Address Organization Structure
					ON  ABAN8 = MAAN8
					AND MAOSTP = OrgStrType
				INNER JOIN [SCDATA].F0111							-- Address Book Join Who's Who (Contacts)
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0		   
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL -- Address Book Join Address File
					ON 	AL.ALAN8 = ABAN8
				INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
					ON  AIAN8 = ABAN8
					AND AICO = '00000'
					AND (AIBADT = 'S' OR AIBADT = 'X')
				LEFT OUTER JOIN [SCDATA].F01151
					ON EAAN8 = ABAN8
					AND EAIDLN = 0
					AND EAETP = 'E'
				LEFT OUTER JOIN [SCDATA].F0115							-- Phone
					ON  WPAN8 = ABAN8
					AND WPIDLN = 0					
			WHERE	(AddressNumber IS NULL OR ABAN8 = AddressNumber)					-- Address Number filter
				AND (MailingName = '*' OR UPPER(WWMLNM) LIKE '%' || MailingName || '%') -- Contact Name filter
				AND (EmailUrl = '*' OR UPPER(EAEMAL) LIKE '%' || EmailUrl || '%')		-- Email Address filter
				AND (ZipCode = '*' OR ALADDZ LIKE  '%' || ZipCode || '%')								-- Zip Code filter
				AND (PhoneNumber = '*' OR WPPH1 LIKE '%' || PhoneNumber || '%')
				AND MAAN8 IS NULL
		),
		PAGING AS(
			SELECT
				A.AddressNumber,        		-- Address Number
				A.MailingName,					-- Mailing Name
				A.EmailUrl,
				A.AddressLine1,            		-- Address Line 1
				A.AddressLine2,             	-- Address Line 2
				A.City,                     	-- City
				A.State,                    	-- State
				A.ZipCodePostal,               	-- Zip Code
				A.BranchPlant,					--Branch plant
				A.AdjustmentSchedule,			-- Adjustment Schedule
				A.Status,						-- Status
				ROWNUMBER() OVER (ORDER BY A.AddressNumber) AS RNUM
			FROM
			CTE A
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.EmailUrl,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((ROWSTART = 0  OR ROWEND = 0) OR (RNUM BETWEEN ROWSTART AND ROWEND))
		FOR FETCH ONLY;

		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc						Get Non related customer Shiptos 
-- #bl_class	 	 			Premier.Customer.NonRelatedShipToList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param FilterTerm			Free Form Search Text
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetNonRelatedShipToSrchLst
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN FilterTerm		VARGRAPHIC(40) CCSID 13488,
	IN PageIndex		INT,
    IN PageSize			INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetNonRelatedShipToSrchLst
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	DECLARE AddressNumber NUMERIC(8,0);

	------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;
	SET OrgStrTypeINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);
	
	IF ( LENGTH ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( COALESCE ( FilterTerm , '' ) , '0' , '' ) , '1' , '' ) , '2' , '' ) , '3' , '' ) , '4' , '' ) , '5' , '' ) , '6' , '' ) , '7' , '' ) , '8' , '' ) , '9' , '' ) ) = 0 ) 
	THEN
		SET AddressNumber = CAST(COALESCE(NULLIF(FilterTerm,''), '0') AS NUMERIC(8,0));
	END IF;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		WITH CTE AS (
			SELECT
				ABAN8  AS AddressNumber,        		-- Address Number
				WWMLNM AS MailingName, -- Mailing Name				
				ALADD1 AS AddressLine1,            		-- Address Line 1
				ALADD2 AS AddressLine2,             		-- Address Line 2
				ALCTY1 AS City,                     		-- City
				ALADDS AS State,                    		-- State
				ALADDZ AS ZipCodePostal,               		-- Zip Code
				ABMCU AS BranchPlant,						--Branch plant
				AIASN AS AdjustmentSchedule,				-- Adjustment Schedule
				AICUSTS AS Status,							-- Status
				ROW_NUMBER() OVER (ORDER BY WWMLNM) AS RNUM
			FROM    [SCDATA].F0101 
			LEFT OUTER JOIN [SCDATA].F0150 		-- Address Book Join Address Organization Structure
				ON  ABAN8 = MAAN8
				AND MAOSTP = OrgStrType
			INNER JOIN [SCDATA].F0111							-- Address Book Join Who's Who (Contacts)
				ON  WWAN8 = ABAN8
				AND WWIDLN = 0		   
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL -- Address Book Join Address File
				ON AL.ALAN8 = ABAN8	   
			INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
				ON  AIAN8 = ABAN8
				AND AICO = '00000'
				AND AIBADT IN ('S', 'X')
			LEFT OUTER JOIN [SCDATA].F01151
				ON EAAN8 = ABAN8
				AND EAIDLN = 0
				AND EAETP = 'E'
			LEFT OUTER JOIN [SCDATA].F0115							-- Phone
				ON  WPAN8 = ABAN8
				AND WPIDLN = 0					
			WHERE	
				((AddressNumber IS NOT NULL AND ABAN8 = AddressNumber)
				OR ((UPPER(WWMLNM) LIKE '%' || FilterTerm || '%') -- Contact Name filter
					OR (UPPER(EAEMAL) LIKE '%' || FilterTerm || '%')-- Email Address filter
					OR (ALADDZ LIKE  '%' || FilterTerm || '%')-- Zip Code filter
					OR (WPPH1 LIKE '%' || FilterTerm || '%'))-- Phone filter
				)
				AND	MAAN8 IS NULL	-- Complements the join.  No registers in F0150
			GROUP BY ABAN8, WWMLNM, ALADD1, ALADD2, ALCTY1, ALADDS, ALADDZ, ABMCU, AIASN, AICUSTS
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,			
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;
	
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		WITH CTE AS (
			SELECT
				ABAN8  AS AddressNumber,        		-- Address Number
				WWMLNM AS MailingName, -- Mailing Name				
				ALADD1 AS AddressLine1,            		-- Address Line 1
				ALADD2 AS AddressLine2,             		-- Address Line 2
				ALCTY1 AS City,                     		-- City
				ALADDS AS State,                    		-- State
				ALADDZ AS ZipCodePostal,               		-- Zip Code
				ABMCU AS BranchPlant,						--Branch plant
				AIASN AS AdjustmentSchedule,				-- Adjustment Schedule
				AICUSTS AS Status,							-- Status
				ROW_NUMBER() OVER (ORDER BY WWMLNM) AS RNUM
			FROM    [SCDATA].F0101 
			LEFT OUTER JOIN [SCDATA].F0150 		-- Address Book Join Address Organization Structure
				ON  ABAN8 = MAAN8
				AND MAOSTP = OrgStrType
			INNER JOIN [SCDATA].F0111							-- Address Book Join Who's Who (Contacts)
				ON  WWAN8 = ABAN8
				AND WWIDLN = 0		   
			INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL -- Address Book Join Address File
				ON AL.ALAN8 = ABAN8	   
			INNER JOIN [SCDATA].F03012							-- Address Book Join Customer Master
				ON  AIAN8 = ABAN8
				AND AICO = '00000'
				AND AIBADT IN ('S', 'X')
			LEFT OUTER JOIN [SCDATA].F01151
				ON EAAN8 = ABAN8
				AND EAIDLN = 0
				AND EAETP = 'E'
			WHERE
				MAAN8 IS NULL	-- Complements the join.  No registers in F0150
			GROUP BY ABAN8, WWMLNM, ALADD1, ALADD2, ALCTY1, ALADDS, ALADDZ, ABMCU, AIASN, AICUSTS
		)
		SELECT
			A.AddressNumber,		
			A.MailingName,	
			A.AddressLine1,		
			A.AddressLine2,		
			A.City,				
			A.State,				
			A.ZipCodePostal,	
			A.BranchPlant,			
			A.AdjustmentSchedule,
			A.Status,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		IF (FilterTerm <> '*') THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;

	END;
END ;
-- #desc					Read Punchout Customer read only info
-- #bl_class				Premier.Customer.PunchOutCustomerInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId		    Store Id
-- #param AddressNumber		Address Number
-- #param DunsNumber		Duns Number

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetPunchOutCustomerInfo
(	
	StoreId				GRAPHIC(3) CCSID 13488,
	AddressNumber		NUMERIC(8,0),
	DunsNumber		    VARCHAR(9)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetPunchOutCustomerInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN

	 -- Get the PhoneType value constant
	DECLARE PhoneConstantCMP GRAPHIC(4) CCSID 13488;	
	DECLARE PhoneCMPInsta   GRAPHIC(3) CCSID 13488;

	DECLARE CurrentJulianDate NUMERIC(6,0);

	/*DYNAMIC SQL QUERY*/
	DECLARE SQL_DYNAMIC VARGRAPHIC(8000) CCSID 13488;
	DECLARE WHERE_DYNAMIC VARGRAPHIC(4000) CCSID 13488;

	/*CURSOR FOR DYNAMIC SQL*/
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC;

	SET PhoneCMPinsta = StoreId;
	CALL [SCLIBRARY].CMM_GetConstantValue ('CMP_PHTY01', PhoneCMPinsta, PhoneConstantCMP);	

	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	/*DYNAMIC QUERY CONDITION*/
	SET  WHERE_DYNAMIC = '';  	

	IF (AddressNumber > 0) THEN -- AN8 filter
		SET WHERE_DYNAMIC = N' A.ABAN8 = ? ';
	ELSE
		SET WHERE_DYNAMIC = N' (1 = 1 OR ? = 0) ';
	END IF;  	 

	IF (DunsNumber <> '*') THEN -- DUNS Number filter
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.ABDUNS = '' || ? || ''';
	ELSE
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1) ';
	END IF;  

	SET SQL_DYNAMIC = N'
		SELECT
	        A.ABAN8	 AS AddressNumber,
			A.ABDUNS AS DunsNumber,
			A.ABAN82 AS RelationShipManagerNumber,
			(SELECT ABALPH FROM [SCDATA].F0101 WHERE ABAN8 = A.ABAN82) AS RelationShipManager,
	        A.ABALPH AS AlphaName,
	        (LTRIM(RTRIM(COALESCE(B.ALADD1,''''))) || '' '' || LTRIM(RTRIM(COALESCE(B.ALADD2,''''))) || '' '' || LTRIM(RTRIM(COALESCE(B.ALADD3,''''))) || '' '' || LTRIM(RTRIM(COALESCE(B.ALADD4,'''')))) AS AddressLines, 
	        B.ALCTY1 AS City,
	        B.ALADDS AS State,
	        B.ALADDZ AS ZipCode,
	        B.ALCTR  AS Country,           
            PH.Phone AS Phone
        FROM
	        [SCDATA].F0101 A				/* Address Book Master */ 
		INNER JOIN [SCDATA].F0111 WW --Contact Information PS$9ICF
			ON WW.WWAN8 = A.ABAN8
        INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc(A.ABAN8, '|| CurrentJulianDate ||')) B /* Address Book Detail */
			ON B.ALAN8 = A.ABAN8
        LEFT OUTER JOIN TABLE(SCLIBRARY.CST_GetCustomerPrimaryPhone(A.ABAN8, 0, ''' || PhoneConstantCMP || ''')) AS PH
				ON PH.CustomerAddressNumber = A.ABAN8 
        WHERE '|| WHERE_DYNAMIC || ' AND WW.WWIDLN = 0';

	PREPARE V_DYNAMIC FROM SQL_DYNAMIC;	

    OPEN TEMP_CURSOR1 USING AddressNumber, DunsNumber;
END ;
-- #desc						Read ShipTo info
-- #bl_class					Premier.ShipTo.ShipToInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param AddressNumber			Address Number
-- #param ContactID				Contact ID

CREATE OR REPLACE Procedure [SCLIBRARY].CST_GetShipToInfo
(
	IN StoreId		GRAPHIC(3) CCSID 13488,
	IN Company				GRAPHIC(5) CCSID 13488,
	IN AddressNumber		NUMERIC(8,0),
	IN ContactID			DECIMAL(5,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CST_GetShipToInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	-- Get the PhoneType value constant
	DECLARE PHONECONSTANTCMP VARGRAPHIC(4) CCSID 13488;
	DECLARE PHONECONSTANTIND VARGRAPHIC(4) CCSID 13488;
	
	DECLARE PHONECMPINSTA     GRAPHIC(3) CCSID 13488;
	DECLARE PHONEINDINSTA     GRAPHIC(3) CCSID 13488;
	
	DECLARE CodeLength  INTEGER;
	
	-------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

	SELECT	
			ABAN8	AS AddressNumber,			-- Address Number
			COALESCE(MAPA8,ABAN8) AS ParentAddressNumber,	-- Parent Address Number
			WWALPH	AS AlphaName,				-- Alpha Name
			WWMLNM	AS MailingName,				-- Mailing Name
			ALADD1	AS AddressLine1,			-- Address Line 1
			ALADD2	AS AddressLine2,			-- Address Line 2
			ALADD3	AS AddressLine3,			-- Address Line 3
			ALADD4	AS AddressLine4,			-- Address Line 4
			ALCTY1	AS City,					-- City
			ALADDS	AS State,					-- State
			ALADDZ	AS ZipCode,					-- Zip Code
			ALCTR	AS Country,					-- Country
			WWIDLN	AS ContactId,				-- Contact ID
			WWGNNM	AS Firstname,				-- First Name
			WWMDNM	AS Middlename,				-- Middle Name
			WWSRNM	AS Lastname,				-- Last Name
			WWNICK	AS Nickname,				-- Nick Name
			COALESCE(PS$9POBX,0) AS PoBoxFlag,	-- PoBoxFlag
			AIDEL1  AS DeliveryInstructions1,	--DeliveryInstructions1
			AIDEL2  AS DeliveryInstructions2,	--DeliveryInstructions2
			AICUSTS AS Status,					-- Status
			MainPhone.Phone,
			0 as Selected,
			ABALKY		AS AlternateAddressKey				
	FROM	
		TABLE(SCLIBRARY.CST_GetCustomerInfoFnc(Company, AddressNumber)) AS IA			-- Address Book Join Customer Master
	INNER JOIN [SCDATA].F0101 
		ON ABAN8 = AIAN8
	LEFT OUTER JOIN [SCDATA].F0150 		-- Address Book Join Address Organization Structure
		ON  MAAN8 = AIAN8
		AND MAOSTP = OrgStrType 		
	INNER JOIN [SCDATA].F0111					-- Address Book Join Who's Who (Contacts)
		ON  WWAN8 = AIAN8
		AND WWIDLN = ContactID		
	INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL -- Address Book Join Address File
		ON AL.ALAN8 = ABAN8
	LEFT OUTER JOIN [SCDATA].FQ67107		-- Profile Extended Information
		ON PS$9AN8 = AIAN8
		AND PS$9TYP = 0 --CUSTOMER
	LEFT OUTER JOIN [SCCTL].F0005
		ON PS$9AN8 IS NULL
		AND DRSY = 'H00'
		AND DRRT = 'TA' 
		AND SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) = ABTAXC
	LEFT OUTER JOIN TABLE(SCLIBRARY.CST_GetCustomerPrimaryPhone(ABAN8, 0, CASE WHEN (COALESCE(PS$9ICF, (CASE WHEN DRSPHD = '0' THEN 0 ELSE 1 END))) = 0 THEN PHONECONSTANTIND ELSE PHONECONSTANTCMP END )) AS MainPhone
		ON MainPhone.CustomerAddressNumber = ABAN8
	WHERE	AIAN8 = AddressNumber
	FOR FETCH ONLY;	
		
	-- Get the PhoneType value constant
	SET PHONECMPINSTA = StoreId;
	SET PHONEINDINSTA = StoreId;
	
	 -- Get Code Length
    SET CodeLength = 0;
    SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
      WHERE DTSY = 'H00' AND DTRT = 'TA');
	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	CALL [SCLIBRARY].CMM_GetConstantValue ('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);
		
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	-------------------------Gets the Organization Structure Type
	SET OrgStrTypeINID = StoreId;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

	OPEN TEMP_CURSOR1;
END ;
-- #desc							Get Consumer ship to by address number
-- #bl_class						N/A
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			InstallationID
-- #param ParentAddressNumber		Parent Address Number
-- #param Status					Status

CREATE OR REPLACE FUNCTION [SCLIBRARY].CST_GetShipToListFnc
(
	InstallationID		GRAPHIC(3) CCSID 13488,
	Company				VARGRAPHIC(5) CCSID 13488,
	ParentAddressNumber NUMERIC(8,0),
	Status VARGRAPHIC(1) CCSID 13488
)

RETURNS TABLE(
	AddressNumber			NUMERIC(8,0),	-- Address Number
	ParentAddressNumber		NUMERIC(8,0),
	AlphaName				GRAPHIC(40) CCSID 13488,	-- Alpha Name
	MailingName				GRAPHIC(40) CCSID 13488,	-- Mailing Name
	AddressLine1			GRAPHIC(40) CCSID 13488,	-- Address Line 1
	AddressLine2			GRAPHIC(40) CCSID 13488,	-- Address Line 2
	AddressLine3			GRAPHIC(40) CCSID 13488,	-- Address Line 3
	AddressLine4			GRAPHIC(40) CCSID 13488,	-- Address Line 4
	City					GRAPHIC(25) CCSID 13488,	-- City
	State					GRAPHIC(3) CCSID 13488,	-- State
	ZipCode					GRAPHIC(12) CCSID 13488,	-- Zip Code
	Country					GRAPHIC(3) CCSID 13488,	-- Country
	ContactId				DECIMAL(5,0),	-- Contact ID
	Firstname				GRAPHIC(25) CCSID 13488,	-- First Name
	Middlename				GRAPHIC(25) CCSID 13488,	-- Middle Name
	Lastname				GRAPHIC(25) CCSID 13488,	-- Last Name
	Nickname				GRAPHIC(40) CCSID 13488,	-- Nick Name
	PoBoxFlag				DECIMAL(31,0),	-- PoBoxFlag
	DeliveryInstructions1	GRAPHIC(30) CCSID 13488,	--DeliveryInstructions1
	DeliveryInstructions2	GRAPHIC(30) CCSID 13488,	--DeliveryInstructions2
	Status					GRAPHIC(1) CCSID 13488,	-- Status
	Selected				GRAPHIC(1) CCSID 13488,	-- Selected
	Phone					VARGRAPHIC(50) CCSID 13488,	-- Phone			
	AlternateAddressKey		GRAPHIC(20) CCSID 13488	-- AlternateAddressKey
)

LANGUAGE SQL
SPECIFIC [SCLIBRARY].CST_GetShipToListFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE CurrentJulianDate NUMERIC(6,0);

	-- Get the PhoneType value constant
	DECLARE PHONECONSTANTCMP VARGRAPHIC(4) CCSID 13488;
	DECLARE PHONECONSTANTIND VARGRAPHIC(4) CCSID 13488;
	
	DECLARE PHONECMPINSTA     GRAPHIC(3) CCSID 13488;
	DECLARE PHONEINDINSTA     GRAPHIC(3) CCSID 13488;
	
	--------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;
	
	DECLARE	CodeLength		INTEGER;
	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = 'H00' AND DTRT = 'TA');
	
	SET PHONECMPINSTA = InstallationID;
	SET PHONEINDINSTA = InstallationID;
	
	CALL [SCLIBRARY].CMM_GetConstantValue ('CMP_PHTY01', PHONECMPINSTA, PHONECONSTANTCMP);
	CALL [SCLIBRARY].CMM_GetConstantValue ('IND_PHTY01', PHONEINDINSTA, PHONECONSTANTIND);	
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	SET OrgStrTypeINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);

RETURN (SELECT 
				ABAN8  AS AddressNumber,		-- Address Number
				MAPA8  AS ParentAddressNumber,
				WWALPH AS AlphaName,			-- Alpha Name
				WWMLNM AS MailingName,			-- Mailing Name
				ALADD1 AS AddressLine1,			-- Address Line 1
				ALADD2 AS AddressLine2,			-- Address Line 2
				ALADD3 AS AddressLine3,			-- Address Line 3
				ALADD4 AS AddressLine4,			-- Address Line 4
				ALCTY1 AS City,					-- City
				ALADDS AS State,				-- State
				ALADDZ AS ZipCode,				-- Zip Code
				ALCTR  AS Country,				-- Country
				WWIDLN AS ContactId,			-- Contact ID
				WWGNNM AS Firstname,			-- First Name
				WWMDNM AS Middlename,			-- Middle Name
				WWSRNM AS Lastname,				-- Last Name
				WWNICK		AS Nickname,				-- Nick Name
				COALESCE(PS$9POBX,0) AS PoBoxFlag,	-- PoBoxFlag
			    COALESCE(OVERRIDECOMPANY.AIDEL1, DEFAULTCOMPANY.AIDEL1 ) 		AS DeliveryInstructions1,   --DeliveryInstructions1
			    COALESCE(OVERRIDECOMPANY.AIDEL2, DEFAULTCOMPANY.AIDEL2 ) 		AS DeliveryInstructions2,   --DeliveryInstructions2                                            
                COALESCE(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS)		AS Status,	
				'0' AS Selected,
				MainPhone.Phone,
				ABALKY	AS AlternateAddressKey
				
		FROM	[SCDATA].F0101 
				JOIN [SCDATA].F0150 						-- Address Book Join Address Organization Structure
					ON  ABAN8 = MAAN8
					AND MAOSTP = OrgStrType		
				JOIN [SCDATA].F0111						-- Address Book Join Who's Who (Contacts)
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0		
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL -- Address Book Join Address File
					ON AL.ALAN8 = ABAN8
				LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY                                                                                  -- Address Book Join Customer Master                                                                                  
					ON	OVERRIDECOMPANY.AIAN8 = ABAN8                                                                                
					AND OVERRIDECOMPANY.AICO = Company                                
				JOIN [SCDATA].F03012        AS DEFAULTCOMPANY                                                                          -- Address Book Join Customer Master                                                                                  
					ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
					AND DEFAULTCOMPANY.AICO = '00000'                                                                         
					AND (DEFAULTCOMPANY.AIBADT = 'S' OR DEFAULTCOMPANY.AIBADT = 'X')
				LEFT OUTER JOIN [SCDATA].FQ67107			-- Profile Extended Information
					ON PS$9AN8 = ABAN8
					AND PS$9TYP = 0 --CUSTOMER
				LEFT OUTER JOIN [SCCTL].F0005
				  ON PS$9AN8 IS NULL
				  AND DRSY = 'H00'
				  AND DRRT = 'TA' 
				  AND SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) = ABTAXC
				LEFT OUTER JOIN TABLE(SCLIBRARY.CST_GetCustomerPrimaryPhone(ABAN8, 0, CASE WHEN (COALESCE(PS$9ICF, (CASE WHEN DRSPHD = '0' THEN 0 ELSE 1 END))) = 0 THEN PHONECONSTANTIND ELSE PHONECONSTANTCMP END )) AS MainPhone
					ON MainPhone.CustomerAddressNumber = ABAN8
		WHERE MAPA8 = ParentAddressNumber 					--Parent Address Number
		AND	  MAAN8 <> ParentAddressNumber 					-- exclude it-self
		AND   (Status = '*' OR (Status = '1' AND COALESCE(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) = Status) OR (Status ='0' AND COALESCE(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) <>'1')) /*SHIP TO IS ACTIVE WHEN AICUST <> 1*/
		
		
		UNION ALL
		
		SELECT 	ABAN8  AS AddressNumber,		-- Address Number
				ParentAddressNumber AS ParentAddressNumber,
				WWALPH AS AlphaName,			-- Alpha Name
				WWMLNM AS MailingName,			-- Mailing Name
				ALADD1 AS AddressLine1,			-- Address Line 1
				ALADD2 AS AddressLine2,			-- Address Line 2
				ALADD3 AS AddressLine3,			-- Address Line 3
				ALADD4 AS AddressLine4,			-- Address Line 4
				ALCTY1 AS City,					-- City
				ALADDS AS State,				-- State
				ALADDZ AS ZipCode,				-- Zip Code
				ALCTR  AS Country,				-- Country
				WWIDLN AS ContactId,			-- Contact ID
				WWGNNM AS Firstname,			-- First Name
				WWMDNM AS Middlename,			-- Middle Name
				WWSRNM AS Lastname,				-- Last Name
				WWNICK		AS Nickname,				-- Nick Name
				COALESCE(PS$9POBX,0) AS PoBoxFlag,	-- PoBoxFlag
			    COALESCE(OVERRIDECOMPANY.AIDEL1, DEFAULTCOMPANY.AIDEL1 ) 		AS DeliveryInstructions1,   --DeliveryInstructions1
			    COALESCE(OVERRIDECOMPANY.AIDEL2, DEFAULTCOMPANY.AIDEL2 ) 		AS DeliveryInstructions2,   --DeliveryInstructions2                                            
                COALESCE(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS)		AS Status,	
				'0' AS Selected,
				MainPhone.Phone,
				ABALKY	AS AlternateAddressKey
				
		FROM 	[SCDATA].F0101 JOIN [SCDATA].F0111		-- Address Book Join Who's Who (Contacts)
					ON  WWAN8 = ABAN8
					AND WWIDLN = 0		
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (ABAN8, CurrentJulianDate)) AL -- Address Book Join Address File
					ON AL.ALAN8 = ABAN8
				LEFT OUTER JOIN [SCDATA].F03012 AS OVERRIDECOMPANY                                                                                  -- Address Book Join Customer Master                                                                                  
					ON	OVERRIDECOMPANY.AIAN8 = ABAN8                                                                                
					AND OVERRIDECOMPANY.AICO = Company                                                                         
				JOIN [SCDATA].F03012        AS DEFAULTCOMPANY                                                                          -- Address Book Join Customer Master                                                                                  
					ON	DEFAULTCOMPANY.AIAN8 = ABAN8                                                                                
					AND DEFAULTCOMPANY.AICO = '00000'                                                                         
					AND (DEFAULTCOMPANY.AIBADT = 'S' OR DEFAULTCOMPANY.AIBADT = 'X')
				LEFT OUTER JOIN [SCDATA].FQ67107			-- Profile Extended Information
					ON PS$9AN8 = ABAN8
					AND PS$9TYP = 0 --CUSTOMER
				LEFT OUTER JOIN [SCCTL].F0005
				  ON PS$9AN8 IS NULL
				  AND DRSY = 'H00'
				  AND DRRT = 'TA' 
				  AND SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) = ABTAXC
				LEFT OUTER JOIN TABLE(SCLIBRARY.CST_GetCustomerPrimaryPhone(ABAN8, 0, CASE WHEN (COALESCE(PS$9ICF, (CASE WHEN DRSPHD = '0' THEN 0 ELSE 1 END))) = 0 THEN PHONECONSTANTIND ELSE PHONECONSTANTCMP END )) AS MainPhone
					ON MainPhone.CustomerAddressNumber = ABAN8
		WHERE ABAN8 = ParentAddressNumber 
		AND (Status = '*' OR (Status = '1' AND COALESCE(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) = Status) OR (Status ='0' AND COALESCE(OVERRIDECOMPANY.AICUSTS,DEFAULTCOMPANY.AICUSTS) <>'1'))); /*SHIP TO IS ACTIVE WHEN AICUST <> 1*/		
END ;
-- #desc						Add a membership alternative kit item
-- #bl_class					Premier.Club.MembershipAltKitItem.cs
-- #db_dependencies				N/A
-- #db_references				N/A

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_AddMembershipAltKitItem 
(	
	ItemNumberShortKit		NUMERIC(15,0),
	BranchPlant				VARCHAR(12),
	AddressNumber			NUMERIC(15,0),
	MembershipID			NUMERIC(15,0),
	ItemNumber				NUMERIC(15,0),
	ComponentLineNumber		NUMERIC(15,0),
	QtyRequiredStandard		NUMERIC(15,0),
	ChangeQuantity			VARCHAR(1),
	UnitOfMeasure			VARCHAR(2),
	EffectiveFromDate		NUMERIC(15,0),
	EffectiveThruDate		NUMERIC(15,0),
	OptionaItemKit			VARCHAR(1),
	LineType				VARCHAR(2),
	UnitPrice				NUMERIC(15,0),
	ChangePrice				VARCHAR(1),
	UserReservedCode		VARCHAR(2),
	UserReservedDate		NUMERIC(15,0),
	UserReservedAmount		NUMERIC(15,0),
	UserReservedNumber		NUMERIC(15,0),
	UserReservedReference	VARCHAR(15),
	"USERID"					VARCHAR(10),
	"PROGRAMID"				VARCHAR(10),
	WorkstationId			VARCHAR(10),
	DateUpdated				NUMERIC(15,0),
	TimeOfDay				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_AddMembershipAltKitItem 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	INSERT INTO [SCDATA].FQ67302
	(
		 IXKIT, IXMMCU, IX$9AN8, 
		 IX$9MMID, IXITM, IXCPNT, IXQNTY, 
		 IX$9MQTY, IXUM, IXEFFF, IXEFFT, 
		 IX$9OPTK, IXLNTY, IXPRIC, IX$9MPRC, 
		 IXURCD, IXURDT, IXURAT, IXURRF, 
		 IXURAB, IXUSER, IXPID, IXJOBN, 
		 IXUPMJ, IXTDAY
	)
	VALUES
	(
		 ItemNumberShortKit, BranchPlant, AddressNumber, 
		 MembershipID, ItemNumber, ComponentLineNumber, QtyRequiredStandard, 
		 ChangeQuantity, UnitOfMeasure, EffectiveFromDate, EffectiveThruDate, 
		 OptionaItemKit, LineType, UnitPrice, ChangePrice, 
		 UserReservedCode, UserReservedDate, UserReservedAmount, UserReservedReference, 
		 UserReservedNumber, "USERID", "PROGRAMID", WorkstationId, 
		 DateUpdated, TimeOfDay
	);
END

 ;
-- #desc					Checks whether a ship to's state is allowed for join clubs.
-- #bl_class				Premier.Club.BillToMembership.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID 
-- #param ShipToId			Ship To number id
-- #param AddressType		AddressType 0 = CUSTOMER, 1 = CONSUMER

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_ExcCheckShipToForJoinClubs
(
	IN InstallationID VARCHAR(3),
	IN ShipToId		NUMERIC(15,0), 
	IN AddressType	NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_ExcCheckShipToForJoinClubs 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE State  VARCHAR(10);		
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

	SELECT	COUNT(*)
	FROM	[SCDATA].FQ675520					
	WHERE  	UPPER(RTRIM(SCADDS)) = UPPER(RTRIM(State))	
	AND		UPPER(RTRIM(SC$9CP1)) = '1'
	FOR FETCH ONLY;

	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	
	IF (AddressType = 0)		-- CUSTOMER
	 THEN
		SELECT	 A.ALADDS INTO State
		FROM [SCDATA].F0101 B 
		INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (B.ABAN8, CurrentJulianDate)) A
			ON  A.ALAN8 = B.ABAN8
		WHERE	ABAN8 = ShipToId
		FETCH FIRST 1 ROW ONLY;
	ELSE						-- CONSUMER
		SELECT	STADDS INTO State  
		FROM	[SCDATA].FQ6755A1 
		WHERE  	ST$9SHAN = ShipToId	
		FETCH FIRST 1 ROW ONLY; 
	END IF;
	
	
	OPEN TEMP_CURSOR1;

END
 ;
-- #desc								Reads the Club Attibutes
-- #bl_class							Premier.Club.ClubAttributeList.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param ClubId						Club Id to search for

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetClubAttributeList
(
	IN ClubId		varchar(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetClubAttributeList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT	A.CASEQ			AS SequenceNo,
				A.CA$9AID		AS AttributeId,
				B.AMDSC1		AS Description1,
				B.AMDSC2		AS Description2,
				A.CA$9DASN		AS AttributeSelection, -- Default Value
				A.CA$9FASN		AS SelectionCriteria, --0 = Default or 1 = Force Selection
				A.CA$9ADRV		AS AttributeDriver,
				B.AM$9DTY		AS AttributeType,
				B.AMSY			AS ProductCode,
				B.AMRT			AS UserDefinedCodes
		FROM	[SCDATA].FQ675911 A 
				INNER JOIN [SCDATA].FQ675950 B 
				ON A.CA$9AID = B.AM$9AID
		WHERE	
				UPPER(RTRIM(A.CA$9CLUB)) = UPPER(RTRIM(ClubId)) 
				AND (A.CADISPO <> '1') -- 1 = Do not display
		ORDER BY A.CASEQ ASC
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1; 
END


 ;
-- #desc						Gets the club list
-- #bl_class					Premier.Club.ClubList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressType			Address book type
-- #param AddressNumber			Address Number
-- #param ClubId				Club Id
-- #param LangPref				Language preference

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetClubList
(
	IN AddressType		NUMERIC(15,0),
	IN AddressNumber	NUMERIC(15,0),
	IN ClubId			varchar(10),
	IN LangPref			VARCHAR(2)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetClubList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	DECLARE PRICINGGROUP VARCHAR(8);
	DECLARE CurrentJulianDate INT DEFAULT 0;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TEMP_TABLE
	(
		CM$9CLUB	VARCHAR(10),
		CMDSC1		VARCHAR(30),
		CMDSC2		VARCHAR(30),
		ST$9STAS	VARCHAR(3)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			CM$9CLUB	AS ClubId,
			CMDSC1		AS Description1,
			CMDSC2		AS Description2,
			ST$9STAS	AS StatusId,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('59','ST',ST$9STAS,LangPref) AS StatusDescription
		FROM
			SESSION.TEMP_TABLE
		FOR FETCH ONLY;
			
		INSERT INTO SESSION.TEMP_TABLE
		SELECT	A.CM$9CLUB,
				A.CMDSC1,
				A.CMDSC2,
				COALESCE(B.ST$9STAS, '') AS StatusId
		FROM	
			[SCDATA].FQ675910 A 
			LEFT JOIN [SCDATA].FQ675980 B 
			ON A.CM$9CLUB = B.ST$9CLUB
		WHERE	
			(CMASAI <> '1') AND -- 1 = Inactive	
			(CM$9APTO = '0' OR CM$9APTO = '' OR CM$9APTO IS NULL) OR         -- (0,'' = everyone) 
			(CM$9APTO = '1' AND CMCPGP = PRICINGGROUP) OR				     -- (1 = CustomerPricingGroup)
			(CM$9APTO = '2' AND CM$9AN8 = AddressNumber)					 -- (2 = Specific Customer)
			AND	A.CMEFTB <= CurrentJulianDate
			AND (ClubId = '*' OR A.CM$9CLUB = ClubId)
		ORDER BY CMEFTB DESC;

		SET PRICINGGROUP = '';
		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
		IF AddressType = 0 THEN
			--CUSTOMER
			SELECT AICPGP INTO PRICINGGROUP FROM [SCDATA].F03012 WHERE  AIAN8 = AddressNumber AND UPPER(RTRIM(AICO)) = '00000';		
		ELSE
			--CONSUMER
			SELECT PRCPGP INTO PRICINGGROUP FROM [SCDATA].FQ670302 WHERE PR$9AN8 = AddressNumber;	
		END IF;
		
		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc						Gets Consumer/Costumer Membership
-- #bl_class					Premier.Club.Membership.cs
-- #db_dependencies				N/A
-- #db_references				CLB_GetMembershipAttributes

-- #param AddressNumber			Address Number
-- #param MembershipUniqueId	MembershipUniqueId

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembership
(
	IN AddressNumber			NUMERIC(15,0),
	IN MembershipUniqueID		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembership 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.MM$9AN8	AddressNumber, 
		A.MMUKID	MembershipUniqueId,   
		A.MM$9MMID	MembershipId, 
		A.MM$9CLUB	ClubId, 
		A.MM$9STAS	ClubStatusId,
		A.MMDAOJ	DateAccountOpened,  
		A.MMEFTJ	DateEffective,   
		A.MMEXDJ	DateExpired,   
		A.MMEFTE	DateEndingEffective,   
		A.MM$9ARNW	AutoRenewYN,
		A.MMASN		PriceAdjustmentSchedule,   
		A.MMCPGP	GroupCustomerPriceGroup,   
		A.MMDTYS	DutyStatus,   
		A.MMEUSE	EndUse,   
		A.MMLOB		LineOfBusiness,
		A.MMMOT		ModeOfTransportation,   
		A.MMPTC		PaymentTermsCode,    
		A.MMUPC1	PriceCode1,   
		A.MMUPC2	PriceCode2,   
		A.MMUPC3	PriceCode3,
		A.MMDMCT	ContractNumberDistribution,  
		A.MM$9CKIT	ItemNumber, 
		A.MM$9CMCU	BranchPlant, 
		A.MM$9SHAN	ShipToNumber, 
		A.MMIDLN	ShipToContactId,
		A.MMSHPJ	DateShipped,  
		A.MMPDDJ	PromiseDeliveryDate,   
		A.MMDRQJ	DateRequested,   
		A.MMRHLD	DateReleaseHold,   
		A.MM$9RCD	HoldReasonCode,
		A.MMASAI	ActiveInactive,  
		A.MM$9MSDJ	DateMemberSince, 
		A.MM$9HSOT	HighestStatus, 
		A.MMURCD	UserReservedCode,   
		A.MMURDT	UserReservedDate,
		A.MMURAT	UserReservedAmount,  
		A.MMURAB	UserReservedNumber,   
		A.MMURRF	UserReservedReference,   
		A.MMUSER	"USERID",   
		A.MMPID		"PROGRAMID",
		A.MMJOBN	WorkstationId,  
		A.MMUPMJ	DateUpdated,   
		A.MMTDAY	TimeOfDay,   
		A.MMAN80	PickUpAddressNumber,   
		A.MM$9PUWC	PickUpFlag, 
		(SELECT 
			IMDSC1
		 FROM 
			[SCDATA].F4101
		 WHERE IMITM = A.MM$9CKIT) as ItemNumberDescription,
		 (SELECT 
			MCDL01
		  FROM 
			[SCDATA].F0006
		  WHERE 
			UPPER(RTRIM(MCMCU)) = UPPER(RTRIM(A.MM$9CMCU))) as BranchPlantDescription,
		 (SELECT 
			LTRIM(RTRIM(CNGNNM)) || ' ' || LTRIM(RTRIM(CNSRNM))
		  FROM 
			[SCDATA].FQ6755B0
		  WHERE 
			CN$9SHAN = A.MM$9SHAN 
			AND CNIDLN = A.MMIDLN) as ShipToName,
		B.MSDSC1 MembershipDescription1,  
		B.MSDSC2 MembershipDescription2
	FROM 
		[SCDATA].FQ6759B0 A
		INNER JOIN [SCDATA].FQ6759A0 B
		ON A.MM$9MMID = B.MS$9MMID
	WHERE 
		(AddressNumber IS NULL OR A.MM$9AN8 = AddressNumber) AND
		(MembershipUniqueID IS NULL OR A.MMUKID = MembershipUniqueID )
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 		

	--Get Membership Attributes
	CALL [SCLIBRARY].CLB_GetMembershipAttributes (AddressNumber,MembershipUniqueID);

END ;
-- #desc						Get the alternative kit selection list
-- #bl_class					Premier.Club.MembershipAltKitList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param MembershipID			Membership ID

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembershipAltKitList
(
	MembershipID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembershipAltKitList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE CurrentJulianDate INT DEFAULT 0;
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	
	BEGIN
	
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
			SELECT	
				IX.IXKIT	AS ItemNumberShortKit, 
				IX.IXMMCU	AS BranchPlant,
				IX.IXITM	AS ItemNumber,
				IX.IXCPNT	AS ComponentLineNumber,
				IX.IXQNTY	AS QtyRequiredStandard,
				IX.IX$9MQTY	AS ChangeQuantity,
				IX.IXUM		AS UnitOfMeasure,
				IX.IXEFFF	AS EffectiveFromDate,
				IX.IXEFFT	AS EffectiveThruDate,
				IX.IX$9OPTK	AS OptionaItemKit,
				IX.IXLNTY	AS LineType,
				IX.IXPRIC	AS UnitPrice,
				IX.IX$9MPRC	AS ChangePrice
			FROM [SCDATA].FQ67302 IX 
			INNER JOIN [SCDATA].FQ6759A0 MS
				ON  MS.MS$9MMID = MembershipID
				AND MS.MS$9CKIT = IX.IXKIT
				AND MS.MS$9CMCU = IX.IXMMCU
			WHERE	IX.IX$9AN8 = 0
			AND		IX.IXEFFF <= CurrentJulianDate
			AND		IX.IXEFFT >= CurrentJulianDate
			FOR FETCH ONLY;
		
		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc							Gets the membership information to send email
-- #bl_class						Premier.Club.MembershipEmailInfo.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param AddressNumber				Bill to number to search for
-- #param MembershipUniqueID		Unique ID for membership by AN8

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembershipEmailInfo
(
	AddressNumber		NUMERIC(15,0),
	MembershipUniqueID	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembershipEmailInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	 
	 
	 DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT	A.MM$9AN8		AS AddressNumber,  
				A.MMUKID		AS MembershipUniqueId,  
				A.MM$9MMID		AS MembershipId, 
				A.MM$9CLUB		AS ClubId, 
				A.MM$9SHAN		AS ShipToNumber,
				A.MMEXDJ		AS ExpirationDate,
				A.MMEFTJ		AS EffectiveDate,
				B.MSDSC1		AS Description1,
				B.MSDSC2		AS Description2,
				CLB.CMDSC1		AS ClubDescription1,
				CLB.CMDSC2		AS ClubDescription2
		FROM	[SCDATA].FQ6759B0 A 
				INNER JOIN [SCDATA].FQ6759A0 B 
					ON  A.MM$9MMID = B.MS$9MMID
				INNER JOIN [SCDATA].FQ675910 CLB
					ON A.MM$9CLUB = CLB.CM$9CLUB
		WHERE	A.MM$9AN8 = AddressNumber
		AND		MMUKID = MembershipUniqueID
		FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;

END ;
-- #desc						Gets the membership info for a given address number
-- #bl_class					Premier.Club.MembershipInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembershipInfo
(
	AddressNumber		NUMERIC(15,0),
	MembershipUniqueID	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembershipInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	 
	 
	 DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT	
			A.MM$9AN8		AS BillToNumber,  
			A.MMUKID		AS MembershipUniqueId,  
			A.MM$9MMID		AS MembershipId, 
			A.MM$9CLUB		AS ClubId, 
			A.MM$9STAS		AS ClubStatusId,
			A.MM$9SHAN		AS ShipToNumber,
			A.MMEXDJ		AS ExpirationDate,
			A.MMEFTJ		AS EffectiveDate,
			A.MM$9MSDJ		AS DateMemberSince,
			A.MMSHPJ		AS DateShipped,  
			A.MMPDDJ		AS PromiseDeliveryDate,
			A.MMASAI		AS ActiveStatus,
			''				AS ClubStatusDescription,
			B.MSDSC1		AS Description,
			B.MSDSC2		AS Description2,
			''				AS MailingName,
			CLB.CMDSC1		AS ClubDescription1,
			CLB.CMDSC2		AS ClubDescription2
		FROM	[SCDATA].FQ6759B0 A 
				INNER JOIN [SCDATA].FQ6759A0 B 
					ON  A.MM$9MMID = B.MS$9MMID
				INNER JOIN [SCDATA].FQ675910 CLB
					ON A.MM$9CLUB = CLB.CM$9CLUB
		WHERE	A.MM$9AN8 = AddressNumber
		AND		MMUKID = MembershipUniqueID
		FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;

END ;
-- #desc						Gets the membership list for a given address number
-- #bl_class					Premier.Club.MembershipList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param BillToNumber			Bill to number to search for
-- #param AddressType			Address Type to search for
-- #param ActiveStatus			Status,
-- #param ExpirationStatus		Expiration Status,
	-- '*'	Any
	-- '0'	Valid	(ExpirationDate = 0 OR CurrentJulianDate >= EffectiveDate and CurrentJulianDate < ExpirationDate)
	-- '1'	Expired	(ActiveStatus = 0 and ExpirationDate > 0 and CurrentJulianDate >= ExpirationDate)
-- #param LangPref				Language preference

/* This Procedure depend from CST_GetShipToListFnc, CSM_GetShipToListFnc and CSM_GetComplianceShipToListFnc */

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembershipList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,	
	IN BillToNumber		NUMERIC(15,0),
	IN AddressType		NUMERIC(15,0),
	IN ActiveStatus		GRAPHIC(1) CCSID 13488,
	IN ExpirationStatus VARCHAR(1),
	IN LangPref			VARCHAR(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembershipList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	

	-- TEMPORARY TABLE FOR SHIPTOS (support both consumer/customer)
	DECLARE GLOBAL TEMPORARY TABLE SESSION.SHIPTOS 
	(		 
		AddressNumber		NUMERIC(15,0),
		MLNAM				VARGRAPHIC(100) CCSID 13488
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ; 

	SET WHERE_DYNAMIC = N'';

	BEGIN
	
	DECLARE CurrentJulianDate NUMERIC(6,0) DEFAULT 0;
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC;

		IF (BillToNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC = N' A.MM$9AN8 = ? ';
		ELSE
			SET WHERE_DYNAMIC = N' (1 = 1 OR ? IS NULL) ';
		END IF;

		IF (ActiveStatus <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.MMASAI = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;

		IF (ExpirationStatus <> '*') THEN
			IF (ExpirationStatus = '0') THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (A.MMEXDJ = 0 OR (? BETWEEN A.MMEFTJ AND A.MMEXDJ)) ';
			ELSEIF (ExpirationStatus = '1') THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (A.MMASAI = 0 AND A.MMEXDJ > 0 AND ? >= A.MMEXDJ) ';
			END IF;
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NOT NULL) ';
		END IF;

		SET SQL_DYNAMIC = N'
		SELECT	
			A.MM$9AN8		AS BillToNumber,
			A.MMUKID		AS MembershipUniqueId,
			A.MM$9MMID		AS MembershipId,
			A.MM$9CLUB		AS ClubId,
			A.MM$9STAS		AS ClubStatusId,
			A.MM$9SHAN		AS ShipToNumber,
			A.MMEXDJ		AS ExpirationDate,
			A.MMEFTJ		AS EffectiveDate,
			A.MM$9MSDJ		AS DateMemberSince,
			A.MMSHPJ		AS DateShipped,  
			A.MMPDDJ		AS PromiseDeliveryDate,
			A.MMASAI		AS ActiveStatus,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc(''59'', ''ST'', A.MM$9STAS, '''||LangPref||''') AS ClubStatusDescription,
			B.MSDSC1		AS Description,
			B.MSDSC2		AS Description2,
			S.MLNAM			AS MailingName,
			CLB.CMDSC1		AS ClubDescription1,
			CLB.CMDSC2		AS ClubDescription2,
			''0''			AS Selected
		FROM	[SCDATA].FQ6759B0 A 
		INNER JOIN [SCDATA].FQ6759A0 B 
			ON  A.MM$9MMID = B.MS$9MMID
		INNER JOIN [SCDATA].FQ67104 X 
			ON  A.MM$9AN8 = X.AB$9AN8
			AND ABIDLN = 0
		INNER JOIN [SCDATA].FQ675910 CLB
			ON A.MM$9CLUB = CLB.CM$9CLUB
		INNER JOIN SESSION.SHIPTOS S /*GET MAILING NAME FROM MEMBERSHIP SHIPTO*/
			ON  S.AddressNumber = CASE	WHEN A.MM$9SHAN = 0.0
										THEN X.AB$9SHAN
										ELSE A.MM$9SHAN
								  END
		WHERE '|| WHERE_DYNAMIC ||N' 
		ORDER BY A.MMUKID ';
		
		IF (AddressType = 0) THEN
			INSERT	INTO SESSION.SHIPTOS
			SELECT  F.AddressNumber, F.MailingName 
			FROM TABLE(SCLIBRARY.CST_GetShipToListFnc(InstallationID, '00000', BillToNumber, '*'))AS F;
		
		ELSE
			INSERT	INTO SESSION.SHIPTOS
			SELECT 
				F.AddressNumber,
				F.MailingName
			FROM TABLE(SCLIBRARY.CSM_GetShipToListFnc(InstallationID,BillToNumber, '*'))AS F;		 
		END IF;

	 PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
	 OPEN TEMP_CURSOR1 using BillToNumber, ActiveStatus, CurrentJulianDate;
	 
	END;

	END;
END ;
-- #desc						Gets the membership information
-- #bl_class					Premier.Club.MembershipMasterInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param MembershipID			MembershipID

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembershipMasterInfo
(
	MembershipID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembershipMasterInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
			SELECT	
				A.MS$9MMID		AS MembershipId, 
				A.MSDSC1		AS Description1,
				A.MSDSC2		AS Description2,
				A.MS$9CLUB		AS ClubId, 
				B.CMDSC1		AS ClubDescription1,
				B.CMDSC2		AS ClubDescription2,
				A.MS$9CKIT		AS ClubKitItemNumber,
				A.MS$9ADV1		AS AttributeDriver1,
				A.MS$9ADV2		AS AttributeDriver2,
				A.MS$9ADV3		AS AttributeDriver3,
				A.MS$9ADV4		AS AttributeDriver4,
				A.MS$9ADV5		AS AttributeDriver5,
				A.MS$9ADV6		AS AttributeDriver6,
				A.MS$9ADV7		AS AttributeDriver7,
				A.MS$9ADV8		AS AttributeDriver8,
				A.MS$9ADV9		AS AttributeDriver9,
				A.MSAC30		AS CategoryCode30, 
				A.MS$9CKOF		AS ClubKitOverrideFlag
			FROM	[SCDATA].FQ6759A0 A 
			INNER JOIN [SCDATA].FQ675910 B
				ON A.MS$9CLUB = B.CM$9CLUB
			WHERE MS$9MMID = MembershipID
			FOR FETCH ONLY;
		
		OPEN TEMP_CURSOR1;

END ;
-- #desc					Read Customer/Consumer MemberShip Pricing Keys
-- #bl_class				Premier.Club.MembershipPricingKeysInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param AddressNumber		AddressNumber Code  search criteria
-- #param UniqueID			Unique Key search criteria

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_GetMembershipPriceKeysInfo
(
	IN AddressNumber	NUMERIC(15,0),
	IN UniqueKeyID		NUMERIC(15,0) 
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetMembershipPriceKeysInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

SELECT 
	MM$9AN8	AS AddressNumber,
	MMUKID	AS UniqueKeyID,
	MMASN	AS PriceAdjustmentScheduleN,
	MMCPGP	AS PricingGroup,
	MMDTYS	AS DutyStatus,
	MMEUSE	AS EndUse,
	MMLOB	AS LineOfBusiness,
	MMMOT	AS ModeOfTransport,
	MMPTC	AS PaymentTerms,
	MMDMCT	AS AgreementNumber,
	MMUPC1	AS priceCode1,
	MMUPC2	AS priceCode2,
	MMUPC3	AS priceCode3
FROM [SCDATA].FQ6759B0
WHERE 
	MM$9AN8 = AddressNumber AND
	MMUKID = UniqueKeyID
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1; 
	
END



 ;
-- #desc				Loads allowed states for a given membershipid
-- #bl_class			Premier.Club.WineClubStateList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param ClubKitItemNumber	Item number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].CLB_GetWineClubKitStateList 
(
	ClubKitItemNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_GetWineClubKitStateList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
		DECLARE	LICENSE VARCHAR(3);
		DECLARE CodeLength  INTEGER;

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT	SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) AS State,
					DRDL01	AS StateDescription
			FROM	[SCDATA].FQ675520 
			INNER JOIN [SCCTL].F0005
					ON DRSY = '00'
					AND DRRT = 'S'
			WHERE	SC$9CP1 = '1'
					AND SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) = SCADDS
			ORDER BY DRDL01
			FOR FETCH ONLY;
			
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT	
				SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) AS State ,  				-- STATE CODE
				DRDL01 AS StateDescription 				-- STATE DESCRIPTION
			FROM	[SCDATA].FQ675511			
			INNER JOIN [SCDATA].FQ675520		-- SELECT STATES ALLOWED JOIN CLUB 
				ON	SCADDS 	= LDADDS 
				AND SC$9CP1 = '1'  			--HARDCODE VALUE
			INNER JOIN [SCCTL].F0005 		-- GET STATES DESCRIPTION
				ON  DRSY = '00' 
				AND DRRT = 'S'
			WHERE LD$9SRP1 = LICENSE AND
				  SUBSTRING(DRKY, 10 - CodeLength + 1, CodeLength) = LDADDS
			ORDER BY DRDL01 ASC
			FOR FETCH ONLY;
		
		-- Get Code Length
		SET CodeLength = 0;
		SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
		  WHERE DTSY = '00' AND DTRT = 'S');
		
		SELECT	IMSRP1 INTO LICENSE FROM [SCDATA].F4101 WHERE IMITM = ClubKitItemNumber;
			
		IF (LICENSE IS NULL) OR (RTRIM(LICENSE) = '') THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;
END

 ;
-- #desc						Update the membership
-- #bl_class					Premier.Club.Membership.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param UniqueD				Unique ID

CREATE OR REPLACE Procedure [SCLIBRARY].CLB_UpdMembership 
(
	IN AddressNumber			NUMERIC(15,0), 
	IN MembershipUniqueId		NUMERIC(15,0),   
	IN MembershipId				NUMERIC(15,0), 
	IN ClubId					varchar(10), 
	IN ClubStatusId				varchar(3),
	IN DateAccountOpened		NUMERIC(15,0),  
	IN DateEffective			NUMERIC(15,0),   
	IN DateExpired				NUMERIC(15,0),   
	IN DateEndingEffective		NUMERIC(15,0),   
	IN AutoRenewYN				varchar(1),
	IN PriceAdjustmentSchedule	varchar(8),   
	IN GroupCustomerPriceGroup	varchar(8),   
	IN DutyStatus				varchar(2),   
	IN EndUse					varchar(3),	
	IN LineOfBusiness			varchar(3),
	IN ModeOfTransportation		varchar(3),   
	IN PaymentTermsCode			varchar(3),    
	IN PriceCode1				varchar(3),   
	IN PriceCode2				varchar(3),   
	IN PriceCode3				varchar(3),
	IN ContractNumberDistribution	varchar(12),  
	IN ItemNumber				NUMERIC(15,0), 
	IN BranchPlant				varchar(12), 
	IN ShipToNumber				NUMERIC(15,0), 
	IN ShipToContactId			NUMERIC(15,0),
	IN DateShipped				NUMERIC(15,0),  
	IN PromiseDeliveryDate		NUMERIC(15,0),   
	IN DateRequested			NUMERIC(15,0),   
	IN DateReleaseHold			NUMERIC(15,0),   
	IN HoldReasonCode			varchar(2),
	IN ActiveInactive			varchar(1),  
	IN DateMemberSince			NUMERIC(15,0), 
	IN HighestStatus			NUMERIC(15,0), 
	IN UserReservedCode			varchar(2),   
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),  
	IN UserReservedNumber		NUMERIC(15,0),   
	IN UserReservedReference	varchar(15),   
	IN "USERID"					varchar(10),   
	IN "PROGRAMID"				varchar(10),
	IN WorkstationId			varchar(10),  
	IN DateUpdated				NUMERIC(15,0),   
	IN TimeOfDay				NUMERIC(15,0),   
	IN PickUpAddressNumber		NUMERIC(15,0),   
	IN PickUpFlag				NUMERIC(15,0)
	)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].CLB_UpdMembership
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN  

		UPDATE 
			[SCDATA].FQ6759B0
		SET 
		   MM$9MMID	=	MembershipId,			
	       MM$9CLUB	=	ClubId,				
	       MM$9STAS	=	ClubStatusId,		
       	   MMDAOJ	=	DateAccountOpened,	
	       MMEFTJ	=	DateEffective,		
	       MMEXDJ	=	DateExpired,		
	       MMEFTE	=	DateEndingEffective,	
	       MM$9ARNW =	AutoRenewYN,			
	       MMASN	=	PriceAdjustmentSchedule,
	       MMCPGP	=	GroupCustomerPriceGroup,
	       MMDTYS	=	DutyStatus,			
	       MMEUSE	=	EndUse,				
	       MMLOB	=	LineOfBusiness,			
	       MMMOT	=	ModeOfTransportation,	
	       MMPTC	=	PaymentTermsCode,		
	       MMUPC1	=	PriceCode1,				
	       MMUPC2	=	PriceCode2,				
	       MMUPC3	=	PriceCode3,			
	       MMDMCT	=	ContractNumberDistribution,
	       MM$9CKIT =	ItemNumber,				
	       MM$9CMCU =	BranchPlant,			
	       MM$9SHAN =	ShipToNumber,		
	       MMIDLN	=	ShipToContactId,		
	       MMSHPJ	=	DateShipped,			
	       MMPDDJ	=	PromiseDeliveryDate,	
	       MMDRQJ	=	DateRequested,		
	       MMRHLD	=	DateReleaseHold,		
	       MM$9RCD	=	HoldReasonCode,		
	       MMASAI	=	ActiveInactive,			
	       MM$9MSDJ =	DateMemberSince,		
	       MM$9HSOT =	HighestStatus,		
	       MMURCD	=	UserReservedCode,	
	       MMURDT	=	UserReservedDate,		
	       MMURAT	=	UserReservedAmount,	
	       MMURAB	=	UserReservedNumber,	
	       MMURRF	=	UserReservedReference,	
	       MMUSER	=	"USERID",				
	       MMPID	=	"PROGRAMID",			
	       MMJOBN	=	WorkstationId,			
	       MMUPMJ	=	DateUpdated,			
	       MMTDAY	=	TimeOfDay,				
	       MM$9PUWC =	PickUpAddressNumber,	
	       MMAN80	=	PickUpFlag				
		WHERE 
 			MM$9AN8 =	AddressNumber  AND 
 			(MMUKID =	MembershipUniqueId);
	 
END ;
-- #desc					Creates marketing code Restric
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param   MarketingCode
-- #param   UserReservedCode
-- #param	UserReservedDate
-- #param	UserReservedAmount
-- #param	UserReservedNumber
-- #param	UserReservedReference
-- #param	"USERID"
-- #param	"PROGRAMID"
-- #param	WorkStationID
-- #param	DateUpdated
-- #param	TimeOfDay

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddAllMarketingCodeRestric
(
    IN MarketingCode			varchar(30),
    IN UserReservedCode			varchar(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedReference	varchar(15),
	IN "USERID"					varchar(10),
	IN "PROGRAMID"				varchar(10),
	IN WorkStationID			varchar(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL  
SPECIFIC [SCLIBRARY].COM_AddAllMarketingCodeRestric
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE	CODELENGTH INTEGER;
	SET CODELENGTH = 0;
	SET CODELENGTH = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'DT');

    DELETE  FROM [SCDATA].FQ674210 WHERE MR$9MKT = MarketingCode;


	INSERT INTO [SCDATA].FQ674210
	(
		MR$9MKT,--MarketingCode
		MRDCTO, --DocumentType
		MRURCD, --UserReservedCode
		MRURDT, --UserReservedDate
		MRURAT, --UserReservedAmount
		MRURAB, --UserReservedNumber 
		MRURRF, --UserReservedReference
		MRUSER, --"USERID"
		MRPID,	--"PROGRAMID"
		MRJOBN,	--WorkstationId
		MRUPMJ, --DateUpdated
		MRTDAY	--TimeOfDay
	)
	SELECT
			MarketingCode,
			SUBSTRING (A.DRKY , 10 - CODELENGTH + 1 ,CODELENGTH),
			UserReservedCode,
			UserReservedDate,
			UserReservedAmount,
			UserReservedNumber,
			UserReservedReference,
			"USERID",
			"PROGRAMID",
			WorkStationID,
			DateUpdated,
			TimeOfDay
			FROM	[SCCTL].F0005 A
			WHERE	A.DRSY = '00' 
			AND		A.DRRT = 'DT'
	ORDER BY DRKY;

END ;
-- #desc					Creates Carrier Tracking 
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CarrierID			Carrier ID
-- #param TrackingURL		Tracking URL
-- #param "USERID"			User ID
-- #param "PROGRAMID"		Program ID
-- #param WorkStationID		WorkStation ID
-- #param DateUpdated		Last Date Update
-- #param TimeLastUpdated	Last Updated time

CREATE OR REPLACE Procedure [SCLIBRARY].COM_AddCarrierTracking 
(
	IN	CarrierID		NUMERIC(15,0),
	IN	TrackingURL		VARGRAPHIC(256) CCSID 13488,
	IN	"USERID"		varchar(10),
	IN	"PROGRAMID"		varchar(10),
	IN	WorkStationID	varchar(10),	
	IN	DateUpdated		NUMERIC(15,0),
	IN	TimeLastUpdated NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_AddCarrierTracking
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	INSERT INTO [SCDATA].FQ67CARS
	(
		CRAN8,  CREMAL,   CRUSER, 
		CRPID,  CRJOBN,   CRUPMJ, 
		CRUPMT
	)
	VALUES
	(
		CarrierID, TrackingURL,  "USERID",
		"PROGRAMID", WorkStationID, DateUpdated,
		TimeLastUpdated
	);
END ;
-- #desc					Creates marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Constant ID
-- #param BranchPlant		Branch plant
-- #param Description1		Description 1
-- #param Description2		Description 2
-- #param EffectiveDate		Effective date
-- #param ExpirationDate	Expiration date
-- #param UsageMode			Usage Mode flag




CREATE OR REPLACE Procedure [SCLIBRARY].COM_AddMarketingCode
(
	MarketingCode	VARCHAR(30),
	BranchPlant		VARCHAR(12),
	Description1	VARGRAPHIC(30) CCSID 13488,
	Description2	VARGRAPHIC(30) CCSID 13488,
	EffectiveDate	NUMERIC(15,0),
	ExpirationDate	NUMERIC(15,0),
	UsageMode		VARCHAR(1)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_AddMarketingCode 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO [SCDATA].FQ674204
	(
	 MK$9MKT,  MKMCU,   MKDSC1, 
	 MKDSC2,   MKEFTJ,  MKEXDJ, 
	 MK$9WEB
	)
	VALUES
	(
	 MarketingCode, BranchPlant,  Description1, 
	 Description2,  EffectiveDate, ExpirationDate, 
	 UsageMode
	);
	
END ;
-- #desc					Creates marketing code Restric
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddMarketingCodeRestric 
(
    IN MarketingCode			varchar(30),
    IN DocumentType				varchar(2),
    IN UserReservedCode			varchar(15),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0), 
	IN UserReservedNumber		NUMERIC(15,0), 
	IN UserReservedReference	varchar(2),
	IN "USERID"					varchar(10),
	IN "PROGRAMID"				varchar(10),
	IN WorkStationID			varchar(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_AddMarketingCodeRestric
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	INSERT INTO [SCDATA].FQ674210
	(
		MR$9MKT,--MarketingCode
		MRDCTO, --DocumentType
		MRURCD, --UserReservedCode
		MRURDT, --UserReservedDate
		MRURAT, --UserReservedAmount
		MRURAB, --UserReservedNumber 
		MRURRF, --UserReservedReference
		MRUSER, --"USERID"
		MRPID,	--"PROGRAMID"
		MRJOBN,	--WorkstationId
		MRUPMJ, --DateUpdated
		MRTDAY --TimeOfDay 
	)
	VALUES
	(
			MarketingCode,
			DocumentType,
			UserReservedCode,
			UserReservedDate,
			UserReservedAmount,
			UserReservedNumber,
			UserReservedReference,
			"USERID",
			"PROGRAMID",
			WorkStationID,
			DateUpdated,
			TimeOfDay
	);
END ;
-- #desc					Creates marketing code 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code
-- #param PriceKey			Price Key
-- #param PriceKeyValue		Price Key Value

CREATE OR REPLACE Procedure [SCLIBRARY].COM_AddMarketingCodeValue
(
	MarketingCode	VARCHAR(30),
	PriceKey		VARCHAR(10),
	PriceKeyValue	VARCHAR(12)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_AddMarketingCodeValue 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN 

	INSERT INTO [SCDATA].FQ674205
	(
	 MK$9MKT,  MK$9MCOL,   MK$9MVAL 
	)
	VALUES
	(
	 MarketingCode, PriceKey,  PriceKeyValue
	);
	
END

 ;
-- #desc					Add extended information to regular order.
-- #bl_class				Premier.Commerce.SalesOrderAddExtendedInfoCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param OrderNumber		Order Number
-- #param OrderCompany		Order Company
-- #param OrderType			Order Type

CREATE OR REPLACE Procedure [SCLIBRARY].COM_AddOrderExtendedInfo
(
	IN	OrderNumber		NUMERIC(15,0),
	IN	OrderCompany	VARCHAR(5),
	IN	OrderType		VARCHAR(2)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_AddOrderExtendedInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	BEGIN			
		DECLARE IsFreight INT DEFAULT 0;
		
		SET IsFreight = (SELECT COUNT(*) FROM [SCDATA].FQ67496 WHERE FRKCOO = OrderCompany AND FRDCTO = OrderType AND FRDOCO = OrderNumber);

		IF(IsFreight = 0) THEN /* Freight OFF */
			
			/*HEADER*/
			IF(NOT EXISTS (SELECT * FROM [SCDATA].FQ674201 WHERE SHKCOO = OrderCompany AND SHDOCO = OrderNumber AND SHDCTO = OrderType))THEN
				INSERT INTO [SCDATA].FQ674201
				(
					SHKCOO,
					SHDOCO,
					SHDCTO,
					SH$9AN8,
					SHIDLN,
					SH$9TYP,
					SH$9SHAN,
					SHRCK7,
					SH$9WHI,
					SH$9MKT,
					SH$9MMID,
					SH$9PD,
					SH$9DT,
					SHPID,
					SHJOBN,
					SHUSER,
					SHUPMJ,
					SHUPMT
				)
				SELECT      
					SHKCOO	AS SHKCOO,
					SHDOCO	AS SHDOCO,
					SHDCTO	AS SHDCTO,
					SHAN8	AS SH$9AN8,
					0		AS SHIDLN,
					0		AS SH$9TYP,
					SHSHAN	AS SH$9SHAN,
					0		AS SHRCK7,
					' '		AS SH$9WHI,
					' '		AS SH$9MKT,
					0		AS SH$9MMID,
					0		AS SH$9PD,
					0		AS SH$9DT,
					SHPID	AS SHPID,
					SHJOBN	AS SHJOBN,
					SHUSER	AS SHUSER,
					SHUPMJ	AS SHUPMJ,
					SHTDAY	AS SHUPMT
				FROM [SCDATA].F4201
				WHERE SHDOCO = OrderNumber AND 
					  SHKCOO = OrderCompany AND 
					  SHDCTO = OrderType;
			END IF;
			
			/*DETAIL*/
			INSERT INTO [SCDATA].FQ674211
			(
				SDKCOO,
				SDDOCO,
				SDDCTO,
				SDLNID,
				SD$9AN8,
				SDIDLN,
				SD$9TYP,
				SD$9SHAN,
				SDRCK7,
				SD$9MKTG,
				SD$9IGPR,
				SDKIT,
				SDMMCU,
				SDCPNT,
				SDKTLN,
				SD$9SLN,
				SD$9FQTY,
				SD$9IID,
				SD$9STS,
				SDQNTY,
				SD$9UOM,
				SDPID,
				SDJOBN,
				SDUSER,
				SDUPMJ,
				SDUPMT
			)
			SELECT
				A.SDKCOO AS SDKCOO,
				A.SDDOCO AS SDDOCO,
				A.SDDCTO AS SDDCTO,
				A.SDLNID AS SDLNID,
				A.SDAN8  AS SD$9AN8,
				0   AS SDIDLN,
				0   AS SD$9TYP,
				A.SDSHAN AS SD$9SHAN,
				0   AS SDRCK7,
				' '   AS SD$9MKTG,
				0   AS SD$9IGPR,
				0   AS SDKIT,
				' '   AS SDMMCU,
				0   AS SDCPNT,
				0   AS SDKTLN,
				0   AS SD$9SLN,
				0   AS SD$9FQTY,
				0   AS SD$9IID,
				'A'   AS SD$9STS,
				0   AS SDQNTY,
				' '   AS SD$9UOM,
				A.SDPID  AS SDPID,
				A.SDJOBN AS SDJOBN,
				A.SDUSER AS SDUSER,
				A.SDUPMJ AS SDUPMJ,
				A.SDTDAY AS SDUPMT
			FROM [SCDATA].F4211 A
			WHERE A.SDDOCO = OrderNumber AND 
				   A.SDKCOO = OrderCompany AND 
				   A.SDDCTO = OrderType AND 
				   NOT EXISTS (SELECT * FROM [SCDATA].FQ674211 B 
								WHERE B.SDKCOO = OrderCompany AND B.SDDOCO = OrderNumber AND B.SDDCTO = OrderType AND B.SDLNID = A.SDLNID);		
		END IF;
	END;
END  ;
-- #desc					Creates P4210 Version Rule Detail
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID.
-- #param RuleUniqueID		Rule Unique ID
-- #param LineID			Line ID
-- #param UserDefinedKey	User Defined Key
-- #param BranchPlant		Branch Plant
-- #param AddressNumber		Address Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_AddP4210VersRuleDetail 
(
	IN InstallationID			VARCHAR(3),
	IN RuleUniqueID				NUMERIC(15,0),
	INOUT LineID				NUMERIC(15,0),
	IN UserDefinedKey			VARCHAR(10),
	IN BranchPlant				VARCHAR(12),
	IN AddressNumber			NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN WorkStationID			VARCHAR(10)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_AddP4210VersRuleDetail
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN

	--Get max sequence number
	SET LineID = (COALESCE((SELECT MAX (RDLNID) FROM [SCDATA].FQ674231 WHERE RDUKID = RuleUniqueID AND RD$9INID = InstallationID),0) + 1);

	INSERT INTO [SCDATA].FQ674231
	(
		RD$9INID,
		RDUKID,
		RDLNID,
		RDKY,
		RDMCU,
		RD$9AN8,
		RDURAB,
		RDURAT,
		RDURCD,
		RDURDT,
		RDURRF,
		RDUSER,
		RDPID,
		RDUPMJ,
		RDUPMT,
		RDJOBN
	)
	VALUES
	(
		InstallationID,
		RuleUniqueID,
		LineID,
		UserDefinedKey,
		BranchPlant,
		AddressNumber,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		"USERID",
		"PROGRAMID",
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);
END ;
-- #desc					Creates P4210 Version Rule Header
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param Description		Description
-- #param P4210Version		P4210 Version
-- #param Hierarchy			Hierarchy
-- #param RuleType			Rule Type
-- #param CategoryCode		Category Code

CREATE OR REPLACE procedure [SCLIBRARY].COM_AddP4210VersRuleHeader 
(
	IN InstallationID			VARCHAR(3),
	INOUT RuleUniqueID			NUMERIC(15,0),
	IN Description				VARGRAPHIC(30) CCSID 13488,
	IN P4210Version				VARCHAR(10),
	IN Hierarchy				NUMERIC(15,0),
	IN RuleType					VARCHAR(2),
	IN CategoryCode				VARCHAR(2),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN WorkStationID			VARCHAR(10)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_AddP4210VersRuleHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	--Get max sequence number
	SET RuleUniqueID = (COALESCE((SELECT MAX (RHUKID) FROM [SCDATA].FQ674230),0) + 1);
	
	INSERT INTO [SCDATA].FQ674230
	(
		RH$9INID,
		RHUKID,
		RHDSC1,
		RHVER,
		RHSEQ,
		RHRUDTP,
		RHRT,
		RHURAB,
		RHURAT,
		RHURCD,
		RHURDT,
		RHURRF,
		RHUSER,
		RHPID,
		RHUPMJ,
		RHUPMT,
		RHJOBN
	)
	VALUES
	(
		InstallationID,
		RuleUniqueID,
		Description,
		P4210Version,
		Hierarchy,
		RuleType,
		CategoryCode,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		"USERID",
		"PROGRAMID",
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);	
END ;
-- #desc				Check if the user already used reference before
-- #bl_class			Premier.Commerce.CheckOrderCustomerRefCommand.cs
-- #db_dependencies		N/A
-- #db_references		N/A		

CREATE OR REPLACE Procedure [SCLIBRARY].COM_CheckOrderCustomerRef
(
    IN AddressNumber	NUMERIC(8,0),
	IN CustReference	GRAPHIC(25) CCSID 13488,
	IN OrderCompany		GRAPHIC(5) CCSID 13488,
	IN OrderType		GRAPHIC(2) CCSID 13488,
	IN OrderNumber		NUMERIC(8,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_CheckOrderCustomerRef 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR  
	WITH CTE AS (
		SELECT SHDOCO FROM [SCDATA].F4201
		WHERE SHAN8 = AddressNumber AND SHVR01 = CustReference
			AND (OrderCompany = '*' OR SHKCOO <> OrderCompany) 
			AND (OrderType = '*' OR SHDCTO <> OrderType) 
			AND (OrderNumber IS NULL OR SHDOCO <> OrderNumber)
		UNION ALL
		SELECT SHDOCO FROM [SCDATA].F42019
		WHERE SHAN8 = AddressNumber AND SHVR01 = CustReference
			AND (OrderCompany = '*' OR SHKCOO <> OrderCompany) 
			AND (OrderType = '*' OR SHDCTO <> OrderType) 
			AND (OrderNumber IS NULL OR SHDOCO <> OrderNumber)
	)
	SELECT COUNT(1) AS RefUsed FROM CTE
	FOR FETCH ONLY;

OPEN TEMP_CURSOR1;

END 
 ;
-- #desc					Delete marketing code restric
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelAllMarketingCodeRestric 
(
  MarketingCode	varchar(30)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelAllMarketingCodeRestric 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DELETE 	FROM 
		[SCDATA].FQ674210
	WHERE 
		MR$9MKT = MarketingCode;
END
 ;
-- #desc				Deletes Carrier Tracking 
-- #bl_class			Premier.Commerce.CarrierTracking.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param CarrierID		Carrier ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelCarrierTracking
(
	IN CarrierID NUMERIC(15,0)
)		
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelCarrierTracking 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DELETE FROM
			[SCDATA].FQ67CARS
	WHERE 
			CRAN8 = CarrierID;
END ;
-- #desc					Delete marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Constant ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelMarketingCode
(
	MarketingCode  varchar(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelMarketingCode 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	
--Delete from FQ674204

DELETE  FROM  
	[SCDATA].FQ674204
WHERE 
	MK$9MKT = MarketingCode;

--Delete from FQ674205

DELETE  FROM  
	[SCDATA].FQ674205
WHERE 
	MK$9MKT = MarketingCode;

--Delete from FQ674210
DELETE  FROM  
	[SCDATA].FQ674210
WHERE 
	MR$9MKT = MarketingCode;

--Delete from FQ674240
CALL [SCLIBRARY].COM_DelMarketingCodeTracking(MarketingCode);

END ;
-- #desc						Delete marketing code restric
-- #bl_class					Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param MarketingCode			Marketing Code
-- #param DocumentType			Document Type

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelMarketingCodeRestric 
(
  IN MarketingCode	varchar(30),
  IN DocumentType 	varchar(30)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelMarketingCodeRestric 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE 	FROM 
		[SCDATA].FQ674210
	WHERE	
		    (MR$9MKT = MarketingCode)
		AND	(MRDCTO = DocumentType);

END
	
  ;
-- #desc					Delete marketing code value 
-- #bl_class				Premier.Commerce.MarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code
-- #param PriceKey			Price Key

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelMarketingCodeValue
(
	MarketingCode  varchar(30),
	PriceKey varchar(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelMarketingCodeValue 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DELETE  FROM  
	[SCDATA].FQ674205
WHERE 
	    (MK$9MKT = MarketingCode) 
	AND (MK$9MCOL = PriceKey);

END ;
-- #desc					Delete P4210 Version Rule Detail 
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param LineID			Line ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelP4210VersRuleDetail
(
	InstallationID	VARCHAR(3),
	RuleUniqueID	NUMERIC(15,0),
	LineID			NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelP4210VersRuleDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DELETE  FROM
		[SCDATA].FQ674231
	WHERE 
		RD$9INID = InstallationID AND 
		RDUKID = RuleUniqueID AND
		RDLNID = LineID;
END ;
-- #desc					Delete P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		RuleUnique ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_DelP4210VersRuleHeader
(
	InstallationID	VARCHAR(3),
	RuleUniqueID	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_DelP4210VersRuleHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE  FROM
		[SCDATA].FQ674230
	WHERE 
		RH$9INID = InstallationID AND
		RHUKID = RuleUniqueID;

	DELETE  FROM
		[SCDATA].FQ674231
	WHERE 
		RD$9INID = InstallationID AND
		RDUKID = RuleUniqueID;

END ;
-- #desc						Load line base price information
-- #bl_class					Premier.Commerce.GetLineBasePriceInfCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param OrderCompany			Company ID
-- #param OrderType				Document Type
-- #param OrderNumber			OrderNumber
-- #param LineNumberID			Line Number

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_ExcGetLineBasePriceInf
(
	IN OrderCompany		VARCHAR(5),
	IN OrderType		VARCHAR(2),
	IN OrderNumber		NUMERIC(15,0),
	IN LineNumberID		NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_ExcGetLineBasePriceInf 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR  
		SELECT 
			ALUPRC AS BasePrice
		FROM [SCDATA].F4074
		WHERE 
			ALKCOO = OrderCompany
			AND ALDCTO = OrderType
			AND ALDOCO = OrderNumber
			AND ALLNID = LineNumberID
			AND ALOSEQ = 100
		FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;

END ;
-- #desc							Insert marketing code tracking 
-- #bl_class						Premier.Commerce.MarketingCodeRedemptionCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param MarketingCode				Marketing Code
-- #param InstallationID			Installation ID
-- #param AddressBookType			Address Book Type
-- #param AddressNumber				Address Number
-- #param ContactID					Contact ID
-- #param WebAccountID				WebAccount ID
-- #param TransactionDate			Transaction Date
-- #param OrderCompany				Order Company
-- #param DocumentType				Document Type 
-- #param DocumentNumber			Document Number
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param WorkStationID				WorkStation ID
-- #param DateUpdated				Date Updated 
-- #param TimeLastUpdated			Time Last Updated

CREATE OR REPLACE Procedure [SCLIBRARY].COM_ExcMKTCodeRedemption
(
	MarketingCode			VARCHAR(30),
	InstallationID			VARCHAR(3),
	AddressBookType			NUMERIC(15,0),
	AddressNumber			NUMERIC(15,0),
	ContactID				NUMERIC(15,0),
	WebAccountID			NUMERIC(15,0),
	TransactionDate			NUMERIC(15,0),
	OrderCompany			VARCHAR(5),
	DocumentType			VARCHAR(2),
	DocumentNumber			NUMERIC(15,0),
	UserReservedNumber		NUMERIC(15,0), 
	UserReservedAmount		NUMERIC(15,0),
	UserReservedCode		VARCHAR(2),
	UserReservedDate		NUMERIC(15,0),
	UserReservedReference	VARCHAR(15),
	UserID					VARCHAR(10),
	ProgramID				VARCHAR(10),	
	WorkStationID			VARCHAR(10),
	DateUpdated				NUMERIC(15,0),
	TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_ExcMKTCodeRedemption 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG

BEGIN 

	INSERT INTO [SCDATA].FQ674240
	(
	 MK$9MKT, MK$9INID, MK$9TYP, MK$9AN8,
	 MKIDLN, MK$9WAN8, MKTRDJ, MKKCOO,
	 MKDCTO, MKDOCO, MKURAB, MKURAT,
	 MKURCD, MKURDT, MKURRF, MKUSER,
	 MKPID, MKJOBN, MKUPMJ, MKUPMT
	)
	VALUES
	(
	 MarketingCode, InstallationID, AddressBookType, AddressNumber,
	 ContactID, WebAccountID, TransactionDate, OrderCompany,
	 DocumentType, DocumentNumber, UserReservedNumber, UserReservedAmount,
	 UserReservedCode, UserReservedDate, UserReservedReference, UserID,
	 ProgramID, WorkStationID, DateUpdated, TimeLastUpdated
	);
	
END ;
-- #desc						Execute Update EDI Invoice status
-- #bl_class					Premier.Commerce.PunchOutUpdateInvoiceStatusCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- param EDIType				EDI Document Type
-- param EDINumber				EDI Document Number
-- param EDICompany				EDI Document Company

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_ExcUpdPunchInvoiceStatus
(
	IN EDIType			VARCHAR(2),
	IN EDINumber		NUMERIC(15,0),
	IN EDICompany		VARCHAR(5)
)
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_ExcUpdPunchInvoiceStatus
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN 

	/*EDI Invoice Header (Sales) - Outbound*/
	UPDATE [SCDATA].F47046 
	SET SYEDSP = 'Y'
    WHERE SYEDOC = EDINumber AND SYEDCT = EDIType AND SYEKCO = EDICompany;
	
	/*EDI Invoice Additional Header - Outbound*/
	UPDATE [SCDATA].F470461
	SET S3EDSP = 'Y'
    WHERE S3EDOC = EDINumber AND S3EDCT = EDIType AND S3EKCO = EDICompany;

	/*EDI Invoice Expanded Header (Sales)*/
	UPDATE [SCDATA].F470462
	SET S5EDSP = 'Y'
    WHERE S5EDOC = EDINumber AND S5EDCT = EDIType AND S5EKCO = EDICompany;

	/*EDI Invoice Detail (Sales) - Outbound*/
	UPDATE [SCDATA].F47047
	SET SZEDSP = 'Y'
    WHERE SZEDOC = EDINumber AND SZEDCT = EDIType AND SZEKCO = EDICompany;

	/*EDI Invoice Additional Detail - Outbound*/
	UPDATE [SCDATA].F470471
	SET S4EDSP = 'Y'
    WHERE S4EDOC = EDINumber AND S4EDCT = EDIType AND S4EKCO = EDICompany;

	/*EDI Invoice Expanded Detail (Sales)*/
	UPDATE [SCDATA].F470472
	SET S6EDSP = 'Y'
    WHERE S6EDOC = EDINumber AND S6EDCT = EDIType AND S6EKCO = EDICompany;

	/*EDI Invoice Detail Charges*/
	UPDATE [SCDATA].F470473
	SET S7EDSP = 'Y'
    WHERE S7EDOC = EDINumber AND S7EDCT = EDIType AND S7EKCO = EDICompany;

	/*EDI Order Address Information*/
	UPDATE [SCDATA].F4706
	SET ZAEDSP = 'Y'
    WHERE ZAEDOC = EDINumber AND ZAEDCT = EDIType AND ZAEKCO = EDICompany;

	/*EDI Order Text Lines - Header*/
	UPDATE [SCDATA].F4714
	SET ZTEDSP = 'Y'
    WHERE ZTEDOC = EDINumber AND ZTEDCT = EDIType AND ZTEKCO = EDICompany;

	/*EDI Order Text Lines - Detail*/
	UPDATE [SCDATA].F4715
	SET ZDEDSP = 'Y'
    WHERE ZDEDOC = EDINumber AND ZDEDCT = EDIType AND ZDEKCO = EDICompany;

END ;
  -- #desc					Validate Marketing Code
-- #bl_class				Premier.Commerce.MarketingCodeInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param MarketingCode		Marketing Code
-- #param DocumentType		Document Types
-- #param WebEnabledOnly	if On return only webEnabled Marketing Codes
-- #param AddressBookType	Address Book Type
-- #param AddressNumber		Address Number
-- #param WebAccountID		Web Account ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_ExcValidateMKTCodeInfo
(
	InstallationID		VARCHAR(3),
	MarketingCode		VARCHAR(30),
	DocumentType		VARCHAR(3),
	WebEnabledOnly		VARCHAR(1),
	AddressBookType		NUMERIC(15,0),
	AddressNumber		NUMERIC(15,0),
	WebAccountID		NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_ExcValidateMKTCodeInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	-- 1 Yes , 0 No
	DECLARE isRestricted VARCHAR(1);
	-- 0 No, > 0 Yes
	DECLARE Redeemed NUMERIC(15,0);
	-- N WebDisabledMultiUse, S WebDisabledSingleAN8, Y WebEnabledMultiUse, A WebEnabledSingleAN8, W WebEnabledSingleWebAcct
	DECLARE MKTUsageMode VARCHAR(1);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		A.MK$9MKT		AS MarketingCode,
		A.MKDSC1		AS Description1,
		A.MKDSC2		AS Description2,
		A.MKEFTJ		AS EffectiveDate,
		A.MKEXDJ		AS ExpirationDate,
		A.MK$9WEB		AS UsageMode,
		isRestricted	AS IsRestricted,
		Redeemed		AS Redeemed 
	FROM
		[SCDATA].FQ674204 A
		INNER JOIN [SCDATA].FQ679910 B
		ON A.MKMCU = B.BIMCU
	WHERE
		MK$9MKT = MarketingCode
		AND B.BI$9INID = InstallationID
		AND (WebEnabledOnly = '*' OR A.MK$9WEB <> 'N' OR A.MK$9WEB <> 'S')
	FOR FETCH ONLY;
	 
	--Validate if Marketing Code has restricted
	SET isRestricted = 'N';
	IF((SELECT COUNT(*) FROM [SCDATA].FQ674210 WHERE MR$9MKT = MarketingCode) >0 ) THEN
		IF((SELECT COUNT(*) FROM [SCDATA].FQ674210 WHERE MR$9MKT = MarketingCode AND MRDCTO = DocumentType) >0 ) THEN
			SET isRestricted = 'N';
		ELSE
			SET isRestricted = 'Y';
		END IF;
	ELSE
		SET isRestricted = 'N';
	END IF;
	
	--Validate if Marketing Code was redeemed
	SET Redeemed = 0;
	SET MKTUsageMode = (SELECT A.MK$9WEB FROM [SCDATA].FQ674204 A
						INNER JOIN [SCDATA].FQ679910 B
						ON A.MKMCU = B.BIMCU
						WHERE A.MK$9MKT = MarketingCode AND B.BI$9INID = InstallationID);

	IF(MKTUsageMode = 'S')
	THEN
		SET Redeemed = (SELECT COUNT(*) FROM [SCDATA].FQ674240
						WHERE MK$9MKT = MarketingCode AND MK$9INID = InstallationID
						AND MK$9TYP = AddressBookType AND MK$9AN8 = AddressNumber);
	ELSEIF(MKTUsageMode = 'A')
	THEN
		SET Redeemed = (SELECT COUNT(*) FROM [SCDATA].FQ674240
						WHERE MK$9MKT = MarketingCode AND MK$9INID = InstallationID
						AND MK$9TYP = AddressBookType AND MK$9AN8 = AddressNumber);
	ELSEIF(MKTUsageMode = 'W')
	THEN
		SET Redeemed = (SELECT COUNT(*) FROM [SCDATA].FQ674240
						WHERE MK$9MKT = MarketingCode AND MK$9INID = InstallationID
						AND MK$9WAN8 = WebAccountID);
	END IF;

	OPEN TEMP_CURSOR1;
END ;
-- #desc						Validate if the order belongs to the address number 
-- #bl_class					Premier.Commerce.ValidateOrderByAddressNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param OrderCompany			Order Company
-- #param OrderType				Document type to search for.
-- #param OrderNumber			Order Number
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type

CREATE OR REPLACE Procedure [SCLIBRARY].COM_ExcValidateOrderByAddrNo 
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN OrderCompany		GRAPHIC(5) CCSID 13488,
	IN OrderType		GRAPHIC(2) CCSID 13488,
	IN OrderNumber		NUMERIC(8, 0), 
	IN AddressNumber	NUMERIC(15, 0),
	IN AddressBookType	NUMERIC(15, 0),
	OUT ValidOrder INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL  
SPECIFIC [SCLIBRARY].COM_ExcValidateOrderByAddrNo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE SOrderRestric		GRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID			GRAPHIC(3) CCSID 13488;
	DECLARE SOrderConstant		VARGRAPHIC(10) CCSID 13488;
	DECLARE CompanyRestric		GRAPHIC(1) CCSID 13488;
	DECLARE CompanyINID			GRAPHIC(3) CCSID 13488;

	SET SOrderConstant = 'SO_RESTRIC' ; 
	SET SOrderINID = InstallationID ; 
	
	/* Gets the Sales Order Document Restrictions */ 
	CALL [SCLIBRARY].CMM_GetConstantValue(SOrderConstant, SOrderINID, SOrderRestric) ; 
	
	/* Read Account Receivable company constant */ 
	SET CompanyINID = InstallationID ; 
	CALL [SCLIBRARY].CMM_GetConstantValue( 'INSCOMPANY', CompanyINID , CompanyRestric);

	/* Customer */
	IF (AddressBookType = 0) THEN
		WITH CTE AS ( 
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				SHCO 
			FROM [SCDATA].F4201 A		/* Sales Order Header */
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND A.SHAN8 = AddressNumber
			UNION ALL
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				SHCO 
			FROM [SCDATA].F42019 A	/* Historical Sales Order Header */
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND A.SHAN8 = AddressNumber
		) 
		SELECT 
			COUNT(1) INTO ValidOrder
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DR$9INID = SOrderINID
			AND SOR.DR$9CNST = SOrderConstant
			AND SOR.DRKY = A.SHDCTO 
		LEFT OUTER JOIN [SCDATA].FQ679912 CR /* Extended Sales Order Header */
			ON CR.CI$9INID = CompanyINID
			AND CR.CICO = A.SHCO
		WHERE (SOrderRestric = N'0' OR SOR.DRKY IS NOT NULL)
			AND (CompanyRestric = N'A' OR CR.CICO IS NOT NULL);
	ELSE
		WITH CTE AS ( 
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				A.SHCO 
			FROM [SCDATA].F4201 A		/* Sales Order Header */
			INNER JOIN [SCDATA].FQ674201 B	/* Extended Sales Order Header */
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND B.SH$9AN8 = AddressNumber
				AND B.SH$9TYP = AddressBookType 
			UNION ALL
			SELECT 
				A.SHDOCO,	 
				A.SHDCTO, 
				A.SHKCOO,
				A.SHCO 
			FROM [SCDATA].F42019 A	/* Historical Sales Order Header */
			INNER JOIN [SCDATA].FQ674201 B	/* Extended Sales Order Header */
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO
			WHERE A.SHDOCO = OrderNumber
				AND A.SHDCTO = OrderType
				AND A.SHKCOO = OrderCompany
				AND B.SH$9AN8 = AddressNumber
				AND B.SH$9TYP = AddressBookType 
		) 
		SELECT 
			COUNT(1) INTO ValidOrder
		FROM CTE A
		LEFT OUTER JOIN [SCDATA].FQ67008 SOR
			ON SOR.DR$9INID = SOrderINID
			AND SOR.DR$9CNST = SOrderConstant
			AND SOR.DRKY = A.SHDCTO 
		LEFT OUTER JOIN [SCDATA].FQ679912 CR
			ON CR.CI$9INID = CompanyINID
			AND CR.CICO = A.SHCO
		WHERE (SOrderRestric = N'0' OR SOR.DRKY IS NOT NULL)
			AND (CompanyRestric = N'A' OR CR.CICO IS NOT NULL);
	END IF;

END;
 -- #desc				        Get Bank Account 
-- #bl_class			        Premier.Commerce.BankAccountInfo.cs
-- #db_dependencies		        N/A
-- #db_references		        N/A

-- #param BankAccountID		    N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetBankAccountInfo
(
	 IN BankAccountID		 GRAPHIC(8) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetBankAccountInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

    BEGIN 
        DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
            SELECT  
                T1.GMAID	AS BankAccountID, 
                T1.GMCO		AS Company, 
                T1.GMMCU	AS BranchPlant, 
                T1.GMOBJ	AS ObjectAccount,
                T1.GMSUB	AS Subsidiary, 
                T1.GMDL01	AS Description
            FROM  
                [SCDATA].F0006 T0					-- Business Unit
                INNER JOIN [SCDATA].F0901 T1		-- Account Master
	                ON T0.MCMCU = T1.GMMCU 
            WHERE  
                (T1.GMAID = BankAccountID)
                ORDER BY T1.GMMCU ASC,T1.GMOBJ ASC,T1.GMSUB ASC,T1.GMAID,T1.GMDL01 ASC
                FOR FETCH ONLY;
                
	    OPEN TEMP_CURSOR1;
    END

 ;
-- #desc					Get Bank Account List
-- #bl_class				Premier.Commerce.BankAccountList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param FilterTerm		N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetBankAccountList 
(
	 IN FilterTerm			VARGRAPHIC(30) CCSID 13488,
	 IN PageIndex			INT,
     IN PageSize			INT
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetBankAccountList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

    DECLARE ROWSTART INT;
	DECLARE ROWEND INT;

    BEGIN

        DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
        WITH PAGING AS (
			SELECT  
	            T1.GMAID	AS BankAccountID, 
	            T1.GMCO		AS Company, 
	            T1.GMMCU	AS BranchPlant, 
	            T1.GMOBJ	AS ObjectAccount,
	            T1.GMSUB	AS Subsidiary, 
	            T1.GMDL01	AS Description,
				ROW_NUMBER() OVER(ORDER BY T1.GMMCU ASC, T1.GMOBJ ASC, T1.GMSUB ASC, T1.GMAID) AS RNUM 
			FROM  
	            [SCDATA].F0901 T1		-- Account Master
				INNER JOIN [SCDATA].F0006 T0					-- Business Unit
		            ON T0.MCMCU = T1.GMMCU 
         )
        SELECT 
            BANKACCOUNTID, COMPANY, BRANCHPLANT, OBJECTACCOUNT, SUBSIDIARY, DESCRIPTION,(SELECT COUNT(1) FROM PAGING) AS TotalRowCount    
        FROM PAGING
        WHERE (( PAGEINDEX  = 0 OR PAGESIZE = 0) OR (RNUM BETWEEN ROWSTART AND ROWEND ))
        FOR READ ONLY ; 

        DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
        WITH PAGING AS (
			SELECT  
	            T1.GMAID	AS BankAccountID, 
	            T1.GMCO		AS Company, 
	            T1.GMMCU	AS BranchPlant, 
	            T1.GMOBJ	AS ObjectAccount,
	            T1.GMSUB	AS Subsidiary, 
	            T1.GMDL01	AS Description,
				ROW_NUMBER() OVER(ORDER BY T1.GMMCU ASC , T1.GMOBJ ASC , T1.GMSUB ASC , T1.GMAID ) AS RNUM 
			FROM  
	            [SCDATA].F0901 T1		-- Account Master
	            INNER JOIN [SCDATA].F0006 T0					-- Business Unit
		            ON T0.MCMCU = T1.GMMCU 
            WHERE (T1.GMAID LIKE '%' || FILTERTERM || '%' 
					OR T1.GMOBJ LIKE '%' || FILTERTERM || '%'
					OR T1.GMSUB LIKE '%' || FILTERTERM || '%'
					OR T1.GMDL01 LIKE '%' || FILTERTERM || '%')
        )
        SELECT 
			BANKACCOUNTID, COMPANY, BRANCHPLANT, OBJECTACCOUNT, SUBSIDIARY, DESCRIPTION, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount   
        FROM PAGING
        WHERE
        (( PAGEINDEX  = 0 OR PAGESIZE = 0) OR (RNUM BETWEEN ROWSTART AND ROWEND ))
        FOR READ ONLY ; 

        /*Paging */ 
        SET ROWSTART = ( ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 ) ; 

        SET ROWEND = ( PAGEINDEX * PAGESIZE ) ; 
        
        IF ( FILTERTERM = '*') THEN		
            OPEN TEMP_CURSOR1 ; 
        ELSE
            OPEN TEMP_CURSOR2 ;
        END IF; 
	END; 
END; 


-- #desc						Load Carrier Freight Method List
-- #bl_class					Premier.Commerce.FreightMethodList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param CostCenter			N/A
-- #param ShipmentPriority		N/A
-- #param CustomerGroupKeyID 	N/A
-- #param CountryFreight 		N/A
-- #param ZipCodePostal		    N/A
-- #param LangPref				N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCarrierFreightMethods
(
	CostCenter	  			varChar(12),
	ShipmentPriority 		NUMERIC(15,0),
	CustomerGroupKeyID		NUMERIC(15,0),
	CountryFreight 			varChar(3),
    ZipCodePostal 			varChar(12),
    LangPref				varChar(2)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetCarrierFreightMethods
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		ZNMCU	AS CostCenter,
		ZNCARS	AS Carrier,
		ABALPH	AS CarrierAlphaName,
		ZN$9CTR	AS CountryFreight,
		ZN$9ZTO	AS PostalCodeFrom,
		ZN$9ZTH	AS PostalCodeThru,
		ZNMOT	AS ModeOfTransport,
		ZN$9SHPR	AS ShipmentPriority,
		ZN$9CID	AS CustomerGroupKeyID,
		ZN$9ZON	AS ShipToZone,
		ZN$9STAT	AS Status,
		ZN$9DEF	AS DefaultMode,
		ZN$9FF	AS FixedFeeRate,
		ZN$9MIN	AS MinimunChargeRate,
		ZN$9SUR	AS Surcharge, 
		ZN$9PBXA	AS PostalBoxAllowed,
		ZN$9CODA	AS CODAllowed,
		(CASE LTRIM(RTRIM(CA$9WEBA))
			WHEN '0' THEN ZN$9WEBA					
			ELSE 	CA$9WEBA						
		END											
		)			AS WebAllowed,
		ZN$9COD		AS CODSurcharge,
		ZN$9WCFLG	AS WeightControlFlag,
		ZN$9WLMT		AS WeightLimit,
		COALESCE(IS$9CRESP,0)	AS InsuranceResponsability,
		COALESCE(IS$9DIV,0)		AS InsuranceDivider,
		COALESCE(IS$9IFACT,0)	AS InsuranceFactor,
		ZN$9CST	AS CostType,
		ZNURCD	AS UserReservedCode, 
		ZNURDT	AS UserReservedDate, 
		ZNURAT	AS UserReservedAmount, 
		ZNURAB	AS UserReservedNumber, 
		ZNURRF	AS UserReservedReference,
		ZNUSER	AS "USERID",
		ZNJOBN	AS WorkStationId,
		ZNPID	AS "PROGRAMID",
		ZNUPMJ	AS DateUpdated,
		ZNTDAY	AS TimeOfDay,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','TM',ZNMOT,LangPref) AS MOTDescription
	FROM [SCDATA].FQ67491 A
	INNER JOIN [SCDATA].FQ67493 B
		ON A.CAMCU = B.ZNMCU
		AND A.CACARS=B.ZNCARS
	INNER JOIN [SCDATA].F0101 C
		ON A.CACARS = C.ABAN8
	LEFT OUTER JOIN [SCDATA].FQ67492 D2
		ON A.CACARS = D2.ISCARS
	WHERE  (CostCenter IS NULL OR B.ZNMCU = CostCenter)
		AND (ShipmentPriority IS NULL OR B.ZN$9SHPR = ShipmentPriority)
		AND (ZipCodePostal IS NULL OR B.ZN$9ZTH >= ZipCodePostal)
		AND (ZipCodePostal IS NULL OR B.ZN$9ZTO <= ZipCodePostal)
		AND (CustomerGroupKeyID IS NULL OR B.ZN$9CID = CustomerGroupKeyID)
		AND (CountryFreight IS NULL OR B.ZN$9CTR = CountryFreight)
		AND  B.ZN$9STAT = 0
		AND  A.CA$9STAT = 0
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;
END;
-- #desc						Load Carrier List
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param SearchType			N/A

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetCarrierList
(
	SearchType varchar(3)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetCarrierList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
SELECT	
	ABAN8 AS AddressNumber,
	ABALPH AS AlphaName
FROM 
	-- Address Book Master Table
	[SCDATA].F0101
WHERE          
	-- Search Type filter
    UPPER(RTRIM(ABAT1)) = UPPER(RTRIM(SearchType))
FOR FETCH ONLY;

OPEN TEMP_CURSOR1;

END


 ;
-- #desc					Load Carrier List
-- #bl_class				Premier.Commerce.CarrierList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param SearchType		Search Type for Carriers
-- #param AddressNumber		Optional specific Carrier Number

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetCarriers
(
	SearchType varchar(3),
	AddressNumber NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetCarriers 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
SELECT	
	ABAN8 AS AddressNumber,
	ABALPH AS AlphaName
FROM 
	-- Address Book Master Table
	[SCDATA].F0101
WHERE          
	-- Search Type filter
    UPPER(RTRIM(ABAT1)) = UPPER(RTRIM(SearchType))
    -- Optional specific Carrier Number
    AND (AddressNumber IS NULL OR ABAN8 = AddressNumber)
FOR FETCH ONLY;

OPEN TEMP_CURSOR1;

END


 ;
-- #desc					Get Carrier Tracking
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CarrierID			Carrier Id

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetCarrierTracking
(
	IN CarrierID NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetCarrierTracking 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT	
			A.CRAN8 AS CarrierID,
			COALESCE(B.ABALPH,' ') AS AlphaName,
			A.CREMAL AS TrackingURL
		FROM
			[SCDATA].FQ67CARS A
			LEFT OUTER JOIN [SCDATA].F0101 B ON-- Address Book Master Table
				A.CRAN8 = B.ABAN8
			WHERE
				A.CRAN8 = CarrierID
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
				
END ;
-- #desc				Load Carrier Tracking List
-- #bl_class			Premier.Commerce.CarrierTrackingList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetCarrierTrackingList 

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetCarrierTrackingList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT	
			A.CRAN8 AS CarrierID,
			B.ABALPH AS AlphaName
		FROM
			[SCDATA].FQ67CARS A
			INNER JOIN [SCDATA].F0101 B ON-- Address Book Master Table
			A.CRAN8 = B.ABAN8
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
END ;

-- #desc							Returns the last OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.SalesOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A		

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param OrdersToDisplay			Quantity of rows to be returned
-- #param Company					Company if is 00000 is '*'
-- #param LastDays					Filter orders in last N days

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetConsumerRecentSOList
(
	IN InstallationID			GRAPHIC(3) CCSID 13488,
	IN AddressNumber			NUMERIC(15,0),
	IN OrdersToDisplay			NUMERIC(8,0),
	IN Company					GRAPHIC(5) CCSID 13488,
	IN LastDays					INT/* 0 or N days */
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetConsumerRecentSOList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE SOrderRestric	VARGRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID		GRAPHIC(3) CCSID 13488;
	DECLARE SOrderConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE FreightLineType	VARGRAPHIC(2) CCSID 13488;
	DECLARE FreightINID	    GRAPHIC(3) CCSID 13488;
	DECLARE FreightConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE DiscountLineType	VARGRAPHIC(2) CCSID 13488;
	DECLARE DiscountINID	    GRAPHIC(3) CCSID 13488;
	DECLARE DiscountConstant	GRAPHIC(10) CCSID 13488;

	DECLARE SurchargeLineType	VARGRAPHIC(2) CCSID 13488;
	DECLARE SurchargeINID	    GRAPHIC(3) CCSID 13488;
	DECLARE SurchargeConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE CompanyConstant		VARGRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488;
	
	DECLARE OpenLnStatus		VARGRAPHIC(3) CCSID 13488;
	DECLARE OpenLnStatusINID	GRAPHIC(3) CCSID 13488;

	/* Filter last N days */
	DECLARE DateFrom NUMERIC(6, 0);
	DECLARE DateTo NUMERIC(6, 0);
	 
    SET SOrderConstant = 'SO_RESTRIC';
    SET SOrderINID = InstallationID;    
        	 
    SET FreightConstant = 'FREIGHTLN';
    SET FreightINID = InstallationID;    
        	 
    SET DiscountConstant = 'DISCOUNTLN';
    SET DiscountINID = InstallationID;

	SET SurchargeConstant = 'SURCHARGLN';
    SET SurchargeINID = InstallationID;
    
    -- Gets the Sales Order Document Restrictions	
    CALL [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);
    -- Gets the Freight Line Type
    CALL [SCLIBRARY].CMM_GetConstantValue (FreightConstant, FreightINID, FreightLineType);
    -- Gets the Discount Line Type
    CALL [SCLIBRARY].CMM_GetConstantValue (DiscountConstant, DiscountINID, DiscountLineType); 
	-- Gets the Surcharge Line Type
    CALL [SCLIBRARY].CMM_GetConstantValue (SurchargeConstant, SurchargeINID, SurchargeLineType); 
    
    --Read Account Receivable company constant 	
	SET ConstantInstallation = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
	

	--Read Open Status
	SET OpenLnStatusINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORD_SCHOPN', OpenLnStatusINID, OpenLnStatus);
	
	/* Filter last N days */
	SET DateFrom = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE - (LastDays Days));
	SET DateTo = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	IF (Company = '00000') THEN 
		SET Company = '*';
	END IF;
	    BEGIN
        DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
        SELECT 
            SHDOCO           AS OrderNumber,
            SHDCTO           AS OrderType,
            SHKCOO           AS OrderCompany,
            SHTRDJ           AS OrderDate,
            SHCRCD           AS CurrencyCode,
            SHCRRM           AS CurrencyMode,
            SHHOLD           AS HoldCode,
            SHOTOT           AS ProductTotal,
            SHFAP            AS ProductTotalForeign,
            [SCLIBRARY].COM_GetSalesOrderStatusFnc ( SHDOCO , SHKCOO , SHDCTO , OpenLnStatus , FreightLineType , DiscountLineType, SurchargeLineType ) AS OrderStatus, 
            TB.CCCRCD        AS BaseCurrencyCode, 
            ROW_NUMBER ( ) OVER ( ORDER BY SHTRDJ DESC , SHDOCO DESC ) AS RNUM 
        FROM TABLE ( [SCLIBRARY].COM_GetRecentDocExtendedFnc ( Company , SOrderINID , SOrderConstant , ConstantInstallation , CompanyConstant , SOrderRestric , AddressNumber ) ) AS A 
            INNER JOIN [SCDATA].F0010 TB 
                ON TB.CCCO = SHKCOO 
                     
        WHERE RNUM BETWEEN 1 AND OrdersToDisplay; 

        /* Filter by N days */
        DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
        WITH CTE AS (
            SELECT 
                SHDOCO,
                SHDCTO,
                SHKCOO,
                SHTRDJ           AS OrderDate,
                SHCRCD           AS CurrencyCode,
                SHCRRM           AS CurrencyMode,
                SHHOLD           AS HoldCode,
                SHOTOT           AS ProductTotal,
                SHFAP            AS ProductTotalForeign,
                TB.CCCRCD        AS BaseCurrencyCode, 
                ROW_NUMBER ( ) OVER ( ORDER BY SHTRDJ DESC , SHDOCO DESC ) AS RNUM 
            FROM TABLE ( [SCLIBRARY].COM_GetRecentDocExtendedFnc ( Company , SOrderINID , SOrderConstant , ConstantInstallation , CompanyConstant , SOrderRestric , AddressNumber ) ) AS A 
                INNER JOIN [SCDATA].F0010 TB 
                    ON TB.CCCO = SHKCOO 
            WHERE SHTRDJ BETWEEN DateFrom AND DateTo /* Filter last N days */
        )
        SELECT 
            SHDOCO           AS OrderNumber,
            SHDCTO           AS OrderType,
            SHKCOO           AS OrderCompany,
            A.OrderDate,
            A.CurrencyCode,
            A.CurrencyMode,
            A.HoldCode,
            A.ProductTotal,
            A.ProductTotalForeign,
            [SCLIBRARY].COM_GetSalesorderStatusFnc ( SHDOCO , SHKCOO , SHDCTO , OpenLnStatus , FreightLineType , DiscountLineType, SurchargeLineType ) AS OrderStatus, 
            A.BaseCurrencyCode
        FROM CTE A
                     
        WHERE RNUM BETWEEN 1 AND OrdersToDisplay; 

        IF ( LastDays = 0 ) THEN 
            OPEN TEMP_CURSOR1; 
        ELSE
            OPEN TEMP_CURSOR2; 
        END IF; 
	END;
	COMMIT;
END;
-- #desc							Cross Segment Rules List
-- #bl_class						Premier.Commerce.GetCrossSegmentRulesList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param ItemNumberList			N/A
-- #param BranchPlantList			N/A

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCrossSegmentRulesList
(
	IN ItemNumberList		VARGRAPHIC(4000) CCSID 13488,
	IN BranchPlantList		VARGRAPHIC(4000) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetCrossSegmentRulesList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0) DEFAULT 0;
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH ALLRULES AS 
		(
			SELECT 
				KUATO# 			AS RuleNumber,
				CIF.BranchPlant AS ItemBranchPlant,
				KUKIT 			AS ItemNumber,
				KUATOS 			AS SequenceNumber,
				KUAO 			AS Operation,
				(CASE WHEN(KUAO5B = '(') THEN 1 ELSE 0 END) AS IsBeginBracket,
				KUPEL 			AS SegmentNumber,
				KUCEL 			AS RightSegmentNumber,
				KUVALR 			AS Relationship,
				(CASE KUATIV
					WHEN '' THEN 'SEGMENT'
					WHEN '*ALL' THEN 'ALL'
					WHEN '*VALUES' THEN 'VALUES'
					WHEN '*BLANK' THEN 'BLANK'
					WHEN '*RANGE' THEN 'RANGE'
					WHEN '*ZERO' THEN 'ZERO'
					WHEN '*REQ' THEN 'REQUIRED'
					WHEN '*OPT' THEN 'OPTIONAL'
					ELSE 'SIMPLE'
				END) 			AS ValueType,
				(CASE 
					WHEN (KUATIV = '*VALUES')
						THEN
						( 
							SELECT SUBSTR(XMLSERIALIZE(XMLAGG(XMLTEXT(CONCAT(',', TRIM(RV.KXSGVL)))) AS VARGRAPHIC(4000) CCSID 13488), 2)
							FROM [SCDATA].F32921 RV
							WHERE RV.KXKIT = R.KUKIT
								AND RV.KXMCU = R.KUMCU
								AND RV.KXATO# = R.KUATO#
								AND RV.KXATOS = R.KUATOS
							GROUP BY RV.KXKIT, RV.KXMCU, RV.KXATO#, RV.KXATOS
						)
					WHEN (KUATIV = '*RANGE')
						THEN
						(
							SELECT RTRIM(RR.KVSRFV) || '-' || RTRIM(RR.KVSRTV)
							FROM [SCDATA].F32922 RR
							WHERE RR.KVKIT = R.KUKIT
								AND RR.KVMCU = R.KUMCU
								AND RR.KVATO# = R.KUATO#
								AND RR.KVATOS = R.KUATOS
						)
					ELSE
						R.KUATIV 
				END) 	AS SegmentValues,
				(CASE WHEN(KUAO5E = ')') THEN 1 ELSE 0 END) AS IsEndBracket,
				KUPSIN			AS LeftItemNumber,
				KUEMCU 			AS LeftBranchPlant,
				KUITMRIGHT 		AS RightItemNumber,
				KUMCURIGHT 		AS RightBranchPlant
			FROM 
				[SCDATA].F3292 R
			INNER JOIN TABLE(SCLIBRARY.CMM_AssocItemBranchPlantFnc (ItemNumberList, BranchPlantList, ',') ) CIF
				ON KUKIT = CIF.ItemNumber
				AND KUMCU = CIF.BranchPlant
				AND ((CurrentJulianDate BETWEEN KUEFFF AND KUEFFT) OR (KUEFFF = 0 AND KUEFFT = 0 AND KUAO IN ('I', 'A', 'O')))
			
		), RULESFILTERED AS
		(
			SELECT A.RuleNumber, A.ItemNumber 
			FROM ALLRULES A
			WHERE Operation IN ('*', 'E')
			GROUP BY A.RuleNumber, A.ItemNumber
		)
		SELECT R.RuleNumber || R.ItemNumber AS RuleID,
			R.ItemNumber,
			R.ItemBranchPlant,
			R.SequenceNumber AS SequenceNumber,
			R.Operation,
			R.IsBeginBracket,
			R.SegmentNumber,
			R.RightSegmentNumber,
			R.Relationship,
			R.ValueType,
			R.SegmentValues,
			R.IsEndBracket,
			R.LeftItemNumber,
			R.LeftBranchPlant,
			R.RightItemNumber,
			R.RightBranchPlant
		FROM 
			ALLRULES R
		INNER JOIN RULESFILTERED Filtered
			ON Filtered.RuleNumber = R.RuleNumber
			AND Filtered.ItemNumber = R.ItemNumber
		ORDER BY RuleID, SequenceNumber
		FOR FETCH ONLY;
		
		OPEN TEMP_CURSOR1;
	END;
END;


-- #desc							Returns the last OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.SalesOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param OrdersToDisplay			Quantity of rows to be returned
-- #param Company					Company if is 00000 is '*'
-- #param LastDays					Filter orders in last N days 

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetCustomerRecentSOList
(
	IN InstallationID			GRAPHIC(3) CCSID 13488,
	IN AddressNumber			NUMERIC(8,0),
	IN OrdersToDisplay			NUMERIC(8,0),
	IN Company					GRAPHIC(5) CCSID 13488,
	IN LastDays					INT/* 0 or N days */
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetCustomerRecentSOList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE SOrderRestric	VARGRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID		GRAPHIC(3) CCSID 13488;
	DECLARE SOrderConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE FreightLineType	VARGRAPHIC(2) CCSID 13488;
	DECLARE FreightINID	    GRAPHIC(3) CCSID 13488;
	DECLARE FreightConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE DiscountLineType	VARGRAPHIC(2) CCSID 13488;
	DECLARE DiscountINID	    GRAPHIC(3) CCSID 13488;
	DECLARE DiscountConstant	GRAPHIC(10) CCSID 13488;

	DECLARE SurchargeLineType	VARGRAPHIC(2) CCSID 13488;
	DECLARE SurchargeINID	    GRAPHIC(3) CCSID 13488;
	DECLARE SurchargeConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE CompanyConstant		VARGRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488;
	
	DECLARE OpenLnStatus		VARGRAPHIC(3) CCSID 13488;
	DECLARE OpenLnStatusINID	GRAPHIC(3) CCSID 13488;

	/* Filter last N days */
	DECLARE DateFrom NUMERIC(6, 0);
	DECLARE DateTo NUMERIC(6, 0);
	 
    SET SOrderConstant = 'SO_RESTRIC';
    SET SOrderINID = InstallationID;    
        	 
    SET FreightConstant = 'FREIGHTLN';
    SET FreightINID = InstallationID;    
        	 
    SET DiscountConstant = 'DISCOUNTLN';
    SET DiscountINID = InstallationID;
    
	SET SurchargeConstant = 'SURCHARGLN';
    SET SurchargeINID = InstallationID;

    -- Gets the Sales Order Document Restrictions	
    CALL [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);
    -- Gets the Freight Line Type
    CALL [SCLIBRARY].CMM_GetConstantValue (FreightConstant, FreightINID, FreightLineType);
    -- Gets the Discount Line Type
    CALL [SCLIBRARY].CMM_GetConstantValue (DiscountConstant, DiscountINID, DiscountLineType); 
	-- Gets the Surcharge Line Type
    CALL [SCLIBRARY].CMM_GetConstantValue (SurchargeConstant, SurchargeINID, SurchargeLineType); 
    
    --Read Account Receivable company constant 	
	SET ConstantInstallation = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
	

	--Read Open Status
	SET OpenLnStatusINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORD_SCHOPN', OpenLnStatusINID, OpenLnStatus);
	
	/* Filter last N days */
	SET DateFrom = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE - (LastDays Days));
	SET DateTo = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	IF (Company = '00000') THEN 
		SET Company = '*';
	END IF;

	BEGIN		
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			SHDOCO			AS OrderNumber,
			SHDCTO			AS OrderType,
			SHKCOO			AS OrderCompany,
			SHTRDJ			AS OrderDate,
			SHCRCD			AS CurrencyCode,
			SHCRRM			AS CurrencyMode,
			SHHOLD			AS HoldCode,
			SHOTOT			AS ProductTotal,
			SHFAP			AS ProductTotalForeign,
			[SCLIBRARY].COM_GetSalesOrderStatusFnc ( SHDOCO, SHKCOO, SHDCTO, OpenLnStatus, FreightLineType, DiscountLineType, SurchargeLineType) AS OrderStatus , 
			TB.CCCRCD		AS BaseCurrencyCode,
			ROW_NUMBER ( ) OVER ( ORDER BY SHTRDJ DESC , SHDOCO DESC ) AS RNUM 
		FROM TABLE ( [SCLIBRARY].COM_GetRecentDocsFnc ( Company, SOrderINID, SOrderConstant, ConstantInstallation, CompanyConstant, SOrderRestric, AddressNumber ) ) AS A 
			INNER JOIN [SCDATA].F0010 TB 
				ON TB.CCCO = SHKCOO
		WHERE RNUM BETWEEN 1 AND OrdersToDisplay; 
		
		/* Filter by N days */
		
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS (
			SELECT 
				SHDOCO,
				SHDCTO,
				SHKCOO,
				SHTRDJ			AS OrderDate,
				SHCRCD			AS CurrencyCode,
				SHCRRM			AS CurrencyMode,
				SHHOLD			AS HoldCode,
				SHOTOT			AS ProductTotal,
				SHFAP			AS ProductTotalForeign,
				TB.CCCRCD		AS BaseCurrencyCode,
				ROW_NUMBER ( ) OVER ( ORDER BY SHTRDJ DESC , SHDOCO DESC ) AS RNUM 
			FROM TABLE ( [SCLIBRARY].COM_GetRecentDocsFnc ( Company, SOrderINID, SOrderConstant, ConstantInstallation, CompanyConstant, SOrderRestric, AddressNumber ) ) AS A 
				INNER JOIN [SCDATA].F0010 TB 
					ON TB.CCCO = SHKCOO
			WHERE SHTRDJ BETWEEN DateFrom AND DateTo /* Filter last N days */
		)
		SELECT 
			SHDOCO			AS OrderNumber,
			SHDCTO			AS OrderType,
			SHKCOO			AS OrderCompany,
			A.OrderDate,
			A.CurrencyCode,
			A.CurrencyMode,
			A.HoldCode,
			A.ProductTotal,
			A.ProductTotalForeign,
			[SCLIBRARY].COM_GetSalesOrderStatusFnc ( SHDOCO, SHKCOO, SHDCTO, OpenLnStatus, FreightLineType, DiscountLineType, SurchargeLineType) AS OrderStatus , 
			A.BaseCurrencyCode
		FROM CTE A
		WHERE RNUM BETWEEN 1 AND OrdersToDisplay; 		

		IF ( LastDays = 0 ) THEN 
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2; 
		END IF; 
		
	END;
	COMMIT;
END;
-- #desc					Load the Configured Segments List for an Invoice related order items
-- #bl_class				N/A	
-- #db_dependencies			N/A
-- #db_references			COM_GetInvoiceOrderDetail

-- #param OrderCompany		Company id
-- #param OrderType			Document type
-- #param OrderNumber		Order number
-- #param LangPref			Lang Pref

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetInvConfiguredLineList
(
	IN	InvoiceCompany	GRAPHIC(5) CCSID 13488,
	IN	InvoiceType		GRAPHIC(2) CCSID 13488,
	IN	InvoiceNumber	NUMERIC(8,0)
	/* The parameter LangPref was removed by performance improvements, 
	 * the descriptions of the configured segments will be returned in 
	 * the default JDE language */
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetInvConfiguredLineList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	/* Declare Lang Pref and send with value '*' to the UDC Function*/
	DECLARE LangPref GRAPHIC(2) CCSID 13488;
	SET LangPref = '*';

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH TMP_ORDERS AS(
			SELECT 
				A.SDKCOO,
				A.SDDCTO,
				A.SDDOCO,		
				A.SDKCO,
				A.SDDOC,
				A.SDDCT
			FROM [SCDATA].F4211 A	
  			WHERE
				A.SDDOC = InvoiceNumber
				AND A.SDDCT = InvoiceType
				AND A.SDKCO = InvoiceCompany
			UNION ALL 
			SELECT 
				A.SDKCOO,		
				A.SDDCTO,
				A.SDDOCO,
				A.SDKCO,
				A.SDDOC,
				A.SDDCT
			FROM [SCDATA].F42119 A	
  			WHERE
				A.SDDOC = InvoiceNumber
				AND A.SDDCT = InvoiceType
				AND A.SDKCO = InvoiceCompany
		),
		ConfiguratorMaster AS (
			SELECT DISTINCT
				CT.CMCFGID	AS ConfiguratorID,
				CT.CMEMCU	AS BranchPlant,
				CT.CMLNID	AS LineNumber,
				CT.CMKCOO	AS OrderCompany,
				CT.CMDOCO	AS OrderNumber,
				CT.CMDCTO	AS OrderType
			FROM 
				[SCDATA].F3201 CT	 /*Configurator Master*/
			INNER JOIN TMP_ORDERS SO
				ON SO.SDKCOO = CT.CMKCOO AND 
				SO.SDDOCO = CT.CMDOCO AND
				SO.SDDCTO = CT.CMDCTO
			WHERE			
				CT.CMCFGCID = 1 /*assumption:1 is the parent number ID - CMLNID = 1*/
			UNION ALL
			SELECT DISTINCT
				CTH.CHCFGID	AS ConfiguratorID,
				CTH.CHEMCU	AS BranchPlant,
				CTH.CHLNID	AS LineNumber,
				CTH.CHKCOO	AS OrderCompany,
				CTH.CHDOCO	AS OrderNumber,
				CTH.CHDCTO	AS OrderType
			FROM 
				[SCDATA].F32019 CTH /*Configurator Master History*/
			INNER JOIN TMP_ORDERS SO
				ON SO.SDKCOO = CTH.CHKCOO AND 
				SO.SDDOCO = CTH.CHDOCO AND
				SO.SDDCTO = CTH.CHDCTO  
			WHERE			
				CTH.CHCFGCID = 1
		)
		SELECT 
				OrderCompany,
				OrderType,
				OrderNumber,
				LineNumberID,
				ConfigurationIDNumber,
				ComponentIDNumber,
				SegmentNumber,
				SegmentValue,
				ParentItemNumber,
				COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ) AS RequiredorOptional,
				COALESCE(CIS_MCU.KWDSC1, CIS_EMPTY_MCU.KWDSC1) AS Description,
				COALESCE(CIS_MCU.KWDTAS, CIS_EMPTY_MCU.KWDTAS) AS SegmentSequence,
				(CASE WHEN (COALESCE(CIS_MCU.KWATRQ, CIS_EMPTY_MCU.KWATRQ)) = 'C' OR RTRIM(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY)) = '' OR RTRIM(COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT)) = ''
					THEN ' ' 
					ELSE [SCLIBRARY].CMM_GetUserDefinedCodeFnc(COALESCE(CIS_MCU.KWSY, CIS_EMPTY_MCU.KWSY), COALESCE(CIS_MCU.KWRT, CIS_EMPTY_MCU.KWRT), SegmentValue, '*')  
				END) AS SegmentDescription
		FROM (
			SELECT DISTINCT
				CM.OrderCompany	AS OrderCompany,
				CM.OrderType	AS OrderType,        
				CM.OrderNumber	AS OrderNumber,	 
				CM.LineNumber	AS LineNumberID,
				SD.KZCFGID		AS ConfigurationIDNumber,	
				SD.KZCFGCID		AS ComponentIDNumber,
				SD.KZPEL		AS SegmentNumber,
				SD.KZSGVL		AS SegmentValue,
				SD.KZKIT		AS ParentItemNumber,
				CM.BranchPlant AS  BranchPlant
			FROM
				[SCDATA].F3211 SD	  /*Configurator Segment Detail*/
			INNER JOIN ConfiguratorMaster CM
				ON CM.ConfiguratorID = SD.KZCFGID
			UNION ALL
			SELECT DISTINCT
				CM.OrderCompany	AS OrderCompany,
				CM.OrderType	AS OrderType,        
				CM.OrderNumber	AS OrderNumber,	 
				CM.LineNumber	AS LineNumberID,
				SDH.KSCFGID		AS ConfigurationIDNumber,	
				SDH.KSCFGCID	AS ComponentIDNumber,
				SDH.KSPEL		AS SegmentNumber,
				SDH.KSSGVL 		AS SegmentValue,
				SDH.KSKIT		AS ParentItemNumber,
				CM.BranchPlant AS  BranchPlant
			FROM 	
				[SCDATA].F32119 SDH /*Configurator Segment Detail History*/
			INNER JOIN ConfiguratorMaster CM
				ON CM.ConfiguratorID = SDH.KSCFGID) AS OrderConf
		LEFT JOIN [SCDATA].F3291 CIS_MCU /*Configured Item Segments*/
				ON CIS_MCU.KWKIT  = OrderConf.ParentItemNumber 
				AND CIS_MCU.KWMCU = OrderConf.BranchPlant
				AND CIS_MCU.KWPEL = OrderConf.SegmentNumber
		LEFT JOIN [SCDATA].F3291 CIS_EMPTY_MCU /*Configured Item Segments*/
			ON CIS_EMPTY_MCU.KWKIT  = OrderConf.ParentItemNumber 
			AND CIS_EMPTY_MCU.KWMCU = ''
			AND CIS_EMPTY_MCU.KWPEL = OrderConf.SegmentNumber
		ORDER BY ComponentIDNumber, SegmentSequence, SegmentNumber, Description

		FOR FETCH ONLY;			
		
		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc					Search for invoice detail
-- #bl_class				Premier.Commerce.InvoiceLineList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InvoiceNumber	    Invoice Number
-- #param InvoiceCompany	Invoice Company		
-- #param InvoiceType		Invoice Type

/* Open Amount Calculation doesn't consider Allow Foreign OFF mode.
 * This means that Domestic Open Amount will reflect payments stored 
 * in F03B13Z1 that  are always in Foreign currency
 */

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceLineList
(
	IN InvoiceNumber		NUMERIC(15,0),
	IN InvoiceCompany		VARCHAR(5),
	IN InvoiceType			VARCHAR(2)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetInvoiceLineList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT	DISTINCT
		A.RPDIVJ	AS InvoiceDate,
		A.RPDDJ		AS DueDate,
		A.RPSFX		AS DocumentSuffix,
		A.RPAG		AS GrossAmount,
		(A.RPAAP - COALESCE(E.RUAG, 0))		AS OpenAmount,
		A.RPACR		AS GrossAmountForeign,
		(A.RPFAP - COALESCE(E.RUAG, 0))		AS OpenAmountForeign,
		A.RPVR01	AS YourReference,
		A.RPCRCD	AS CurrencyCode,
		C.CVDL01	AS CurrencyDesc,
		A.RPCRRM	AS CurrencyMode,
		A.RPBCRC	AS BaseCurrencyCode,
		D.CVDL01	AS BaseCurrencyDesc
	FROM [SCDATA].F03B11 	 A
		LEFT OUTER JOIN [SCDATA].F0013  C		/* Currency Master */
			ON A.RPCRCD = C.CVCRCD
		LEFT OUTER JOIN [SCDATA].F0013 D		/* Base currency */
			ON A.RPBCRC = D.CVCRCD
		LEFT JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('', 'E') GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT */
			ON  A.RPAN8 = E.RUAN8
			AND A.RPDOC = E.RUDOC
			AND A.RPDCT = E.RUDCT
			AND A.RPKCO = E.RUKCO
			AND A.RPSFX = E.RUSFX
	WHERE A.RPDOC = InvoiceNumber		/* Invoice Number */
		AND A.RPDCT = InvoiceType		/* Invoice Type */
		AND A.RPKCO = InvoiceCompany	/* Invoice Company */
	ORDER BY A.RPDIVJ DESC
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;
END
 ;
-- #desc					Get Open Invoices Summary 
-- #bl_class				Premier.Commerce.InvoiceOpenSummaryInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId			Store ID
-- #param AddressNumber		Address Number
-- #param Company			Company if 00000 then '*'
-- #param CurrencyCode		Currency Code
-- #param DueDateTo			Due Date

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceOpenSummary
(
	IN StoreId				GRAPHIC(3) CCSID 13488,
	IN AddressNumber		NUMERIC(8,0),
	IN Company				GRAPHIC(5) CCSID 13488, 
	IN CurrencyCode			GRAPHIC(3) CCSID 13488,
	IN DueDateTo			NUMERIC (6,0)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetInvoiceOpenSummary
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT

BEGIN

	/* Gets the Account Receivable Document Restrictions */
    DECLARE ArRestric	GRAPHIC(1) CCSID 13488;
    DECLARE ArINID		GRAPHIC(3) CCSID 13488;
    DECLARE ArConstant	VARCHAR(10);

	/* Read Account Receivable company constant */
	DECLARE ConstantStore		GRAPHIC(3) CCSID 13488; 
	DECLARE CompanyConstant		VARGRAPHIC(1) CCSID 13488; 

	/* Gets the Account Receivable Document Restrictions */
	SET ArConstant = 'AR_RESTRIC';
    SET ArINID = StoreId;
    CALL [SCLIBRARY].CMM_GetConstantValue(ArConstant, ArINID, ArRestric);

	/* Read Account Receivable company constant */
	SET ConstantStore = StoreId; 
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantStore, CompanyConstant);
	
	IF (Company = '00000') THEN		
			SET Company = '*';
		END IF;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		
		SELECT 
			COUNT(1)											AS OpenInvoiceCount,
			COUNT(CASE WHEN A.RPDDJ <= DueDateTo THEN 1 END)	AS DueInvoiceCount
		FROM [SCDATA].F03B11 AS  A					/* Invoice Table */
			LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG, RUAN8 
							FROM [SCDATA].F03B13Z1 
							WHERE RUEUPS IN ('', 'E') 
							GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) AS C			/* ELECTRONIC RECEIPTS INPUT */
				ON  RPAN8 = RUAN8				  
				AND RPDOC = RUDOC
				AND RPDCT = RUDCT
				AND RPKCO = RUKCO
				AND RPSFX = RUSFX 
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = ArINID 
				AND DR.DR$9CNST = ArConstant
				AND DR.DRKY = A.RPDCT
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = ConstantStore
				AND CICO = RPCO
			WHERE  
				A.RPAN8 = AddressNumber
				AND	A.RPCRCD = CurrencyCode
				AND	(((A.RPCRRM = 'D' OR A.RPCRRM = '' OR A.RPCRRM IS NULL) AND (A.RPAAP - COALESCE(C.RUAG,0)) > 0.01) 
				OR (A.RPCRRM = 'F' AND (A.RPFAP - COALESCE(C.RUAG,0)) > 0.01)) /* Open Amount */
				AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
				AND (A.RPCO = Company OR (Company = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
			FOR FETCH ONLY;

		OPEN TEMP_CURSOR1;
		
	END;
	COMMIT;
END;
 -- #desc								Load a order Freight Discount lines to freight information Entity.
-- #bl_class							Premier.Commerce.InvoiceOrderDetailInfo.cs
-- #db_dependencies						COM_GetInvConfiguredLineList
-- #db_references						N/A

-- #param	InvoiceCompany				Company ID
-- #param	InvoiceNumber				Document Type
-- #param	InvoiceType					InvoiceNumber
-- #param	InstallationID				Installation ID
-- #param	RetrieveWebContentInfo		Retrieve Web Content Info
-- #param   LangPref					Lang Pref

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceOrderDetail
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN InvoiceCompany	GRAPHIC(5) CCSID 13488,
	IN InvoiceType		GRAPHIC(2) CCSID 13488,
	IN InvoiceNumber	NUMERIC(8,0),
	IN RetrieveWebContentInfo  INT, 
	IN LangPref         GRAPHIC(2) CCSID 13488
)

DYNAMIC RESULT SETS 4
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetInvoiceOrderDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

    DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_ORDERDETAIL
	(
		nID INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1, NO CACHE) NOT NULL,
		OrderCompany			GRAPHIC(5) CCSID 13488, 
		OrderType				GRAPHIC(2) CCSID 13488,
		OrderNumber				NUMERIC(8,0),
		LineNumber				DECIMAL(6,0),
		TransactionDate			NUMERIC(6,0),
		RequestedDate			NUMERIC(6,0),
		LineType				GRAPHIC(2) CCSID 13488,
		NextStatus				GRAPHIC(3) CCSID 13488,
		LastStatus				GRAPHIC(3) CCSID 13488,
		TaxableYN				GRAPHIC(1) CCSID 13488,     
		TaxArea					GRAPHIC(10) CCSID 13488, 
		TaxExplanationCode		GRAPHIC(2) CCSID 13488,
		DateInvoice				NUMERIC(6,0),
		InvoiceCompany			GRAPHIC(5) CCSID 13488,
        InvoiceNumber			NUMERIC(8,0),
        InvoiceType				GRAPHIC(2) CCSID 13488,
        ShipToID				NUMERIC(8,0),
        SCShipToNumber			NUMERIC(8,0),
		ShipToName				GRAPHIC(40) CCSID 13488, 
		CostCenter				GRAPHIC(12) CCSID 13488, 
		CostCenterHeader		GRAPHIC(12) CCSID 13488,
		ItemCrossRefNumber		VARCHAR(25),
		Description1			GRAPHIC(30) CCSID 13488,
		Description2			GRAPHIC(30) CCSID 13488,
		ShippingQuantity		DECIMAL(15,0),
		ShippedQuantity			DECIMAL(15,0),
		UnitOfMeasure			GRAPHIC(2) CCSID 13488,
		PricingUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		BackorderedQuantity		DECIMAL(15,0),
		CanceledQuantity		DECIMAL(15,0),
		AmountUnitPrice			DECIMAL(15,0),
		ForeignUnitPrice		DECIMAL(15,0),
		AmountExtPrice			DECIMAL(15,0),
		ForeignExtPrice			DECIMAL(15,0),
		InventoryInterface		GRAPHIC(1) CCSID 13488,
		CarrierID				NUMERIC(8,0),
		ModeOfTransportation	GRAPHIC(3) CCSID 13488,
		IdentifierShortItem		NUMERIC(8,0),
		LongItemNumber			GRAPHIC(25) CCSID 13488,
		AuxItemNumber			GRAPHIC(25) CCSID 13488,
		IsInvoiceRestricted		VARCHAR(1),
		ShipLineNumber			NUMERIC(15,0),
		StockingType			GRAPHIC(1) CCSID 13488,
		RelatedKitItemNo		GRAPHIC(8) CCSID 13488,
		KitMasterLineNo			NUMERIC(6,0),
		ComponentLineNumber		NUMERIC(4,0),
		OverridePrice			GRAPHIC(1) CCSID 13488,
		ShippedDate				NUMERIC(6,0),
		Location				GRAPHIC(20) CCSID 13488,
		LotNumber				GRAPHIC(30) CCSID 13488,
		IsBasketRepricing		VARCHAR(2)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	BEGIN
		-- Gets the Sales Order Document Restrictions
		DECLARE SOrderRestric	VARGRAPHIC(1) CCSID 13488;
		DECLARE SOrderINID      GRAPHIC(3) CCSID 13488;
		DECLARE SOrderConstant	GRAPHIC(10) CCSID 13488;
		-- Gets Cust Cross Document Restrictions
		DECLARE CustCrossRefType	GRAPHIC(2) CCSID 13488;
		DECLARE CustCrossINID		GRAPHIC(3) CCSID 13488;
		
		DECLARE CurrentJulianDate NUMERIC(6,0) DEFAULT 0;

		/********************************Detail*********************************/
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			OrderCompany, 
			OrderType,
			OrderNumber,
			LineNumber,
			TransactionDate,
			RequestedDate,
			LineType,
			NextStatus,
			LastStatus,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			DateInvoice,
			InvoiceCompany,
			InvoiceNumber,
			InvoiceType,
			ShipToID,
			SCShipToNumber,
			ShipToName,
			CostCenter, 
			CostCenterHeader,
			ItemCrossRefNumber,
			COALESCE(ContenDesc.DESC1, A.Description1)	AS Description1,
		    COALESCE(ContenDesc.DESC2, A.Description2)	AS Description2,
		    ContenDesc.URL AS URL,
			ShippingQuantity,
			ShippedQuantity,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			BackorderedQuantity,
			CanceledQuantity,
			AmountUnitPrice,
			ForeignUnitPrice,
			AmountExtPrice,
			ForeignExtPrice,
			InventoryInterface,
			CarrierID,
			ModeOfTransportation,
			IdentifierShortItem,
			LongitemNumber,
			AuxItemNumber,
			IsInvoiceRestricted,
			ShipLineNumber,
			StockingType,
			RelatedKitItemNo,
			KitMasterLineNo,
			ComponentLineNumber,
			OverridePrice,
			COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			ShippedDate,
			Location,
			LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			IsBasketRepricing,
			COALESCE(C.RFOGNO, 0) AS ParentLineNo
		FROM SESSION.TMP_ORDERDETAIL A
		LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.IdentifierShortItem, LangPref , 0 ) ) AS ContenDesc
			ON ContenDesc.DESCITM = A.IdentifierShortItem
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON  Tax.DTDOCO = OrderNumber 
			AND Tax.DTDCTO = OrderType
			AND Tax.DTKCOO = OrderCompany 
			AND Tax.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = OrderNumber 
			AND TxHistory.DTDCTO = OrderType
			AND TxHistory.DTKCOO = OrderCompany 
			AND TxHistory.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F4573 C  /* Free Goods lines */
			ON C.RFDOCO = A.OrderNumber 
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber
		ORDER BY InvoiceNumber DESC
		FOR FETCH ONLY;	
		
		DECLARE TEMP_CURSOR4 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			OrderCompany, 
			OrderType,
			OrderNumber,
			LineNumber,
			TransactionDate,
			RequestedDate,
			LineType,
			NextStatus,
			LastStatus,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			DateInvoice,
			InvoiceCompany,
			InvoiceNumber,
			InvoiceType,
			ShipToID,
			SCShipToNumber,
			ShipToName,
			CostCenter, 
			CostCenterHeader,
			ItemCrossRefNumber,
			A.Description1	AS Description1, /* Retrieve Description 1 for Tracking lines */
		    A.Description2	AS Description2,
		    N'' AS URL,
			ShippingQuantity,
			ShippedQuantity,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			BackorderedQuantity,
			CanceledQuantity,
			AmountUnitPrice,
			ForeignUnitPrice,
			AmountExtPrice,
			ForeignExtPrice,
			InventoryInterface,
			CarrierID,
			ModeOfTransportation,
			IdentifierShortItem,
			LongitemNumber,
			AuxItemNumber,
			IsInvoiceRestricted,
			ShipLineNumber,
			StockingType,
			RelatedKitItemNo,
			KitMasterLineNo,
			ComponentLineNumber,
			OverridePrice,
			COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
			COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
			COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
			COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
			COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
			COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
			COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
			COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
			ShippedDate,
			Location,
			LotNumber,
			CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			IsBasketRepricing,
			COALESCE(C.RFOGNO, 0) AS ParentLineNo
		FROM SESSION.TMP_ORDERDETAIL A
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON  Tax.DTDOCO = OrderNumber 
			AND Tax.DTDCTO = OrderType
			AND Tax.DTKCOO = OrderCompany 
			AND Tax.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
			ON TxHistory.DTDOCO = OrderNumber 
			AND TxHistory.DTDCTO = OrderType
			AND TxHistory.DTKCOO = OrderCompany 
			AND TxHistory.DTLNID = LineNumber
		LEFT OUTER JOIN [SCDATA].F4573 C  /* Free Goods lines */
			ON C.RFDOCO = A.OrderNumber 
			AND C.RFDCTO = A.OrderType
			AND C.RFKCOO = A.OrderCompany
			AND C.RFLNID = A.LineNumber
		ORDER BY InvoiceNumber DESC
		FOR FETCH ONLY;	

		/********************************Header*********************************/
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT DISTINCT
			A.BillToNumber		AS SCBillToNumber,
			A.ShipToNumber		AS SCShipToNumber,
			A.AddressBookType,
			A.SHDEL1 AS DeliveryInst1,
			A.SHDEL2 AS DeliveryInst2,
			A.SHVR01 AS CustomerPO,
			A.SHKCOO AS OrderCompany,
			A.SHDCTO AS OrderType,
			A.SHDOCO AS OrderNumber,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			' ' AS MarketingCode,
			A.SHHOLD AS HoldOrderCode,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			C.CVDL01 AS CurrencyDesc,
			(CASE WHEN SOrderRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS ISORDERRESTRICTED,
			' ' AS IsFreightOn,
			B.CCCRCD AS BaseCurrencyCode,
			C.CVDL01 AS BaseCurrencyDesc,
			COALESCE(COALESCE(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
		FROM 
		    [SCLIBRARY].COM_InvoiceOrderHeaderVW A
		INNER JOIN SESSION.TMP_ORDERDETAIL T
			ON T.OrderCompany = A.SHKCOO
			AND T.OrderNumber = A.SHDOCO
			AND T.OrderType = A.SHDCTO
		INNER JOIN [SCDATA].F0010 B
			ON B.CCCO = A.SHKCOO
		LEFT OUTER JOIN [SCDATA].F0013 C
			ON B.CCCRCD = C.CVCRCD
		LEFT OUTER JOIN [SCDATA].F4201TX Tax
			ON Tax.STKCOO = A.SHKCOO
			AND Tax.STDOCO = A.SHDOCO 
			AND Tax.STDCTO = A.SHDCTO
		LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
			ON TxHistory.STKCOO = A.SHKCOO
			AND TxHistory.STDOCO = A.SHDOCO 
			AND TxHistory.STDCTO = A.SHDCTO
		LEFT OUTER JOIN [SCDATA].FQ67008 DR 
			ON DR.DR$9INID = SOrderINID 
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		ORDER BY A.SHTRDJ DESC
		FOR FETCH ONLY;	
		
		/********************************InvoiceDetailInfo*********************************/
		DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			A.RPDIVJ    As InvoiceDate,
			A.RPDDJ		As DueDate,
			''			AS DocumentSuffix,
			0			AS GrossAmount,
			0			AS OpenAmount,
			0			AS GrossAmountForeign,
			0			AS OpenAmountForeign,
			A.RPVR01	AS YourReference,
			B.CVCRCD    As CurrencyCode,
			B.CVDL01    AS CurrencyDesc,
			A.RPCRRM    AS CurrencyMode,
			A.RPBCRC	AS BaseCurrencyCode,
			C.CVDL01	AS BaseCurrencyDesc
		FROM
			[SCDATA].F03B11 A
			LEFT OUTER JOIN [SCDATA].F0013 B
				ON B.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 C
				ON A.RPBCRC = C.CVCRCD
		WHERE
			A.RPDOC = InvoiceNumber AND A.RPDCT = InvoiceType AND A.RPKCO = InvoiceCompany
		FETCH FIRST 1 ROW ONLY
  		FOR FETCH ONLY;
		
		
		 -- Gets the Sales Order Document Restrictions	
		SET SOrderConstant = 'SO_RESTRIC';
		SET SOrderINID = InstallationID;
		-- Gets the Sales Order Document Restrictions		
		CALL [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);
		-- Gets Cust Cross Document Restrictions
		SET CustCrossINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);
		
		--Get the current Julian Date
		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
		/********************************Detail*********************************/
		INSERT INTO SESSION.TMP_ORDERDETAIL
		(
			OrderCompany,
			OrderType,
			OrderNumber,
			LineNumber,
			TransactionDate,
			RequestedDate,
			LineType,
			NextStatus,
			LastStatus,
			TaxableYN,
			TaxArea,
			TaxExplanationCode,
			DateInvoice,
			InvoiceCompany,
			InvoiceNumber,
			InvoiceType,
			ShipToID,
			SCShipToNumber,
			ShipToName,
			CostCenter,
			CostCenterHeader,
			ItemCrossRefNumber,
			Description1,
			Description2,
			ShippingQuantity,
			ShippedQuantity,
			UnitOfMeasure,
			PricingUnitOfMeasure,
			BackorderedQuantity,
			CanceledQuantity,
			AmountUnitPrice,
			ForeignUnitPrice,
			AmountExtPrice,
			ForeignExtPrice,
			InventoryInterface,
			CarrierID,
			ModeOfTransportation,
			IdentifierShortItem,
			LongItemNumber,
			AuxItemNumber,
			IsInvoiceRestricted,
			ShipLineNumber,
			StockingType,
			RelatedKitItemNo,
			KitMasterLineNo,
			ComponentLineNumber,
			OverridePrice,
			ShippedDate,
			Location,
			LotNumber,
			IsBasketRepricing
		)		
		SELECT 
			A.SDKCOO				AS OrderCompany,
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS OrderNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDIVD					AS DateInvoice,
			A.SDKCO					AS InvoiceCompany,
			A.SDDOC					AS InvoiceNumber,
			A.SDDCT					AS InvoiceType,
			A.SDSHAN				AS ShipToID,
			A.SDSHAN				AS SCShipToNumber,
			COALESCE(R.ABALPH,'')	AS ShipToName,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			COALESCE(S.IVCITM,'')	AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
		    A.SDDSC2				AS Description2,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			COALESCE(TMP.LFIVI,' ')	AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			'N'	AS IsInvoiceRestricted,
			0 AS ShipLineNumber,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			A.SDPROV				AS OverridePrice,
			CASE A.SDADDJ 
				WHEN 0 THEN A.SDTRDJ 
				ELSE A.SDADDJ END	AS ShippedDate,
			A.SDLOCN				AS Location,
			A.SDLOTN				AS LotNumber,
			CASE A.SDSO08 WHEN '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
		FROM [SCDATA].F4211 A 
		LEFT OUTER JOIN [SCDATA].F4104 S		--Customer/Item Cross Ref Table
			ON S.IVAN8 = A.SDAN8
			AND S.IVITM = A.SDITM 
			AND S.IVXRT = CustCrossRefType
			AND CurrentJulianDate BETWEEN S.IVEFTJ AND S.IVEXDJ
		LEFT OUTER JOIN [SCDATA].F40205 TMP
			ON TMP.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F0101 R		--Address Book Master
			ON R.ABAN8 = A.SDSHAN
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE A.SDKCO = InvoiceCompany
		   AND A.SDDOC = InvoiceNumber
		   AND A.SDDCT = InvoiceType
		UNION ALL
		SELECT 
			A.SDKCOO				AS OrderCompany, 
			A.SDDCTO				AS OrderType,
			A.SDDOCO				AS OrderNumber,
			A.SDLNID				AS LineNumber,
			A.SDTRDJ				AS TransactionDate,
			A.SDDRQJ				AS RequestedDate,
			A.SDLNTY				AS LineType,
			A.SDNXTR				AS NextStatus,
			A.SDLTTR				AS LastStatus,
			A.SDTAX1				AS TaxableYN,
			A.SDTXA1				AS TaxArea,
			A.SDEXR1				AS TaxExplanationCode,
			A.SDIVD					AS DateInvoice,
			A.SDKCO					AS InvoiceCompany,
			A.SDDOC					AS InvoiceNumber,
			A.SDDCT					AS InvoiceType,
			A.SDSHAN				AS ShipToID,
			A.SDSHAN				 AS SCShipToNumber,
			COALESCE(R.ABALPH,'')		AS ShipToName,
			A.SDMCU					AS CostCenter, 
			A.SDEMCU				AS CostCenterHeader,
			COALESCE(S.IVCITM,'')		AS ItemCrossRefNumber,
			A.SDDSC1				AS Description1,
		    A.SDDSC2				AS Description2,
			A.SDUORG				AS ShippingQuantity,
			A.SDSOQS				AS ShippedQuantity,
			A.SDUOM					AS UnitOfMeasure,
			A.SDUOM4				AS PricingUnitOfMeasure,
			A.SDSOBK				AS BackorderedQuantity,
			A.SDSOCN				AS CanceledQuantity,
			A.SDUPRC				AS AmountUnitPrice,
			A.SDFUP					AS ForeignUnitPrice,
			A.SDAEXP				AS AmountExtPrice,
			A.SDFEA					AS ForeignExtPrice,
			COALESCE(TMP.LFIVI,' ')		AS InventoryInterface,
			A.SDCARS				AS CarrierID,
			A.SDMOT					AS ModeOfTransportation,
			A.SDITM					AS IdentifierShortItem,
			A.SDLITM				AS LongItemNumber,
			A.SDAITM				AS AuxItemNumber,
			'N'	AS IsInvoiceRestricted,
			0 AS ShipLineNumber,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDKTLN				AS KitMasterLineNo,
			A.SDCPNT				AS ComponentLineNumber,
			A.SDPROV				AS OverridePrice,
			CASE A.SDADDJ 
				WHEN 0 THEN A.SDTRDJ 
				ELSE A.SDADDJ END	AS ShippedDate,
			A.SDLOCN				AS Location,
			A.SDLOTN				AS LotNumber,
			CASE A.SDSO08 WHEN '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
		FROM [SCDATA].F42119 A 
		LEFT OUTER JOIN [SCDATA].F4104 S		--Customer/Item Cross Ref Table
			ON S.IVAN8 = A.SDAN8
			AND S.IVITM = A.SDITM 
			AND S.IVXRT = CustCrossRefType
			AND CurrentJulianDate BETWEEN S.IVEFTJ AND S.IVEXDJ
		LEFT OUTER JOIN [SCDATA].F40205 TMP
			ON TMP.LFLNTY = A.SDLNTY
		LEFT OUTER JOIN [SCDATA].F0101 R		--Address Book Master
			ON R.ABAN8 = A.SDSHAN
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		WHERE A.SDKCO =	 InvoiceCompany
		   AND A.SDDOC = InvoiceNumber
		   AND A.SDDCT = InvoiceType;
		COMMIT ;
		
		OPEN TEMP_CURSOR3;  /*InvoiceDetailInfo*/
		OPEN TEMP_CURSOR2;	/*HEADER*/ 
		
		IF(RetrieveWebContentInfo = 1) THEN
			OPEN TEMP_CURSOR1;	/*DETAIL*/
		ELSE
			OPEN TEMP_CURSOR4;
		END IF;
		/*Configured Items*/
		/* The parameter LangPref was removed by performance improvements, the descriptions of the configured segments 
		 * will be returned in the default JDE language, avoid join with table F0005D */
		CALL [SCLIBRARY].COM_GetInvConfiguredLineList(InvoiceCompany, InvoiceType, InvoiceNumber);
	END;
END ;
-- #desc						Search for Invoice Payment detail List
-- #bl_class					Premier.Commerce.InvoicePaymentDetailList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param PaymentID				Payment ID
-- #param AddressNumber			Address Number
-- #param InvoiceCompany		Invoice Company
-- #param InvoiceType			Invoice Type	
-- #param InvoiceNumber			Invoice Number		
-- #param PaymentReference		PaymentReference	
-- #param PageSize				Page Size
-- #param PageIndex				Page Index
-- #param EdiUserId				Edi User ID
-- #param EdiBatchNumber		Edi Batch Number
-- #param EdiTransactionNumber	Edi Transaction Number
-- #param InTransit				In transit

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePayDetailList
(	
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN PaymentID			NUMERIC(8,0),
	IN AddressNumber		NUMERIC(8,0),
	IN InvoiceCompany		GRAPHIC(5) CCSID 13488,
	IN InvoiceType			GRAPHIC(2) CCSID 13488,
	IN InvoiceNumber		NUMERIC(15,0),
	IN PaymentReference		VARGRAPHIC (25) CCSID 13488,
	IN PageIndex			INTEGER,
    IN PageSize				INTEGER,
	IN EdiUserId			GRAPHIC(10) CCSID 13488,
	IN EdiBatchNumber		GRAPHIC(15) CCSID 13488,
	IN EdiTransactionNumber	GRAPHIC(22) CCSID 13488,
	IN InTransit			INTEGER
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetInvoicePayDetailList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC1				VARGRAPHIC(10000) CCSID 13488;
    DECLARE WHERE_DYNAMIC2				VARGRAPHIC(10000) CCSID 13488;
	DECLARE RowStart                    INTEGER;
    DECLARE RowEnd                      INTEGER;
	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC					VARGRAPHIC(8000) CCSID 13488;

	DECLARE CompanyConstant				GRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation		GRAPHIC(3) CCSID 13488;
	
	/* Gets the Invoice Document Restrictions Parameters */
	DECLARE	InvRestric		GRAPHIC(1) CCSID 13488;  
	DECLARE InvINID			GRAPHIC(3) CCSID 13488;  
	DECLARE InvConstant		GRAPHIC(10) CCSID 13488; 

	SET InvConstant = 'AR_RESTRIC';
	SET InvINID = InstallationID;

	/* Gets the Invoice Document Restrictions Parameters */
	CALL [SCLIBRARY].CMM_GetConstantValue (InvConstant, InvINID , InvRestric);

	SET WHERE_DYNAMIC1 = N'';
    SET WHERE_DYNAMIC2 = N'';
    SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
    SET RowEnd =  (PageIndex * PageSize);
	/*Read Account Receivable company constant */ 
	SET CONSTANTINSTALLATION = INSTALLATIONID ; 
		CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'INSCOMPANY' , CONSTANTINSTALLATION , COMPANYCONSTANT ) ; 
	
	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;
        
         
        /* In transit = 0 or NULL */
        IF (PaymentID IS NOT NULL) THEN
			SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' RZICU = ? ';
		ELSE
            SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N'  (1 = 1 OR ? IS NULL ) ';
		END IF;

		IF (InvoiceNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND RZDOC = ? ';
        ELSE
            SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND ( 1 = 1 OR ? IS NULL ) ';
		END IF;

		IF (AddressNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND RZAN8 = ? ';
		ELSE
            SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND ( 1 = 1 OR ? IS NULL ) ';
		END IF;

		IF (PaymentReference <> '*') THEN
			SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND UPPER(RZCKNU) LIKE ''%'' || ? || ''%''';
        ELSE
            SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND ( 1 = 1 OR ? = ''*'' ) ';
		END IF;

		IF (InvoiceType <> '*') THEN
			SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND RZDCT = ? ';
        ELSE
            SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND ( 1 = 1 OR ? = ''*'' ) ';
		END IF;

		IF (InvoiceCompany <> '*') THEN
			SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND RZCO =  ? ';
        ELSE
            SET WHERE_DYNAMIC1 = WHERE_DYNAMIC1 || N' AND ( 1 = 1 OR ? = ''*'' ) ';
		END IF;
                    
        /* In transit = 1 or Null */
        IF (EdiUserId <> '*' AND EdiBatchNumber <> '*' AND EdiTransactionNumber <> '*') THEN
			SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND B.RUEDUS =  ? AND B.RUEDBT = ? AND B.RUEDTN = ? ';
        ELSE
            SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND ( 1 = 1 OR ? = ''*'' AND ? = ''*'' AND ? = ''*'' ) ';
		END IF;
						
		IF (InvoiceNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND B.RUDOC = ? ';
		ELSE
            SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND ( 1 = 1 OR ? IS NULL ) ';
		END IF;

		IF (AddressNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND B.RUAN8 = ? ';
        ELSE
            SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND ( 1 = 1 OR ? IS NULL ) ';
		END IF;

		IF (PaymentReference <> '*') THEN
			SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND UPPER(B.RUCKNU) LIKE ''%'' || ? || ''%''';
        ELSE
            SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND ( 1 = 1 OR ? = ''*'' ) ';
		END IF;

		IF (InvoiceType <> '*') THEN
			SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND B.RUDCT = ? ';
        ELSE
            SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND ( 1 = 1 OR ? = ''*'' ) ';
		END IF;
						
		IF (InvoiceCompany <> '*') THEN
			SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND B.RUKCO = ? ';
        ELSE
            SET WHERE_DYNAMIC2 = WHERE_DYNAMIC2 || N' AND ( 1 = 1 OR ? = ''*'' ) ';
		END IF;

        IF(InTransit = 0 )THEN
		SET SQL_DYNAMIC = N'
		WITH PAGING AS (
			 SELECT 
						RZAN8  AS AddressNumber,
						RZKCO  AS InvoiceCompany,
						RZDCT  AS InvoiceDocumentType,
						RZDOC  AS InvoiceNumber,
						RZSFX  AS InvoiceSuffix,
						RZCKNU AS PaymentReference,
						RZDMTJ AS PaymentDate,
						RZPAAP AS AppliedAmount,
						RZPFAP AS AppliedAmountForeign,
						RZCRCD AS CurrencyCode,
						RZCRRM AS CurrencyMode,
						RZBCRC AS BaseCurrencyCode,
                        ROW_NUMBER() OVER(ORDER BY RZDMTJ ) AS RNUM
					FROM 
						[SCDATA].F03B14 ';	/*Receipts Detail*/
	               IF ( COMPANYCONSTANT = 'L' ) THEN 
	               SET SQL_DYNAMIC = SQL_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
							 ON CR.CICO = RZCO
							 AND CR.CI$9INID =''' || CONSTANTINSTALLATION || '''' ; 
	               END IF ;
				   SET SQL_DYNAMIC = SQL_DYNAMIC || 'WHERE '
                    || WHERE_DYNAMIC1 ||
                    ') 
            SELECT 
			     PAGING.AddressNumber, PAGING.InvoiceCompany, PAGING.InvoiceDocumentType, PAGING.InvoiceNumber, PAGING.InvoiceSuffix, 
			     PAGING.PaymentReference, PAGING.PaymentDate, PAGING.AppliedAmount, PAGING.AppliedAmountForeign, PAGING.CurrencyCode, 
			     PAGING.CurrencyMode, PAGING.BaseCurrencyCode, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount, 
                 (CASE ? WHEN ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS IsInvoiceRestricted
		    FROM 
			PAGING
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON  DR.DR$9INID = ?
				AND DR.DR$9CNST = ?
                AND DR.DRKY = PAGING.InvoiceDocumentType
		WHERE (( ? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ? ))';  
        
        ELSEIF (InTransit = 1 )THEN 
        		SET SQL_DYNAMIC = N'
		WITH PAGING AS (
			 SELECT
						B.RUAN8		AS AddressNumber,
						B.RUKCO		AS InvoiceCompany,
						B.RUDCT		AS InvoiceDocumentType,
						B.RUDOC		AS InvoiceNumber,
						B.RUSFX		AS InvoiceSuffix,
						B.RUCKNU	AS PaymentReference,
						B.RUDMTJ	AS PaymentDate,
						B.RUAG		AS AppliedAmount,
						B.RUAG		AS AppliedAmountForeign,
						B.RUCRCD	AS CurrencyCode,
						B.RUCRRM	AS CurrencyMode,
						B.RUCRCD	AS BaseCurrencyCode,
                        ROW_NUMBER() OVER(ORDER BY RUDMTJ ) AS RNUM
					FROM
						[SCDATA].F03B13Z1 B ';
                    IF ( COMPANYCONSTANT = 'L' ) THEN 
	                   SET SQL_DYNAMIC = SQL_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
							 ON CR.CICO = RUCO
							 AND CR.CI$9INID =''' || CONSTANTINSTALLATION || '''' ; 
	                    END IF ; 
					SET SQL_DYNAMIC = SQL_DYNAMIC || N' WHERE B.RUEUPS IN ('''', ''E'') '
                    || WHERE_DYNAMIC2 ||
                    ') 
                SELECT 
			         PAGING.AddressNumber, PAGING.InvoiceCompany, PAGING.InvoiceDocumentType, PAGING.InvoiceNumber, PAGING.InvoiceSuffix, 
			         PAGING.PaymentReference, PAGING.PaymentDate, PAGING.AppliedAmount, PAGING.AppliedAmountForeign, PAGING.CurrencyCode, 
			         PAGING.CurrencyMode, PAGING.BaseCurrencyCode, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount, 
                    (CASE ? WHEN ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS IsInvoiceRestricted
		        FROM 
			         PAGING
			    LEFT OUTER JOIN [SCDATA].FQ67008 DR
				    ON  DR.DR$9INID = ?
				    AND DR.DR$9CNST = ?
                    AND DR.DRKY = PAGING.InvoiceDocumentType
		        WHERE (( ? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ? ))'; 
      
       ELSE
                    SET SQL_DYNAMIC = N'
                   WITH CTE AS (
			       SELECT 
						RZAN8  AS AddressNumber,
						RZKCO  AS InvoiceCompany,
						RZDCT  AS InvoiceDocumentType,
						RZDOC  AS InvoiceNumber,
						RZSFX  AS InvoiceSuffix,
						RZCKNU AS PaymentReference,
						RZDMTJ AS PaymentDate,
						RZPAAP AS AppliedAmount,
						RZPFAP AS AppliedAmountForeign,
						RZCRCD AS CurrencyCode,
						RZCRRM AS CurrencyMode,
						RZBCRC AS BaseCurrencyCode
					FROM 
						[SCDATA].F03B14 ';	/*Receipts Detail*/
                    IF ( COMPANYCONSTANT = 'L' ) THEN 
	                   SET SQL_DYNAMIC = SQL_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
							 ON CR.CICO = RZCO
							 AND CR.CI$9INID =''' || CONSTANTINSTALLATION || '''' ; 
	                    END IF ; 
					SET SQL_DYNAMIC = SQL_DYNAMIC || N'WHERE '
                    || WHERE_DYNAMIC1 ||
                    N'UNION ALL
                    SELECT
						B.RUAN8		AS AddressNumber,
						B.RUKCO		AS InvoiceCompany,
						B.RUDCT		AS InvoiceDocumentType,
						B.RUDOC		AS InvoiceNumber,
						B.RUSFX		AS InvoiceSuffix,
						B.RUCKNU	AS PaymentReference,
						B.RUDMTJ	AS PaymentDate,
						B.RUAG		AS AppliedAmount,
						B.RUAG		AS AppliedAmountForeign,
						B.RUCRCD	AS CurrencyCode,
						B.RUCRRM	AS CurrencyMode,
						B.RUCRCD	AS BaseCurrencyCode
					FROM
						[SCDATA].F03B13Z1 B ';
                    IF ( COMPANYCONSTANT = 'L' ) THEN 
	                   SET SQL_DYNAMIC = SQL_DYNAMIC ||' INNER JOIN [SCDATA].FQ679912 CR
							 ON CR.CICO = RUCO
							 AND CR.CI$9INID =''' || CONSTANTINSTALLATION || '''' ; 
	                    END IF ; 
					SET SQL_DYNAMIC = SQL_DYNAMIC ||'WHERE B.RUEUPS IN ('''', ''E'') '
                    || WHERE_DYNAMIC2 ||
                    '),
                    PAGING AS (
			SELECT 
				CTE.AddressNumber, CTE.InvoiceCompany, CTE.InvoiceDocumentType, CTE.InvoiceNumber, CTE.InvoiceSuffix, 
				CTE.PaymentReference, CTE.PaymentDate, CTE.AppliedAmount, CTE.AppliedAmountForeign, CTE.CurrencyCode, 
				CTE.CurrencyMode, CTE.BaseCurrencyCode, ROW_NUMBER() OVER (ORDER BY CTE.PaymentDate DESC) AS RNUM
			FROM CTE
		      )
		    SELECT 
			    PAGING.AddressNumber, PAGING.InvoiceCompany, PAGING.InvoiceDocumentType, PAGING.InvoiceNumber, PAGING.InvoiceSuffix, 
		        PAGING.PaymentReference, PAGING.PaymentDate, PAGING.AppliedAmount, PAGING.AppliedAmountForeign, PAGING.CurrencyCode, 
			    PAGING.CurrencyMode, PAGING.BaseCurrencyCode, (SELECT COUNT(1) FROM PAGING) AS TotalRowCount, 
                (CASE ? WHEN ''1'' THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END ) AS IsInvoiceRestricted
		    FROM 
			    PAGING
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON  DR.DRKY = PAGING.InvoiceDocumentType
				AND DR.DR$9INID = ?
				AND DR.DR$9CNST = ?
		    WHERE (( ? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ? ))';
		END IF;

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;

		IF     (InTransit = 0 )THEN
			OPEN TEMP_CURSOR1  USING PaymentID, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
											InvRestric, InvINID, InvConstant, PageIndex, PageSize, RowStart, RowEnd;
		
		ELSEIF (InTransit = 1) THEN
			OPEN TEMP_CURSOR1  USING EdiUserId, EdiBatchNumber, EdiTransactionNumber, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
													InvRestric, InvINID, InvConstant, PageIndex, PageSize, RowStart, RowEnd;
		ELSE
			OPEN TEMP_CURSOR1  USING PaymentID, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
													EdiUserId, EdiBatchNumber, EdiTransactionNumber, InvoiceNumber, AddressNumber, PaymentReference, InvoiceType, InvoiceCompany,
													InvRestric, InvINID, InvConstant, PageIndex, PageSize, RowStart, RowEnd;
        END IF;
	END;
END

 ;
-- #desc					Search for Invoice Payment Header List
-- #bl_class				Premier.Commerce.GetInvoicePaymentHeaderList.cs  
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param PaymentID			Payment ID
-- #param InstallationID	Installation ID
-- #param InvoiceCompany	InvoiceCompany
-- #param InvoiceType		InvoiceType
-- #param InvoiceNumber		InvoiceNumber
-- #param InvoiceSuffix		InvoiceSuffix
-- #param AddressNumber		Address Number
-- #param PaymentReference  PaymentReference
-- #param JulianDateFrom	JulianDate From
-- #param JulianDateTo		JulianDate To
-- #param PageSize			Page Size
-- #param PageIndex			Page Index
-- #param SortBy			Sort By Column name
-- #param SortDir			Sort Dir ASC / DESC

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePayHeaderList 
( 
	IN PAYMENTID		NUMERIC(8, 0), 
	IN INSTALLATIONID	GRAPHIC(3) CCSID 13488, 
	IN INVOICECOMPANY	GRAPHIC(5) CCSID 13488, 
	IN INVOICETYPE		GRAPHIC(2) CCSID 13488, 
	IN INVOICENUMBER	NUMERIC(8, 0), 
	IN INVOICESUFFIX	GRAPHIC(3) CCSID 13488, 
	IN ADDRESSNUMBER	NUMERIC(8, 0), 
	IN PAYMENTREFERENCE VARGRAPHIC(25) CCSID 13488, 
	IN JULIANDATEFROM	NUMERIC(6, 0), 
	IN JULIANDATETO		NUMERIC(6, 0), 
	IN PAGEINDEX		INTEGER, 
	IN PAGESIZE			INTEGER, 
	IN SORTBY			VARGRAPHIC(80) CCSID 1200, 
	IN SORTDIR			CHAR(1) 
) 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetInvoicePayHeaderList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN 
  
	/* DYNAMIC SQL Select */ 
	DECLARE V_DYNAMIC			VARGRAPHIC ( 8000 ) CCSID 13488 ; 
	DECLARE SQL_DYNAMIC			VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE INNER_DYNAMIC1 		VARGRAPHIC ( 1000 ) CCSID 13488 ; 
	DECLARE INNER_DYNAMIC2 		VARGRAPHIC ( 1000 ) CCSID 13488 ; 
	DECLARE LEFT_DYNAMIC1 		VARGRAPHIC ( 1000 ) CCSID 13488 ; 
	DECLARE WHERE_DYNAMIC		VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE SORT_DYNAMIC		VARGRAPHIC ( 60 ) CCSID 13488 ; 
	DECLARE SORTDIR_DYNAMIC		VARGRAPHIC ( 20 ) CCSID 13488 ; 
	DECLARE ROWSTART INTEGER ; 
	DECLARE ROWEND INTEGER ; 
	DECLARE COMPANYCONSTANT		GRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE CONSTANTINSTALLATION GRAPHIC ( 3 ) CCSID 13488 ; 
  
	/* CURSOR FOR DYNAMIC SQL */ 
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC ; 
  
	/*DYNAMIC QUERY CONDITION*/ 
	SET WHERE_DYNAMIC = '' ; 
	SET INNER_DYNAMIC1 = '' ; 
	SET INNER_DYNAMIC2 = '' ; 
	SET LEFT_DYNAMIC1 = ''; /* Join with Receipts Detail */
	 
	/* Paging */ 
	SET ROWSTART = ( ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 ) ; 
  
	SET ROWEND = ( PAGEINDEX * PAGESIZE ) ; 
	 --Read Account Receivable company constant 
	SET CONSTANTINSTALLATION = INSTALLATIONID ; 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'INSCOMPANY' , CONSTANTINSTALLATION , COMPANYCONSTANT ) ; 
  
	/* Dynamic sort direction statement */ 
	SET SORTDIR_DYNAMIC = CASE SORTDIR WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 
  
	/* Dynamic sort statement */ 
	SET SORT_DYNAMIC = CASE SORTBY 
						WHEN 'PaymentID' THEN 'PaymentID' || SORTDIR_DYNAMIC || ', PaymentDate DESC' 
						WHEN 'PaymentReference' THEN 'UPPER(PaymentReference)' || SORTDIR_DYNAMIC || ', PaymentDate DESC' 
						WHEN 'PaymentDate' THEN 'PaymentDate' || SORTDIR_DYNAMIC 
						WHEN 'PaymentTotal' THEN 'PaymentTotal' || SORTDIR_DYNAMIC || ', PaymentDate DESC' 
						ELSE 'PaymentDate DESC' 
					END ; 
  
	IF ( COMPANYCONSTANT = N'L' ) THEN 
		SET INNER_DYNAMIC1 = N' INNER JOIN [SCDATA].FQ679912 CR
							ON CR.CI$9INID = ''' || CONSTANTINSTALLATION || N'''
							AND CR.CICO = A.RYCO /*Company*/ ' ; 
        
        SET INNER_DYNAMIC2 = N' INNER JOIN [SCDATA].FQ679912 CR
							ON CR.CI$9INID = ''' || CONSTANTINSTALLATION || N'''
							AND CR.CICO = A.RUCO /*Company*/ ' ; 
    END IF ; 
    
    IF ( INVOICECOMPANY <> '*' ) THEN 
		SET WHERE_DYNAMIC = N' WHERE C.RZKCO = ?' ; 
	ELSE 
		SET WHERE_DYNAMIC = N' WHERE (1 = 1 OR ? = ''*'' )' ; 
	END IF ; 
  
	IF ( INVOICETYPE <> '*' ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND C.RZDCT = ? ' ; 
    ELSE 
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'' )' ; 
	END IF ; 
  
	IF ( INVOICENUMBER IS NOT NULL ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND C.RZDOC = ? ' ; 
    ELSE 
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL )' ; 
	END IF ; 
  
	IF ( INVOICESUFFIX <> '*' ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND C.RZSFX = ? ' ; 
    ELSE 
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')' ; 
	END IF ; 
  
	IF ( ADDRESSNUMBER IS NOT NULL ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RYAN8 = ? ' ; 
    ELSE 
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL )' ; 
	END IF ; 
  
	IF ( PAYMENTREFERENCE <> '*' ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(A.RYCKNU) LIKE ''%'' || ? || ''%'' ' ; 
    ELSE 
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')' ; 
	END IF ; 
  
	IF ( JULIANDATEFROM <> 0 ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RYDMTJ >= ?' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = 0 )' ; 
	END IF ; 
  
	IF ( JULIANDATETO <> 0 ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RYDMTJ <= ?' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = 0 )' ; 
	END IF ; 
  
	IF ( PAYMENTID IS NOT NULL ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RYICU =  ? ' ; 
    ELSE 
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL )' ; 
	END IF ; 
	
	/* Join with F03B14 table when filter by InvoiceCompany, InvoiceType, InvoiceNumber or InvoiceSuffix */
	IF (InvoiceCompany <> '*' OR InvoiceType <> '*' OR InvoiceNumber IS NOT NULL OR InvoiceSuffix <> '*') THEN
		SET LEFT_DYNAMIC1 = N' LEFT JOIN [SCDATA].F03B14 C	/*Receipts Detail*/
				ON C.RZPYID = A.RYPYID ';
	END IF;

	SET SQL_DYNAMIC = N' 
        WITH CTE AS (
            SELECT 
				A.RYICU		AS PaymentID,
				A.RYPYID	AS PaymentKey,
				A.RYAN8		AS AddressNumber,
				A.RYRYIN	AS PaymentInstrument,
				A.RYCKNU	AS PaymentReference,
				A.RYDMTJ	AS PaymentDate,
				A.RYCKAM	AS PaymentTotal,
				A.RYFCAM	AS PaymentTotalForeign,
				A.RYCRCD	AS CurrencyCode,
				A.RYCRRM	AS CurrencyMode,
				A.RYBCRC	AS BaseCurrencyCode,
				''''		AS EdiUserId,
				''''		AS EdiBatchNumber,
				''''		AS EdiTransactionNumber,
				0			AS InTransit
			FROM
				[SCDATA].F03B13 A				/*Receipts Header*/
			 ' || LEFT_DYNAMIC1
            || INNER_DYNAMIC1 
            || WHERE_DYNAMIC || 
            N' 
			UNION
			SELECT  
				A.RUICU		AS PaymentID,
				A.RUPYID	AS PaymentKey,
				A.RUAN8		AS AddressNumber,
				A.RUPYIN	AS PaymentInstrument,
				A.RUCKNU	AS PaymentReference,
				A.RUDMTJ	AS PaymentDate,
				SUM(A.RUAG)	AS PaymentTotal,
				A.RUFAP		AS PaymentTotalForeign,
				A.RUCRCD	AS CurrencyCode,
				A.RUCRRM	AS CurrencyMode,
				B.CCCRCD	AS BaseCurrencyCode,
				A.RUEDUS	AS EdiUserId,
				A.RUEDBT	AS EdiBatchNumber,
				A.RUEDTN	AS EdiTransactionNumber,
				1			AS InTransit
			FROM
				[SCDATA].F03B13Z1 A
			INNER JOIN [SCDATA].F0010 B
				ON B.CCCO = A.RUKCO ' 
			|| INNER_DYNAMIC2 || '
			WHERE A.RUEUPS IN ('''', ''E'') ' ; 
            
    IF ( INVOICECOMPANY <> '*' ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUKCO = ? ' ; 
    ELSE 
        SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? = ''*'' )' ; 
	END IF ; 
  
	IF ( INVOICETYPE <> '*' ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUDCT = ? ' ; 
    ELSE 
        SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? = ''*'' )' ; 
	END IF ; 
  
	IF ( INVOICENUMBER IS NOT NULL ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUDOC = ? ' ; 
    ELSE 
        SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? IS NULL )' ; 
	END IF ; 
  
	IF ( INVOICESUFFIX <> '*' ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUSFX = ? ' ; 
    ELSE 
        SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')' ; 
	END IF ; 
  
	IF ( ADDRESSNUMBER IS NOT NULL ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUAN8 = ? ' ; 
    ELSE 
        SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? IS NULL )' ; 
	END IF ; 
  
	IF ( PAYMENTREFERENCE <> '*' ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND UPPER(A.RUCKNU) LIKE ''%'' || ? || ''%'' ' ; 
    ELSE 
        SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? = ''*'')' ; 
	END IF ; 
  
  
	IF ( JULIANDATEFROM <> 0 ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUDMTJ >= ?' ; 
	ELSE 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? = 0 )' ; 
	END IF ; 
	
	IF ( JULIANDATETO <> 0 ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUDMTJ <= ?' ; 
	ELSE 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? = 0 )' ; 
	END IF ; 
  
	IF ( PAYMENTID IS NOT NULL ) THEN 
		SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND A.RUICU =  ? ' ; 
    ELSE 
        SET SQL_DYNAMIC = SQL_DYNAMIC || N' AND (1 = 1 OR ? IS NULL )' ; 
	END IF ; 
			 
	SET SQL_DYNAMIC = SQL_DYNAMIC || 
		N' GROUP BY A.RUICU, A.RUPYID, A.RUAN8, A.RUPYIN, A.RUCKNU, A.RUDMTJ, A.RUFAP, A.RUCRCD, A.RUCRRM, B.CCCRCD, A.RUEDUS, A.RUEDBT, A.RUEDTN
		), 
        PAGING AS ( 
			SELECT PaymentID, PaymentKey, AddressNumber, PaymentInstrument, PaymentReference, PaymentDate, PaymentTotal, PaymentTotalForeign, CurrencyCode, 
               CurrencyMode, BaseCurrencyCode, EdiUserId, EdiBatchNumber, EdiTransactionNumber, InTransit, ROWNUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || N') AS RNUM
			FROM
               CTE  
        )
        SELECT PaymentID, PaymentKey, AddressNumber, PaymentInstrument, [SCLIBRARY].CMM_GetUserDefinedCodeFnc(''00'', ''PY'', PaymentInstrument, ''*'') AS PaymentInstrumentDesc, 
            PaymentReference, PaymentDate, PaymentTotal, PaymentTotalForeign, CurrencyCode, CurrencyMode, BaseCurrencyCode, EdiUserId, EdiBatchNumber, EdiTransactionNumber, InTransit, 
            (SELECT COUNT(1) FROM PAGING) AS TotalRowCount 
		FROM PAGING
		WHERE (( ? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ? ))' ; 
	 
  
	PREPARE V_DYNAMIC FROM SQL_DYNAMIC ;	 
	OPEN TEMP_CURSOR1 USING INVOICECOMPANY, INVOICETYPE, INVOICENUMBER, INVOICESUFFIX, ADDRESSNUMBER, PAYMENTREFERENCE, JULIANDATEFROM, JULIANDATETO, PAYMENTID, 
							INVOICECOMPANY, INVOICETYPE, INVOICENUMBER, INVOICESUFFIX, ADDRESSNUMBER, PAYMENTREFERENCE, JULIANDATEFROM, JULIANDATETO, PAYMENTID, 
							PAGEINDEX, PAGESIZE, ROWSTART, ROWEND ; 
END  

 ;
-- #desc						Get the Invoices Payment History Search 
-- #bl_class					Premier.Commerce.InvoicePaymentHistoryList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param AddressNumber			Address Number
-- #param InvoiceNumber			Invoice Number
-- #param PaymentReference		Payment Reference
-- #param DueDateFrom			Due Date From
-- #param DueDateTo				Due Date To

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePayHistList
(
	IN InstallationID			GRAPHIC(3) CCSID 13488,
	IN InvoiceNumber			NUMERIC(8,0),
	IN AddressNumber			NUMERIC(8,0),
	IN PaymentReference			VARGRAPHIC(25) CCSID 13488,
	IN DueDateFrom				NUMERIC(6,0),
	IN DueDateTo				NUMERIC(6,0),
	IN PageIndex				INT,
    IN PageSize					INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetInvoicePayHistList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	/* Gets the Invoice Document Restrictions Parameters */
	DECLARE	InvRestric	VARGRAPHIC(1) CCSID 13488;
	DECLARE InvINID		GRAPHIC(3) CCSID 13488;
	DECLARE InvConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE CompanyConstant			VARGRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488;
	
	SET InvConstant = 'AR_RESTRIC';
	SET InvINID = InstallationID;
	
	/* Gets the Invoice Document Restrictions Parameters */
	CALL [SCLIBRARY].CMM_GetConstantValue (InvConstant, InvINID, InvRestric);
	
	/* Read Account Receivable company constant */
	SET ConstantInstallation = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);

	BEGIN

		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		/*      DETAILED      */
		WITH CTE AS (
			SELECT 
				A.RPAN8                     AS AddressNumber,
				COALESCE(AB.ABALPH,'')      AS AlphaName,
				A.RPKCO                     AS InvoiceCompany,
				A.RPDCT                     AS InvoiceType,
				A.RPDOC                     AS InvoiceNumber,
				A.RPSFX                     AS InvoiceSuffix,
				A.RPDIVJ                    As InvoiceDate,
				A.RPDDJ                     As DueDate,
				B.CVCRCD                    As CurrencyCode,
				A.RPBCRC					AS BaseCurrencyCode,	
				A.RPCRRM                    AS CurrencyMode,
				B.CVDL01                    AS CurrencyDesc,
				A.RPAG                      AS GrossAmount,
				A.RPAAP                     AS OpenAmount,
				COALESCE(C.RZPAAP,0)		AS PaidAmount,
				0					        AS InTransitAmount,
				A.RPACR                     AS GrossAmountForeign,
				A.RPFAP                     AS OpenAmountForeign,
				COALESCE(C.RZPFAP,0)		AS PaidAmountForeign,
				0							AS InTransitAmountForeign,
				''						    AS RUEDUS,
				''						    AS RUEDBT,
				''						    AS RUEDTN,
				0							AS RUEDLN,
				A.RPCO
			FROM
				[SCDATA].F03B11 A				/* Invoice */
				LEFT JOIN [SCDATA].F03B14 C	/* Receipts Detail */
					ON C.RZAN8 = A.RPAN8
					AND C.RZDOC = A.RPDOC
					AND C.RZDCT = A.RPDCT
					AND C.RZKCO = A.RPKCO
					AND C.RZSFX = A.RPSFX
				INNER JOIN [SCDATA].F0013 B	/* Currency Master */
						ON B.CVCRCD = A.RPCRCD
				LEFT JOIN [SCDATA].F0101 AB	/* Address Book Master */
					ON AB.ABAN8 = A.RPAN8
			WHERE
				(InvoiceNumber IS NULL OR A.RPDOC = InvoiceNumber)
				AND	(AddressNumber IS NULL OR A.RPAN8 = AddressNumber)
				AND ((DueDateFrom = 0) OR (DueDateTo = 0) OR (A.RPDDJ >= DueDateFrom AND A.RPDDJ <= DueDateTo ))
				AND	(PaymentReference = '*' OR UPPER(C.RZCKNU) LIKE '%' || PaymentReference || '%') /* Payment Reference */
			UNION
			SELECT 
				A.RPAN8                     AS AddressNumber,
				COALESCE(AB.ABALPH,'')      AS AlphaName,
				A.RPKCO                     AS InvoiceCompany,
				A.RPDCT                     AS InvoiceType,
				A.RPDOC                     AS InvoiceNumber,
				A.RPSFX                     AS InvoiceSuffix,
				A.RPDIVJ                    As InvoiceDate,
				A.RPDDJ                     As DueDate,
				B.CVCRCD                    As CurrencyCode,
				A.RPBCRC					AS BaseCurrencyCode,	
				A.RPCRRM                    AS CurrencyMode,
				B.CVDL01                    AS CurrencyDesc,
				A.RPAG                      AS GrossAmount,
				A.RPAAP                     AS OpenAmount,
				0					        AS PaidAmount,
				COALESCE(D.RUAG,0)		    AS InTransitAmount,
				A.RPACR                     AS GrossAmountForeign,
				A.RPFAP                     AS OpenAmountForeign,
				0						    AS PaidAmountForeign,
				COALESCE(D.RUFAP,0)	        AS InTransitAmountForeign,
				D.RUEDUS					AS RUEDUS,
				D.RUEDBT					AS RUEDBT,
				D.RUEDTN					AS RUEDTN,
				D.RUEDLN 	  				AS RUEDLN,
				A.RPCO
			FROM
				[SCDATA].F03B11 A				/* Invoice */
				INNER JOIN [SCDATA].F03B13Z1 D /* Electronic Receipts Input */
					ON  D.RUAN8 = A.RPAN8                            
					AND D.RUDOC = A.RPDOC
					AND D.RUDCT = A.RPDCT
					AND D.RUKCO = A.RPKCO
					AND D.RUSFX = A.RPSFX
					AND D.RUEUPS IN ('', 'E')
				INNER JOIN [SCDATA].F0013 B	/* Currency Master */
					ON B.CVCRCD = A.RPCRCD
				LEFT JOIN [SCDATA].F0101 AB	/* Address Book Master */
					ON AB.ABAN8 = A.RPAN8
			WHERE
				(InvoiceNumber IS NULL OR A.RPDOC = InvoiceNumber)
				AND	(AddressNumber IS NULL OR A.RPAN8 = AddressNumber)
				AND ((DueDateFrom = 0) OR (DueDateTo = 0) OR (A.RPDDJ >= DueDateFrom AND A.RPDDJ <= DueDateTo ))
				AND	(PaymentReference = '*' OR UPPER(RUCKNU) LIKE '%' || PaymentReference || '%') /* Payment Reference */
		), PAGING AS (
			SELECT 
				A.AddressNumber,
				A.AlphaName,
				A.InvoiceCompany,
				A.InvoiceType,
				A.InvoiceNumber,
				A.InvoiceSuffix,
				A.InvoiceDate,
				A.DueDate,
				A.CurrencyCode,
				A.BaseCurrencyCode,	
				A.CurrencyMode,
				A.CurrencyDesc,
				A.GrossAmount,
				A.OpenAmount,
				SUM(A.PaidAmount) AS PaidAmount,
				SUM(A.InTransitAmount) AS InTransitAmount,
				A.GrossAmountForeign,
				A.OpenAmountForeign,
				SUM(A.PaidAmountForeign) AS PaidAmountForeign,
				SUM(A.InTransitAmountForeign) AS InTransitAmountForeign,
				ROW_NUMBER() OVER (ORDER BY A.DueDate DESC, A.InvoiceNumber DESC) AS RNUM
			FROM CTE A
			LEFT OUTER JOIN [SCDATA].FQ679912 AS CR
				ON CI$9INID = ConstantInstallation
				AND CICO = A.RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON  DR.DR$9INID = InvINID
				AND DR.DR$9CNST = InvConstant
				AND DR.DRKY = A.InvoiceType
			WHERE 
				(CompanyConstant ='A' OR CR.CICO IS NOT NULL)
				AND (InvRestric = '0' OR DR.DRKY IS NOT NULL)
			GROUP BY A.AddressNumber, A.AlphaName, A.InvoiceCompany, A.InvoiceType, A.InvoiceNumber, A.InvoiceSuffix, A.InvoiceDate, A.DueDate, A.CurrencyCode, 
				A.BaseCurrencyCode, A.CurrencyMode, A.CurrencyDesc, A.GrossAmount, A.OpenAmount, A.GrossAmountForeign, A.OpenAmountForeign
		)
		SELECT 
			A.AddressNumber,
			A.AlphaName,
			A.InvoiceCompany,
			A.InvoiceType,
			A.InvoiceNumber,
			A.InvoiceSuffix,
			A.InvoiceDate,
			A.DueDate,
			A.CurrencyCode,
			A.BaseCurrencyCode,
			A.CurrencyMode,
			A.CurrencyDesc,
			A.GrossAmount,
			A.OpenAmount,
			A.PaidAmount,
			A.InTransitAmount,
			A.GrossAmountForeign,
			A.OpenAmountForeign,
			A.PaidAmountForeign,
			A.InTransitAmountForeign,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM 
			PAGING A
		WHERE 
			((PageIndex = 0 OR PageSize = 0) OR (A.RNUM BETWEEN (PageSize * PageIndex) - PageSize + 1 AND PageIndex * PageSize));

		OPEN TEMP_CURSOR1;
	END;
END ;
-- #desc					Get the Invoice total Open Amount 
-- #bl_class				Premier.Commerce.InvoicePaymentList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param AddressNumber		Address Number
-- #param InvoiceNumber		Invoice Number
-- #param OrderNumber		Order Number
-- #param StatementNumber	Statement Number
-- #param OpenAmount		Open Amount
-- #param Currency Code		Currency Code
-- #param InvoiceDateFrom	Invoice Date From
-- #param InvoiceDateTo		Invoice Date To  
-- #param DueDateFrom		Due Date From
-- #param DueDateTo			Due Date To
-- #param Company			Company
-- #param AllowCreditMemo   Allow Credit Memo
-- #param SortBy			Sort By Column name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageSize			Page Size
-- #param PageIndex			Page Index


CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoicePaymentList
(
	IN INSTALLATIONID		GRAPHIC(3) CCSID 13488 , 
	IN ADDRESSNUMBER		NUMERIC (8, 0) , 
	IN INVOICENUMBER		NUMERIC (8, 0) , 
	IN ORDERNUMBER			NUMERIC (8, 0) , 
	IN STATEMENTNUMBER		VARGRAPHIC(20) CCSID 13488 , 
	IN OPENAMOUNT			NUMERIC (15, 0) , 
	IN CURRENCYCODE			GRAPHIC(3) CCSID 13488 , 
	IN INVOICEDATEFROM		NUMERIC (6, 0) , 
	IN INVOICEDATETO		NUMERIC (6, 0) , 
	IN DUEDATEFROM			NUMERIC (6, 0) , 
	IN DUEDATETO			NUMERIC (6, 0) , 
	IN COMPANY				GRAPHIC(5)    CCSID 13488, 
	IN ALLOWCREDITMEMO		GRAPHIC(1) CCSID 13488 , 
	IN SORTBY				VARGRAPHIC(20) CCSID 13488, 
	IN SORTDIR				VARCHAR(1) , 
	IN PAGEINDEX			INT, 
	IN PAGESIZE				INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetInvoicePaymentList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN
	/* Define the table to do the filtering and paging */
    DECLARE ROWSTART			INT DEFAULT 0;
    DECLARE ROWEND				INT DEFAULT 0;
    DECLARE SQL_DYNAMIC			VARGRAPHIC(10000) CCSID 13488 ;
    DECLARE WHERE_DYNAMIC		VARGRAPHIC(10000) CCSID 13488 ;
    DECLARE WHERE_DYNAMIC_OPENAMOUNT 	VARGRAPHIC(1000) CCSID 13488 ;
    DECLARE SORT_DYNAMIC		VARGRAPHIC(60) CCSID 13488 ;
    DECLARE SORTDIR_DYNAMIC		VARGRAPHIC(5) CCSID 13488 ;
    DECLARE INNER_DYNAMIC		VARGRAPHIC(1000) CCSID 13488 ;

	/* DYNAMIC SQL Select */
    DECLARE V_DYNAMIC VARGRAPHIC(8000) CCSID 13488 ;

	/* Gets the Account Receivable Document Restrictions */
    DECLARE ARRESTRIC	GRAPHIC(1) CCSID 13488 ;
    DECLARE ARINID		GRAPHIC(3) CCSID 13488 ;
    DECLARE ARCONSTANT	VARCHAR(10) ;

	/* Gets the Sales Order Document Restrictions */
    DECLARE SORDERRESTRIC	GRAPHIC(1) CCSID 13488 ;
    DECLARE SORDERINID		GRAPHIC(3) CCSID 13488 ;
    DECLARE SORDERCONSTANT	GRAPHIC (10)  CCSID 13488 ;

	/* Invoice early payments */
	DECLARE Today			NUMERIC (6,0);
	DECLARE EarlyPayValue 	VARGRAPHIC(1) CCSID 13488;
	DECLARE EarlyPayINID 	GRAPHIC(3) CCSID 13488;

	/* 'AR_DFTLMCU' */
    DECLARE DFTLMCU			VARGRAPHIC(12) CCSID 13488 ;
    DECLARE SINID			GRAPHIC(3) CCSID 13488 ;
    DECLARE COMPANYCONSTANT VARGRAPHIC(1) CCSID 13488 ;

	/* SET Company and CurrencyCode */
    DECLARE BUSSINESSUNIT	GRAPHIC(12) CCSID 13488;

	/* Accounting Company */
    DECLARE ACCOUNTINGCOMP  GRAPHIC(5) CCSID 13488 ;

	/* Gets the Account Receivable Document Restrictions */
    SET ARCONSTANT = 'AR_RESTRIC' ;
    SET ARINID = INSTALLATIONID ;
    CALL SCLIBRARY . CMM_GETCONSTANTVALUE(ARCONSTANT , ARINID , ARRESTRIC);

	/* Gets the Sales Order Document Restrictions */
    SET SORDERINID = INSTALLATIONID ;
    SET SORDERCONSTANT = 'SO_RESTRIC';
    CALL SCLIBRARY . CMM_GETCONSTANTVALUE( SORDERCONSTANT, SORDERINID , SORDERRESTRIC);
	
	/* Gets the Invoice early payments setting */
    SET EarlyPayINID = InstallationID ;
    CALL [SCLIBRARY].CMM_GetConstantValue('INVEARLYPY', EarlyPayINID, EarlyPayValue);
	
	/* 'AR_DFTLMCU' */
    SET SINID = INSTALLATIONID ;
    CALL SCLIBRARY . CMM_GETCONSTANTVALUE('AR_DFTLMCU' , SINID , DFTLMCU);

	/* SET Company and CurrencyCode */
    SET BUSSINESSUNIT = DFTLMCU;
    SET SORTDIR_DYNAMIC =
        CASE SORTDIR
            WHEN 'A' THEN ' ASC'
            WHEN 'D' THEN ' DESC' ELSE ''
        END ;
	/* Dynamic sort statement */
    SET SORT_DYNAMIC =
        CASE SORTBY
            WHEN 'Company' THEN 'Company' || SORTDIR_DYNAMIC
            WHEN 'InvoiceNumber' THEN 'InvoiceNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
            WHEN 'OrderNumber' THEN 'OrderNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
            WHEN 'InvoiceDate' THEN 'InvoiceDate' || SORTDIR_DYNAMIC || ', InvoiceNumber' || SORTDIR_DYNAMIC
            WHEN 'DueDate' THEN 'DueDate' || SORTDIR_DYNAMIC || ', InvoiceNumber' || SORTDIR_DYNAMIC
            WHEN 'StatementNumber' THEN 'StatementNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
            WHEN 'OpenAmount' THEN CASE EarlyPayValue WHEN 'Y' THEN 'OpenAmountDiscounted' ELSE 'OpenAmount' END || SORTDIR_DYNAMIC || ', InvoiceDate DESC'
            WHEN 'GrossAmount' THEN 'GrossAmount' || SORTDIR_DYNAMIC || ', InvoiceDate DESC' 
			ELSE 'DueDate ASC, InvoiceNumber ASC'
        END ;
    IF (CURRENCYCODE = ' ')
    THEN
        SELECT A . CCCRCD
            INTO CURRENCYCODE
        FROM [SCDATA] . F0010 A 
        INNER JOIN [SCDATA] . F0006 B 
            ON B . MCMCU = BUSSINESSUNIT AND A . CCCO = B . MCCO
        FETCH FIRST 1 ROWS ONLY ;
    END IF ;
	/* Accounting Company*/

	SELECT A . MCCO
		INTO ACCOUNTINGCOMP
	FROM [SCDATA] . F0006 A
	WHERE A . MCMCU = BUSSINESSUNIT ;

	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC ;
		/* Dynamic query condition */
		SET WHERE_DYNAMIC = '' ;
		SET INNER_DYNAMIC = '' ;
 
		SET ROWSTART = ( ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 ) ; 
		SET ROWEND = ( PAGEINDEX * PAGESIZE ) ; 
    
		IF (ADDRESSNUMBER IS NOT NULL)
			THEN
				SET WHERE_DYNAMIC = N' A.RPAN8 = ? ' ;
		ELSE    
				SET WHERE_DYNAMIC = N' ( 1 = 1 OR ? IS NULL) ' ; 
		END IF ;
    
		IF (INVOICENUMBER IS NOT NULL)
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPDOC =  ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL)  '; 
		END IF ;

		IF (INVOICEDATEFROM IS NOT NULL)
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPDIVJ >= ? ' ;
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ';
		END IF ;

		IF (INVOICEDATETO IS NOT NULL)
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPDIVJ <= ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ';
		END IF ;

		IF (ORDERNUMBER IS NOT NULL)
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPSDOC = ? ' ;
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ';
		END IF ;

		IF (DUEDATEFROM IS NOT NULL)
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPDDJ >=  ? ' ;
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ';
		END IF ;

		IF (DUEDATETO IS NOT NULL)
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPDDJ <= ? ' ;
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ';
		END IF ;

		IF (STATEMENTNUMBER <> '*')
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPCTL LIKE ''%'' || ? ||''%''' ;
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ?  = ''*'') ';
		END IF ;

		IF (COMPANY <> '*' AND COMPANY <> '00000')
		THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPCO = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ?  = ''*'') ';
  
			SET SINID = INSTALLATIONID ;
			CALL SCLIBRARY . CMM_GETCONSTANTVALUE('INSCOMPANY' , SINID , COMPANYCONSTANT);
			IF (COMPANYCONSTANT = 'L')
			THEN
				SET INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ679912 CR
							ON CR.CI$9INID =''' || SINID || N''' 
							AND CR.CICO = Invoices.Company ' ;
			END IF ;
		END IF ;

		IF (ARRESTRIC = N'1')
		THEN
			SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
						ON DR.DR$9INID = ''' || ARINID || '''
						AND DR.DR$9CNST = ''AR_RESTRIC''
						AND DR.DRKY = Invoices.InvoiceType ';
		END IF ;
		
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPCRCD = ? ' ;
		
		IF (EarlyPayValue = 'Y')THEN
			SET Today = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
			
			/*Credit Memo*/
			IF (ALLOWCREDITMEMO  = 'Y')
			THEN
				SET WHERE_DYNAMIC_OPENAMOUNT = N' (Invoices.OpenAmount > 0 OR (Invoices.GrossAmount < 0 AND Invoices.OpenAmount < 0 )) ';
			ELSE
				SET WHERE_DYNAMIC_OPENAMOUNT = N' (Invoices.OpenAmountDiscounted > 0.01) ';
			END IF ;

			IF (OpenAmount IS NOT NULL)
			THEN
				SET WHERE_DYNAMIC_OPENAMOUNT = WHERE_DYNAMIC_OPENAMOUNT || N' AND Invoices.OpenAmountDiscounted >= ? ';
			ELSE
				SET WHERE_DYNAMIC_OPENAMOUNT = WHERE_DYNAMIC_OPENAMOUNT || N' AND ( 1 = 1 OR ? IS NULL) ';
			END IF ;
			
			SET SQL_DYNAMIC = N'
			WITH CTE1 AS(
				SELECT
					A.RPKCO,
					A.RPDOC,
					A.RPDCT,
					A.RPDIVJ,
					A.RPSKCO,
					A.RPSDOC,
					A.RPSDCT,
					A.RPDDJ,
					A.RPVR01,
					A.RPCTL,
					A.RPAG,
					A.RPAAP,
					A.RPACR,
					A.RPFAP,
					A.RPADSC,
					A.RPCDSA,
					A.RPADSA,
					A.RPDDNJ,
					A.RPSFX,
					A.RPCRCD,
					A.RPCRRM,
					A.RPCO,
					A.RPAN8,
					A.RPEXR1
				FROM 	[SCDATA].F03B11 A 
				WHERE ' || WHERE_DYNAMIC || N'
			), Invoices AS (
				SELECT
					A.RPKCO			AS	InvoiceCompany,
					A.RPDOC			AS	InvoiceNumber,
					A.RPDCT			AS	InvoiceType,
					A.RPDIVJ		AS	InvoiceDate,
					A.RPSKCO		AS  OrderCompany,
					A.RPSDOC		AS	OrderNumber,
					A.RPSDCT		AS	OrderType,
					A.RPDDJ			AS	DueDate,
					A.RPVR01		AS	ReferenceNumber,
					A.RPCTL			AS  StatementNumber,
					A.RPAG							AS  GrossAmount,
					(A.RPAAP - COALESCE(C.RUAG, 0))	AS  OpenAmount,
					A.RPACR 						AS  GrossAmountForeign,
					(A.RPFAP - COALESCE(C.RUAG, 0))	AS  OpenAmountForeign,
					(CASE WHEN A.RPDDNJ >= ? THEN (A.RPAAP - COALESCE(C.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - COALESCE(C.RUAG,0)) END) AS OpenAmountDiscounted,
					(CASE WHEN A.RPDDNJ >= ? THEN (A.RPFAP - COALESCE(C.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - COALESCE(C.RUAG,0)) END) AS OpenAmountDiscountedForeign, 
					A.RPDDNJ		AS DiscountDueDate,
					A.RPSFX			AS DocumentSuffix,
					A.RPCRCD		AS CurrencyCode,
					D.CVDL01		AS CurrencyDesc,
					A.RPCRRM		AS CurrencyMode,
					A.RPCO		    AS Company,
					A.RPAN8			AS AddressNumber,
					AB.ABALPH		AS AlphaName,
					A.RPEXR1		AS TaxExplanationCode
				FROM 	CTE1 A 
				INNER JOIN [SCDATA].F0101 AB		/*Address Book Master Table*/
					ON  AB.ABAN8 = A.RPAN8
				LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 
									FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('''', ''E'') 
									GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) as C	/* ELECTRONIC RECEIPTS INPUT */
							ON  A.RPAN8 = RUAN8				  
							AND A.RPDOC = RUDOC
							AND A.RPDCT = RUDCT
							AND A.RPKCO = RUKCO
							AND A.RPSFX = RUSFX 
				LEFT OUTER JOIN [SCDATA].F0013 D			/*CURRENCY CODES*/
					ON D.CVCRCD = A.RPCRCD 
			),
			PAGING AS (
				SELECT Invoices.InvoiceCompany,
					Invoices.InvoiceNumber,
					Invoices.InvoiceType,
					Invoices.InvoiceDate,
					Invoices.OrderCompany,
					Invoices.OrderNumber,
					Invoices.OrderType,
					Invoices.DueDate,
					Invoices.ReferenceNumber,
					Invoices.StatementNumber,
					Invoices.GrossAmount,   
					Invoices.OpenAmount,
					Invoices.GrossAmountForeign,   
					Invoices.OpenAmountForeign,
					(CASE WHEN Invoices.GrossAmount > 0 AND Invoices.OpenAmountDiscounted > 0 THEN Invoices.OpenAmountDiscounted ELSE 0 END) AS OpenAmountDiscounted,
					(CASE WHEN Invoices.GrossAmountForeign > 0 AND Invoices.OpenAmountDiscountedForeign > 0 THEN Invoices.OpenAmountDiscountedForeign ELSE 0 END) AS OpenAmountDiscountedForeign,
					Invoices.DiscountDueDate,
					Invoices.DocumentSuffix,
					Invoices.CurrencyCode, 
					Invoices.CurrencyDesc,
					Invoices.CurrencyMode,
					Invoices.Company,
					E.CCNAME        AS CompanyName,
					Invoices.AddressNumber,
					Invoices.AlphaName, 
					'''||ACCOUNTINGCOMP||''' AS AccountingCompany,
					Invoices.TaxExplanationCode, ROW_NUMBER() OVER(ORDER BY ' || SORT_DYNAMIC || ') AS RNUM 
				FROM Invoices  '
				|| INNER_DYNAMIC || N'
				LEFT OUTER JOIN [SCDATA].F0010 E			/*CompanyName*/
					ON E.CCCO = Invoices.Company 
				WHERE '	|| WHERE_DYNAMIC_OPENAMOUNT || N'
			)
			SELECT 
				PAGING.InvoiceCompany, PAGING.InvoiceNumber, PAGING.InvoiceType, PAGING.InvoiceDate, PAGING.OrderCompany, PAGING.OrderNumber, PAGING.OrderType, PAGING.DueDate, 
				PAGING.ReferenceNumber, PAGING.StatementNumber, PAGING.GrossAmount, PAGING.OpenAmount, PAGING.GrossAmountForeign, PAGING.OpenAmountForeign, 
				PAGING.OpenAmountDiscounted, PAGING.OpenAmountDiscountedForeign, PAGING.DiscountDueDate, PAGING.DocumentSuffix, 
				PAGING.CurrencyCode, PAGING.CurrencyDesc, PAGING.CurrencyMode, PAGING.Company, PAGING.CompanyName, CASE WHEN ? = 1 THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END  ELSE ''N'' END  AS ISORDERRESTRICTED, 
				PAGING.AddressNumber, PAGING.AlphaName, PAGING.AccountingCompany, PAGING.TaxExplanationCode, 
				(SELECT COUNT(1) FROM [SCDATA].FQ670314 B WHERE B.PDDOC = PAGING.InvoiceNumber AND B.PDDCT = PAGING.InvoiceType AND B.PDKCO = PAGING.InvoiceCompany AND B.PDSFX = PAGING.DocumentSuffix) AS ScheduledPayment,
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
			FROM PAGING
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON DR.DR$9INID = ?
				AND DR.DR$9CNST = ?
				AND DR.DRKY = PAGING.OrderType 
			WHERE (( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? ))' ;
			
			PREPARE V_DYNAMIC FROM SQL_DYNAMIC ;
			
			OPEN TEMP_CURSOR1 USING ADDRESSNUMBER, INVOICENUMBER, INVOICEDATEFROM, INVOICEDATETO, ORDERNUMBER, DUEDATEFROM, DUEDATETO, STATEMENTNUMBER,
							COMPANY, CurrencyCode, Today, Today, OpenAmount, SORDERRESTRIC, SORDERINID, SORDERCONSTANT, PAGEINDEX, PAGESIZE,  ROWSTART , ROWEND ;
			
		ELSE
			/*Credit Memo*/
			IF (ALLOWCREDITMEMO  = 'Y')
			THEN
				SET WHERE_DYNAMIC_OPENAMOUNT = N' ((A.RPAAP - COALESCE(C.RUAG,0)) <> 0) ' ;
			ELSE
				SET WHERE_DYNAMIC_OPENAMOUNT = N' ((A.RPAAP - COALESCE(C.RUAG,0)) > 0.01) ' ;
			END IF ;
		
			
			IF (OpenAmount IS NOT NULL)
			THEN
				SET WHERE_DYNAMIC_OPENAMOUNT = WHERE_DYNAMIC_OPENAMOUNT || N' AND (A.RPAAP - COALESCE(C.RUAG,0)) >= ? ';
			ELSE
				SET WHERE_DYNAMIC_OPENAMOUNT = WHERE_DYNAMIC_OPENAMOUNT || N' AND ( 1 = 1 OR ? IS NULL) ';
			END IF ;
			
			SET SQL_DYNAMIC = N'
			WITH CTE1 AS (
				SELECT
						A.RPKCO,
						A.RPDOC,
						A.RPDCT,
						A.RPDIVJ,
						A.RPSKCO,
						A.RPSDOC,
						A.RPSDCT,
						A.RPDDJ,
						A.RPVR01,
						A.RPCTL,
						A.RPAG,
						A.RPAAP,
						A.RPACR,
						A.RPFAP,
						A.RPSFX,
						A.RPCRCD,
						A.RPCRRM,
						A.RPCO,
						A.RPAN8,
						A.RPEXR1
					FROM 	[SCDATA].F03B11 A 
					WHERE ' || WHERE_DYNAMIC || N'
			), PAGING AS (
				SELECT Invoices.*, ROW_NUMBER() OVER(ORDER BY ' || SORT_DYNAMIC || ') AS RNUM FROM 
				(
					SELECT
						A.RPKCO			AS	InvoiceCompany,
						A.RPDOC			AS	InvoiceNumber,
						A.RPDCT			AS	InvoiceType,
						A.RPDIVJ		AS	InvoiceDate,
						A.RPSKCO		AS  OrderCompany,
						A.RPSDOC		AS	OrderNumber,
						A.RPSDCT		AS	OrderType,
						A.RPDDJ			AS	DueDate,
						A.RPVR01		AS	ReferenceNumber,
						A.RPCTL			AS  StatementNumber,
						A.RPAG							AS  GrossAmount,
						(A.RPAAP - COALESCE(C.RUAG, 0))	AS  OpenAmount,
						A.RPACR 						AS  GrossAmountForeign,
						(A.RPFAP - COALESCE(C.RUAG, 0))	AS  OpenAmountForeign,
						A.RPSFX			AS DocumentSuffix,
						A.RPCRCD		AS CurrencyCode,
						D.CVDL01		AS CurrencyDesc,
						A.RPCRRM		AS CurrencyMode,
						A.RPCO		    AS Company,
						E.CCNAME		AS CompanyName,
						A.RPAN8			AS AddressNumber,
						AB.ABALPH	AS AlphaName,
						'''||ACCOUNTINGCOMP||''' AS AccountingCompany,
						A.RPEXR1		AS TaxExplanationCode
					FROM 	CTE1 A 
					INNER JOIN [SCDATA].F0101 AB		/*Address Book Master Table*/
						ON AB.ABAN8 = A.RPAN8  
					LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG,RUAN8 
										FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('''', ''E'') 
										GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) as C	/* ELECTRONIC RECEIPTS INPUT */
								ON  A.RPAN8 = RUAN8				  
								AND A.RPDOC = RUDOC
								AND A.RPDCT = RUDCT
								AND A.RPKCO = RUKCO
								AND A.RPSFX = RUSFX 
					LEFT OUTER JOIN [SCDATA].F0013 D			/*CURRENCY CODES*/
						ON D.CVCRCD = A.RPCRCD 
					LEFT OUTER JOIN [SCDATA].F0010 E			/*CompanyName*/
						ON E.CCCO = A.RPCO
					WHERE ' || WHERE_DYNAMIC_OPENAMOUNT|| N'
					) Invoices '
					|| INNER_DYNAMIC || N'
				)
			SELECT 
				PAGING.InvoiceCompany, PAGING.InvoiceNumber, PAGING.InvoiceType, PAGING.InvoiceDate, PAGING.OrderCompany, PAGING.OrderNumber, PAGING.OrderType, PAGING.DueDate, 
				PAGING.ReferenceNumber, PAGING.StatementNumber, PAGING.GrossAmount, PAGING.OpenAmount, PAGING.GrossAmountForeign, PAGING.OpenAmountForeign, 
				0 AS OpenAmountDiscounted, 0 AS OpenAmountDiscountedForeign, 0 AS DiscountDueDate, PAGING.DocumentSuffix, 
				PAGING.CurrencyCode, PAGING.CurrencyDesc, PAGING.CurrencyMode, PAGING.Company, PAGING.CompanyName, CASE WHEN ? = 1 THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END  ELSE ''N'' END  AS ISORDERRESTRICTED, 
				PAGING.AddressNumber, PAGING.AlphaName, PAGING.AccountingCompany, PAGING.TaxExplanationCode, 
				(SELECT COUNT(1) FROM [SCDATA].FQ670314 B WHERE B.PDDOC = PAGING.InvoiceNumber AND B.PDDCT = PAGING.InvoiceType AND B.PDKCO = PAGING.InvoiceCompany AND B.PDSFX = PAGING.DocumentSuffix) AS ScheduledPayment,
				(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
			FROM PAGING
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON DR.DR$9INID = ?
				AND DR.DR$9CNST = ?
				AND DR.DRKY = PAGING.OrderType 
			WHERE (( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? ))' ;
		
			PREPARE V_DYNAMIC FROM SQL_DYNAMIC ;
			
			OPEN TEMP_CURSOR1 USING  ADDRESSNUMBER, INVOICENUMBER, INVOICEDATEFROM, INVOICEDATETO, ORDERNUMBER, DUEDATEFROM, DUEDATETO, STATEMENTNUMBER,
							COMPANY, CurrencyCode, OpenAmount, SORDERRESTRIC, SORDERINID, SORDERCONSTANT, PAGEINDEX, PAGESIZE,  ROWSTART , ROWEND ;
		END IF;
		
	END ;
END  ; 
  

-- #desc						Returns the last InvoicesToDisplay most recent invoices
-- #bl_class					Premier.Commerce.InvoiceRecentList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param StoreId				Store Id
-- #param AddressNumber			Address Number
-- #param Company				Company 
-- #param InvoicesToDisplay		Quantity of rows to be returned
-- #param LastDays				Filter orders in last 0 or N days

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceRecentList
(
	IN StoreId				GRAPHIC(3) CCSID 13488,
	IN AddressNumber		NUMERIC(8,0),
	IN Company				GRAPHIC(5) CCSID 13488, 
	IN InvoicesToDisplay	INT,
	IN LastDays				INT	
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetInvoiceRecentList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT

BEGIN

	/* Gets the Account Receivable Document Restrictions */
    DECLARE ArRestric	GRAPHIC(1) CCSID 13488;
    DECLARE ArINID		GRAPHIC(3) CCSID 13488;
    DECLARE ArConstant	VARCHAR(10);

	/* Read Account Receivable company constant */
	DECLARE ConstantStore		GRAPHIC(3) CCSID 13488; 
	DECLARE CompanyConstant		VARGRAPHIC(1) CCSID 13488; 

	/* Filter last N days */
	DECLARE DateFrom NUMERIC(6, 0);
	DECLARE DateTo NUMERIC(6, 0);

	/* Invoice early payments */
	DECLARE Today			NUMERIC (6,0);
	DECLARE EarlyPayValue 	VARGRAPHIC(1) CCSID 13488;
	DECLARE EarlyPayINID 	GRAPHIC(3) CCSID 13488;

	/* Gets the Account Receivable Document Restrictions */
	SET ArConstant = 'AR_RESTRIC';
    SET ArINID = StoreId;
    CALL [SCLIBRARY].CMM_GetConstantValue(ArConstant, ArINID, ArRestric);

	/* Read Account Receivable company constant */
	SET ConstantStore = StoreId; 
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantStore, CompanyConstant);
	
	/* Filter last N days */
	SET DateFrom = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE - (LastDays Days));
	SET DateTo = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	/* Gets the Invoice early payments setting */
    SET EarlyPayINID = StoreId ;
    CALL [SCLIBRARY].CMM_GetConstantValue('INVEARLYPY', EarlyPayINID, EarlyPayValue);

	SET Today = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	IF (Company = '00000') THEN		
			SET Company = '*';
		END IF;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS	(	 
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - COALESCE(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - COALESCE(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				A.RPDDNJ							AS DiscountDueDate,
				SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPAAP - COALESCE(E.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - COALESCE(E.RUAG,0)) END)) AS OpenAmountDiscounted,
				SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPFAP - COALESCE(E.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - COALESCE(E.RUAG,0)) END)) AS OpenAmountDiscountedForeign, 
				ROW_NUMBER ( ) OVER ( ORDER BY RPDIVJ DESC, RPDOC DESC ) AS RNUM 
			FROM [SCDATA].F03B11 AS  A					/* Invoice Table */
			LEFT OUTER JOIN [SCDATA].F0013 AS C		/* Currency Master */
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 AS D		/* Base Currency */
				ON D.CVCRCD = A.RPBCRC
			LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG, RUAN8 
							FROM [SCDATA].F03B13Z1 
							WHERE RUEUPS IN ('', 'E') 
							GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) AS E			/* ELECTRONIC RECEIPTS INPUT */
				ON  A.RPAN8 = RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX 
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = ArINID 
				AND DR.DR$9CNST = ArConstant
				AND DR.DRKY = A.RPDCT
			WHERE  A.RPAN8 = AddressNumber
				AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
				AND (A.RPCO = Company OR (Company = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC, A.RPDDNJ
		)
		SELECT	 
			A.InvoiceCompany,
			A.InvoiceType,	
			A.InvoiceNumber,
			A.InvoiceDate,
			A.CurrencyCode,
			A.CurrencyMode,
			A.GrossAmount,
			A.OpenAmount,
			A.GrossAmountForeign,
			A.OpenAmountForeign,
			A.BaseCurrencyCode,
			A.DiscountDueDate,
			A.OpenAmountDiscounted,
			A.OpenAmountDiscountedForeign
		FROM 
			CTE A 
		WHERE RNUM BETWEEN 1 AND InvoicesToDisplay; 

		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS	(	 
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - COALESCE(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - COALESCE(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				0									AS DiscountDueDate,
				0									AS OpenAmountDiscounted,
				0									AS OpenAmountDiscountedForeign, 
				ROW_NUMBER ( ) OVER ( ORDER BY RPDIVJ DESC, RPDOC DESC ) AS RNUM 
			FROM [SCDATA].F03B11 AS  A					/* Invoice Table */
			LEFT OUTER JOIN [SCDATA].F0013 AS C		/* Currency Master */
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 AS D		/* Base Currency */
				ON D.CVCRCD = A.RPBCRC
			LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG, RUAN8 
							FROM [SCDATA].F03B13Z1 
							WHERE RUEUPS IN ('', 'E') 
							GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) AS E			/* ELECTRONIC RECEIPTS INPUT */
				ON  A.RPAN8 = RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX 
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = ArINID 
				AND DR.DR$9CNST = ArConstant
				AND DR.DRKY = A.RPDCT
			WHERE  A.RPAN8 = AddressNumber
				AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
				AND (A.RPCO = Company OR (Company = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC
		)
		SELECT	 
			A.InvoiceCompany,
			A.InvoiceType,	
			A.InvoiceNumber,
			A.InvoiceDate,
			A.CurrencyCode,
			A.CurrencyMode,
			A.GrossAmount,
			A.OpenAmount,
			A.GrossAmountForeign,
			A.OpenAmountForeign,
			A.BaseCurrencyCode,
			A.DiscountDueDate,
			A.OpenAmountDiscounted,
			A.OpenAmountDiscountedForeign
		FROM 
			CTE A 
		WHERE RNUM BETWEEN 1 AND InvoicesToDisplay; 

		/* Filter by N days */
		DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS	(	
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - COALESCE(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - COALESCE(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				A.RPDDNJ							AS DiscountDueDate,
				SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPAAP - COALESCE(E.RUAG,0)) - (A.RPADSC - A.RPADSA) ELSE (A.RPAAP - COALESCE(E.RUAG,0)) END)) AS OpenAmountDiscounted,
				SUM((CASE WHEN A.RPDDNJ >= Today THEN (A.RPFAP - COALESCE(E.RUAG,0)) - (A.RPCDSA - A.RPADSA) ELSE (A.RPFAP - COALESCE(E.RUAG,0)) END)) AS OpenAmountDiscountedForeign, 
				ROW_NUMBER ( ) OVER ( ORDER BY RPDIVJ DESC, RPDOC DESC ) AS RNUM 
			FROM [SCDATA].F03B11 AS  A					/* Invoice Table */
			LEFT OUTER JOIN [SCDATA].F0013 AS C		/* Currency Master */
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 AS D		/* Base Currency */
				ON D.CVCRCD = A.RPBCRC
			LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG, RUAN8 
							FROM [SCDATA].F03B13Z1 
							WHERE RUEUPS IN ('', 'E') 
							GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) AS E			/* ELECTRONIC RECEIPTS INPUT */
				ON  A.RPAN8 = RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX 
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = ArINID 
				AND DR.DR$9CNST = ArConstant
				AND DR.DRKY = A.RPDCT
			WHERE  A.RPAN8 = AddressNumber
				AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
				AND (A.RPCO = Company OR (Company = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
				AND A.RPDIVJ BETWEEN DateFrom AND DateTo				/* Filter last N days */
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC, A.RPDDNJ
		)
		SELECT	 
			A.InvoiceCompany,
			A.InvoiceType,	
			A.InvoiceNumber,
			A.InvoiceDate,
			A.CurrencyCode,
			A.CurrencyMode,
			A.GrossAmount,
			A.OpenAmount,
			A.GrossAmountForeign,
			A.OpenAmountForeign,
			A.BaseCurrencyCode,
			A.DiscountDueDate,
			A.OpenAmountDiscounted,
			A.OpenAmountDiscountedForeign
		FROM 
			CTE A 
		WHERE RNUM BETWEEN 1 AND InvoicesToDisplay; 

		DECLARE TEMP_CURSOR4 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE AS	(	
			SELECT 
				A.RPKCO								AS InvoiceCompany,	
				A.RPDCT								AS InvoiceType,	
				A.RPDOC								AS InvoiceNumber,
				A.RPDIVJ							AS InvoiceDate,
				A.RPCRCD							AS CurrencyCode,
				A.RPCRRM							AS CurrencyMode,
				SUM(A.RPAG)							AS GrossAmount,
				SUM(A.RPAAP - COALESCE(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)						AS GrossAmountForeign,
				SUM(A.RPFAP - COALESCE(E.RUAG, 0))	AS OpenAmountForeign,
				A.RPBCRC							AS BaseCurrencyCode,
				0									AS DiscountDueDate,
				0									AS OpenAmountDiscounted,
				0									AS OpenAmountDiscountedForeign, 
				ROW_NUMBER ( ) OVER ( ORDER BY RPDIVJ DESC, RPDOC DESC ) AS RNUM 
			FROM [SCDATA].F03B11 AS  A					/* Invoice Table */
			LEFT OUTER JOIN [SCDATA].F0013 AS C		/* Currency Master */
				ON C.CVCRCD = A.RPCRCD
			LEFT OUTER JOIN [SCDATA].F0013 AS D		/* Base Currency */
				ON D.CVCRCD = A.RPBCRC
			LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG, RUAN8 
							FROM [SCDATA].F03B13Z1 
							WHERE RUEUPS IN ('', 'E') 
							GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) AS E			/* ELECTRONIC RECEIPTS INPUT */
				ON  A.RPAN8 = RUAN8				  
				AND A.RPDOC = E.RUDOC
				AND A.RPDCT = E.RUDCT
				AND A.RPKCO = E.RUKCO
				AND A.RPSFX = E.RUSFX 
			LEFT OUTER JOIN [SCDATA].FQ679912 CR				/* Company Restrict */
				ON CI$9INID = ConstantStore
				AND CICO = RPCO
			LEFT OUTER JOIN [SCDATA].FQ67008 DR				/* Document restrict */
				ON DR.DR$9INID = ArINID 
				AND DR.DR$9CNST = ArConstant
				AND DR.DRKY = A.RPDCT
			WHERE  A.RPAN8 = AddressNumber
				AND (ArRestric = '0' OR DR.DRKY IS NOT NULL)
				AND (A.RPCO = Company OR (Company = '*' AND (CompanyConstant = 'A' OR CR.CICO IS NOT NULL) ))
				AND A.RPDIVJ BETWEEN DateFrom AND DateTo				/* Filter last N days */
			GROUP BY A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPCRCD, A.RPCRRM, A.RPBCRC
		)
		SELECT	 
			A.InvoiceCompany,
			A.InvoiceType,	
			A.InvoiceNumber,
			A.InvoiceDate,
			A.CurrencyCode,
			A.CurrencyMode,
			A.GrossAmount,
			A.OpenAmount,
			A.GrossAmountForeign,
			A.OpenAmountForeign,
			A.BaseCurrencyCode,
			A.DiscountDueDate,
			A.OpenAmountDiscounted,
			A.OpenAmountDiscountedForeign
		FROM 
			CTE A 
		WHERE RNUM BETWEEN 1 AND InvoicesToDisplay; 

		IF ( LastDays = 0 ) THEN 
			IF (EarlyPayValue = 'Y')THEN
				OPEN TEMP_CURSOR1; 
			ELSE
				OPEN TEMP_CURSOR2;
			END IF;
		ELSE
			IF (EarlyPayValue = 'Y')THEN
				OPEN TEMP_CURSOR3; 
			ELSE
				OPEN TEMP_CURSOR4;
			END IF;
		END IF; 
		
	END;
	COMMIT;
END;
-- #desc					Search for invoice summarized
-- #bl_class				Premier.Commerce.InvoiceSearchList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param InvoiceNumber		Invoice Number			
-- #param OrderNumber		OrderNumber	
-- #param AddressNumber		Address Number
-- #param ReferenceNumber	Reference Number	
-- #param JulianDateFrom	JulianDate From
-- #param JulianDateTo		JulianDate To
-- #param AllOpenInvoice	All Open Invoice
-- #param SortBy			Sort By Column name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageSize			Page Size
-- #param PageIndex			Page Index
  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetInvoiceSearchList
( 
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN AddressNumber		NUMERIC(8,0),
	IN InvoiceNumber		NUMERIC(8,0),
	IN OrderNumber			NUMERIC(8,0),
	IN ReferenceNumber		VARGRAPHIC(25) CCSID 13488,
	IN JulianDateFrom		NUMERIC(6,0),
	IN JulianDateTo			NUMERIC(6,0),
	IN AllOpenInvoice		VARCHAR(1),
	IN SortBy				VARCHAR(20),
	IN SortDir				VARCHAR(1),
	IN PageIndex			INT,
	IN "PAGESIZE"			INT
)
 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetInvoiceSearchList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
	
BEGIN 

	DECLARE ROWSTART INT DEFAULT 0;
    DECLARE ROWEND INT DEFAULT 0;
	DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE OPENINVOICES_WHERE_DYNAMIC	VARGRAPHIC(1000) CCSID 13488;
	DECLARE SORT_DYNAMIC				VARGRAPHIC(130) CCSID 13488;
	DECLARE SORTDIR_DYNAMIC				VARGRAPHIC(5) CCSID 13488;
	DECLARE INNER_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
  
	/* DYNAMIC SQL Select */ 
	DECLARE V_DYNAMIC					VARGRAPHIC ( 8000 ) CCSID 13488 ; 
  
	/* Gets the Invoice Document Restrictions Parameters */ 
	DECLARE	InvRestric		VARGRAPHIC(1) CCSID 13488;
	DECLARE InvINID			GRAPHIC(3) CCSID 13488;
	DECLARE InvConstant		GRAPHIC(10) CCSID 13488;
	 
	/* Gets the Sales Order Document Restrictions Parameters */ 
	DECLARE SORestric	VARGRAPHIC(1) CCSID 13488;
	DECLARE SOINID		GRAPHIC(3) CCSID 13488;
	DECLARE SOConstant	GRAPHIC(10) CCSID 13488;
	 
	DECLARE CompanyConstant	 VARGRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation GRAPHIC(3) CCSID 13488;
	 
	/* Foreign Setting */ 
	DECLARE ForeignInstallation	GRAPHIC(3) CCSID 13488;
	DECLARE ForeignConstant	VARGRAPHIC(1) CCSID 13488;
	
	SET ROWSTART = ( ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 );
    SET ROWEND = ( PAGEINDEX * PAGESIZE );
    
	SET InvConstant = 'AR_RESTRIC';
	SET InvINID = InstallationID;
  
	SET SOConstant = 'SO_RESTRIC';
	SET SOINID = InstallationID;
	 
	SET ForeignInstallation = InstallationID; 
	 
	/* Gets the Invoice Document Restrictions Parameters */ 
	CALL [SCLIBRARY].CMM_GetConstantValue(InvConstant, InvINID, InvRestric); 
	/* Gets the Sales Order Document Restrictions Parameters */ 
	CALL [SCLIBRARY].CMM_GetConstantValue(SOConstant, SOINID, SORestric); 
	 
	/* Read Account Receivable company constant */ 
	SET ConstantInstallation = InstallationID ; 
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
	/* Reads foreign setting */ 
	CALL [SCLIBRARY].CMM_GetConstantValue('FOREGCURYN', ForeignInstallation, ForeignConstant);
	 
	SET OPENINVOICES_WHERE_DYNAMIC = ' ';
	SET WHERE_DYNAMIC = ' ';
	SET INNER_DYNAMIC = ' ';
  
	SET SORTDIR_DYNAMIC = CASE SORTDIR WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 
  
	/* Dynamic sort statement */ 
	SET SORT_DYNAMIC = CASE SortBy  
		WHEN 'InvoiceNumber' THEN 'InvoiceNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC' 
		WHEN 'InvoiceDate' THEN 'InvoiceDate' || SORTDIR_DYNAMIC || ', InvoiceNumber' || SORTDIR_DYNAMIC 
		WHEN 'OrderNumber' THEN 'OrderNumber' || SORTDIR_DYNAMIC || ', InvoiceDate DESC' 
		WHEN 'CustomerReference' THEN 'YourReference' || SORTDIR_DYNAMIC || ', InvoiceDate DESC' 
		WHEN 'OpenAmount' THEN '(CASE WHEN (CurrencyMode = ''F'' AND ''' || FOREIGNCONSTANT || ''' = ''Y'') THEN OpenAmountForeign ELSE OpenAmount END)' || SORTDIR_DYNAMIC || ', InvoiceDate DESC' 
		WHEN 'GrossAmount' THEN '(CASE WHEN (CurrencyMode = ''F'' AND ''' || FOREIGNCONSTANT || ''' = ''Y'') THEN GrossAmountForeign ELSE GrossAmount END)' || SORTDIR_DYNAMIC || ', InvoiceDate DESC' 
		WHEN 'CurrencyCode' THEN 'CurrencyCode' || SORTDIR_DYNAMIC || ', InvoiceDate DESC' 
		ELSE 'InvoiceDate DESC, InvoiceNumber DESC' 
	END;
  
	IF (CompanyConstant = N'L') THEN
		SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 AS CR
											ON CICO = A.RPCO
											AND CI$9INID = ''' || CONSTANTINSTALLATION || '''';
    END IF;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
   IF (InvRestric = N'1') THEN
		SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 AS DR
									ON  DR.DR$9INID = ''' || INVINID || '''
									AND DR.DR$9CNST = ''AR_RESTRIC''
                                    AND DR.DRKY = A.RPDCT ';
	END IF;
    
	IF (InvoiceNumber IS NOT NULL) THEN
         SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPDOC =  ? ';
    ELSE
         SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL)  ';
    END IF;
    
    IF (JulianDateFrom <> 0 AND JulianDateTo <> 0) THEN
         SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (A.RPDIVJ >=  ?  AND A.RPDIVJ <= ? ) ';
     ELSE
         SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = 0 OR ? = 0)  ';
    END IF;
    
    IF (OrderNumber IS NOT NULL) THEN
         SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.RPSDOC = ? ';
    ELSE
         SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL)  ';
    END IF;
    
    /* Filter by Customer Reference */ 
    IF ReferenceNumber <> '*' THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (UPPER (A.RPVR01) LIKE ''%'' || ? || ''%'' )';
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'')  ';
	END IF;
  
	IF ( AllOpenInvoice IS NULL ) THEN
		SET AllOpenInvoice = '0';
	END IF ; 

	/* Gets open invoices */	 
	IF ( AllOpenInvoice = '1' ) THEN 
		SET OPENINVOICES_WHERE_DYNAMIC = OPENINVOICES_WHERE_DYNAMIC || N' WHERE ((Invoices.CurrencyMode = ''D'' OR Invoices.CurrencyMode = '''' OR Invoices.CurrencyMode IS NULL) AND Invoices.OpenAmount > 0) 
													OR (Invoices.CurrencyMode = ''F'' AND Invoices.OpenAmountForeign > 0) ' ; 
    END IF ; 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
  BEGIN 
  /* CURSOR FOR DYNAMIC SQL */ 
  DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC ; 
                                                                                                                                                                                                                                                                                                                                                                                                                                                            
 SET SQL_DYNAMIC = N'
		WITH CTE1 AS (
			SELECT	 
				A.RPAN8,
				A.RPKCO,	
				A.RPDCT,	
				A.RPDOC,
				A.RPSFX,
				A.RPDIVJ,
				A.RPSKCO,
				A.RPSDCT,
				A.RPSDOC,
				A.RPVR01,
				A.RPCRCD,
				A.RPCRRM,
				A.RPAG,
				A.RPAAP,
				A.RPACR,
				A.RPFAP,
				A.RPBCRC,
				A.RPCO
			FROM 
				[SCDATA].F03B11 AS  A				/* Invoice table */
			WHERE (A.RPAN8 = ?) 										/* ADDRESS NUMBER */
				' || WHERE_DYNAMIC || '
		),CTE2 AS (
			SELECT	 
				A.RPAN8			AS AddressNumber,
				A.RPKCO			AS InvoiceCompany ,	
				A.RPDCT			AS InvoiceType ,	
				A.RPDOC			AS InvoiceNumber,
				A.RPDIVJ		AS InvoiceDate,
				A.RPSKCO		AS OrderCompany,
				A.RPSDCT		AS OrderType ,
				A.RPSDOC		AS OrderNumber,
				A.RPVR01		AS YourReference,
				A.RPCRCD		AS CurrencyCode,
				A.RPCRRM		AS CurrencyMode,
				C.CVDL01		AS CurrencyDesc,
				SUM(A.RPAG)		AS GrossAmount,
				SUM(A.RPAAP - COALESCE(E.RUAG, 0))	AS OpenAmount,
				SUM(A.RPACR)	AS GrossAmountForeign,
				SUM(A.RPFAP - COALESCE(E.RUAG, 0))	AS OpenAmountForeign,
				''''				AS DocumentSuffix,
				A.RPBCRC		AS BaseCurrencyCode,
				D.CVDL01		AS BaseCurrencyDesc,
                A.RPCO
			FROM CTE1 A
			' || INNER_DYNAMIC ||N'
				LEFT OUTER JOIN [SCDATA].F0013 AS C		/* Currency Master */
					ON A.RPCRCD = C.CVCRCD
				LEFT OUTER JOIN [SCDATA].F0013 AS D
					ON A.RPBCRC = D.CVCRCD
				LEFT OUTER JOIN (SELECT RUDOC, RUDCT, RUKCO, RUSFX, SUM(RUAG) AS RUAG, RUAN8 FROM [SCDATA].F03B13Z1 WHERE RUEUPS IN ('''', ''E'') GROUP BY RUDOC, RUDCT, RUKCO, RUSFX,RUAN8) AS E	/* ELECTRONIC RECEIPTS INPUT */
					ON  A.RPAN8 = RUAN8				  
					AND A.RPDOC = E.RUDOC
					AND A.RPDCT = E.RUDCT
					AND A.RPKCO = E.RUKCO
					AND A.RPSFX = E.RUSFX 
			GROUP BY A.RPAN8, A.RPKCO, A.RPDCT, A.RPDOC, A.RPDIVJ, A.RPSKCO, A.RPSDCT, A.RPSDOC, A.RPVR01,
				A.RPCRCD, A.RPCRRM, C.CVDL01, A.RPBCRC, D.CVDL01, A.RPCO
		),
		PAGING AS (
			SELECT Invoices.*, ROW_NUMBER() OVER(ORDER BY ' || SORT_DYNAMIC || ') AS RNUM FROM 
			CTE2 Invoices 
            ' || OPENINVOICES_WHERE_DYNAMIC || '
		)
		SELECT 
			PAGING.AddressNumber, PAGING.InvoiceCompany, PAGING.InvoiceType, PAGING.InvoiceNumber, PAGING.InvoiceDate, PAGING.OrderCompany, 
			PAGING.OrderType, PAGING.OrderNumber, PAGING.YourReference, PAGING.CurrencyCode, PAGING.CurrencyMode, PAGING.CurrencyDesc, 
			PAGING.GrossAmount, PAGING.OpenAmount, PAGING.GrossAmountForeign, PAGING.OpenAmountForeign, PAGING.DocumentSuffix, 
			CASE WHEN ? = 1 THEN CASE WHEN DR.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END AS ISORDERRESTRICTED, 
            PAGING.BaseCurrencyCode, PAGING.BaseCurrencyDesc, 
			(SELECT COUNT(1) FROM [SCDATA].FQ670314 B WHERE B.PDDOC = PAGING.InvoiceNumber AND B.PDDCT = PAGING.InvoiceType AND B.PDKCO = PAGING.InvoiceCompany) AS ScheduledPayment,
			(SELECT COUNT(1) FROM PAGING ) AS TotalRowCount
		FROM PAGING
	    LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON  DR.DR$9INID = ?
			AND DR.DR$9CNST = ?
			AND DR.DRKY = PAGING.OrderType
		WHERE (( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? ))';

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
		OPEN TEMP_CURSOR1 USING AddressNumber, InvoiceNumber, JulianDateFrom, JulianDateTo, OrderNumber, ReferenceNumber, SORestric, SOINID, SOConstant,
                                PageIndex, PageSize, RowStart, RowEnd; 
	END;
END;
  

-- #desc					Load the Line Price History from DB
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ComputerID		Computer ID
-- #param JobNumber			Job Number
-- #param ProcessID			Process ID
-- #param TransactionID		Transaction ID
-- #param LineNumber		Line Number
-- #param PriceAdjRevLevel	Current PriceAdjRevLevel to search for(edit Line Value)

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetLinePriceHistoryList
(
	ComputerID	VARCHAR(30),
	JobNumber NUMERIC(15,0),
	ProcessID NUMERIC(15,0),
	TransactionID NUMERIC(15,0),
	LineNumber  NUMERIC(15,0),
	PriceAdjRevLevel NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetLinePriceHistoryList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN

    DECLARE MaxAdjRevLevel NUMERIC(15,0) DEFAULT 0;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR  
	SELECT 
		AWCTID ComputerID ,
		AWJOBS JobNumber ,
		AWPEID ProcessID,
		AWTCID TransactionID,
		AWXLIN LineNumber2,
		AWAREV AdjustmentRevisionLevel,
		AWDOCO OrderNumber,
		AWDCTO OrderType,
		AWKCOO OrderCompany,
		' ' AS OrderSuffix, --AWSFXO
		AWLNID LineNumber,
		--AWAKID PriceHistoryAltKey,
		--AWSRCFD PriceHistoryAltKeySource,
		AWOSEQ SequenceNumber,
		--AWSUBSEQ SubSequenceNum,
		--AWTIER Tier,
		AWASN PriceAdjustmentSchedule,
		AWAST PriceAdjustmentType,
		' ' AS PriceAdjustmentTypeDesc,
		AWITM ShortItemNumber,
		AWAN8 AddressNumber,
		AWCRCD CurrencyCodeFrom,
		AWUOM UnitOfMeasure,
		AWMNQ QuantityMinimum,
		AWLEDG LedgType,
		AWFRMN PriceFormulaName,
		AWBSCD BasisCode,		
		' ' AS BasisCodeDesc,
		AWFVTR FactorValue,
		AWABAS AdjustmentBasedOn,
		AWUPRC UnitPrice,
		AWFUP ForeignUnitPrice,
		AWGLC GlClass,
		AWARSN AdjustmentReasonCode,		
		' ' AS AdjustmentReasonCodeDesc,
		AWACNT AdjustmentControlCode,
		AWSBIF SubledgerInformation,
		AWMDED ManualDiscount,
		AWPROV PriceOverrideCode,
		AWATID PriceAdjustmentKeyID,
		AWLITM LongItemNumber,
		AWAITM AuxItemNumber,
		AWDSC1 ItemDescription1,
		AWLNTY LineType,
		AWUORG UnitsTransactionQty,
		AWFGY FreeGoodsYN,
		AWORPR OrderRepriceCategory,
		AWSO08 SalesOrderStatus,
		AWRPRC RepriceBasketPriceCat,
		AWOLVL OrderLevelAdjustmentYN
		/*AWCATLG FreeGoodCatalogName,
		AWIGID ItemGroupKeyID,
		AWCGID CustomerGroupKeyID,
		AWOGID OrderGroupKeyID,
		AWANPS AddressNumberPriceAdjust,
		AWBSDVAL BasedOnValue,
		AWSRFLAG SlidingRateFlag,
		AWADJCAL AdjustmentCalculation,
		AWNBRORD NumberofOrders,
		AWUOMVID UOMforVolueIncentives,
		AWACCAN8 AccumulateAtAddress,
		AWBNAD BeneficiaryAddress,
		AWADJGRP AdjustmentGroup,
		AWMEADJ MutuallyExclusiveAdjustment,
		AWADJSTS AdjustmentStatus,
		AWADJREF AdjustmentReference,
		AWFVUM FactorValueUM,
		AWPDCL PromotionDisplayControl,
		AWCFGID ConfigurationIDNumber,
		AWCFGCID 
		AWAPRP1 PricingReportCode1,
		AWAPRP2 PricingReportCode2,
		AWAPRP3 PricingReportCode3,
		AWAPRP4 PricingReportCode4,
		AWAPRP5 PricingReportCode5,
		AWAPRP6 PricingReportCode6,
		AWNDPI NetDownPriceIndicator,
		AWRULENAME RuleName,
		AWPA04
		AWPMTN*/
	FROM [SCDATA].F40UI74
	WHERE 
		AWCTID = ComputerID AND 
		AWJOBS = JobNumber AND
		AWPEID = ProcessID AND
		AWTCID = TransactionID AND
		AWLNID = LineNumber AND
		AWAREV = PriceAdjRevLevel
	ORDER BY AWOSEQ ASC
	FOR FETCH ONLY;
	
	SELECT MAX ( AWAREV ) INTO MaxAdjRevLevel
    FROM [SCDATA].F40UI74
    WHERE 
		    AWCTID = ComputerID AND 
		    AWJOBS = JobNumber AND
		    AWPEID = ProcessID AND
		    AWTCID = TransactionID AND
		    AWLNID = LineNumber;

OPEN TEMP_CURSOR1;

END ;
-- #desc					Load Line Serial Number List
-- #bl_class				Premier.Commerce.LineSerialNumbers.cs
-- #db_dependencies			N/A
-- #db_references			N/A

--#param ComputerID		Computer ID
--#param JobNumber			Job Number
--#param ProcessID			Process ID
--#param TransactionID		Transaction ID
--#param LineNumber		Line Number

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetLineSerialNumbers
(
	Company varchar(5),
	OrderType varchar(3),
	OrderNumber NUMERIC(15,0),
	LineNumber NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetLineSerialNumbers 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR  
	SELECT 
		SWITM IdentifierShortItem, 
		SWLITM Identifier2ndItem,
		SWAITM Identifier3rdItem,
		SWDSC1 DescriptionLine1,
		SWDSC2 DescriptionLine2,
		SWDSC3 DescriptionLine3,
		SWMCU  CostCenter,
		SWLOTN Lot,
		SWLOCN Location,
		SWAN8  AddressNumber,
		SWSHAN AddressNumberShipTo, 
		SWKCOO Company,
		SWDOCO OrderNumber,
		SWDCTO OrderType,
		SWSFXO OrderSuffix,
		SWLNID LineNumber,
		SWORDJ DateOrderedJulian,
		SWSHPJ DateShippedJulian,
		SWSRL1 SerialNumber1,
		SWSRL2 SerialNumber2,
		SWVEND PrimaryLastVendorNo, 
		SWWARR TypeWarranty,
		SWWARJ DateWarrantyExpiraJu,
		SWWRLF WarrantyLifeInDays,
		SWWEXP AmtWarrantyExpenditure,
		SWDOCE DocWarrantyExpense,
		SWDCTE OrderTypeWarExpense, 
		SWWREM AmtWarrantyReimbursemt,
		SWDOCW DocWarrantyReimburse,
		SWDCTR OrderTypeWarReimbur, 
		SWSNCD SerialNoStatusCode,
		SWAISL AisleLocation,
		SWBIN  BinLocation
	FROM [SCDATA].F4220
	WHERE 
		SWKCOO = Company AND
		SWDOCO = OrderNumber AND
		SWDCTO = OrderType AND
		SWLNID = LineNumber 
	FOR FETCH ONLY;

OPEN TEMP_CURSOR1;

END ;
-- #desc					Read marketing code 
-- #bl_class				Premier.Commerce.MarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Constant ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetMarketingCode
(
	IN MarketingCode  varchar(30)
)
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetMarketingCode 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TMP_MKTCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
SELECT  
	MK$9MKT MarketingCode, 
	MKMCU  BranchPlant,
	MKDSC1 Description1, 
	MKDSC2 Description2, 
	MKEFTJ EffectiveDate ,  
	MKEXDJ ExpirationDate, 
	MK$9WEB UsageMode
FROM  	
	[SCDATA].FQ674204 
WHERE
	MK$9MKT = MarketingCode
FOR FETCH ONLY;

OPEN TMP_MKTCUR1;
	
CALL [SCLIBRARY].COM_GetMarketingCodeValues (MarketingCode);

END ;
-- #desc				Read marketing code info
-- #bl_class			Premier.Commerce.MarketingCodeInfo.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param MarketingCode	Constant ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetMarketingCodeInfo
(
	MarketingCode  varchar(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetMarketingCodeInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
SELECT  
	A.MK$9MKT MarketingCode, 
	A.MKMCU  BranchPlant,
	A.MKDSC1 Description1, 
	A.MKDSC2 Description2, 
	A.MKEFTJ EffectiveDate ,  
	A.MKEXDJ ExpirationDate, 
	A.MK$9WEB UsageMode,
	(SELECT COUNT(*) FROM [SCDATA].FQ674209 B WHERE B.MK$9MKT = A.MK$9MKT) AS FreightDiscountEnabled
FROM  	
	[SCDATA].FQ674204 A
WHERE
	UPPER(RTRIM(MK$9MKT)) =  UPPER(RTRIM(MarketingCode))
FOR FETCH ONLY;

OPEN TEMP_CURSOR1;
	
END
 ;
-- #desc					Read marketing code list with all filters
-- #bl_class				Premier.Commerce.MarketingCodeList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param MarketingCode		Marketing Code
-- #param Description1		Description 1
-- #param Description2		Description 2
-- #param WebEnabledOnly	if On return only webEnabled Marketing Codes
-- #param ValidateDate		if On Check Marketing Code Valid Dates

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetMarketingCodeList
(
	InstallationID  varchar(3) ,
	MarketingCode   varchar(30),
	Description1    varchar(30),	
	Description2    varchar(30),	
	WebEnabledOnly  varchar(1) ,
	ValidateDate    varchar(1)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetMarketingCodeList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE today INT DEFAULT 0;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	
		MK$9MKT     AS MarketingCode, 
		MKMCU       AS BranchPlant,  
		MKDSC1      AS Description1, 
		MKDSC2      AS Description2, 
		MKEFTJ      AS EffectiveDate,  
		MKEXDJ      AS ExpirationDate, 
		MK$9WEB     AS UsageMode,
		0			AS FreightDiscountEnabled
		-- Marketing Code Header 	
	FROM  	
		[SCDATA].FQ674204 MKHED 
		INNER JOIN [SCDATA].FQ679910 BRANCHSEC
		ON MKHED.MKMCU = BRANCHSEC.BIMCU
	WHERE	
	-- Marketing Code filter	
		(MarketingCode = '*' OR UPPER(LTRIM(RTRIM(MKHED.MK$9MKT))) LIKE '%' || UPPER(LTRIM(RTRIM(MarketingCode))) || '%')
	-- Description filter
	AND (Description1 = '*' OR UPPER(LTRIM(RTRIM(MKHED.MKDSC1))) LIKE '%' || UPPER(LTRIM(RTRIM(Description1))) || '%')
	AND (Description2 = '*' OR UPPER(LTRIM(RTRIM(MKHED.MKDSC2))) LIKE '%' || UPPER(LTRIM(RTRIM(Description2))) || '%')
	-- Branch Plant filter
	AND BRANCHSEC.BI$9INID = InstallationID
	-- Effective and Expiration Date
	AND (ValidateDate = '*' OR (MKHED.MKEFTJ <= today AND MKHED.MKEXDJ >= today))
	-- only WebEnabled
	AND (WebEnabledOnly = '*' OR MKHED.MK$9WEB <> 'N' OR MKHED.MK$9WEB <> 'S')
    ORDER BY MKHED.MK$9MKT
     FOR FETCH ONLY;
     
     --Today in julian format
	IF(ValidateDate IS NOT NULL)THEN
		SET today = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	END IF;
	
	OPEN TEMP_CURSOR1;
END ;
-- #desc				Read marketing restric code list
-- #bl_class			Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param MR$9MKT		Marketing Code

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMKTCodRestricListNotRel   
(
    IN MarketingCode	varchar(30)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetMKTCodRestricListNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE	CodeLength		INTEGER;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT		
			A.DRKY 		AS Code,
			A.DRDL01 	AS Description
	FROM	[SCCTL].F0005 A
	WHERE	
			A.DRSY = '00' 
	AND		A.DRRT = 'DT'
	AND	COALESCE(SUBSTRING(A.DRKY, 10 - CodeLength + 1, CodeLength),'') NOT IN (SELECT	MRDCTO
			      	     FROM	[SCDATA].FQ674210 B
			      	     WHERE 	MR$9MKT = MarketingCode)
						 ORDER BY DRKY
	FOR FETCH ONLY;
	
	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'DT');
						
	OPEN TEMP_CURSOR1;

END ;
-- #desc					Read marketing restric code list
-- #bl_class				Premier.Commerce.MarketingCodeRestricList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code
	
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetMKTCodRestricListRel
(
    IN MarketingCode	varchar(30)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetMKTCodRestricListRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE	CodeLength		INTEGER;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

	SELECT	B.DRKY		AS Code,
			B.DRDL01 	AS Description
	FROM	[SCDATA].FQ674210 A
	INNER JOIN [SCCTL].F0005 B
	ON  B.DRRT = 'DT'
	AND B.DRSY = '00'
	WHERE
		A.MR$9MKT	= MarketingCode AND
		SUBSTRING(B.DRKY, 10 - CodeLength + 1, CodeLength) = A.MRDCTO
	ORDER BY MRDCTO

	FOR FETCH ONLY;
	
	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
						WHERE DTSY = '00' AND DTRT = 'DT');
						
	OPEN TEMP_CURSOR1;

END
	  ;
-- #desc								Load an order shipment confirmation information
-- #bl_class							Premier.Commerce.SalesOrderShipConfInfo.cs
-- #db_dependencies						COM_GetSalesOrderInfo_BillTo, COM_GetSalesOrderShipments, COM_GetSOConfiguredLineList
-- #db_references						N/A

-- #param InstallationID				Installation ID
-- #param OrderCompany					Company ID
-- #param OrderType						Document Type
-- #param OrderNumber					OrderNumber
-- #param PickSlipNumber				Pick Slip Number
-- #param ContainerID					Container ID
-- #param NextStatus					Order Next Status
-- #param RetrieveWebContentInfo		Retrieve Web Content Info
-- #param LangPref						Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetOrderShipConfInfo
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN OrderCompany		GRAPHIC(5) CCSID 13488,
	IN OrderType		GRAPHIC(2) CCSID 13488,
	IN OrderNumber		NUMERIC(8,0),
	IN PickSlipNumber	NUMERIC(8,0),
	IN ContainerID		GRAPHIC(20) CCSID 13488,
	IN NextStatus		GRAPHIC(3) CCSID 13488,
	IN RetrieveWebContentInfo  INT,
	IN LangPref			GRAPHIC(2) CCSID 13488
)
DYNAMIC RESULT SETS 4
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetOrderShipConfInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_ORDERDETAIL
	(
		OrderCompany			GRAPHIC(5) CCSID 13488,
		OrderType				GRAPHIC(2) CCSID 13488,
		OrderNumber				NUMERIC(8,0),
		LineNumber				DECIMAL(6,0),
		TransactionDate			NUMERIC(6,0),
		RequestedDate			NUMERIC(6,0),
		LineType				GRAPHIC(2) CCSID 13488,
		NextStatus				GRAPHIC(3) CCSID 13488,
		LastStatus				GRAPHIC(3) CCSID 13488,
		TaxableYN				GRAPHIC(1) CCSID 13488,     
		TaxArea					GRAPHIC(10) CCSID 13488, 
		TaxExplanationCode		GRAPHIC(2) CCSID 13488,
		InvoiceCompany			GRAPHIC(5) CCSID 13488,
        InvoiceNumber			NUMERIC(8,0),
        InvoiceType				GRAPHIC(2) CCSID 13488,
        ShipToID				NUMERIC(8,0),
        SCShipToNumber			NUMERIC(15,0),
		CostCenter				GRAPHIC(12) CCSID 13488, 
		CostCenterHeader		GRAPHIC(12) CCSID 13488,
		ItemCrossRefNumber		GRAPHIC(25) CCSID 13488,
		Description1			GRAPHIC(30) CCSID 13488,
		Description2			GRAPHIC(30) CCSID 13488,
		QuantityOrdered			DECIMAL(15,0),
		ShippedQuantity			DECIMAL(15,0),
		UnitOfMeasure			GRAPHIC(2) CCSID 13488,
		PricingUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		BackorderedQuantity		DECIMAL(15,0),
		CanceledQuantity		DECIMAL(15,0),
		AmountUnitPrice			DECIMAL(15,0),
		ForeignUnitPrice		DECIMAL(15,0),
		AmountExtPrice			DECIMAL(15,0),
		ForeignExtPrice			DECIMAL(15,0),
		InventoryInterface		GRAPHIC(1) CCSID 13488,
		CarrierID				NUMERIC(8,0),
		CarrierName				GRAPHIC(40) CCSID 13488,
		ModeOfTransportation	GRAPHIC(3) CCSID 13488,
		IdentifierShortItem		NUMERIC(8,0),
		LongItemNumber			GRAPHIC(25) CCSID 13488,
		AuxItemNumber			GRAPHIC(25) CCSID 13488,
		ShipLineNumber			DECIMAL(31,0),
		StockingType			GRAPHIC(1) CCSID 13488,
		RelatedKitItemNo		GRAPHIC(8) CCSID 13488,
		KitMasterLineNo			NUMERIC(6,0),
		ComponentLineNumber		NUMERIC(4,0),
		SalesReportingCode1		GRAPHIC(3) CCSID 13488,
		SalesReportingCode2		GRAPHIC(3) CCSID 13488,
		SalesReportingCode3		GRAPHIC(3) CCSID 13488,
		SalesReportingCode4		GRAPHIC(3) CCSID 13488,
		SalesReportingCode5		GRAPHIC(3) CCSID 13488,
		PriceAdjustmentScheduleN GRAPHIC(8) CCSID 13488,
		ContractNumberDistributi GRAPHIC(12) CCSID 13488,
		PaymentTermsCode		GRAPHIC(3) CCSID 13488,
		PaymentTermsCodeDesc	GRAPHIC(30) CCSID 13488,
		LineOfBusiness			GRAPHIC(3) CCSID 13488,
		EndUse					GRAPHIC(3) CCSID 13488,
		DutyStatus				GRAPHIC(2) CCSID 13488,			
		PriceCode1				GRAPHIC(2) CCSID 13488,			
		PriceCode2				GRAPHIC(2) CCSID 13488,			
		PriceCode3				GRAPHIC(2) CCSID 13488
		
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_ORDERHEADER
	(			
		SCBillToNumber		NUMERIC(15,0),
		SCShipToNumber		NUMERIC(15,0),
		AddressBookType		DECIMAL(10,0),
		DeliveryInst1 		GRAPHIC(30) CCSID 13488,
		DeliveryInst2 		GRAPHIC(30) CCSID 13488,
		CustomerPO			GRAPHIC(25) CCSID 13488,
		OrderCompany		GRAPHIC(5) CCSID 13488,
		OrderType			GRAPHIC(2) CCSID 13488,
		OrderNumber			NUMERIC(8,0),	
		OrderDate 			NUMERIC(6,0),
		RequestedDate		NUMERIC(6,0),
		MarketingCode		GRAPHIC(30) CCSID 13488,
		HoldOrderCode		GRAPHIC(2) CCSID 13488,
		CurrencyCode		GRAPHIC(3) CCSID 13488,
		CurrencyMode		GRAPHIC(1) CCSID 13488,
		CurrencyDesc		GRAPHIC(30) CCSID 13488,
		IsFreightOn         VARCHAR(2)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	 DECLARE GLOBAL TEMPORARY TABLE SESSION.COM_GETSALESORDERSHIPMENTS_A
	(
		OrderCompany			GRAPHIC(5) CCSID 13488,
		OrderType				GRAPHIC(2) CCSID 13488,
		OrderNumber				NUMERIC(8,0),
		CostCenter				GRAPHIC(12) CCSID 13488, 
		ShipLineNumber			DECIMAL(31,0),
		SCShipToNumber			NUMERIC(15,0),
		LineType				GRAPHIC(2) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	BEGIN
		DECLARE ScBillTo			NUMERIC(15,0);
		DECLARE ScShipTo			NUMERIC(15,0);
		DECLARE	AddressType			DECIMAL(10,0);
		DECLARE	ContactID			DECIMAL(5,0);

		DECLARE Freight				INT;
		DECLARE IsOverrideShipTo	INT;
		DECLARE TempInstallation	GRAPHIC(3) CCSID 13488;
	
		DECLARE CustCrossRefType	GRAPHIC(2) CCSID 13488;	
		DECLARE FreightLn			GRAPHIC(2) CCSID 13488;
		DECLARE TrackingLn			GRAPHIC(2) CCSID 13488;
		DECLARE CurrentJulianDate	NUMERIC(6,0);

		/*Get Shipto Number and Branch Plant from Sales Order Detail by Pickslip Number or Container ID*/
		DECLARE ShipToSHAN	NUMERIC(15,0);
		DECLARE ShiptoMCU	GRAPHIC(12) CCSID 13488;
	
		BEGIN
		
			SET TempInstallation = InstallationID;
			CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', TempInstallation, CustCrossRefType);
    
			SET TempInstallation = InstallationID;
			CALL [SCLIBRARY].CMM_GetConstantValue ('FREIGHTLN', TempInstallation, FreightLn);

			SET TempInstallation = InstallationID;
			CALL [SCLIBRARY].CMM_GetConstantValue ('TRACKINGLN', TempInstallation, TrackingLn);
		
			SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
    
			/*Load Address Book Type Variable From Order Header*/
			SELECT COALESCE(B.SH$9TYP,0), COALESCE(B.SHIDLN,0) INTO AddressType, ContactID
			FROM	[SCDATA].FQ674201 B
			WHERE	B.SHDOCO = OrderNumber
				AND	B.SHDCTO = OrderType
				AND	B.SHKCOO = OrderCompany
			FETCH FIRST 1 ROWS ONLY;

			IF AddressType is null	THEN
				SET AddressType =0;
				SET ContactID =0;
			END IF;

			SELECT CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END, A.SDMCU INTO ShipToSHAN, ShiptoMCU 
			FROM [SCDATA].F4211 A
			LEFT OUTER JOIN [SCDATA].FQ674211 B
				ON 	B.SDKCOO = A.SDKCOO
				AND B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO
				AND B.SDLNID = A.SDLNID
			WHERE A.SDDOCO = OrderNumber
				AND	A.SDDCTO = OrderType
				AND	A.SDKCOO = OrderCompany
				AND A.SDCNDJ = 0 
				AND ((PickSlipNumber IS NOT NULL AND A.SDPSN = PickSlipNumber) OR (ContainerID <> '*' AND A.SDCNID = ContainerID))
			FETCH FIRST 1 ROWS ONLY;
		
			/*LOAD ORDER DETAIL TEMPORARY TABLE*/
			INSERT INTO SESSION.TMP_ORDERDETAIL
			SELECT	DISTINCT			
				A.SDKCOO				AS OrderCompany,
				A.SDDCTO				AS OrderType,
				A.SDDOCO				AS OrderNumber,
				A.SDLNID				AS LineNumber,
				A.SDTRDJ				AS TransactionDate,
				A.SDDRQJ				AS RequestedDate,
				A.SDLNTY				AS LineType,
				A.SDNXTR				AS NextStatus,
				A.SDLTTR				AS LastStatus,
				A.SDTAX1				AS TaxableYN,
				A.SDTXA1				AS TaxArea,
				A.SDEXR1				AS TaxExplanationCode,
				A.SDKCO					AS InvoiceCompany,
				A.SDDOC					AS InvoiceNumber,
				A.SDDCT					AS InvoiceType,
				A.SDSHAN				AS ShipToID,
				CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
				A.SDMCU					AS CostCenter, 
				A.SDEMCU				AS CostCenterHeader,
				COALESCE(S.IVCITM,' ')	AS ItemCrossRefNumber,
				A.SDDSC1				AS Description1,
				A.SDDSC2				AS Description2,
				A.SDUORG				AS ShippingQuantity,
				A.SDSOQS				AS ShippedQuantity,
				A.SDUOM					AS UnitOfMeasure,
				A.SDUOM4				AS PricingUnitOfMeasure,
				A.SDSOBK				AS BackorderedQuantity,
				A.SDSOCN				AS CanceledQuantity,
				A.SDUPRC				AS AmountUnitPrice,
				A.SDFUP					AS ForeignUnitPrice,
				A.SDAEXP				AS AmountExtPrice,
				A.SDFEA					AS ForeignExtPrice,
				COALESCE(T.LFIVI,' ')	AS InventoryInterface,
				A.SDCARS				AS CarrierID,
				R.ABALPH				AS CarrierName,
				A.SDMOT					AS ModeOfTransportation,
				A.SDITM					AS IdentifierShortItem,			
				A.SDLITM				AS LongItemNumber,
				A.SDAITM				AS AuxItemNumber,			
				COALESCE(B.SD$9SLN,0)	AS ShipLineNumber,			
				IM.IMSTKT				AS StockingType,
				A.SDRLIT				AS RelatedKitItemNo,
				A.SDKTLN				AS KitMasterLineNo,
				A.SDCPNT				AS ComponentLineNumber,									
				A.SDSRP1				AS SalesReportingCode1,
				A.SDSRP2				AS SalesReportingCode2,
				A.SDSRP3				AS SalesReportingCode3,
				A.SDSRP4				AS SalesReportingCode4,
				A.SDSRP5				AS SalesReportingCode5,
				A.SDASN					AS PriceAdjustmentScheduleN,
				A.SDDMCT				AS ContractNumberDistributi,
				A.SDPTC					AS PaymentTermsCode,
				C.PNPTD					AS PaymentTermsCodeDesc,
				A.SDLOB					AS LineOfBusiness,
				A.SDEUSE				AS EndUse,
				A.SDDTYS				AS DutyStatus,			
				A.SDUPC1				AS PriceCode1,
				A.SDUPC2				AS PriceCode2,
				A.SDUPC3				AS PriceCode3		
			FROM	[SCDATA].F4211 A		/*Standard Sales  OrderDetail*/
			LEFT OUTER JOIN [SCDATA].FQ674211 B
				ON 	B.SDKCOO = A.SDKCOO
				AND B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO
				AND B.SDLNID = A.SDLNID
			LEFT OUTER JOIN [SCDATA].F4104	S /*Item Cross Ref*/
				ON  AddressType = 0		/*Not join if AdrressType = 1 - Consumer*/
				AND	S.IVAN8  = A.SDAN8
				AND S.IVITM  = A.SDITM
				AND S.IVXRT = CustCrossRefType
				AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
			LEFT OUTER JOIN [SCDATA].F0014 C /*Payment Terms Code Description*/
				ON C.PNPTC = A.SDPTC
			INNER JOIN [SCDATA].F40205	T /*Line Type*/
				ON T.LFLNTY = A.SDLNTY
			LEFT OUTER JOIN [SCDATA].F0101		R /*Carrier Name*/
				ON R.ABAN8 = A.SDCARS
			LEFT OUTER JOIN [SCDATA].F4101 IM /*Item Master*/
				ON IM.IMITM = A.SDITM
			WHERE	A.SDDOCO = OrderNumber
			AND		A.SDDCTO = OrderType
			AND		A.SDKCOO = OrderCompany		
			AND A.SDCNDJ = 0 /*Discard canceled lines*/
			AND (
				(PickSlipNumber IS NOT NULL AND A.SDPSN = PickSlipNumber)
				OR (ContainerID <> '*' AND A.SDCNID = ContainerID)
				OR (A.SDPSN = 0 AND A.SDCNID = '' AND A.SDNXTR = NextStatus AND A.SDLNTY IN (FreightLn, TrackingLn) AND (CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END) = ShipToSHAN AND A.SDMCU = ShiptoMCU) 		
				)
			UNION ALL
			SELECT	DISTINCT
				A.SDKCOO				AS OrderCompany,
				A.SDDCTO				AS OrderType,
				A.SDDOCO				AS OrderNumber,
				A.SDLNID				AS LineNumber,
				A.SDTRDJ				AS TransactionDate,
				A.SDDRQJ				AS RequestedDate,
				A.SDLNTY				AS LineType,
				A.SDNXTR				AS NextStatus,
				A.SDLTTR				AS LastStatus,
				A.SDTAX1				AS TaxableYN,
				A.SDTXA1				AS TaxArea,
				A.SDEXR1				AS TaxExplanationCode,
				A.SDKCO					AS InvoiceCompany,
				A.SDDOC					AS InvoiceNumber,
				A.SDDCT					AS InvoiceType,
				A.SDSHAN				AS ShipToID,
				CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
				A.SDMCU					AS CostCenter, 
				A.SDEMCU				AS CostCenterHeader,
				COALESCE(S.IVCITM,' ')	AS ItemCrossRefNumber,
				A.SDDSC1				AS Description1,
				A.SDDSC2				AS Description2,
				A.SDUORG				AS ShippingQuantity,
				A.SDSOQS				AS ShippedQuantity,
				A.SDUOM					AS UnitOfMeasure,
				A.SDUOM4				AS PricingUnitOfMeasure,
				A.SDSOBK				AS BackorderedQuantity,
				A.SDSOCN				AS CanceledQuantity,
				A.SDUPRC				AS AmountUnitPrice,
				A.SDFUP					AS ForeignUnitPrice,
				A.SDAEXP				AS AmountExtPrice,
				A.SDFEA					AS ForeignExtPrice,
				COALESCE(T.LFIVI,' ')	AS InventoryInterface,
				A.SDCARS				AS CarrierID,
				R.ABALPH				AS CarrierName,
				A.SDMOT					AS ModeOfTransportation,
				A.SDITM					AS IdentifierShortItem,			
				A.SDLITM				AS LongItemNumber,
				A.SDAITM				AS AuxItemNumber,			
				COALESCE(B.SD$9SLN,0)	AS ShipLineNumber,			
				IM.IMSTKT				AS StockingType,
				A.SDRLIT				AS RelatedKitItemNo,
				A.SDKTLN				AS KitMasterLineNo,
				A.SDCPNT				AS ComponentLineNumber,									
				A.SDSRP1				AS SalesReportingCode1,
				A.SDSRP2				AS SalesReportingCode2,
				A.SDSRP3				AS SalesReportingCode3,
				A.SDSRP4				AS SalesReportingCode4,
				A.SDSRP5				AS SalesReportingCode5,
				A.SDASN					AS PriceAdjustmentScheduleN,
				A.SDDMCT				AS ContractNumberDistributi,
				A.SDPTC					AS PaymentTermsCode,
				C.PNPTD					AS PaymentTermsCodeDesc,
				A.SDLOB					AS LineOfBusiness,
				A.SDEUSE				AS EndUse,
				A.SDDTYS				AS DutyStatus,			
				A.SDUPC1				AS PriceCode1,
				A.SDUPC2				AS PriceCode2,
				A.SDUPC3				AS PriceCode3
			FROM [SCDATA].F42119 A    	
			LEFT OUTER JOIN [SCDATA].FQ674211 B 
				ON 	A.SDDOCO = B.SDDOCO 
				AND A.SDDCTO = B.SDDCTO
				AND A.SDKCOO = B.SDKCOO
				AND A.SDLNID = B.SDLNID
			LEFT OUTER JOIN [SCDATA].F4104	S /*Item Cross Ref*/
				ON  S.IVAN8  = A.SDAN8
				AND S.IVITM  = A.SDITM
				AND AddressType = 0		/*Not join if AdrressType = 1 - Consumer  */
				AND S.IVXRT = CustCrossRefType
				AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
			LEFT OUTER JOIN [SCDATA].F0014 C /*Payment Terms Code Description*/
				ON C.PNPTC = A.SDPTC
			LEFT OUTER JOIN [SCDATA].F40205	T /*Line Type*/
				ON T.LFLNTY = A.SDLNTY
			LEFT OUTER JOIN [SCDATA].F0101		R /*Carrier Name*/
				ON R.ABAN8 = A.SDCARS
			LEFT OUTER JOIN [SCDATA].F4101 IM /*Item Master*/
				ON IM.IMITM = A.SDITM
			WHERE	A.SDDOCO = OrderNumber
			AND		A.SDDCTO = OrderType
			AND		A.SDKCOO = OrderCompany			
			AND A.SDCNDJ = 0 
			AND	(
				(PickSlipNumber IS NOT NULL AND A.SDPSN = PickSlipNumber)
				OR (ContainerID <> '*' AND A.SDCNID = ContainerID)
				OR (A.SDPSN = 0 AND A.SDCNID = '' AND A.SDNXTR = NextStatus AND A.SDLNTY IN (FreightLn, TrackingLn) AND (CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END)=ShipToSHAN AND A.SDMCU = ShiptoMCU) 
				);
	
			/*LOAD ORDER HEADER TEMPORARY TABLE*/
			INSERT INTO SESSION.TMP_ORDERHEADER
			SELECT	DISTINCT
					CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
					CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
					COALESCE(B.SH$9TYP,0)			AS AddressBookType,
					A.SHDEL1 AS DeliveryInst1, 
					A.SHDEL2 AS DeliveryInst2,
					A.SHVR01 AS CustomerPO,
					A.SHKCOO AS OrderCompany,
					A.SHDCTO AS OrderType,
					A.SHDOCO AS OrderNumber,
					A.SHTRDJ AS OrderDate,
					A.SHDRQJ AS RequestedDate,
					COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
					A.SHHOLD AS HoldOrderCode,
					A.SHCRCD AS CurrencyCode,
					A.SHCRRM AS CurrencyMode,
					C.CVDL01 AS CurrencyDesc,
					'Y'		 AS IsFreightOn
			FROM	[SCDATA].F4201 A 
			LEFT OUTER JOIN [SCDATA].FQ674201 B 
					ON	A.SHDOCO = B.SHDOCO 
					AND A.SHDCTO = B.SHDCTO
					AND A.SHKCOO = B.SHKCOO 
			LEFT OUTER JOIN  [SCDATA].F0013 C
					ON A.SHCRCD = C.CVCRCD
			WHERE	A.SHDOCO = OrderNumber
			AND		A.SHDCTO = OrderType
			AND		A.SHKCOO = OrderCompany
			UNION ALL
			SELECT	DISTINCT
					CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
					CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
					COALESCE(B.SH$9TYP,0)			AS AddressBookType,
					A.SHDEL1 AS DeliveryInst1, 
					A.SHDEL2 AS DeliveryInst2,
					A.SHVR01 AS CustomerPO,
					A.SHKCOO AS OrderCompany,
					A.SHDCTO AS OrderType,
					A.SHDOCO AS OrderNumber,
					A.SHTRDJ AS OrderDate,
					A.SHDRQJ AS RequestedDate,
					COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
					A.SHHOLD AS HoldOrderCode,
					A.SHCRCD AS CurrencyCode,
					A.SHCRRM AS CurrencyMode,
					C.CVDL01 AS CurrencyDesc,
					'Y'      AS IsFreightOn
			FROM 	[SCDATA].F42019 A 
			LEFT OUTER JOIN [SCDATA].FQ674201 B 
					ON	A.SHDOCO = B.SHDOCO
					AND A.SHDCTO = B.SHDCTO
					AND A.SHKCOO = B.SHKCOO
			LEFT OUTER JOIN [SCDATA].F0013 C
					ON A.SHCRCD = C.CVCRCD
			WHERE	A.SHDOCO = OrderNumber	
			AND		A.SHDCTO = OrderType
			AND		A.SHKCOO = OrderCompany;	

			/* Update the field IsFreightOn  when is FREIGHT OFF*/	
			SELECT COUNT(1) into Freight  FROM [SCDATA].FQ67496 WHERE FRKCOO = OrderCompany AND FRDCTO = OrderType AND FRDOCO = OrderNumber;
			IF(Freight = 0) THEN /* When the ship line Number is 0 the order is freight OFF*/	
				UPDATE SESSION.TMP_ORDERHEADER SET IsFreightOn = 'N';
			END IF;
	
			/*Load BillTo Variables From Order Header*/
			SELECT  SCBillToNumber, SCShipToNumber, AddressBookType INTO ScBillTo, ScShipTo, AddressType 
			FROM SESSION.TMP_ORDERHEADER 
			FETCH FIRST 1 ROWS ONLY;
	
			BEGIN

				/********************************Header*********************************/
				DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
					SELECT 		
						A.SCBillToNumber,
						A.SCShipToNumber,
						A.AddressBookType,
						A.DeliveryInst1, 
						A.DeliveryInst2,
						A.CustomerPO,
						A.OrderCompany,
						A.OrderType,
						A.OrderNumber,
						A.OrderDate,
						A.RequestedDate,
						A.MarketingCode,
						A.HoldOrderCode,
						A.CurrencyCode,
						A.CurrencyMode,
						A.CurrencyDesc,
						A.IsFreightOn,
						COALESCE(COALESCE(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
					FROM SESSION.TMP_ORDERHEADER  A
					LEFT OUTER JOIN [SCDATA].F4201TX Tax
						ON Tax.STDOCO = A.OrderNumber 
						AND Tax.STDCTO = A.OrderType
						AND Tax.STKCOO = A.OrderCompany 
					LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
						ON TxHistory.STDOCO = A.OrderNumber 
						AND TxHistory.STDCTO = A.OrderType
						AND TxHistory.STKCOO = A.OrderCompany
				FOR FETCH ONLY;	

				DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
					SELECT
						A.OrderCompany,
						A.OrderType,
						A.OrderNumber,
						A.LineNumber,
						A.TransactionDate,
						A.RequestedDate,
						A.LineType,
						A.NextStatus,
						A.LastStatus,
						A.TaxableYN,
						A.TaxArea,
						A.TaxExplanationCode,
						A.InvoiceCompany,
						A.InvoiceNumber,
						A.InvoiceType,
						A.ShipToID,
						A.SCShipToNumber,
						A.CostCenter, 
						A.CostCenterHeader,
						A.ItemCrossRefNumber,
						COALESCE(ContenDesc.DESC1, A.Description1)	AS Description1,
						COALESCE(ContenDesc.DESC2, A.Description2)	AS Description2,		
						A.QuantityOrdered,
						A.ShippedQuantity,
						A.UnitOfMeasure,
						A.PricingUnitOfMeasure,
						A.BackorderedQuantity,
						A.CanceledQuantity,
						A.AmountUnitPrice,
						A.ForeignUnitPrice,
						A.AmountExtPrice,
						A.ForeignExtPrice,
						A.InventoryInterface,
						A.CarrierID,
						A.CarrierName,
						A.ModeOfTransportation,
						A.IdentifierShortItem,
						A.LongItemNumber,
						A.AuxItemNumber,						
						A.ShipLineNumber,
						A.StockingType,
						A.RelatedKitItemNo,
						A.KitMasterLineNo,
						A.ComponentLineNumber,								
						A.SalesReportingCode1,
						A.SalesReportingCode2,
						A.SalesReportingCode3,
						A.SalesReportingCode4,
						A.SalesReportingCode5,
						A.PriceAdjustmentScheduleN,
						A.ContractNumberDistributi,
						A.PaymentTermsCode,
						A.PaymentTermsCodeDesc,
						A.LineOfBusiness,
						A.EndUse,
						A.DutyStatus,		
						A.PriceCode1,
						A.PriceCode2,
						A.PriceCode3,			
						COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
						COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
						COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
						COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
						COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
						COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
						COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
						COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount
					FROM SESSION.TMP_ORDERDETAIL   A
					LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.IdentifierShortItem, LangPref , 0 ) ) AS ContenDesc
						ON ContenDesc.DESCITM = A.IdentifierShortItem
					LEFT OUTER JOIN [SCDATA].F4211TX Tax
						ON Tax.DTDOCO = A.OrderNumber 
						AND Tax.DTDCTO = A.OrderType
						AND Tax.DTKCOO = A.OrderCompany 
						AND Tax.DTLNID = A.LineNumber 
					LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
						ON TxHistory.DTDOCO = A.OrderNumber 
						AND TxHistory.DTDCTO = A.OrderType
						AND TxHistory.DTKCOO = A.OrderCompany 
						AND TxHistory.DTLNID = A.LineNumber
				ORDER BY A.LineNumber ASC
				FOR FETCH ONLY;

				DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
					SELECT
						A.OrderCompany,
						A.OrderType,
						A.OrderNumber,
						A.LineNumber,
						A.TransactionDate,
						A.RequestedDate,
						A.LineType,
						A.NextStatus,
						A.LastStatus,
						A.TaxableYN,
						A.TaxArea,
						A.TaxExplanationCode,
						A.InvoiceCompany,
						A.InvoiceNumber,
						A.InvoiceType,
						A.ShipToID,
						A.SCShipToNumber,
						A.CostCenter, 
						A.CostCenterHeader,
						A.ItemCrossRefNumber,
						A.Description1	AS Description1, /* Retrieve Description 1 for Tracking lines */
						A.Description2	AS Description2,		
						A.QuantityOrdered,
						A.ShippedQuantity,
						A.UnitOfMeasure,
						A.PricingUnitOfMeasure,
						A.BackorderedQuantity,
						A.CanceledQuantity,
						A.AmountUnitPrice,
						A.ForeignUnitPrice,
						A.AmountExtPrice,
						A.ForeignExtPrice,
						A.InventoryInterface,
						A.CarrierID,
						A.CarrierName,
						A.ModeOfTransportation,
						A.IdentifierShortItem,
						A.LongItemNumber,
						A.AuxItemNumber,						
						A.ShipLineNumber,
						A.StockingType,
						A.RelatedKitItemNo,
						A.KitMasterLineNo,
						A.ComponentLineNumber,								
						A.SalesReportingCode1,
						A.SalesReportingCode2,
						A.SalesReportingCode3,
						A.SalesReportingCode4,
						A.SalesReportingCode5,
						A.PriceAdjustmentScheduleN,
						A.ContractNumberDistributi,
						A.PaymentTermsCode,
						A.PaymentTermsCodeDesc,
						A.LineOfBusiness,
						A.EndUse,
						A.DutyStatus,		
						A.PriceCode1,
						A.PriceCode2,
						A.PriceCode3,			
						COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
						COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
						COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
						COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
						COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
						COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
						COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
						COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount
					FROM SESSION.TMP_ORDERDETAIL   A

					LEFT OUTER JOIN [SCDATA].F4211TX Tax
						ON Tax.DTDOCO = A.OrderNumber 
						AND Tax.DTDCTO = A.OrderType
						AND Tax.DTKCOO = A.OrderCompany 
						AND Tax.DTLNID = A.LineNumber 
					LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
						ON TxHistory.DTDOCO = A.OrderNumber 
						AND TxHistory.DTDCTO = A.OrderType
						AND TxHistory.DTKCOO = A.OrderCompany 
						AND TxHistory.DTLNID = A.LineNumber
				ORDER BY A.LineNumber ASC
				FOR FETCH ONLY;


				OPEN TEMP_CURSOR1;	/*HEADER*/
				CALL [SCLIBRARY].COM_GetSalesOrderInfo_BillTo (OrderCompany,OrderType,OrderNumber,ScBillTo,AddressType,ContactID);

				SELECT COUNT(1) INTO IsOverrideShipTo 
				FROM [SCDATA].F4006
				WHERE OADOCO = OrderNumber			
					AND OADCTO = OrderType
					AND OAKCOO = OrderCompany 
					AND OAANTY = 2; 
		
				IF (IsOverrideShipTo > 0) THEN
					UPDATE SESSION.TMP_ORDERDETAIL
					SET SCShipToNumber = ScShipTo, ShipLineNumber =1;
				END IF;
	
				INSERT INTO	SESSION.COM_GetSalesOrderShipments_A	
				SELECT DISTINCT
					A.OrderCompany,
					A.OrderType,
					A.OrderNumber,
					A.CostCenter, 
					A.ShipLineNumber,
					A.SCShipToNumber,
					A.LineType
				FROM SESSION.TMP_ORDERDETAIL  A;
				CALL [SCLIBRARY].COM_GetSalesOrderShipments(InstallationID, OrderCompany, OrderType, OrderNumber, ScShipTo, AddressType, Freight, IsOverrideShipTo);
					
				IF(RetrieveWebContentInfo = 1) THEN
					OPEN TEMP_CURSOR2;	/*DETAIL*/
				ELSE
					OPEN TEMP_CURSOR3;/*DETAIL*/
				END IF;	

				/*Configured Items*/
				CALL [SCLIBRARY].COM_GetSOConfiguredLineList(OrderCompany, OrderType, OrderNumber, LangPref);
			END;
		END;
	END;
END ;
-- #desc						Get the Return Order Original Information
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ReturnNumber			Return Number
-- #param ReturnType			Return Type
-- #param ReturnCompany			Return Company

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetOriginalOrderInfoFnc
( 
	ReturnNumber		NUMERIC(8, 0),
	ReturnType			GRAPHIC(2) CCSID 13488,
	ReturnCompany		GRAPHIC(5) CCSID 13488
) 
RETURNS TABLE 
(
	SDDOCO NUMERIC(8, 0),
	SDDCTO GRAPHIC(2) CCSID 13488,
	SDKCOO GRAPHIC(5) CCSID 13488,
	SDOKCO GRAPHIC(5) CCSID 13488,
	SDOORN GRAPHIC(8) CCSID 13488,
	SDOCTO GRAPHIC(2) CCSID 13488
) 
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetOriginalOrderInfoFnc
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT 
RETURN 
	WITH CTE AS ( 
		SELECT 
			A.SDDOCO,
			A.SDDCTO,
			A.SDKCOO,
			A.SDOKCO,
			A.SDOORN,
			A.SDOCTO
		FROM [SCDATA].F4211 A
		WHERE A.SDDOCO = ReturnNumber
			AND A.SDDCTO = ReturnType
			AND A.SDKCOO = ReturnCompany	 
		UNION ALL 
		SELECT 
			A.SDDOCO,
			A.SDDCTO,
			A.SDKCOO,
			A.SDOKCO,
			A.SDOORN,
			A.SDOCTO
		FROM [SCDATA].F42119 A
		WHERE A.SDDOCO = ReturnNumber
			AND A.SDDCTO = ReturnType
			AND A.SDKCOO = ReturnCompany
	) 
	SELECT
		A.SDDOCO,
		A.SDDCTO,
		A.SDKCOO,
		A.SDOKCO,
		A.SDOORN,
		A.SDOCTO
	FROM CTE A
	FETCH FIRST 1 ROW ONLY;
-- #desc					Read P4210 Version Rule Det MCU Not Related
-- #bl_class				Premier.CommerceP4210VersRuleDetMCUNotRel.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleID			Rule ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetP4210VerRulDtMCUNotRel
(
    IN InstallationID	VARCHAR(3),
	IN RuleID			NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetP4210VerRulDtMCUNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT DISTINCT
		A.ABMCU		BranchPlant,
		B.MCDL01	Description
	FROM [SCDATA].F0101 A
	INNER JOIN [SCDATA].F0006 B
		ON B.MCMCU = A.ABMCU
	WHERE
		A.ABMCU NOT IN (SELECT DISTINCT RDMCU FROM [SCDATA].FQ674231 WHERE RD$9INID = InstallationID AND RDUKID = RuleID)
	UNION
	SELECT DISTINCT
		A.PRMCU		BranchPlant,
		B.MCDL01	Description
	FROM [SCDATA].FQ670302 A
	INNER JOIN [SCDATA].F0006 B
		ON B.MCMCU = A.PRMCU
	WHERE
		A.PRMCU NOT IN (SELECT DISTINCT RDMCU FROM [SCDATA].FQ674231 WHERE RD$9INID = InstallationID AND RDUKID = RuleID)
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;
END ;
-- #desc						Read P4210 Version Det UDC Not Related
-- #bl_class					Premier.CommerceP4210VersRuleDetUDCNotRel.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param RuleID				Rule ID
-- #param ProductCode			Product Code
-- #param UserDefinedCode		User Defined Code

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetP4210VerRulDtUDCNotRel
(
	IN InstallationID		VARCHAR(3),
	IN RuleID				NUMERIC(15,0),
	IN ProductCode			VARCHAR(4),
	IN UserDefinedCode		VARCHAR(2)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetP4210VerRulDtUDCNotRel 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN
	DECLARE	CodeLength INTEGER;

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		SUBSTRING (A.DRKY,10 - CodeLength + 1 ,CodeLength) AS UserDefinedKey,
		A.DRDL01	AS Description
	FROM
		[SCCTL].F0005 A
	WHERE
		LTRIM(RTRIM(A.DRSY)) <> '*' AND
		A.DRSY = ProductCode AND
		A.DRRT = UserDefinedCode AND
		SUBSTRING(A.DRKY, 10 - CodeLength + 1, CodeLength) NOT IN (SELECT DISTINCT COALESCE(RDKY,'')
						  FROM	 [SCDATA].FQ674231
						  WHERE
								RD$9INID = InstallationID AND
								RDUKID = RuleID)
	FOR FETCH ONLY;
	-- Get Code Length
	SET CodeLength = 0;
	SET CodeLength = (SELECT DTCDL FROM [SCCTL].F0004
	  WHERE DTSY = ProductCode AND DTRT = UserDefinedCode);
	  
	OPEN TEMP_CURSOR1;

END ;
-- #desc					Read P4210 Version Rule Header 
-- #bl_class				Premier.CommerceP4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param ProductCode		ProductCode
-- #param UserDefinedCode	UserDefinedCode


CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetP4210VersRuleHeader
(
	IN InstallationID		VARCHAR(3),
	IN RuleUniqueID			NUMERIC(15,0),
	IN RuleType				VARCHAR(2),
	IN CategoryCode			VARCHAR(2)
)

DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetP4210VersRuleHeader 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE ProductCode		VARCHAR(4);
	DECLARE UserDefinedCode	VARCHAR(2);
	
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		RH$9INID	InstallationID,
		RHUKID		RuleUniqueID,
		RHDSC1		Description,
		RHVER		P4210Version,
		RHSEQ		Hierarchy,
		RHRUDTP		RuleType,
		RHRT		CategoryCode
	FROM
		[SCDATA].FQ674230
	WHERE
		RH$9INID =  InstallationID AND
		RHUKID	=  RuleUniqueID
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2;
	
	IF (RuleType = 'PG')
	THEN
		SET ProductCode = '40';
		SET UserDefinedCode = 'PC';
	ELSEIF (RuleType = 'AS')
	THEN
		SET ProductCode = '40';
		SET UserDefinedCode = 'AS';
	ELSEIF (RuleType = 'ST')
	THEN
		SET ProductCode = '00';
		SET UserDefinedCode = 'S';
	ELSEIF (RuleType = 'CN')
	THEN
		SET ProductCode = '00';
		SET UserDefinedCode = 'CN';
	ELSEIF (RuleType = 'AC')
	THEN
		SET ProductCode = '01';
		SET UserDefinedCode = CategoryCode;
	ELSEIF (RuleType = 'CC')
	THEN
		SET ProductCode = '59';
		SET UserDefinedCode = CategoryCode;
	END IF;

	CALL [SCLIBRARY].COM_GetP4210VersRuleDetails(InstallationID, RuleUniqueID, ProductCode, UserDefinedCode);
	
END
	  ;
-- #desc					Read P4210 Version Rule Header 
-- #bl_class				Premier.Commerce.P4210VersRuleHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetP4210VersRuleHeaderList
(
	IN InstallationID  VARCHAR(3)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetP4210VersRuleHeaderList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		RH$9INID	InstallationID,
		RHUKID		RuleUniqueID,
		RHDSC1		Description,
		RHVER		P4210Version,
		RHSEQ		Hierarchy,
		RHRUDTP		RuleType,
		RHRT		CategoryCode
	FROM
		[SCDATA].FQ674230
	WHERE
		RH$9INID = InstallationID
	ORDER BY RHSEQ
FOR FETCH ONLY;

OPEN TEMP_CURSOR1;

END ;
-- #desc				Read Payment Instrument
-- #bl_class			N/A
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetPaymentInstrumentList 

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetPaymentInstrumentList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TEMP_TABLE
	(
		RYRYIN	VARCHAR(1)
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			A.RYRYIN		AS PaymentInstrument,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',A.RYRYIN,'*') AS Description
		FROM
			SESSION.TEMP_TABLE A
		ORDER BY RYRYIN DESC
		FOR FETCH ONLY;
		
		INSERT INTO SESSION.TEMP_TABLE
		SELECT	
			RYRYIN
		FROM	
			[SCDATA].FQ67RYIN;
		
		

		OPEN TEMP_CURSOR1;
	END;
END
 ;
-- #desc					N/A
-- #bl_class				Premier.Commerce.ProfilePurchaseList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param Company			Company
-- #param InstallationID	Installation Id
-- #param AddressBookType	Address Book Type
-- #param AddressNumber		Address Number
-- #param LastDays			Last Days filter
  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetProfilePurchaseList 
( 
	IN COMPANY			GRAPHIC (5) CCSID 13488 , 
	IN INSTALLATIONID	GRAPHIC (3) CCSID 13488 , 
	IN ADDRESSBOOKTYPE	DECIMAL(10, 0) , 
	IN ADDRESSNUMBER	NUMERIC(15, 0) , 
	IN LASTDAYS			INT 
) 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetProfilePurchaseList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	 
	DECLARE SORDERRESTRIC	     GRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE SORDERINID		     GRAPHIC ( 3 ) CCSID 13488 ; 
	DECLARE SORDERCONSTANT	     GRAPHIC ( 10 ) CCSID 13488; 
	DECLARE COMPANYCONSTANT	     GRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE CONSTANTINSTALLATION GRAPHIC ( 3 ) CCSID 13488 ; 
	DECLARE FOREIGNCONSTANT		VARGRAPHIC ( 5 ) CCSID 13488 ; 
	DECLARE FOREIGNINSTALLATION	GRAPHIC ( 3 ) CCSID 13488  ; 
  
	DECLARE TODATE NUMERIC(6,0) ; 
	DECLARE FROMDATE NUMERIC (6,0) ; 
  
	/* Gets the Sales Order Document Restrictions	*/ 
	SET SORDERCONSTANT = 'SO_RESTRIC' ; 
	SET SORDERINID = INSTALLATIONID ; 
	SET CONSTANTINSTALLATION = INSTALLATIONID ; 
	SET FOREIGNINSTALLATION = INSTALLATIONID ; 
  
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( SORDERCONSTANT , SORDERINID , SORDERRESTRIC ) ; 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'INSCOMPANY' , CONSTANTINSTALLATION , COMPANYCONSTANT ) ;	 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'FOREGCURYN' , FOREIGNINSTALLATION , FOREIGNCONSTANT ) ; 
  
	SET TODATE = SCLIBRARY . CMM_GETCURRENTJULIANDATE ( CURRENT_DATE ) ; 
	SET FROMDATE = SCLIBRARY . CMM_GETCURRENTJULIANDATE ( CURRENT_DATE - ( LASTDAYS - 1 ) DAYS ) ;	 
  
	IF ( COMPANY = '00000' ) THEN 
		SET COMPANY = '*' ; 
	END IF ; 
  
	 -- Define the table to do the filtering 
	BEGIN 
  
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE4201 AS (
			SELECT 
				SHTRDJ	AS ORDERDATE , 
				( CASE WHEN A . SHCRRM = 'D' OR FOREIGNCONSTANT = 'N' THEN SUM ( A . SHOTOT ) 
					ELSE SUM ( A . SHFAP ) END ) AS PRODUCTTOTAL , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' THEN B . CCCRCD 
					ELSE A . SHCRCD END ) AS CURRENCYCODE,
                A.SHCO , 
				A.SHDCTO 
			FROM [SCDATA] . F4201 A	/* Sales Order Header */		 
			INNER JOIN [SCDATA] . F0010 B 
				ON B . CCCO = A . SHKCOO	 
			WHERE 
				A . SHAN8 = ADDRESSNUMBER 
				AND ( COMPANY = '*' OR A . SHCO = COMPANY ) 
				AND	( A . SHTRDJ BETWEEN FROMDATE AND TODATE ) 
			GROUP BY A.SHTRDJ , A.SHCRRM , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' THEN B . CCCRCD ELSE A . SHCRCD END ), 
				A.SHCO , A.SHDCTO 
			UNION ALL
			SELECT 
				SHTRDJ		AS ORDERDATE , 
				( CASE WHEN A . SHCRRM = 'D' OR FOREIGNCONSTANT = 'N' THEN SUM ( A . SHOTOT ) 
					ELSE SUM ( A . SHFAP ) END ) AS PRODUCTTOTAL , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' THEN B . CCCRCD 
					ELSE A . SHCRCD END ) AS CURRENCYCODE ,
                A.SHCO , 
				A.SHDCTO 	 
			FROM [SCDATA] . F42019 A 
			INNER JOIN [SCDATA] . F0010 B 
				ON B . CCCO = A . SHKCOO
			WHERE 
				A . SHAN8 = ADDRESSNUMBER 
				AND ( COMPANY = '*' OR A . SHCO = COMPANY ) 
                AND	( A . SHTRDJ BETWEEN FROMDATE AND TODATE ) 
			GROUP BY A . SHTRDJ , A . SHCRRM , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' THEN B . CCCRCD ELSE A . SHCRCD END ) , 
				A.SHCO , A.SHDCTO
        ) SELECT 
			   ORDERDATE , 
			   SUM(PRODUCTTOTAL) AS ProductTotal , 
			   CURRENCYCODE 
		FROM CTE4201 A
		LEFT OUTER JOIN [SCDATA] . FQ679912 CR  --Extended Sales Order Header 
			ON CR . CI$9INID = CONSTANTINSTALLATION 
			AND CR . CICO = A . SHCO 
		LEFT OUTER JOIN [SCDATA] . FQ67008 DR 
			ON  DR.DR$9INID = SORDERINID 
			AND DR.DR$9CNST = SORDERCONSTANT
			AND DR.DRKY = A . SHDCTO  
         WHERE
				( SORDERRESTRIC = '0' OR DR. DRKY IS NOT NULL ) 
				AND ( COMPANYCONSTANT = 'A' OR CR . CICO IS NOT NULL )
		 GROUP BY A.OrderDate, A.CurrencyCode
		 FOR READ ONLY ;
  
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE4201 AS (
			SELECT 
				SHTRDJ		AS ORDERDATE , 
				( CASE WHEN A.SHCRRM = 'D' OR FOREIGNCONSTANT = 'N' 
					THEN SUM ( A.SHOTOT ) 
					ELSE SUM ( A.SHFAP ) 
				END) AS PRODUCTTOTAL , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' 
					THEN C.CCCRCD 
					ELSE A.SHCRCD 
				END) AS CURRENCYCODE ,
                A.SHCO , 
				A.SHDCTO 	 
			FROM [SCDATA] . F4201 A			 /* Sales Order Header */
			INNER JOIN [SCDATA] . F0010 C 
				ON C.CCCO = A.SHKCOO	 
			INNER JOIN [SCDATA].FQ674201 AS B	 /* Extended Sales Order Header */
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO 
				AND	( A.SHTRDJ BETWEEN FROMDATE AND TODATE ) 
			WHERE 
				B.SH$9AN8 = ADDRESSNUMBER 
				AND B.SH$9TYP = ADDRESSBOOKTYPE		 
                AND	( A.SHTRDJ BETWEEN FROMDATE AND TODATE ) 
			GROUP BY A.SHTRDJ , A.SHCRRM , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' THEN C.CCCRCD ELSE A.SHCRCD END ), 
				A.SHCO, A.SHDCTO
			UNION ALL
			SELECT 
				SHTRDJ		AS ORDERDATE , 
				( CASE WHEN A.SHCRRM = 'D' OR FOREIGNCONSTANT = 'N' 
					THEN SUM ( A.SHOTOT ) 
					ELSE SUM ( A.SHFAP ) 
				END) AS PRODUCTTOTAL , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' 
					THEN C.CCCRCD 
					ELSE A.SHCRCD 
				END) AS CURRENCYCODE ,
                A.SHCO , 
				A.SHDCTO 	 
			FROM [SCDATA].F42019 A		 
			INNER JOIN [SCDATA].F0010 C 
				ON C.CCCO = A.SHKCOO	 
			INNER JOIN [SCDATA].FQ674201 AS B	 --Extended Sales Order Header 
				ON B.SHKCOO = A.SHKCOO 
				AND B.SHDOCO = A.SHDOCO 
				AND B.SHDCTO = A.SHDCTO 
				AND	( A.SHTRDJ >= FROMDATE )		 
				AND	( A.SHTRDJ <= TODATE ) 
			WHERE 
				B.SH$9AN8 = ADDRESSNUMBER 
				AND B.SH$9TYP = ADDRESSBOOKTYPE 
                AND	( A.SHTRDJ BETWEEN FROMDATE AND TODATE ) 
			GROUP BY A.SHTRDJ , A.SHCRRM , 
				( CASE WHEN SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' THEN C.CCCRCD ELSE A.SHCRCD END ), 
				A.SHCO, A.SHDCTO
        ) SELECT 
			ORDERDATE , 
			SUM(PRODUCTTOTAL) AS ProductTotal, 
			CURRENCYCODE 
		FROM CTE4201 A
		LEFT OUTER JOIN [SCDATA] . FQ679912 CR  --Extended Sales Order Header 
			ON CR . CI$9INID = CONSTANTINSTALLATION 
			AND CR . CICO = A . SHCO 
		LEFT OUTER JOIN [SCDATA] . FQ67008 DR 
			ON  DR.DR$9INID = SORDERINID 
			AND DR.DR$9CNST = SORDERCONSTANT
			AND DR.DRKY = A . SHDCTO  
         WHERE
               ( SORDERRESTRIC = '0' OR DR. DRKY IS NOT NULL ) 
				AND ( COMPANYCONSTANT = 'A' OR CR . CICO IS NOT NULL )
		 GROUP BY A.OrderDate, A.CurrencyCode
		 FOR READ ONLY ;
  
  		IF ( ADDRESSBOOKTYPE = 0 )  THEN --CUSTOMER 
		      OPEN TEMP_CURSOR1 ; 
        ELSE                             -- CONSUMER
              OPEN TEMP_CURSOR2 ;       
		END IF; 
	END ; 
END  ; 
  

-- #desc					Load a EDI invoice information
-- #bl_class				Premier.Commerce.PunchOutInvoicePresentmentList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		Order Number
  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetPunchInvoicePresentList 
( 
	IN OrderCompany				GRAPHIC(5) CCSID 13488,
	IN OrderType				GRAPHIC(2) CCSID 13488,
	IN OrderNumber				NUMERIC(8,0)
) 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetPunchInvoicePresentList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	/*Retrieve Invoice Header Information*/
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
	SELECT 
	SY.SYEDOC	AS EDINumber,
	SY.SYEDCT	AS EDIType,
	SY.SYEKCO	AS EDICompany,
	SY.SYDOCO   AS OrderNumber,
	SY.SYKCOO	AS OrderCompany,
	SY.SYDCTO	AS OrderType,
	SY.SYVR01   AS CustomerPO,
	S3.S3DOC	AS InvoiceNumber,
	S3.S3DCT	AS InvoiceType,
	S3.S3KCO	AS InvoiceCompany,
	S3.S3DDU	AS DueDate,
	S3.S3IVD	AS InvoiceDate,
	S3.S3NDTP	AS DaysToPay,
	S3.S3AG		AS GrossAmount,
	S3.S3ATXA	AS TaxableAmount,
	S3.S3STAM	AS TaxAmount,
	S3.S3CTAM	AS ForeignTaxAmount,
	S3.S3DSCT	AS DiscountAmount,	
	SY.SYCRRM	AS CurrencyMode,
	ZAB.ZAAN8	AS BillAddressNumber,
	ZAB.ZAMLNM	AS BillMailingName,
	ZAB.ZAADD1	AS BillAddressLine1,
	ZAB.ZAADD2	AS BillAddressLine2,
	ZAB.ZAADD3	AS BillAddressLine3,
	ZAB.ZAADD4	AS BillAddressLine4,
	ZAB.ZAADDZ	AS BillPostalCode,
	ZAB.ZACTY1	AS BillCity,
	ZAB.ZAADDS	AS BillState,
	ZAB.ZACOUN	AS BillCountry,
	ZAS.ZAAN8	AS ShipAddressNumber,
	ZAS.ZAMLNM	AS ShipMailingName,
	ZAS.ZAADD1	AS ShipAddressLine1,
	ZAS.ZAADD2	AS ShipAddressLine2,
	ZAS.ZAADD3	AS ShipAddressLine3,
	ZAS.ZAADD4	AS ShipAddressLine4,
	ZAS.ZAADDZ	AS ShipPostalCode,
	ZAS.ZACTY1	AS ShipCity,
	ZAS.ZAADDS	AS ShipState,
	ZAS.ZACOUN	AS ShipCountry,
	SY.SYCO		AS Company,
	CC.CCAN8	AS CompanyAddressNumber	
	FROM [SCDATA].F47046 SY
	INNER JOIN [SCDATA].F470461 S3 --Extended info
	ON S3.S3EDOC = SY.SYEDOC
	AND S3.S3EKCO = SY.SYEKCO
	AND S3.S3EDCT = SY.SYEDCT
	INNER JOIN [SCDATA].F4706 ZAB -- Bill To Address Information
	ON ZAB.ZAEDOC = SY.SYEDOC
	AND ZAB.ZAEKCO = SY.SYEKCO
	AND ZAB.ZAEDCT = SY.SYEDCT
	AND ZAB.ZAANTY = 1
	INNER JOIN [SCDATA].F4706 ZAS --Ship to Address Information
	ON ZAS.ZAEDOC = SY.SYEDOC
	AND ZAS.ZAEKCO = SY.SYEKCO
	AND ZAS.ZAEDCT = SY.SYEDCT
	AND ZAS.ZAANTY = 2
	INNER JOIN [SCDATA].F0010 CC -- Company information
	ON CC.CCCO = SY.SYCO
	WHERE SY.SYDOCO = OrderNumber AND SY.SYKCOO = OrderCompany AND SY.SYDCTO = OrderType AND SY.SYEDSP <> 'Y'
	FOR FETCH ONLY;	


	/*Retrieve Invoice Lines Information*/
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
	SELECT 
	SZDOCO			AS OrderNumber,
	SZDCTO			AS OrderType,
	SZKCOO			AS OrderCompany,
	SZDOC			AS InvoiceNumber,
	SZDCT			AS InvoiceType,
	SZKCO			AS InvoiceCompany,
	SZLNID			AS LineNumber,
	SZITM			AS ShortProductNumber,
	SZLITM			AS LongProductNumber,
	SZAITM			AS AuxProductNumber,
	SZDSC1			AS Description1,
	SZDSC2			AS Description2,
	SZLNTY			AS LineType,
	SZUOM			AS UnitOfMeasure,
	SZUPRC			AS AmountUnitPrice,
	SZAEXP			AS AmountExtPrice,
	SZECST			AS AmountExtCost,
	SZFUP			AS ForeignUnitPrice,
	SZFEA			AS ForeignExtPrice,
	SZPROV			AS OverridePriceCode,
	SZUORG			AS ShippingQuantity,
	SZSOQS			AS ShippedQuantity,
	SZRLIT			AS RelatedKitItemNo,
	SZKTLN			AS KitMasterLineNo,
	SZCPNT			AS ComponentLineNumber
	FROM [SCDATA].F47047 	
	WHERE SZDOCO = OrderNumber AND SZKCOO = OrderCompany AND SZDCTO = OrderType AND SZEDSP <> 'Y'
	FOR FETCH ONLY;

	OPEN TEMP_CURSOR1;
	OPEN TEMP_CURSOR2;

END; 
-- #desc						Get returned quantity
-- #bl_class					N/A		
-- #db_dependencies				N/A
-- #db_references				COM_GetSOReturnLineSrchList

-- #param OrderNumber			Order number to search for.
-- #param OrderCompany			Company
-- #param OrderType				Document type to search for.
-- #param LineNumber			Line Number to search for.
-- #param COInstallationID 		InstallationID
-- #param CORestric				CORestric

CREATE OR REPLACE FUNCTION [SCLIBRARY].COM_GetReturnedQuantityFnc
(
	OrderNumber			NUMERIC(8,0),
	OrderCompany		GRAPHIC(5) CCSID 13488,
	OrderType			GRAPHIC(2) CCSID 13488,
	LineNumber			DECIMAL(6,0),
	COInstallationID 	VARGRAPHIC(3) CCSID 13488,
	CORestric			VARGRAPHIC(1) CCSID 13488
)
RETURNS DECIMAL(15,0)
LANGUAGE SQL
SPECIFIC COM_GetReturnedQuantityFnc
DISALLOW PARALLEL
NOT DETERMINISTIC
CALLED ON NULL INPUT
RETURN 
	WITH CTE AS (
		SELECT 
			SDSOQS,
			SDDCTO,
			SDOORN,
			SDOGNO,
			SDOCTO,
			SDOKCO
		FROM [SCDATA].F4211 A /* Standard Sales OrderDetail */
		WHERE 
			A.SDOORN = OrderNumber
			AND A.SDOCTO = OrderType
			AND A.SDOKCO = OrderCompany
			AND A.SDOGNO = LineNumber
			AND (A.SDLTTR < '980' OR A.SDLTTR = '995') AND SDOORN > '0' 
		UNION ALL
		SELECT 
			SDSOQS,
			SDDCTO,
			SDOORN,
			SDOGNO,
			SDOCTO,
			SDOKCO
		FROM [SCDATA].F42119 A 
		WHERE 
			A.SDOORN = OrderNumber
			AND A.SDOCTO = OrderType
			AND A.SDOKCO = OrderCompany
			AND A.SDOGNO = LineNumber
			AND (A.SDLTTR < '980' OR A.SDLTTR = '995') AND SDOORN > '0' 
	),
	CTE2 AS (
		SELECT 
			SUM(SDSOQS) AS ReturnedQty,
			SDDCTO
		FROM CTE A
		GROUP BY SDOORN, SDOGNO, SDOCTO, SDOKCO, SDDCTO
	)
	SELECT 
		ReturnedQty AS ReturnedQuantity
	FROM CTE2 A
	LEFT OUTER JOIN [SCDATA].FQ67008 DR 
		ON DR.DR$9INID = COInstallationID 
		AND DR.DR$9CNST = 'CO_RESTRIC'
		AND DR.DRKY = A.SDDCTO
	WHERE ( CORestric = '0' OR DR.DRKY IS NOT NULL ); 

-- #desc						Load a return detail
-- #bl_class					Premier.Commerce.ReturnOrderInfo.cs
-- #db_dependencies				COM_GetSalesOrderBillToInfo.sql, COM_GetSalesOrderInfo_Payments.sql
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param ReturnCompany			Company ID
-- #param ReturnType			Document Type
-- #param ReturnNumber			ReturnNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetReturnOrderInfo
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN ReturnCompany		GRAPHIC(5) CCSID 13488,
	IN ReturnType			GRAPHIC(2) CCSID 13488,
	IN ReturnNumber			NUMERIC(8,0)
)
DYNAMIC RESULT SETS 4
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetReturnOrderInfo
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT
BEGIN

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_ORDERDETAIL
	(
		ReturnCompany			GRAPHIC(5) CCSID 13488,
		ReturnType				GRAPHIC(2) CCSID 13488,
		ReturnNumber			NUMERIC(8,0),
		LineNumber				DECIMAL(6,0),
		TransactionDate			NUMERIC(6,0),
		LineType				GRAPHIC(2) CCSID 13488,
		NextStatus				GRAPHIC(3) CCSID 13488,
		LastStatus				GRAPHIC(3) CCSID 13488,
		TaxableYN				GRAPHIC(1) CCSID 13488, 
		TaxArea					GRAPHIC(10) CCSID 13488,
		TaxExplanationCode		GRAPHIC(2) CCSID 13488,
		OriginalOrderCompany	GRAPHIC(5) CCSID 13488,
        OriginalOrderNumber		GRAPHIC(8) CCSID 13488,
        OriginalOrderType		GRAPHIC(2) CCSID 13488,
        ShipToID				NUMERIC(8,0),
		CostCenter				GRAPHIC(12) CCSID 13488,
		CostCenterHeader		GRAPHIC(12) CCSID 13488,
		ItemCrossRefNumber 		GRAPHIC(25) CCSID 13488,
		Description1			GRAPHIC(30) CCSID 13488,
		Description2			GRAPHIC(30) CCSID 13488,
		URL 					VARGRAPHIC(256) CCSID 13488,
		ShippingQuantity		DECIMAL(15,0),
		ShippedQuantity			DECIMAL(15,0),
		UnitOfMeasure			GRAPHIC(2) CCSID 13488,
		PricingUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		BackorderedQuantity		DECIMAL(15,0),
		CanceledQuantity		DECIMAL(15,0),
		AmountUnitPrice			DECIMAL(15,0),
		ForeignUnitPrice		DECIMAL(15,0),
		AmountExtPrice			DECIMAL(15,0),
		ForeignExtPrice			DECIMAL(15,0),
		InventoryInterface		GRAPHIC(1) CCSID 13488,
		CarrierID				NUMERIC(8,0),
		ModeOfTransportation	GRAPHIC(3) CCSID 13488,
		IdentifierShortItem		NUMERIC(8,0),
		LongItemNumber			GRAPHIC(25) CCSID 13488,
		AuxItemNumber			GRAPHIC(25) CCSID 13488,
		IsOrderRestricted		VARCHAR(1),
		OverridePrice			GRAPHIC(1) CCSID 13488,
		StockingType			GRAPHIC(1) CCSID 13488,
		RelatedKitItemNo		GRAPHIC(8) CCSID 13488,
		KitMasterLineNo			NUMERIC(6,0),
		ComponentLineNumber		NUMERIC(4,0)

	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_ORDERHEADER
	(
		SCBillToNumber		NUMERIC(15,0),
		SCShipToNumber		NUMERIC(15,0),
		AddressBookType		DECIMAL(10,0),
		CustomerPO			GRAPHIC(25) CCSID 13488,
		ReturnCompany		GRAPHIC(5) CCSID 13488,
		ReturnType			GRAPHIC(2) CCSID 13488,
		ReturnNumber		NUMERIC(8,0),
		TransactionDate 	NUMERIC(6,0),
		CurrencyCode		GRAPHIC(3) CCSID 13488,
		CurrencyMode		GRAPHIC(1) CCSID 13488,
		CurrencyDesc		GRAPHIC(30) CCSID 13488,
		BaseCurrency		VARCHAR(3),
		BaseCurrencyDesc   	VARCHAR(30),
		PaymentInstrument	GRAPHIC(1) CCSID 13488,
		HoldOrderCode		GRAPHIC(2) CCSID 13488,
		ReasonCode      	GRAPHIC(3) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	BEGIN

		/* STORE PROCEDURE VARIABLES */
		DECLARE ScBillTo		NUMERIC(15,0);
		DECLARE ScShipTo		NUMERIC(15,0);
		DECLARE	AddressType		DECIMAL(10,0);
		DECLARE	ContactID		DECIMAL(5,0);

		-- Gets Cust Cross Document Restrictions
		DECLARE CustCrossRefType	VARGRAPHIC(2) CCSID 13488;
		DECLARE CustCrossINID		GRAPHIC(3) CCSID 13488;

		DECLARE CurrentJulianDate	NUMERIC(6,0) DEFAULT 0;


		DECLARE CurrencyMode		GRAPHIC(1) CCSID 13488;
		DECLARE BaseCurrencyCode	GRAPHIC(3) CCSID 13488;
		DECLARE BaseCurrencyDesc    GRAPHIC(30) CCSID 13488;

		-- Foreign Constant
		DECLARE ForeignC			VARGRAPHIC(1) CCSID 13488;
		DECLARE ForeignINID			GRAPHIC(3) CCSID 13488;
		DECLARE ForeignConstant     GRAPHIC(10) CCSID 13488;

		--Gets the Order Document Restrictions
		DECLARE SOrderRestric		VARGRAPHIC(1) CCSID 13488;
		DECLARE SOrderINID			GRAPHIC(3) CCSID 13488;
		DECLARE SOrderConstant		GRAPHIC(10) CCSID 13488;

		-- Gets Cust Cross Document Restrictions
		SET CustCrossINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue( 'CUST_CROSS', CustCrossINID, CustCrossRefType );

		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

		-- Foreign Constant
		SET ForeignINID = InstallationID;
		SET ForeignConstant = 'FOREGCURYN';


		--Gets the Order Document Restrictions

		SET SOrderINID = InstallationID;
		SET SOrderConstant = 'SO_RESTRIC';
		CALL [SCLIBRARY].CMM_GetConstantValue( SOrderConstant, SOrderINID, SOrderRestric );

		--Load Address Book Type Variable From Order Header
		SELECT
			COALESCE(B.SH$9TYP, 0), COALESCE(B.SHIDLN, 0) INTO AddressType, ContactID
		FROM	[SCDATA].FQ674201 B
		WHERE	B.SHDOCO = ReturnNumber
			AND	B.SHKCOO = ReturnCompany
			AND	B.SHDCTO = ReturnType
		FETCH FIRST 1 ROWS ONLY;

		IF AddressType IS NULL THEN
			SET AddressType = 0;
			SET ContactID = 0;
		END IF;

		BEGIN

			DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT
				A.ReturnCompany,
				A.ReturnType,
				A.ReturnNumber,
				A.LineNumber,
				A.TransactionDate,
				A.LineType,
				A.NextStatus,
				A.LastStatus,
				A.TaxableYN,
				A.TaxArea,
				A.TaxExplanationCode,
				A.OriginalOrderCompany,
				A.OriginalOrderNumber,
				A.OriginalOrderType,
				A.ShipToID,
				A.CostCenter,
				A.CostCenterHeader,
				A.ItemCrossRefNumber,
				A.Description1,
				A.Description2,
				A.ShippingQuantity,
				A.ShippedQuantity,
				A.UnitOfMeasure,
				A.PricingUnitOfMeasure,
				A.BackorderedQuantity,
				A.CanceledQuantity,
				A.AmountUnitPrice,
				A.ForeignUnitPrice,
				A.AmountExtPrice,
				A.ForeignExtPrice,
				A.InventoryInterface,
				A.CarrierID,
				A.ModeOfTransportation,
				A.IdentifierShortItem,
				A.LongItemNumber,
				A.AuxItemNumber,
				(CASE WHEN SOrderRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END) AS IsOrderRestricted,
				A.OverridePrice,
				A.StockingType,
				A.RelatedKitItemNo,
				A.KitMasterLineNo,
				A.ComponentLineNumber,
				COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC), 0) AS TaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP), 0)  AS ForeignTaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP), 0) AS TaxedExtendedPrice,
				COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA), 0)  AS ForeignTaxedExtPrice,
				COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA), 0)   AS UnitTaxAmount,
				COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA), 0)  AS ForeignUnitTaxAmount,
				COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA), 0)   AS ExtendedTaxAmount,
				COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA), 0)  AS ForeignExtTaxAmount,
				CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
				COALESCE(C.RFOGNO, 0 ) AS ParentLineNo

			FROM SESSION.TMP_ORDERDETAIL A
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.ReturnNumber
				AND Tax.DTDCTO = A.ReturnType
				AND Tax.DTKCOO = A.ReturnCompany
				AND Tax.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.ReturnNumber
				AND TxHistory.DTDCTO = A.ReturnType
				AND TxHistory.DTKCOO = A.ReturnCompany
				AND TxHistory.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON DR.DR$9INID = SOrderINID
				AND DR.DR$9CNST = SOrderConstant 
				AND DR.DRKY = A.OriginalOrderType
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
					ON  C.RFDOCO = A.ReturnNumber
					AND C.RFDCTO = A.ReturnType
					AND C.RFKCOO = A.ReturnCompany
					AND C.RFLNID = A.LineNumber
			FOR FETCH ONLY;

			DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT
				A.SCBillToNumber,
				A.SCShipToNumber,
				A.AddressBookType,
				A.CustomerPO,
				A.ReturnCompany,
				A.ReturnType,
				A.ReturnNumber,
				A.TransactionDate,
				A.CurrencyCode,
				A.CurrencyMode,
				A.CurrencyDesc,
				COALESCE( BaseCurrencyCode, ' ' ) AS BaseCurrencyCode,
				COALESCE( BaseCurrencyDesc, ' ' ) AS BaseCurrencyDesc,
				A.PaymentInstrument,
				A.HoldOrderCode,
				COALESCE(COALESCE( Tax.STUTP, TxHistory.STUTP), 0 ) AS UseTaxedPrices,
				A.ReasonCode
			FROM SESSION.TMP_ORDERHEADER A

			LEFT OUTER JOIN [SCDATA].F4201TX Tax
				ON Tax.STDOCO = A.ReturnNumber
				AND Tax.STDCTO = A.ReturnType
				AND Tax.STKCOO = A.ReturnCompany
			LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
				ON TxHistory.STDOCO = A.ReturnNumber
				AND TxHistory.STDCTO = A.ReturnType
				AND TxHistory.STKCOO = A.ReturnCompany
			FOR FETCH ONLY;

			-- LOAD ORDER DETAIL TEMPORARY TABLE
			INSERT INTO SESSION.TMP_ORDERDETAIL (
				ReturnCompany,
				ReturnType,
				ReturnNumber,
				LineNumber,
				TransactionDate,
				LineType,
				NextStatus,
				LastStatus,
				TaxableYN,
				TaxArea,
				TaxExplanationCode,
				OriginalOrderCompany,
				OriginalOrderNumber,
				OriginalOrderType,
				ShipToID,
				CostCenter,
				CostCenterHeader,
				ItemCrossRefNumber,
				Description1,
				Description2,
				URL,
				ShippingQuantity,
				ShippedQuantity,
				UnitOfMeasure,
				PricingUnitOfMeasure,
				BackorderedQuantity,
				CanceledQuantity,
				AmountUnitPrice,
				ForeignUnitPrice,
				AmountExtPrice,
				ForeignExtPrice,
				InventoryInterface,
				CarrierID,
				ModeOfTransportation,
				IdentifierShortItem,
				LongItemNumber,
				AuxItemNumber,
				IsOrderRestricted,
				OverridePrice,
				StockingType,
				RelatedKitItemNo,
				KitMasterLineNo,
				ComponentLineNumber
			)
			SELECT	DISTINCT
					A.SDKCOO				AS ReturnCompany,
					A.SDDCTO				AS ReturnType,
					A.SDDOCO				AS ReturnNumber,
					A.SDLNID				AS LineNumber,
					A.SDTRDJ				AS TransactionDate,
					A.SDLNTY				AS LineType,
					A.SDNXTR				AS NextStatus,
					A.SDLTTR				AS LastStatus,
					A.SDTAX1				AS TaxableYN,
					A.SDTXA1				AS TaxArea,
					A.SDEXR1				AS TaxExplanationCode,
					A.SDOKCO				AS OriginalOrderCompany,
					A.SDOORN				AS OriginalOrderNumber,
					A.SDOCTO				AS OriginalOrderType,
					A.SDSHAN				AS ShipToID,
					A.SDMCU					AS CostCenter,
					A.SDEMCU				AS CostCenterHeader,
					COALESCE(S.IVCITM,'')	AS ItemCrossRefNumber,
					A.SDDSC1				AS Description1,
					A.SDDSC2				AS Description2,
					' '						AS URL,
					A.SDUORG				AS ShippingQuantity,
					A.SDSOQS				AS ShippedQuantity,
					A.SDUOM					AS UnitOfMeasure,
					A.SDUOM4				AS PricingUnitOfMeasure,
					A.SDSOBK				AS BackorderedQuantity,
					A.SDSOCN				AS CanceledQuantity,
					A.SDUPRC				AS AmountUnitPrice,
					A.SDFUP					AS ForeignUnitPrice,
					A.SDAEXP				AS AmountExtPrice,
					A.SDFEA					AS ForeignExtPrice,
					COALESCE(T.LFIVI,' ')	AS InventoryInterface,
					A.SDCARS				AS CarrierID,
					A.SDMOT					AS ModeOfTransportation,
					A.SDITM					AS IdentifierShortItem,
					A.SDLITM				AS LongItemNumber,
					A.SDAITM				AS AuxItemNumber,
					' '						AS IsOrderRestricted,
					A.SDPROV				AS OverridePrice,
					IM.IMSTKT				AS StockingType,
					A.SDRLIT				AS RelatedKitItemNo,
					A.SDKTLN				AS KitMasterLineNo,
					A.SDCPNT				AS ComponentLineNumber					
				FROM	[SCDATA].F4211 A		/* Standard Sales OrderDetail */
				LEFT OUTER JOIN [SCDATA].F4104 S --Item Cross Ref
					ON 	S.IVAN8  = A.SDAN8
					AND S.IVITM  = A.SDITM
					AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
					AND S.IVXRT = CustCrossRefType
					AND AddressType = 0		--Not join if AdrressType = 1 - Consumer
				INNER JOIN [SCDATA].F40205	T --Line Type
					ON T.LFLNTY = A.SDLNTY
				LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
					ON IM.IMITM = A.SDITM
				WHERE	A.SDDOCO = ReturnNumber
					AND	A.SDDCTO = ReturnType
					AND	A.SDKCOO = ReturnCompany
			UNION ALL
			SELECT	DISTINCT
					A.SDKCOO				AS ReturnCompany,
					A.SDDCTO				AS ReturnType,
					A.SDDOCO				AS ReturnNumber,
					A.SDLNID				AS LineNumber,
					A.SDTRDJ				AS TransactionDate,
					A.SDLNTY				AS LineType,
					A.SDNXTR				AS NextStatus,
					A.SDLTTR				AS LastStatus,
					A.SDTAX1				AS TaxableYN,
					A.SDTXA1				AS TaxArea,
					A.SDEXR1				AS TaxExplanationCode,
					A.SDOKCO				AS OriginalOrderCompany,
					A.SDOORN				AS OriginalOrderNumber,
					A.SDOCTO				AS OriginalOrderType,
					A.SDSHAN				AS ShipToID,
					A.SDMCU					AS CostCenter,
					A.SDEMCU				AS CostCenterHeader,
					COALESCE(S.IVCITM,' ')	AS ItemCrossRefNumber,
					A.SDDSC1				AS Description1,
					A.SDDSC2				AS Description2,
					' '						AS URL,
					A.SDUORG				AS ShippingQuantity,
					A.SDSOQS				AS ShippedQuantity,
					A.SDUOM					AS UnitOfMeasure,
					A.SDUOM4				AS PricingUnitOfMeasure,
					A.SDSOBK				AS BackorderedQuantity,
					A.SDSOCN				AS CanceledQuantity,
					A.SDUPRC				AS AmountUnitPrice,
					A.SDFUP					AS ForeignUnitPrice,
					A.SDAEXP				AS AmountExtPrice,
					A.SDFEA					AS ForeignExtPrice,
					COALESCE(T.LFIVI,' ')	AS InventoryInterface,
					A.SDCARS				AS CarrierID,
					A.SDMOT					AS ModeOfTransportation,
					A.SDITM					AS IdentifierShortItem,
					A.SDLITM				AS LongItemNumber,
					A.SDAITM				AS AuxItemNumber,
					' '						AS IsOrderRestricted,
					A.SDPROV				AS OverridePrice,
					IM.IMSTKT				AS StockingType,
					A.SDRLIT				AS RelatedKitItemNo,
					A.SDKTLN				AS KitMasterLineNo,
					A.SDCPNT				AS ComponentLineNumber
			FROM [SCDATA].F42119 A
				LEFT OUTER JOIN [SCDATA].F4104 S --Item Cross Ref
					ON  S.IVAN8  = A.SDAN8
					AND S.IVITM  = A.SDITM
					AND S.IVXRT = CustCrossRefType
					AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
					AND AddressType = 0		--Not join if AdrressType = 1 - Consumer
				LEFT OUTER JOIN [SCDATA].F40205	T --Line Type
					ON T.LFLNTY = A.SDLNTY
				LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
					ON IM.IMITM = A.SDITM
				WHERE A.SDDOCO = ReturnNumber
					AND A.SDDCTO = ReturnType
					AND	A.SDKCOO = ReturnCompany;

			-- LOAD ORDER HEADER TEMPORARY TABLE
			INSERT INTO	SESSION.TMP_ORDERHEADER(
				SCBillToNumber,
				SCShipToNumber,
				AddressBookType,
				CustomerPO,
				ReturnCompany,
				ReturnType,
				ReturnNumber,
				TransactionDate,
				CurrencyCode,
				CurrencyMode,
				CurrencyDesc,
				BaseCurrency,
				BaseCurrencyDesc,
				PaymentInstrument,
				HoldOrderCode,
				ReasonCode
			)
			SELECT DISTINCT
				CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
				CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
				COALESCE(B.SH$9TYP,0)			AS AddressBookType,
				A.SHVR01					AS CustomerPO,
				A.SHKCOO					AS ReturnCompany,
				A.SHDCTO					AS ReturnType,
				A.SHDOCO					AS ReturnNumber,
				A.SHTRDJ					AS TransactionDate,
				A.SHCRCD					AS CurrencyCode,
				A.SHCRRM					AS CurrencyMode,
				C.CVDL01					AS CurrencyDesc,
				' '							AS  BaseCurrency,
				' '							AS BaseCurrencyDesc,
				A.SHRYIN					AS PaymentInstrument,
				A.SHHOLD					AS HoldOrderCode,
				A.SHRCD						AS ReasonCode
			FROM	[SCDATA].F4201 A
			LEFT OUTER JOIN [SCDATA].FQ674201 B
				ON	A.SHDOCO = B.SHDOCO
				AND A.SHDCTO = B.SHDCTO
				AND A.SHKCOO = B.SHKCOO
			LEFT OUTER JOIN [SCDATA].F0013 C
				ON A.SHCRCD = C.CVCRCD
			WHERE A.SHDOCO = ReturnNumber
				AND	A.SHDCTO = ReturnType
				AND A.SHKCOO = ReturnCompany
			UNION ALL
			SELECT DISTINCT
				CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
				CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
				COALESCE(B.SH$9TYP,0)			AS AddressBookType,
				A.SHVR01					AS CustomerPO,
				A.SHKCOO					AS ReturnCompany,
				A.SHDCTO					AS ReturnType,
				A.SHDOCO					AS ReturnNumber,
				A.SHTRDJ					AS TransactionDate,
				A.SHCRCD					AS CurrencyCode,
				A.SHCRRM					AS CurrencyMode,
				C.CVDL01					AS CurrencyDesc,
				' '							AS  BaseCurrency,
				' '							AS BaseCurrencyDesc,
				A.SHRYIN					AS PaymentInstrument,
				A.SHHOLD					AS HoldOrderCode,
				A.SHRCD						AS ReasonCode
			FROM [SCDATA].F42019 A
			LEFT OUTER JOIN [SCDATA].FQ674201 B
				ON A.SHDOCO = B.SHDOCO
				AND A.SHDCTO = B.SHDCTO
				AND A.SHKCOO = B.SHKCOO
			LEFT OUTER JOIN [SCDATA].F0013 C
				ON A.SHCRCD = C.CVCRCD
			WHERE	A.SHDOCO = ReturnNumber
				AND	A.SHKCOO = ReturnCompany
				AND	A.SHDCTO = ReturnType;


			--Load BillTo Variables From Order Header
			SELECT
				 SCBillToNumber, SCShipToNumber, AddressBookType, CurrencyMode INTO ScBillTo, ScShipTo, AddressType, CurrencyMode

			FROM SESSION.TMP_ORDERHEADER
			FETCH FIRST 1 ROWS ONLY;

			IF ( CurrencyMode = 'F') THEN
				CALL [SCLIBRARY].CMM_GetConstantValue( ForeignConstant, ForeignINID, ForeignC );
				IF(ForeignC = 'N') THEN   /*Foreign is OFF*/
					SELECT
						B.CCCRCD, C.CVDL01 INTO BaseCurrencyCode, BaseCurrencyDesc
					FROM SESSION.TMP_ORDERHEADER A
					INNER JOIN [SCDATA].F0010 B
						ON B.CCCO = A.ReturnCompany
					LEFT OUTER JOIN [SCDATA].F0013 C
						ON B.CCCRCD = C.CVCRCD;
				END IF;
			END IF;

			OPEN TEMP_CURSOR2;	--HEADER
			CALL [SCLIBRARY].COM_GetSalesOrderInfo_BillTo( ReturnCompany, ReturnType, ReturnNumber, ScBillTo, AddressType, ContactID );

			OPEN TEMP_CURSOR1;	--DETAIL
			CALL [SCLIBRARY].COM_GetSalesOrderInfo_Payments( ReturnCompany, ReturnType, ReturnNumber);
		END;
	END;
END;
-- #desc							Returns the last OrdersToDisplay most recent returns
-- #bl_class						Premier.Commerce.ReturnOrderRecentList.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param Company					Company if is 00000 is '*'
-- #param InstallationID			Installation Id
-- #param AddressBookType			Address Book Type
-- #param AddressNumber				Address Number
-- #param OrderssToDisplay			Quantity of rows to be returned

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetReturnOrderRecentList
(
	IN Company GRAPHIC(5) CCSID 13488 , 
	IN InstallationID GRAPHIC(3) CCSID 13488 , 
	IN AddressBookType DECIMAL(10, 0) , 
	IN AddressNumber NUMERIC(15, 0) , 
	IN OrdersToDisplay NUMERIC(15, 0) 
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetReturnOrderRecentList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
		 
		/*Gets the Sales Order Document Restrictions	*/ 
		DECLARE ROrderRestric	VARGRAPHIC ( 1 ) CCSID 13488 ; 
		DECLARE ROrderINID		GRAPHIC ( 3 ) CCSID 13488 ; 
		DECLARE ROrderConstant	GRAPHIC ( 10 ) CCSID 13488 ; 
  
		/*Read Account Receivable Company constant */ 
		DECLARE CompanyConstant			VARGRAPHIC ( 1 ) CCSID 13488 ; 
		DECLARE ConstantInstallation	GRAPHIC ( 3 ) CCSID 13488 ; 
  
		SET ROrderConstant = 'CO_RESTRIC' ; 
		SET ROrderINID = InstallationID ; 
		CALL [SCLIBRARY]. CMM_GETCONSTANTVALUE ( ROrderConstant , ROrderINID , ROrderRestric ) ; 
  
		/*Read Account Receivable Company constant */ 
		SET ConstantInstallation = InstallationID ; 
		CALL [SCLIBRARY]. CMM_GETCONSTANTVALUE ( 'INSCompany' , ConstantInstallation , CompanyConstant ) ;	 
		 
		IF ( Company = '00000' ) THEN 
			SET Company = '*' ; 
		END IF ; 
		 
		BEGIN 
  
			DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
			SELECT 
				T . SHDOCO AS ORDERNUMBER , 
				T . SHDCTO AS ORDERTYPE , 
				T . SHKCOO AS ORDERCompany , 
				T . SHVR01 AS CUSTOMERREF , 
				T . SHTRDJ AS ORDERDATE 
  
			FROM TABLE 
				( [SCLIBRARY]. COM_GETRECENTDOCSFNC ( Company , ROrderINID , ROrderConstant , ConstantInstallation , CompanyConstant , ROrderRestric , AddressNumber ) ) AS T 
WHERE ( RNUM BETWEEN 1 AND OrdersToDisplay ) 
FOR READ ONLY; 
				 
  
			DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
			SELECT 
				T . SHDOCO AS ORDERNUMBER , 
				T . SHDCTO AS ORDERTYPE , 
				T . SHKCOO AS ORDERCompany , 
				T . SHVR01 AS CUSTOMERREF , 
				T . SHTRDJ AS ORDERDATE 
  
			FROM TABLE 
				( [SCLIBRARY]. COM_GETRECENTDOCEXTENDEDFNC ( Company , ROrderINID , ROrderConstant , ConstantInstallation , CompanyConstant , ROrderRestric , AddressNumber ) ) AS T 
WHERE ( RNUM BETWEEN 1 AND OrdersToDisplay ) 
FOR READ ONLY; 
  
			IF ( AddressBookType = 0 ) THEN  --CUSTOMER 
				OPEN TEMP_CURSOR1 ; 
			ELSE 
				IF ( AddressBookType = 1 ) THEN  --CONSUMER 
					OPEN TEMP_CURSOR2 ; 
				END IF ; 
			END IF ; 
		 
		END ; 
END  ; 
-- #desc						N/A
-- #bl_class					Premier.Commerce.ReturnOrderHeaderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param Company				Company
-- #param ReturnType			Document type to search for.
-- #param ReturnNumber			Order Number
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param ReturnDateFrom		Date Range
-- #param ReturnDateTo			Date Range
-- #param ReferenceNumber		Reference Number
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
-- #param SortBy				Column to filter by Return Number, Order Number, Customer Reference, Transaction Date
-- #param SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetReturnOrdHeadSrchList
(
	IN InstallationID			GRAPHIC(3) CCSID 13488,
	IN Company					GRAPHIC(5) CCSID 13488,
	IN ReturnType				GRAPHIC(2) CCSID 13488,
	IN AddressNumber			NUMERIC(15,0),
	IN ReturnNumber				NUMERIC(8,0),
	IN AddressBookType			NUMERIC(10,0),
	IN ReturnDateFrom			NUMERIC(6,0),
	IN ReturnDateTo				NUMERIC(6,0),
	IN ReferenceNumber			VARGRAPHIC(25) CCSID 13488,
	IN PageIndex				INTEGER,
    IN PageSize					INTEGER,
    IN SortBy					VARCHAR(40),
	IN SortDir					VARCHAR(3)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetReturnOrdHeadSrchList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE SQL_DYNAMIC			VARGRAPHIC(10000) CCSID 13488;
	DECLARE INNER_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
	DECLARE SORT_DYNAMIC		VARGRAPHIC(120) CCSID 13488;
	DECLARE SORTDIR_DYNAMIC		VARGRAPHIC(20) CCSID 13488;
	
	/*Gets the Sales Order Document Restrictions	*/
	DECLARE ROrderRestric	GRAPHIC(1) CCSID 13488;
	DECLARE ROrderINID		GRAPHIC(3) CCSID 13488;
	DECLARE ROrderConstant	GRAPHIC(10) CCSID 13488;

	/*Read Account Receivable company constant */
	DECLARE CompanyConstant			VARGRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488;

	/* Gets the Sales Order Document Restrictions Parameters*/
	DECLARE SORestric	GRAPHIC(1) CCSID 13488;
	DECLARE SOINID		GRAPHIC(3) CCSID 13488;
	DECLARE SOConstant	GRAPHIC(10) CCSID 13488;

	/*Paging*/
	DECLARE RowStart INTEGER;
	DECLARE RowEnd INTEGER;
	/* CURSOR FOR DYNAMIC SQL */
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;

	SET ROrderConstant = 'CO_RESTRIC';
	SET ROrderINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue(ROrderConstant, ROrderINID, ROrderRestric );
    
	/*Read Account Receivable company constant */
	SET ConstantInstallation = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant );	

	/* Gets the Sales Order Document Restrictions Parameters*/
	SET SOConstant = 'SO_RESTRIC';
	SET SOINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue(SOConstant, SOINID, SORestric );
		
		
	/*Paging */
    SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
    
    SET RowEnd = (PageIndex * PageSize);
	------------------------------------------------------
	-- Dynamic query conditions
	------------------------------------------------------

	/* Dynamic sort direction statement */
	SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	SET SORT_DYNAMIC = CASE SortBy
		WHEN 'ReturnNumber' THEN 'SHDOCO ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC'
		WHEN 'OrderNumber' THEN '(CASE SHOORN WHEN '''' THEN 0 END) DESC, SHOORN ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC'
		WHEN 'CustomerReference' THEN ' UPPER(SHVR01) ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC'
		WHEN 'TransactionDate' THEN 'SHTRDJ ' || SORTDIR_DYNAMIC || ', SHDOCO DESC'
		ELSE 'SHTRDJ DESC, SHDOCO DESC'
	END;

	SET  WHERE_DYNAMIC = ''; 
	SET INNER_DYNAMIC = '';

    IF (AddressNumber IS NOT NULL) THEN
        IF (AddressBookType = 0) THEN
            SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' A.SHAN8 = ? ';
        ELSE
            SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' B.SH$9AN8 = ? ';   
        END IF ; 
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' ( 1 = 1 OR ? IS NULL) ' ; 
	END IF;

	IF (ReturnNumber IS NOT NULL) THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SHDOCO = ? ';
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ' ; 
	END IF;

	IF (ReturnDateFrom IS NOT NULL) THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SHTRDJ >=  ? ';
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ' ; 
	END IF;

	IF (ReturnDateTo IS NOT NULL) THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SHTRDJ <=  ? ';
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ' ; 
	END IF;

	IF (ReferenceNumber <> N'*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC ||  N' AND UPPER (A.SHVR01) LIKE ''%'' || ? || ''%''';
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'') ' ; 
	END IF;

	IF (ReturnType <> N'*') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SHDCTO = ? ';
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'') ' ; 
	END IF;

	IF (Company <> N'*' AND Company <> N'00000') THEN
		SET WHERE_DYNAMIC = WHERE_DYNAMIC ||  N' AND A.SHKCOO = ? ';
    ELSE
        SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'') ' ; 
	END IF;

    IF (CompanyConstant = N'L') THEN
		    SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 D
								        		ON D.CICO = A.SHCO /*Company*/
												AND D.CI$9INID = ''' || ConstantInstallation || N''' ';
	END IF;

    IF (ROrderRestric = N'1') THEN
		SET  INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
								        		ON DR.DRKY = A.SHDCTO 
												AND DR.DR$9INID = ''' || ROrderINID || N'''
												AND DR.DR$9CNST = ''' || ROrderConstant || N''' ';
    END IF;
      
	SET WHERE_DYNAMIC = N' WHERE ' || WHERE_DYNAMIC;

    /* Customer type, do not join with extended info */
	IF ( AddressBookType = 0 ) THEN
		SET SQL_DYNAMIC = N'
            WITH PAGING AS (
			SELECT  
					SHDOCO		AS ReturnNumber, 
                    SHDCTO		AS ReturnType,
					SHKCOO		AS ReturnCompany, 
                    SHVR01		AS CustomerReference, 
					SHTRDJ		AS TransactionDate,
                    COUNT (DISTINCT SDOORN) AS ReturnedOrders,  
                    ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM
				FROM
				(
					SELECT  
						A.SHDOCO, 
						A.SHDCTO, 
						A.SHKCOO, 
						A.SHVR01, 
						A.SHTRDJ, 
						A.SHOORN				
					FROM [SCDATA].F4201 A	
					' || INNER_DYNAMIC
					|| WHERE_DYNAMIC ||		
					' UNION	ALL	
					SELECT  
						A.SHDOCO, 
						A.SHDCTO, 
						A.SHKCOO, 
						A.SHVR01, 
						A.SHTRDJ, 
						A.SHOORN
					FROM [SCDATA].F42019 A
					' || INNER_DYNAMIC
					|| WHERE_DYNAMIC ||
				') TEMPORAL_TABLE
				INNER JOIN [SCDATA].F0010 TB
					ON TB.CCCO = SHKCOO
                LEFT OUTER JOIN [SCDATA].F4211 
					ON  SDDOCO = SHDOCO 
					AND SDDCTO = SHDCTO
					AND SDKCOO = SHKCOO
					AND SDOORN <> ''''
		        GROUP BY SHDOCO, SHDCTO, SHKCOO , SHVR01, SHTRDJ, SHOORN
                ) 
				SELECT  
					ReturnNumber, ReturnType,ReturnCompany, CustomerReference, TransactionDate, O.SDOKCO OriginalOrderCompany, O.SDOORN OriginalOrderNumber, O.SDOCTO OriginalOrderType,
                    ReturnedOrders, (CASE  WHEN  ? =  ''1''  THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END) AS ISORDERRESTRICTED,  
                    (SELECT COUNT(1) FROM PAGING) AS TotalRowCount   
                FROM
                    PAGING A
				LEFT OUTER JOIN TABLE(SCLIBRARY.COM_GetOriginalOrderInfoFnc(A.ReturnNumber, A.ReturnType, A.ReturnCompany)) AS O 
					ON O.SDDOCO  = A.ReturnNumber
					AND O.SDDCTO  = A.ReturnType
					AND O.SDKCOO  = A.ReturnCompany
				LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
					ON SOR1.DRKY = O.SDOCTO
					AND SOR1.DR$9INID = ?
					AND SOR1.DR$9CNST = ?
				WHERE (( ?  = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ? ))';

	ELSE	/* Consumer type */
		SET SQL_DYNAMIC = N'
		    WITH PAGING AS 
			(
			SELECT  
					SHDOCO		AS ReturnNumber, 
                    SHDCTO		AS ReturnType,
					SHKCOO		AS ReturnCompany, 
                    SHVR01		AS CustomerReference, 
					SHTRDJ		AS TransactionDate,
                    COUNT (DISTINCT SDOORN) AS ReturnedOrders,   
                    ROW_NUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM
				FROM
				(
					SELECT  
						A.SHDOCO, 
						A.SHDCTO, 
						A.SHKCOO, 
						A.SHVR01, 
						A.SHTRDJ,
						A.SHOORN				
					FROM [SCDATA].F4201 A				/*Sales Order Header*/
					INNER JOIN [SCDATA].FQ674201 B	/*Extended Sales Order Header*/
						ON B.SHKCOO = A.SHKCOO
						AND B.SHDOCO = A.SHDOCO
						AND B.SHDCTO = A.SHDCTO 
						AND B.SH$9TYP = 1
					' || INNER_DYNAMIC
					|| WHERE_DYNAMIC ||		
					' UNION ALL
					SELECT  
						A.SHDOCO, 
						A.SHDCTO, 
						A.SHKCOO, 
						A.SHVR01, 
						A.SHTRDJ,  
						A.SHOORN
					FROM [SCDATA].F42019 A		
					INNER JOIN [SCDATA].FQ674201 B	/*Extended Sales Order Header*/
						ON B.SHKCOO = A.SHKCOO
						AND B.SHDOCO = A.SHDOCO
						AND B.SHDCTO = A.SHDCTO 
						AND B.SH$9TYP = 1
					' || INNER_DYNAMIC
					|| WHERE_DYNAMIC ||
				') TEMPORAL_TABLE
				INNER JOIN [SCDATA].F0010 TB
					ON TB.CCCO = SHKCOO
				LEFT OUTER JOIN [SCDATA].F4211 
					ON SDDOCO = SHDOCO 
					AND SDDCTO = SHDCTO
					AND SDKCOO = SHKCOO
					AND SDOORN <> ''''
				GROUP BY SHDOCO, SHDCTO, SHKCOO , SHVR01, SHTRDJ, SHOORN
                ) 
                SELECT  
					ReturnNumber, ReturnType, ReturnCompany, CustomerReference, TransactionDate, O.SDOKCO OriginalOrderCompany, O.SDOORN OriginalOrderNumber, O.SDOCTO OriginalOrderType,
                    ReturnedOrders, (CASE  WHEN  ? =  ''1''  THEN CASE WHEN SOR1.DRKY IS NOT NULL THEN ''N'' ELSE ''Y'' END ELSE ''N'' END) AS ISORDERRESTRICTED,                    
                    (SELECT COUNT(1) FROM PAGING) AS TotalRowCount    
                FROM 
                    PAGING A
				LEFT OUTER JOIN TABLE(SCLIBRARY.COM_GetOriginalOrderInfoFnc(A.ReturnNumber, A.ReturnType, A.ReturnCompany)) AS O 
					ON O.SDDOCO  = A.ReturnNumber
					AND O.SDDCTO  = A.ReturnType
					AND O.SDKCOO  = A.ReturnCompany
				LEFT OUTER JOIN [SCDATA].FQ67008 SOR1
					ON SOR1.DRKY = O.SDOCTO
					AND SOR1.DR$9INID = ?
					AND SOR1.DR$9CNST = ?
				WHERE (( ?  = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ? ))';


	END IF;
		
	PREPARE V_DYNAMIC FROM SQL_DYNAMIC;
	OPEN TEMP_CURSOR1 USING  AddressNumber, ReturnNumber, ReturnDateFrom, ReturnDateTo, ReferenceNumber, ReturnType, Company, AddressNumber, ReturnNumber, 
                            ReturnDateFrom, ReturnDateTo, ReferenceNumber, ReturnType, Company, SORestric, SOINID, SOConstant, PageIndex, PageSize, RowStart, RowEnd;            
END;
-- #desc							N/A
-- #bl_class						Premier.Commerce.SalesOrderWeb.cs
-- #db_dependencies					COM_GetSalesOrderHeader, COM_GetSalesOrderDetail
-- #db_references					N/A

-- #param Company					Company Number to search for.
-- #param OrderType					Order number to search for.
-- #param OrderNumber				Order type to search for.
-- #param RetrieveWebContentInfo	Condition to validate if Retrieve Web Content Info or no.
-- #param InstallationID			Installation Id

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrder
(
	Company					varchar(5),
	OrderType				varchar(3),
	OrderNumber				NUMERIC(15,0),
	InstallationID			varchar(3),
	RetrieveWebContentInfo	INT,
	LangPref				varchar(2)
)

DYNAMIC RESULT SETS 4
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrder 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

--Read Header information
CALL [SCLIBRARY].COM_GetSalesOrderHeader (Company, OrderType, OrderNumber , InstallationID);

--Read Line Detail information
CALL [SCLIBRARY].COM_GetSalesOrderDetail (Company, OrderType, OrderNumber , InstallationID, RetrieveWebContentInfo, LangPref);

--Read All Payments Information
CALL [SCLIBRARY].COM_GetSalesOrderPayments (Company, OrderType, OrderNumber );

/*Configured Items*/
CALL [SCLIBRARY].COM_GetSOConfiguredLineList(Company, OrderType, OrderNumber, LangPref);

END 






 ;
-- #desc					Get Sales Order Head Ship Info
-- #bl_class				Premier.Commerce.GetSalesOrderHeadShipInfo.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param OrderCompany		Company ID
-- #param OrderType			Document Type
-- #param OrderNumber		OrderNumber

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderHeadShipInfo
(
	IN OrderCompany		VARCHAR(5),
	IN OrderType		VARCHAR(2),
	IN OrderNumber		NUMERIC(15,0),
	OUT ShipToNumber    NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderHeadShipInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 
	SELECT SHSHAN INTO ShipToNumber 
		FROM [SCDATA].F4201 
		WHERE SHKCOO = OrderCompany 					
			  AND SHDCTO = OrderType
			  AND SHDOCO = OrderNumber  
		FETCH FIRST 1 ROW ONLY;
		
	IF (ShipToNumber IS NULL) OR (ShipToNumber = 0)
		THEN
		SELECT SHSHAN INTO ShipToNumber 
		FROM [SCDATA].F42019 
		WHERE SHKCOO = OrderCompany 					
			  AND SHDCTO = OrderType
			  AND SHDOCO = OrderNumber  
		FETCH FIRST 1 ROW ONLY;
	END IF;
		
	IF (ShipToNumber IS NULL)
		THEN
		SET ShipToNumber = 0;
	END IF;
END  ;
-- #desc						N/A
-- #bl_class					Premier.Commerce.SalesOrderHeaderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id
-- #param Company				Company
-- #param OrderType				Document type to search for.
-- #param OrderNumber			Order Number
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param OrderDateFrom			Date Range
-- #param OrderDateTo			Date Range
-- #param ReferenceNumber		Reference Number
-- #param AllOpenOrders			AllOpenOrders
-- #param ItemNumber			Specific item to search for
-- #param SortBy				Column to filter by OrderType, OrderNumber, CustomerReference,
--								OrderDate(Default Value), ProductTotal */
-- #param SortDir				Direction to filter A = Ascendant, D = Descendant-DEFAULT Value
-- #param PageIndex				Page Index
-- #param PageSize				Page Size
  
CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderHeadSrchList 
( 
	IN INSTALLATIONID	GRAPHIC(3) CCSID 13488 , 
	IN COMPANY			GRAPHIC(5) CCSID 13488 , 
	IN ORDERTYPE		GRAPHIC(2) CCSID 13488 , 
	IN ADDRESSNUMBER	NUMERIC(15, 0) , 
	IN ORDERNUMBER		NUMERIC(8, 0) , 
	IN SHIPTONUMBER		NUMERIC(15, 0) , 
	IN ADDRESSBOOKTYPE	NUMERIC(15, 0) , 
	IN ORDERDATEFROM	NUMERIC(15, 0) , 
	IN ORDERDATETO		NUMERIC(15, 0) , 
	IN REFERENCENUMBER	VARGRAPHIC(25) CCSID 13488 , 
	IN ALLOPENORDERS	INTEGER, 
	IN ITEMNUMBER		NUMERIC(15, 0) , 
	IN SORTBY			VARCHAR(40) , 
	IN SORTDIR			VARCHAR(3) , 
	IN PAGEINDEX		INTEGER , 
	IN "PAGESIZE"		INTEGER
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderHeadSrchList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE ROWSTART INT DEFAULT 0 ; 
	DECLARE ROWEND INT DEFAULT 0 ; 

	/* Dynamic */ 
	DECLARE SQL_DYNAMIC VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE WHERE_DYNAMIC VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE FROM_DYNAMIC VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE INNER_DYNAMIC VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE STATUS_DYNAMIC VARGRAPHIC ( 1000 ) CCSID 13488 ; 

	/* Dynamic Sort */ 
	DECLARE SORT_DYNAMIC VARGRAPHIC ( 130 ) CCSID 13488 ; 
	DECLARE SORTDIR_DYNAMIC VARGRAPHIC ( 5 ) CCSID 13488 ; 
	DECLARE SORDERRESTRIC VARGRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE SORDERINID VARCHAR ( 3 ) ; 
	DECLARE SORDERCONSTANT VARCHAR ( 10 ) ; 
	DECLARE FREIGHTLINETYPE VARGRAPHIC ( 2 ) CCSID 13488 ; 
	DECLARE FREIGHTINID VARCHAR ( 3 ) ; 
	DECLARE DISCOUNTLINETYPE VARGRAPHIC ( 2 ) CCSID 13488 ; 
	DECLARE DISCOUNTINID VARCHAR ( 3 ) ; 
    DECLARE SURCHARGELINETYPE VARGRAPHIC ( 2 ) CCSID 13488 ; 
	DECLARE SURCHARGEINID VARCHAR ( 3 ) ; 
	DECLARE ORDERHISTORYSTATUS VARGRAPHIC ( 3 ) CCSID 13488 ; 
	DECLARE ORDERHISTORYINID VARCHAR ( 3 ) ; 
	DECLARE COMPANYCONSTANT VARGRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE CONSTANTINSTALLATION VARCHAR ( 3 ) ; 

	DECLARE FOREIGNCONSTANT VARGRAPHIC ( 256 ) CCSID 13488 ; 
	DECLARE FOREIGNCONSTANTINID VARCHAR ( 3 ) ; 

	SET WHERE_DYNAMIC = '' ; 
	SET ROWSTART = ( ( PAGESIZE * PAGEINDEX ) - PAGESIZE + 1 ) ; 
	SET ROWEND = ( PAGEINDEX * PAGESIZE ) ; 
	SET INNER_DYNAMIC = '' ; 

	SET SORDERCONSTANT = 'SO_RESTRIC' ; 
	SET SORDERINID = INSTALLATIONID ; 

	SET FREIGHTINID = INSTALLATIONID ; 
	SET DISCOUNTINID = INSTALLATIONID ; 
	SET ORDERHISTORYINID = INSTALLATIONID ; 
	SET FOREIGNCONSTANTINID = INSTALLATIONID ; 
	SET SURCHARGEINID = INSTALLATIONID ; 


	/* Gets the Sales Order Document Restrictions */ 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( SORDERCONSTANT , SORDERINID , SORDERRESTRIC ) ; 
	/* Gets the Freight Line Type */ 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'FREIGHTLN' , FREIGHTINID , FREIGHTLINETYPE ) ; 
	/* Gets the Discount Line Type */ 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'DISCOUNTLN' , DISCOUNTINID , DISCOUNTLINETYPE ) ; 
	/* Gets the Surcharge Line Type */ 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'SURCHARGLN' , SURCHARGEINID , SURCHARGELINETYPE ) ; 
	/* Gets the Order History Status */ 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'ORD_SCHOPN' , ORDERHISTORYINID , ORDERHISTORYSTATUS ) ; 

	/* Read Account Receivable company constant */ 
	SET CONSTANTINSTALLATION = INSTALLATIONID ; 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'INSCOMPANY' , CONSTANTINSTALLATION , COMPANYCONSTANT ) ; 


	/* Gets Foreign Constant   
	* Gets the Order Line Status */ 
	CALL SCLIBRARY . CMM_GETCONSTANTVALUE ( 'FOREGCURYN' , FOREIGNCONSTANTINID , FOREIGNCONSTANT ) ; 
	/* Dynamic sort direction statement */ 
	SET SORTDIR_DYNAMIC =  CASE SORTDIR WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 
	/* Dynamic sort statement */ 
	SET SORT_DYNAMIC = CASE SORTBY 
		WHEN 'OrderDate' THEN 'SHTRDJ ' || SORTDIR_DYNAMIC || ', SHDOCO DESC' 
		WHEN 'OrderType' THEN 'SHDCTO ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC' 
		WHEN 'OrderNumber' THEN 'SHDOCO ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC' 
		WHEN 'CustomerReference' THEN 'UPPER(SHVR01) ' || SORTDIR_DYNAMIC || ', SHTRDJ DESC' 
		WHEN 'ProductTotal' THEN ' (CASE WHEN (''' || FOREIGNCONSTANT || N''' = ''Y'' AND SHCRRM = ''F'') THEN SHFAP ELSE SHOTOT END )' || SORTDIR_DYNAMIC || ', SHTRDJ DESC' 
		ELSE 'SHTRDJ DESC, SHDOCO DESC ' 
	END ; 

	IF ( ADDRESSNUMBER IS NOT NULL ) THEN 
		SET WHERE_DYNAMIC = N' BillToNumb = ? ' ; 
	ELSE 
		SET WHERE_DYNAMIC = N' ( 1 = 1 OR ? IS NULL) ' ; 
	END IF ; 

	IF ( ORDERNUMBER IS NOT NULL ) THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND SHDOCO = ? ' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ' ; 
	END IF ; 

	IF ( ORDERDATEFROM IS NOT NULL ) 
	THEN                                                                                                                                            
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N'AND SHTRDJ BETWEEN ?  AND ? ' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL OR ? IS NULL) ' ; 
	END IF ; 

	IF ( SHIPTONUMBER IS NOT NULL ) 
	THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND SHAN = ? AND SDLNTY <> ? AND SDLNTY <> ? AND SDLNTY <> ? '; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL OR ? IS NULL OR ? IS NULL OR ? IS NULL) ' ;      
	END IF ; 

	IF ( ITEMNUMBER IS NOT NULL ) 
	THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND SDITM = ? AND SDLNTY <> ? AND SDLNTY <> ? AND SDLNTY <> ? ' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL OR ? IS NULL OR ? IS NULL OR ? IS NULL) ' ; 
	END IF ; 

	IF ( ORDERTYPE <> N'*' ) 
	THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND SHDCTO =  ? ' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? = ''*'' ) ' ; 
	END IF ; 

	IF ( ALLOPENORDERS = 1 ) 
	THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND SDNXTR <=  ? ' ; 
		SET STATUS_DYNAMIC = N'''OPEN ''  AS OrderStatus' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND(1= 1 OR ? = 0) ' ; 
		SET STATUS_DYNAMIC = N'SCLIBRARY.COM_GetSalesOrderStatusFnc (A.SHDOCO, A.SHKCOO, A.SHDCTO, N''' || ORDERHISTORYSTATUS || N''', N''' || FREIGHTLINETYPE || N''', N''' || DISCOUNTLINETYPE || N''', N''' || SURCHARGELINETYPE || N''') AS OrderStatus ' ; 
	END IF ; 

	IF ( COMPANY <> N'*' AND COMPANY <> N'00000' )  
	THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND SHKCOO =  ? ' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'' ) ' ; 
	END IF ; 

	IF ( REFERENCENUMBER <> N'*' ) 
	THEN 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(SHVR01) LIKE ''%'' || ? ||''%''' ; 
	ELSE 
		SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND ( 1 = 1  OR ? = ''*'' ) ' ; 
	END IF ; 

	IF ( WHERE_DYNAMIC <> N'' )  
	 THEN 
		SET WHERE_DYNAMIC = N' WHERE ' || WHERE_DYNAMIC ; 
	END IF ; 
                                                                                                                                                                                                                                                                                                
	IF ( SHIPTONUMBER IS NOT NULL ) OR ( ITEMNUMBER IS NOT NULL ) OR ( ALLOPENORDERS = 1 ) 
	THEN 
		IF ( ADDRESSBOOKTYPE = 0 ) 
		THEN 
			SET FROM_DYNAMIC = N' FROM [SCLIBRARY].COM_CustomerSOHeadSrchVW  VW ' ;                                                                                                                                                                                                                                                                                                                                                                                                                              
		ELSEIF ( ADDRESSBOOKTYPE = 1 ) 
		THEN 
			SET FROM_DYNAMIC = N' FROM [SCLIBRARY].COM_ConsumerSOHeadSrchVW VW ' ; 
		ELSE 
			SET FROM_DYNAMIC = N' FROM [SCLIBRARY].COM_SalesOrderHeadSrchVW VW ' ; 
		END IF ;
	ELSE 
	   IF ( ADDRESSBOOKTYPE = 0 ) 
	   THEN 
			SET FROM_DYNAMIC = N' FROM [SCLIBRARY].COM_CustomerOrderHeaderVW VW ' ; 
                                                                                                                                                                                                                                                                                                                                                                                                                                            
	   ELSEIF ( ADDRESSBOOKTYPE = 1 ) 
	   THEN 
		   SET FROM_DYNAMIC = N'  FROM [SCLIBRARY].COM_ConsumerOrderHeaderVW VW ' ; 
	   ELSE 
		   SET FROM_DYNAMIC = N'  FROM [SCLIBRARY].COM_SalesOrderHeadVW VW ' ; 
	   END IF ; 
	END IF; 
  
	IF ( SORDERRESTRIC = N'1' ) 
	THEN 
		SET INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ67008 DR
			ON DR.DRKY = SHDCTO
			AND DR.DR$9INID = ''' || SORDERINID || '''
			AND DR.DR$9CNST = ''' || SORDERCONSTANT || '''' ; 
	END IF ; 
	IF ( COMPANYCONSTANT = N'L' ) 
	THEN 
		SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
													ON CR.CI$9INID = ''' || CONSTANTINSTALLATION || '''
													AND CR.CICO = SHCO ' ; 
	END IF ; 

	BEGIN  
		/* Select the rows from temporary table betwen the * range of ROWSTART ans ROWEND */ 
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC ; 
		SET SQL_DYNAMIC = N' 
		WITH PAGING AS 
		(
			SELECT  
				SHDOCO,
				SHDCTO,
				SHKCOO,
				SHVR01,
				SHTRDJ,
				SHDRQJ,
				SHOTOT,
				SHFAP,
				SHCRCD,
				SHCRRM,
				SHHOLD,
				SHRORN,
				SHRCTO,
				SHDEL1,
				SHDEL2,
				BaseCurCod,
				AddBookTyp,
				BillToNumb,
				ShipToNumb,
				ROWNUMBER() OVER (ORDER BY ' || SORT_DYNAMIC || ') AS RNUM ' 
			|| FROM_DYNAMIC 
			|| INNER_DYNAMIC 
			|| WHERE_DYNAMIC || ' 
			GROUP BY SHDOCO, SHDCTO, SHKCOO, SHVR01, SHTRDJ, SHDRQJ, SHOTOT,
				SHFAP, SHCRCD, SHCRRM, SHHOLD, SHRORN, SHRCTO, SHDEL1,
				SHDEL2, BaseCurCod, AddBookTyp, BillToNumb, ShipToNumb
		)
		SELECT 
			A.SHDOCO AS OrderNumber,
			A.SHDCTO AS OrderType,
			A.SHKCOO AS OrderCompany,
			A.SHVR01 AS CustomerReference,
			A.SHTRDJ AS OrderDate,
			A.SHDRQJ AS RequestedDate,
			A.SHOTOT AS ProductTotal,
			A.SHFAP  AS ProductTotalForeign,
			A.SHCRCD AS CurrencyCode,
			A.SHCRRM AS CurrencyMode,
			A.SHHOLD AS HoldCode,
			A.SHRORN AS RelatedOrderNumber,
			A.SHRCTO AS RelatedOrderType,
			A.SHDEL1 AS DeliveryInst1,
			A.SHDEL2 AS DeliveryInst2,
			A.BaseCurCod AS BaseCurrencyCode,
			A.AddBookTyp AS AddressBookType,
			A.BillToNumb AS BillToNumber,
			A.ShipToNumb AS ShipToNumber, ' 
			|| STATUS_DYNAMIC || ',
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE 
			(( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? ))' ; 

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC ; 
		OPEN TEMP_CURSOR1 USING ADDRESSNUMBER , ORDERNUMBER , ORDERDATEFROM , ORDERDATETO , SHIPTONUMBER , FREIGHTLINETYPE, 
								DISCOUNTLINETYPE, SURCHARGELINETYPE, ITEMNUMBER , FREIGHTLINETYPE, DISCOUNTLINETYPE, SURCHARGELINETYPE, ORDERTYPE , ORDERHISTORYSTATUS , 
								COMPANY , REFERENCENUMBER , PAGEINDEX , PAGESIZE , ROWSTART , ROWEND ; 
	END ; 
END ;
-- #desc							Load a order detail
-- #bl_class						Premier.Commerce.SalesOrderInfo.cs
-- #db_dependencies					COM_GetSalesOrderBillToInfo.sql , COM_GetSalesOrderShipments
--									COM_GetSalesOrderInfo_Payments.sql
-- #db_references					N/A

-- #param InstallationID			Installation ID
-- #param OrderCompany				Company ID
-- #param OrderType					Document Type
-- #param OrderNumber				OrderNumber
-- #param RetrieveReturnInfo		Retrieve Return Info
-- #param RetrieveWebContentInfo	Retrieve Web Content Info
-- #param LangPref					Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSalesOrderInfo_Z
(
	IN InstallationID			GRAPHIC(3) CCSID 13488,
	IN OrderCompany				GRAPHIC(5) CCSID 13488,
	IN OrderType				GRAPHIC(2) CCSID 13488,
	IN OrderNumber				NUMERIC(8,0),
	IN RetrieveReturnInfo		INT,
	IN RetrieveWebContentInfo	INT,
	IN LangPref					GRAPHIC(2) CCSID 13488
)

DYNAMIC RESULT SETS 7
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSalesOrderInfo_Z
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

    DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_ORDERDETAIL
	(
		OrderCompany			GRAPHIC(5) CCSID 13488,
		OrderType				GRAPHIC(2) CCSID 13488,
		OrderNumber				NUMERIC(8,0),
		SCBillToNumber			NUMERIC(15,0),
		LineNumber				DECIMAL(6,0),
		TransactionDate			NUMERIC(6,0),
		RequestedDate			NUMERIC(6,0),
		LineType				GRAPHIC(2) CCSID 13488,
		NextStatus				GRAPHIC(3) CCSID 13488,
		LastStatus				GRAPHIC(3) CCSID 13488,
		TaxableYN				GRAPHIC(1) CCSID 13488,     
		TaxArea					GRAPHIC(10) CCSID 13488, 
		TaxExplanationCode		GRAPHIC(2) CCSID 13488,
		DateInvoice				NUMERIC(6,0),
		InvoiceCompany			GRAPHIC(5) CCSID 13488,
        InvoiceNumber			NUMERIC(8,0),
        InvoiceType				GRAPHIC(2) CCSID 13488,
        ShipToID				NUMERIC(8,0),
        SCShipToNumber			NUMERIC(15,0),
		ShipToName				VARCHAR(40),
		CostCenter				GRAPHIC(12) CCSID 13488, 
		CostCenterHeader		GRAPHIC(12) CCSID 13488,
		Description1			GRAPHIC(30) CCSID 13488,
		Description2			GRAPHIC(30) CCSID 13488,
		ShippingQuantity		DECIMAL(15,0),
		ShippedQuantity			DECIMAL(15,0),
		UnitOfMeasure			GRAPHIC(2) CCSID 13488,
		PricingUnitOfMeasure	GRAPHIC(2) CCSID 13488,
		BackorderedQuantity		DECIMAL(15,0),
		CanceledQuantity		DECIMAL(15,0),
		AmountUnitPrice			DECIMAL(15,0),
		ForeignUnitPrice		DECIMAL(15,0),
		AmountExtPrice			DECIMAL(15,0),
		ForeignExtPrice			DECIMAL(15,0),
		InventoryInterface		GRAPHIC(1) CCSID 13488,
		CarrierID				NUMERIC(8,0),
		ModeOfTransportation	GRAPHIC(3) CCSID 13488,
		IdentifierShortItem		NUMERIC(8,0),
		LongItemNumber			GRAPHIC(25) CCSID 13488,
		AuxItemNumber			GRAPHIC(25) CCSID 13488,
		ShipLineNumber			DECIMAL(31,0),
		OverridePrice			GRAPHIC(1) CCSID 13488,
		StockingType			GRAPHIC(1) CCSID 13488,
		RelatedKitItemNo		GRAPHIC(8) CCSID 13488,
		KitMasterLineNo			NUMERIC(6,0),
		ComponentLineNumber		NUMERIC(4,0),
		ShippedDate				NUMERIC(6,0),
		Location				GRAPHIC(20) CCSID 13488,
		LotNumber				GRAPHIC(30) CCSID 13488,
		IsFreeGood				VARCHAR(2),
		ParentLineNo			DECIMAL(7,0),
		IsBasketRepricing		GRAPHIC(1) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;
	
	DECLARE GLOBAL TEMPORARY TABLE SESSION.TMP_ORDERHEADER
	(			
		SCBillToNumber		NUMERIC(15,0),
		SCShipToNumber		NUMERIC(15,0),
		AddressBookType		DECIMAL(10,0),
		DeliveryInst1 		GRAPHIC(30) CCSID 13488,
		DeliveryInst2 		GRAPHIC(30) CCSID 13488,
		CustomerPO			GRAPHIC(25) CCSID 13488,
		OrderCompany		GRAPHIC(5) CCSID 13488,
		OrderType			GRAPHIC(2) CCSID 13488,
		OrderNumber			NUMERIC(8,0),	
		OrderDate 			NUMERIC(6,0),
		RequestedDate		NUMERIC(6,0),
		MarketingCode		GRAPHIC(30) CCSID 13488,
		HoldOrderCode		GRAPHIC(2) CCSID 13488,
		CurrencyCode		GRAPHIC(3) CCSID 13488,
		CurrencyMode		GRAPHIC(1) CCSID 13488,
		CurrencyDesc		GRAPHIC(30) CCSID 13488,
		OrderHeaderCompany  GRAPHIC(5) CCSID 13488,
		IsFreightOn         VARCHAR(2),
		PaymentInstrument	GRAPHIC(1) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

	 DECLARE GLOBAL TEMPORARY TABLE SESSION.COM_GETSALESORDERSHIPMENTS_A
	(
		OrderCompany			GRAPHIC(5) CCSID 13488,
		OrderType				GRAPHIC(2) CCSID 13488,
		OrderNumber				NUMERIC(8,0),
		CostCenter				GRAPHIC(12) CCSID 13488, 
		ShipLineNumber			DECIMAL(31,0),
		SCShipToNumber			NUMERIC(15,0),
		LineType				GRAPHIC(2) CCSID 13488
	)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED;

	BEGIN
	
		/* STORE PROCEDURE VARIABLES */
		DECLARE ScBillTo		NUMERIC(15,0);
		DECLARE ScShipTo		NUMERIC(15,0);
		DECLARE	AddressType		DECIMAL(10,0);
		DECLARE	ContactID		DECIMAL(5,0);
		DECLARE Freight			INT DEFAULT 0;
		DECLARE IsOverrideShipTo INT DEFAULT 0;
		
		--Gets the Invoice Document Restrictions
		DECLARE SInvoiceRestric     VARGRAPHIC(1) CCSID 13488;
		DECLARE SInvoiceINID		GRAPHIC(3) CCSID 13488; 
		DECLARE SInvoiceConstant    GRAPHIC(10) CCSID 13488;	
		
		-- Gets Cust Cross Document Restrictions
		DECLARE CustCrossRefType	VARGRAPHIC(2) CCSID 13488;
		DECLARE CustCrossINID		GRAPHIC(3) CCSID 13488;
		
		DECLARE CurrentJulianDate NUMERIC(6,0) DEFAULT 0;
		
		DECLARE CancelLn			VARGRAPHIC(1) CCSID 13488;
		DECLARE CancelLnINID	    GRAPHIC(3) CCSID 13488;
		DECLARE CancelLnConstant	GRAPHIC(10) CCSID 13488;
		
		DECLARE CurrencyModeTMP			GRAPHIC(1) CCSID 13488;
		DECLARE BaseCurrencyCodeTMP     GRAPHIC(3) CCSID 13488;
		DECLARE BaseCurrencyDescTMP		GRAPHIC(30) CCSID 13488;
		
		DECLARE ForeignConstant			VARGRAPHIC(1) CCSID 13488;
		DECLARE ForeignINID			    GRAPHIC(3) CCSID 13488;
		
		SET ForeignINID = InstallationID;
		
		--Gets the Invoice Document Restrictions
		SET SInvoiceINID = InstallationID;
		SET SInvoiceConstant = 'AR_RESTRIC';
		CALL [SCLIBRARY].CMM_GetConstantValue (SInvoiceConstant, SInvoiceINID, SInvoiceRestric);		 		 
		
		-- Gets Cust Cross Document Restrictions
		SET CustCrossINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);

		--Get the current Julian Date
		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		
		-- Gets the Order Line Status
		SET CancelLnConstant = 'YNCANCELLN';
		SET CancelLnINID = InstallationID;
	    CALL [SCLIBRARY].CMM_GetConstantValue (CancelLnConstant, CancelLnINID, CancelLn);
		
		--Load Address Book Type Variable From Order Header
		SELECT 
			COALESCE(B.SH$9TYP,0),COALESCE(B.SHIDLN,0) INTO AddressType, ContactID
		FROM	[SCDATA].FQ674201 B
		WHERE	B.SHDOCO = OrderNumber
			AND	B.SHKCOO = OrderCompany
			AND	B.SHDCTO = OrderType
		FETCH FIRST 1 ROWS ONLY;
		
		IF  AddressType is null THEN
			SET AddressType =0;
			SET ContactID =0;
		END IF;
		
		BEGIN

			/********************************Detail*********************************/
			
			DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT 
				OrderCompany as OrderCompany,
				OrderType as OrderType,
				OrderNumber as OrderNumber,
				A.LineNumber,
				A.TransactionDate,
				A.RequestedDate,
				A.LineType,
				A.NextStatus,
				A.LastStatus,
				A.TaxableYN,
				A.TaxArea,
				A.TaxExplanationCode,
				A.DateInvoice,
				A.InvoiceCompany,
				A.InvoiceNumber,
				A.InvoiceType,
				A.ShipToID,
				A.SCShipToNumber,
				A.ShipToName,
				A.CostCenter,
				A.CostCenterHeader,
				COALESCE(B.IVCITM,' ')	AS ItemCrossRefNumber,
				A.Description1	AS Description1, /* Retrieve Description 1 for Tracking lines */
		        A.Description2	AS Description2,
		        ''  AS URL,
				A.ShippingQuantity,
				A.ShippedQuantity,
				A.UnitOfMeasure,
				A.PricingUnitOfMeasure,
				A.BackorderedQuantity,
				A.CanceledQuantity,
				A.AmountUnitPrice,
				A.ForeignUnitPrice,
				A.AmountExtPrice,
				A.ForeignExtPrice,
				A.InventoryInterface,
				A.CarrierID,
				A.ModeOfTransportation,
				A.IdentifierShortItem,
				A.LongItemNumber,
				A.AuxItemNumber,
				(CASE WHEN SInvoiceRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS IsInvoiceRestricted,
				A.ShipLineNumber,
				A.OverridePrice,
				A.StockingType,
				A.RelatedKitItemNo,
				A.KitMasterLineNo,
				A.ComponentLineNumber,
				COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
				COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
				COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
				COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
				COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
				COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
				A.ShippedDate,
				A.Location,
				A.LotNumber,
				A.IsFreeGood,
				A.ParentLineNo,
				A.IsBasketRepricing
			FROM SESSION.TMP_ORDERDETAIL A
			LEFT OUTER JOIN [SCDATA].F4104	B /*Item Cross Ref */
				ON  AddressType = 0			  /*Not join if AdrressType = 1 - Consumer*/
				AND B.IVAN8  = A.SCBillToNumber
				AND B.IVITM  = A.IdentifierShortItem
				AND B.IVXRT = CustCrossRefType
				AND CurrentJulianDate >= B.IVEFTJ AND CurrentJulianDate <= B.IVEXDJ
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.OrderNumber 
				AND Tax.DTDCTO = A.OrderType
				AND Tax.DTKCOO = A.OrderCompany 
				AND Tax.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.OrderNumber 
				AND TxHistory.DTDCTO = A.OrderType
				AND TxHistory.DTKCOO = A.OrderCompany 
				AND TxHistory.DTLNID = A.LineNumber 
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON DR.DR$9INID = SInvoiceINID
				AND DR.DR$9CNST = SInvoiceConstant 
				AND DR.DRKY = A.InvoiceType
			ORDER BY A.LINENUMBER ASC
			FOR FETCH ONLY;	

			DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT 
				OrderCompany as OrderCompany,
				OrderType as OrderType,
				OrderNumber as OrderNumber,
				A.LineNumber,
				A.TransactionDate,
				A.RequestedDate,
				A.LineType,
				A.NextStatus,
				A.LastStatus,
				A.TaxableYN,
				A.TaxArea,
				A.TaxExplanationCode,
				A.DateInvoice,
				A.InvoiceCompany,
				A.InvoiceNumber,
				A.InvoiceType,
				A.ShipToID,
				A.SCShipToNumber,
				A.ShipToName,
				A.CostCenter,
				A.CostCenterHeader,
				COALESCE(B.IVCITM,' ')	AS ItemCrossRefNumber,
				COALESCE(ContenDesc.DESC1, A.Description1)	AS Description1,
		        COALESCE(ContenDesc.DESC2, A.Description2)	AS Description2,
		        ContenDesc.URL AS URL,
				A.ShippingQuantity,
				A.ShippedQuantity,
				A.UnitOfMeasure,
				A.PricingUnitOfMeasure,
				A.BackorderedQuantity,
				A.CanceledQuantity,
				A.AmountUnitPrice,
				A.ForeignUnitPrice,
				A.AmountExtPrice,
				A.ForeignExtPrice,
				A.InventoryInterface,
				A.CarrierID,
				A.ModeOfTransportation,
				A.IdentifierShortItem,
				A.LongItemNumber,
				A.AuxItemNumber,
				(CASE WHEN SInvoiceRestric = '1' THEN CASE WHEN DR.DRKY IS NOT NULL THEN 'N' ELSE 'Y' END ELSE 'N' END ) AS IsInvoiceRestricted,
				A.ShipLineNumber,
				A.OverridePrice,
				A.StockingType,
				A.RelatedKitItemNo,
				A.KitMasterLineNo,
				A.ComponentLineNumber,
				COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
				COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
				COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
				COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
				COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
				COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
				A.ShippedDate,
				A.Location,
				A.LotNumber,
				A.IsFreeGood,
				A.ParentLineNo,
				A.IsBasketRepricing
			FROM SESSION.TMP_ORDERDETAIL A
			LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc ( InstallationID , A.IdentifierShortItem, LangPref , 0 ) ) AS ContenDesc
				ON ContenDesc.DESCITM = A.IdentifierShortItem
			LEFT OUTER JOIN [SCDATA].F4104	B /*Item Cross Ref */
				ON  AddressType = 0			  /*Not join if AdrressType = 1 - Consumer*/
				AND B.IVAN8  = A.SCBillToNumber
				AND B.IVITM  = A.IdentifierShortItem
				AND B.IVXRT = CustCrossRefType
				AND CurrentJulianDate >= B.IVEFTJ AND CurrentJulianDate <= B.IVEXDJ
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.OrderNumber 
				AND Tax.DTDCTO = A.OrderType
				AND Tax.DTKCOO = A.OrderCompany 
				AND Tax.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.OrderNumber 
				AND TxHistory.DTDCTO = A.OrderType
				AND TxHistory.DTKCOO = A.OrderCompany 
				AND TxHistory.DTLNID = A.LineNumber 
			LEFT OUTER JOIN [SCDATA].FQ67008 DR
				ON DR.DR$9INID = SInvoiceINID
				AND DR.DR$9CNST = SInvoiceConstant 
				AND DR.DRKY = A.InvoiceType
			ORDER BY A.LINENUMBER ASC
			FOR FETCH ONLY;	

			
			
			/********************************Header*********************************/
			DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
			SELECT 
			A.SCBillToNumber,
			A.SCShipToNumber,
			A.AddressBookType,
			A.DeliveryInst1,
			A.DeliveryInst2,
			A.CustomerPO,
			A.OrderCompany AS OrderCompany,
			A.OrderType AS OrderType,
			A.OrderNumber AS OrderNumber,
			A.OrderDate,
			A.RequestedDate,
			A.MarketingCode,
			A.HoldOrderCode,
			A.CurrencyCode,
			A.CurrencyMode,
			A.CurrencyDesc,
			'N' AS IsOrderRestricted,
			A.OrderHeaderCompany,
			A.IsFreightOn,
			A.PaymentInstrument,
			COALESCE(BaseCurrencyCodeTMP,' ') AS BaseCurrencyCode,
			COALESCE(BaseCurrencyDescTMP, ' ') AS BaseCurrencyDesc,
			COALESCE(COALESCE(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices
			FROM SESSION.TMP_ORDERHEADER A
			LEFT OUTER JOIN [SCDATA].F4201TX Tax
				ON Tax.STDOCO = A.OrderNumber 
				AND Tax.STDCTO = A.OrderType
				AND Tax.STKCOO = A.OrderCompany
			LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
				ON TxHistory.STDOCO = A.OrderNumber 
				AND TxHistory.STDCTO = A.OrderType
				AND TxHistory.STKCOO = A.OrderCompany
			FOR FETCH ONLY;
			
			/********************************Detail*********************************/
			INSERT INTO SESSION.TMP_ORDERDETAIL
			(	
				OrderCompany,
				OrderType,
				OrderNumber,			
				SCBillToNumber,
				LineNumber,
				TransactionDate,
				RequestedDate,
				LineType,
				NextStatus,
				LastStatus,
				TaxableYN,
				TaxArea,
				TaxExplanationCode,
				DateInvoice,
				InvoiceCompany,
				InvoiceNumber,
				InvoiceType,
				ShipToID,
				SCShipToNumber,
				ShipToName,
				CostCenter,
				CostCenterHeader,
				Description1,
				Description2,
				ShippingQuantity,
				ShippedQuantity,
				UnitOfMeasure,
				PricingUnitOfMeasure,
				BackorderedQuantity,
				CanceledQuantity,
				AmountUnitPrice,
				ForeignUnitPrice,
				AmountExtPrice,
				ForeignExtPrice,
				InventoryInterface,
				CarrierID,
				ModeOfTransportation,
				IdentifierShortItem,
				LongItemNumber,
				AuxItemNumber,
				ShipLineNumber,
				OverridePrice,
				StockingType,
				RelatedKitItemNo,
				KitMasterLineNo,
				ComponentLineNumber,
				ShippedDate,
				Location,
				LotNumber,
				IsFreeGood,
				ParentLineNo,
				IsBasketRepricing
			)		
			(SELECT
				A.SDKCOO				AS OrderCompany,
				A.SDDCTO				AS OrderType,
				A.SDDOCO				AS OrderNumber,					
				A.SDAN8					AS SCBillToNumber,
				A.SDLNID				AS LineNumber,
				A.SDTRDJ				AS TransactionDate, 
				A.SDDRQJ				AS RequestedDate,
				A.SDLNTY				AS LineType,
				A.SDNXTR				AS NextStatus,
				A.SDLTTR				AS LastStatus,	
				A.SDTAX1				AS TaxableYN,
				A.SDTXA1				AS TaxArea,
				A.SDEXR1				AS TaxExplanationCode,
				A.SDIVD					AS DateInvoice,
				A.SDKCO					AS InvoiceCompany,
				A.SDDOC					AS InvoiceNumber,
				A.SDDCT					AS InvoiceType,
				A.SDSHAN				AS ShipToID,
				CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
				' '						AS ShipToName,
				A.SDMCU					AS CostCenter, 
				A.SDEMCU				AS CostCenterHeader,				
				A.SDDSC1				AS Description1,
				A.SDDSC2				AS Description2,
				A.SDUORG				AS ShippingQuantity,
				A.SDSOQS				AS ShippedQuantity,
				A.SDUOM					AS UnitOfMeasure,
				A.SDUOM4				AS PricingUnitOfMeasure,
				A.SDSOBK				AS BackorderedQuantity,
				A.SDSOCN				AS CanceledQuantity,
				A.SDUPRC				AS AmountUnitPrice,
				A.SDFUP					AS ForeignUnitPrice,
				A.SDAEXP				AS AmountExtPrice,
				A.SDFEA					AS ForeignExtPrice,
				COALESCE(LT.LFIVI,' ')	AS InventoryInterface,
				A.SDCARS				AS CarrierID,
				A.SDMOT					AS ModeOfTransportation,
				A.SDITM					AS IdentifierShortItem,
				A.SDLITM				AS LongItemNumber,
				A.SDAITM				AS AuxItemNumber,
				COALESCE(B.SD$9SLN,0)   AS ShipLineNumber,
				A.SDPROV				AS OverridePrice,
				IM.IMSTKT				AS StockingType,
				A.SDRLIT				AS RelatedKitItemNo,
				A.SDKTLN				AS KitMasterLineNo,
				A.SDCPNT				AS ComponentLineNumber,
				CASE A.SDADDJ 
					WHEN 0 THEN A.SDTRDJ 
					ELSE A.SDADDJ END	AS ShippedDate,
				A.SDLOCN				AS Location,
				A.SDLOTN				AS LotNumber,
				CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
				COALESCE(C.RFOGNO, 0 ) AS ParentLineNo,
				CASE A.SDSO08 WHEN '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
			FROM [SCDATA].F4211 A		/*Standard Sales OrderDetail*/
			LEFT OUTER JOIN [SCDATA].FQ674211 B 
				ON 	B.SDKCOO =  A.SDKCOO
				AND B.SDDOCO =  A.SDDOCO
				AND B.SDDCTO =	A.SDDCTO
				AND B.SDLNID =	A.SDLNID
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON  C.RFDOCO = A.SDDOCO
				AND C.RFDCTO = A.SDDCTO
				AND C.RFKCOO = A.SDKCOO
				AND C.RFLNID = A.SDLNID
			INNER JOIN [SCDATA].F40205	LT /*Line Type*/
				ON LT.LFLNTY = A.SDLNTY
			LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
				ON IM.IMITM = A.SDITM
			WHERE	
				A.SDDOCO = OrderNumber
				AND	A.SDDCTO = OrderType
				AND	A.SDKCOO = OrderCompany
				AND (CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
			UNION  ALL
			SELECT
				A.SDKCOO				AS OrderCompany,
				A.SDDCTO				AS OrderType,
				A.SDDOCO				AS OrderNumber,	
				A.SDAN8					AS SCBillToNumber,
				A.SDLNID				AS LineNumber,
				A.SDTRDJ				AS TransactionDate,
				A.SDDRQJ				AS RequestedDate,
				A.SDLNTY				AS LineType,
				A.SDNXTR				AS NextStatus,
				A.SDLTTR				AS LastStatus,	
				A.SDTAX1				AS TaxableYN,
				A.SDTXA1				AS TaxArea,
				A.SDEXR1				AS TaxExplanationCode,
				A.SDIVD					AS DateInvoice,
				A.SDKCO					AS InvoiceCompany,
				A.SDDOC					AS InvoiceNumber,
				A.SDDCT					AS InvoiceType,
				A.SDSHAN				AS ShipToID,
				CASE AddressType WHEN 1 THEN B.SD$9SHAN ELSE A.SDSHAN END AS SCShipToNumber,
				' '						AS ShipToName,
				A.SDMCU					AS CostCenter, 
				A.SDEMCU				AS CostCenterHeader,
				A.SDDSC1				AS Description1,
				A.SDDSC2				AS Description2,
				A.SDUORG				AS ShippingQuantity,
				A.SDSOQS				AS ShippedQuantity,
				A.SDUOM					AS UnitOfMeasure,
				A.SDUOM4				AS PricingUnitOfMeasure,
				A.SDSOBK				AS BackorderedQuantity,
				A.SDSOCN				AS CanceledQuantity,
				A.SDUPRC				AS AmountUnitPrice,
				A.SDFUP					AS ForeignUnitPrice,
				A.SDAEXP				AS AmountExtPrice,
				A.SDFEA					AS ForeignExtPrice,
				COALESCE(LT.LFIVI,' ')	AS InventoryInterface,
				A.SDCARS				AS CarrierID,
				A.SDMOT					AS ModeOfTransportation,
				A.SDITM					AS IdentifierShortItem,
				A.SDLITM,
				A.SDAITM,
				COALESCE(B.SD$9SLN,0)   AS ShipLineNumber,
				A.SDPROV				AS OverridePrice,
				IM.IMSTKT				AS StockingType,
				A.SDRLIT				AS RelatedKitItemNo,
				A.SDKTLN				AS KitMasterLineNo,
				A.SDCPNT				AS ComponentLineNumber,
				CASE A.SDADDJ 
					WHEN 0 THEN A.SDTRDJ 
					ELSE A.SDADDJ END	AS ShippedDate,
				A.SDLOCN				AS Location,
				A.SDLOTN				AS LotNumber,
				CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
				COALESCE(C.RFOGNO, 0 ) AS ParentLineNo,
				CASE A.SDSO08 WHEN '1' THEN 'Y' ELSE 'N' END AS IsBasketRepricing
			FROM 	[SCDATA].F42119 A 
			LEFT OUTER JOIN [SCDATA].FQ674211 B 
				ON  A.SDDOCO = B.SDDOCO 
				AND A.SDDCTO = B.SDDCTO 
				AND A.SDKCOO = B.SDKCOO										 
				AND A.SDLNID = B.SDLNID
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON  C.RFDOCO = A.SDDOCO
				AND C.RFDCTO = A.SDDCTO
				AND C.RFKCOO = A.SDKCOO
				AND C.RFLNID = A.SDLNID
			INNER JOIN [SCDATA].F40205	LT --Line Type
				ON LT.LFLNTY = A.SDLNTY
			LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
				ON IM.IMITM = A.SDITM
			WHERE A.SDDOCO = OrderNumber
			AND	A.SDDCTO = OrderType
			AND	A.SDKCOO = OrderCompany	
			AND (CancelLn = 'Y' OR (A.SDLTTR < '980' OR A.SDLTTR = '995'))
			);
			
			
			/********************************Header*********************************/
			INSERT INTO SESSION.TMP_ORDERHEADER
			(				
				SCBillToNumber,
				SCShipToNumber,
				AddressBookType,
				DeliveryInst1,
				DeliveryInst2,
				CustomerPO,
				OrderCompany,
				OrderType,
				OrderNumber,					
				OrderDate,
				RequestedDate,
				MarketingCode,
				HoldOrderCode,
				CurrencyCode,
				CurrencyMode,
				CurrencyDesc,
				OrderHeaderCompany,
				IsFreightOn,
				PaymentInstrument
			)
			SELECT	
				CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
				CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
				COALESCE(B.SH$9TYP,0)			AS AddressBookType,
				A.SHDEL1 AS DeliveryInst1, 
				A.SHDEL2 AS DeliveryInst2,
				A.SHVR01 AS CustomerPO,
				A.SHKCOO AS OrderCompany,
				A.SHDCTO AS OrderType,
				A.SHDOCO AS OrderNumber,
				A.SHTRDJ AS OrderDate,
				A.SHDRQJ AS RequestedDate,
				COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
				A.SHHOLD AS HoldOrderCode,
				A.SHCRCD AS CurrencyCode,
				A.SHCRRM AS CurrencyMode,
				C.CVDL01 AS CurrencyDesc,
				A.SHCO	    AS	OrderHeaderCompany,
				'Y'		 AS IsFreightOn,          /*********** Y is Freith ON , N is Freigth OFF   **************/
				A.SHRYIN AS PaymentInstrument
			FROM [SCDATA].F4201 A 
			LEFT OUTER JOIN [SCDATA].FQ674201 B 
				ON	A.SHDOCO = B.SHDOCO
				AND A.SHDCTO = B.SHDCTO
				AND A.SHKCOO = B.SHKCOO
			LEFT OUTER JOIN [SCDATA].F0013 C
				ON A.SHCRCD = C.CVCRCD						
			WHERE A.SHDOCO = OrderNumber
			AND	A.SHDCTO = OrderType
			AND	A.SHKCOO = OrderCompany
			UNION ALL 
			SELECT	
					CASE AddressType WHEN 1 THEN B.SH$9AN8 ELSE A.SHAN8 END	AS SCBillToNumber,
					CASE AddressType WHEN 1 THEN B.SH$9SHAN ELSE A.SHSHAN END	AS SCShipToNumber,
					COALESCE(B.SH$9TYP,0)			AS AddressBookType,
					A.SHDEL1 AS DeliveryInst1, 
					A.SHDEL2 AS DeliveryInst2,
					A.SHVR01 AS CustomerPO,
					A.SHKCOO AS OrderCompany,
					A.SHDCTO AS OrderType,
					A.SHDOCO AS OrderNumber,
					A.SHTRDJ AS OrderDate,
					A.SHDRQJ AS RequestedDate,
					COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
					A.SHHOLD AS HoldOrderCode,
					A.SHCRCD AS CurrencyCode,
					A.SHCRRM AS CurrencyMode,
					C.CVDL01 AS CurrencyDesc,
					A.SHCO	    AS	OrderHeaderCompany,
					'Y' AS IsFreightOn,      /*********** Y is Freith ON , N is Freigth OFF   **************/
					A.SHRYIN AS PaymentInstrument
			FROM 	[SCDATA].F42019 A 
			LEFT OUTER JOIN [SCDATA].FQ674201 B 
				ON	A.SHDOCO = B.SHDOCO
				AND A.SHDCTO = B.SHDCTO
				AND A.SHKCOO = B.SHKCOO
			LEFT OUTER JOIN [SCDATA].F0013 C
				ON A.SHCRCD = C.CVCRCD
			WHERE A.SHDOCO = OrderNumber
			AND	A.SHDCTO = OrderType
			AND	A.SHKCOO = OrderCompany;
			
			/* Update the field IsFreightOn  when is FREIGHT OFF*/	
			SET Freight = (SELECT COUNT(1) FROM [SCDATA].FQ67496 WHERE FRKCOO = OrderCompany AND FRDCTO = OrderType AND FRDOCO = OrderNumber);
			
			IF(Freight = 0) THEN /* When the ship line Number is 0 the order is freight OFF*/
				UPDATE SESSION.TMP_ORDERHEADER Header
				   SET Header.IsFreightOn = 'N';  /* Y is Freight Off, N is Freigh On*/ 	   
			END IF;
			
			--Load BillTo Variables From Order Header
			SELECT SCBillToNumber,SCShipToNumber,AddressBookType, CurrencyMode
			INTO ScBillTo,ScShipTo,AddressType, CurrencyModeTMP
			FROM SESSION.TMP_ORDERHEADER;
	
			IF (CurrencyModeTMP = 'F')THEN
				CALL [SCLIBRARY].CMM_GetConstantValue ('FOREGCURYN', ForeignINID, ForeignConstant);
				IF(ForeignConstant = 'N') THEN  /*Foreign is OFF*/		
					SELECT
						B.CCCRCD, C.CVDL01 INTO BaseCurrencyCodeTMP, BaseCurrencyDescTMP	
					FROM SESSION.TMP_ORDERHEADER A
					INNER JOIN [SCDATA].F0010 B
					ON B.CCCO = A.OrderCompany
					LEFT OUTER JOIN [SCDATA].F0013 C
					ON B.CCCRCD = C.CVCRCD;
				END IF;
			END	IF;
				
			OPEN TEMP_CURSOR2;	--HEADER
			CALL [SCLIBRARY].COM_GetSalesOrderInfo_BillTo(OrderCompany,OrderType,OrderNumber,ScBillTo,AddressType,ContactID);

			SELECT COUNT(1) INTO IsOverrideShipTo 
			FROM [SCDATA].F4006
			WHERE OADOCO = OrderNumber			
				AND OADCTO = OrderType
				AND OAKCOO = OrderCompany  
				AND OAANTY = 2; 
		
			IF (IsOverrideShipTo > 0) THEN
				UPDATE SESSION.TMP_ORDERDETAIL
				SET SCShipToNumber = ScShipTo, ShipLineNumber =1;	
			END IF;

			INSERT INTO	SESSION.COM_GETSALESORDERSHIPMENTS_A
			SELECT DISTINCT
				A.OrderCompany,
				A.OrderType,
				A.OrderNumber,
				A.CostCenter, 
				A.ShipLineNumber,
				A.SCShipToNumber,
				A.LineType
			FROM SESSION.TMP_ORDERDETAIL A;
			CALL [SCLIBRARY].COM_GetSalesOrderShipments(InstallationID, OrderCompany, OrderType, OrderNumber, ScShipTo, AddressType, Freight, IsOverrideShipTo);	
			
			IF(RetrieveWebContentInfo = 0) THEN --CMS
				OPEN TEMP_CURSOR1;	--DETAIL
			ELSE   --POS
				OPEN TEMP_CURSOR3;
			END IF;
			CALL [SCLIBRARY].COM_GetSalesOrderInfo_Payments(OrderCompany,OrderType,OrderNumber);

			/*Configured Items*/
			CALL [SCLIBRARY].COM_GetSOConfiguredLineList(OrderCompany, OrderType, OrderNumber, LangPref);

			IF (RetrieveReturnInfo = 1 ) THEN
				CALL [SCLIBRARY].COM_GetSOReturnLineList (InstallationID, OrderCompany, OrderType, OrderNumber);
			END IF;

		END;
	END;
END;
-- DROP SPECIFIC PROCEDURE [SCLIBRARY].COM_GetSalesOrderLineSrchList
-- #desc							Search Orders
-- #bl_class						Premier.Commerce.SalesOrderSearchList.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationId			Installation ID
-- #param AddressNumber				Address Number
-- #param AddressBookType			Address Book Type
-- #param ItemNumber				Item Number
-- #param TransactionDateFrom		Transaction Date From
-- #param TransactionDateTo			Transaction Date To
-- #param ShipToNumber				Ship To Number
-- #param DisplayItemSetting		Display Item Setting
-- #param CustomerReference			Customer Reference
-- #param SortBy					Column to filter by ItemNumber (Display ITM) OrderType,
--									OrderNumber, OrderDate(Default Value), OrderedQuantity */
-- #param SortDir					Direction to filter A = Ascendant, D = Descendant-DEFAULT Value
-- #param PageIndex					PageIndex
-- #param PageSize					PageSize

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSalesOrderLineSrchList
(
	IN InstallationID	    GRAPHIC(3) CCSID 13488 ,
	IN AddressBookType		NUMERIC(15,0),
	IN AddressNumber		NUMERIC(15,0),
	IN ItemNumber			NUMERIC(15,0),
	IN TransactionDateFrom	NUMERIC(15,0),
	IN TransactionDateTo	NUMERIC(15,0),
	IN ShipToNumber		    NUMERIC(15,0),
	IN DisplayItemSetting	GRAPHIC(4) CCSID 13488,
	IN CustomerReference		VARGRAPHIC(25) CCSID 13488,
	IN SortBy				VARCHAR(40),
	IN SortDir				VARCHAR(3),
	IN PageIndex			INTEGER,
	IN PageSize				INTEGER
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetSalesOrderLineSrchList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT

BEGIN
	/* Paging */
	DECLARE ROWSTART INT DEFAULT 0;
	DECLARE ROWEND INT DEFAULT 0;
    DECLARE SORT_DYNAMIC VARGRAPHIC ( 80 ) CCSID 13488 ; 
    DECLARE SORTDIR_DYNAMIC VARGRAPHIC ( 5 ) CCSID 13488 ; 

	DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE CONS_WHERE_DYNAMIC			VARGRAPHIC(10000) CCSID 13488;
	DECLARE RESTRIC_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE DISPLAY_ITEM_DYNAMIC		VARGRAPHIC(10000) CCSID 13488;
    DECLARE FROM_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;

	DECLARE SOrderRestric		GRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID			GRAPHIC(3) CCSID 13488;
	DECLARE SOrderConstant		GRAPHIC(10) CCSID 13488;

	DECLARE FreightLnINID		GRAPHIC(3) CCSID 13488 ;
	DECLARE FreightLnType		VARGRAPHIC(2) CCSID 13488 ;
	DECLARE DiscountLnINID		GRAPHIC(3) CCSID 13488 ;
	DECLARE DiscountLnType		GRAPHIC(2) CCSID 13488 ;
	DECLARE TrackingLnINID		GRAPHIC(3) CCSID 13488 ;
	DECLARE TrackingLnType		GRAPHIC(2) CCSID 13488 ;
	DECLARE SurchargeLnINID		GRAPHIC(3) CCSID 13488 ;
	DECLARE SurchargeLnType		GRAPHIC(2) CCSID 13488 ;

	/* Read Account Receivable company constant */
	DECLARE CompanyConstant			VARGRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488 ;

	/* Read Account Receivable company constant */
	DECLARE CancelLn			VARGRAPHIC(1) CCSID 13488;
	DECLARE CancelLnINID	GRAPHIC(3) CCSID 13488 ;

    DECLARE DefLangValue	   GRAPHIC(2) CCSID 13488;
    DECLARE DefLangINID        GRAPHIC(3) CCSID 13488 ;
	
	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC ;

		SET WHERE_DYNAMIC = '';
		SET CONS_WHERE_DYNAMIC = '';
		SET RESTRIC_DYNAMIC = '';
		SET DISPLAY_ITEM_DYNAMIC = '';
        SET FROM_DYNAMIC = '';


		SET SOrderConstant = 'SO_RESTRIC';
		SET SOrderINID = InstallationID;
		/* Gets the Sales Order Document Restrictions */
		CALL [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);

		/* Gets the Freight Line Type */
		SET FreightLnINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue('FREIGHTLN', FreightLnINID, FreightLnType);

		/* Gets the Discount Line Type */
		SET DiscountLnINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue('DISCOUNTLN', DiscountLnINID, DiscountLnType);

		/* Gets the Tracking Line Type */
		SET TrackingLnINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue('TRACKINGLN', TrackingLnINID, TrackingLnType);

		/* Gets the Surcharge Line Type */
		SET SurchargeLnINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue('SURCHARGLN', SurchargeLnINID, SurchargeLnType);

		/* Read Account Receivable company constant */
		SET ConstantInstallation = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue( 'INSCOMPANY', ConstantInstallation, CompanyConstant );

		/* Gets the Order History Status */
        SET CancelLnINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue( 'YNCANCELLN', CancelLnINID, CancelLn );
        
        /*Gets Default Language */
        SET DefLangINID = InstallationID;
        CALL [SCLIBRARY].CMM_GetConstantValue( 'DEFLANGPRF', DefLangINID, DefLangValue );
           
    
		/* Paging Calculation Set the first row to be selected*/
		
		SET ROWSTART = (PageSize * PageIndex) - PageSize + 1;
		/* Set the last row to be selected */
		SET ROWEND = PageIndex * PageSize;

		-------------------------------------------------------------------------------
		--Dynamic query condition
        -------------------------------------------------------------------------------
        
        -- Dynamic query*/
		IF (DisplayItemSetting = N'LITM') THEN
			SET DISPLAY_ITEM_DYNAMIC = ' LongItemNumber ';
        ELSEIF (DisplayItemSetting = N'AITM') THEN
			SET DISPLAY_ITEM_DYNAMIC = ' AuxItemNumber ';
		ELSE 
			SET DISPLAY_ITEM_DYNAMIC = ' ItemNumber ';	
		END IF;

        /* Dynamic sort direction statement */ 
        SET SORTDIR_DYNAMIC = CASE SORTDIR  WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 
        
        SET SORT_DYNAMIC = CASE SORTBY 
                WHEN 'OrderDate'     THEN 'TransactionDate ' || SORTDIR_DYNAMIC || ', OrderNumber DESC' 
                WHEN 'OrderType'     THEN 'OrderType ' || SORTDIR_DYNAMIC || ', TransactionDate DESC' 
                WHEN 'OrderNumber'   THEN 'OrderNumber ' || SORTDIR_DYNAMIC || ', TransactionDate DESC' 
                WHEN 'ProductNumber'    THEN DISPLAY_ITEM_DYNAMIC || SORTDIR_DYNAMIC || ', TransactionDate DESC' 
                WHEN 'OrderedQuantity' THEN 'Quantity'  || SORTDIR_DYNAMIC || ', TransactionDate DESC' 
                WHEN 'CustomerReference' THEN 'CustomerReference '  || SORTDIR_DYNAMIC || ', TransactionDate DESC' 
                ELSE 'TransactionDate DESC, OrderNumber DESC ' 
         END ; 
             
        IF (TransactionDateFrom <> N'0') THEN
            SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND B.SDTRDJ BETWEEN ? AND ? ';
        ELSE
            SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR (? IS NULL OR ? IS NULL))';
        END IF;

        IF (ItemNumber IS NOT NULL) THEN
            SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND B.SDITM = ? ';
        ELSE
            SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
        END IF;

		IF (AddressBookType = 0) THEN
			IF (ShipToNumber IS NOT NULL) THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND B.SDSHAN = ? ';
			ELSE
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
			END IF;
		ELSE 
			IF (ShipToNumber IS NOT NULL) THEN
				SET CONS_WHERE_DYNAMIC = N' AND B.SD$9SHAN = ? ';
			ELSE
				SET CONS_WHERE_DYNAMIC = N' AND (1 = 1 OR ? IS NULL) ';
			END IF;
		END IF;

        IF (CancelLn = N'N') THEN
            SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (B.SDLTTR < ''980'' OR B.SDLTTR = ''995'') ';
        END IF;

		
		IF (CustomerReference <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(A.SHVR01) LIKE ''%''||?||''%''';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;

		IF (AddressBookType = 0) THEN
			SET WHERE_DYNAMIC = N' WHERE B.SDAN8 = ? AND B.SDLNTY <> ? AND B.SDLNTY <> ? AND B.SDLNTY <> ? AND B.SDLNTY <> ? ' || WHERE_DYNAMIC || ' ' ;
		ELSE 
			SET WHERE_DYNAMIC = N' WHERE B.SDLNTY <> ? AND B.SDLNTY <> ? AND B.SDLNTY <> ? AND B.SDLNTY <> ? ' || WHERE_DYNAMIC || ' ' ;
			SET CONS_WHERE_DYNAMIC = N' WHERE B.SD$9AN8 = ? ' || CONS_WHERE_DYNAMIC;
		END IF;
		
		/* Dynamic query from*/
        
        IF (CompanyConstant = N'L' ) THEN
			SET RESTRIC_DYNAMIC = RESTRIC_DYNAMIC || N' AND EXISTS(SELECT 1 FROM [SCDATA].FQ679912 CR
										WHERE  CR.CI$9INID = '''||ConstantInstallation||N'''	
                                        AND CR.CICO = B.SDKCOO) ';
		END IF;

		IF (SOrderRestric = N'1' ) THEN
			SET RESTRIC_DYNAMIC = RESTRIC_DYNAMIC || N' AND EXISTS(SELECT 1 FROM [SCDATA].FQ67008 DR										
										WHERE  DR.DR$9INID = '''||SOrderINID||'''	
                                        AND DR.DR$9CNST = '''||SOrderConstant||'''
                                        AND DR.DRKY  = B.SDDCTO) ';
		END IF;

        IF (AddressBookType = 0) THEN
            SET FROM_DYNAMIC = N' WITH CTE AS (
            SELECT 
        		B.SDDOCO  AS OrderNumber, 
        		B.SDDCTO  AS OrderType, 
        		B.SDKCOO  AS Company,    
        		B.SDLNID  AS LineNumber, 
        		B.SDLNTY  AS LineType,
        		B.SDUPRC  AS UnitPrice,
        		B.SDFUP   AS ForeignUnitPrice,
        		B.SDAEXP  AS ExtendedPrice,
        		B.SDFEA   AS ForeignExtPrice,
        		B.SDUORG  AS Quantity,
        		B.SDSOQS  AS ShippedQuantity,
        		B.SDITM   AS ItemNumber,
        		B.SDLITM  AS LongItemNumber,
        		B.SDAITM  AS AuxItemNumber,
        		B.SDUOM   AS UnitOfMeasure, 
        		B.SDUOM4  AS PricingUnitOfMeasure,
        		B.SDSHAN  AS SCShipToNumber,
				0 AS AddressBookType,
        		B.SDNXTR  AS NextStatus,
        		B.SDLTTR  AS LastStatus,
        		B.SDMCU   AS BusinessUnit,
        		B.SDEMCU  AS BusinessUnitHeader,
        		B.SDTAX1  AS TaxableYN, 
        		B.SDTXA1  AS TaxArea,
        		B.SDEXR1  AS TaxExplanationCode,
        		B.SDSOBK  AS BackorderedQuantity,
        		B.SDTRDJ  AS TransactionDate,
        		B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2
        	FROM [SCDATA].F4211 B
			INNER JOIN [SCDATA].F4201 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
			' || WHERE_DYNAMIC 
			|| RESTRIC_DYNAMIC ||N'
        	UNION ALL
        	SELECT  
        		B.SDDOCO  AS OrderNumber, 
        		B.SDDCTO  AS OrderType, 
        		B.SDKCOO  AS Company,    
        		B.SDLNID  AS LineNumber, 
        		B.SDLNTY  AS LineType,
        		B.SDUPRC  AS UnitPrice,
        		B.SDFUP   AS ForeignUnitPrice,
        		B.SDAEXP  AS ExtendedPrice,
        		B.SDFEA   AS ForeignExtPrice,
        		B.SDUORG  AS Quantity,
        		B.SDSOQS  AS ShippedQuantity,
        		B.SDITM   AS ItemNumber,
        		B.SDLITM  AS LongItemNumber,
        		B.SDAITM  AS AuxItemNumber,
        		B.SDUOM   AS UnitOfMeasure, 
        		B.SDUOM4  AS PricingUnitOfMeasure,
        		B.SDSHAN  AS SCShipToNumber,
				0 AS AddressBookType,
        		B.SDNXTR  AS NextStatus,
        		B.SDLTTR  AS LastStatus,
        		B.SDMCU   AS BusinessUnit,
        		B.SDEMCU  AS BusinessUnitHeader,
        		B.SDTAX1  AS TaxableYN, 
        		B.SDTXA1  AS TaxArea,
        		B.SDEXR1  AS TaxExplanationCode,
        		B.SDSOBK  AS BackorderedQuantity,
        		B.SDTRDJ  AS TransactionDate,
        		B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2
        	FROM  [SCDATA].F42119 B
			INNER JOIN [SCDATA].F42019 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
			' || WHERE_DYNAMIC 
			|| RESTRIC_DYNAMIC ||N'
			) ';
        ELSE
            SET FROM_DYNAMIC = N' WITH F4211_F42119 AS (
			SELECT 
				B.SDDOCO  AS OrderNumber, 
				B.SDDCTO  AS OrderType, 
				B.SDKCOO  AS Company,    
				B.SDLNID  AS LineNumber, 
				B.SDLNTY  AS LineType,
				B.SDUPRC  AS UnitPrice,
				B.SDFUP   AS ForeignUnitPrice,
				B.SDAEXP  AS ExtendedPrice,
				B.SDFEA   AS ForeignExtPrice,
				B.SDUORG  AS Quantity,
				B.SDSOQS  AS ShippedQuantity,
				B.SDITM   AS ItemNumber,
        		B.SDLITM  AS LongItemNumber,
        		B.SDAITM  AS AuxItemNumber,
				B.SDUOM AS UnitOfMeasure, 
				B.SDUOM4  AS PricingUnitOfMeasure,
				B.SDNXTR AS NextStatus,
				B.SDLTTR AS LastStatus,
				B.SDMCU AS BusinessUnit,
				B.SDEMCU  AS BusinessUnitHeader,
				B.SDTAX1 AS TaxableYN, 
				B.SDTXA1  AS TaxArea,
				B.SDEXR1  AS TaxExplanationCode,
				B.SDSOBK  AS BackorderedQuantity,
				B.SDTRDJ  AS TransactionDate,
				B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2
			FROM  [SCDATA].F4211 B
			INNER JOIN [SCDATA].F4201 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
			' || WHERE_DYNAMIC 
			|| RESTRIC_DYNAMIC ||N'
        	UNION ALL
        	SELECT 
				B.SDDOCO  AS OrderNumber, 
				B.SDDCTO  AS OrderType, 
				B.SDKCOO  AS Company,    
				B.SDLNID  AS LineNumber, 
				B.SDLNTY  AS LineType,
				B.SDUPRC  AS UnitPrice,
				B.SDFUP  AS ForeignUnitPrice,
				B.SDAEXP  AS ExtendedPrice,
				B.SDFEA  AS ForeignExtPrice,
				B.SDUORG  AS Quantity,
				B.SDSOQS  AS ShippedQuantity,
				B.SDITM AS ItemNumber,
        		B.SDLITM  AS LongItemNumber,
        		B.SDAITM  AS AuxItemNumber,
				B.SDUOM AS UnitOfMeasure, 
				B.SDUOM4  AS PricingUnitOfMeasure,
				B.SDNXTR AS NextStatus,
				B.SDLTTR AS LastStatus,
				B.SDMCU AS BusinessUnit,
				B.SDEMCU  AS BusinessUnitHeader,
				B.SDTAX1 AS TaxableYN, 
				B.SDTXA1  AS TaxArea,
				B.SDEXR1  AS TaxExplanationCode,
				B.SDSOBK  AS BackorderedQuantity,
				B.SDTRDJ  AS TransactionDate,
				B.SDRLIT  AS RelatedKitItemNo,
				A.SHVR01 AS CustomerReference,
				A.SHCRCD  AS CurrencyCode,
    			A.SHCRRM  AS CurrencyMode,
    			A.SHHOLD  AS HoldOrderCode,
				B.SDDSC1  AS Description1,
				B.SDDSC2  AS Description2
			FROM  [SCDATA].F42119 B 
			INNER JOIN [SCDATA].F42019 A 
    			ON  A.SHDOCO = B.SDDOCO  
    			AND A.SHDCTO = B.SDDCTO
				AND A.SHKCOO = B.SDKCOO
				AND (RTRIM(B.SDRLIT) = '''')
          ' || WHERE_DYNAMIC 
          || RESTRIC_DYNAMIC ||N'
		), CTE AS(
			SELECT 
				A.OrderNumber, 
				A.OrderType, 
				A.Company,    
				A.LineNumber, 
				A.LineType,
				A.UnitPrice,
				A.ForeignUnitPrice,
				A.ExtendedPrice,
				A.ForeignExtPrice,
				A.Quantity,
				A.ShippedQuantity,
				A.ItemNumber,
				A.LongItemNumber,
				A.AuxItemNumber,
				A.UnitOfMeasure, 
				A.PricingUnitOfMeasure,
				B.SD$9SHAN  AS SCShipToNumber,
				1 AS AddressBookType,
				A.NextStatus,
				A.LastStatus,
				A.BusinessUnit,
				A.BusinessUnitHeader,
				A.TaxableYN, 
				A.TaxArea,
				A.TaxExplanationCode,
				A.BackorderedQuantity,
				A.TransactionDate,
				A.RelatedKitItemNo,
				A.CustomerReference,
				A.CurrencyCode,
    			A.CurrencyMode,
    			A.HoldOrderCode,
				A.Description1,
				A.Description2
			FROM F4211_F42119 A
			INNER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.OrderNumber
				AND B.SDDCTO = A.OrderType 
				AND B.SDKCOO = A.Company 
				AND B.SDLNID = A.LineNumber 
				AND B.SD$9TYP = 1
			'|| CONS_WHERE_DYNAMIC ||N'
		) ';
        END  IF;


		SET SQL_DYNAMIC = FROM_DYNAMIC || ',
        PAGING AS (
            SELECT
            B.OrderNumber,
            B.OrderType,
            B.Company,
            B.LineNumber,
            B.LineType,
            B.UnitPrice,
            B.ForeignUnitPrice,
            B.ExtendedPrice,
            B.ForeignExtPrice,
            B.Quantity,
            B.ShippedQuantity,
            B.ItemNumber,
			B.LongItemNumber,
			B.AuxItemNumber,
            B.UnitOfMeasure,
            B.PricingUnitOfMeasure,
            B.SCShipToNumber,
            B.AddressBookType,
            B.NextStatus,
            B.LastStatus,
            B.BusinessUnit,
            B.BusinessUnitHeader,
            B.TaxableYN,
            B.TaxArea,
            B.TaxExplanationCode,
            B.BackorderedQuantity,
            B.TransactionDate,
            B.RelatedKitItemNo,
			B.CustomerReference,
			B.CurrencyCode,
			B.CurrencyMode,
			B.HoldOrderCode,
			B.Description1,
			B.Description2,
            ROW_NUMBER() OVER ( ORDER BY '|| SORT_DYNAMIC ||N') AS RNUM
            FROM CTE B
    )
    SELECT
        B.OrderNumber,
        B.OrderType,
        B.Company,
        B.LineNumber,
        B.LineType,
        B.UnitPrice,
        B.ForeignUnitPrice,
        B.ExtendedPrice,
        B.ForeignExtPrice,
        B.Quantity,
        B.ShippedQuantity,
        B.ItemNumber,
		B.LongItemNumber,
		B.AuxItemNumber,
        B.UnitOfMeasure,
        B.PricingUnitOfMeasure,
        B.SCShipToNumber,
        B.AddressBookType,
        B.NextStatus,
        B.LastStatus,
        B.BusinessUnit,
        B.BusinessUnitHeader,
        B.TaxableYN,
        B.TaxArea,
        B.TaxExplanationCode,
        B.BackorderedQuantity,
        B.TransactionDate,
        B.RelatedKitItemNo,
		B.CustomerReference,
		B.CurrencyCode,
    	B.CurrencyMode,
    	B.HoldOrderCode,
		B.Description1,
		B.Description2,
    	COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP, 0)   AS TaxedExtendedPrice,
    	COALESCE(Tax.DTTFEA, TxHistory.DTTFEA, 0)    AS ForeignTaxedExtPrice,
    	COALESCE(Tax.DTETA, TxHistory.DTETA, 0)     AS ExtendedTaxAmount,
    	COALESCE(Tax.DTFETA, TxHistory.DTFETA, 0)    AS ForeignExtTaxAmount,
        COALESCE(TaxHeader.STUTP, TxHistoryHeader.STUTP, 0)  AS UseTaxedPrices,
        (SELECT COUNT(1) FROM PAGING) AS TotalRowCount 
    FROM
    PAGING B 
		LEFT OUTER JOIN [SCDATA].F4201 A
			ON  A.SHDOCO = B.OrderNumber  
			AND A.SHDCTO = B.OrderType 
			AND A.SHKCOO = B.Company
    	LEFT OUTER JOIN [SCDATA].F4211TX Tax
    		ON Tax.DTDOCO = B.OrderNumber 
    		AND Tax.DTDCTO = B.OrderType 
    		AND Tax.DTKCOO = B.Company 
    		AND Tax.DTLNID = B.LineNumber
    	LEFT OUTER JOIN [SCDATA].F4201TX TaxHeader
    		ON TaxHeader.STDOCO = B.OrderNumber 
    		AND TaxHeader.STDCTO = B.OrderType 
    		AND TaxHeader.STKCOO = B.Company
		LEFT OUTER JOIN [SCDATA].F42019 C  
			ON  C.SHDOCO = B.OrderNumber 
			AND C.SHDCTO = B.OrderType 
			AND C.SHKCOO = B.Company 
    	LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
    		ON TxHistory.DTDOCO = B.OrderNumber 
    		AND TxHistory.DTDCTO = B.OrderType
    		AND TxHistory.DTKCOO = B.Company 
    		AND TxHistory.DTLNID = B.LineNumber
    	LEFT OUTER JOIN [SCDATA].F42019TX TxHistoryHeader
    		ON TxHistoryHeader.STDOCO = B.OrderNumber 
    		AND TxHistoryHeader.STDCTO = B.OrderType
    		AND TxHistoryHeader.STKCOO = B.Company 
    WHERE ((? = 0 OR ? = 0 ) OR (RNUM BETWEEN ? AND ?)) ';
 
		PREPARE V_DYNAMIC FROM SQL_DYNAMIC ; 

		IF (AddressBookType = 0) THEN
			OPEN TEMP_CURSOR1 USING AddressNumber, FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, TransactionDateTo,
                                ItemNumber, ShipToNumber, CustomerReference, AddressNumber, FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, 
                                TransactionDateTo, ItemNumber, ShipToNumber, CustomerReference, PageIndex, PageSize,
                                ROWSTART, ROWEND;
		ELSE 
			OPEN TEMP_CURSOR1 USING FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, TransactionDateTo, 
                                ItemNumber, CustomerReference, FreightLnType, DiscountLnType, TrackingLnType, SurchargeLnType, TransactionDateFrom, 
                                TransactionDateTo, ItemNumber, CustomerReference, AddressNumber, ShipToNumber, PageIndex, PageSize, 
                                ROWSTART, ROWEND;
		END IF;
	END;
END ;
-- #desc						Get Scheduled Payment List
-- #bl_class					Premier.Commerce.ScheduledPaymentList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InvoiceNumber			Invoice Number
-- #param InvoiceType			Invoice Type
-- #param InvoiceCompany		Invoice Company
-- #param PayItem				Pay Item

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetScheduledPaymentList
(
	IN InvoiceNumber		NUMERIC(8,0),
	IN InvoiceType			GRAPHIC(2) CCSID 13488,
	IN InvoiceCompany		GRAPHIC(5) CCSID 13488,
	IN PayItem				GRAPHIC(3) CCSID 13488
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL
SPECIFIC [SCLIBRARY].COM_GetScheduledPaymentList
NOT DETERMINISTIC
MODIFIES SQL DATA
CALLED ON NULL INPUT

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	
		PDDOC		AS InvoiceNumber,
		PDDCT		AS InvoiceType,
		PDKCO		AS InvoiceCompany,
		PDSFX		AS PayItem,
		PHRYIN		AS PaymentInstrument,
		[SCLIBRARY].CMM_GetUserDefinedCodeFnc(N'00', N'PY', PHRYIN, N'*') AS PaymentDescription,
		PH$9UKID	AS Mode,
		PHPST		AS Status,
		PHDPR		AS PaymentDate,
		PDAAP		AS AmountToApply,
		PHCBNK		AS BARerefence,
		PHCRCI		AS CCReference,
		AYCBNK		AS BAOFReference,
		CCCRCI		AS CCOFReference
	FROM [SCDATA].FQ670314 A
	INNER JOIN [SCDATA].FQ670313 B
		ON B.PH$9PYID = A.PD$9PYID
	LEFT OUTER JOIN [SCDATA].F0030 C
		ON C.AYUKID = B.PHUKID
	LEFT OUTER JOIN [SCDATA].FQ67CCIF D
		ON D.CC$9AN8 = B.PH$9AN8 AND D.CCSEQ = B.PHSEQ
	WHERE A.PDDOC = InvoiceNumber 
		AND A.PDDCT = InvoiceType 
		AND A.PDKCO = InvoiceCompany 
		AND (PayItem = N'*' OR A.PDSFX = PayItem)
	FOR FETCH ONLY;


	OPEN TEMP_CURSOR1;
END;
-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A
		
-- #param InstallationID		Installation Id
-- #param OrderNumber			Order Number
-- #param Country		        Country
-- #param ZipCode		        Zip Code

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSONumbyCountry
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN Country				GRAPHIC(3) CCSID 13488,
	IN OrderNumber			NUMERIC(8,0),	
	IN ZipCode				GRAPHIC(12) CCSID 13488
)	

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSONumbyCountry
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE DocumentNumber		NUMERIC(8,0);
	DECLARE OrderType			GRAPHIC(2) CCSID 13488;
	DECLARE OrderCompany		GRAPHIC(5) CCSID 13488;
	DECLARE AddressType	        DECIMAL(10,0);
	DECLARE AddressNumber		NUMERIC(8,0); 	
	
	DECLARE OrderWasFound		INT;
	
	DECLARE SOrderRestric	VARGRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID      GRAPHIC(3) CCSID 13488;
	DECLARE SOrderConstant	GRAPHIC(10) CCSID 13488;
	/* Gets the Sales Order Document Restrictions	*/
    SET SOrderConstant = 'SO_RESTRIC';
    SET SOrderINID = InstallationID;
    CALL [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);
    
    SET OrderWasFound = 0;
    
    BEGIN
 
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			DocumentNumber	AS OrderNumber,
			OrderType		AS OrderType, 
			OrderCompany	AS OrderCompany	
		FROM SYSIBM.SYSDUMMY1
		FOR FETCH ONLY;

	
		 /* Validate the exist order*/
		SELECT 
				SHDOCO,
				SHDCTO,
				SHKCOO,
				SHAN8
		INTO 
			DocumentNumber, OrderType, OrderCompany , AddressNumber 
		FROM 
		(	
				SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F4201
				WHERE SHDOCO = OrderNumber
				UNION ALL
				SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F42019
				WHERE SHDOCO = OrderNumber				
		) AS A
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SOrderINID
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		WHERE
			(SOrderRestric = '0' OR DR.DRKY IS NOT NULL);
    		
	
	  IF(DocumentNumber > 0)THEN 
			/*Search billing override address*/
			IF EXISTS (SELECT 1 FROM [SCDATA].F4006
					WHERE OAANTY = 1 
					AND OADOCO = DocumentNumber 
					AND OADCTO = OrderType
					AND OAKCOO =  OrderCompany 
					AND OACTR =  Country
					AND (ZipCode = '*' OR OAADDZ = ZipCode)) THEN 
				SET OrderWasFound = 1;
			ELSE
				/* Search if the order is an Smart Commerce order */
				SELECT 
					SH$9TYP, 
					SH$9AN8 
				INTO
					AddressType, AddressNumber  
				FROM [SCDATA].FQ674201
				WHERE SHDOCO =  DocumentNumber  
					AND  SHDCTO = OrderType
					AND  SHKCOO= OrderCompany;
					
				/*CONSUMER */
				IF(AddressType = 1)THEN 
					IF EXISTS (SELECT 1 FROM  [SCDATA].FQ670302 
							WHERE PR$9AN8= AddressNumber
							AND   PRCTR = Country
							AND  (ZipCode = '*' OR PRADDZ = ZipCode))THEN
						SET OrderWasFound = 1;
					END IF;  
				   				
			   /*CUSTOMER*/
				ELSE 
					IF EXISTS (SELECT 1 FROM [SCDATA].F0116 
							WHERE ALAN8 = AddressNumber
							AND ALCTR = Country
							AND (ZipCode = '*' OR ALADDZ = ZipCode))THEN
						SET OrderWasFound = 1;
					END IF; 	
				END	IF;
			END IF;				
				  
		END IF;
	  
		IF (OrderWasFound = 0) THEN
			SET DocumentNumber =0;
			SET OrderType = '';
			SET OrderCompany = '';
		END IF;	

		OPEN TEMP_CURSOR1;
	
		COMMIT;
	END;
END
  ;
-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		Installation Id
-- #param OrderNumber			Order Number
-- #param EmailAddress		    Email Address

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSONumbyEmail
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN EmailAddress			VARGRAPHIC(256) CCSID 13488,
	IN OrderNumber			NUMERIC(8,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSONumbyEmail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE DocumentNumber		NUMERIC(8,0);
	DECLARE OrderType			GRAPHIC(3) CCSID 13488;
	DECLARE OrderCompany		GRAPHIC(5) CCSID 13488;
	DECLARE AddressType	        DECIMAL(10,0);
	DECLARE AddressNumber		NUMERIC(8,0); 	
	
	DECLARE OrderWasFound		INT;
	
	DECLARE SOrderRestric		VARGRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID			GRAPHIC(3) CCSID 13488;
	DECLARE SOrderConstant		GRAPHIC(10) CCSID 13488;
		
	/* Gets the Sales Order Document Restrictions	*/
    SET SOrderConstant = 'SO_RESTRIC';
    SET SOrderINID = InstallationID;
    CALL [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);
  
    SET OrderWasFound = 0;
    
    BEGIN
   
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			DocumentNumber	AS OrderNumber,
			OrderType		AS OrderType, 
			OrderCompany	AS OrderCompany	
		FROM SYSIBM.SYSDUMMY1
		FOR FETCH ONLY;  

		/* Validate the exist order*/
		SELECT 
			SHDOCO,
			SHDCTO,
			SHKCOO,
			SHAN8
		INTO 
			DocumentNumber, OrderType, OrderCompany, AddressNumber 
		FROM 
		(	
				SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F4201
				WHERE SHDOCO = OrderNumber
				UNION ALL
				SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
				FROM [SCDATA].F42019
				WHERE SHDOCO = OrderNumber				
		) AS A 
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SOrderINID
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		WHERE
			(SOrderRestric = '0' OR DR.DRKY IS NOT NULL);
		
		IF(DocumentNumber > 0)THEN 
			/*Search billing override address*/	
			IF EXISTS (SELECT 1 FROM [SCDATA].F4006
					WHERE OAANTY = 1 
					AND OADOCO = DocumentNumber  
					AND OADCTO = OrderType 
					AND OAKCOO =  OrderCompany) THEN 
				/* Validates email address in address 3 column */
				IF EXISTS (SELECT 1 FROM [SCDATA].F4006
						WHERE OAANTY = 1 
						AND OADOCO = DocumentNumber  
						AND OADCTO = OrderType 
						AND OAKCOO =  OrderCompany
						AND UPPER(OAADD3) = SUBSTRING(EmailAddress,1,40)) THEN /*OADD3 can only store 40 characters*/
					SET OrderWasFound = 1;
				END IF;
			ELSE
				 /* Search if the order is an SmarterCommerce order */
				SELECT 
					SH$9TYP, 
					SH$9AN8 
				INTO
					AddressType, AddressNumber  
				FROM [SCDATA].FQ674201
				WHERE SHDOCO =  DocumentNumber  
					AND (SHDCTO = OrderType)
					AND (SHKCOO= OrderCompany);
			
				/*CONSUMER */
				IF(AddressType = 1)THEN
					IF EXISTS (SELECT 1 FROM [SCDATA].FQ67303 
							WHERE PC$9AN8= AddressNumber
							AND UPPER(PCEMAL) = EmailAddress) THEN
						SET OrderWasFound = 1;
					END IF;
				   				
				/*CUSTOMER*/
				ELSE 
					IF EXISTS (SELECT 1 FROM [SCDATA].F01151 
							WHERE EAAN8 = AddressNumber
							AND EAETP = 'E'
							AND UPPER(EAEMAL) = EmailAddress) THEN
						SET OrderWasFound = 1;
					END IF;
				END	IF;
			END IF;				
				  
		END IF;	 
	
		IF (OrderWasFound = 0) THEN
			SET DocumentNumber =0;
			SET OrderType = '';
			SET OrderCompany = '';
		END IF;	
	
		OPEN TEMP_CURSOR1;
		
		COMMIT;
	END;
END
  ;
-- #desc						Search Order
-- #bl_class					Premier.Commerce.SearchOrderNumberCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		Installation Id
-- #param OrderNumber			Order Number
-- #param BillingName		    Billing Name 


CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetSONumbyName
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN BillingName			GRAPHIC(40) CCSID 13488,
	IN OrderNumber			NUMERIC(8,0)		
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSONumbyName
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE DocumentNumber		NUMERIC(8,0);
	DECLARE OrderType			GRAPHIC(2) CCSID 13488;
	DECLARE OrderCompany		GRAPHIC(5) CCSID 13488;
	DECLARE AddressType	        DECIMAL(10,0);
	DECLARE AddressNumber		NUMERIC(8,0); 	
	
	DECLARE OrderWasFound		INT;
	
	DECLARE SOrderRestric	VARGRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID      GRAPHIC(3) CCSID 13488;
	DECLARE SOrderConstant	GRAPHIC(10) CCSID 13488;
	/* Gets the Sales Order Document Restrictions	*/
    SET SOrderConstant = 'SO_RESTRIC';
    SET SOrderINID = InstallationID;
    CALL [SCLIBRARY].CMM_GetConstantValue (SOrderConstant, SOrderINID, SOrderRestric);
    
    SET OrderWasFound = 0;
    
    BEGIN
 
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			DocumentNumber	AS OrderNumber,
			OrderType		AS OrderType, 
			OrderCompany	AS OrderCompany	
		FROM SYSIBM.SYSDUMMY1
		FOR FETCH ONLY;

	
		/* Validate the exist order*/
		SELECT 
			SHDOCO,
			SHDCTO,
			SHKCOO,
			SHAN8
		INTO 
			DocumentNumber, OrderType, OrderCompany, AddressNumber 
		FROM 
		(	
			SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
			FROM [SCDATA].F4201
			WHERE SHDOCO = OrderNumber
			UNION ALL
			SELECT SHDOCO,SHDCTO,SHKCOO,SHAN8
			FROM [SCDATA].F42019
			WHERE SHDOCO = OrderNumber				
		) AS A 
		LEFT OUTER JOIN [SCDATA].FQ67008 DR
			ON DR.DR$9INID = SOrderINID
			AND DR.DR$9CNST = SOrderConstant 
			AND DR.DRKY = A.SHDCTO
		WHERE
			(SOrderRestric = '0' OR DR.DRKY IS NOT NULL);


		IF(DocumentNumber > 0)THEN 
			IF EXISTS (SELECT 1
					FROM [SCDATA].F4006
					WHERE OAANTY = 1 
					AND OADOCO = DocumentNumber  
					AND OADCTO = OrderType 
					AND OAKCOO =  OrderCompany	 
					AND UPPER(OAMLNM) = BillingName) THEN 
				SET OrderWasFound = 1;
			ELSE
				/* Search if the order is an Smart Commerce order */
				SELECT 
					SH$9TYP, 
					SH$9AN8 
				INTO
					AddressType, AddressNumber  
				FROM [SCDATA].FQ674201
				WHERE SHDOCO = DocumentNumber  
					AND (SHDCTO = OrderType)
					AND (SHKCOO= OrderCompany);

				/*CONSUMER */
				IF(AddressType = 1)THEN 
					IF EXISTS (SELECT 1 FROM  [SCDATA].FQ67303 
							WHERE PC$9AN8= AddressNumber
							AND UPPER(PCMLNM) = BillingName)THEN
						SET OrderWasFound = 1;
					END IF;
				/*CUSTOMER*/
				ELSE
					IF EXISTS (SELECT 1 FROM [SCDATA].F0111 
							WHERE WWAN8= AddressNumber
							AND UPPER(WWMLNM) = BillingName)THEN
						SET OrderWasFound = 1;
					END IF;
				END	IF;
			END IF;
		END IF;

		IF (OrderWasFound = 0) THEN
			SET DocumentNumber = 0;
			SET OrderType = '';
			SET OrderCompany = '';
		END IF;	
	
		OPEN TEMP_CURSOR1;
	
		COMMIT;
	END;
END
 ;
-- #desc						Search Orders
-- #bl_class					Premier.Commerce.SalesOrderSearchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationId		Installation ID
-- #param OrderNumber			Order number to search for.
-- #param OrderType				Document type to search for.
-- #param Company				Company
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type		/* 0 Customer - 1 Consumer */
-- #param ItemNumber			Item Number
-- #param TransactionDateFrom	Transaction Date From
-- #param TransactionDateTo		Transaction Date To
-- #param DisplayItemSetting	Display Item Setting
-- #param SortBy				SortBy
-- #param PageIndex				PageIndex
-- #param PageSize				PageSize
-- #param TotalRowCount			TotalRowCount

CREATE OR REPLACE PROCEDURE [SCLIBRARY].COM_GetSOReturnLineSrchList
(
	IN InstallationID	    GRAPHIC(3) CCSID 13488,
	IN OrderNumber			NUMERIC(8,0),
	IN OrderType			GRAPHIC(2) CCSID 13488,
	IN Company				GRAPHIC(5) CCSID 13488,
	IN AddressNumber		NUMERIC(15,0),
	IN AddressBookType		NUMERIC(10,0),
	IN ItemNumber			NUMERIC(15,0),
	IN TransactionDateFrom	NUMERIC(15,0), 
	IN TransactionDateTo	NUMERIC(15,0),
	IN DisplayItemSetting	GRAPHIC(4) CCSID 13488,
	IN SortBy				NUMERIC(15,0),
	IN PageIndex			INTEGER,
	IN PageSize				INTEGER,
	IN LangPref				GRAPHIC(2) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetSOReturnLineSrchList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	/* Paging */
	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	DECLARE SORT_DYNAMIC VARGRAPHIC (80) CCSID 13488;
	
	
	DECLARE SQL_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE UNION_DYNAMIC					VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE INNER_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE DISPLAYITEM_DYNAMIC			VARGRAPHIC(10000) CCSID 13488;
	DECLARE FROM_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE LEFT_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE TAX_DYNAMIC					VARGRAPHIC(8000) CCSID 13488;
	   
	DECLARE SOrderRestric		GRAPHIC(1) CCSID 13488;
	DECLARE SOrderINID			GRAPHIC(3) CCSID 13488;
	DECLARE IsNotDocRestricted	INT;

	DECLARE COINID				GRAPHIC(3) CCSID 13488;
	DECLARE CORestric			GRAPHIC(1) CCSID 13488;
	DECLARE CancelINID			GRAPHIC(3) CCSID 13488;
	DECLARE SurchargeLnINID		GRAPHIC(3) CCSID 13488;
	DECLARE SurchargeLnType		VARGRAPHIC(2) CCSID 13488;

	/* Read Account Receivable company constant */
	DECLARE CompanyConstant			VARGRAPHIC(1) CCSID 13488;
	DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488;

	DECLARE DefLangINID GRAPHIC(3) CCSID 13488;
	DECLARE DefLangValue GRAPHIC(2) CCSID 13488;
	DECLARE BInstallationID GRAPHIC(3) CCSID 13488;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN TO CLIENT FOR V_DYNAMIC ;
		
		SET WHERE_DYNAMIC = N'';
		SET INNER_DYNAMIC = N'';
		SET DISPLAYITEM_DYNAMIC = N'';
		SET FROM_DYNAMIC = N'';
		SET LEFT_DYNAMIC = N'';
		SET SORT_DYNAMIC = N'';
		SET TAX_DYNAMIC = N'';
 
		/* Gets the Sales Order Document Restrictions */
		SET SOrderINID = InstallationID; 
		CALL [SCLIBRARY].CMM_GetConstantValue ('SO_RESTRIC', SOrderINID, SOrderRestric);

		/* Gets the Sales Order Document Restrictions */
		SET COINID = InstallationID;  
		CALL [SCLIBRARY].CMM_GetConstantValue('CO_RESTRIC', COINID, CORestric);
	
		/* Gets the Surcharge Line Type */
		SET SurchargeLnINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue('SURCHARGLN', SurchargeLnINID, SurchargeLnType);
	
		/* Read Account Receivable company constant */
		SET ConstantInstallation = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue( 'INSCOMPANY', ConstantInstallation, CompanyConstant );	

		/* Gets Default Language */
		SET DefLangINID = InstallationID;
		CALL [SCLIBRARY].CMM_GetConstantValue('DEFLANGPRF', DefLangINID, DefLangValue);
		SET BInstallationID = '***';

	   /* Paging Calculation Set the first row to be selected*/
		SET ROWSTART = (PageSize * PageIndex) - PageSize + 1;
	   /* Set the last row to be selected */
		SET ROWEND = PageIndex * PageSize;
	 
		-- Dynamic query*/
		IF (DisplayItemSetting = N'LITM') THEN
			SET DISPLAYITEM_DYNAMIC = ' A.LongItemNumber ';
		ELSEIF (DisplayItemSetting = N'AITM') THEN
			SET DISPLAYITEM_DYNAMIC = ' A.AuxItemNumber ';
		ELSE 
			SET DISPLAYITEM_DYNAMIC = ' A.ItemNumber ';	
		END IF;
		
		SET SORT_DYNAMIC = CASE SORTBY
				WHEN 0 THEN N' A.OrderNumber ASC ' /* Ascending */
				WHEN 1 THEN N' A.OrderNumber DESC ' /* Descending */
				WHEN 2 THEN N' UPPER(A.ItemDescription1) ASC ' /* Ascending */
				WHEN 3 THEN N' UPPER(A.ItemDescription1) DESC ' /* Descending */
				WHEN 4 THEN DISPLAYITEM_DYNAMIC || N' ASC ' /* Ascending */
				WHEN 5 THEN DISPLAYITEM_DYNAMIC || N' DESC ' /* Descending */
		END;
		
		/* Dynamic query condition */
	
	   IF (OrderNumber IS NOT NULL) THEN
		  SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' A.SDDOCO = ? ';
	   ELSE
		  SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' (1 = 1 OR ? IS NULL) ';
	   END IF;
	
		IF (AddressNumber IS NOT NULL) THEN
			IF (AddressBookType = 0) THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SDAN8 = ? ';
			ELSEIF(AddressBookType = 1) THEN
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND B.SD$9AN8 = ? ';
			ELSE
				SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND COALESCE(B.SD$9AN8, A.SDAN8) = ? ';
			END IF;
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
		END IF;
	
		IF (OrderType <> N'*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SDDCTO = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;

		IF (ItemNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SDITM = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
		END IF;
	
		IF (Company <> N'*' AND Company <> N'00000') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SDKCOO = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF;

		IF (TransactionDateFrom > 0) THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND A.SDTRDJ BETWEEN ? AND ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR (? IS NULL OR ? IS NULL))';
		END IF;

		SET WHERE_DYNAMIC = N' WHERE ' || WHERE_DYNAMIC || ' AND A.SDLNTY <> ? ';
		
		/* Dynamic query Inner*/
		
		IF (CompanyConstant = N'L' ) THEN
			SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
										ON  CR.CI$9INID = N'''||ConstantInstallation||N'''	
										AND CR.CICO = A.Company ';
		END IF;

		IF (SOrderRestric = N'1' ) THEN
			SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR										
										ON  DR.DR$9INID = N'''||SOrderINID||'''	
										AND DR.DR$9CNST = N''SO_RESTRIC''
										AND DR.DRKY  = A.OrderType ';
		END IF;           
		
   
		IF (AddressNumber IS NOT NULL) THEN
		  IF (AddressBookType = 0) THEN
			SET UNION_DYNAMIC = N' UNION_LINES AS (
			SELECT 
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2, 
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM,
				A.SDAN8		AS SCBillToNumber,
				0			AS SCBillToContactID,
				0			AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM  [SCDATA].F4211 A
			' || WHERE_DYNAMIC || N'
			UNION ALL
			SELECT  
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2, 
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM, 
				A.SDAN8		AS SCBillToNumber,
				0			AS SCBillToContactID,
				0			AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM  [SCDATA].F42119 A
			' || WHERE_DYNAMIC || N' )' ;
		  ELSE
			SET UNION_DYNAMIC = N' UNION_LINES AS (
			SELECT 
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2, 
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM,
				B.SD$9AN8	AS SCBillToNumber,
				B.SDIDLN	AS SCBillToContactID,
				B.SD$9TYP	AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM  [SCDATA].F4211 A 
			INNER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID 
				AND B.SD$9TYP = 1
			' || WHERE_DYNAMIC || N'
			UNION ALL
			SELECT  
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2, 
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM,
				B.SD$9AN8	AS SCBillToNumber,
				B.SDIDLN	AS SCBillToContactID,
				B.SD$9TYP	AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM  [SCDATA].F42119 A
			INNER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID 
				AND B.SD$9TYP = 1
			' || WHERE_DYNAMIC || N' )' ;


		  END	IF;
	   ELSE
			SET UNION_DYNAMIC = N' UNION_LINES AS (
			SELECT 
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2, 
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM, 
				CASE B.SD$9TYP WHEN 1 THEN B.SD$9AN8 ELSE A.SDAN8 END	AS SCBillToNumber,
				COALESCE(B.SDIDLN, 0)	AS SCBillToContactID,
				COALESCE(B.SD$9TYP, 0)	AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM  [SCDATA].F4211 A 
			LEFT OUTER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID
			' || WHERE_DYNAMIC || N'
			UNION ALL
			SELECT  
				A.SDDOCO	AS OrderNumber, 
				A.SDDCTO	AS OrderType, 
				A.SDKCOO	AS Company,    
				A.SDLNID	AS LineNumber, 
				A.SDLITM	AS LongItemNumber,
				A.SDAITM	AS AuxItemNumber,
				A.SDLNTY	AS LineType,
				A.SDDSC1	AS ItemDescription1,
				A.SDDSC2	AS ItemDescription2, 
				A.SDUPRC	AS UnitPrice,
				A.SDFUP		AS ForeignUnitPrice,
				A.SDUORG	AS Quantity,
				A.SDSOQS	AS ShippedQuantity,
				A.SDITM		AS ItemNumber,
				A.SDUOM		AS UnitOfMeasure, 
				A.SDUOM4	AS PricingUOM,
				CASE B.SD$9TYP WHEN 1 THEN B.SD$9AN8 ELSE A.SDAN8 END	AS SCBillToNumber,
				COALESCE(B.SDIDLN, 0)			AS SCBillToContactID,
				COALESCE(B.SD$9TYP, 0)			AS AddressBookType,
				A.SDNXTR	AS NextStatus,
				A.SDTAX1	AS TaxableYN, 
				A.SDLOCN	AS Location,
				A.SDLOTN	AS LotNumber,
				A.SDADDJ	AS OrderActualDeliveryDate,
				A.SDIVD		AS DateInvoice,
				A.SDTXA1	AS TaxArea,
				A.SDEXR1	AS TaxExplanationCode,
				A.SDSO09	AS SalesOrderStatus09
			FROM  [SCDATA].F42119 A
			LEFT OUTER JOIN [SCDATA].FQ674211 B
				ON  B.SDDOCO = A.SDDOCO
				AND B.SDDCTO = A.SDDCTO 
				AND B.SDKCOO = A.SDKCOO 
				AND B.SDLNID = A.SDLNID
			' || WHERE_DYNAMIC || N' )' ;
	   END IF;

   IF (DefLangValue = LangPref) THEN
			SET LEFT_DYNAMIC = N' LEFT OUTER JOIN  ( SELECT CHITM, CHDSC1 AS DESC1, CHDSC2 AS DESC2, ROW_NUMBER() OVER ( PARTITION BY CHITM ORDER BY CH$9INID DESC ) AS INSTALL
													  FROM [SCDATA].FQ67410
													  WHERE CH$9DS = 0
													  AND (1 = 1 OR ? = '' '')
													  AND (CH$9INID = ? OR CH$9INID = ? ) ) ContenDesc
								   ON ContenDesc.CHITM = A.ItemNumber  
								   AND INSTALL = 1 ';
	ELSE
			SET LEFT_DYNAMIC = N'  LEFT OUTER JOIN  ( SELECT CHITM, COALESCE(B.CLDSC1, A.CHDSC1) AS DESC1, COALESCE(B.CLDSC2, A.CHDSC2) AS DESC2, 
															  ROW_NUMBER() OVER ( PARTITION BY CHITM ORDER BY CH$9INID DESC ) AS INSTALL 
													   FROM [SCDATA].FQ67410 A
													   LEFT OUTER JOIN [SCDATA].FQ67410L B
															ON  B.CLITM = A.CHITM
															AND B.CL$9INID = A.CH$9INID
															AND B.CL$9DS = A.CH$9DS
															AND B.CLLNGP = ? 
													   WHERE (A.CH$9INID = ? OR A.CH$9INID = ? )
													   AND  A.CH$9DS = 0) ContenDesc
									ON ContenDesc.CHITM = A.ItemNumber  
									AND INSTALL = 1 ';
	END IF;

	SET	TAX_DYNAMIC = N' 
			LEFT OUTER JOIN [SCDATA].F4201 B
				ON  B.SHDOCO = A.OrderNumber
				AND B.SHDCTO = A.OrderType
				AND B.SHKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F4211TX Tax
				ON Tax.DTDOCO = A.OrderNumber 
				AND Tax.DTDCTO = A.OrderType
				AND Tax.DTKCOO = A.Company 
				AND Tax.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F4201TX TaxHeader
				ON TaxHeader.STDOCO = A.OrderNumber 
				AND TaxHeader.STDCTO = A.OrderType
				AND TaxHeader.STKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F42019 C  
				ON  C.SHDOCO = A.OrderNumber
				AND C.SHDCTO = A.OrderType
				AND C.SHKCOO = A.Company
			LEFT OUTER JOIN [SCDATA].F42119TX TxHistory
				ON TxHistory.DTDOCO = A.OrderNumber 
				AND TxHistory.DTDCTO = A.OrderType
				AND TxHistory.DTKCOO = A.Company 
				AND TxHistory.DTLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F42019TX TxHistoryHeader
				ON TxHistoryHeader.STDOCO = A.OrderNumber 
				AND TxHistoryHeader.STDCTO = A.OrderType
				AND TxHistoryHeader.STKCOO = A.Company ';

	SET	SQL_DYNAMIC = N'
	WITH '||UNION_DYNAMIC||N',
	CTE AS (
		SELECT  
			A.OrderNumber, 
			A.OrderType, 
			A.Company,    
			A.LineNumber,
			A.ItemDescription1,
			A.ItemDescription2,
			A.UnitPrice, 
			A.ForeignUnitPrice,
			A.Quantity,
			A.ShippedQuantity,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.ItemNumber,
			A.UnitOfMeasure,
			A.PricingUOM,
			A.SCBillToNumber,
			A.SCBillToContactID,
			A.AddressBookType,
			A.NextStatus,
			A.TaxableYN,
			A.Location,
			A.LotNumber,
			A.OrderActualDeliveryDate,
			A.DateInvoice,
			A.TaxArea,
			A.TaxExplanationCode,
			A.SalesOrderStatus09
		FROM UNION_LINES A 
		'|| INNER_DYNAMIC || N' 
	), PAGING AS (
		SELECT  
			A.OrderNumber, 
			A.OrderType, 
			A.Company,    
			A.LineNumber,
			COALESCE(ContenDesc.DESC1, A.ItemDescription1)	AS ItemDescription1,
			COALESCE(ContenDesc.DESC2, A.ItemDescription2)	AS ItemDescription2,
			A.UnitPrice, 
			A.ForeignUnitPrice,
			A.Quantity,
			A.ShippedQuantity,
			A.LongItemNumber,
			A.AuxItemNumber,
			A.ItemNumber,
			A.UnitOfMeasure,
			A.PricingUOM,
			A.SCBillToNumber,
			A.SCBillToContactID,
			A.AddressBookType,
			A.NextStatus,
			A.TaxableYN,
			A.Location,
			A.LotNumber,
			A.OrderActualDeliveryDate,
			A.DateInvoice,
			A.TaxArea,
			A.TaxExplanationCode,
			A.SalesOrderStatus09,
			ROW_NUMBER() OVER ( ORDER BY ' || SORT_DYNAMIC || N' ) AS RNUM
		FROM CTE A
		'|| LEFT_DYNAMIC ||N'
	) 
	SELECT
		A.OrderNumber,
		A.OrderType,
		A.Company,
		A.LineNumber,
		A.ItemDescription1,
		A.ItemDescription2,
		A.UnitPrice,
		A.ForeignUnitPrice,
		A.Quantity,
		A.ShippedQuantity,
		[SCLIBRARY].COM_GetReturnedQuantityFnc( A.OrderNumber, A.Company, A.OrderType, A.LineNumber, N'''||COINID||''', N'''||CORESTRIC||''' ) AS ReturnedQuantity,
		A.LongItemNumber,
		A.AuxItemNumber,
		A.ItemNumber,
		A.UnitOfMeasure,
		A.PricingUOM,
		A.SCBillToNumber,
		A.SCBillToContactID,
		A.AddressBookType,
		A.NextStatus,
		A.TaxableYN,
		COALESCE(B.SHCRRM, C.SHCRRM)	AS CurrencyMode,
		A.Location,
		A.LotNumber,
		COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC)	AS TaxedUnitPrice,
		COALESCE(Tax.DTTFUP, TxHistory.DTTFUP)	AS ForeignTaxedUnitPrice,
		COALESCE(TaxHeader.STUTP, TxHistoryHeader.STUTP)	AS UseTaxedPrices,
		A.OrderActualDeliveryDate,
		A.DateInvoice,
		A.TaxArea,
		A.TaxExplanationCode,
		A.SalesOrderStatus09,
		(SELECT COUNT(1) FROM PAGING) AS TotalRowCount  
	FROM 
		PAGING A
		' || TAX_DYNAMIC || N'
		WHERE ((? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ?)) ';
   
	PREPARE V_DYNAMIC FROM SQL_DYNAMIC ; 
	OPEN TEMP_CURSOR1 USING OrderNumber, AddressNumber, OrderType, ItemNumber, Company, TransactionDateFrom, TransactionDateTo, 
							SurchargeLnType, OrderNumber, AddressNumber, OrderType, ItemNumber, Company, TransactionDateFrom, TransactionDateTo, 
							SurchargeLnType, LangPref, InstallationID, BInstallationID, PageIndex, PageSize, RowStart, RowEnd;  
   
   END ;
END;
-- #desc						Load Area and tax expl code info
-- #bl_class					Premier.Commerce.TaxInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressType			Address Book Type (Consumer/Customer)
-- #param BillToNumber			Billing Address Number
-- #param ShipToNumber			Shipping Address Number
-- #param ShipToAddressType		ShipTo Address Book Type (Consumer/Customer)
-- #param NONTAXABLE			Non Taxable Tax Area Constant

CREATE OR REPLACE Procedure [SCLIBRARY].COM_GetTaxInfo
(
	AddressType		NUMERIC(15,0),
	Company		    VARCHAR(5),
	BillToNumber	NUMERIC(15,0),
	ShipToNumber	NUMERIC(15,0),
	ShipToAddressType NUMERIC(15,0),
	NONTAXABLE		VARGRAPHIC(256) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_GetTaxInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE SHIPTAXAREA VARCHAR(10);
	DECLARE SHIPEXPCODE VARCHAR(2);
	DECLARE BILLEXPCODE VARCHAR(2);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	SHIPTAXAREA AS TaxArea, BILLEXPCODE AS TaxExplanationCode FROM SYSIBM.SYSDUMMY1;
			
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	SHIPTAXAREA AS TaxArea, SHIPEXPCODE AS TaxExplanationCode FROM SYSIBM.SYSDUMMY1;
	
	DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	NONTAXABLE AS TaxArea, BILLEXPCODE AS TaxExplanationCode FROM SYSIBM.SYSDUMMY1;
	
	DECLARE TEMP_CURSOR4 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT '' AS TaxArea, '' AS TaxExplanationCode FROM SYSIBM.SYSDUMMY1;

	IF AddressType = 0 	THEN -- CUSTOMER
	 
		SELECT	AITXA1,AIEXR1 INTO SHIPTAXAREA,SHIPEXPCODE
		FROM	TABLE(SCLIBRARY.CST_GetCustomerInfoFnc(Company, ShipToNumber)) AS IA
		FETCH FIRST 1 ROW ONLY;
		
		SELECT AIEXR1 INTO BILLEXPCODE
		FROM   TABLE(SCLIBRARY.CST_GetCustomerInfoFnc(Company, BillToNumber)) AS IA
		FETCH FIRST 1 ROW ONLY;
	 
	ELSE	-- CONSUMER
		
		SELECT	PREXR1  INTO BILLEXPCODE
		FROM	[SCDATA].FQ670302
		WHERE	PR$9AN8 = BillToNumber
		FETCH FIRST 1 ROW ONLY;
		
		/* In POS when the order is Cash and Carry, the default ship will be the Default Customer ShipTo
		 * and Bill to could be a Consumer
		 */
		IF ShipToAddressType = 0 	THEN
			SELECT AITXA1, AIEXR1 INTO SHIPTAXAREA, SHIPEXPCODE
			FROM TABLE(SCLIBRARY.CST_GetCustomerInfoFnc(Company, ShipToNumber)) AS IA
			FETCH FIRST 1 ROW ONLY;
		ELSE
			SELECT	PRTXA1,PREXR1 INTO SHIPTAXAREA,SHIPEXPCODE
			FROM	[SCDATA].FQ670302
			WHERE	PR$9AN8 = ShipToNumber
			FETCH FIRST 1 ROW ONLY;
		END IF;
		 
	END IF;--CUSTOMER OR CONSUMER

	IF SHIPTAXAREA <> '' THEN
	 
		IF (BILLEXPCODE <> '') THEN
			OPEN TEMP_CURSOR1;
		ELSE
			OPEN TEMP_CURSOR2;
		END IF;
	 
	ELSE
	 
		IF (BILLEXPCODE <> '') THEN
			OPEN TEMP_CURSOR3;
		ELSE
			OPEN TEMP_CURSOR4;
		END IF;
	 
	 END IF; --SHIPTAXAREA <> ''

END

 ;
-- #desc					Updates Carrier Tracking 
-- #bl_class				Premier.Commerce.CarrierTracking.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param CarrierID			Carrier ID
-- #param TrackingURL		Tracking URL
-- #param "PROGRAMID"		Program ID
-- #param WorkStationID		WorkStation ID
-- #param "USERID"			User ID
-- #param DateUpdated		Last Date Update
-- #param TimeLastUpdated	Last Updated time

CREATE OR REPLACE Procedure [SCLIBRARY].COM_UpdCarrierTracking
(
	IN CarrierID		NUMERIC(15,0),
	IN TrackingURL		VARGRAPHIC(256) CCSID 13488,
	IN "USERID"			varchar(10),
	IN "PROGRAMID"		varchar(10),
	IN WorkStationID	varchar(10),	
	IN DateUpdated		NUMERIC(15,0),
	IN TimeLastUpdated	NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_UpdCarrierTracking
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	UPDATE 
		[SCDATA].FQ67CARS
	SET  
		CREMAL = TrackingURL,
		CRUSER = "USERID", 
		CRPID  = "PROGRAMID",
		CRJOBN = WorkStationID,
		CRUPMJ = DateUpdated, 
		CRUPMT = TimeLastUpdated
		
	WHERE 
		CRAN8 = CarrierID;

END ;
-- #desc					Updates marketing code 
-- #bl_class				Premier.CommerceMarketingCode.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Constant ID
-- #param BranchPlant		Branch plant
-- #param Description1		Description 1
-- #param Description2		Description 2
-- #param EffectiveDate		Effective date
-- #param ExpirationDate	Expiration date
-- #param UsageMode			Usage Mode flag

CREATE OR REPLACE Procedure [SCLIBRARY].COM_UpdMarketingCode
(
	MarketingCode	VARCHAR(30),
	BranchPlant		VARCHAR(12),
	Description1	VARGRAPHIC(30) CCSID 13488,
	Description2	VARGRAPHIC(30) CCSID 13488,
	EffectiveDate	NUMERIC(15,0),
	ExpirationDate	NUMERIC(15,0),
	UsageMode		VARCHAR(1)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_UpdMarketingCode 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE 
		[SCDATA].FQ674204
	SET  
		MKMCU = BranchPlant,
		MKDSC1 = Description1,
		MKDSC2 = Description2,
		MKEFTJ = EffectiveDate,
		MKEXDJ = ExpirationDate,
		MK$9WEB = UsageMode
	WHERE 
		MK$9MKT = MarketingCode;

END ;
-- #desc					Updates marketing code value 
-- #bl_class				Premier.CommerceMarketingCodeValue.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param MarketingCode		Marketing Code
-- #param PriceKey			Price Key
-- #param PriceKeyValue		Price Key Value

CREATE OR REPLACE Procedure [SCLIBRARY].COM_UpdMarketingCodeValue
(
	MarketingCode   VARCHAR(30),
	PriceKey        VARCHAR(10),
	PriceKeyValue   VARCHAR(12)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_UpdMarketingCodeValue 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE 
		[SCDATA].FQ674205
	SET  
		MK$9MVAL = PriceKeyValue
	WHERE 
		MK$9MKT = MarketingCode 
		AND MK$9MCOL = PriceKey;
	
END


 ;
-- #desc					Update P4210 Version Rule Detail
-- #bl_class				Premier.Commerce.P4210VersRuleDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param Description		Description
-- #param P4210Version		P4210 Version
-- #param Hierarchy			Hierarchy

CREATE OR REPLACE Procedure [SCLIBRARY].COM_UpdP4210VersRuleDetail 
(
	IN InstallationID			VARCHAR(3),
	IN RuleUniqueID				NUMERIC(15,0),
	IN LineID					NUMERIC(15,0),
	IN UserDefinedKey			VARCHAR(10),
	IN BranchPlant				VARCHAR(12),
	IN AddressNumber			NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN WorkStationID			VARCHAR(10)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_UpdP4210VersRuleDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	UPDATE
		[SCDATA].FQ674231
	SET
		RDUKID	= RuleUniqueID,
		RDLNID	= LineID,
		RDKY	= UserDefinedKey,
		RDMCU	= BranchPlant,
		RD$9AN8 = AddressNumber,
		RDURAB	= UserReservedNumber,
		RDURAT	= UserReservedAmount,
		RDURCD	= UserReservedCode,
		RDURDT	= UserReservedDate,
		RDURRF	= UserReservedReference,
		RDUSER	= "USERID",
		RDPID	= "PROGRAMID",
		RDUPMJ	= DateUpdated,
		RDUPMT	= TimeLastUpdated,
		RDJOBN	= WorkStationID
	WHERE
		RD$9INID = InstallationID AND
		RDUKID = RuleUniqueID AND
		RDLNID = LineID;

END ;
-- #desc					Update P4210 Version Rule Header
-- #bl_class				Premier.CommerceP4210VersRuleHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param RuleUniqueID		Rule Unique ID
-- #param Description		Description
-- #param P4210Version		P4210 Version
-- #param Hierarchy			Hierarchy

CREATE OR REPLACE Procedure [SCLIBRARY].COM_UpdP4210VersRuleHeader 
(
	IN InstallationID			VARCHAR(3),
	IN RuleUniqueID				NUMERIC(15,0),
	IN Description				VARGRAPHIC(30) CCSID 13488,
	IN P4210Version				VARCHAR(10),
	IN Hierarchy				NUMERIC(15,0),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN WorkStationID			VARCHAR(10)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].COM_UpdP4210VersRuleHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

UPDATE
	[SCDATA].FQ674230
SET
	RHDSC1	= Description,
	RHVER	= P4210Version,
	RHSEQ	= Hierarchy,
	RHURAB	= UserReservedNumber,
	RHURAT	= UserReservedAmount,
	RHURCD	= UserReservedCode,
	RHURDT	= UserReservedDate,
	RHURRF	= UserReservedReference,
	RHUSER	= "USERID",
	RHPID	= "PROGRAMID",
	RHUPMJ	= DateUpdated,
	RHUPMT	= TimeLastUpdated,
	RHJOBN	= WorkStationID
WHERE
	RH$9INID =  InstallationID AND
	RHUKID	=  RuleUniqueID;

END ;

-- #desc					Get Quote Order Detail Information
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			QTS_OrderHeadSrchVW, QTS_GetQuoteRecentList

CREATE OR REPLACE VIEW [SCLIBRARY].QTS_ORDERDETAILVW 
  AS 
	SELECT 
  		A.SDDOCO, 
  		A.SDKCOO, 
  		A.SDDCTO, 
  		A.SDSHAN AS SHAN 
	FROM [SCDATA].F4211 A  --Sales Order Lines 
	UNION 
	SELECT 
  		A.SDDOCO, 
  		A.SDKCOO, 
  		A.SDDCTO, 
  		A.SDSHAN AS SHAN 
	FROM [SCDATA].F42119 A;

-- #desc					Get Quote Order Header Information
-- #db_dependencies			N/A
-- #db_references			QTS_OrderHeadSrchVW, QTS_GetQuoteOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].QTS_ORDERHEADVW 
AS 
	SELECT  
		A.SHDOCO,	  
		A.SHDCTO,  
		A.SHKCOO,  
		A.SHVR01,  
		A.SHTRDJ,  
		A.SHDRQJ,  
		A.SHCRCD,  
		A.SHCRRM,  
		A.SHRORN,  
		A.SHRCTO,  
		A.SHAN8 AS BILLTONUMB,  
		A.SHCO  
	FROM [SCDATA].F4201 A					/*Sales Order Header*/  
	UNION ALL
	SELECT  
		A.SHDOCO,	  
		A.SHDCTO,  
		A.SHKCOO,  
		A.SHVR01,  
		A.SHTRDJ,  
		A.SHDRQJ,  
		A.SHCRCD,  
		A.SHCRRM,  
		A.SHRORN,  
		A.SHRCTO,  
		A.SHAN8 AS BILLTONUMB,  
		A.SHCO  
	FROM [SCDATA].F42019 A ;
  



-- #desc					Get Quote Order Header/Detail Information
-- #db_dependencies			QTS_OrderHeadVW, QTS_OrderDetailVW
-- #db_references			QTS_GetQuoteOrderHeadSrchList

CREATE OR REPLACE VIEW [SCLIBRARY].QTS_ORDERHEADSRCHVW 
	AS 
	SELECT  
			A.SHDOCO,  
			A.SHDCTO,  
			A.SHKCOO,  
			A.SHVR01,  
			A.SHTRDJ,  
			A.SHDRQJ, 
			A.SHCRCD,  
			A.SHCRRM, 
			A.SHRORN, 
			A.SHRCTO, 
			A.BILLTONUMB, 
			B.SHAN, 
			A.SHCO 
		FROM [SCLIBRARY].QTS_ORDERHEADVW A	 
		INNER JOIN [SCLIBRARY].QTS_ORDERDETAILVW B 
		ON A.SHDOCO = B.SDDOCO 
		AND A.SHDCTO = B.SDDCTO	 
		AND A.SHKCOO = B.SDKCOO ;
-- #desc					Execute Update Quote Status
-- #bl_class				Premier.Commerce.Quote.CheckQuoteStatusCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param Company			Company Number
-- #param OrderType			Order Type	
-- #param OrderNumber		Order Number
-- #param QuoteStatus		Quote Status
-- #param LineNumberArray	Line Number Array

CREATE OR REPLACE Procedure [SCLIBRARY].QTS_ExcCheckQuoteStatus
(
	IN InstallationID		GRAPHIC(3) CCSID 13488,
	IN Company				GRAPHIC(5) CCSID 13488,
	IN OrderType			GRAPHIC(2) CCSID 13488,
	IN OrderNumber			NUMERIC(8,0),
	IN LineNumbersXML		XML
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_ExcCheckQuoteStatus
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE STRSQL				VARGRAPHIC(8000) CCSID 13488;
	-- DYNAMIC SQL Select
	DECLARE V_DYNAMIC			VARGRAPHIC(8000) CCSID 13488;
	DECLARE LineNumberQuery		VARGRAPHIC(1000) CCSID 13488;
	
	DECLARE QuoteStatus			GRAPHIC(3) CCSID 13488;
	DECLARE QuoteStatusINID	    GRAPHIC(3) CCSID 13488;
	DECLARE QuoteStatusConstant	GRAPHIC(10) CCSID 13488;
	
	-- CURSOR FOR DYNAMIC SQL
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLINENUMBERSTABLE (
			LineNumberID		DECIMAL(6,0)
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
	-- Gets the Quote Status for Quote Conversion
	SET QuoteStatusConstant = 'QUOTSTAT';
	SET QuoteStatusINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue (QuoteStatusConstant, QuoteStatusINID, QuoteStatus);
	
	SET LineNumberQuery = ' ';
	IF (LineNumbersXML IS NOT NULL) THEN
		--Quote Detail
		SET LineNumberQuery = ' INNER JOIN SESSION.XMLINENUMBERSTABLE X
						ON SDLNID = X.LineNumberID ';

		/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
		INSERT INTO SESSION.XMLINENUMBERSTABLE (LineNumberID)
		SELECT 
			items.LineNumberID
			FROM XMLTABLE ('$d/items/item'
			PASSING LineNumbersXML AS "d"
			COLUMNS LineNumberID DECIMAL(6,0) PATH 'text()') AS items;
	END IF;
	
	SET STRSQL ='
	SELECT SDLNID AS LineNumberID
	FROM [SCDATA].F4211
	'|| LineNumberQuery ||'
	WHERE 
		SDKCOO = ? 
		AND SDDOCO = ? 
		AND SDDCTO = ? 
		AND SDNXTR = ?';	
	
	PREPARE V_DYNAMIC FROM STRSQL;
	OPEN TEMP_CURSOR1 USING Company, OrderNumber, OrderType, QuoteStatus;
END ;
-- #desc						Calculate Quote Status in Detail Mode based in ShipTo lines
--								Get a table with Quote Number, Quote Company, Quote Type and Quote Status based in ShipTo lines
-- #bl_class					N/A		
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteRecentList

-- #param QuoteStatus			Quote Acceptance Status
-- #param ShiptoNumber			Ship to Number

CREATE OR REPLACE FUNCTION [SCLIBRARY].QTS_GETQTDETSTATBYSHIPTOFNC 
( 
	QUOTESTATUS VARGRAPHIC(3) CCSID 13488 , 
	QUOTESHAN NUMERIC(15, 0) ) 
	RETURNS TABLE ( 
	QUOTENUMBER NUMERIC(8, 0) , 
	QUOTETYPE GRAPHIC(2) CCSID 13488 , 
	QUOTECOMPANY GRAPHIC(5) CCSID 13488 , 
	SDNXTR VARCHAR(25) 
)   
	LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GETQTDETSTATBYSHIPTOFNC 
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT  
	RETURN 
WITH CTE AS ( 
	SELECT 
		SDDOCO , SDDCTO , SDKCOO , 
		CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN 
			CASE WHEN SDNXTR = QUOTESTATUS THEN 'READYFORREVIEW' 
			WHEN SDNXTR < QUOTESTATUS THEN 'PENDING' 
			ELSE 'COMPLETED' END 
		ELSE 'CANCELLED' END AS SDNXTR 
	FROM [SCDATA] . F4211	 --Sales Order Lines 
	WHERE SDSHAN = QUOTESHAN AND SDRLIT = '' 
	UNION ALL 
	SELECT 
		SDDOCO , SDDCTO , SDKCOO , 
		CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN 
			CASE WHEN SDNXTR = QUOTESTATUS THEN 'READYFORREVIEW' 
				WHEN SDNXTR < QUOTESTATUS THEN 'PENDING' 
			ELSE 'COMPLETED' END 
		ELSE 'CANCELLED' END AS SDNXTR 
	FROM [SCDATA] . F42119	 --Sales Order Lines 
		WHERE SDSHAN = QUOTESHAN AND SDRLIT = '' 
	) 
		, CTE2 AS ( 
	SELECT 
		SDDOCO , SDDCTO , SDKCOO , SDNXTR , 
		ROW_NUMBER ( ) OVER ( PARTITION BY SDDOCO , SDDCTO , SDKCOO ORDER BY SDNXTR DESC ) STAT 
	FROM CTE 
	) 
	 
	SELECT 
			SDDOCO , SDDCTO , SDKCOO , SDNXTR FROM CTE2 
	WHERE STAT = 1  ;
-- #desc						Reads quote order header/lines information to convert
-- #bl_class					Premier.Commerce.Quote.QuoteConvertInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation Id.
-- #param Company				Company Number to search for.
-- #param OrderType				Order number to search for.
-- #param OrderNumber			Order type to search for.
-- #param LineNumbersXML		XML with list of lines to search for. If parameter is null, then all lines are returned

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteConvertInfo
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN Company			GRAPHIC(5) CCSID 13488,
	IN OrderType		GRAPHIC(3) CCSID 13488,
	IN OrderNumber		NUMERIC(8,0),
	IN LineNumbersXML	XML,
	IN LangPref			GRAPHIC(2) CCSID 13488
)
DYNAMIC RESULT SETS 3
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GetQuoteConvertInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE STRSQL VARGRAPHIC(8000) CCSID 13488;
	-- DYNAMIC SQL Select
	DECLARE V_DYNAMIC VARGRAPHIC(8000) CCSID 13488;
	DECLARE LineNumberQuery		VARGRAPHIC(1000) CCSID 13488;
	
	DECLARE QuoteStatus			VARGRAPHIC(3) CCSID 13488;
	DECLARE InstallationIDCnst	GRAPHIC(3) CCSID 13488;	
    
    DECLARE CurrentJulianDate	NUMERIC(6,0) DEFAULT 0;
    DECLARE CustCrossRefType	VARGRAPHIC(2) CCSID 13488;
	DECLARE IsOverrideShipTo	INT DEFAULT 0;
    
	-- CURSOR FOR DYNAMIC SQL
	DECLARE TEMP_CURSOR2 CURSOR WITH RETURN FOR V_DYNAMIC;
	DECLARE GLOBAL TEMPORARY TABLE SESSION.XMLINENUMBERSTABLE (
			LineNumberID		DECIMAL(6,0)
		)WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;
	
	SET InstallationIDCnst	 = InstallationID;
  
	-- Gets the Quote Status for Quote Convertion 	
    CALL [SCLIBRARY].CMM_GetConstantValue ('QUOTSTAT', InstallationIDCnst, QuoteStatus);
    
    -- Gets Cust Cross Document Restrictions
	SET InstallationIDCnst = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', InstallationIDCnst, CustCrossRefType);
	
	--Get the current Julian Date
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

    SET LineNumberQuery = ' ';
	IF (LineNumbersXML IS NOT NULL) THEN
		--Quote Detail
		SET LineNumberQuery = ' INNER JOIN SESSION.XMLINENUMBERSTABLE LN
						ON A.SDLNID = LN.LineNumberID ';

		/* Insert XML items into temporary table - Passing the XML to a dynamic query not works */
		INSERT INTO SESSION.XMLINENUMBERSTABLE (LineNumberID)
		SELECT 
			items.LineNumberID
			FROM XMLTABLE ('$d/items/item'
			PASSING LineNumbersXML AS "d"
			COLUMNS LineNumberID DECIMAL(6,0) PATH 'text()') AS items;
	END IF;

	SELECT COUNT(1) INTO IsOverrideShipTo 
	FROM [SCDATA].F4006
	WHERE OADOCO = OrderNumber			
		AND OADCTO = OrderType
		AND OAKCOO = Company  
		AND OAANTY = 2; 

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			A.SHAN8	AS SCBillToNumber,
			COALESCE(B.SHIDLN,0) AS ContactID,
			A.SHDRQJ AS RequestedDate,
			COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
			B.SH$9MMID AS MembershipID, 
			B.SH$9PD AS PercentageDiscount,
			B.SH$9DT AS DiscountType,
			A.SHRCD  AS ReasonCode,
			A.SHCRCD AS CurrencyCode,
			A.SHPRGP	AS PricingGroup,
			A.SHASN		AS AdjustmentSchedule,
			A.SHPTC		AS PaymentTerms,
			CASE IsOverrideShipTo WHEN 1 THEN 'Y' ELSE 'N' END AS IsShipToOverride,
			A.SHVR01 AS CustomerPO
		FROM [SCDATA].F4201 A 
		LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO 
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO 
		LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
			
		WHERE	A.SHDOCO = OrderNumber
			AND	A.SHDCTO = OrderType
			AND	A.SHKCOO = Company
		UNION ALL
		SELECT
			A.SHAN8	AS SCBillToNumber,
			COALESCE(B.SHIDLN,0) AS ContactID,
			A.SHDRQJ AS RequestedDate,
			COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
			B.SH$9MMID AS MembershipID, 
			B.SH$9PD AS PercentageDiscount,
			B.SH$9DT AS DiscountType,
			A.SHRCD  AS ReasonCode,
			A.SHCRCD AS CurrencyCode,
			A.SHPRGP	AS PricingGroup,
			A.SHASN		AS AdjustmentSchedule,
			A.SHPTC		AS PaymentTerms,
			CASE IsOverrideShipTo WHEN 1 THEN 'Y' ELSE 'N' END AS IsShipToOverride,
			A.SHVR01 AS CustomerPO
		FROM [SCDATA].F42019 A 
		LEFT OUTER JOIN [SCDATA].FQ674201 B 
			ON	A.SHDOCO = B.SHDOCO
			AND A.SHDCTO = B.SHDCTO
			AND A.SHKCOO = B.SHKCOO
		LEFT OUTER JOIN [SCDATA].F0013 C
			ON A.SHCRCD = C.CVCRCD
		WHERE	A.SHDOCO = OrderNumber	
			AND	A.SHDCTO = OrderType
			AND	A.SHKCOO = Company
		FOR FETCH ONLY;
	
		SET  STRSQL =
		'SELECT
			A.SDKCOO	AS Company, 
			A.SDDOCO	AS OrderNumber,
			A.SDDCTO	AS OrderType,
			A.SDLNID	AS LineNumberID,
			A.SDITM		AS ItemNumber,
			A.SDLITM	AS LongItemNumber,
			A.SDAITM	AS AuxItemNumber,
			A.SDMCU		AS BusinessUnit,
			A.SDAN8		AS BillToNumber,
			A.SDSHAN	AS ShipToID,
			A.SDDRQJ	AS RequestedDate,     
			A.SDLNTY	AS LineType,
			A.SDUORG	AS QuantityOrdered,
			A.SDUPRC	AS UnitPrice,
			A.SDAEXP	AS ExtendedPrice,
			A.SDFUP		AS ForeignUnitPrice,
			A.SDFEA		AS ForeignExtPrice,
			A.SDUOM		AS TransactionUOM,
			A.SDUOM4	AS PricingUOM,
			A.SDPROV	AS OverridePrice,
			A.SDDMCT	AS AgreementNumber,
			A.SDLOB		AS LineofBusiness,
			A.SDEUSE	AS EndUse,
			A.SDDTYS	AS DutyStatus,
			A.SDMOT		AS ModeOfTransport,
			A.SDUPC1	AS PriceCode1,
			A.SDUPC2	AS PriceCode2,
			A.SDUPC3	AS PriceCode3,
			A.SDTAX1	AS TaxableYN, 		
			COALESCE(B.SD$9TYP,0)		 AS AddressType,	
			A.SDAN8		AS SCBillToNumber,
			A.SDSHAN	AS SCShipToNumber,			   		
			COALESCE(B.SDIDLN, 0)		 AS SCBillToContactID,   
			COALESCE(B.SDRCK7, 0)		 AS SCShipToContactID,   	    
			COALESCE(B.SD$9SLN, 0)		 AS ShipLineNumber,
			COALESCE(X.IVCITM,'' '')		     AS ItemCrossRefNumber,
			COALESCE(Tax.DTTUPRC,0) AS TaxedUnitPrice,
			COALESCE(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
			COALESCE(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
			COALESCE(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
			COALESCE(Tax.DTUTA,0)   AS UnitTaxAmount,
			COALESCE(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
			COALESCE(Tax.DTETA,0)   AS ExtendedTaxAmount,
			COALESCE(Tax.DTFETA,0)  AS ForeignExtTaxAmount,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDCPNT				AS ComponentLineNumber,
			A.SDKTLN				AS KitMasterLineNo,
			COALESCE(Tax.DTTPROV,0)  AS TaxedPriceOverrideCode
		FROM [SCDATA].F4211 A 
		'|| LineNumberQuery ||'
		LEFT OUTER JOIN [SCDATA].FQ674211 B
     		ON A.SDKCOO = B.SDKCOO 
			AND A.SDDOCO = B.SDDOCO 
			AND A.SDDCTO = B.SDDCTO 
			AND A.SDLNID = B.SDLNID
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM
		LEFT OUTER JOIN [SCDATA].F4104	X /*Item Cross Ref */
			ON  X.IVAN8  = A.SDAN8
			AND X.IVITM  = A.SDITM
			AND X.IVXRT = ? 
			AND ? >= X.IVEFTJ AND ? <= X.IVEXDJ 
		LEFT OUTER JOIN [SCDATA].F4211TX Tax
			ON Tax.DTDOCO =  A.SDDOCO
			AND Tax.DTDCTO = A.SDDCTO
			AND Tax.DTKCOO = A.SDKCOO 
			AND Tax.DTLNID = A.SDLNID	
		WHERE A.SDKCOO = ? 
		   AND A.SDDOCO = ? 
		   AND A.SDDCTO = ? 
		   AND A.SDNXTR = ? 
		UNION ALL
		SELECT 
			A.SDKCOO	AS Company, 
			A.SDDOCO	AS OrderNumber,
			A.SDDCTO	AS OrderType,
			A.SDLNID	AS LineNumberID,
			A.SDITM		AS ItemNumber,
			A.SDLITM	AS LongItemNumber,
			A.SDAITM	AS AuxItemNumber,		
			A.SDMCU		AS BusinessUnit,
			A.SDAN8		AS BillToNumber,
			A.SDSHAN	AS ShipToID,
			A.SDDRQJ	AS RequestedDate,     
			A.SDLNTY	AS LineType,
			A.SDUORG	AS QuantityOrdered,
			A.SDUPRC	AS UnitPrice,
			A.SDAEXP	AS ExtendedPrice,
			A.SDFUP		AS ForeignUnitPrice,
			A.SDFEA		AS ForeignExtPrice,
			A.SDUOM		AS TransactionUOM,
			A.SDUOM4	AS PricingUOM,
			A.SDPROV	AS OverridePrice,
			A.SDDMCT	AS AgreementNumber,
			A.SDLOB		AS LineofBusiness,
			A.SDEUSE	AS EndUse,
			A.SDDTYS	AS DutyStatus,
			A.SDMOT		AS ModeOfTransport,
			A.SDUPC1	AS PriceCode1,
			A.SDUPC2	AS PriceCode2,
			A.SDUPC3	AS PriceCode3,
			A.SDTAX1	AS TaxableYN,
			COALESCE(B.SD$9TYP,0)		 AS AddressType,	
			A.SDAN8		AS SCBillToNumber,
			A.SDSHAN	AS SCShipToNumber,			   		
			COALESCE(B.SDIDLN, 0)		 AS SCBillToContactID,   
			COALESCE(B.SDRCK7, 0)		 AS SCShipToContactID,   	    
			COALESCE(B.SD$9SLN, 0)		 AS ShipLineNumber,
			COALESCE(X.IVCITM,'' '')		     AS ItemCrossRefNumber,
			COALESCE(Tax.DTTUPRC,0) AS TaxedUnitPrice,
			COALESCE(Tax.DTTFUP,0)  AS ForeignTaxedUnitPrice,
			COALESCE(Tax.DTTAEXP,0) AS TaxedExtendedPrice,
			COALESCE(Tax.DTTFEA,0)  AS ForeignTaxedExtPrice,
			COALESCE(Tax.DTUTA,0)   AS UnitTaxAmount,
			COALESCE(Tax.DTFUTA,0)  AS ForeignUnitTaxAmount,
			COALESCE(Tax.DTETA,0)   AS ExtendedTaxAmount,
			COALESCE(Tax.DTFETA,0)  AS ForeignExtTaxAmount,
			IM.IMSTKT				AS StockingType,
			A.SDRLIT				AS RelatedKitItemNo,
			A.SDCPNT				AS ComponentLineNumber,
			A.SDKTLN				AS KitMasterLineNo,
			COALESCE(Tax.DTTPROV,0)  AS TaxedPriceOverrideCode
		FROM [SCDATA].F42119 A 
		'|| LineNumberQuery ||'
		LEFT OUTER JOIN [SCDATA].FQ674211 B
 			ON A.SDKCOO = B.SDKCOO 
			AND A.SDDOCO = B.SDDOCO 
			AND A.SDDCTO = B.SDDCTO 
			AND A.SDLNID = B.SDLNID
		LEFT OUTER JOIN [SCDATA].F4101 IM --Item Master
			ON IM.IMITM = A.SDITM	
		LEFT OUTER JOIN [SCDATA].F4104	X /*Item Cross Ref */
			ON  X.IVAN8  = A.SDAN8
			AND X.IVITM  = A.SDITM
			AND X.IVXRT = ? 
			AND ? >= X.IVEFTJ AND ? <= X.IVEXDJ 
		LEFT OUTER JOIN [SCDATA].F42119TX Tax
			ON Tax.DTDOCO =  A.SDDOCO
			AND Tax.DTDCTO = A.SDDCTO
			AND Tax.DTKCOO = A.SDKCOO 
			AND Tax.DTLNID = A.SDLNID
		WHERE A.SDKCOO = ? 
		   AND A.SDDOCO = ? 
		   AND A.SDDCTO = ? 
		   AND A.SDNXTR = ?';
	
		PREPARE V_DYNAMIC FROM STRSQL;
	
		-- GET ORDER HEADER INFO
		OPEN TEMP_CURSOR1;
		-- GET ORDER DETAIL INFO
		OPEN TEMP_CURSOR2 USING CustCrossRefType, CurrentJulianDate, CurrentJulianDate, Company, OrderNumber, OrderType, QuoteStatus, 
								CustCrossRefType, CurrentJulianDate, CurrentJulianDate, Company, OrderNumber, OrderType, QuoteStatus;

		/*Configured Items*/
		CALL [SCLIBRARY].COM_GetSOConfiguredLineList(Company, OrderType, OrderNumber, LangPref);
	END;
END;
-- #desc						Calculate Quote Status in Detail Mode using all lines
--								Get a table with Quote Number, Quote Company, Quote Type and Quote Status
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				QTS_GetQuoteOrderHeadSrchList, QTS_GetQuoteRecentList

-- #param QuoteStatus			Quote Acceptance Status

CREATE OR REPLACE FUNCTION [SCLIBRARY].QTS_GETQUOTEDETAILSTATUSFNC 
( 
	QUOTESTATUS VARGRAPHIC(3) CCSID 13488 ) 
	RETURNS TABLE ( 
	QUOTENUMBER NUMERIC(8, 0) , 
	QUOTETYPE GRAPHIC(2) CCSID 13488 , 
	QUOTECOMPANY GRAPHIC(5) CCSID 13488 , 
	SDNXTR VARCHAR(25) 
) 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GETQUOTEDETAILSTATUSFNC 
MODIFIES SQL DATA
DISALLOW PARALLEL
NOT DETERMINISTIC 
CALLED ON NULL INPUT  
RETURN 
WITH CTE AS ( 
	SELECT 
		SDDOCO , SDDCTO , SDKCOO , 
		CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN 
			CASE WHEN SDNXTR = QUOTESTATUS THEN 'READYFORREVIEW' 
				WHEN SDNXTR < QUOTESTATUS THEN 'PENDING' 
			ELSE 'COMPLETED' END 
		ELSE 'CANCELLED' END AS SDNXTR 
	FROM [SCDATA] . F4211	 --Sales Order Lines 
	WHERE SDRLIT = '' 
	UNION ALL 
	SELECT 
		SDDOCO , SDDCTO , SDKCOO , 
		CASE WHEN (SDLTTR < '980' OR SDLTTR = '995') THEN 
			CASE WHEN SDNXTR = QUOTESTATUS THEN 'READYFORREVIEW' 
				WHEN SDNXTR < QUOTESTATUS THEN 'PENDING' 
			ELSE 'COMPLETED' END 
		ELSE 'CANCELLED' END AS SDNXTR 
	FROM [SCDATA] . F42119	 --Sales Order Lines 
		WHERE SDRLIT = '' 
	) 
		, CTE2 AS ( 
	SELECT 
		SDDOCO , SDDCTO , SDKCOO , SDNXTR , 
	ROW_NUMBER ( ) OVER ( PARTITION BY SDDOCO , SDDCTO , SDKCOO ORDER BY SDNXTR DESC ) STAT FROM CTE 
	) 
	 
	SELECT 
			SDDOCO , SDDCTO , SDKCOO , SDNXTR FROM CTE2 
	WHERE STAT = 1  ; 

-- #desc							N/A
-- #bl_class						Premier.Commerce.Quote.QuoteOrderHeaderSearchList.cs
-- #db_dependencies					QTS_GetQuoteOrderStatusFnc
-- #db_references					N/A

-- #param InstallationID			Installation Id
-- #param Company					Company
-- #param OrderType					Order Type
-- #param AddressNumber				Address Number
-- #param QuoteNumber				Quote Number
-- #param ShipToNumber				ShipTo Number
-- #param OrderDateFrom				Date Range
-- #param OrderDateTo				Date Range
-- #param ReferenceNumber			Reference Number
-- #param Pending					Quotes in status Pending
-- #param Ready						Quotes in status Ready to Review
-- #param SortBy					Column to filter by QuoteNumber, CustomerReference, QuoteDate,
--								    QuoteDate DESC, QuoteNumber DESC (Default Values) */
-- #param SortDir					Direction to filter A = Ascendant, D = Descendant, A DEFAULT Value
-- #param PageIndex					Page Index
-- #param PageSize					Page Size

/* To retrieve all open orders, should send Pending and Ready parameters with value 1
 */

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteOrderHeadSrchList
(
	IN InstallationID GRAPHIC(3) CCSID 13488 , 
	IN Company GRAPHIC(5) CCSID 13488 , 
	IN OrderType GRAPHIC(2) CCSID 13488 , 
	IN AddressNumber NUMERIC(15, 0) , 
	IN QuoteNumber NUMERIC(8, 0) , 
	IN ShipToNumber NUMERIC(15, 0) , 
	IN OrderDateFrom NUMERIC(15, 0) , 
	IN OrderDateTo NUMERIC(15, 0) , 
	IN ReferenceNumber VARGRAPHIC(25) CCSID 13488 , 
	IN Pending VARCHAR(1) , 
	IN Ready VARCHAR(1) , 
	IN SortBy VARCHAR(40) , 
	IN SortDir VARCHAR(1) , 
	IN PageIndex NUMERIC(15, 0) , 
	IN PageSize NUMERIC(15, 0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GetQuoteOrderHeadSrchList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	/* Dynamic */ 
	DECLARE SQL_DYNAMIC				VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE WHERE_DYNAMIC				VARGRAPHIC ( 10000 ) CCSID 13488 ;	/* Filter Conditions */ 
	DECLARE FROM_DYNAMIC				VARGRAPHIC ( 10000 ) CCSID 13488 ;	/* View name */ 
	DECLARE QUOTESTATUS_WHERE_DYNAMIC	VARGRAPHIC ( 10000 ) CCSID 13488 ;	/* Where condition to filter by status when the status filter is pending or ready */ 
	DECLARE STATUS				        VARGRAPHIC ( 10000 ) CCSID 13488 ; 
	DECLARE INNER_DYNAMIC				VARGRAPHIC ( 10000 ) CCSID 13488 ; 
  
	/* DYNAMIC SQL Select */ 
	DECLARE V_DYNAMIC				VARGRAPHIC ( 8000 ) CCSID 13488 ; 
  
	/* Dynamic sort statement */ 
	DECLARE SORT_DYNAMIC				VARGRAPHIC ( 70 ) CCSID 13488 ; 
	DECLARE SORTDIR_DYNAMIC				VARGRAPHIC ( 5 ) CCSID 13488 ; 
  
	DECLARE QOrderRestric				VARGRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE QOrderINID				    GRAPHIC ( 3 ) CCSID 13488 ; 
	DECLARE QOrderConstant				GRAPHIC ( 10 ) CCSID 13488 ; 
	 
	DECLARE QuoteAcceptanceStatusValue	VARGRAPHIC ( 3 ) CCSID 13488 ; 
	DECLARE OrderHistoryINID			GRAPHIC ( 3 ) CCSID 13488 ; 
	DECLARE QuoteStatusConstant			GRAPHIC ( 10 ) CCSID 13488 ; 
	 
	DECLARE QuoteAcceptanceLevel		VARGRAPHIC ( 256 ) CCSID 13488 ; 
	DECLARE QuoteTypeINID				GRAPHIC ( 3 ) CCSID 13488 ; 
	DECLARE QuoteTypeConstant			GRAPHIC ( 10 ) CCSID 13488 ; 
	 
	DECLARE CompanyConstant				VARGRAPHIC ( 1 ) CCSID 13488 ; 
	DECLARE ConstantInstallation		GRAPHIC ( 3 ) CCSID 13488 ; 
	 
	DECLARE ForeignConstant				VARGRAPHIC ( 256 ) CCSID 13488 ; 
	DECLARE ForeignConstantINID			GRAPHIC ( 3 ) CCSID 13488 ; 

	/* Paging */
    DECLARE RowStart INT;
    DECLARE RowEnd INT;

	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	SET RowEnd = (PageIndex * PageSize);
  
	SET QOrderConstant = 'SQ_RESTRIC' ; 
	SET QOrderINID = InstallationID ; 
  
	SET QuoteStatusConstant = 'QUOTSTAT' ; 
	SET OrderHistoryINID = InstallationID ; 
  
	/* Gets the Quote Order Document Restrictions */ 
	CALL SCLIBRARY . CMM_GetConstantValue ( QOrderConstant, QOrderINID, QOrderRestric) ; 
	/* Gets the Order History Status */ 
	CALL SCLIBRARY . CMM_GetConstantValue ( QuoteStatusConstant, OrderHistoryINID, QuoteAcceptanceStatusValue ) ; 
  
	/* Gets the Quote Acceptance Level - Header - Detail */ 
		SET QuoteTypeConstant = 'QUOTTYPE' ; 
		SET QuoteTypeINID = InstallationID ; 
	CALL SCLIBRARY . CMM_GetConstantValue ( QuoteTypeConstant, QuoteTypeINID, QuoteAcceptanceLevel ) ; 
	 
	 
	/* Gets foreign setting */ 
	SET ForeignConstantINID = InstallationID ; 
	CALL SCLIBRARY . CMM_GetConstantValue ( 'FOREGCURYN', ForeignConstantINID, ForeignConstant ) ; 
	 
		 
	SET SORTDIR_DYNAMIC = CASE SORTDIR WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END ; 
	 
	SET SORT_DYNAMIC = CASE SortBy
							WHEN 'QuoteNumber' THEN ' QUOTES.QuoteNumber ' || SORTDIR_DYNAMIC || ', QUOTES.QuoteDate DESC'
							WHEN 'CustomerReference' THEN 'UPPER(QUOTES.CustomerReference) ' || SORTDIR_DYNAMIC || ', QUOTES.QuoteDate DESC'
							WHEN 'QuoteDate' THEN 'QUOTES.QuoteDate ' || SORTDIR_DYNAMIC || ', QUOTES.QuoteNumber DESC'
							ELSE ' QUOTES.QuoteDate DESC, QUOTES.QuoteNumber DESC'
						END;
	 
	BEGIN 
		/* CURSOR FOR DYNAMIC SQL */ 
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC ; 
  
		/* Dynamic query condition */ 
		SET WHERE_DYNAMIC = '' ; 
		SET FROM_DYNAMIC = '' ; 
		SET QUOTESTATUS_WHERE_DYNAMIC = '' ; 
		SET INNER_DYNAMIC = '' ; 

		IF (AddressNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC = N' VW.BillToNumb = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' (1 = 1 OR ? IS NULL) ';
		END IF;

		IF (QuoteNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND VW.SHDOCO = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
		END IF;

		IF (ShipToNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND SHAN = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
		END IF;

		IF (OrderDateFrom IS NOT NULL) THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND VW.SHTRDJ >= ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
		END IF;

		IF (OrderDateTo IS NOT NULL) THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND VW.SHTRDJ <= ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? IS NULL) ';
		END IF;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      	 
        IF ( ReferenceNumber <> '*' ) THEN 
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(VW.SHVR01) LIKE ''%'' || ? || N''%'' ' ; 
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
		END IF ; 
	 
		IF ( OrderType <> '*' ) THEN 
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND VW.SHDCTO = ? ' ; 
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';
        END IF ; 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
        IF ( Company <> '*' AND Company <> '00000' ) THEN 
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND VW.SHKCOO = ? ' ; 
		ELSE 
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ? = ''*'') ';

			/* Read Account Receivable company constant */ 
			SET ConstantInstallation = InstallationID ; 
			CALL SCLIBRARY . CMM_GetConstantValue ( 'INSCOMPANY' , ConstantInstallation , CompanyConstant ) ; 
				IF ( CompanyConstant = N'L' ) THEN 
					SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ679912 CR
									 ON CR.CICO = VW.SHCO
									 AND CR.CI$9INID = ''' || ConstantInstallation || '''' ;  
				END IF ; 
		END IF ; 
		IF ( QOrderRestric = N'1' ) THEN 
				SET INNER_DYNAMIC = INNER_DYNAMIC || N' INNER JOIN [SCDATA].FQ67008 DR
										ON DR.DRKY = VW.SHDCTO
										AND DR.DR$9INID = ''' || QOrderINID || '''
										AND DR. DR$9CNST = ''' || QOrderConstant || '''' ; 
		END IF ; 
        /* Filter by open orders */ 
        IF ( ( READY = '1' ) AND ( PENDING = '1' ) ) THEN /* All Open Orders */ 
			SET QUOTESTATUS_WHERE_DYNAMIC = ' WHERE QuoteStatus IN (''PENDING'', ''READYFORREVIEW'') ' ; 
  
		ELSEIF ( READY = '1' ) THEN /* Ready */ 
			SET QUOTESTATUS_WHERE_DYNAMIC = ' WHERE QuoteStatus = ''READYFORREVIEW'' ' ; 
  
		ELSEIF ( PENDING = '1' ) THEN /* Pending */ 
			SET QUOTESTATUS_WHERE_DYNAMIC = ' WHERE QuoteStatus = ''PENDING'' ' ; 
  
		ELSE 
			SET WHERE_DYNAMIC = WHERE_DYNAMIC ; 
		END IF ; 

		IF ( WHERE_DYNAMIC <> '' ) THEN 
			SET WHERE_DYNAMIC = N' WHERE ' || WHERE_DYNAMIC ; 
    END IF ; 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
    IF QuoteAcceptanceLevel = 'DETAIL' THEN 
			IF SHIPTONUMBER IS NOT NULL THEN 
				SET STATUS = N' LATERAL ( SELECT SDNXTR FROM TABLE ( [SCLIBRARY].QTS_GETQTDETSTATBYSHIPTOFNC ( ''' || QuoteAcceptanceStatusValue || ''' , ' || SHIPTONUMBER || ' ) ) AS B 
								 WHERE B.QUOTENUMBER = TEMP_TABLE.SHDOCO
								 AND B.QUOTECOMPANY = TEMP_TABLE.SHKCOO
						    	 AND B.QUOTETYPE = TEMP_TABLE.SHDCTO ) AS QTS ' ; 
            ELSE 
                SET STATUS = N' LATERAL ( SELECT SDNXTR FROM TABLE ( [SCLIBRARY].QTS_GETQUOTEDETAILSTATUSFNC ( ''' || QuoteAcceptanceStatusValue || ''') ) AS B 
								 WHERE B.QUOTENUMBER = TEMP_TABLE.SHDOCO
								 AND B.QUOTECOMPANY=TEMP_TABLE.SHKCOO
						    	 AND B.QUOTETYPE=TEMP_TABLE.SHDCTO ) AS QTS ' ; 
            END IF ; 
    ELSE 
        SET STATUS = N'LATERAL ( SELECT SDNXTR FROM TABLE ( [SCLIBRARY].QTS_GETQUOTEORDERSTATUSFNC ( TEMP_TABLE.SHDOCO , TEMP_TABLE.SHDCTO , TEMP_TABLE.SHKCOO , ''' || QuoteAcceptanceStatusValue || ''' ) ) AS B  ) AS QTS ' ; 
    END IF ; 

    IF ( SHIPTONUMBER IS NOT NULL ) OR ( READY = '1' ) OR ( PENDING = '1' ) THEN 
			SET FROM_DYNAMIC = N' FROM [SCLIBRARY].QTS_OrderHeadSrchVW VW ' ; 
    ELSE 
            SET FROM_DYNAMIC = N' FROM [SCLIBRARY].QTS_OrderHeadVW  VW ' ; 
    END IF ; 
    SET SQL_DYNAMIC = N'
		WITH CTE1 AS (
			SELECT
				QUOTES.QuoteNumber, 
				QUOTES.OrderType,
				QUOTES.OrderCompany, 
				QUOTES.CustomerReference, 
				QUOTES.QuoteDate,
				QUOTES.RequestedDate, 		
				QUOTES.RelatedOrderNumber,
				QUOTES.RelatedOrderType,
				QUOTES.QuoteStatus,
				QUOTES.CurrencyCode,
				QUOTES.CurrencyMode,
				QUOTES.BillToNumber,
				ROW_NUMBER() OVER(ORDER BY ' || SORT_DYNAMIC || ') AS RNUM 
			FROM 
				(SELECT DISTINCT
					TEMP_TABLE.SHDOCO		AS QuoteNumber, 
					TEMP_TABLE.SHDCTO		AS OrderType,
					TEMP_TABLE.SHKCOO		AS OrderCompany, 
					TEMP_TABLE.SHVR01		AS CustomerReference, 
					TEMP_TABLE.SHTRDJ		AS QuoteDate,
					TEMP_TABLE.SHDRQJ		AS RequestedDate, 			
					TEMP_TABLE.SHRORN		AS RelatedOrderNumber,
					TEMP_TABLE.SHRCTO		AS RelatedOrderType,
					CASE WHEN TEMP_TABLE.QuoteStatus = '' '' THEN QTS.SDNXTR ELSE TEMP_TABLE.QuoteStatus END  QuoteStatus ,
					TEMP_TABLE.SHCRCD		AS CurrencyCode,
					TEMP_TABLE.SHCRRM		AS CurrencyMode,
					TEMP_TABLE.BillToNumber
					FROM
					(
						SELECT DISTINCT
							VW.SHDOCO, 
							VW.SHDCTO, 
							VW.SHKCOO,
							VW.SHVR01,
							VW.SHTRDJ,
							VW.SHDRQJ,						
							VW.SHRORN,
							VW.SHRCTO,
							CASE WHEN VW.SHCRRM = ''F'' AND ? = ''N''  THEN  ''NOTALLOWED'' 
							ELSE '' '' END QuoteStatus,
							VW.SHCRCD,
							VW.SHCRRM,
							VW.BillToNumb AS BillToNumber' 
                        || FROM_DYNAMIC 
                        || INNER_DYNAMIC 
                        || WHERE_DYNAMIC || '
					) TEMP_TABLE,  ' 
                       || STATUS || '
				) QUOTES ' 
                    || QUOTESTATUS_WHERE_DYNAMIC || '
			)
			SELECT 
				CTE1.QuoteNumber, CTE1.OrderType, CTE1.OrderCompany, CTE1.CustomerReference, CTE1.QuoteDate, 
				CTE1.RequestedDate, CTE1.RelatedOrderNumber, CTE1.RelatedOrderType, CTE1.QuoteStatus, CTE1.CurrencyCode, 
				CTE1.CurrencyMode, CTE1.BillToNumber,(SELECT COUNT(1) FROM CTE1) as TotalRowCount
			FROM CTE1	 
			WHERE ((? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ?))' ;   
		PREPARE V_DYNAMIC FROM SQL_DYNAMIC ; 
		OPEN TEMP_CURSOR1 USING ForeignConstant, AddressNumber, QuoteNumber, ShipToNumber, OrderDateFrom, OrderDateTo, 
								ReferenceNumber, OrderType, Company, PageIndex, PageSize, RowStart, RowEnd; 		 
	END ; 
END  ; 
-- #desc								Load a order detail
-- #bl_class							Premier.Commerce.Quote.QuoteOrderInfo.cs
-- #db_dependencies						QTS_GetQuoteOrderBillToInfo.sql , QTS_GetQuoteOrderInfoShipments.sql, QTS_GetQuoteOrderStatusFnc.sql
-- #db_references						N/A

-- #param InstallationID				Installation ID
-- #param OrderCompany					Company ID
-- #param OrderType						Document Type
-- #param QuoteNumber					Quote Number
-- #param RetrieveWebContentInfo		Retrieve Web Content Info
-- #param LangPref						Language Preference

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteOrderInfo_Z
(
	IN InstallationID GRAPHIC(3) CCSID 13488 , 
	IN OrderCompany GRAPHIC(5) CCSID 13488 , 
	IN OrderType GRAPHIC(2) CCSID 13488 , 
	IN QuoteNumber NUMERIC(8, 0) ,
	IN RetrieveWebContentInfo  INT, 
	IN LangPref GRAPHIC(2) CCSID 13488 
)

DYNAMIC RESULT SETS 5
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GetQuoteOrderInfo_Z
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
  
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_ORDERDETAIL 
	( 
		OrderCompany			GRAPHIC ( 5 ) CCSID 13488 , 
		ORDERTYPE				GRAPHIC ( 2 ) CCSID 13488 , 
		QuoteNumber				NUMERIC ( 8 , 0 ) , 
		SCBILLTONUMBER			NUMERIC ( 15 , 0 ) , 
		LINENUMBER				NUMERIC ( 15 , 0 ) , 
		TRANSACTIONDATE			NUMERIC ( 15 , 0 ) , 
		REQUESTEDDATE			NUMERIC ( 15 , 0 ) , 
		LINETYPE				VARCHAR ( 2 ) , 
		TAXABLEYN				VARCHAR ( 1 ) , 
		TAXAREA					VARCHAR ( 10 ) , 
		TAXEXPLANATIONCODE		VARCHAR ( 2 ) , 
        SHIPTOID				NUMERIC ( 15 , 0 ) , 
        SCSHIPTONUMBER			NUMERIC ( 15 , 0 ) , 
		SHIPTONAME				VARCHAR ( 40 ) , 
		COSTCENTER				VARCHAR ( 12 ) , 
		COSTCENTERHEADER		VARCHAR ( 12 ) , 
		DESCRIPTION1			GRAPHIC ( 30 ) CCSID 13488 , 
		DESCRIPTION2			GRAPHIC ( 30 ) CCSID 13488 , 
		QUANTITYORDERED			NUMERIC ( 15 , 0 ) , 
		SHIPPEDQUANTITY			NUMERIC ( 15 , 0 ) , 
		UNITOFMEASURE			VARCHAR ( 2 ) , 
		PRICINGUNITOFMEASURE	VARCHAR ( 2 ) , 
		BACKORDEREDQUANTITY		NUMERIC ( 15 , 0 ) , 
		CANCELEDQUANTITY		NUMERIC ( 15 , 0 ) , 
		AMOUNTUNITPRICE			NUMERIC ( 15 , 0 ) , 
		FOREIGNUNITPRICE		NUMERIC ( 15 , 0 ) , 
		AMOUNTEXTPRICE			NUMERIC ( 15 , 0 ) , 
		FOREIGNEXTPRICE			NUMERIC ( 15 , 0 ) , 
		INVENTORYINTERFACE		VARCHAR ( 1 ) , 
		IDENTIFIERSHORTITEM		NUMERIC ( 15 , 0 ) , 
		LONGITEMNUMBER			VARCHAR ( 25 ) , 
		AUXITEMNUMBER			VARCHAR ( 25 ) , 
		NEXTSTATUS				VARCHAR ( 6 ) , 
		LASTSTATUS				VARCHAR ( 6 ) , 
		OVERRIDEPRICE			VARCHAR ( 2 ) , 
		STOCKINGTYPE			VARCHAR ( 2 ) , 
		RELATEDKITITEMNO		VARCHAR ( 16 ) , 
		KITMASTERLINENO			NUMERIC ( 15 , 0 ) , 
		COMPONENTLINENUMBER		NUMERIC ( 15 , 0 ) , 
		SHIPLINENUMBER			NUMERIC ( 15 , 0 ) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ; 
	 
	DECLARE GLOBAL TEMPORARY TABLE SESSION . TMP_ORDERHEADER 
	(			 
		SCBILLTONUMBER		NUMERIC ( 15 , 0 ) , 
		SCSHIPTONUMBER		NUMERIC ( 15 , 0 ) , 
		ADDRESSBOOKTYPE		NUMERIC ( 15 , 0 ) , 
		DELIVERYINST1		GRAPHIC ( 30 ) CCSID 13488, 
		DELIVERYINST2		GRAPHIC ( 30 ) CCSID 13488, 
		CUSTOMERPO			GRAPHIC ( 25 ) CCSID 13488, 
		OrderCompany		GRAPHIC ( 5 ) CCSID 13488 , 
		ORDERTYPE			GRAPHIC ( 2 ) CCSID 13488 , 
		QuoteNumber			NUMERIC ( 8 , 0 ) ,	 
		ORDERDATE			NUMERIC ( 15 , 0 ) , 
		CANCELDATE			NUMERIC ( 15 , 0 ) , 
		REQUESTEDDATE		NUMERIC ( 15 , 0 ) , 
		MARKETINGCODE		VARCHAR ( 30 ) , 
		MEMBERSHIPID		NUMERIC ( 15 , 0 ) , 
		PERCENTAGEDISCOUNT	NUMERIC ( 15 , 0 ) , 
		DISCOUNTTYPE		NUMERIC ( 15 , 0 ) , 
		REASONCODE			VARCHAR ( 2 ) , 
		CURRENCYCODE		VARCHAR ( 3 ) , 
		CURRENCYMODE		VARCHAR ( 1 ) , 
		CURRENCYDESC		GRAPHIC ( 30 ) CCSID 13488, 
		ORDERHEADERCOMPANY VARCHAR ( 5 ) , 
		CONTACTID			NUMERIC ( 15 , 0 ) 
	) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ; 
  
	BEGIN 
	 
		/* STORE PROCEDURE VARIABLES */ 
		DECLARE SCBILLTO		NUMERIC ( 15 , 0 ) ; 
		DECLARE SCSHIPTO		NUMERIC ( 15 , 0 ) ; 
		DECLARE	CONTACTIDTMP		NUMERIC ( 15 , 0 ) ; 
		DECLARE ORDERHEADERCOMPANYTMP	VARCHAR ( 5 ) ; 
		DECLARE CURRENCYMODE	VARCHAR ( 1 ) ; 
		 
		 -- Gets Cust Cross Document Restrictions 
		DECLARE CUSTCROSSREFTYPE	VARGRAPHIC ( 256 ) CCSID 13488 ; 
		DECLARE CUSTCROSSINID		VARCHAR ( 3 ) ;
		 
		DECLARE CURRENTJULIANDATE INT DEFAULT 0 ; 
		 
		DECLARE CANCELLN			VARGRAPHIC ( 256 ) CCSID 13488 ; 
		DECLARE CANCELLNINID	VARCHAR ( 3 ) ; 
		DECLARE CANCELLNCONSTANT	VARCHAR ( 10 ) ; 
		 
		DECLARE QUOTESTATUS			VARGRAPHIC ( 3 ) CCSID 13488 ; 
		DECLARE QUOTEHISTORYINID	GRAPHIC ( 3 ) CCSID 13488 ; 
		DECLARE QUOTESTATUSCONSTANT	GRAPHIC ( 10 ) CCSID 13488 ; 
	 
		DECLARE QUOTEACCEPTANCELEVEL				VARGRAPHIC ( 256 ) CCSID 13488 ; 
		DECLARE QUOTETYPEINID			GRAPHIC ( 3 ) CCSID 13488 ; 
		DECLARE QUOTETYPECONSTANT		GRAPHIC ( 10 ) CCSID 13488 ; 
		 
		DECLARE FOREIGNCONSTANT	VARGRAPHIC ( 256 ) CCSID 13488 ; 
		DECLARE FOREIGNCONSTANTINID GRAPHIC ( 3 ) CCSID 13488 ; 
  
		 -- Gets Cust Cross Document Restrictions 
		SET CUSTCROSSINID = InstallationID ; 
		CALL SCLIBRARY . CMM_GetConstantValue ( 'CUST_CROSS' , CustCrossINID , CustCrossRefType ) ;
  
		 --Get the current Julian Date 
		SET CURRENTJULIANDATE = SCLIBRARY . CMM_GetCurrentJulianDate ( CURRENT DATE ) ; 
		 
		 -- Gets the Quote Display Canceled Quote Lines(Y/N) 
		SET CANCELLNCONSTANT = 'QUOTCANCYN' ; 
		SET CANCELLNINID = InstallationID ; 
	CALL SCLIBRARY . CMM_GetConstantValue ( CancelLnConstant , CancelLnINID , CancelLn ) ; 
	 
	 -- Gets the Quote Status for Quote Convertion 
		SET QUOTESTATUSCONSTANT = 'QUOTSTAT' ; 
		SET QUOTEHISTORYINID = InstallationID ; 
		CALL SCLIBRARY . CMM_GetConstantValue ( QuoteStatusConstant , QuoteHistoryINID , QuoteStatus ) ; 
  
		/* Gets the Quote Acceptance Level - Header - Detail */ 
		SET QUOTETYPECONSTANT = 'QUOTTYPE' ; 
		SET QUOTETYPEINID = InstallationID ; 
		CALL SCLIBRARY . CMM_GetConstantValue ( QuoteTypeConstant, QuoteTypeINID, QuoteAcceptanceLevel) ; 
		 
		 
		SET FOREIGNCONSTANTINID = InstallationID ; 
		CALL SCLIBRARY . CMM_GetConstantValue ( 'FOREGCURYN', ForeignConstantINID, ForeignConstant ) ; 
  
		BEGIN 
		 
			/********************************Detail*********************************/ 
			DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
			SELECT 
				OrderCompany as OrderCompany,
				OrderType as OrderType,
				QuoteNumber as QuoteNumber,
				A.LineNumber,
				A.TransactionDate,
				A.RequestedDate,
				A.LineType,
				A.TaxableYN,
				A.TaxArea,
				A.TaxExplanationCode,		
				A.ShipToID,
				A.SCShipToNumber,
				A.ShipToName,
				A.CostCenter,
				A.CostCenterHeader,
				COALESCE(B.IVCITM,' ')	AS ItemCrossRefNumber,
				COALESCE ( ContenDesc.DESC1, A.Description1 ) AS Description1, 
				COALESCE ( ContenDesc.DESC2, A.Description2 ) AS Description2, 
				ContenDesc.URL AS URL , 
				A.QuantityOrdered,
				A.ShippedQuantity,
				A.UnitOfMeasure,
				A.PricingUnitOfMeasure,
				A.BackorderedQuantity,
				A.CanceledQuantity,
				A.AmountUnitPrice,
				A.ForeignUnitPrice,
				A.AmountExtPrice,
				A.ForeignExtPrice,
				A.InventoryInterface,
				A.IdentifierShortItem,
				A.OverridePrice,
				A.LongItemNumber,
				A.AuxItemNumber,
				( CASE										 
				WHEN ( CurrencyMode = 'F' AND FOREIGNCONSTANT = 'N' ) 
					THEN 'NOTALLOWED'																 
				WHEN ( A . NextStatus = '999' AND A . LastStatus >= '980' AND A.LastStatus <> '995' ) 
					THEN 'CANCELLED' 
				WHEN ( A . NextStatus < QuoteStatus ) 
					THEN 'PENDING' 
				WHEN ( A . NextStatus = QuoteStatus ) 
					THEN 'READYFORREVIEW' 
				WHEN ( A . NextStatus > QuoteStatus ) 
					THEN 'COMPLETED'			 
				END ) AS QUOTESTATUS , 
				A.StockingType,
				A.RelatedKitItemNo,
				A.KitMasterLineNo,
				A.ComponentLineNumber,
				COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
				COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
				COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
				COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
				COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
				COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
				A.ShipLineNumber,
				CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			    COALESCE(C.RFOGNO, 0 ) AS ParentLineNo
			FROM SESSION . TMP_ORDERDETAIL A 
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON  C.RFDOCO = A.QuoteNumber
				AND C.RFDCTO = A.OrderType
				AND C.RFKCOO = A.OrderCompany
				AND C.RFLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F4104	B /*Item Cross Ref */
				ON  B.IVAN8  = A.SCBillToNumber
				AND B.IVITM  = A.IdentifierShortItem
				AND B.IVXRT = CustCrossRefType
				AND CURRENTJULIANDATE >= B . IVEFTJ AND CURRENTJULIANDATE <= B . IVEXDJ 
			LEFT OUTER JOIN [SCDATA] . F4211TX TAX 
				ON TAX . DTDOCO = A . QuoteNumber 
				AND TAX . DTDCTO = A . OrderType 
				AND TAX . DTKCOO = A . OrderCompany 
				AND TAX . DTLNID = A . LineNumber 
			LEFT OUTER JOIN [SCDATA] . F42119TX TXHISTORY 
				ON TXHISTORY . DTDOCO = A . QuoteNumber 
				AND TXHISTORY . DTDCTO = A . OrderType 
				AND TXHISTORY . DTKCOO = A . OrderCompany 
				AND TXHISTORY . DTLNID = A . LineNumber 
			LEFT OUTER JOIN TABLE ( [SCLIBRARY].INV_GetItemContenDescAndURLFnc( InstallationID, A.IdentifierShortItem, LangPref, 0 ) ) AS ContenDesc
				 ON ContenDesc.DESCITM = A.IdentifierShortItem
			ORDER BY A . LineNumber ASC 
			FOR READ ONLY ;	 
			
			DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
			SELECT 
				OrderCompany as OrderCompany,
				OrderType as OrderType,
				QuoteNumber as QuoteNumber,
				A.LineNumber,
				A.TransactionDate,
				A.RequestedDate,
				A.LineType,
				A.TaxableYN,
				A.TaxArea,
				A.TaxExplanationCode,		
				A.ShipToID,
				A.SCShipToNumber,
				A.ShipToName,
				A.CostCenter,
				A.CostCenterHeader,
				COALESCE(B.IVCITM,' ')	AS ItemCrossRefNumber,
				A.Description1 AS Description1, /*Return this description for miscellaneous line and for Tracking lines */
				A.Description2 AS Description2, 
				N'' AS URL , 
				A.QuantityOrdered,
				A.ShippedQuantity,
				A.UnitOfMeasure,
				A.PricingUnitOfMeasure,
				A.BackorderedQuantity,
				A.CanceledQuantity,
				A.AmountUnitPrice,
				A.ForeignUnitPrice,
				A.AmountExtPrice,
				A.ForeignExtPrice,
				A.InventoryInterface,
				A.IdentifierShortItem,
				A.OverridePrice,
				A.LongItemNumber,
				A.AuxItemNumber,
				( CASE										 
				WHEN ( CurrencyMode = 'F' AND FOREIGNCONSTANT = 'N' ) 
					THEN 'NOTALLOWED'																 
				WHEN ( A . NextStatus = '999' AND A . LastStatus >= '980' AND A.LastStatus <> '995') 
					THEN 'CANCELLED' 
				WHEN ( A . NextStatus < QuoteStatus ) 
					THEN 'PENDING' 
				WHEN ( A . NextStatus = QuoteStatus ) 
					THEN 'READYFORREVIEW' 
				WHEN ( A . NextStatus > QuoteStatus ) 
					THEN 'COMPLETED'			 
				END ) AS QUOTESTATUS , 
				A.StockingType,
				A.RelatedKitItemNo,
				A.KitMasterLineNo,
				A.ComponentLineNumber,
				COALESCE(COALESCE(Tax.DTTUPRC, TxHistory.DTTUPRC),0) AS TaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTFUP, TxHistory.DTTFUP),0)  AS ForeignTaxedUnitPrice,
				COALESCE(COALESCE(Tax.DTTAEXP, TxHistory.DTTAEXP),0) AS TaxedExtendedPrice,
				COALESCE(COALESCE(Tax.DTTFEA, TxHistory.DTTFEA),0)  AS ForeignTaxedExtPrice,
				COALESCE(COALESCE(Tax.DTUTA, TxHistory.DTUTA),0)   AS UnitTaxAmount,
				COALESCE(COALESCE(Tax.DTFUTA, TxHistory.DTFUTA),0)  AS ForeignUnitTaxAmount,
				COALESCE(COALESCE(Tax.DTETA, TxHistory.DTETA),0)   AS ExtendedTaxAmount,
				COALESCE(COALESCE(Tax.DTFETA, TxHistory.DTFETA),0)  AS ForeignExtTaxAmount,
				A.ShipLineNumber,
				CASE WHEN C.RFOGNO IS NULL THEN 'N' ELSE 'Y' END AS IsFreeGood,
			    COALESCE(C.RFOGNO, 0 ) AS ParentLineNo
			FROM SESSION . TMP_ORDERDETAIL A 
			LEFT OUTER JOIN [SCDATA].F4573 C  -- Free Goods lines
				ON  C.RFDOCO = A.QuoteNumber
				AND C.RFDCTO = A.OrderType
				AND C.RFKCOO = A.OrderCompany
				AND C.RFLNID = A.LineNumber
			LEFT OUTER JOIN [SCDATA].F4104	B /*Item Cross Ref */
				ON  B.IVAN8  = A.SCBillToNumber
				AND B.IVITM  = A.IdentifierShortItem
				AND B.IVXRT = CustCrossRefType
				AND CURRENTJULIANDATE >= B . IVEFTJ AND CURRENTJULIANDATE <= B . IVEXDJ 
			LEFT OUTER JOIN [SCDATA] . F4211TX TAX 
				ON TAX . DTDOCO = A . QuoteNumber 
				AND TAX . DTDCTO = A . OrderType 
				AND TAX . DTKCOO = A . OrderCompany 
				AND TAX . DTLNID = A . LineNumber 
			LEFT OUTER JOIN [SCDATA] . F42119TX TXHISTORY 
				ON TXHISTORY . DTDOCO = A . QuoteNumber 
				AND TXHISTORY . DTDCTO = A . OrderType 
				AND TXHISTORY . DTKCOO = A . OrderCompany 
				AND TXHISTORY . DTLNID = A . LineNumber 
			ORDER BY A . LineNumber ASC 
			FOR READ ONLY ;	 

			/********************************Header*********************************/ 
			DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
			SELECT 
			A.SCBillToNumber,
			A.SCShipToNumber,
			A.AddressBookType,
			A.DeliveryInst1,
			A.DeliveryInst2,
			A.CustomerPO,
			A.OrderCompany AS OrderCompany,
			A.OrderType AS OrderType,
			A.QuoteNumber AS QuoteNumber,
			A.OrderDate,
			A.CancelDate,
			A.RequestedDate,
			A.MarketingCode,
			A.MembershipID, 
			A.PercentageDiscount,
			A.DiscountType,
			A.ReasonCode,
			A.CurrencyCode,
			A.CurrencyMode,
			A.CurrencyDesc,
			A.OrderHeaderCompany, 
			A.ContactID,
			COALESCE(COALESCE(Tax.STUTP, TxHistory.STUTP), 0) AS UseTaxedPrices,
			CASE WHEN  A.CurrencyMode = 'F' AND FOREIGNCONSTANT = 'N' THEN 'NOTALLOWED' 
			ELSE QTS . SDNXTR END QuoteStatus 
			FROM SESSION . TMP_ORDERHEADER A , 
			LATERAL ( SELECT SDNXTR FROM TABLE ( SCLIBRARY . QTS_GETQUOTEORDERSTATUSFNC ( A . QuoteNumber , A . OrderType , A . OrderCompany , QuoteStatus ) ) AS D ) AS QTS	 
			LEFT OUTER JOIN [SCDATA].F4201TX Tax
				ON Tax.STDOCO = QuoteNumber 
				AND Tax.STDCTO = OrderType
				AND Tax.STKCOO = OrderCompany
			LEFT OUTER JOIN [SCDATA].F42019TX TxHistory
				ON TxHistory.STDOCO = QuoteNumber 
				AND TxHistory.STDCTO = OrderType
				AND TxHistory.STKCOO = OrderCompany
			FOR READ ONLY ; 
			 
			/********************************Detail*********************************/ 
			INSERT INTO SESSION . TMP_ORDERDETAIL 
			(	 
	            OrderCompany,
				OrderType,
				QuoteNumber,	
				SCBillToNumber,		
				LineNumber,
				TransactionDate,
				RequestedDate,
				LineType,
				TaxableYN,
				TaxArea,
				TaxExplanationCode,
				ShipToID,
				SCShipToNumber,
				ShipToName,
				CostCenter,
				CostCenterHeader,
				Description1,
				Description2,
				QuantityOrdered,
				ShippedQuantity,
				UnitOfMeasure,
				PricingUnitOfMeasure,
				BackorderedQuantity,
				CanceledQuantity,
				AmountUnitPrice,
				ForeignUnitPrice,
				AmountExtPrice,
				ForeignExtPrice,
				InventoryInterface,			
				IdentifierShortItem,
				LongItemNumber,
				AuxItemNumber,
				NextStatus,
				LastStatus,
				OverridePrice,
				StockingType,
				RelatedKitItemNo,
				KitMasterLineNo,
				ComponentLineNumber,
				ShipLineNumber
			)		 
			(SELECT
				A.SDKCOO				AS OrderCompany,
				A.SDDCTO				AS OrderType,
				A.SDDOCO				AS QuoteNumber,					
				A.SDAN8					AS SCBillToNumber,
				A.SDLNID				AS LineNumber,
				A.SDTRDJ				AS TransactionDate, 
				A.SDDRQJ				AS RequestedDate,
				A.SDLNTY				AS LineType,
				A.SDTAX1				AS TaxableYN,
				A.SDTXA1				AS TaxArea,
				A.SDEXR1				AS TaxExplanationCode,
				A.SDSHAN				AS ShipToID,
				A.SDSHAN				AS SCShipToNumber,
				' '						AS ShipToName,
				A.SDMCU					AS CostCenter, 
				A.SDEMCU				AS CostCenterHeader,				
				A.SDDSC1				AS Description1,
				A.SDDSC2				AS Description2,
				A.SDUORG				AS QuantityOrdered,
				A.SDSOQS				AS ShippedQuantity,
				A.SDUOM					AS UnitOfMeasure,
				A.SDUOM4				AS PricingUnitOfMeasure,
				A.SDSOBK				AS BackorderedQuantity,
				A.SDSOCN				AS CanceledQuantity,
				A.SDUPRC				AS AmountUnitPrice,
				A.SDFUP					AS ForeignUnitPrice,
				A.SDAEXP				AS AmountExtPrice,
				A.SDFEA					AS ForeignExtPrice,
				COALESCE(LT.LFIVI,' ')	AS InventoryInterface,
				A.SDITM					AS IdentifierShortItem,
				A.SDLITM				AS LongItemNumber,
				A.SDAITM				AS AuxItemNumber,
				A.SDNXTR				AS NextStatus, 
				A.SDLTTR				AS LastStatus,
				A.SDPROV				AS OverridePrice,
				IM.IMSTKT				AS StockingType,
				A.SDRLIT				AS RelatedKitItemNo,
				A.SDKTLN				AS KitMasterLineNo,
				A.SDCPNT				AS ComponentLineNumber,
				COALESCE(B.SD$9SLN,0)	AS ShipLineNumber
			FROM [SCDATA] . F4211 A		 --Standard Sales OrderDetail 
			LEFT OUTER JOIN [SCDATA] . FQ674211 B 
				ON	B . SDKCOO = A . SDKCOO 
				AND B . SDDOCO = A . SDDOCO 
				AND B . SDDCTO =	A . SDDCTO 
				AND B . SDLNID =	A . SDLNID 
			INNER JOIN [SCDATA] . F40205	LT  --Line Type 
				ON LT . LFLNTY = A . SDLNTY 
			LEFT OUTER JOIN [SCDATA] . F4101 IM  --Item Master 
				ON IM . IMITM = A . SDITM 
			WHERE	 
				A . SDDOCO = QuoteNumber 
				AND	A . SDDCTO = OrderType 
				AND	A . SDKCOO = OrderCompany 
				AND ( CANCELLN = 'Y' OR (A . SDLTTR < '980' OR A.SDLTTR = '995') ) 
			UNION ALL 
		SELECT
				A.SDKCOO				AS OrderCompany,
				A.SDDCTO				AS OrderType,
				A.SDDOCO				AS QuoteNumber,	
				A.SDAN8					AS SCBillToNumber,
				A.SDLNID				AS LineNumber,
				A.SDTRDJ				AS TransactionDate,
				A.SDDRQJ				AS RequestedDate,
				A.SDLNTY				AS LineType,
				A.SDTAX1				AS TaxableYN,
				A.SDTXA1				AS TaxArea,
				A.SDEXR1				AS TaxExplanationCode,
				A.SDSHAN				AS ShipToID,
				A.SDSHAN				AS SCShipToNumber,
				' '						AS ShipToName,
				A.SDMCU					AS CostCenter, 
				A.SDEMCU				AS CostCenterHeader,
				A.SDDSC1				AS Description1,
				A.SDDSC2				AS Description2,
				A.SDUORG				AS QuantityOrdered,
				A.SDSOQS				AS ShippedQuantity,
				A.SDUOM					AS UnitOfMeasure,
				A.SDUOM4				AS PricingUnitOfMeasure,
				A.SDSOBK				AS BackorderedQuantity,
				A.SDSOCN				AS CanceledQuantity,
				A.SDUPRC				AS AmountUnitPrice,
				A.SDFUP					AS ForeignUnitPrice,
				A.SDAEXP				AS AmountExtPrice,
				A.SDFEA					AS ForeignExtPrice,
				COALESCE(LT.LFIVI,' ')	AS InventoryInterface,
				A.SDITM					AS IdentifierShortItem,
				A.SDLITM,
				A.SDAITM,
				A.SDNXTR				AS NextStatus, 
				A.SDLTTR				AS LastStatus,
				A.SDPROV				AS OverridePrice,
				IM.IMSTKT				AS StockingType,
				A.SDRLIT				AS RelatedKitItemNo,
				A.SDKTLN				AS KitMasterLineNo,
				A.SDCPNT				AS ComponentLineNumber,
				COALESCE(B.SD$9SLN,0)	AS ShipLineNumber
			FROM	[SCDATA] . F42119 A 
			LEFT OUTER JOIN [SCDATA] . FQ674211 B 
				ON A . SDDOCO = B . SDDOCO 
				AND A . SDDCTO = B . SDDCTO 
				AND A . SDKCOO = B . SDKCOO										 
				AND A . SDLNID = B . SDLNID	
			INNER JOIN [SCDATA] . F40205	LT  --Line Type 
				ON LT . LFLNTY = A . SDLNTY 
			LEFT OUTER JOIN [SCDATA] . F4101 IM  --Item Master 
				ON IM . IMITM = A . SDITM 
			WHERE A . SDDOCO = QuoteNumber 
			AND	A . SDDCTO = OrderType 
			AND	A . SDKCOO = OrderCompany	 
			AND ( CANCELLN = 'Y' OR (A . SDLTTR < '980' OR A.SDLTTR = '995') ) 
			) ; 
			 
			 
			/********************************Header*********************************/ 
			INSERT INTO SESSION . TMP_ORDERHEADER 
			(				 
				SCBillToNumber,
				SCShipToNumber,
				AddressBookType,
				DeliveryInst1,
				DeliveryInst2,
				CustomerPO,
				OrderCompany,
				OrderType,
				QuoteNumber,					
				OrderDate,
				CancelDate,
				RequestedDate,
				MarketingCode,
				MembershipID, 
				PercentageDiscount,
				DiscountType,
				ReasonCode,
				CurrencyCode,
				CurrencyMode,
				CurrencyDesc,
				OrderHeaderCompany,
				ContactID
						 
			) 
			SELECT	 
				A.SHAN8  AS SCBillToNumber,
				A.SHSHAN AS SCShipToNumber,
				COALESCE(B.SH$9TYP,0)			AS AddressBookType,
				A.SHDEL1 AS DeliveryInst1, 
				A.SHDEL2 AS DeliveryInst2,
				A.SHVR01 AS CustomerPO,
				A.SHKCOO AS OrderCompany,
				A.SHDCTO AS OrderType,
				A.SHDOCO AS QuoteNumber,
				A.SHTRDJ AS OrderDate,
				A.SHCNDJ AS CancelDate,
				A.SHDRQJ AS RequestedDate,
				COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
				B.SH$9MMID AS MembershipID, 
				B.SH$9PD AS PercentageDiscount,
				B.SH$9DT AS DiscountType,
				A.SHRCD  AS ReasonCode,
				A.SHCRCD AS CurrencyCode,
				A.SHCRRM AS CurrencyMode,
				C.CVDL01 AS CurrencyDesc,
				A . SHCO	AS	OrderHeaderCompany , 
				COALESCE ( B . SHIDLN , 0 ) AS ContactID			 
				 
			FROM [SCDATA] . F4201 A 
			LEFT OUTER JOIN [SCDATA] . FQ674201 B 
				ON	A . SHDOCO = B . SHDOCO 
				AND A . SHDCTO = B . SHDCTO 
				AND A . SHKCOO = B . SHKCOO 
			LEFT OUTER JOIN [SCDATA] . F0013 C 
				ON A . SHCRCD = C . CVCRCD						 
			WHERE A . SHDOCO = QuoteNumber 
			AND	A . SHDCTO = OrderType 
			AND	A . SHKCOO = OrderCompany 
			UNION ALL 
			SELECT	
					A.SHAN8	 AS SCBillToNumber,
					A.SHSHAN AS SCShipToNumber,
					COALESCE(B.SH$9TYP,0)			AS AddressBookType,
					A.SHDEL1 AS DeliveryInst1, 
					A.SHDEL2 AS DeliveryInst2,
					A.SHVR01 AS CustomerPO,
					A.SHKCOO AS OrderCompany,
					A.SHDCTO AS OrderType,
					A.SHDOCO AS QuoteNumber,
					A.SHTRDJ AS OrderDate,
					A.SHCNDJ AS CancelDate,
					A.SHDRQJ AS RequestedDate,
					COALESCE(B.SH$9MKT, ' ') AS MarketingCode,
					B.SH$9MMID AS MembershipID, 
					B.SH$9PD AS PercentageDiscount,
					B.SH$9DT AS DiscountType,
					A.SHRCD  AS ReasonCode,
					A.SHCRCD AS CurrencyCode,
					A.SHCRRM AS CurrencyMode,
					C.CVDL01 AS CurrencyDesc,
					A . SHCO	AS	OrderHeaderCompany , 
					COALESCE ( B . SHIDLN , 0 ) AS ContactID		 					 
			FROM	[SCDATA] . F42019 A 
			LEFT OUTER JOIN [SCDATA] . FQ674201 B 
				ON	A . SHDOCO = B . SHDOCO 
				AND A . SHDCTO = B . SHDCTO 
				AND A . SHKCOO = B . SHKCOO 
			LEFT OUTER JOIN [SCDATA] . F0013 C 
				ON A . SHCRCD = C . CVCRCD 
			WHERE A . SHDOCO = QuoteNumber 
			AND	A . SHDCTO = OrderType 
			AND	A . SHKCOO = OrderCompany ; 
			 
			--Load BillTo Variables From Order Header
			SELECT SCBillToNumber,SCShipToNumber,OrderHeaderCompany, ContactID 
			INTO ScBillTo,ScShipTo,OrderHeaderCompanyTMP, ContactIDTMP
			FROM SESSION.TMP_ORDERHEADER;
	
	
			OPEN TEMP_CURSOR2;	--HEADER
			CALL [SCLIBRARY].QTS_GetQuoteOrderInfo_BillTo(ScBillTo, ContactIDTMP);
			CALL [SCLIBRARY].QTS_GetQuoteOrderInfoShipments(OrderHeaderCompanyTMP, OrderType, QuoteNumber, ScShipTo);
			
			IF(RetrieveWebContentInfo = 1) THEN
				OPEN TEMP_CURSOR1;	/*DETAIL*/
			ELSE
				OPEN TEMP_CURSOR3;
			END IF;
			
			/*Configured Items*/ 
			CALL SCLIBRARY . COM_GETSOCONFIGUREDLINELIST ( OrderCompany , OrderType , QuoteNumber , LangPref ) ; 
		END ; 
	END ; 
END  ; 
-- #desc							Returns the last OrdersToDisplay most recent orders
-- #bl_class						Premier.Commerce.Quote.QuoteRecentList.cs
-- #db_dependencies					QTS_GetQuoteOrderStatusFnc.sql
-- #db_references					N/A

-- #param InstallationID			Installation Id
-- #param AddressNumber				Address Number
-- #param AddressBookType			Address Book Type
-- #param OrdersToDisplay			Quantity of rows to be returned
-- #param Company					Company if is 00000 is '*'

CREATE OR REPLACE PROCEDURE [SCLIBRARY].QTS_GetQuoteRecentList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN Company			GRAPHIC(5) CCSID 13488,
	IN AddressNumber	NUMERIC(15,0),
	IN QuoteToDisplay	NUMERIC(8,0) 
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].QTS_GetQuoteRecentList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE QOrderRestric	VARGRAPHIC(1) CCSID 13488;
    DECLARE QOrderINID		GRAPHIC(3) CCSID 13488;
    DECLARE QOrderConstant	GRAPHIC(10) CCSID 13488;
	
	DECLARE QuoteAcceptanceStatusValue	VARGRAPHIC(3) CCSID 13488;
    DECLARE OrderHistoryINID			GRAPHIC(3) CCSID 13488;
    DECLARE QuoteStatusConstant			GRAPHIC(10) CCSID 13488;
	
	DECLARE QuoteAcceptanceLevel	VARGRAPHIC(6) CCSID 13488;
    DECLARE QuoteTypeINID			GRAPHIC(3) CCSID 13488;
    DECLARE QuoteTypeConstant		GRAPHIC(10) CCSID 13488;
	
	DECLARE CompanyConstant			VARGRAPHIC(1) CCSID 13488;
    DECLARE ConstantInstallation	GRAPHIC(3) CCSID 13488;
	
	DECLARE ForeignConstant			VARGRAPHIC(1) CCSID 13488 ;
    DECLARE ForeignConstantINID		GRAPHIC(3) CCSID 13488 ;
		 
    SET QOrderConstant = 'SQ_RESTRIC';
    SET QOrderINID = InstallationID;    
            
    SET QuoteStatusConstant = 'QUOTSTAT';
    SET OrderHistoryINID = InstallationID;
    
    -- Gets the Quote Order Document Restrictions	
    CALL [SCLIBRARY].CMM_GetConstantValue (QOrderConstant, QOrderINID, QOrderRestric);
    -- Gets the Order History Status
    CALL [SCLIBRARY].CMM_GetConstantValue (QuoteStatusConstant, OrderHistoryINID, QuoteAcceptanceStatusValue);
    
    -- Gets the Quote Acceptance Level - Header - Detail
	SET QuoteTypeConstant = 'QUOTTYPE';
	SET QuoteTypeINID = InstallationID;
    CALL [SCLIBRARY].CMM_GetConstantValue (QuoteTypeConstant, QuoteTypeINID, QuoteAcceptanceLevel);
    
    --Read Account Receivable company constant 	
	SET ConstantInstallation = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('INSCOMPANY', ConstantInstallation, CompanyConstant);
		
	SET ForeignConstantINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue ('FOREGCURYN', ForeignConstantINID, ForeignConstant);
	
	IF (Company = '00000') THEN 
		SET Company = '*';
	END IF;
	
	BEGIN	
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS 
		(
			SELECT A.SHDOCO QuoteNumber, A.SHDCTO OrderType, A.SHKCOO OrderCompany , A.SHTRDJ QuoteDate,
				CASE 
					WHEN A.SHCRRM = 'F' AND FOREIGNCONSTANT = 'N' 
					THEN 'NOTALLOWED' 
					ELSE QTS.SDNXTR 
				END QUOTESTATUS ,
				ROW_NUMBER() OVER(ORDER BY SHTRDJ DESC , SHDOCO DESC) AS RNUM
			FROM TABLE (SCLIBRARY.COM_GetRecentDocsFnc(Company, QOrderINID, QOrderConstant, ConstantInstallation, CompanyConstant, QOrderRestric, AddressNumber)) AS A
			INNER JOIN TABLE (SCLIBRARY.QTS_GetQtDetStatByShipToFnc(QuoteAcceptanceStatusValue, ShipToNumber)) AS QTS 
			ON QTS.QuoteNumber = A.SHDOCO 
				AND QTS.QuoteCompany = A.SHKCOO 
				AND QTS.QuoteType = A.SHDCTO
		)
		SELECT QuoteNumber, OrderType, OrderCompany , QuoteDate, QuoteStatus
		FROM CTE A
		WHERE RNUM BETWEEN 1 AND QuoteToDisplay
		ORDER BY RNUM 
		FOR READ ONLY;			
		
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT A.SHDOCO QuoteNumber, A.SHDCTO OrderType, A.SHKCOO OrderCompany , A.SHTRDJ QuoteDate,
			CASE
				WHEN A.SHCRRM = 'F' AND ForeignConstant = 'N'
					THEN 'NOTALLOWED'
					ELSE QTS.SDNXTR
			END QuoteStatus 
		FROM TABLE (SCLIBRARY.COM_GetRecentDocsFnc(Company, QOrderINID, QOrderConstant, ConstantInstallation, CompanyConstant, QOrderRestric, AddressNumber)) AS A 
		INNER JOIN TABLE (SCLIBRARY.QTS_GetQuoteDetailStatusFnc(QuoteAcceptanceStatusValue)) AS QTS 
		ON QTS.QuoteNumber = A.SHDOCO 
			AND QTS.QuoteCompany = A.SHKCOO 
			AND QTS.QuoteType = A.SHDCTO
			AND RNUM BETWEEN 1 AND QuoteToDisplay
		ORDER BY RNUM
		FOR READ ONLY;

		DECLARE TEMP_CURSOR3 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR  
		SELECT A.SHDOCO QuoteNumber, A.SHDCTO OrderType, A.SHKCOO OrderCompany , A.SHTRDJ QuoteDate,
			CASE
				WHEN A.SHCRRM = 'F' AND ForeignConstant = 'N'
					THEN 'NOTALLOWED'
					ELSE QTS.SDNXTR
			END QuoteStatus 
		FROM TABLE (SCLIBRARY.COM_GetRecentDocsFnc(Company, QOrderINID, QOrderConstant, ConstantInstallation, CompanyConstant, QOrderRestric, AddressNumber)) AS A 
		INNER JOIN [SCLIBRARY].QTS_OrderDetailVW B 
			ON A.SHDOCO = B.SDDOCO 
			AND A.SHDCTO = B.SDDCTO 
			AND A.SHKCOO = B.SDKCOO 
			AND B.SHAN = ShipToNumber 
			AND RNUM BETWEEN 1 AND QuoteToDisplay , 
		LATERAL (
			SELECT SDNXTR
				FROM TABLE(SCLIBRARY.QTS_GetQuoteOrderStatusFnc( A.SHDOCO, A.SHDCTO, A.SHKCOO, QuoteAcceptanceStatusValue)) AS C)
			AS QTS 
		FOR READ ONLY;

		DECLARE TEMP_CURSOR4 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR  
		SELECT A . SHDOCO QUOTENUMBER , A . SHDCTO OrderType , A . SHKCOO OrderCompany , A . SHTRDJ QUOTEDATE ,
			CASE
				WHEN A . SHCRRM = 'F' AND FOREIGNCONSTANT = 'N'
					THEN 'NOTALLOWED'
					ELSE QTS . SDNXTR
			END QUOTESTATUS 
		FROM TABLE
			(SCLIBRARY. COM_GetRecentDocsfnc(Company, QOrderINID, QOrderConstant, ConstantInstallation, CompanyConstant, QOrderRestric, AddressNumber)) AS A , 
		LATERAL
			(SELECT SDNXTR
			 FROM TABLE
				(SCLIBRARY. Qts_GetquoteOrderStatusfnc( A . SHDOCO , A . SHDCTO , A . SHKCOO , QuoteAcceptanceStatusValue)) AS B) AS QTS 
		WHERE A . RNUM
		BETWEEN 1 AND QuoteToDisplay
		FOR READ ONLY;

		IF Quoteacceptancelevel = 'DETAIL'
		THEN
			IF (ShipToNumber IS NOT NULL )
			THEN
				OPEN TEMP_CURSOR1 ;
			ELSE
				OPEN TEMP_CURSOR2 ;
			END IF ;
		END IF ;
		IF Quoteacceptancelevel = 'ORDER'
		THEN
			IF (ShipToNumber IS NOT NULL )
			THEN
				OPEN TEMP_CURSOR3 ;
			ELSE
			   OPEN TEMP_CURSOR4 ;
			END IF ;
		END IF ;
		
	END;
END;
-- #desc							Add drawer by register 
-- #bl_class						Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param RegisterID				Register ID.
-- #param DrawerNumber				Drawer Number.
-- #param RegisterID				Register ID			
-- #param DrawerNumber				Drawer Number	
-- #param Status					Status
-- #param CurrentBatchNumber		Batch Number	
-- #param UserReservedReference		User Reserved ref.
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved date
-- #param CashDrawerLimit			Cash in drawer limit
-- #param "USERID"					User Id
-- #param "PROGRAMID"				Pregram Id
-- #param dateUpdated				Date updated
-- #param workStationId				Work Station		
-- #param TimeLastUpdated			Time Last Update

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddDrawer 
(
	IN RegisterID				VARCHAR(12),
	IN DrawerNumber				NUMERIC(15,0),
	IN Status					VARCHAR(2),
	IN AllowMultipleUsers		VARCHAR(2),
	IN CurrentBatchNumber		VARCHAR(15),
	IN UserReservedReference	VARCHAR(15),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN CashDrawerLimit			NUMERIC(15,0),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationId			VARCHAR(10),
	IN "USERID"					VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddDrawer
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN

	INSERT INTO [SCDATA].FQ674261
		(
			DR$9REGID, 
			DR$9DRAW,  
			DR$9DRST,
			DR$9DRMUL,  
			DREDBT,   
			DRURRF,    
			DRURAB,    
			DRURAT,    
			DRURCD,    
			DRURDT,
			DR$9AATR,   
			DRPID,     
			DRJOBN,    
			DRUSER,    
			DRUPMJ,    
			DRUPMT    
				
		)
		VALUES
		(
			RegisterID,
			DrawerNumber,
			Status,
			AllowMultipleUsers,
			CurrentBatchNumber,
			UserReservedReference,
			UserReservedNumber,
			UserReservedAmount,
			UserReservedCode,
			UserReservedDate,
			CashDrawerLimit,
			"PROGRAMID",
			WorkStationId,
			"USERID",
			DateUpdated,
			TimeLastUpdated
		);
END

 ;
-- #desc						Insert Drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument		Payment instrument
-- #param OpeningBalance		Opening Balance
-- #param SumOfTransactions		Sum of Trans.
-- #param TotalsPerCashier		Totals per Cashier
-- #param LeftInDrawer			Left in Drawer
-- #param CreditCardType		Credit Card Type
-- #param CurrecyCode			Currecy Code
-- #param UserId				UserId
-- #param ProgramId				ProgramId			
-- #param WorkstationId			WorkstationId		
-- #param DateUpdated			DateUpdated		
-- #param TimeOfDay				TimeOfDay	

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddDrawerPayment
(
	IN RegisterID				varchar(12), 
	IN DrawerNumber				NUMERIC(15,0), 
	IN CurrentBatchNumber		varchar(15),
	IN PaymentInstrument		varchar(1),
	IN OpeningBalance			NUMERIC(18,0), 
	IN SumOfTransactions		NUMERIC(18,0),
	IN TotalsPerCashier			NUMERIC(18,0), 
	IN LeftInDrawer				NUMERIC(18,0),
	IN CreditCardType			VARCHAR(4),
	IN CurrecyCode				VARCHAR(3),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN UserId					VARCHAR(10),   
	IN ProgramId				VARCHAR(10),
	IN WorkstationId			VARCHAR(10),  
	IN DateUpdated				NUMERIC(15,0),
	IN TimeOfDay				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddDrawerPayment 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN

	--Get max sequence number
	DECLARE LineID NUMERIC(15,0);
	SET LineID = (COALESCE((SELECT MAX (DCLNID) FROM [SCDATA].FQ67428 WHERE DC$9REGID = RegisterID AND DC$9DRAW = DrawerNumber AND DCEDBT = CurrentBatchNumber),0) + 1);

	INSERT INTO 
		[SCDATA].FQ67428
	(
	  DC$9REGID,  
	  DC$9DRAW,      
	  DCEDBT,     
	  DCRYIN,
	  DCLNID,
	  DC$9AAOB,                  
	  DC$9AATR,
	  DC$9AACS,                  
	  DC$9AALF,
	  DCCARD,
	  DCCRCD,
	  DCURAB,
	  DCURAT,
	  DCURCD,
	  DCURDT,
	  DCURRF,
	  DCUSER,
      DCPID,
      DCJOBN,
      DCUPMJ,
      DCUPMT
	)
	VALUES
	(
	  RegisterID, 
	  DrawerNumber,     
	  CurrentBatchNumber,    
	  PaymentInstrument,
	  LineID,
	  OpeningBalance,  
	  SumOfTransactions,
	  TotalsPerCashier,  
	  LeftInDrawer,
	  CreditCardType,
	  CurrecyCode,
	  UserReservedNumber,
	  UserReservedAmount,
	  UserReservedCode,
	  UserReservedDate,
	  UserReservedReference,
	  UserId,   
	  ProgramId,
	  WorkstationId,  
	  DateUpdated,   
	  TimeOfDay
	);
END ;
-- #desc					Cast fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line	
-- #param ItemNumber		Item number
-- #param UnitOfMeasure     UOM
-- #param Quantity			Quantity
-- #param Description1		Description 1
-- #param Description2		Description 2

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddFastButton
(
	IN InstallationID	VARCHAR(3),
	IN LineNumber		NUMERIC(15,0),
	IN ItemNumber		NUMERIC(15,0),
	IN UnitOfMeasure	VARCHAR(2),
	IN Quantity			NUMERIC(15,0),
	IN ItemDescription1 VARGRAPHIC(30) CCSID 13488,
	IN ItemDescription2 VARGRAPHIC(30) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddFastButton 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN

	INSERT INTO 
		[SCDATA].FQ67416
		(
		 FB$9INID,  FBLNID, 
		 FBITM,     FBUOM,   FBUORG, 
		 FBDSC1,    FBDSC2
		)
	VALUES
		(
		 InstallationID,    LineNumber, 
		 ItemNumber,        UnitOfMeasure,  Quantity,   
		 ItemDescription1,  ItemDescription2
		);
END ;
-- #desc					Add Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref
-- #param Description1		Description1 
-- #param Description2		Description2

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddFastButtonLang
(
	IN InstallationID	VARCHAR(6),
	IN LineNumber		NUMERIC(15,0),
	IN LangPref			VARCHAR(4),
	IN Description1		VARGRAPHIC(30) CCSID 13488,
	IN Description2		VARGRAPHIC(30) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddFastButtonLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN

	INSERT INTO [SCDATA].FQ67416L
	(
		FB$9INID,
		FBLNID,
		FBLNGP,		
		FBDSC1,
		FBDSC2
	)
	VALUES
	(
		InstallationID,
		LineNumber,		 
		LangPref, 
		Description1,
		Description2
	);
	
END ;
 -- #desc					Add receipts  
-- #bl_class				Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param ReceiptID			Receipt ID
-- #param Description		Description
-- #param "PROGRAMID"		Audith Info
-- #param WorkStationId		Audith Info
-- #param "USERID"			Audith Info
-- #param DateUpdated		Audith Info
-- #param TimeLastUpdated	Audith Info

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddReceiptItemMessage 
(
    IN InstallationID	VARCHAR(3),
    IN ItemNumber		NUMERIC(15,0),
    IN MessageID		VARCHAR(50),
    IN QtyMessageItem	VARCHAR(1),
	IN "PROGRAMID"      VARCHAR(10),
    IN WorkStationID	VARCHAR(10),
    IN "USERID"         VARCHAR(10),
	IN DateLastUpdated	NUMERIC(15,0),
	IN TimeLastUpdated	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddReceiptItemMessage
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO 
		  [SCDATA].FQ674220
		  ( MI$9INID
           ,MIITM
           ,MI$9MID
           ,MI$9IMQY
           ,MIPID
           ,MIJOBN
           ,MIUSER
           ,MIUPMJ
           ,MIUPMT
		  )
		  VALUES
		   ( InstallationID ,
			 ItemNumber     ,
			 MessageID      ,
			 QtyMessageItem ,
			 "PROGRAMID"      ,
			 WorkStationID   ,
			 "USERID"         ,
			 DateLastUpdated,
			 TimeLastUpdated);
END
  ;
-- #desc					Add Receipt Message
-- #bl_class				Premier.POS.ReceiptMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param MessageID			MessageID.
-- #param Description1		Description 1.
-- #param Description2		Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly		One time Only.
-- #param Priority			Priority
-- #param EfectiveDate		Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText		Message Text

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddReceiptMessage 
(
    IN MessageID		VARCHAR(50),
	IN Description1		VARGRAPHIC(30) CCSID 13488,
	IN Description2		VARGRAPHIC(30) CCSID 13488,
    IN Type				VARCHAR(1),
    IN OneTimeOnly		VARCHAR(1),
    IN Priority			NUMERIC(15,0),
    IN EfectiveDate		NUMERIC(15,0), 
    IN ExpirationDate	NUMERIC(15,0),
    IN MessageText		DBCLOB CCSID 13488,
    IN "PROGRAMID"      VARCHAR(10),
    IN WorkStationID	VARCHAR(10),
    IN "USERID"         VARCHAR(10),
	IN DateLastUpdated	NUMERIC(15,0),
	IN TimeLastUpdated	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddReceiptMessage
NOT DETERMINISTIC 
MODIFIES SQL DATA
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO 
		  [SCDATA].FQ674219
		  ( RM$9MID
           ,RMDSC1
           ,RMDSC2
           ,RM$9RMT
           ,RM$9RMUF
           ,RM$9RMP
           ,RMEFTJ
           ,RMEXDJ
           ,RM$9XML
           ,RMPID
           ,RMJOBN
           ,RMUSER
           ,RMUPMJ
           ,RMUPMT
		  )
		  VALUES
		   (MessageID ,
			Description1,
			Description2,
			Type,
			OneTimeOnly,
			Priority,
			EfectiveDate, 
			ExpirationDate,
			MessageText,
			"PROGRAMID",
			WorkStationID,
			"USERID",
			DateLastUpdated,
			TimeLastUpdated);
		  
END
  ;
-- #desc							Add drawer Note
-- #bl_class						Premier.POS.RegisterDrawerBatchNote.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param RegisterID				Register ID
-- #param DrawerNumber				Drawer Number
-- #param BatchNumber				Batch Number
-- #param UserReservedNumber		User Reserved Number
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved date
-- #param UserReservedReference		User Reserved ref
-- #param UserId					User Id
-- #param ProgramId					Pregram Id
-- #param WorkStationId				Work Station
-- #param DateUpdated				Date updated
-- #param TimeLastUpdated			Time Last Update

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddRegDrawerBatchNote 
(
	IN RegisterID				VARCHAR(12),
	IN DrawerNumber				NUMERIC(15,0),
	IN BatchNumber				VARCHAR(15),
	IN SCUserID					NUMERIC(15,0),
	IN NoteType					VARCHAR(3),
	IN Notes					DBCLOB CCSID 13488,
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationID			VARCHAR(10),
	IN DateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddRegDrawerBatchNote
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG 
BEGIN

--Get max sequence number
DECLARE SequenceNumber NUMERIC(15,0);
SET SequenceNumber = (COALESCE((SELECT MAX (DNRCK7) FROM [SCDATA].FQ674271 WHERE DN$9REGID = RegisterID AND DN$9DRAW = DrawerNumber AND DNEDBT= BatchNumber),0) + 1);

INSERT INTO
	[SCDATA].FQ674271
	(
		DN$9REGID,
		DN$9DRAW,
		DNEDBT,
		DNRCK7,
		DN$9USER,
		DNCLS,
		DN$9HTML,
		DNURRF,
		DNURAB,
		DNURAT,
		DNURCD,
		DNURDT,
		DNUSER,
		DNPID,
		DNJOBN,
		DNUPMJ,	
		DNUPMT		
	)
	VALUES
	(
		RegisterID,
		DrawerNumber,
		BatchNumber,
		SequenceNumber,
		SCUserID,
		NoteType,
		Notes,
		UserReservedReference,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		"USERID",
		"PROGRAMID",
		WorkStationID,
		DateUpdated,
		TimeLastUpdated
	);
END ;
-- #desc						Insert a Register 
-- #bl_class					Premier.POS.Register.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param RegisterDescription	Descripcion.
-- #param InstallationID		Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddRegister 
(
	IN RegisterID			VARCHAR(12),
	IN RegisterDescription  VARGRAPHIC(30) CCSID 13488,
	IN InstallationID		VARCHAR(3),
	IN "USERID"				VARCHAR(20),
	IN Password				VARGRAPHIC(200) CCSID 13488,
	IN GroupID				VARCHAR(20)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddRegister
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	INSERT INTO 
		[SCDATA].FQ67426
	(
		RG$9REGID,  
		RGDSC1,   
		RG$9INID,
		RGUSER,
		RG$9PWD,
		RGUGRP
	)
	VALUES
	(
		RegisterID, 
		RegisterDescription,  
		InstallationID,
		"USERID",
		Password,
		GroupID
	);
END

 ;
-- #desc						Add Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param DateOpened			Date Opened
-- #param TimeOpened			Time Opened	
-- #param UserOpened			User Opened
-- #param DateClosed			Date Closed
-- #param TimeClosed			Time Closed
-- #param UserClosed			User Closed

CREATE OR REPLACE Procedure [SCLIBRARY].POS_AddRegisterDrawerControl
(
	IN RegisterID			VARCHAR(12),
	IN DrawerNumber			NUMERIC(15,0),
	IN CurrentBatchNumber	VARCHAR(15),
	IN DateOpened			NUMERIC(15,0),
	IN TimeOpened			NUMERIC(15,0),
	IN UserOpened			NUMERIC(15,0),
	IN DateClosed			NUMERIC(15,0),
	IN TimeClosed			NUMERIC(15,0),
	IN UserClosed			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_AddRegisterDrawerControl 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
	
	INSERT INTO
		[SCDATA].FQ67427
		(
		RC$9REGID,
		RC$9DRAW, 
		RCEDBT,	
		RC$9DAO, 
		RC$9TIO, 
		RC$9USERO,
		RC$9DAC, 
		RC$9TIC, 
		RC$9USERC
		)

	VALUES

		(
		RegisterID,
		DrawerNumber,
		CurrentBatchNumber,
		DateOpened,
		TimeOpened,
		UserOpened,
		DateClosed,
		TimeClosed,
		UserClosed
		);
END

 ;
-- #desc					Add drawer by register 
-- #bl_class				Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelDrawer
(
	IN RegisterID			varchar(12),
	IN DrawerNumber			NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelDrawer 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	/*Drawers by Register*/
	DELETE FROM
		[SCDATA].FQ674261
	WHERE
		(DR$9REGID = RegisterID) 
		AND (DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber );
	/*Register Drawer Control*/
	DELETE FROM  
		[SCDATA].FQ67427
	WHERE 
		(RC$9REGID = RegisterID) 
		AND (DrawerNumber IS NULL OR RC$9DRAW = DrawerNumber);
	/*Drawer Payment*/		
	DELETE FROM  
		[SCDATA].FQ67428
	WHERE 
		(DC$9REGID = RegisterID) 
		AND (DrawerNumber IS NULL OR DC$9DRAW = DrawerNumber );
	/*Payment Details*/
	DELETE FROM  
		[SCDATA].FQ674281
	WHERE 
		(DP$9REGID = RegisterID) 
		AND (DrawerNumber IS NULL OR DP$9DRAW = DrawerNumber );
	/*Cash In/out*/
	DELETE FROM  
		[SCDATA].FQ674282
	WHERE 
		(DR$9REGID = RegisterID) 
		AND (DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber );
    
	/*Drawers Notes*/
	DELETE FROM  
		[SCDATA].FQ674271
	WHERE 
		(DN$9REGID = RegisterID) 
		AND (DrawerNumber IS NULL OR DN$9DRAW = DrawerNumber );

END
	


 ;
-- #desc						Delete drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument		Payment Instrument
-- #param CreditCardType		CreditCardType
-- #param CurrencyCode			CurrencyCode

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelDrawerPayment
(
	IN RegisterID           VARCHAR(12) ,
	IN DrawerNumber         NUMERIC(15,0),
	IN CurrentBatchNumber   VARCHAR(15),
	IN PaymentInstrument    VARCHAR(1),
	IN CreditCardType		VARCHAR(4),
	IN CurrencyCode			VARCHAR(3)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelDrawerPayment 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE  FROM  
		[SCDATA].FQ67428
	WHERE 
		    (DC$9REGID = RegisterID)
		AND (DC$9DRAW = DrawerNumber) 
		AND (DCEDBT = CurrentBatchNumber)
		AND (PaymentInstrument IS NULL OR DCRYIN = PaymentInstrument)
		AND DCCARD = CreditCardType
		AND DCCRCD = CurrencyCode;
END ;
-- #desc					Delete fast button
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line number

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelFastButton
(
	IN InstallationID   VARCHAR(3),
	IN LineNumber	    NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelFastButton 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DELETE  
FROM  
	[SCDATA].FQ67416
WHERE 
	    (FB$9INID = InstallationID)
	AND (FBLNID = LineNumber);

END ;
-- #desc					Delete receipts detail 
-- #bl_class				Premier.POS.ReceiptDetail.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ReceiptID			Receipt ID
-- #param InstallationID	Installation ID
-- #param RegisterID		Register ID

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelReceiptDetail
(
	IN ReceiptID        VARCHAR(10),
	IN InstallationID   VARCHAR(3),
	IN RegisterID       VARCHAR(12)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelReceiptDetail 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	DELETE FROM  
		[SCDATA].FQ674213
	WHERE 
		    (RR$9RCID = ReceiptID)
		AND (RR$9INID = InstallationID)
		AND (RR$9REGID = RegisterID);

END ;
-- #desc				Delete receipts 
-- #bl_class			Premier.POS.ReceiptMessage.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param ReceiptID	    Message ID

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelReceiptMessage
(	
	IN MessageID VARCHAR(50)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelReceiptMessage 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DELETE  
	FROM  
		[SCDATA].FQ674219
    WHERE 
		(RM$9MID = MessageID);

 CALL [SCLIBRARY].POS_DelReceiptItemMessage(NULL,NULL,MessageID);
 
END ;
-- #desc					Delete a Register 
-- #bl_class				Premier.POS.Register.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelRegister
(
	IN RegisterID   VARCHAR(12)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelRegister 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
/*Registers Master*/
DELETE  
	FROM  
		[SCDATA].FQ67426
	WHERE 
		RG$9REGID = RegisterID;

/*Delete All Drawers Associated Information(Drawers by Register, Payment Details, Cash In/out )*/
CALL [SCLIBRARY].POS_DelDrawer(RegisterID,NULL);

END

 ;
-- #desc						Delete Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch

CREATE OR REPLACE Procedure [SCLIBRARY].POS_DelRegisterDrawerControl
(
		IN RegisterID varchar(12) ,
		IN DrawerNumber NUMERIC(15,0) ,
		IN CurrentBatchNumber varchar(15)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_DelRegisterDrawerControl 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DELETE FROM 
	[SCDATA].FQ67427
WHERE
	RC$9REGID = RegisterID AND
	RC$9DRAW = DrawerNumber AND
	RCEDBT = CurrentBatchNumber;

END

  ;
 -- #desc							Add money in/out transaction
-- #bl_class						Premier.POS.RegisterDrawerInOutCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param RegisterID				Register ID.
-- #param DrawerNumber				Drawer Number.
-- #param BatchNumber				Batch Number.
-- #param SequenceNumber			Sequence Number.
-- #param LineNumber				Line Number
-- #param PaymentInstrument			Payment Instrument	
-- #param CurrencyCode				Currency Code
-- #param AmountTransact			Amount Transaction
-- #param UserId					User ID	(How execute the transaction)	
-- #param UserReservedReference		User Reserved Reference	
-- #param UserReservedNumber		User Reserved Number	
-- #param UserReservedAmount		User Reserved Amount	
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param ProgramId					Program Id
-- #param WorkStationId				Work Station Id	
-- #param AuditUser					Audit User
-- #param DateUpdated				Date Updated	
-- #param TimeLastUpdated			Time Last Updated

CREATE OR REPLACE Procedure [SCLIBRARY].POS_ExcAddRegisterDrawerInOut 
(
	IN RegisterID				VARCHAR(12),
	IN DrawerNumber				NUMERIC(15,0),
	IN BatchNumber				VARCHAR(15),
	INOUT SequenceNumber		NUMERIC(15,0),
	INOUT LineNumber			NUMERIC(15,0),
	IN PaymentInstrument		VARCHAR(1),
	IN CurrencyCode				VARCHAR(3),
	IN AmountTransact			NUMERIC(15,0),
	IN "USERID"					NUMERIC(15,0),	
	IN UserReservedReference	VARCHAR(15),
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationId			VARCHAR(10),
	IN AuditUser				VARCHAR(10),	
	IN DateUpdated				NUMERIC(15,0),	
	IN TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_ExcAddRegisterDrawerInOut
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	SET SequenceNumber = (COALESCE((SELECT MAX (DRRCK7) FROM [SCDATA].FQ674282
		 WHERE DR$9REGID = RegisterID AND DR$9DRAW = DrawerNumber AND DREDBT = BatchNumber), 0) + 1);
		
	SET LineNumber = (COALESCE((SELECT MAX (DRLNID) FROM [SCDATA].FQ674282
		WHERE DR$9REGID = RegisterID AND DR$9DRAW = DrawerNumber AND DREDBT = BatchNumber AND DRRCK7 = SequenceNumber), 0) + 1);
	
	INSERT INTO
		[SCDATA].FQ674282
		(
			DR$9REGID, 
			DR$9DRAW,  
			DREDBT,
			DRRCK7,  
			DRLNID,   
			DRRYIN,    
			DRCRCD,    
			DR$9AATR,    
			DR$9USER,    
			DRTYPT,
			DRURRF,   
			DRURAB,     
			DRURAT,    
			DRURCD,    
			DRURDT,    
			DRPID,
			DRJOBN,
			DRUSER,
			DRUPMJ,
			DRUPMT
		)
		VALUES
		(
			RegisterID,
			DrawerNumber,
			BatchNumber,
			SequenceNumber,
			LineNumber,
			PaymentInstrument,
			CurrencyCode,
			AmountTransact,
			"USERID",
			'', /*Type Transaction*/
			UserReservedReference,
			UserReservedNumber,
			UserReservedAmount,
			UserReservedCode,
			UserReservedDate,
			"PROGRAMID",
			WorkStationId,
			AuditUser,	
			DateUpdated,	
			TimeLastUpdated		
		);
END  ;
-- #desc					Read drawer by register 
-- #bl_class				Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_ExcCheckDrawerStatus
(
	IN RegisterID			varchar(12),
	IN DrawerNumber			NUMERIC(15,0),
	IN CurrentBatchNumber	varchar(15)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_ExcCheckDrawerStatus 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		DR$9DRST AS Status
	FROM
		[SCDATA].FQ674261
	WHERE
		(DR$9REGID = RegisterID) AND
		(DR$9DRAW = DrawerNumber) AND
		(DREDBT = CurrentBatchNumber)
		FOR FETCH ONLY;
		
		OPEN TEMP_CURSOR1;

END ;
-- #desc						Add money in/out transaction
-- #bl_class					Premier.POS.RegisterDrawerCashLimitCommand.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer Number.
-- #param BatchNumber			Batch Number.
-- #param PaymentInstrument		Payment Instrument.
-- #param TotalPayment			Total Payment.
-- #param CashDrawerLimit		Cash in drawer limit.
-- #param AmountExceed			Amount Exceed.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_ExcCheckRegDrawerCashLimit
(	
	IN RegisterID				VARCHAR(12),
	IN DrawerNumber				NUMERIC(15,0),
	IN BatchNumber				VARCHAR(15),
	IN PaymentInstrument		VARCHAR(1),
	INOUT TotalPayment			NUMERIC(15,0),
	INOUT CashDrawerLimit		NUMERIC(15,0),
	INOUT AmountExceed			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_ExcCheckRegDrawerCashLimit 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE SumPayments INT DEFAULT 0;
	DECLARE SumInOutTransaction INT DEFAULT 0;
	
	BEGIN
	
	SET SumPayments = COALESCE((SELECT SUM(A.DP$9AATR) FROM [SCDATA].FQ674281 A
		WHERE  A.DP$9REGID = RegisterID AND  A.DP$9DRAW = DrawerNumber AND  A.DPEDBT = BatchNumber AND A.DPRYIN = PaymentInstrument) , 0);

	SET SumInOutTransaction = COALESCE((SELECT SUM(A.DR$9AATR) FROM [SCDATA].FQ674282 A
		WHERE  A.DR$9REGID = RegisterID AND  A.DR$9DRAW = DrawerNumber AND  A.DREDBT = BatchNumber AND A.DRRYIN = PaymentInstrument), 0);

	SET CashDrawerLimit = COALESCE((SELECT  DR$9AATR FROM [SCDATA].FQ674261 A 
		WHERE A.DR$9REGID = RegisterID AND  A.DR$9DRAW = DrawerNumber AND  A.DREDBT = BatchNumber), 0);

	SET TotalPayment = (SumPayments + SumInOutTransaction);
	
	IF CashDrawerLimit = 0 THEN	
		SET AmountExceed =0;
	ELSE
		SET AmountExceed = COALESCE(TotalPayment - CashDrawerLimit, 0);
	END IF;
	
	END;
END   ;
-- #desc							Creates a extended payment detail
-- #bl_class						Premier.POS.EnterDrawerPaymentCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param RegisterID				Register ID
-- #param DrawerID					Drawer ID
-- #param BatchNumber				Batch Number
-- #param PaymentInstrument			Payment Instrument
-- #param CreditCardType			Credit Card Type
-- #param CurrecyCode				Currecy Code
-- #param RoundingAdjustment		Rounding Adjustment
-- #param OrderNumber				Order Number
-- #param OrderType					Order type
-- #param OrderCompany				Order Company
-- #param PaymentAmount				Payment Amount
-- #param "PROGRAMID"				Preogram ID
-- #param WorkStationId				WorkStation ID
-- #param "USERID"					User ID
-- #param DateUpdated				Date updated
-- #param TimeLastUpdated			Time Updated

CREATE OR REPLACE Procedure [SCLIBRARY].POS_ExcEnterDrawerPayment 
(
	RegisterID				varchar(24),
	DrawerID				DOUBLE,
	BatchNumber				varchar(30),
	PaymentInstrument		varchar(2),
	CreditCardType			varchar(4),
	CurrecyCode				varchar(3),
	RoundingAdjustment		DOUBLE,
	OrderNumber				DOUBLE,
	OrderType				varchar(3),
	OrderCompany			varchar(5),
	PaymentAmount			DOUBLE,
	"USERID"				DOUBLE,
	UserReservedReference   varchar(15),
	UserReservedNumber      DOUBLE,
	UserReservedAmount      DOUBLE,
	UserReservedCode        varchar(2),
	UserReservedDate        decimal(18,0),
	JDEUserId				varchar(10),
	"PROGRAMID"				varchar(10),
	WorkStationId			varchar(10),
	DateUpdated				DOUBLE,
	TimeLastUpdated			DOUBLE
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_ExcEnterDrawerPayment
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE PaymentID DOUBLE DEFAULT 0;

--Get next payment ID
SELECT 
	(MAX(DPRCK7) + 1) INTO PaymentID
FROM 
	[SCDATA].FQ674281 
WHERE 
	UPPER(RTRIM(DP$9REGID)) = UPPER(RTRIM(RegisterID)) AND
	DP$9DRAW = DrawerID AND
	UPPER(RTRIM(DPEDBT)) = UPPER(RTRIM(BatchNumber));
	
	IF (PaymentID IS NULL)
	THEN
	SET PaymentID = 0;
	END IF;
	

INSERT INTO 
	[SCDATA].FQ674281
(
	DP$9REGID,		--RegisterId varchar(24)
	DP$9DRAW,		--DrawerId Double
	DPEDBT,			--BatchNumber varchar(30)
	DPRCK7,			--PaymentID PaymentID DOUBLE DEFAULT 0
	DPRYIN,			--PaymentInstrument varchar(2)
	DPCARD,			--CreditCardType
	DPCRCD,			--CurrecyCode
	DPRDAJ,			--RoundingAdjustment
	DPKCOO,			--OrderCompany varchar(5)
	DPDCTO,			--OrderType varchar(3)
	DPDOCO,			--OrderNumber DOUBLE
	DP$9AATR,		--PaymentAmount DOUBLE
	DP$9USER,		-- SC User ID
	DPURRF,			--UserReservedReference varchar(15)
	DPURAB,			--UserReservedNumber DOUBLE
	DPURAT,			--UserReservedAmount DOUBLE
	DPURCD,			--UserReservedCode varchar(2)
	DPURDT,			--UserReservedDate Decimal(18,0)
	DPPID,			--"PROGRAMID" varchar(10)
	DPJOBN,			--WorkStationId varchar(10)
	DPUSER,			--"USERID" varchar(10)
	DPUPMJ,			--DateUpdated DOUBLE
	DPUPMT			--TimeLastUpdated DOUBLE
	)
VALUES
(
	RegisterID,
	DrawerID,
	BatchNumber,
	PaymentID,
	PaymentInstrument,
	CreditCardType,
	CurrecyCode,
	RoundingAdjustment,
	OrderCompany,	
	OrderType,	
	OrderNumber,
	PaymentAmount,	
	"USERID",
	UserReservedReference,
	UserReservedNumber,
	UserReservedAmount,
	UserReservedCode,
	UserReservedDate,
	"PROGRAMID",		
	WorkStationId,	
	JDEUserId,			
	DateUpdated,	
	TimeLastUpdated
);

END

 ;
-- DROP PROCEDURE [SCLIBRARY].POS_ExcExistRegDrawerTrans

-- #desc					Count Payments for Register ID
-- #bl_class				Premier.POS.CheckRegisterDrawerTransCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.
-- #param DrawerID			Drawer ID.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_ExcExistRegDrawerTrans
(
	IN RegisterID varchar(12),
	IN DrawerID DOUBLE
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_ExcExistRegDrawerTrans 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DECLARE CountTransactions INT DEFAULT 0;
	DECLARE TEMP_Payments CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT 
		CountTransactions AS CountTransactions
	FROM SYSIBM.SYSDUMMY1
	FOR FETCH ONLY;
	
	
	SELECT COUNT(*) INTO CountTransactions FROM 
			[SCDATA].FQ674281
		WHERE
			(DP$9REGID = RegisterID) AND (DrawerID IS NULL OR DP$9DRAW = DrawerID);
		
	IF(CountTransactions = 0)THEN
		SELECT 
			COUNT(*) INTO CountTransactions
		FROM 
			[SCDATA].FQ674282
		WHERE
			(DR$9REGID = RegisterID) AND (DrawerID IS NULL OR DR$9DRAW = DrawerID);
	END IF;
	
OPEN TEMP_Payments; 
END;
-- #desc						Receipt Copy
-- #bl_class					Premier.POS.ReceiptDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param SourceInstallationID	SourceInstallation ID
-- #param TargetInstallationID	TargetInstallation ID
-- #param ReceiptID				Receipt ID
-- #param SourceRegisterID		SourceRegister ID
-- #param TargetRegisterID		TargetRegister ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_ExcReceiptCopy
(
	IN SourceInstallationID		varchar(3),
	IN TargetInstallationID		varchar(3),
	IN ReceiptID				varchar(10),	
	IN SourceRegisterID			varchar(12),
	IN TargetRegisterID			varchar(12)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_ExcReceiptCopy 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 
	/*check if template already exist*/
	IF((SELECT COUNT(*) FROM [SCDATA].FQ674213 
		WHERE  RR$9INID = TargetInstallationID AND 
			   RR$9RCID = ReceiptID AND 
			   RR$9REGID = TargetRegisterID) = 0)
	THEN 
		INSERT INTO [SCDATA].FQ674213 (RR$9RCID,RR$9INID,RR$9REGID,RR$9XML,RRPID,RRJOBN,RRUSER,RRUPMJ,RRUPMT)
		(SELECT 
			 RR$9RCID,
			 TargetInstallationID,
			 TargetRegisterID,
			 RR$9XML,
			 RRPID,
			 RRJOBN,
			 RRUSER,
			 RRUPMJ,
			 RRUPMT
		FROM [SCDATA].FQ674213
		WHERE  RR$9INID = SourceInstallationID AND
				RR$9RCID = ReceiptID AND
				RR$9REGID = SourceRegisterID);
	ELSE
		UPDATE [SCDATA].FQ674213
			SET	RR$9XML = (SELECT B.RR$9XML
		FROM [SCDATA].FQ674213 B
			WHERE  B.RR$9INID = SourceInstallationID 
			AND B.RR$9RCID = ReceiptID
			AND B.RR$9REGID = SourceRegisterID)
		WHERE  
		RR$9INID = TargetInstallationID
		AND RR$9RCID = ReceiptID
		AND RR$9REGID = TargetRegisterID;
	END IF;
END ;
 -- #desc					Get Drawer Accounting Batch No
-- #bl_class				Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.
-- #param DrawerNumber		Drawer Number.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawerAccountingBatchNo
(
	IN RegisterID	varchar(12),
	IN DrawerNumber NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawerAccountingBatchNo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TMP_DRAWERCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		DRURAT AS AccountingBatchNumber
	FROM
		[SCDATA].FQ674261
	WHERE
		(RegisterID IS NULL OR DR$9REGID = RegisterID) AND
		(DrawerNumber IS NULL OR DR$9DRAW = DrawerNumber)
    FOR FETCH ONLY;
      
    OPEN TMP_DRAWERCUR1;

END  ;
-- #desc					Read drawer info
-- #bl_class				Premier.POS.DrawerInfo.cs 
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID. 
-- #param DrawerNumber		Drawer Number. 

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawerInfo
(  
	IN RegisterID	GRAPHIC(12) CCSID 13488,
	IN DrawerNumber DECIMAL(10,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawerInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
SELECT	
	A.DR$9REGID AS RegisterID, 
	A.DR$9DRAW AS DrawerNumber, 
	A.DR$9DRST AS Status, 
	A.DR$9DRMUL AS AllowMultipleUsers, 
	A.DREDBT AS CurrentBatchNumber, 
	B.RC$9DAO AS DateOpened, 
	B.RC$9TIO AS TimeOpened, 
	B.RC$9USERO AS UserOpened, 
	B.RC$9DAC AS DateClosed, 
	B.RC$9TIC AS TimeClosed, 
	B.RC$9USERC AS UserClosed,
	A.DRURAT AS AccountingBatchNumber

FROM [SCDATA].FQ674261 A
	LEFT OUTER JOIN [SCDATA].FQ67427 B 
	ON B.RC$9REGID = A.DR$9REGID 
	    AND B.RC$9DRAW = A.DR$9DRAW
	    AND B.RCEDBT = A.DREDBT      

WHERE A.DR$9DRAW = DrawerNumber 
			AND A.DR$9REGID = RegisterID ORDER BY A.DR$9DRAW  

FOR FETCH ONLY;

OPEN TEMP_CURSOR1;

END   ;
-- #desc							Read sum (RUAG ) 
-- #bl_class						Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies					N/A
-- #db_references					N/A	

-- #param AccountingBatchNumber		Accounting Batch Number.
-- #param EdiBatchNumber			Edi Batch Number.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawerInvoicePaidTotals
(
	IN AccountingBatchNumber	NUMERIC(15,0),
	IN EdiBatchNumber			VARCHAR(30)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawerInvoicePaidTotals 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		SUM(RUAG) AS InvoiceTotalAmountPaid,
		COUNT(*) AS TotalDoc  
	FROM [SCDATA].F03B13Z1
	WHERE
		RUICU = AccountingBatchNumber AND
		RUEDBT = EdiBatchNumber
	FOR FETCH ONLY;
      
     OPEN TEMP_CURSOR1;
     
END   ;
-- #desc					Read drawer info
-- #bl_class				Premier.POS.DrawerList.cs 
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawerList
(
	IN RegisterID varchar(12)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawerList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT
		A.DR$9REGID		AS RegisterID, 
		A.DR$9DRAW		AS DrawerNumber, 
		A.DR$9DRST		AS Status, 
		A.DR$9DRMUL		AS AllowMultipleUsers, 
		A.DREDBT		AS CurrentBatchNumber, 
		B.RC$9DAO		AS DateOpened, 
		B.RC$9TIO		AS TimeOpened, 
		B.RC$9USERO		AS UserOpened, 
		B.RC$9DAC		AS DateClosed, 
		B.RC$9TIC		AS TimeClosed, 
		B.RC$9USERC		AS UserClosed,
		A.DRURAT AS AccountingBatchNumber
	FROM         
		[SCDATA].FQ674261 A
		LEFT OUTER JOIN [SCDATA].FQ67427 B
		ON A.DR$9REGID = B.RC$9REGID 
		AND A.DR$9DRAW = B.RC$9DRAW 
		AND A.DREDBT = B.RCEDBT
	WHERE
		(RegisterID IS NULL OR A.DR$9REGID = RegisterID)
	ORDER BY A.DR$9DRAW
	FOR FETCH ONLY;
      
     OPEN TEMP_CURSOR1;
     
END ;
-- #desc						Read Currency codes of Detail of Drawer Payment, read only info
-- #bl_class					Premier.POS.DrawerPaymentsCurrencyList
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterId			Register Id
-- #param DrawerNumber			Drawer Number.
-- #param BatchNumber			Batch Number
-- #param PaymentInstrument		Payment Instrument

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawerPayDetCurrencyLst
(
	IN RegisterID			VARCHAR(12),
	IN DrawerNumber			NUMERIC(15,0),
	IN BatchNumber			VARCHAR(15),
	IN PaymentInstrument	VARCHAR(1)	
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawerPayDetCurrencyLst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TMP_CURRENCYLST1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT DISTINCT
		A.DPCRCD	AS CurrencyCode,
		B.CVDL01    AS CurrencyDesc
	FROM
		[SCDATA].FQ674281 A
	LEFT OUTER JOIN [SCDATA].F0013 B
		ON B.CVCRCD = A.DPCRCD
	WHERE
		(A.DP$9REGID = RegisterId) AND
		(A.DP$9DRAW	 = DrawerNumber) AND
		(A.DPEDBT	 = BatchNumber)	AND
		(A.DPRYIN	 = PaymentInstrument)
    FOR FETCH ONLY;
      
    OPEN TMP_CURRENCYLST1;

END   ;
-- #desc						Read Detail of Drawer Payment, read only info
-- #bl_class					N/A
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterId			RegisterId
-- #param DrawerNumber			DrawerNumber.
-- #param BatchNumber			batchNumber
-- #param PaymentInstrument		PaymentInstrument
-- #param OrderType				OrderType
-- #param OrderNumber			OrderNumber
-- #param JulianDateFrom		JulianDateFrom
-- #param JulianDateTo			JulianDateTo
-- #param JulianTimeFrom		JulianTimeFrom
-- #param JulianTimeTo			JulianTimeTo
-- #param PageIndex				Paging - Current page
-- #param PageSize				Paging - Items to be shown

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetDrawerPaymentDetailList 
(
	IN RegisterId			GRAPHIC(12) CCSID 13488,
	IN DrawerNumber			DECIMAL(10,0),
	IN BatchNumber			GRAPHIC(15) CCSID 13488,
	IN PaymentInstrument	GRAPHIC(1) CCSID 13488,
	IN OrderType			GRAPHIC(2) CCSID 13488,
	IN OrderNumber			NUMERIC(8,0),
	IN "USERID"				DECIMAL(15,0),
	IN JulianDateFrom		NUMERIC(6,0),
	IN JulianDateTo			NUMERIC(6,0),
	IN JulianTimeFrom		NUMERIC(6,0),
	IN JulianTimeTo			NUMERIC(6,0),
	IN PageIndex			INT,
    IN PageSize				INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetDrawerPaymentDetailList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;
	
	BEGIN
		
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT
				DP$9REGID	AS RegisterID,
				DP$9DRAW	AS DrawerNumber,
				DPEDBT		AS BatchNumber,
				DPRCK7		AS SecuenceNumber, 
				DPRYIN		AS PaymentInstrument, 
				DPKCOO		AS OrderCompany,
				DPDCTO		AS OrderType,
				DPDOCO		AS OrderNumber,
				DPCRCD		AS Currency,
				DP$9AATR    AS TransactionAmount, 
				DP$9USER	AS "USERID",
				DPUPMJ		AS DateUpdated,
				DPUPMT		AS TimeUpdated,
				ROW_NUMBER() OVER (ORDER BY A.DPUPMJ DESC, A.DPUPMT DESC) AS RNUM
			FROM
				[SCDATA].FQ674281 A 				-- Drawer Payment Detail List
			WHERE 
					A.DP$9REGID= RegisterId
				AND	A.DP$9DRAW	= DrawerNumber
				AND A.DPEDBT	= BatchNumber
				AND (PaymentInstrument = '*' OR A.DPRYIN = PaymentInstrument)
				AND (OrderNumber IS NULL OR  A.DPDOCO = OrderNumber)
				AND (OrderType = '*' OR A.DPDCTO = OrderType)
				AND ("USERID" IS NULL OR DP$9USER = "USERID")
				AND (JulianDateFrom = 0 OR JulianDateTo = 0 OR (A.DPUPMJ >= JulianDateFrom AND A.DPUPMJ <= JulianDateTo))
				AND (JulianTimeFrom = 0 OR JulianTimeTo = 0 OR (A.DPUPMT >= JulianTimeFrom AND A.DPUPMT <= JulianTimeTo))
		)
		SELECT
			A.RegisterID,
			A.DrawerNumber,
			A.BatchNumber,
			A.SecuenceNumber, 
			A.PaymentInstrument, 
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00', 'PY', A.PaymentInstrument, '*') AS PaymentInstrumentDesc,
			A.OrderCompany,
			A.OrderType,
			A.OrderNumber,
			A.Currency,
			A.TransactionAmount, 
			A."USERID",
			A.DateUpdated,
			A.TimeUpdated,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;
		
		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		OPEN TEMP_CURSOR1;
			
	END;
END;
-- #desc					Get fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line   number

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetFastButton
(	
	IN InstallationID varchar(3),
	IN LineNumber	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetFastButton 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		FBHED.FB$9INID InstallationID,   
		FBHED.FBLNID LineNumber,   
		FBHED.FBITM ItemNumber,   
		FBHED.FBUOM UnitOfMeasure,   
		FBHED.FBUORG Quantity,  
		FBHED.FBDSC1 AS ItemDescription1,  
		FBHED.FBDSC2 AS ItemDescription2  

	 FROM 
		[SCDATA].FQ67416 FBHED  	  
	 WHERE   
		FBHED.FB$9INID = InstallationID AND
		FBHED.FBLNID = LineNumber  
	 FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
	
	CALL [SCLIBRARY].POS_GetFastButtonLangs(InstallationID, LineNumber,NULL);
	
END		
 ;
-- #desc					Read fast buttons list 
-- #bl_class				Premier.POS.FastButtonList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param "USERID"			User ID number.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetFastButtonList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN ItemNumber		NUMERIC(8,0),
	IN Description1		VARGRAPHIC(30) CCSID 13488,
	IN LangPref			GRAPHIC(2) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetFastButtonList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		WITH CTE_FastButton AS (
		SELECT 
			FBHED.FB$9INID	AS InstallationID,   
			FBHED.FBLNID	AS LineNumber,   
			FBHED.FBITM		AS ItemNumber,   
			FBHED.FBUOM		AS UnitOfMeasure,   
			FBHED.FBUORG	AS Quantity,  
			COALESCE(FBHEDLNG.FBDSC1, FBHED.FBDSC1) AS ItemDescription1,  
			COALESCE(FBHEDLNG.FBDSC2, FBHED.FBDSC2) AS ItemDescription2,
			IM.IMLITM AS LongItemNumber,
			IM.IMAITM AS AuxItemNumber,
			IM.IMSTKT StockingType,
			IM.IMLNTY LineTypeControl
			/* Item Fast Master */
		 FROM [SCDATA].FQ67416 FBHED  
		INNER JOIN [SCDATA].F4101 IM	/* Item Master */
			ON IM.IMITM = FBHED.FBITM 
		LEFT JOIN [SCDATA].FQ67416L FBHEDLNG  /* Item Fast Language Master */
			ON FBHEDLNG.FB$9INID = FBHED.FB$9INID  
			AND FBHEDLNG.FBLNID = FBHED.FBLNID  
			AND FBHEDLNG.FBLNGP = LangPref
		 WHERE   
	 		/* Installation Id filter */
	 		(InstallationID = '*' OR FBHED.FB$9INID = InstallationID)
	 		/* Item Number filter */
	 		AND (ItemNumber IS NULL OR FBHED.FBITM  = ItemNumber)
	 		/* Description filter  */
	 		AND (Description1 = '*' OR 
	 			(FBHEDLNG.FBDSC1 IS NULL AND UPPER(FBHED.FBDSC1) LIKE '%' || Description1 || '%' ) OR
	 			(FBHEDLNG.FBDSC1 IS NOT NULL AND UPPER(FBHEDLNG.FBDSC1) LIKE '%' || Description1 || '%' ))
		),
		CTE_Filter_MCU AS
		(
			SELECT DISTINCT
				A.InstallationID,   
				A.LineNumber,   
				A.ItemNumber,   
				A.UnitOfMeasure,   
				A.Quantity,  
				A.ItemDescription1,  
				A.ItemDescription2,
				A.LongItemNumber,
				A.AuxItemNumber
			FROM CTE_FastButton A
			INNER JOIN [SCDATA].F40205 C /*Line Type Control Table*/
				ON C.LFLNTY = A.LineTypeControl
			INNER JOIN [SCDATA].FQ679910 E	/*BranchPlant by Installation*/
				ON E.BI$9INID = InstallationID 		
			INNER JOIN [SCDATA].F4102 B		/*Item Master by BranchPlant*/
				ON B.IBITM = ItemNumber
				AND B.IBMCU = E.BIMCU
			WHERE 
				A.StockingType <> 'N' AND (C.LFIVI = 'Y' OR C.LFIVI = 'D')		/*Inventory Interface -- Stock Items*/
			UNION ALL
			SELECT  
				A.InstallationID,   
				A.LineNumber,   
				A.ItemNumber,   
				A.UnitOfMeasure,   
				A.Quantity,  
				A.ItemDescription1,  
				A.ItemDescription2,
				A.LongItemNumber,
				A.AuxItemNumber
			FROM
				CTE_FastButton A
			INNER JOIN [SCDATA].F40205 C /*Line Type Control Table*/
				ON C.LFLNTY = A.LineTypeControl
			WHERE
				A.StockingType = 'N' OR (C.LFIVI <> 'Y' AND C.LFIVI <> 'D') /*Inventory Interface-- Non stock*/
		)

		SELECT 
			A.InstallationID,
			A.LineNumber,   
			A.ItemNumber,   
			A.UnitOfMeasure,   
			A.Quantity,  
			A.ItemDescription1,  
			A.ItemDescription2,
			A.LongItemNumber,
			A.AuxItemNumber,
			'Y' IsValidBrancPlant
		FROM CTE_Filter_MCU A
		UNION
		SELECT  
			A.InstallationID,
			A.LineNumber,   
			A.ItemNumber,   
			A.UnitOfMeasure,   
			A.Quantity,  
			A.ItemDescription1,  
			A.ItemDescription2,
			A.LongItemNumber,
			A.AuxItemNumber,
			'N' IsValidBrancPlant
		FROM  CTE_FastButton A
		LEFT JOIN CTE_Filter_MCU B 
			ON (A.ItemNumber = B.ItemNumber)
		WHERE 
			B.ItemNumber IS NULL
		ORDER BY LineNumber ASC
		FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
END;
END ;
-- #desc							Get Installation License Information
-- #bl_class						Premier.POS.License.StoreLicenseAuthentication.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetInstallationLicenseAuth
(
    IN InstallationID varchar(3)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetInstallationLicenseAuth 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	
		SELECT 
			IN$9HTML XMLFile
		FROM [SCDATA].FQ670001
		WHERE InstallationID = IN$9INID
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Get receipt INFO
-- #bl_class				Premier.POS.ReceiptHeader.cs
-- #db_dependencies			POS_GetReceiptDetail
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param ReceiptID			Receipt ID
-- #param RegisterID		Register ID

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetReceipt
(
	IN InstallationID	varchar(3),
	IN RegisterID		varchar(12),
	IN ReceiptID		varchar(10) 
)	
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetReceipt 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.RP$9RCID	AS ReceiptID, 
		A.RPDSC1	AS Description, 
        A.RPPID		AS "PROGRAMID",    
        A.RPJOBN	AS WorkStationId, 
        A.RPUSER	AS "USERID", 
        A.RPUPMJ	AS DateLastUpdated,   
        A.RPUPMT	AS TimeLastUpdated
    FROM 
		[SCDATA].FQ674212 A
	WHERE 
		(ReceiptID IS NULL OR A.RP$9RCID = ReceiptID)
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 
	
	---Get Receipt detail
	CALL [SCLIBRARY].POS_GetReceiptDetail (InstallationID, RegisterID, ReceiptID);
END
 ;
-- #desc				    POS_GetReceiptItemMessage
-- #bl_class				Premier.POS.ReceiptItemMessages.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param ItemNumber		Item Number.
-- #param QtyMessageItem    Qty Message Item

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetReceiptItemMessage
(
	IN InstallationID varchar(3),
    IN ItemNumber     NUMERIC(15,0),
    IN MessageID      varchar(50)
)	
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetReceiptItemMessage 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	 SELECT
      A.MI$9INID AS  InstallationID, 
      A.MIITM    AS  ItemNumber, 
      A.MI$9MID  AS  MessageID,
      A.MI$9IMQY AS  QtyMessageItem,
      A.MIPID    AS  "PROGRAMID",
      A.MIJOBN   AS  WorkStationID,
      A.MIUSER   AS  "USERID",
      A.MIUPMJ   AS  DateLastUpdated,
      A.MIUPMT   AS  TimeLastUpdated
    FROM 
		[SCDATA].FQ674220 A
	WHERE 
		(TRIM(InstallationID) = '*' OR A.MI$9INID = InstallationID) AND
		(ItemNumber = 0 OR A.MIITM    = ItemNumber) AND
		(MessageID = '*' OR A.MI$9MID  = MessageID) 
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 

END
  ;
-- #desc					Get receipts list 
-- #bl_class				Premier.POS.ReceiptList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	Installation ID
-- #param ReceiptID			Receipt ID
-- #param RegisterID		Register ID
-- #param Description		Description

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetReceiptList
(
	IN InstallationID	varchar(3),
	IN RegisterID		varchar(12),
	IN ReceiptID		varchar(10),
	IN Description		varchar(30)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetReceiptList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT 
		A.RR$9RCID	AS ReceiptID,
		B.RPDSC1	AS Description,
		A.RR$9INID  AS InstallationID,
	    A.RR$9REGID AS RegisterID
	       
	FROM 
		[SCDATA].FQ674213 A
		-- Receipts Header
		INNER JOIN [SCDATA].FQ674212 B
		ON B.RP$9RCID = A.RR$9RCID
		    
	WHERE 
		-- Receipt Code filter   
		(InstallationID  = '*' OR A.RR$9INID = InstallationID) AND
		(RegisterID  = '*' OR A.RR$9REGID = RegisterID) AND 
		(ReceiptID = '*'  OR A.RR$9RCID = ReceiptID) AND 
		(Description  = '*' OR UPPER(RTRIM(B.RPDSC1)) LIKE ('%'|| UPPER(LTRIM(RTRIM(Description))) ||'%'))
		
		
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1; 
	
END ;
-- #desc				    Get receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies		    POS_GetReceiptDetail
-- #db_references		    N/A

-- #param InstallationID	Installation ID
-- #param ReceiptID			Receipt ID
-- #param RegisterID		Register ID

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetReceiptMessage
(
	IN MessageID      varchar(50)
)	
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetReceiptMessage 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	 SELECT
      A.RM$9MID AS MessageID, 
      A.RMDSC1  AS  Description1,
      A.RMDSC2  AS Description2,
      A.RM$9RMT AS Type,
      A.RM$9RMUF AS OneTimeOnly,
      A.RM$9RMP AS Priority,
      A.RMEFTJ  AS EfectiveDate,
      A.RMEXDJ  AS ExpirationDate,
      A.RM$9XML AS MessageText,
      A.RMPID   AS "PROGRAMID",
      A.RMJOBN  AS WorkStationID,
      A.RMUSER  AS "USERID",
      A.RMUPMJ  AS DateLastUpdated,
      A.RMUPMT  AS TimeLastUpdated

    FROM 
		[SCDATA].FQ674219 A
	WHERE 
		A.RM$9MID = MessageID
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 

END
  ;
-- #desc				    Get Message Receipt List
-- #bl_class			    Premier.POS.ReceiptMessageList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetReceiptMessageList
(
	IN MessageID      varchar(50),
	IN Description1   varchar(30),
	IN Description2   varchar(30),
    IN Type		      varchar(1),
    IN OneTimeOnly    varchar(1),
    IN Priority       NUMERIC(15,0),
    IN EffectiveDate   NUMERIC(15,0)
    
)	
DYNAMIC RESULT SETS 2 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetReceiptMessageList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	 SELECT
      A.RM$9MID AS MessageID, 
      A.RMDSC1  AS  Description1,
      A.RMDSC2  AS Description2,
      A.RM$9RMT AS Type,
      A.RM$9RMUF AS OneTimeOnly,
      A.RM$9RMP AS Priority,
      A.RMEFTJ  AS EfectiveDate,
      A.RMEXDJ  AS ExpirationDate,
      A.RM$9XML AS MessageText,
      A.RMPID   AS "PROGRAMID",
      A.RMJOBN  AS WorkStationID,
      A.RMUSER  AS "USERID",
      A.RMUPMJ  AS DateLastUpdated,
      A.RMUPMT  AS TimeLastUpdated

    FROM 
		[SCDATA].FQ674219 A
	WHERE 
		(MessageID = '*' OR A.RM$9MID = MessageID)AND
	    (Description1 = '*' OR RTRIM(LTRIM(UPPER(A.RMDSC1))) like ('%'|| RTRIM(LTRIM(UPPER(Description1))) ||'%'))AND
    	(Description2 = '*' OR RTRIM(LTRIM(UPPER(A.RMDSC2))) like ('%'|| RTRIM(LTRIM(UPPER(Description2))) ||'%'))AND
		(Type = '*' OR A.RM$9RMT= Type)AND
		(OneTimeOnly = '*' OR A.RM$9RMUF= OneTimeOnly)AND
		(Priority = 0 OR A.RM$9RMP = Priority)AND
		(EffectiveDate = 0 OR (A.RMEFTJ <= EffectiveDate AND EffectiveDate <= A.RMEXDJ))
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 

END
   ;
-- #desc						Get Register Drawer Batch List
-- #bl_class					Premier.POS.RegisterDrawerBatchList.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID
-- #param DrawerNumber			Drawer ID

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetRegDrawerBatchList
(
	RegisterID			varchar(12),
	DrawerNumber		NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetRegDrawerBatchList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 
	DECLARE currentDate NUMERIC(15,0);
	DECLARE currentTime NUMERIC(15,0);
	
	SET currentDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	SET currentTime = CAST(VARCHAR_FORMAT(CURRENT TIMESTAMP, 'HH24MISS') AS NUMERIC(15,0));

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

		SELECT BatchNumber, DateOpened, TimeOpened, UserOpened, DateClosed, TimeClosed, UserClosed 
		FROM 
		(SELECT DISTINCT
			A.RCEDBT		AS BatchNumber,
			A.RC$9DAO		AS DateOpened,   
			A.RC$9TIO		AS TimeOpened,   
			A.RC$9USERO		AS UserOpened,    
			A.RC$9DAC		AS DateClosed, 
			A.RC$9TIC		AS TimeClosed,      
			A.RC$9USERC		AS UserClosed,
			(CASE A.RC$9DAC WHEN 0 THEN currentDate ELSE A.RC$9DAC END) AS RegDrawerDate,
			(CASE A.RC$9TIC WHEN 0 THEN currentTime ELSE A.RC$9TIC END) AS RegDrawerTime
		FROM
			[SCDATA].FQ67427 A
		WHERE
			A.RC$9REGID = RegisterID AND
			A.RC$9DRAW = DrawerNumber) B
		ORDER BY B.RegDrawerDate DESC, B.RegDrawerTime DESC
		FOR FETCH ONLY;
	
		OPEN TEMP_CURSOR1;

	END;
END ;
-- #desc					Get Drawer Note List
-- #bl_class				Premier.POS.RegisterDrawerBatchNoteList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID
-- #param DrawerNumber		DrawerNumber
-- #param BatchNumber		BatchNumber
-- #param SCUserID			SCUserID
-- #param NoteType			NoteType
-- #param JulianDateFrom	JulianDateFrom
-- #param JulianDateTo		JulianDateTo
-- #param JulianTimeFrom	JulianTimeFrom
-- #param JulianTimeTo		JulianTimeTo

CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_GetRegDrawerBatchNoteLst
(
	IN RegisterID			GRAPHIC(12) CCSID 13488,
	IN DrawerNumber			DECIMAL(10,0),
	IN BatchNumber			GRAPHIC(15) CCSID 13488,
	IN SCUserID				DECIMAL(15,0),
	IN NoteType				GRAPHIC(3) CCSID 13488,
	IN JulianDateFrom		NUMERIC(6,0),
	IN JulianDateTo			NUMERIC(6,0),
	IN JulianTimeFrom		NUMERIC(6,0),
	IN JulianTimeTo			NUMERIC(6,0),
	IN PageIndex			INT,
    IN PageSize				INT
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetRegDrawerBatchNoteLst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT     
				A.DN$9REGID		AS RegisterID,
				A.DN$9DRAW		AS DrawerNumber,
				A.DNEDBT		AS BatchNumber,
				A.DNRCK7		AS SequenceNumber,
				A.DN$9USER		AS SCUserID,
				A.DNCLS			AS NoteType,
				A.DN$9HTML		AS Notes,
				A.DNUPMJ		AS DateUpdated,
				A.DNUPMT		AS TimeOfDay,
				ROW_NUMBER() OVER (ORDER BY A.DNUPMJ DESC, A.DNUPMT DESC) AS RNUM
			FROM
				[SCDATA].FQ674271 A
			WHERE
				A.DN$9REGID = RegisterID
				AND	(A.DN$9DRAW	= DrawerNumber)
				AND (BatchNumber = '*' OR A.DNEDBT = BatchNumber)
				AND (SCUserID IS NULL OR A.DN$9USER = SCUserID)
				AND (NoteType = '*' OR A.DNCLS = NoteType)
				AND (JulianDateFrom = 0 OR JulianDateTo = 0 OR (A.DNUPMJ >= JulianDateFrom AND A.DNUPMJ <= JulianDateTo))
				AND (JulianTimeFrom = 0 OR JulianTimeTo = 0 OR (A.DNUPMT >= JulianTimeFrom AND A.DNUPMT <= JulianTimeTo))
		)
		SELECT
			A.RegisterID,
			A.DrawerNumber,
			A.BatchNumber,
			A.SequenceNumber,
			A.SCUserID,
			A.NoteType,
			A.Notes,
			A.DateUpdated,
			A.TimeOfDay,
			(SELECT COUNT(1) FROM CTE) AS TotalRowCount
		FROM CTE A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;
		
		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		OPEN TEMP_CURSOR1;
	END;
END;
-- #desc					Read Register 
-- #bl_class				Premier.POS.Register.cs
-- #db_dependencies			POS_GetDrawer
-- #db_references			N/A

-- #param RegisterID		Register ID.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetRegister
(
	IN RegisterID			varchar(12)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetRegister 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TMP_REGCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

	SELECT 
		RG$9REGID	AS RegisterID, 
		RGDSC1		AS RegisterDescription, 
		RG$9INID	AS InstallationID,
		RGUSER		AS E1User,
		RG$9PWD		AS E1Password,
		RGUGRP		AS E1Group	
	FROM 
		[SCDATA].FQ67426 A
	WHERE 
		(RegisterID IS NULL OR A.RG$9REGID = RegisterID)
	FOR FETCH ONLY;
	
	OPEN TMP_REGCUR1; 
	
	CALL [SCLIBRARY].POS_GetDrawer(RegisterID,null);
	
END;



-- #desc						Read Cash In/Out transactions
-- #bl_class					Premier.POS.RegisterDrawerCashInOutList.cs 
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch Number

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetRegisterDrawerCashIOLst
(
	IN RegisterID			VARCHAR(12),
	IN DrawerNumber			NUMERIC(15,0),
	IN CurrentBatchNumber	VARCHAR(15)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetRegisterDrawerCashIOLst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TMP_CashIOCUR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT
			A.DR$9USER AS UserId,
			A.DRUPMJ AS TransactionDate,
			A.DRUPMT AS TransactionTime,
			[SCLIBRARY].CMM_GetUserDefinedCodeFnc('00','PY',A.DRRYIN,'*') AS PaymentInstrumentDesc,
			A.DRCRCD AS CurrencyCode,
			A.DR$9AATR AS TransactionAmount
		FROM
			[SCDATA].FQ674282 A
		WHERE
			A.DR$9REGID = RegisterID AND 
			A.DR$9DRAW = DrawerNumber AND 
			A.DREDBT = CurrentBatchNumber
		ORDER BY A.DRUPMJ, A.DRUPMT ASC
    FOR FETCH ONLY;
      
    OPEN TMP_CashIOCUR1;

END  ;

-- #desc						Reads Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param InstallationID		Installation ID
-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetRegisterDrawerControl
(
	IN InstallationID		varchar(3),
	IN RegisterID			varchar(12),
	IN DrawerNumber			NUMERIC(15,0),
	IN CurrentBatchNumber	varchar(32)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetRegisterDrawerControl 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 

	SELECT 
		RC$9REGID	AS RegisterID,
		RC$9DRAW	AS DrawerNumber,
		RCEDBT		AS CurrentBatchNumber,  
		RC$9DAO		AS DateOpened,
		RC$9TIO		AS TimeOpened,
		RC$9USERO	AS UserOpened,
		RC$9DAC		AS DateClosed,
		RC$9TIC		AS TimeClosed,
		RC$9USERC	AS UserClosed

	FROM
		[SCDATA].FQ67427

	WHERE
		(RegisterID IS NULL OR RC$9REGID = RegisterID) AND
		(DrawerNumber IS NULL OR RC$9DRAW = DrawerNumber)AND
		(CurrentBatchNumber IS NULL OR RCEDBT = CurrentBatchNumber)
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR2; 
	
	CALL [SCLIBRARY].POS_GetDrawerPayment(InstallationID,RegisterID,DrawerNumber,CurrentBatchNumber,NULL);
	
END	 ;
-- #desc						Get Licenses Information
-- #bl_class					Premier.POS.Licenses.RegisterLicenseAuthentication.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID

-- this method is not working because the table dont have the new colum

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetRegisterLicenseAuth
(
IN InstallationID varchar(3),
IN RegisterId varchar(12)
)
DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetRegisterLicenseAuth 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		
		SELECT 
			RG$9SMS XMLFile
		FROM
		[SCDATA].FQ67426
	WHERE 
		((RG$9INID = InstallationID) AND (RG$9REGID = RegisterID))
		FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
	
END ;
-- #desc					Read Register list.
-- #bl_class				Premier.POS.RegisterList.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param RegisterID		Register ID.
-- #param InstallationID	Installation ID.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_GetRegistersList
(
	IN InstallationID varchar(3)
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_GetRegistersList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT  
		RG$9REGID	AS RegisterID, 
		RGDSC1		AS Description
	FROM 
		[SCDATA].FQ67426 A
	WHERE 
		(TRIM(InstallationID) = '*' OR A.RG$9INID = InstallationID)
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1; 
	
END ;
-- #desc						Update drawer by register 
-- #bl_class					Premier.POS.Drawer.cs/Register.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer Number.
-- #param RegisterID			Register ID			
-- #param DrawerNumber			Drawer Number	
-- #param Status				Status
-- #param CurrentBatchNumber	Batch Number	
-- #param UserReservedReference	User Reserved ref.
-- #param UserReservedNumber	User Reserved Number
-- #param UserReservedAmount	User Reserved Amount
-- #param UserReservedCode		User Reserved Code
-- #param UserReservedDate		User Reserved date
-- #param CashDrawerLimit		Cash in drawer limit
-- #param "USERID"				User Id
-- #param "PROGRAMID"				Pregram Id
-- #param dateUpdated			Date updated
-- #param workStationId			Work Station		
-- #param TimeLastUpdated		Time Last Update

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdDrawer 
(
	IN RegisterID				VARCHAR(12),
	IN DrawerNumber				NUMERIC(15,0),
	IN Status					VARCHAR(2),
	IN AllowMultipleUsers		VARCHAR(2),
	IN CurrentBatchNumber		VARCHAR(15),
	IN UserReservedReference	VARCHAR(15) ,
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN CashDrawerLimit			NUMERIC(15,0),
	IN "PROGRAMID"				VARCHAR(10),
	IN WorkStationId			VARCHAR(10),
	IN "USERID"					VARCHAR(10),
	IN dateUpdated				NUMERIC(15,0),
	IN TimeLastUpdated			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdDrawer
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE
		[SCDATA].FQ674261
	SET	
		DR$9DRST =	Status,
		DR$9DRMUL = AllowMultipleUsers,
		DREDBT =	CurrentBatchNumber,
		DRURRF =	UserReservedReference,
		DRURAB =	UserReservedNumber,
		DRURAT =	UserReservedAmount,
		DRURCD =	UserReservedCode,
		DRURDT =	UserReservedDate,
		DR$9AATR = CashDrawerLimit,
		DRPID =		"PROGRAMID",
		DRJOBN =	WorkStationId,
		DRUSER =	"USERID",
		DRUPMJ =	DateUpdated,
		DRUPMT =	TimeLastUpdated

	WHERE
		    (DR$9REGID = RegisterID) 
		AND (DR$9DRAW = DrawerNumber);
END ;
-- #desc						Update Drawer control status 
-- #bl_class					Premier.POS.Drawer.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer Number.
-- #param CurrentBatchNumber	batch Number
-- #param Status				Drawer Status 

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdDrawerControlStatus
(
	IN RegisterID			VARCHAR(12),
	IN DrawerNumber			NUMERIC(15,0),
	IN CurrentBatchNumber	VARCHAR(15),
	IN Status				VARCHAR(1)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdDrawerControlStatus 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
	
	UPDATE
		[SCDATA].FQ674261
	SET
		 DR$9DRST = Status,
		 DREDBT =	CurrentBatchNumber,
		 DRURAT = 0    /*Accounting Batch Number*/
	WHERE
		    (DR$9REGID = RegisterID)
		AND (DR$9DRAW = DrawerNumber); 
END
		

 ;
-- #desc						Update Drawer Payment
-- #bl_class					Premier.POS.DrawerPayment.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch
-- #param PaymentInstrument		Payment instrument
-- #param CreditCardType		Credit Card Type
-- #param CurrencyCode			Currency Code
-- #param OpeningBalance		Opening Balance
-- #param SumOfTransactions		Sum of Trans.
-- #param TotalsPerCashier		Totals per Cashier
-- #param LeftInDrawer			Left in Drawer

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdDrawerPayment
(
	IN RegisterID			VARCHAR(12), 
	IN DrawerNumber			NUMERIC(15,0), 
	IN CurrentBatchNumber	VARCHAR(15),
	IN PaymentInstrument	VARCHAR(1),
	IN CreditCardType		VARCHAR(4),
	IN CurrencyCode			VARCHAR(3),
	IN OpeningBalance		NUMERIC(18,0), 
	IN SumOfTransactions	NUMERIC(18,0),
	IN TotalsPerCashier		NUMERIC(18,0), 
	IN LeftInDrawer			NUMERIC(18,0),
	IN UserId				VARCHAR(10),   
	IN ProgramId			VARCHAR(10),
	IN WorkstationId		VARCHAR(10),  
	IN DateUpdated			NUMERIC(15,0),
	IN TimeOfDay			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdDrawerPayment 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN

    UPDATE 
		[SCDATA].FQ67428
	SET 
		DC$9AAOB = OpeningBalance,
	    DC$9AATR = SumOfTransactions,
	    DC$9AACS = TotalsPerCashier,
	    DC$9AALF = LeftInDrawer,
	    DCUSER	 = UserId,
		DCPID	 = ProgramId,
		DCJOBN	 = WorkstationId,
		DCUPMJ	 = DateUpdated,
		DCUPMT	 = TimeOfDay 
    WHERE 
		    (DC$9REGID = RegisterID) 
		AND (DC$9DRAW = DrawerNumber) 
		AND (DCEDBT = CurrentBatchNumber) 
		AND (DCRYIN = PaymentInstrument)
		AND DCCARD = CreditCardType 
		AND DCCRCD = CurrencyCode;

END ;
-- #desc					Update fast buttons
-- #bl_class				Premier.POS.FastButton.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param LineNumber		Line	
-- #param ItemNumber		Item number
-- #param UnitOfMeasure	    UOM
-- #param Quantity			Quantity
-- #param Description1		Description 1
-- #param Description2		Description 2

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdFastButton
(
	IN InstallationID   VARCHAR(3),
	IN LineNumber	    NUMERIC(15,0),
	IN ItemNumber       NUMERIC(15,0),
	IN UnitOfMeasure    VARCHAR(2),
	IN Quantity	        NUMERIC(15,0),
	IN ItemDescription1 VARGRAPHIC(30) CCSID 13488,
	IN ItemDescription2 VARGRAPHIC(30) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdFastButton 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 
	
	UPDATE 
		[SCDATA].FQ67416
	SET  
		FBITM =	 ItemNumber,
	    FBUOM =  UnitOfMeasure,
	    FBUORG = Quantity,
	    FBDSC1 = ItemDescription1,
	    FBDSC2 = ItemDescription2
	WHERE 
		    (FB$9INID = InstallationID) 
		AND (FBLNID = LineNumber);

END ;
-- #desc					Add Fast Button Lang
-- #bl_class				Premier.POS.FastButtonLang.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	InstallationID
-- #param LineNumberID		LineNumberID
-- #param LangPref			LangPref
-- #param Description1		Description1 
-- #param Description2		Description2 

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdFastButtonLang
(
	IN InstallationID	VARCHAR(6),
	IN LineNumber		NUMERIC(15,0),
	IN LangPref			VARCHAR(4),
	IN Description1		VARGRAPHIC(30) CCSID 13488,
	IN Description2		VARGRAPHIC(30) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdFastButtonLang 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN

	UPDATE 
		[SCDATA].FQ67416L
	SET 
		FBDSC1 = Description1,
		FBDSC2 = Description2
	WHERE
		    (FB$9INID  = InstallationID)
		AND (FBLNID = LineNumber)
		AND (FBLNGP = LangPref);
END ;
-- #desc					Authenticate for registers
-- #bl_class				Premier.POS.Licenses.StoreLicenseAuthentication.cs
-- #db_dependencies			N/A
-- #db_references			N/A

 CREATE OR REPLACE PROCEDURE [SCLIBRARY].POS_UpdInstallationLicenseAuth
(
    IN InstallationID varchar(3),
    IN EncryptedXML DBCLOB CCSID 13488
)

DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdInstallationLicenseAuth 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	
		UPDATE [SCDATA].FQ670001
		SET
			IN$9HTML = EncryptedXML
		WHERE (IN$9INID = InstallationID);
END ;
-- #desc						Update receipts detail 
-- #bl_class					Premier.POS.ReceiptDetail.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param ReceiptID				Receipt ID
-- #param InstallationID		Installation ID
-- #param RegisterID			Register ID
-- #param XmlBody				Receipt Body XML
-- #param "PROGRAMID"			Audith Info
-- #param WorkStationId			Audith Info
-- #param "USERID"				Audith Info
-- #param DateUpdated			Audith Info
-- #param TimeLastUpdated		Audith Info

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdReceiptDetail 
(
	IN ReceiptID        VARCHAR(10),
	IN InstallationID   VARCHAR(3),
	IN RegisterID       VARCHAR(12),
	IN XmlBody          DBCLOB CCSID 13488,
	IN "PROGRAMID"      VARCHAR(10),
	IN WorkStationId    VARCHAR(10),
	IN "USERID"			VARCHAR(10),
	IN DateLastUpdated  NUMERIC(15,0),
	IN TimeLastUpdated  NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdReceiptDetail
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	
	 UPDATE 
		[SCDATA].FQ674213
     SET 
		RR$9XML = XmlBody,
        RRPID =   "PROGRAMID",
        RRJOBN =  WorkStationId,
        RRUSER =  "USERID",
        RRUPMJ =  DateLastUpdated,
        RRUPMT =  TimeLastUpdated
   WHERE 
		    (RR$9RCID = ReceiptID) 
		AND (RR$9INID = InstallationID) 
		AND (RR$9REGID = RegisterID);		
END

	
		
 ;
-- #desc					Update receipts  
-- #bl_class				Premier.POS.ReceiptHeader.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ReceiptID			Receipt ID
-- #param Description		Description
-- #param "PROGRAMID"		Audith Info
-- #param WorkStationId		Audith Info
-- #param "USERID"			Audith Info
-- #param DateUpdated		Audith Info
-- #param TimeLastUpdated	Audith Info

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdReceiptHeader 
(
	IN ReceiptID        VARCHAR(10),
	IN Description      VARGRAPHIC(30) CCSID 13488,
	IN "PROGRAMID"      VARCHAR(10),
	IN WorkStationId    VARCHAR(10),
	IN "USERID"         VARCHAR(10),
	IN DateLastUpdated  NUMERIC(15,0),
	IN TimeLastUpdated  NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdReceiptHeader
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE
		[SCDATA].FQ674212
	SET
		RPDSC1 = Description,
		RPPID =  "PROGRAMID",
        RPJOBN = WorkStationId,
        RPUSER = "USERID",
        RPUPMJ = DateLastUpdated,
        RPUPMT = TimeLastUpdated
    WHERE 
		RP$9RCID = ReceiptID;
		
END ;
-- #desc					Update receipts  
-- #bl_class				Premier.POS.ReceiptItemMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param ReceiptID			Receipt ID
-- #param Description		Description
-- #param "PROGRAMID"		Audith Info
-- #param WorkStationId		Audith Info
-- #param "USERID"			Audith Info
-- #param DateUpdated		Audith Info
-- #param TimeLastUpdated	Audith Info

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdReceiptItemMessage 
(
    IN InstallationID	VARCHAR(3),
    IN ItemNumber		NUMERIC(15,0),
    IN MessageID		VARCHAR(50),
    IN QtyMessageItem	VARCHAR(1),
	IN "PROGRAMID"      VARCHAR(10),
    IN WorkStationID	VARCHAR(10),
    IN "USERID"         VARCHAR(10),
	IN DateLastUpdated	NUMERIC(15,0),
	IN TimeLastUpdated	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdReceiptItemMessage
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE
		[SCDATA].FQ674220
	SET
		MI$9IMQY = QtyMessageItem,
		MIPID    = "PROGRAMID",
		MIJOBN	 = WorkStationID,
		MIUSER   = "USERID",
		MIUPMJ   = DateLastUpdated,
		MIUPMT   = TimeLastUpdated
		
    WHERE 
	        (MIITM     = ItemNumber) 
	   AND  (MI$9INID  = InstallationID) 
	   AND  (MI$9MID =   MessageID) ;
		
END   ;
-- #desc				    Update Receipt Message
-- #bl_class			    Premier.POS.ReceiptMessage.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

-- #param InstallationID	Installation ID.
-- #param MessageID		    MessageID.
-- #param Description1      Description 1.
-- #param Description2      Description 2.
-- #param Type		        Type.
-- #param OneTimeOnly       One time Only.
-- #param Priority          Priority
-- #param EfectiveDate      Efective Date. 
-- #param ExpirationDate	Expiration Date.
-- #param MessageText       Message Text

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdReceiptMessage 
(
    IN MessageID        VARCHAR(50),
	IN Description1     VARGRAPHIC(30) CCSID 13488,
	IN Description2     VARGRAPHIC(30) CCSID 13488,
    IN Type		        VARCHAR(1),
    IN OneTimeOnly      VARCHAR(1),
    IN Priority         NUMERIC(15,0),
    IN EfectiveDate     NUMERIC(15,0), 
    IN ExpirationDate   NUMERIC(15,0),
    IN MessageText		DBCLOB CCSID 13488,
    IN "PROGRAMID"      VARCHAR(10),
    IN WorkStationID    VARCHAR(10),
    IN "USERID"			VARCHAR(10),
	IN DateLastUpdated  NUMERIC(15,0),
	IN TimeLastUpdated  NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdReceiptMessage
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE
		[SCDATA].FQ674219
	SET
	  RMDSC1 = Description1,
      RMDSC2  = Description2,
      RM$9RMT = Type,
      RM$9RMUF= OneTimeOnly,
      RM$9RMP = Priority,
      RMEFTJ  = EfectiveDate,
      RMEXDJ  = ExpirationDate,
      RM$9XML = MessageText,
      RMPID   = "PROGRAMID",
      RMJOBN  = WorkStationID,
      RMUSER  = "USERID",
      RMUPMJ  = DateLastUpdated,
      RMUPMT  = TimeLastUpdated
    WHERE 
	    (RM$9MID = MessageID);
		
END  ;
-- #desc						Update a Register 
-- #bl_class					Premier.POS.Register.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param RegisterDescription	Descripcion.
-- #param InstallationID		Installation ID.
-- #param User					User.
-- #param Password				Password.
-- #param Group					Group.

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdRegister 
(
	IN RegisterID			VARCHAR(12),
	IN RegisterDescription  VARGRAPHIC(30) CCSID 13488,
	IN InstallationID		VARCHAR(3),
	IN "USERID"				VARCHAR(20),
	IN Password				VARGRAPHIC(200) CCSID 13488,
	IN GroupID				VARCHAR(20)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdRegister
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE 
		[SCDATA].FQ67426
	SET  
		RGDSC1 =   RegisterDescription,
	    RG$9INID = InstallationID,
	    RGUSER =   "USERID",
		RG$9PWD =  Password,
		RGUGRP =   GroupID
	WHERE 
    	RG$9REGID = RegisterID;
		
END

 ;
-- #desc						Update Register Drawer control
-- #bl_class					Premier.POS.RegisterDrawerControl.cs
-- #db_dependencies				N/A
-- #db_references				N/A	

-- #param RegisterID			Register ID.
-- #param DrawerNumber			Drawer ID
-- #param CurrentBatchNumber	Current Batch Number
-- #param DateOpened			Date Opened
-- #param TimeOpened			Time Opened	
-- #param UserOpened			User Opened
-- #param DateClosed			Date Closed
-- #param TimeClosed			Time Closed
-- #param UserClosed			User Closed

CREATE OR REPLACE Procedure [SCLIBRARY].POS_UpdRegisterDrawerControl
(
	RegisterID			VARCHAR(12),
	DrawerNumber		NUMERIC(15,0),
	CurrentBatchNumber	VARCHAR(15),
	DateOpened			NUMERIC(15,0),
	TimeOpened			NUMERIC(15,0),
	UserOpened			NUMERIC(15,0),
	DateClosed			NUMERIC(15,0),
	TimeClosed			NUMERIC(15,0),
	UserClosed			NUMERIC(15,0)
)	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdRegisterDrawerControl 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN 

	UPDATE 
		[SCDATA].FQ67427
	SET	
		RC$9DAO =   DateOpened,
		RC$9TIO =   TimeOpened,
		RC$9USERO = UserOpened,
		RC$9DAC =   DateClosed,
		RC$9TIC =   TimeClosed,
		RC$9USERC = UserClosed
	WHERE
		    (RC$9REGID = RegisterID)
		AND (RC$9DRAW  = DrawerNumber)
		AND (RCEDBT = CurrentBatchNumber);
END
	

 ;
-- #desc					Authenticate for registers
-- #bl_class				Premier.POS.Licenses.RegisterLicenseAuthentication.cs
-- #db_dependencies			N/A
-- #db_references			N/A	

 create OR REPLACE procedure [SCLIBRARY].POS_UpdRegisterLicenseAuth
(
    IN InstallationID varchar(3),
    IN RegisterId varchar(12),
    IN EncryptedXML VARGRAPHIC(2000) CCSID 13488
)

DYNAMIC RESULT SETS 2
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].POS_UpdRegisterLicenseAuth 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN	
		UPDATE [SCDATA].FQ67426
		SET
			RG$9SMS = EncryptedXML
		WHERE (RG$9INID = InstallationID) AND (RG$9REGID = RegisterId);
END ;
-- #desc							Add a Sales Person Client
-- #bl_class						Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationId			InstallationId				
-- #param WebAccountId				WebAccountId	
-- #param AddressBookType			AddressBookType		
-- #param AddressNumber			    AddressNumber
-- #param ContactId					ContactId
-- #param CommissionRate			CommissionRate
-- #param PersistentShoppingCart	PersistentShoppingCart
-- #param LastPickDate				LastPickDate
-- #param TimeLasUpdated			TimeLasUpdated
-- #param OrderCompany				OrderCompany
-- #param OrderNumber				OrderNumber
-- #param OrderType					OrderType
-- #param OrderDate					OrderDate
-- #param AmmountOrderGross			AmmountOrderGross
-- #param UserReservedNumber		UserReservedNumber			
-- #param UserReservedAmount		UserReservedAmount	
-- #param UserReservedCode			UserReservedCode	
-- #param UserReservedDate			UserReservedDate
-- #param UserReservedReference		UserReservedReference		
-- #param "USERID"					"USERID"					
-- #param "PROGRAMID"				"PROGRAMID"					
-- #param DateUpdated				DateUpdated				
-- #param TimeLastUpdated			TimeLastUpdated			
-- #param JobNumber					JobNumber

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_AddSalesPersonClient 
(	
	InstallationId				VARCHAR(3),
	WebAccountId				NUMERIC(15,0),
	AddressBookType				NUMERIC(15,0),
	AddressNumber				NUMERIC(15,0),
	ContactId					NUMERIC(15,0),
	CommissionRate				NUMERIC(15,0),
	PersistentShoppingCart		DBCLOB CCSID 13488,
	LastPickDate				NUMERIC(15,0),	
	TimeUpd						NUMERIC(15,0),	
	OrderCompany				VARCHAR(5),
	OrderNumber					NUMERIC(15,0),
	OrderType					VARCHAR(3),
	OrderDate					NUMERIC(15,0),
	AmmountOrderGross			NUMERIC(15,0),
	UserReservedNumber			NUMERIC(15,0),
	UserReservedAmount			NUMERIC(15,0),
	UserReservedCode			VARCHAR(2),
	UserReservedDate			NUMERIC(15,0),
	UserReservedReference		VARCHAR(15),
	"USERID"					VARCHAR(10),
	"PROGRAMID"					VARCHAR(10),
	DateUpdated					NUMERIC(15,0),	
	TimeLastUpdated				NUMERIC(15,0),
	JobNumber					VARCHAR(10)	
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_AddSalesPersonClient
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	INSERT INTO [SCDATA].FQ67125
	(
		SP$9INID,
		SP$9WAN8,
		SP$9TYP,
		SP$9AN8,
		SPIDLN,
		SPCMR1,	
		SP$9HTML,
		SPUPDJ,
		SPMUPT,
		SPKCOO,
		SPDOCO,	
		SPDCTO,
		SPTRDJ,
		SPOTOT,
		SPURAB,
		SPURAT,
		SPURCD,
		SPURDT,
		SPURRF,
		SPUSER,
		SPPID,
		SPUPMJ,
		SPUPMT,
		SPJOBN
	)
	VALUES
	(
		InstallationId,			
		WebAccountId,				
		AddressBookType,	
		AddressNumber,
		ContactId,
		CommissionRate,
		PersistentShoppingCart,
		LastPickDate,
		TimeUpd,
		OrderCompany,
		OrderNumber,
		OrderType,
		OrderDate,
		AmmountOrderGross,
		UserReservedNumber,			
		UserReservedAmount,	
		UserReservedCode,		
		UserReservedDate,			
		UserReservedReference,
		"USERID",						
		"PROGRAMID",					
		DateUpdated,				
		TimeLastUpdated,			
		JobNumber			
	);
END
 ;
-- #desc								Add a Web Account Additional Info
-- #bl_class							Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies						N/A
-- #db_references						N/A

-- #param IN InstallationId			    IN InstallationId
-- #param IN ObjectType				    IN ObjectType
-- #param IN WebAccountID				IN WebAccountID
-- #param IN XmlBody					IN XmlBody
-- #param IN SharedReference			IN SharedReference
-- #param IN UserReservedNumber		    IN UserReservedNumber
-- #param IN UserReservedAmount		    IN UserReservedAmount
-- #param IN UserReservedCode			IN UserReservedCode
-- #param IN UserReservedDate			IN UserReservedDate
-- #param IN UserReservedReference	    IN UserReservedReference
-- #param IN "USERID"					IN "USERID"
-- #param IN "PROGRAMID"				IN "PROGRAMID"
-- #param IN DateUpdated				IN DateUpdated
-- #param IN TimeLastUpdated			IN TimeLastUpdated
-- #param IN JobNumber				    IN JobNumber


CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_AddWebUserAdditionalInfo 
(	
	IN InstallationId			VARCHAR(3),
	IN ObjectType				NUMERIC(15,0),
	IN WebAccountID				NUMERIC(15,0),
	IN XmlBody					DBCLOB CCSID 13488,
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN JobNumber				VARCHAR(10),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN DateUpdated				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_AddWebUserAdditionalInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	INSERT INTO [SCDATA].FQ67120
	(
		WI$9INID,
		WI$9UKID,
		WI$9OBJTY,
		WI$9WAN8,
		WI$9HTML,
		WIURAB,
		WIURAT,
		WIURCD,
		WIURDT,
		WIURRF,
		WIUSER,
		WIPID,
		WIUPMJ,
		WIUPMT,
		WIJOBN
	)
	VALUES
	(
		InstallationId,
		(COALESCE((SELECT MAX(WI$9UKID) FROM [SCDATA].FQ67120 
					WHERE WI$9INID = InstallationId AND WI$9OBJTY = ObjectType AND WI$9WAN8 = WebAccountID), 0) + 1),
		ObjectType,
		WebAccountID,
		XmlBody,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,
		"USERID",
		"PROGRAMID",
		DateUpdated,
		TimeLastUpdated,
		JobNumber
	);
END ;
-- #desc						Delete Sales Person Client
-- #bl_class					Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationId		InstallationId
-- #param WebAccountId			WebAccountId

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_DelSalesPersonClient
(
	InstallationId			VARCHAR(3),
	WebAccountId			NUMERIC(15,0),
	AddressNumber			NUMERIC(15,0),
	ContactId				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_DelSalesPersonClient 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
		
	DELETE FROM [SCDATA].FQ67125
	WHERE 
		SP$9INID = InstallationID
		AND	SP$9WAN8 = WebAccountId 
		AND SP$9AN8 = AddressNumber 
		AND SPIDLN = ContactId;
END ;
-- #desc					Delete a Saved Cart			
-- #bl_class				Premier.eCommerce.SavedCart.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID 
-- #param AddressNumberID	Address Number ID
-- #param UniqueKeyID		Unique Key ID

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_DelSavedCart
(
	InstallationID		VARCHAR(3),
	AddressNumberID		NUMERIC(15,0),
	UniqueKeyID			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_DelSavedCart 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
BEGIN		
	DELETE FROM [SCDATA].FQ679913 
	WHERE WA$9INID = InstallationID
	AND WA$9AN8  = AddressNumberID
	AND WAUKID = UniqueKeyID;		
END ;
-- #desc				Check Web Account By Installation
-- #bl_class			Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies		N/A
-- #db_references		N/A

-- #param InstallationID
-- #param UserName

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_ExcCheckWebAccountByInst
(
	IN UserName		    VARGRAPHIC(256) CCSID 13488, 
	IN InstallationID	VARCHAR(3)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcCheckWebAccountByInst 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT
		WUSR.WA$9USER AS UserID
	FROM
		[SCDATA].FQ67101 WUSR 
	INNER JOIN [SCDATA].FQ67996 INBU	--Installation By User
		ON WUSR.WA$9USER = INBU.UI$9USER
	WHERE		
		INBU.UI$9INID = InstallationID
		AND WUSR.WAEMAL = UserName
		FETCH FIRST 1 ROW ONLY;
		
	SET UserName = LOWER (UserName);		
	OPEN TEMP_CURSOR1;
END

 ;
-- #desc					Get the Web Account key fields does not exists
-- #bl_class				Premier.eCommerce.WebAccountUser.cs

-- #param InstallationID
-- #param UserName

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcCheckWebAcctAddressNo
(
	InstallationID		varchar(3),
	AddressNumber		NUMERIC(15,0),
	ContactID			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcCheckWebAcctAddressNo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR

	SELECT
		COUNT(*) AS AccountNameCount,
		WUSR.WA$9WAN8 AS WebAccountID
	FROM
		[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	--Installation By User
			ON WUSR.WA$9USER = INBU.UI$9USER
	WHERE
		(INBU.UI$9INID = InstallationID) AND
		(WUSR.WA$9AN8 = AddressNumber) AND
		(WUSR.WAIDLN = ContactID)
    group by  WUSR.WA$9WAN8
	FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Execute clear Terms and Cond Status
-- #bl_class				Premier.eCommerce.TermsAndConditionsAccept.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param StoreId
-- #param ObjectType
-- #param XmlBody

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcClearTermsCondStatus
(
	IN StoreId			GRAPHIC(3) CCSID 13488,
	IN ObjectType		DECIMAL(31,0),
	IN XmlBody			DBCLOB CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcClearTermsCondStatus 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	--Clear specific installation
	UPDATE 
		[SCDATA].FQ67120
	SET	
		WI$9HTML = XmlBody
	WHERE
		WI$9OBJTY = ObjectType
		AND	WI$9INID = StoreId;
END ;
-- #desc						Copy Wish List
-- #bl_class					Premier.eCommerce.WishListHeader.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param WebAccountID			WebAccountID
-- #param WishListID			WishListID
-- #param NewWishListName		NewWishListName

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcCopyWishList
(
	IN WebAccountID		NUMERIC(15,0),
	IN WishListID		NUMERIC(15,0),
	IN NewWishListName	VARCHAR(30),
	OUT SequenceID	NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcCopyWishList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE SEQCOUNT NUMERIC(15,0);
	SET SEQCOUNT = (SELECT COALESCE(MAX(WHSEQ ),-1) + 1 
		FROM [SCDATA].FQ674214 WHERE WH$9WAN8 = WebAccountID);
		
	SET SequenceID = SEQCOUNT;

	INSERT INTO [SCDATA].FQ674214
	(
		WH$9WAN8, 
		WHSEQ ,
		WHDESC,
		WHURCD,
		WHURDT,
		WHURAT,
		WHURAB,
		WHURRF,
		WHUSER,
		WHPID,
		WHJOBN,
		WHUPMJ,
		WHTDAY
	)
	SELECT 
		WH$9WAN8		AS WebAccountID, 
		SEQCOUNT		AS WishListID,
		NewWishListName	AS wishListDesc,
		WHURCD			AS UserReservedCode,
		WHURDT			AS UserReservedDate,
		WHURAT			AS UserReservedAmount,
		WHURAB			AS UserReservedNumber,
		WHURRF			AS UserReservedReference,
		WHUSER			AS "USERID",
		WHPID			AS "PROGRAMID",
		WHJOBN			AS WorkStationID,
		WHUPMJ			As DateUpdated,
		WHTDAY			AS TimeOfDay
	FROM 
		[SCDATA].FQ674214	--WISH LIST HEADER
	WHERE 
		WH$9WAN8 = WebAccountID
		AND WHSEQ = WishListID;

	INSERT INTO [SCDATA].FQ674215
	(
		WD$9WAN8, 
		WDSEQ ,
		WDITM,
		WDUORG,
		WDUOM,
		WDURCD,
		WDURDT,
		WDURAT,
		WDURAB,
		WDURRF,
		WDUSER,
		WDPID,
		WDJOBN,
		WDUPMJ,
		WDTDAY
	)
	SELECT 
		WD$9WAN8	AS WebAccount, 
		SEQCOUNT	AS WishListID ,
		WDITM		AS ShortItemNumber,
		WDUORG		AS Quantity,
		WDUOM		AS UOM,
		WDURCD		AS UserReservedCode,
		WDURDT		AS UserReservedDate,
		WDURAT		AS UserReservedAmount,
		WDURAB		AS UserReservedNumber,
		WDURRF		AS UserReservedReference,
		WDUSER		AS "USERID",
		WDPID		AS "PROGRAMID",
		WDJOBN		AS WorkStationID,
		WDUPMJ		As DateUpdated,
		WDTDAY		AS TimeOfDay
	FROM 
		[SCDATA].FQ674215	--WISH LIST DETAIL
	WHERE 
		WD$9WAN8 = WebAccountID
		AND WDSEQ = WishListID;
	
END ;
-- #desc						Delete Web Account Info
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationId		InstallationId
-- #param WebAccountId			WebAccountId

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcDelWebAccountInfo
(
	InstallationId			VARCHAR(3),
	WebAccountId			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcDelWebAccountInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	--Delete the Sales Person	
	DELETE FROM [SCDATA].FQ67125
	WHERE 
		SP$9INID = InstallationId AND
		SP$9WAN8 = WebAccountId;
		
	--Delete Web Account Additional Info
	DELETE FROM	[SCDATA].FQ67120
	WHERE 
		WI$9INID = InstallationId AND
		WI$9WAN8 = WebAccountId;
		
	--Delete Persist Shopping Cart Info
	DELETE FROM [SCDATA].FQ6742WF
	WHERE
		SH$9INID = InstallationId AND
		SH$9WAN8 = WebAccountId;

	--Announcements - Assignments by web account 	
	DELETE FROM [SCDATA].FQ67105A WHERE MA$9ATYP = 5 AND MA$9WAN8 = WebAccountId;

	--Announcements  History
	DELETE FROM [SCDATA].FQ67105H WHERE MH$9INID = InstallationId AND MH$9WAN8 = WebAccountId;
END  ;
-- #desc						Delete WebAccount By Contact
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID
-- #param AddressNumber			Address Number
-- #param ContactID				Contact ID

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcDelWebAcctByContactID
(
	IN InstallationID		varchar(3),
	IN AddressNumber		NUMERIC(15,0),
	IN ContactID			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcDelWebAcctByContactID 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
	DELETE FROM
			[SCDATA].FQ67101
	WHERE
		WA$9INID = InstallationID AND
		WA$9AN8	 = AddressNumber AND
		WAIDLN	 = ContactID;
END  ;
-- #desc							Delete abandoned shopping cart
-- #bl_class						Premier.Ecommerce.PurgeAbandonedShoppingCartsCommand.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			InstallationID

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcPurgeAbandonShopCarts
(
	IN InstallationId	    GRAPHIC(3) CCSID 13488
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcPurgeAbandonShopCarts
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	DECLARE NotificationSetting VARGRAPHIC(256) CCSID 13488;
	DECLARE InstallationIDTemp    GRAPHIC(3) CCSID 13488;
	DECLARE CurrentJulianDate INT DEFAULT 0;
	
	SET InstallationIDTemp = InstallationID;
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	CALL [SCLIBRARY].CMM_GetConstantValue('ABNCARTDEL', InstallationIDTemp, NotificationSetting);

	/* Avoid exceptions when the setting contains empty value */
	SET NotificationSetting = NULLIF(NotificationSetting, '');

	DELETE 
	FROM [SCDATA].FQ6742WF
	WHERE SH$9INID = InstallationID
	AND SHUPMJ <= [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT_DATE - (CAST(COALESCE(NotificationSetting, 0) AS INT) Days));

	UPDATE [SCDATA].FQ67125 
	SET SP$9HTML = '' 
	WHERE 
			SP$9INID = InstallationID
		AND SPUPMJ <= [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT_DATE - (CAST(COALESCE(NotificationSetting, 0) AS INT) Days));
END ;
 -- #desc					Execute Update Last Login Date
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID
-- #param UserName
-- #param LastLoginDate
-- #param LastLoginTime

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcUpdLastLoginTime 
(
	"USERID"		NUMERIC(15,0),
	InstallationID	VARCHAR(3),
	LastLoginDate	NUMERIC(15,0),
	LastLoginTime	NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcUpdLastLoginTime
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

UPDATE [SCDATA].FQ67101
	SET	WAACTDATE = LastLoginDate, 
		WAACTTIME = LastLoginTime
	WHERE
		WA$9WAN8 = "USERID" AND
		WA$9INID = InstallationID;
END ;
-- #desc						Update Last Login Date by Name
-- #bl_class					Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID
-- #param UserName
-- #param LastLoginDate
-- #param LastLoginTime

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExcUpdLastLoginTimeByName

(
	IN UserName			VARGRAPHIC(256) CCSID 13488, 
	IN InstallationID	VARCHAR(3), 
	IN LastLoginDate	NUMERIC(15,0), 
	IN LastLoginTime	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExcUpdLastLoginTimeByName 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	UPDATE [SCDATA].FQ67101
		SET	WAACTDATE = LastLoginDate, 
		WAACTTIME = LastLoginTime
	WHERE WA$9INID = InstallationID
		AND UPPER(LTRIM(TRIM(WAEMAL))) = UPPER(LTRIM(TRIM(UserName)));
END ;
-- #desc					Update an User (LanguagePref).
-- #bl_class				Premier.eCommerce.WebAccountUser.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param InstallationID	InstallationID
-- #param WebAccountID		WebAccountID
-- #param LanguagePref		LanguagePref

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_ExeUpdWebAcctLanguagePref
(
	IN InstallationID		VARCHAR(3),
	IN WebAccountID			NUMERIC(15,0),
	IN LanguagePref			VARCHAR(2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_ExeUpdWebAcctLanguagePref 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
		
	UPDATE 
		[SCDATA].FQ67991
	SET
		USLNGP	= LanguagePref
	WHERE 	 
		US$9USER = (SELECT WA$9USER FROM [SCDATA].FQ67101
						WHERE WA$9WAN8 = WebAccountID AND
							  WA$9INID = InstallationID);

END	
		  ;
-- #desc					Get the abandoned persist shopping cart
-- #bl_class				N/A
-- #db_dependencies			N/A
-- #db_references			N/A 

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetAbandonedShopCartList
(
	InstallationID   VARCHAR(3)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetAbandonedShopCartList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE NotificationSetting VARGRAPHIC(256) CCSID 13488;
	DECLARE FirstNotificationDate INT DEFAULT 0;
	DECLARE SecondNotificationDate INT DEFAULT 0;
	DECLARE ThirdNotificationDate INT DEFAULT 0;
	DECLARE CurrentJulianDate INT DEFAULT 0;
	DECLARE InstallationIDTemp VARCHAR(3);

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT	
			PSC.SH$9WAN8	AS WebAccountID,
			PSC.SH$9INID	AS InstallationID,
			WA.WAEMAL		AS UserName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CONS.PCMLNM
				ELSE CUST.WWMLNM
			END AS CustomerName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CONS.PCEMAL
				ELSE [SCLIBRARY].CST_GetPrimaryElectAddressFnc(CUST.WWAN8,CUST.WWIDLN,'E')
			END AS Email,
			CONT.ABLNGP AS LangPref,
			0 AS Client,
			'' AS ClientName,
			CASE PSC.SHUPMJ
				WHEN FirstNotificationDate THEN 1
				WHEN SecondNotificationDate THEN 2
				WHEN ThirdNotificationDate THEN 3
				END AS NotificationSequence
		FROM 
			[SCDATA].FQ6742WF PSC
			INNER JOIN [SCDATA].FQ67101 WA
				ON WA.WA$9WAN8 = PSC.SH$9WAN8
				AND WA.WA$9INID = PSC.SH$9INID
			LEFT OUTER JOIN [SCDATA].FQ67104 CONT
				ON CONT.AB$9AN8 = WA.WA$9AN8
				AND CONT.ABIDLN = WA.WAIDLN
			LEFT OUTER JOIN [SCDATA].F0111 CUST
				ON CUST.WWAN8 = WA.WA$9AN8 
				AND CUST.WWIDLN = WA.WAIDLN 
				AND WA.WA$9TYP IN(0, 2)  --Customer Only
			LEFT OUTER JOIN [SCDATA].FQ67303 CONS
				ON CONS.PC$9AN8 = WA.WA$9AN8 
				AND CONS.PCIDLN = WA.WAIDLN 
				AND WA.WA$9TYP = 1 --Consumer Only
		WHERE PSC.SHQTY > 0
		AND PSC.SH$9INID = InstallationID
		AND PSC.SHUPMJ <> CurrentJulianDate
		AND PSC.SHUPMJ IN (FirstNotificationDate, SecondNotificationDate, ThirdNotificationDate)	
		UNION
		SELECT	
			PSC.SP$9WAN8	AS WebAccountID,
			PSC.SP$9INID	AS InstallationID,
			WA.WAEMAL		AS UserName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CONS.PCMLNM
				ELSE CUST.WWMLNM
			END AS CustomerName,
			CASE WA.WA$9TYP 
				WHEN 1 THEN CONS.PCEMAL
				ELSE [SCLIBRARY].CST_GetPrimaryElectAddressFnc(CUST.WWAN8,CUST.WWIDLN,'E')
			END AS Email,
			CONT.ABLNGP AS LangPref,
			PSC.SP$9AN8 AS Client,
			CASE PSC.SP$9TYP 
				WHEN 1 THEN CONSCLIENT.PCMLNM
				ELSE CUSTCLIENT.WWMLNM
			END AS ClientName,
			CASE PSC.SPUPMJ
				WHEN FirstNotificationDate THEN 1
				WHEN SecondNotificationDate THEN 2
				WHEN ThirdNotificationDate THEN 3
				END AS NotificationSequence 
		FROM 
			[SCDATA].FQ67125 PSC
			INNER JOIN [SCDATA].FQ67101 WA
				ON WA.WA$9WAN8 = PSC.SP$9WAN8
				AND WA.WA$9INID = PSC.SP$9INID
			LEFT OUTER JOIN [SCDATA].FQ67104 CONT
				ON CONT.AB$9AN8 = WA.WA$9AN8
				AND CONT.ABIDLN = WA.WAIDLN
			LEFT OUTER JOIN [SCDATA].F0111 CUST
				ON CUST.WWAN8 = WA.WA$9AN8 
				AND CUST.WWIDLN = WA.WAIDLN 
				AND WA.WA$9TYP IN(0, 2)  --Customer Only
			LEFT OUTER JOIN [SCDATA].FQ67303 CONS
				ON CONS.PC$9AN8 = WA.WA$9AN8 
				AND CONS.PCIDLN = WA.WAIDLN 
				AND WA.WA$9TYP = 1 --Consumer Only
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCLIENT
				ON CUSTCLIENT.WWAN8 = PSC.SP$9AN8 
				AND CUSTCLIENT.WWIDLN = PSC.SPIDLN 
				AND PSC.SP$9TYP IN(0, 2)  --Customer Only
			LEFT OUTER JOIN [SCDATA].FQ67303 CONSCLIENT
				ON CONSCLIENT.PC$9AN8 = PSC.SP$9AN8 
				AND CONSCLIENT.PCIDLN = PSC.SPIDLN 
				AND PSC.SP$9TYP = 1 --Consumer Only
		WHERE PSC.SP$9HTML IS NOT NULL
		AND PSC.SP$9INID = InstallationID
		AND PSC.SPUPMJ <> CurrentJulianDate
		AND PSC.SPUPMJ IN (FirstNotificationDate, SecondNotificationDate, ThirdNotificationDate)								
		FOR FETCH ONLY;

		SET InstallationIDTemp = InstallationID;
		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
		CALL [SCLIBRARY].CMM_GetConstantValue('ABNEMLNOT1', InstallationIDTemp, NotificationSetting);
		SET FirstNotificationDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE - (CAST(COALESCE(NULLIF(TRIM(NotificationSetting), ''), 0) AS INT) Days));
		CALL [SCLIBRARY].CMM_GetConstantValue('ABNEMLNOT2', InstallationIDTemp, NotificationSetting);
		SET SecondNotificationDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE - (CAST(COALESCE(NULLIF(TRIM(NotificationSetting), ''), 0) AS INT) Days));
		CALL [SCLIBRARY].CMM_GetConstantValue('ABNEMLNOT3', InstallationIDTemp, NotificationSetting);
		SET ThirdNotificationDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE - (CAST(COALESCE(NULLIF(TRIM(NotificationSetting), ''), 0) AS INT) Days));

	OPEN TEMP_CURSOR1;
END
  ;
-- #desc						Get Account Summary Info
-- #bl_class	 	 			Premier.eCommerce.AccountSummaryInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation
-- #param AddressNumber			Address Number
-- #param AddressBookType		Address Book Type
-- #param Company				Company

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetAccountSummaryInfo
(
	IN InstallationID   GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(15,0),
	IN AddressBookType	NUMERIC(15,0),
	IN Company			GRAPHIC(5) CCSID 13488
)

DYNAMIC RESULT SETS 3 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetAccountSummaryInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	/* Gets the Document Restrictions Parameters */
	DECLARE CtRestricConstant	GRAPHIC(10) CCSID 13488;
	DECLARE	CtRestric			VARGRAPHIC(1) CCSID 13488;
	DECLARE CtRestricINID		GRAPHIC(3) CCSID 13488;

	DECLARE ShipTosCount INTEGER;
	DECLARE ContactsWebAcctActiveCount INTEGER;
	DECLARE ContactsWebAcctInactiveCount INTEGER;
	DECLARE ContactsWithoutWebAcctCount INTEGER;

	--------------------------Gets the Organization Structure Type
	DECLARE OrgStrType		GRAPHIC(3) CCSID 13488;
	DECLARE OrgStrTypeINID	GRAPHIC(3) CCSID 13488;	

	/* Gets the Document Restrictions Parameters*/
	SET CtRestricConstant = 'CT_RESTRIC';
	SET CtRestricINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue (CtRestricConstant, CtRestricINID, CtRestric);

	SET OrgStrTypeINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue('ORGSTRTYPE', OrgStrTypeINID, OrgStrType);
	
	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			ShipTosCount, 
			ContactsWebAcctActiveCount,
			ContactsWebAcctInactiveCount,
			ContactsWithoutWebAcctCount
		FROM SYSIBM.SYSDUMMY1 FOR FETCH ONLY;

		IF(AddressBookType = 0) THEN	/* Customer */
			
			/* Shiptos count */
			WITH SHIPTOS AS /* CTE with parent address number and children address number */
			(
				SELECT MAAN8 FROM [SCDATA].F0150 WHERE MAPA8 = AddressNumber AND MAOSTP = OrgStrType
				UNION ALL 
				SELECT AddressNumber MAAN8 FROM SYSIBM.SYSDUMMY1    
			),
			CUSTOMERS AS 
			(
				SELECT COALESCE(B.AIBADT, A.AIBADT) BADT 
				FROM SHIPTOS
				INNER JOIN [SCDATA].F03012 A
					ON MAAN8 = A.AIAN8
				LEFT OUTER JOIN [SCDATA].F03012 B
					ON MAAN8 = B.AIAN8
					AND B.AICO = Company
				WHERE A.AICO = '00000'
			)
			SELECT COUNT(1) INTO ShipTosCount
			FROM CUSTOMERS
			WHERE BADT IN ('S', 'X');

			/* Web account counts */
			IF(CtRestric = N'1') THEN	/* Validates if the setting is on and join to FQ67008 */
				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].F0111 CON
					INNER JOIN [SCDATA].FQ67008 CtR
						ON CON.WWTYC = CtR.DRKY
						AND DR$9INID = CtRestricINID 
						AND DR$9CNST = CtRestricConstant
					LEFT OUTER JOIN [SCDATA].FQ67101
						ON  WA$9INID = InstallationID
						AND WA$9TYP IN (0,2)
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = CON.WWIDLN 
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER 
				WHERE CON.WWAN8 = AddressNumber
					AND CON.WWIDLN <> 0;
			ELSE
				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].F0111 CON
					LEFT OUTER JOIN [SCDATA].FQ67101
						ON  WA$9INID = InstallationID
						AND WA$9TYP IN (0,2)
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = CON.WWIDLN 
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER 
				WHERE CON.WWAN8 = AddressNumber
					AND CON.WWIDLN <> 0;
			END IF;
		ELSE	/* Consumer */

			/* Shiptos count */
			SELECT COUNT(1) INTO ShipTosCount
			FROM [SCDATA].FQ670302
			/* Read the parent shipto and children shiptos */
			WHERE (PR$9PA8 = AddressNumber OR PR$9AN8 = AddressNumber)
			AND PRBADT IN ('S', 'X');

			/* Web account count */
			IF(CtRestric = N'1') THEN	/* Validates if the setting is on and join to FQ67008 */
				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].FQ67303
					INNER JOIN [SCDATA].FQ67008 CtR
						ON PCTYC = CtR.DRKY
						AND DR$9INID = CtRestricINID 
						AND DR$9CNST = CtRestricConstant
					LEFT OUTER JOIN [SCDATA].FQ67101 
						ON WA$9INID = InstallationID
						AND WA$9TYP = 1
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = PCIDLN
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER
				WHERE PC$9AN8 = AddressNumber
						AND PCIDLN <> 0;
			ELSE
				SELECT 
					SUM(CASE WHEN WA$9WAN8 IS NULL THEN 1 ELSE 0 END) AS WithoutWebAcctCount,
					SUM(CASE US$9SFAD WHEN 0 THEN 1 ELSE 0 END) AS WebAcctInactiveCount,
					SUM(CASE US$9SFAD WHEN 1 THEN 1 ELSE 0 END) AS WebAcctActiveCount
					INTO ContactsWithoutWebAcctCount, ContactsWebAcctInactiveCount, ContactsWebAcctActiveCount
				FROM [SCDATA].FQ67303
					LEFT OUTER JOIN [SCDATA].FQ67101 
						ON WA$9INID = InstallationID
						AND WA$9TYP = 1
						AND WA$9AN8 = AddressNumber
						AND WAIDLN = PCIDLN
					LEFT OUTER JOIN [SCDATA].FQ67991 
						ON US$9USER = WA$9USER
				WHERE PC$9AN8 = AddressNumber
						AND PCIDLN <> 0;
			END IF;

		END IF;

		OPEN TEMP_CURSOR1;

		/* Credit carts summary */
		CALL [SCLIBRARY].PRO_GetCreditCardsSummary(AddressNumber, AddressBookType);
		/* Bank accounts summary */
		CALL [SCLIBRARY].PRO_GetBankAccountsSummary(InstallationID, AddressNumber);

	END;
END;
-- #desc						Get Permission SetUp List
-- #bl_class	 	 			Premier.eCommerce.PermissionSetUpList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation
-- #param AddressNumber			Address Number
-- #param Status				Status	 

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetPermissionSetUpList
(
	InstallationID   VARCHAR(3),
	IndCompFlag	   NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetPermissionSetUpList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
Select 
	PE$9INID  AS InstallationID,
	PE$9PCD   AS PermissionCode,
	PE$9ICF   AS IndividualCompanyFlag,
	PE$9ALLOW AS ActionAllowed,
	PE$9WEBA  AS WebAllowebFlag
From
	[SCDATA].FQ67994E
Where
	PE$9INID = InstallationID AND
	PE$9ICF = IndCompFlag	
UNION
Select 
	PE$9INID  AS InstallationID,
	PE$9PCD   AS PermissionCode,
	PE$9ICF   AS IndividualCompanyFlag,
	PE$9ALLOW AS ActionAllowed,
	PE$9WEBA  AS WebAllowebFlag
From
	[SCDATA].FQ67994E  A
Where
	A.PE$9INID = '***' AND
	A.PE$9ICF = IndCompFlag
	AND A.PE$9PCD  NOT IN(SELECT B.PE$9PCD
							  FROM  [SCDATA].FQ67994E B
							  WHERE B.PE$9INID = InstallationID
								AND B.PE$9ICF =  IndCompFlag)
								
	FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
END
  ;
-- #desc					Reads shooping cart
-- #bl_class	 	 		Premier.eCommerce.TemporalShoppingCartCommand.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetPersistentShoppingCart
(
	WebAccountId NUMERIC(15,0),
	InstallationID varchar(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetPersistentShoppingCart 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
        SELECT	
	SH$9WAN8	as WebAccountId,
	SH$9INID	as InstallationID,
	SHQTY		as Quantity,
	SHUPMT		as LastUpdate,
	SH$9HTML	as ItemList
FROM 
	[SCDATA].FQ6742WF
WHERE          
    (SH$9WAN8  = WebAccountId) AND (SH$9INID = InstallationID)
        
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
		
END
 ;
-- #desc							Get the persist shopping cart of the Sales Person Client
-- #bl_class						Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param WebAccountID				WebAccountID of the Sales Person
-- #param InstallationID			Installation Id
-- #param SalesPersonClient			Address Number of the Sales Person Client

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetSalePClientShopCart
(
	WebAccountId		NUMERIC(15,0),
	InstallationID		VARCHAR(3),
	SalesPersonClient	NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetSalePClientShopCart 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN 
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT	
			SP$9WAN8	as WebAccountId,
			SP$9INID	as InstallationID,
			0			as Quantity,
			SPUPMT		as LastUpdate,
			SP$9HTML	as ItemList
		FROM 
			[SCDATA].FQ67125
		WHERE          
			(SP$9WAN8  = WebAccountId) AND (SP$9INID = InstallationID) AND (SP$9AN8 = SalesPersonClient)
		
	FOR FETCH ONLY;
	OPEN TEMP_CURSOR1;
		
END  ;
-- #desc						Get Sales Person List by Client
-- #bl_class	 	 			Premier.eCommerce.SalesPersonList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param AddressNumber			Address Number
-- #param ContactID     		Contact ID

CREATE OR REPLACE PROCEDURE [SCLIBRARY].ECO_GetSalesPersnLstByClient
(
	InstallationID		GRAPHIC(3) CCSID 13488,
	AddressNumber		NUMERIC(15,0),
	ContactID			DECIMAL(5,0)
	
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetSalesPersnLstByClient
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
    SELECT 
        B.WA$9AN8 AS AddressNumber,
        B.WAIDLN AS ContactID,
        CASE WHEN C.UP$9ALLOW IS NULL OR C.UP$9ALLOW = 1 THEN 'N' ELSE 'Y' END AS Notify,
        (SELECT emails.EAEMAL
						FROM [SCDATA].F01151 emails
						WHERE emails.EAAN8 = B.WA$9AN8 
						 AND emails.EAIDLN = B.WAIDLN AND emails.EAETP = 'E'
						ORDER BY emails.EAEHIER DESC, emails.EARCK7 DESC FETCH FIRST 1 ROW ONLY) AS EmailAddress
    FROM [SCDATA].FQ67125 A 
    INNER JOIN [SCDATA].FQ67101 B
        ON WA$9WAN8= A.SP$9WAN8 AND B.WA$9INID = A.SP$9INID
    LEFT OUTER JOIN [SCDATA].FQ67997 C 
        ON C.UP$9USER = B.WA$9USER AND UP$9PCD='ESPRE'
    WHERE  A.SP$9INID=InstallationID AND A.SP$9AN8=AddressNumber AND A.SPIDLN=ContactID;
	
	OPEN TEMP_CURSOR1;
END ;
-- #desc					Read Sales Person Client List 
-- #bl_class				Premier.ecommerce.SalesPersonClientList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param InstallationId	Installation Id			
-- #param WebAccountId		Web Account Id
-- #param CustomerName		Customer Name
-- #param AddressNumber		Address Number
-- #param AddressLine1		Address Line 1
-- #param City				City
-- #param State				State
-- #param ZipCode			Zip Code
-- #param Country			Country
-- #param LangPref			Language Preference
-- #param SortBy			Sort By Colum name
-- #param SortDir			Sort Dir ASC / DESC
-- #param PageIndex			Page Index
-- #param PageSize			Page Size

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetSalesPersonClientList
(
	IN InstallationId		GRAPHIC(3) CCSID 13488,
	IN WebAccountId			DECIMAL(15,0),
    IN CustomerName			VARGRAPHIC(40) CCSID 13488,
    IN AddressNumber		NUMERIC(15,0),
    IN AddressLine1			VARGRAPHIC(40) CCSID 13488,
    IN City					VARGRAPHIC(25) CCSID 13488,
    IN State				VARGRAPHIC(3) CCSID 13488,
    IN ZipCode				VARGRAPHIC(12) CCSID 13488,
    IN Country				VARGRAPHIC(3) CCSID 13488,
    IN LangPref				VARCHAR(2),
	IN SortBy				VARCHAR(20),
	IN SortDir				VARCHAR(1),
    IN PageIndex            INT,
	IN PageSize             INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetSalesPersonClientList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE CurrentJulianDate NUMERIC(6,0);

	DECLARE ROWSTART INT DEFAULT 0 ; 
	DECLARE ROWEND INT DEFAULT 0 ; 

	DECLARE SQL_DYNAMIC				VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC			VARGRAPHIC(10000) CCSID 13488;
	DECLARE WHERE_DYNAMIC_CONSU		VARGRAPHIC(10000) CCSID 13488;
	DECLARE SORT_DYNAMIC			VARGRAPHIC(50) CCSID 13488;
	DECLARE SORTDIR_DYNAMIC			VARGRAPHIC(5) CCSID 13488;
	DECLARE ConsumerCount			NUMERIC(15,0);

	/* DYNAMIC SQL Select */
	DECLARE V_DYNAMIC				VARGRAPHIC(8000) CCSID 13488;
	
	SET SORTDIR_DYNAMIC = CASE SortDir WHEN 'A' THEN ' ASC' WHEN 'D' THEN ' DESC' ELSE '' END;

	/* Dynamic sort statement */
	SET SORT_DYNAMIC = CASE SortBy
							WHEN 'AddressNumber' THEN 'AddressNumber' 
							WHEN 'AddressLine1' THEN 'UPPER(AddressLine1)' 
							WHEN 'City' THEN 'UPPER(City)' 
							WHEN 'State' THEN 'State' 
							WHEN 'ZipCode' THEN 'UPPER(ZipCode)' 
							ELSE 'UPPER(CustomerName)' || SORTDIR_DYNAMIC || ', UPPER(CompanyName)'
						END;

	SET SORT_DYNAMIC = SORT_DYNAMIC || SORTDIR_DYNAMIC;
	
	/* Verify if exist consumer relation to concat consumer UNION ALL */
	SELECT COUNT(1) INTO ConsumerCount FROM [SCDATA].FQ67125 SPC WHERE SPC.SP$9INID = InstallationId AND SPC.SP$9WAN8 = WebAccountId AND SPC.SP$9TYP = 1;
	
	SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);

	BEGIN
		/* CURSOR FOR DYNAMIC SQL */
		DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;

		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);

		/* Dynamic query condition */
		SET WHERE_DYNAMIC = '';
		SET WHERE_DYNAMIC_CONSU = '';

		IF (CustomerName <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(TRIM(COALESCE(CUST.WWMLNM, ''''))) || '' '' || UPPER(COALESCE(CUSTCIA.WWMLNM, '''')) LIKE ''%'' || ? || ''%''';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND  UPPER(TRIM(COALESCE(CONTACT.PCMLNM, ''''))) || '' '' || UPPER(COALESCE(CONSCIA.PCMLNM, '''')) LIKE ''%'' || ? || ''%''';
		ELSE 
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR ?  = ''*'') ';
		END IF;
		
		IF (AddressNumber IS NOT NULL) THEN
			SET WHERE_DYNAMIC =  WHERE_DYNAMIC || N' AND SPC.SP$9AN8 = ? ';
			SET WHERE_DYNAMIC_CONSU =  WHERE_DYNAMIC_CONSU || N' AND SPC.SP$9AN8 = ? ';
		ELSE 
			SET WHERE_DYNAMIC =  WHERE_DYNAMIC || N' AND ( 1 = 1 OR ? IS NULL) ';
			SET WHERE_DYNAMIC_CONSU =  WHERE_DYNAMIC_CONSU || N' AND ( 1 = 1 OR ? IS NULL) ';
		END IF;
	
		IF (AddressLine1 <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(AL.ALADD1) LIKE ''%'' || ? || ''%''';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND UPPER(CONS.PRADD1) LIKE ''%'' || ? || ''%''';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR ?  = ''*'') ';
		END IF;
	
		IF (City <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND UPPER(AL.ALCTY1) LIKE ''%'' || ? || ''%''';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND UPPER(CONS.PRCTY1) LIKE ''%'' || ? || ''%''';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR ?  = ''*'') ';
		END IF;
		
		IF (State <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AL.ALADDS = ? ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND CONS.PRADDS = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR ?  = ''*'') ';
		END IF;
		
		IF (ZipCode <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AL.ALADDZ LIKE ''%'' || ? || ''%''';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND CONS.PRADDZ LIKE ''%'' || ? || ''%''';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR ?  = ''*'') ';
		END IF;
		
		IF (Country <> '*') THEN
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND AL.ALCTR = ? ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND CONS.PRCTR = ? ';
		ELSE
			SET WHERE_DYNAMIC = WHERE_DYNAMIC || N' AND (1 = 1 OR ?  = ''*'') ';
			SET WHERE_DYNAMIC_CONSU = WHERE_DYNAMIC_CONSU || N' AND (1 = 1 OR ?  = ''*'') ';
		END IF;

		SET SQL_DYNAMIC = '
		WITH CTE1 AS (
			SELECT SalesPersonClients.*, ROW_NUMBER() OVER(ORDER BY ' || SORT_DYNAMIC || ') AS RNUM FROM 
			(
			   SELECT
					SPC.SP$9TYP          AS AddressBookType,  
					SPC.SP$9AN8          AS AddressNumber,
					SPC.SPIDLN           AS ContactId,
					SPC.SPCMR1           AS CommissionRate,
					CUST.WWMLNM          AS CustomerName,             
					SPC.SP$9HTML  AS PersistentShoppingCart,
					AL.ALADD1            AS AddressLine1,        
					AL.ALADD2            AS AddressLine2,
					AL.ALADD3            AS AddressLine3,
					AL.ALADD4            AS AddressLine4,
					AL.ALCTY1            AS City,
					AL.ALADDS            AS State,
					AL.ALADDZ            AS ZipCode,
					AL.ALCTR             AS Country,
					COALESCE(CUSTCIA.WWMLNM, '''') AS CompanyName,
					PS$9ICF                    AS IndividualCompanyFlag
				FROM [SCDATA].FQ67125 SPC
				INNER JOIN [SCDATA].F0111 CUST
						ON CUST.WWAN8 = SPC.SP$9AN8 AND 
						CUST.WWIDLN = SPC.SPIDLN          
				INNER JOIN [SCDATA].F0101 AB 
						ON AB.ABAN8 = SPC.SP$9AN8         
				INNER JOIN TABLE(SCLIBRARY.CMM_GetEffectiveAddressFnc (AB.ABAN8, '|| CurrentJulianDate ||')) AL
						ON AL.ALAN8 = AB.ABAN8
				INNER JOIN [SCDATA].FQ67107                /* Profile Extended Information */
						ON PS$9AN8 = SPC.SP$9AN8
						AND PS$9TYP = SPC.SP$9TYP  
				LEFT OUTER JOIN [SCDATA].F0111 CUSTCIA
						ON CUSTCIA.WWAN8 =  SPC.SP$9AN8 AND 
						CUSTCIA.WWIDLN = 0 AND            
						SPC.SPIDLN <> 0 AND
						PS$9ICF = 1                                     /* Company Only */     
				WHERE SPC.SP$9INID = ?
						AND SPC.SP$9WAN8 = ?
						AND SPC.SP$9TYP = 0                      /* Customer Only */ ' ||
					WHERE_DYNAMIC;

		IF (ConsumerCount > 0) THEN
			SET SQL_DYNAMIC = SQL_DYNAMIC || 
				'	UNION ALL
					SELECT                                   
						SPC.SP$9TYP          AS AddressBookType,  
						SPC.SP$9AN8          AS AddressNumber,
						SPC.SPIDLN           AS ContactId,
						SPC.SPCMR1           AS CommissionRate,
						CONTACT.PCMLNM          AS CustomerName,             
						SPC.SP$9HTML  AS PersistentShoppingCart,
						CONS.PRADD1            AS AddressLine1,        
						CONS.PRADD2            AS AddressLine2,
						CONS.PRADD3            AS AddressLine3,
						CONS.PRADD4           AS AddressLine4,
						CONS.PRCTY1            AS City,
						CONS.PRADDS            AS State,
						CONS.PRADDZ            AS ZipCode,
						CONS.PRCTR             AS Country,
						COALESCE(CONSCIA.PCMLNM, '''') AS CompanyName,
						PS$9ICF                    AS IndividualCompanyFlag
					FROM [SCDATA].FQ67125 SPC
					INNER JOIN [SCDATA].FQ67303 CONTACT
							ON CONTACT.PC$9AN8 = SPC.SP$9AN8 AND 
							CONTACT.PCIDLN = SPC.SPIDLN          
					INNER JOIN [SCDATA].FQ670302 CONS 
							ON CONS.PR$9AN8 = SPC.SP$9AN8         				  
					INNER JOIN [SCDATA].FQ67107                /* Profile Extended Information */
							ON PS$9AN8 = SPC.SP$9AN8
							AND PS$9TYP = SPC.SP$9TYP  
					LEFT OUTER JOIN [SCDATA].FQ67303 CONSCIA
							ON CONSCIA.PC$9AN8 =  SPC.SP$9AN8 AND 
							CONSCIA.PCIDLN = 0 AND            
							SPC.SPIDLN <> 0 AND PS$9ICF = 1 /* Company Only */     
					WHERE SPC.SP$9INID = ?
							AND SPC.SP$9WAN8 = ?
							AND SPC.SP$9TYP = 1 /* Consumer Only */ ' ||
					WHERE_DYNAMIC_CONSU;
		END IF;

		SET SQL_DYNAMIC = SQL_DYNAMIC || 
			') SalesPersonClients 	
		),
		CTE2 AS ( 
			SELECT COUNT(1) AS TotalRowCount
			FROM CTE1 
		)
		SELECT 
			''' || InstallationId || ''' AS InstallationId, ' || WebAccountId || ' AS WebAccountId, CTE1.AddressBookType, CTE1.AddressNumber, CTE1.ContactId, CTE1.CommissionRate, CTE1.CustomerName,             
			CTE1.PersistentShoppingCart, CTE1.AddressLine1, CTE1.AddressLine2, CTE1.AddressLine3, CTE1.AddressLine4, CTE1.City, CTE1.State, CTE1.ZipCode, 
			CTE1.Country, [SCLIBRARY].CMM_GetUserDefinedCodeFnc(''00'',''CN'', CTE1.Country, '''||LangPref||N''')  AS CountryDescription, CTE1.CompanyName, CTE1.IndividualCompanyFlag, CTE2.TotalRowCount
		FROM CTE2, CTE1	 
		WHERE (( ? = 0  OR ? = 0) OR ( RNUM BETWEEN ? AND ? )) ';

		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;

		IF (ConsumerCount > 0) THEN
			OPEN TEMP_CURSOR1 USING InstallationId, WebAccountId, CustomerName, AddressNumber, AddressLine1, City, State, ZipCode, Country, 
								InstallationId, WebAccountId, CustomerName, AddressNumber, AddressLine1, City, State, ZipCode, Country, 
								PageIndex, PageSize, RowStart, RowEnd;
		ELSE
			OPEN TEMP_CURSOR1 USING InstallationId, WebAccountId, CustomerName, AddressNumber, AddressLine1, City, State, ZipCode, Country, 
								PageIndex, PageSize, RowStart, RowEnd;
		END IF;

		
	END;
END
  ;
-- #desc					Read Web Site Most Viewed Items 
-- #bl_class				Premier.ecommerce.SalesPersonClients.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param InstallationId	Installation Id			
-- #param WebAccountId		Web Account Id

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetSalesPersonClients
(
	InstallationId				VARCHAR(3),
	WebAccountId				NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetSalesPersonClients 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
		SELECT 
			SPC.SP$9INID AS InstallationId,			
			SPC.SP$9WAN8 AS WebAccountId,				
			SPC.SP$9TYP	AS AddressBookType,	
			SPC.SP$9AN8	AS AddressNumber,
			SPC.SPIDLN	AS ContactId,
			SPC.SPCMR1	AS CommissionRate,
			CASE SPC.SP$9TYP 
				WHEN 0 THEN CUST.WWMLNM
				ELSE CONS.PCMLNM
			END AS CustomerName,	   	
			SPC.SP$9HTML AS PersistentShoppingCart,
			SPC.SPUPDJ	AS LastPickDate,
			SPC.SPMUPT	AS TimeUpd,
			SPC.SPKCOO	AS OrderCompany,
			SPC.SPDOCO	AS OrderNumber,
			SPC.SPDCTO	AS OrderType,
			SPC.SPTRDJ	AS OrderDate,
			SPC.SPOTOT	AS AmmountOrderGross,
			SPC.SPURAB	AS UserReservedNumber,			
			SPC.SPURAT	AS UserReservedAmount,	
			SPC.SPURCD	AS UserReservedCode,		
			SPC.SPURDT	AS UserReservedDate,			
			SPC.SPURRF	AS UserReservedReference,
			SPC.SPUSER	AS "USERID",						
			SPC.SPPID	AS "PROGRAMID",					
			SPC.SPUPMJ	AS DateUpdated,				
			SPC.SPUPMT	AS TimeLastUpdated,			
			SPC.SPJOBN	AS JobNumber
		FROM [SCDATA].FQ67125 SPC
		LEFT OUTER JOIN [SCDATA].F0111 CUST
			ON CUST.WWAN8 = SPC.SP$9AN8 AND 
			CUST.WWIDLN = 0 AND
			SPC.SP$9TYP = 0 --Customer Only
		LEFT OUTER JOIN [SCDATA].FQ67303 CONS
			ON SPC.SP$9AN8 = CONS.PC$9AN8 AND 
			CONS.PCIDLN = 0 AND
			SPC.SP$9TYP = 1 --Consumer Only
		WHERE (SPC.SP$9INID = InstallationId)
		AND (SPC.SP$9WAN8 = WebAccountId)
		ORDER BY SPC.SP$9TYP, SPC.SP$9AN8
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
END
  ;
-- #desc							Get the Saved Cart			
-- #bl_class						Premier.eCommerce.SavedCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			InstallationID 
-- #param AddressNumberID			Address Number ID
-- #param UniqueKeyID				Unique Key ID

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetSavedCart
(
	InstallationID		VARCHAR(3),
	AddressNumberID		NUMERIC(15,0),
	UniqueKeyID			NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetSavedCart 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR 
	SELECT	
		WA$9INID	AS InstallationID,
		WA$9WAN8	AS WebAccountID,
		WAUKID		AS UniqueKeyID,
		WA$9AN8		AS AddressNumber,	
		WAIDLN		AS ContactID,	
		WA$9TYP		AS AddressType,
		COALESCE(WWMLNM,PCMLNM)	AS MailingName,
		WAPDSC		AS Description,
		WAQTY		AS Quantity,
		WA$9SHFLG	AS ShareFlag,
		WAUPDTDATE  AS DateSaved,
		WAMUPT		AS TimeSaved,
		WAKCOO		AS OrderCompany,
		WADOCO		AS OrderNumber,
		WADCTO		AS OrderType,
		WATRDJ		AS TransactionDate,
		WA$9HTML	AS ItemList
	FROM [SCDATA].FQ679913
	LEFT OUTER JOIN [SCDATA].F0111
		ON	WA$9AN8 = WWAN8
		AND WAIDLN = WWIDLN
		AND WA$9TYP IN (0,2) --Customer Only
	LEFT OUTER JOIN [SCDATA].FQ67303 CONS
		ON WA$9AN8 = CONS.PC$9AN8 AND 
		CONS.PCIDLN = WAIDLN
		AND WA$9TYP = 1 --Consumer Only
	WHERE WA$9INID = InstallationID			
	AND WA$9AN8  = AddressNumberID
	AND WAUKID = UniqueKeyID
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
END
  ;
-- #desc					Get the Saved Cart List		
-- #bl_class				Premier.eCommerce.SavedCartList.cs
-- #db_dependencies			N/A
-- #db_references			N/A
	
-- #param InstallationID	Installation ID		
-- #param ContactID			Contact ID
-- #param AddressBookType	Web Account Address Type		
-- #param AddressNumber		Web Account AN8

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetSavedCartList
(
	InstallationID		VARCHAR(3),
	ContactID			NUMERIC(15,0),
	AddressType			NUMERIC(15,0),
	AddressNumber		NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetSavedCartList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 

BEGIN
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
	SELECT 
		A.WA$9WAN8	AS WebAccountID,
		A.WAUKID	AS UniqueKeyID,
		A.WAPDSC	AS Description,
		A.WA$9SHFLG AS ShareFlag,
		A.WAQTY		AS Quantity,
		A.WA$9AN8   AS AddressNumberID,
		CASE WHEN A.WA$9TYP = 0 THEN 
			COALESCE(CUST.WWMLNM, '')
			ELSE COALESCE(CONS.PCMLNM, '') 
		END AS MailingName,
		CASE WHEN WA.WA$9TYP = 2
			THEN 'Y'
			ELSE 'N'
        END AS SalesPersonFlag,
		A.WAUPDTDATE  AS DateSaved
	FROM [SCDATA].FQ679913  A
	INNER JOIN [SCDATA].FQ67101 WA
        ON WA.WA$9WAN8 = A.WA$9WAN8
	LEFT OUTER JOIN [SCDATA].F0111 CUST
		ON CUST.WWAN8 = WA.WA$9AN8 
		AND CUST.WWIDLN = WA.WAIDLN  
		AND A.WA$9TYP = 0 /*Customer Only*/
	LEFT OUTER JOIN [SCDATA].FQ67303 CONS
		ON CONS.PC$9AN8 = WA.WA$9AN8  
		AND CONS.PCIDLN = WA.WAIDLN  
		AND A.WA$9TYP = 1 /*Consumer Only*/
	WHERE A.WA$9INID = InstallationID
		AND A.WA$9TYP = AddressType
		AND A.WA$9AN8 = AddressNumber
		AND (A.WA$9SHFLG = 'Y' OR A.WAIDLN = ContactID)
	ORDER BY Description
	FOR FETCH ONLY;
	
	OPEN TEMP_CURSOR1;
END
  ;
-- #desc						Get Web Account User List
-- #bl_class					Premier.eCommerce.WebAccountUserList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationList 
-- #param AddressBookNumber 
-- #param FilterTerm 
-- #param AddressBookType 
-- #param PageIndex 
-- #param PageSize 

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWebAccountUserList
(
	IN InstallationList		VARGRAPHIC(100) CCSID 13488,	
	IN AddressBookNumber	NUMERIC(15,0),
	IN FilterTerm			VARGRAPHIC(256) CCSID 13488,
	IN AddressBookType		DECIMAL(10,0),	
	IN AccountDisable		DECIMAL(10,0),
	IN PageIndex			INT,
    IN PageSize			    INT
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWebAccountUserList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;

	BEGIN
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		WITH CTE AS (
			SELECT 
				WUSR.WAEMAL, 
				WUSR.WA$9WAN8, 
				WUSR.WA$9USER,
				WUSR.WA$9TYP, 
				WUSR.WA$9AN8,   
				WUSR.WAIDLN,
				WUSR.WAACTDATE,
				WUSR.WAACTTIME,
				CUST.WWMLNM,
				CONS.PCMLNM,
				CUSTCOMP.WWMLNM,
				CONSCOMP.PCMLNM,
				SQ.US$9SFAD, 
				SQ.US$9SFAL
			FROM [SCDATA].FQ67101 WUSR 
			INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
				ON WUSR.WA$9USER = INBU.UI$9USER
			LEFT OUTER JOIN [SCDATA].F0111 CUST 
				ON CUST.WWAN8 = WUSR.WA$9AN8 AND 
				CUST.WWIDLN =  WUSR.WAIDLN AND 
				WUSR.WA$9TYP IN (0, 2)  /*Customer and Internal Sales Person Only*/
			LEFT OUTER JOIN [SCDATA].FQ67303 CONS 
				ON WUSR.WA$9TYP = 1  /*Consumer Only*/
				AND WUSR.WA$9AN8 = CONS.PC$9AN8
				AND WUSR.WAIDLN = CONS.PCIDLN 
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
				ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
				AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
				AND WUSR.WA$9TYP IN (0, 2)  /*Customer and Internal Sales Person Only*/
			LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
				ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
				AND CONSCOMP.PCIDLN = 0 /*Company Name*/
				AND WUSR.WA$9TYP = 1 /*Consumer Only*/
			LEFT OUTER JOIN [SCDATA].FQ67991 SQ 
				ON SQ.US$9USER =WUSR.WA$9USER 
			WHERE
				InstallationList LIKE '%' || INBU.UI$9INID || '%'
				AND (AddressBookNumber = 0 OR WUSR.WA$9AN8 = AddressBookNumber) /*AddressBookNumber Filter*/
				AND (AddressBookType = 9 OR WUSR.WA$9TYP = AddressBookType)
				AND (AccountDisable = 2 OR SQ.US$9SFAD = AccountDisable)
				AND (FilterTerm = '*' OR  UPPER(WUSR.WAEMAL) LIKE '%' || FilterTerm || '%' OR UPPER(CUST.WWMLNM) LIKE '%' || FilterTerm || '%' OR UPPER(CONS.PCMLNM) LIKE '%' || FilterTerm || '%' OR UPPER(CUSTCOMP.WWMLNM) LIKE '%' || FilterTerm || '%'  OR UPPER(CONSCOMP.PCMLNM) LIKE '%' || FilterTerm || '%') /*FilterTerm Filter*/
		), PAGING AS (
			SELECT
				A.WAEMAL									AS WebAccountUser, 
				A.WA$9WAN8									AS WebAccountID, 
				A.WA$9USER									AS "USERID",
				SQ.US$9SQ									AS SecretQuestion,
				SQ.US$9ANS									AS SecretAnswer,
				A.WA$9TYP									AS AddressBookType, 
				A.WA$9AN8									AS AddressNumber,   
				A.WAIDLN									AS ContactID,
				COALESCE(CUST.WWMLNM, CONS.PCMLNM) 			AS MailingName,
				COALESCE(CUSTCOMP.WWMLNM,CONSCOMP.PCMLNM)	AS CompanyName,  
				COALESCE(SQ.US$9SFAD, 1)					AS  AccountDisable,
				COALESCE(SQ.US$9SFAL, 1)					AS  AccountLockout,
				COALESCE(EXT.PS$9ICF, 0)					AS IndividualCompanyFlag,
				A.WAACTDATE									AS LastLoginDate,
				A.WAACTTIME									AS LastLoginTime,
				SQ.USLNGP									AS LanguagePreference,
				ROW_NUMBER() OVER (ORDER BY WAEMAL)			AS RNUM 
			FROM CTE A
			INNER JOIN [SCDATA].FQ67991 SQ 
				ON SQ.US$9USER = A.WA$9USER 
			LEFT OUTER JOIN [SCDATA].F0111 CUST 
					ON	CUST.WWAN8 = WA$9AN8 AND 
						CUST.WWIDLN = WAIDLN AND 
						A.WA$9TYP IN (0, 2)  /*Customer and Internal Sales Person Only*/
			LEFT OUTER JOIN [SCDATA].FQ67303 CONS 
					ON A.WA$9TYP = 1  /*Consumer Only*/
					AND A.WA$9AN8 = CONS.PC$9AN8
					AND A.WAIDLN = CONS.PCIDLN 
			LEFT OUTER JOIN [SCDATA].FQ67107 EXT  /*Profile Extended Information */
				ON EXT.PS$9TYP = CASE WHEN AddressBookType = 2 THEN 0 ELSE A.WA$9TYP END 
				AND A.WA$9AN8 = EXT.PS$9AN8
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
				ON CUSTCOMP.WWAN8 = A.WA$9AN8
				AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
				AND A.WA$9TYP IN (0, 2)  /*Customer and Internal Sales Person Only*/
				AND EXT.PS$9ICF = 1 /* Company Only */  
			LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
				ON CONSCOMP.PC$9AN8 = A.WA$9AN8
				AND CONSCOMP.PCIDLN = 0 /*Company Name*/
				AND A.WA$9TYP = 1 /*Consumer Only*/
				AND EXT.PS$9ICF = 1 /* Company Only */
		)
		SELECT
			A.WebAccountUser, 
			A.WebAccountID, 
			A."USERID",
			A.SecretQuestion,
			A.SecretAnswer,
			A.AddressBookType, 
			A.AddressNumber,   
			A.ContactID,
			A.MailingName,
			A.CompanyName,
			A.AccountDisable,
			A.AccountLockout,
			A.IndividualCompanyFlag,
			A.LastLoginDate,
			A.LastLoginTime,
			A.LanguagePreference,
			(SELECT COUNT(1) FROM PAGING) AS TotalRowCount
		FROM PAGING A
		WHERE ((RowStart  = 0 OR RowEnd = 0) OR (RNUM BETWEEN RowStart AND RowEnd))
		FOR FETCH ONLY;
				
		/* Paging */
		SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
		SET RowEnd = (PageIndex * PageSize);
		
		OPEN TEMP_CURSOR1;
	END;
END

 ;
-- #desc						Get Web Account Consumer Contact List
-- #bl_class	 	 			Premier.eCommerce.WebAccountContactList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation
-- #param AddressNumber			Address Number
-- #param WebAccountStatus		Web Account Status
-- #param ReturnContactZero		Return Contact Zero
-- #param Name					Contact Name
-- #param EmailAddress			Email Address
-- #param SortBy				Column to filter by 
-- #param SortDir				Direction to filter (A = Ascendant, D = Descendant) 
-- #param PageIndex				Page Index 
-- #param PageSize				Page Size 

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWebAcctConsContactList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(15,0),
	IN WebAccountStatus	DECIMAL(31,0),
	IN ReturnContactZero	DECIMAL(31,0),
	IN Name				VARGRAPHIC(40) CCSID 13488,
    IN EmailAddress		VARGRAPHIC(256) CCSID 13488,
	IN SortBy			VARCHAR(30),
	IN SortDir			VARCHAR(1),
    IN PageIndex        INT,
    IN PageSize         INT
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWebAcctConsContactList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;

	/*DYNAMIC SQL QUERY*/
	DECLARE SQL_DYNAMIC VARGRAPHIC(8000) CCSID 13488;
	DECLARE INNER_DYNAMIC VARGRAPHIC(500) CCSID 13488;
	DECLARE WHERE_CONDITION VARGRAPHIC(4000) CCSID 13488;
	DECLARE SORT_CONDITION VARGRAPHIC(50) CCSID 13488;

	-- Gets the Document Restrictions Parameters
	DECLARE	CtRestric		VARGRAPHIC(1) CCSID 13488;
	DECLARE CtRestricINID	GRAPHIC(3) CCSID 13488;

	/*CURSOR FOR DYNAMIC SQL*/
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;

	-- Gets the Document Restrictions Parameters
	SET CtRestricINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue ('CT_RESTRIC', CtRestricINID, CtRestric);

	/*DYNAMIC QUERY CONDITION*/
	SET WHERE_CONDITION = '';
	SET INNER_DYNAMIC = '';

	IF (CtRestric = '1') THEN
		SET INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ67008 DR
				ON DR.DRKY = PCTYC
				AND DR.DR$9INID =  ''' || CtRestricINID || N'''
				AND DR.DR$9CNST = ''CT_RESTRIC'' ';
	END IF;

	IF (ReturnContactZero = 1) THEN/* 1 = No*/
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND PCIDLN > 0 ';
	END IF;

	IF (WebAccountStatus = 3) THEN
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND WA$9WAN8 IS NULL ';
	END IF;
	
	IF (WebAccountStatus = 0 OR WebAccountStatus = 1) THEN/* 0 = Inactive, 1 = Active */
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND (US$9SFAD = ? OR (PCIDLN = 0 AND ? = 0)) ';/*0 = Yes*/
	ELSE 
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND (1 = 1 OR ? NOT IN (0, 1)) AND (1 = 1 OR ? NOT IN (0, 1)) ';
	END IF;

	IF (Name <> '*') THEN
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND UPPER(PCMLNM) LIKE ''%'' || ? || ''%'' ';
	ELSE 
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND (1 = 1 OR ? = ''*'') ';
	END IF;

	IF (EmailAddress <> '*') THEN
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND UPPER(PCEMAL) LIKE ''%'' || ? || ''%'' ';
	ELSE 
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND (1 = 1 OR ? = ''*'') ';
	END IF;

	/*Sort*/
	IF (SortBy = 'EmailAddress') THEN
		IF(SortDir = 'A') THEN
			SET SORT_CONDITION = 'UPPER(PCEMAL) ASC';
		ELSE
			SET SORT_CONDITION = 'UPPER(PCEMAL) DESC';
		END IF;
	ELSE	
		IF(SortDir = 'D') THEN
			SET SORT_CONDITION = 'UPPER(PCMLNM) DESC';
		ELSE
			SET SORT_CONDITION = 'UPPER(PCMLNM) ASC';
		END IF;
	END IF;

	/* Set the first row to be selected */
	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	/* Set the last row to be selected */
	SET RowEnd = (PageIndex * PageSize);

	SET SQL_DYNAMIC = N'                                                           
    WITH CTE1 AS (
		SELECT
			PCIDLN					AS ContactID,
			PCMLNM					AS MailingName, 
			COALESCE(WA$9WAN8, 0)	AS WebAccountID,
			COALESCE(US$9USRN,'''')	AS UserName,
			PCEMAL					AS EmailAddress,
			PCSLNM 					AS ContactTitle,
			COALESCE(US$9SFAD, 1)	AS AccountDisable,		/* Default is Inactive*/
			COALESCE(UP$9PCD,'''')	AS AdminPermission,
			COALESCE(AB$9SHAN, 0)	AS DefaultShipTo,
			ABRCK7					AS ShipToContactId,
			PCMLNM					AS ShipToMailingName,
			ROWNUMBER() OVER (ORDER BY ' || SORT_CONDITION || ') AS RNUM 
		FROM
			[SCDATA].FQ67303
			' || INNER_DYNAMIC || N'
		LEFT OUTER JOIN [SCDATA].FQ67101 
			ON WA$9INID = ? 
			AND WA$9TYP = 1
			AND WA$9AN8 = ? 
			AND WAIDLN = PCIDLN
		LEFT OUTER JOIN [SCDATA].FQ67991 
			ON US$9USER = WA$9USER
		LEFT OUTER JOIN [SCDATA].FQ67997			/*Return the admin permission*/
			ON UP$9USER = US$9USER 
			AND UP$9PCD= ''EADM''						/*User is an administrator*/
		LEFT OUTER JOIN [SCDATA].FQ67104			/*Contact Extended*/
			ON AB$9AN8 = ? 
			AND ABIDLN  = PCIDLN
			AND AB$9TYP = 1
		LEFT OUTER JOIN [SCDATA].FQ670302 
			ON PR$9AN8= AB$9SHAN		
		Where PC$9AN8 = ? ' || WHERE_CONDITION || '	
	)
	SELECT A.ContactID, A.MailingName, A.WebAccountID, A.UserName, A.EmailAddress, A.ContactTitle, A.AccountDisable, A.AdminPermission, A.DefaultShipTo,
		A.ShipToContactId, A.ShipToMailingName, (SELECT COUNT(1) AS TotalRowCount FROM CTE1) AS TotalRowCount
	FROM CTE1 A
	WHERE ((? = 0 OR ? = 0) OR (RNUM BETWEEN ? AND ?))';
	
	PREPARE V_DYNAMIC FROM SQL_DYNAMIC;	
	OPEN TEMP_CURSOR1 USING InstallationID, AddressNumber, AddressNumber, AddressNumber, 
								WebAccountStatus, ReturnContactZero, Name, EmailAddress, PageIndex, PageSize, RowStart, RowEnd;
END;
-- #desc						Get Web Account Consumer Contact List
-- #bl_class	 	 			Premier.eCommerce.WebAccountContactList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param Installation			Installation
-- #param AddressNumber			Address Number
-- #param WebAccountStatus		WebAccountStatus
-- #param ReturnContactZero		Return Contact Zero
-- #param Name					Contact Name
-- #param EmailAddress			Email Address
-- #param SortBy				Column to filter by 
-- #param SortDir				Direction to filter (A = Ascendant, D = Descendant) 
-- #param PageIndex				Page Index 
-- #param PageSize				Page Size 

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWebAcctCustContactList
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN AddressNumber	NUMERIC(15,0),
	IN WebAccountStatus	DECIMAL(31,0),
	IN ReturnContactZero	DECIMAL(31,0),
	IN Name				VARGRAPHIC(40) CCSID 13488,
    IN EmailAddress		VARGRAPHIC(256) CCSID 13488,
	IN SortBy			VARCHAR(30),
	IN SortDir			VARCHAR(1),
    IN PageIndex        INT,
    IN PageSize         INT
)

DYNAMIC RESULT SETS 1
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWebAcctCustContactList
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE RowStart INT DEFAULT 0;
	DECLARE RowEnd INT DEFAULT 0;

	/*DYNAMIC SQL QUERY*/
	DECLARE SQL_DYNAMIC VARGRAPHIC(8000) CCSID 13488;
	DECLARE INNER_DYNAMIC VARGRAPHIC(500) CCSID 13488;
	DECLARE WHERE_CONDITION VARGRAPHIC(4000) CCSID 13488;
	DECLARE SORT_CONDITION VARGRAPHIC(50) CCSID 13488;

	-- Gets the Document Restrictions Parameters
	DECLARE	CtRestric		VARGRAPHIC(1) CCSID 13488;
	DECLARE CtRestricINID	GRAPHIC(3) CCSID 13488;
	
	/*CURSOR FOR DYNAMIC SQL*/
	DECLARE TEMP_CURSOR1 CURSOR WITH RETURN FOR V_DYNAMIC;

	/* Gets the Document Restrictions Parameters*/
	SET CtRestricINID = InstallationID;
	CALL [SCLIBRARY].CMM_GetConstantValue ('CT_RESTRIC', CtRestricINID, CtRestric);

	/*DYNAMIC QUERY CONDITION*/
	SET  WHERE_CONDITION = ''; 
	SET  INNER_DYNAMIC = ''; 

	/* Set the first row to be selected */
	SET RowStart = ((PageSize * PageIndex) - PageSize + 1);
	/* Set the last row to be selected */
	SET RowEnd = (PageIndex * PageSize);

	IF (CtRestric = '1') THEN
		SET INNER_DYNAMIC = N' INNER JOIN [SCDATA].FQ67008 DR
				ON DR.DR$9INID =  ''' || CtRestricINID || N'''
				AND DR.DR$9CNST = ''CT_RESTRIC''
				AND DR.DRKY = CON.WWTYC ';
	END IF;

	IF (ReturnContactZero = 1) THEN/* 1 = No*/
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND CON.WWIDLN > 0 ';
	END IF;

	IF (WebAccountStatus = 3) THEN
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND WA$9WAN8 IS NULL ';
	END IF;

	IF (WebAccountStatus = 0 OR WebAccountStatus = 1) THEN /* 0 = Inactive, 1 = Active */
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND (US$9SFAD = ? OR (CON.WWIDLN = 0 AND ? = 0)) '; /*0 = Yes*/
	ELSE 
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND (1 = 1 OR ? NOT IN (0, 1)) AND (1 = 1 OR ? NOT IN (0, 1)) ';
	END IF;

	IF (Name <> '*') THEN
		SET WHERE_CONDITION = WHERE_CONDITION || N'AND UPPER(CON.WWMLNM) LIKE ''%'' || ? || ''%'' ';
	ELSE 
		SET WHERE_CONDITION = WHERE_CONDITION || N' AND (1 = 1 OR ? = ''*'') ';
	END IF;


	/*Sort*/
	IF (SortBy = 'EmailAddress') THEN
		IF(SortDir = 'A') THEN
			SET SORT_CONDITION = 'UPPER(CTE1.EmailAddress) ASC';
		ELSE
			SET SORT_CONDITION = 'UPPER(CTE1.EmailAddress) DESC';
		END IF;
	ELSE	
		IF(SortDir = 'D') THEN
			SET SORT_CONDITION = 'UPPER(CTE1.MailingName) DESC';
		ELSE
			SET SORT_CONDITION = 'UPPER(CTE1.MailingName) ASC';
		END IF;
	END IF;


	SET SQL_DYNAMIC = N'                                                           
    WITH CTE1 AS (	
		SELECT 
			CON.WWIDLN					AS ContactID,
			CON.WWMLNM					AS MailingName, 
			COALESCE(WA$9WAN8, 0)		AS WebAccountID,
			COALESCE(US$9USRN,'''')		AS UserName,
			COALESCE((SELECT	EM.EAEMAL
				FROM [SCDATA].F01151 EM
				WHERE
					EM.EAAN8 = CON.WWAN8 
					AND EM.EAIDLN = CON.WWIDLN 
					AND EM.EAETP = ''E''
				ORDER BY EM.EAEHIER DESC, EM.EARCK7 DESC
				FETCH FIRST 1 ROW ONLY
			), '''') AS EmailAddress,
			CON.WWATTL 					AS ContactTitle,
			COALESCE(US$9SFAD, 1)		AS AccountDisable,		/*Default is Inactive*/
			COALESCE(UP$9PCD,'''')		AS AdminPermission,
			COALESCE(AB$9SHAN, 0)		AS DefaultShipTo,
			ABRCK7						AS ShipToContactId,
			SHIP.WWMLNM                 AS ShipToMailingName
		FROM [SCDATA].F0111 CON
		'|| INNER_DYNAMIC || N'
		LEFT OUTER JOIN [SCDATA].FQ67101
			ON  WA$9INID = ?
			AND WA$9TYP IN (0,2)
			AND WA$9AN8 = ?
			AND WAIDLN = CON.WWIDLN 
		LEFT OUTER JOIN [SCDATA].FQ67991 
			ON US$9USER = WA$9USER 
		LEFT OUTER JOIN [SCDATA].FQ67997				/*Return the admin permission*/
			ON UP$9USER = US$9USER 
			AND UP$9PCD= ''EADM''						/*User is an administrator*/
		LEFT OUTER JOIN [SCDATA].FQ67104 				/*Contact Extended*/
			ON AB$9AN8 = ?
			AND ABIDLN = CON.WWIDLN 
			AND AB$9TYP = 0			  
		LEFT OUTER JOIN  [SCDATA].F0111 SHIP			/* Join to get default Shipto information */
			ON  SHIP.WWAN8 = AB$9SHAN
			AND SHIP.WWIDLN = ABRCK7
		WHERE CON.WWAN8 = ? ' || WHERE_CONDITION || '
		) ,
		CTE2 AS (
			SELECT CTE1.*, ROWNUMBER() OVER (ORDER BY ' || SORT_CONDITION || ') AS RNUM 
			FROM CTE1 
			WHERE ';

		IF (EmailAddress <> '*') THEN
			SET SQL_DYNAMIC = SQL_DYNAMIC || N' UPPER(CTE1.EmailAddress) LIKE ''%'' || ? || ''%'' ';
		ELSE 
			SET SQL_DYNAMIC = SQL_DYNAMIC || N' (1 = 1 OR ? = ''*'') ';
		END IF;

		SET SQL_DYNAMIC = SQL_DYNAMIC || N')
		SELECT CTE2.ContactID, CTE2.MailingName, CTE2.WebAccountID, CTE2.UserName, 
			CTE2.EmailAddress, CTE2.ContactTitle, CTE2.AccountDisable, CTE2.AdminPermission, 
			CTE2.DefaultShipTo, CTE2.ShipToContactId, CTE2.ShipToMailingName, 
			(SELECT COUNT(1) AS TotalRowCount FROM CTE2 ) AS TotalRowCount
		FROM CTE2
		WHERE ((? = 0 OR ? = 0) OR (RNUM BETWEEN  ? AND ?))';
	
		PREPARE V_DYNAMIC FROM SQL_DYNAMIC;	
		OPEN TEMP_CURSOR1 USING InstallationID, AddressNumber, AddressNumber, AddressNumber, WebAccountStatus, ReturnContactZero,
								Name, EmailAddress, PageIndex, PageSize, RowStart, RowEnd;
END;

-- #desc						Get Web Account User Information By ID
-- #bl_class					Premier.eCommerce.WebAccountUserInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param WebAccountId			WebAccountId

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWebAcctUserInfoByID
(
	InstallationID		VARCHAR(3),
	WebAccountId		NUMERIC(15,0)
)
	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWebAcctUserInfoByID
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE AddressBookTyp NUMERIC(15,0) DEFAULT 9;		
	
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		SELECT
			WUSR.WAEMAL						AS	webAccountUser,
			WUSR.WA$9WAN8					AS	WebAccountID,
			WUSR.WA$9USER					AS	"USERID",
			SQ.US$9SQ						AS  SecretQuestion,
			SQ.US$9ANS						AS  SecretAnswer,
			AddressBookTyp					AS	AddressBookType,
			WUSR.WA$9AN8					AS	AddressNumber,
			WUSR.WAIDLN						AS	ContactID,  
			CONT.WWMLNM						AS  MailingName,		/*CUSTOMER [SCDATA].F0111 0*/
			COALESCE(CUSTCOMP.WWMLNM, '')	AS  CompanyName, 
            COALESCE(SQ.US$9SFAD, 1)		AS  AccountDisable,
			COALESCE(SQ.US$9SFAL, 1)		AS  AccountLockout,
			COALESCE(EXT.PS$9ICF,0)			AS  IndividualCompanyFlag,
			WAACTDATE						AS	LastLoginDate,
			WAACTTIME						AS	LastLoginTime,
			SQ.USLNGP						AS	LanguagePreference
		FROM
		[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
				ON WUSR.WA$9USER = INBU.UI$9USER		
		LEFT OUTER JOIN [SCDATA].FQ67107 EXT /* Profile Extended Information*/
			ON 0 = EXT.PS$9TYP  /*Compare with 0 because join is with customers table in JDEdwards so a sales person must behave as a customer*/
			AND WUSR.WA$9AN8 = EXT.PS$9AN8
		LEFT OUTER JOIN [SCDATA].FQ67991 SQ
			ON SQ.US$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].F0111 CONT
			ON CONT.WWAN8 = WUSR.WA$9AN8 
			AND CONT.WWIDLN = WUSR.WAIDLN
		LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
			ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
			AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
			
		WHERE
			INBU.UI$9INID = InstallationID
			AND WUSR.WA$9WAN8 = WebAccountId
			FOR FETCH ONLY;
				
	DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
	SELECT
		WUSR.WAEMAL						AS	webAccountUser,
		WUSR.WA$9WAN8					AS	WebAccountID,
		WUSR.WA$9USER					AS	"USERID",
		SQ.US$9SQ						AS  SecretQuestion,
		SQ.US$9ANS						AS  SecretAnswer,
		AddressBookTyp					AS	AddressBookType,
		WUSR.WA$9AN8					AS	AddressNumber,
		WUSR.WAIDLN						AS	ContactID,  
		CONT.PCMLNM						AS  MailingName,/*CONSUMER [SCDATA].FQ67303 1*/
		COALESCE(CONSCOMP.PCMLNM, '')	AS CompanyName, 
      	COALESCE(SQ.US$9SFAD, 1)		AS  AccountDisable,
		COALESCE(SQ.US$9SFAL, 1)		AS  AccountLockout,
		COALESCE(EXT.PS$9ICF,0)			AS IndividualCompanyFlag,
		WAACTDATE						AS	LastLoginDate,
		WAACTTIME						AS	LastLoginTime,
		SQ.USLNGP						AS	LanguagePreference
	FROM
		[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
			ON WUSR.WA$9USER = INBU.UI$9USER
		LEFT OUTER JOIN [SCDATA].FQ67107 EXT /* Profile Extended Information*/
			ON WUSR.WA$9TYP = EXT.PS$9TYP
			AND WUSR.WA$9AN8 = EXT.PS$9AN8
		LEFT OUTER JOIN [SCDATA].FQ67991 SQ
			ON SQ.US$9USER = WUSR.WA$9USER
		LEFT OUTER JOIN [SCDATA].FQ67303 CONT
			ON WUSR.WA$9AN8 = CONT.PC$9AN8 
			AND WUSR.WAIDLN = CONT.PCIDLN
		LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
          	ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
          	AND CONSCOMP.PCIDLN = 0 /*Company Name*/
	WHERE
		INBU.UI$9INID = InstallationID
		AND WUSR.WA$9WAN8 = WebAccountId
	FOR FETCH ONLY;
		
	
	SELECT WA$9TYP INTO AddressBookTyp FROM [SCDATA].FQ67101 
	WHERE WA$9INID = InstallationID AND WA$9WAN8 = WebAccountId
	FETCH FIRST 1 ROWS ONLY;			
	
	IF (AddressBookTyp = 1)THEN
		OPEN TEMP_CURSOR2; 
	ELSE
		OPEN TEMP_CURSOR1;
	END IF;
END  ;
-- #desc						Get Web Account User Information By Name
-- #bl_class					Premier.eCommerce.WebAccountUserInfo.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		InstallationID
-- #param "USERID"				WebUserName

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWebAcctUserInfoByName
(
	InstallationID		VARCHAR(3),
	WebUserName			VARGRAPHIC(256) CCSID 13488
)
	
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWebAcctUserInfoByName 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	DECLARE AddressBookTyp NUMERIC(15,0) DEFAULT 9;		
	
		DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		SELECT
			WUSR.WAEMAL						AS	webAccountUser,
			WUSR.WA$9WAN8					AS	WebAccountID,
			WUSR.WA$9USER					AS	"USERID",
			SQ.US$9SQ						AS  SecretQuestion,
			SQ.US$9ANS						AS  SecretAnswer,
			AddressBookTyp					AS	AddressBookType,
			WUSR.WA$9AN8					AS	AddressNumber,
			WUSR.WAIDLN						AS	ContactID,  
			CONT.WWMLNM						AS  MailingName,		/*CUSTOMER F0111 0*/
			COALESCE(CUSTCOMP.WWMLNM, '')	AS	CompanyName,
			COALESCE(SQ.US$9SFAD, 1)		AS  AccountDisable,
			COALESCE(SQ.US$9SFAL, 1)		AS  AccountLockout,
			COALESCE(EXT.PS$9ICF,0)			AS  IndividualCompanyFlag,
			WAACTDATE						AS	LastLoginDate,
			WAACTTIME						AS	LastLoginTime,
			SQ.USLNGP						AS	LanguagePreference

		FROM
			[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
				ON WUSR.WA$9USER = INBU.UI$9USER
			LEFT OUTER JOIN [SCDATA].FQ67107 EXT /*Profile Extended Information*/
				ON 0 = EXT.PS$9TYP  /*Compare with 0 because join is with customers table in JDEdwards so a sales person must behave as a customer*/
				AND WUSR.WA$9AN8 = EXT.PS$9AN8
			LEFT OUTER JOIN [SCDATA].FQ67991 SQ
				ON SQ.US$9USER = WUSR.WA$9USER
			LEFT OUTER JOIN [SCDATA].F0111 CONT
				ON CONT.WWAN8 = WUSR.WA$9AN8 
				AND CONT.WWIDLN = WUSR.WAIDLN
			LEFT OUTER JOIN [SCDATA].F0111 CUSTCOMP
				ON CUSTCOMP.WWAN8 = WUSR.WA$9AN8
				AND CUSTCOMP.WWIDLN = 0 /*Company Name*/
				
		WHERE
			INBU.UI$9INID = InstallationID
			AND WUSR.WAEMAL = WebUserName
			FOR FETCH ONLY;
				
		DECLARE TEMP_CURSOR2 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR	
		SELECT
			WUSR.WAEMAL						AS	webAccountUser,
			WUSR.WA$9WAN8					AS	WebAccountID,
			WUSR.WA$9USER					AS	"USERID",
			SQ.US$9SQ						AS  SecretQuestion,
			SQ.US$9ANS						AS  SecretAnswer,
			AddressBookTyp					AS	AddressBookType,
			WUSR.WA$9AN8					AS	AddressNumber,
			WUSR.WAIDLN						AS	ContactID,  
			CONT.PCMLNM						AS MailingName,/*CONSUMER [SCDATA].FQ67303 1*/
			COALESCE(CONSCOMP.PCMLNM, '')	AS	CompanyName, 
			COALESCE(SQ.US$9SFAD, 1)		AS  AccountDisable,
			COALESCE(SQ.US$9SFAL, 1)		AS  AccountLockout,
			COALESCE(EXT.PS$9ICF,0)			AS IndividualCompanyFlag,
			WAACTDATE						AS	LastLoginDate,
			WAACTTIME						AS	LastLoginTime,
			SQ.USLNGP						AS	LanguagePreference
		FROM
			[SCDATA].FQ67101 WUSR INNER JOIN [SCDATA].FQ67996 INBU	/*Installation By User*/
				ON WUSR.WA$9USER = INBU.UI$9USER
			LEFT OUTER JOIN [SCDATA].FQ67107 EXT /* Profile Extended Information*/
				ON WUSR.WA$9TYP = EXT.PS$9TYP
				AND WUSR.WA$9AN8 = EXT.PS$9AN8
			LEFT OUTER JOIN [SCDATA].FQ67991 SQ
				ON SQ.US$9USER = WUSR.WA$9USER
			LEFT OUTER JOIN [SCDATA].FQ67303 CONT
				ON WUSR.WA$9AN8 = CONT.PC$9AN8 
				AND WUSR.WAIDLN = CONT.PCIDLN
			LEFT OUTER JOIN [SCDATA].FQ67303 CONSCOMP
				ON CONSCOMP.PC$9AN8 = WUSR.WA$9AN8
				AND CONSCOMP.PCIDLN = 0 /*Company Name*/
		WHERE
			INBU.UI$9INID = InstallationID
			AND WUSR.WAEMAL = WebUserName
		FOR FETCH ONLY;
	
	SET WebUserName	= LOWER(WebUserName);
	
	SELECT WA$9TYP INTO AddressBookTyp FROM [SCDATA].FQ67101 
	WHERE wa$9inid = InstallationID AND WAEMAL = WebUserName
	FETCH FIRST 1 ROWS ONLY;			
	
	IF (AddressBookTyp = 1)THEN
		OPEN TEMP_CURSOR2; 
	ELSE
		OPEN TEMP_CURSOR1;
	END IF;
END ;
-- #desc						Get a Web Account Additional Info
-- #bl_class	 	 			Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs

-- #param Installation			Installation
-- #param ObjectType			Object Type
-- #param WebAccountID			WebAccountID

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWebUserAdditionalInfo
(
	IN InstallationID   VARCHAR(3),
	IN ObjectType		NUMERIC(15,0),
	IN WebAccountID	    NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWebUserAdditionalInfo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

    BEGIN
        DECLARE Cursor_1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
            SELECT 
	            WI$9INID	AS InstallationId,
	            WI$9UKID	AS UniquekeyID,
	            WI$9OBJTY	AS ObjectType,
	            WI$9WAN8	AS WebAccountID,
	            WI$9HTML	AS XmlBody,
	            WIGUID		AS SharedReference,
	            WIURAB		AS UserReservedNumber,
	            WIURAT		AS UserReservedAmount,
	            WIURCD		AS UserReservedCode,
	            WIURDT		AS UserReservedDate,
	            WIURRF		AS UserReservedReference
            FROM
	            [SCDATA].FQ67120 
            WHERE
	                WI$9INID = InstallationID
	            AND	WI$9OBJTY = ObjectType
	            AND WI$9WAN8 = WebAccountID
	        FOR FETCH ONLY;
        OPEN Cursor_1;
    END;	
END ;
-- #bl_class					Premier.eCommerce.WishListHeaderList.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param AddressNumber			Address Number
-- #param AddressType			AddressType 0 = CUSTOMER, 1 = CONSUMER
-- #param InstallationID		Installation ID

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWishHeaderListByAddNo
(
	IN AddressNumber NUMERIC(15,0),
	IN AddressType NUMERIC(15,0),
	IN InstallationID VARCHAR(3)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWishHeaderListByAddNo 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT
			B.WH$9WAN8 AS WebAccountID,
			B.WHSEQ    AS	WishListID,
			B.WHDESC   AS	WishListDesc
		FROM 
			[SCDATA].FQ67101 A -- Web accounts
			INNER JOIN
			[SCDATA].FQ674214 B-- Wish List Header
			ON A.WA$9WAN8 = B.WH$9WAN8
		WHERE 
			A.WA$9AN8 = AddressNumber
			AND 
			A.WA$9TYP = AddressType
			AND
			A.WA$9INID = InstallationID
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END ;
-- #bl_class				Premier.eCommerce.WishListHeaderList.cs
-- #db_dependencies			N/A
-- #db_references			N/A

-- #param WebAccountID		WebAccount ID

CREATE OR REPLACE Procedure [SCLIBRARY].Eco_GetWishListHeaderList
(
	IN WebAccountID NUMERIC(15,0)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].Eco_GetWishListHeaderList 
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN

	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			WH$9WAN8 AS WebAccountID,
			WHSEQ    AS	WishListID,
			WHDESC   AS	wishListDesc
		FROM 
			[SCDATA].FQ674214	-- Wish List Header
		WHERE 
			WH$9WAN8 = WebAccountID
		ORDER BY WHSEQ DESC
		FOR FETCH ONLY;
		
	OPEN TEMP_CURSOR1;
END
 

 ;
-- #bl_class						Premier.eCommerce.WishListHeader.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationID			InstallationID 
-- #param WebAccountID				WebAccount ID
-- #param WishListID				WishListID ID

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_GetWishListLines
(
	IN InstallationID	GRAPHIC(3) CCSID 13488,
	IN WebAccountID		DECIMAL(15,0),
	IN WishListID		NUMERIC(6,2)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_GetWishListLines
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	-- Gets Cust Cross Document Restrictions
	DECLARE CustCrossRefType	GRAPHIC(2) CCSID 13488;
	DECLARE CustCrossINID		GRAPHIC(3) CCSID 13488;
		
	DECLARE CurrentJulianDate NUMERIC(6,0) DEFAULT 0;
	
	DECLARE TEMP_CURSOR1 CURSOR WITH HOLD WITH RETURN TO CLIENT FOR
		SELECT 
			WD.WD$9WAN8 AS WebAccountID,
			WD.WDSEQ	AS WishListID,
			WD.WDITM	AS ItemNumber,
			WD.WDUORG	AS Quantity,
			WD.WDUOM	AS UnitOfMeasure,
			IM.IMLITM	AS LongItemNumber,
			IM.IMAITM	AS AuxItemNumber,
			COALESCE(S.IVCITM,'')		AS RefProductNumber,
			IM.IMSTKT	AS StockingType
		FROM 
			[SCDATA].FQ674215	 WD					-- WISH LIST DETAIL
			LEFT OUTER JOIN [SCDATA].F4101 IM		--ITEM MASTER
				ON WD.WDITM = IM.IMITM
			LEFT OUTER JOIN [SCDATA].FQ67101 WA	--Web Accounts table
				ON WA.WA$9WAN8 = WD.WD$9WAN8
			LEFT OUTER JOIN [SCDATA].F4104 S		--ITEM CROSS REFERENCE
				ON S.IVAN8 = WA.WA$9AN8
				AND S.IVITM = WD.WDITM 
				AND S.IVXRT = CustCrossRefType
				AND CurrentJulianDate >= S.IVEFTJ AND CurrentJulianDate <= S.IVEXDJ
		WHERE 
			WD.WD$9WAN8 = WebAccountID
			AND WD.WDSEQ = WishListID
		ORDER BY WDITM DESC
		FOR FETCH ONLY;

		SET CustCrossINID = InstallationID;
		
		-- Gets Cust Cross Document Restrictions
		CALL [SCLIBRARY].CMM_GetConstantValue ('CUST_CROSS', CustCrossINID, CustCrossRefType);
		--Get the current Julian Date
		SET CurrentJulianDate = [SCLIBRARY].CMM_GetCurrentJulianDate (CURRENT DATE);
	OPEN TEMP_CURSOR1;
END

 ;
 -- #desc				Save shooping cart
-- #bl_class	 	 	Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies		N/A
-- #db_references		N/A

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_UpdPersistentShoppingCart 
(
		WebAccountId				NUMERIC(15,0),
		InstallationID				varchar(3),
		Quantity					NUMERIC(15,0),		
		ItemsList					DBCLOB CCSID 13488,--Ntext Field
		UserReservedNumber			NUMERIC(15,0),
		UserReservedAmount			NUMERIC(15,0),
		UserReservedCode			VARCHAR(2),
		UserReservedDate			NUMERIC(15,0),
		UserReservedReference		VARCHAR(15),
		"USERID"					VARCHAR(10),
		"PROGRAMID"					VARCHAR(10),
		DateUpdated					NUMERIC(15,0),	
		TimeLastUpdated				NUMERIC(15,0),
		WorkStationID				VARCHAR(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_UpdPersistentShoppingCart
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 

        IF EXISTS (SELECT * FROM [SCDATA].FQ6742WF WHERE WebAccountId = SH$9WAN8 AND InstallationID = SH$9INID) 
            THEN
	        UPDATE [SCDATA].FQ6742WF
		    SET
			    SHQTY = Quantity,
			    SH$9HTML = ItemsList,
			    SHURAB = UserReservedNumber,
				SHURAT = UserReservedAmount,
				SHURCD = UserReservedCode,
				SHURDT = UserReservedDate,
				SHURRF = UserReservedReference,
				SHUSER = "USERID",
				SHPID = "PROGRAMID",
				SHUPMJ = DateUpdated,
				SHUPMT = TimeLastUpdated,
				SHJOBN = WorkStationID
		    WHERE WebAccountId = SH$9WAN8 AND InstallationID = SH$9INID;
	    ELSE
		    INSERT INTO 
		    [SCDATA].FQ6742WF
		    (
			    SH$9WAN8,
			    SH$9INID,
			    SHQTY,			    
			    SH$9HTML,
			    SHURAB,
				SHURAT,
				SHURCD,
				SHURDT,
				SHURRF,
				SHUSER,
				SHPID,
				SHUPMJ,
				SHUPMT,
				SHJOBN
		    )
		    values
		    (
			    WebAccountID,
			    InstallationID,
			    Quantity,
			    ItemsList,
			    UserReservedNumber,
				UserReservedAmount,
				UserReservedCode,
				UserReservedDate,
				UserReservedReference,
				"USERID",
				"PROGRAMID",
				DateUpdated,
				TimeLastUpdated,
				WorkStationID
		    );
		END IF;
END ;
-- #desc					Save the Persist Shopping Cart of the Sales Person Client
-- #bl_class	 	 		Premier.eCommerce.PersistentShoppingCart.cs
-- #db_dependencies			N/A
-- #db_references			N/A

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_UpdSalePClientShopCart 
(
		WebAccountId				NUMERIC(15,0),
		InstallationID				VARCHAR(3),		
		ItemsList					DBCLOB CCSID 13488,--Ntext Field
		SalesPersonClient			NUMERIC(15,0),		
		"USERID"					VARCHAR(10),
		"PROGRAMID"					VARCHAR(10),
		DateUpdated					NUMERIC(15,0),	
		TimeLastUpdated				NUMERIC(15,0),
		WorkStationID				VARCHAR(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_UpdSalePClientShopCart
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN 
     
    UPDATE [SCDATA].FQ67125
    SET			    
	    SP$9HTML = ItemsList,
	    SPUSER = "USERID",
		SPPID = "PROGRAMID",
		SPUPMJ = DateUpdated,
		SPUPMT = TimeLastUpdated,
		SPJOBN = WorkStationID
    WHERE WebAccountId = SP$9WAN8 
		AND InstallationID = SP$9INID
		AND SalesPersonClient = SP$9AN8;
	    
END 
 ;
-- #desc							Update Web Site Most Viewed Items
-- #bl_class						Premier.eCommerce.SalesPersonClient.cs
-- #db_dependencies					N/A
-- #db_references					N/A

-- #param InstallationId			InstallationId				
-- #param WebAccountId				WebAccountId	
-- #param AddressBookType			AddressBookType		
-- #param AddressNumber				AddressNumber
-- #param ContactId					ContactId
-- #param CommissionRate			CommissionRate
-- #param PersistentShoppingCart	PersistentShoppingCart
-- #param LastPickDate				LastPickDate
-- #param TimeLasUpdated			TimeLasUpdated
-- #param OrderCompany				OrderCompany
-- #param OrderNumber				OrderNumber
-- #param OrderType					OrderType
-- #param OrderDate					OrderDate
-- #param AmmountOrderGross			AmmountOrderGross
-- #param UserReservedNumber		UserReservedNumber			
-- #param UserReservedAmount		UserReservedAmount	
-- #param UserReservedCode			UserReservedCode	
-- #param UserReservedDate			UserReservedDate
-- #param UserReservedReference		UserReservedReference		
-- #param "USERID"					"USERID"					
-- #param "PROGRAMID"				"PROGRAMID"					
-- #param DateUpdated				DateUpdated				
-- #param TimeLastUpdated			TimeLastUpdated			
-- #param JobNumber					JobNumber

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_UpdSalesPersonClient 
(
	InstallationId				VARCHAR(3),
	WebAccountId				NUMERIC(15,0),
	AddressBookType				NUMERIC(15,0),
	AddressNumber				NUMERIC(15,0),
	ContactId					NUMERIC(15,0),
	CommissionRate				NUMERIC(15,0),
	PersistentShoppingCart		DBCLOB CCSID 13488,
	LastPickDate				NUMERIC(15,0),	
	TimeUpd						NUMERIC(15,0),	
	OrderCompany				VARCHAR(5),
	OrderNumber					NUMERIC(15,0),
	OrderType					VARCHAR(3),
	OrderDate					NUMERIC(15,0),
	AmmountOrderGross			NUMERIC(15,0),
	UserReservedNumber			NUMERIC(15,0),
	UserReservedAmount			NUMERIC(15,0),
	UserReservedCode			VARCHAR(2),
	UserReservedDate			NUMERIC(15,0),
	UserReservedReference		VARCHAR(15),
	"USERID"					VARCHAR(10),
	"PROGRAMID"					VARCHAR(10),
	DateUpdated					NUMERIC(15,0),	
	TimeLastUpdated				NUMERIC(15,0),
	JobNumber					VARCHAR(10)
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_UpdSalesPersonClient
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	UPDATE 
		[SCDATA].FQ67125
	SET		
		SPCMR1		= CommissionRate,	
		SP$9HTML	= PersistentShoppingCart,
		SPUPDJ		= LastPickDate,
		SPMUPT		= TimeUpd,
		SPKCOO		= OrderCompany,
		SPDOCO		= OrderNumber,	
		SPDCTO		= OrderType,
		SPTRDJ		= OrderDate,
		SPOTOT		= AmmountOrderGross,
		SPURAB		= UserReservedNumber,
		SPURAT		= UserReservedAmount,
		SPURCD		= UserReservedCode,
		SPURDT		= UserReservedDate,
		SPURRF		= UserReservedReference,
		SPUSER		= "USERID",
		SPPID		= "PROGRAMID",
		SPUPMJ		= DateUpdated,
		SPUPMT		= TimeLastUpdated,
		SPJOBN		= JobNumber
	WHERE 
		SP$9INID = InstallationId 
		AND SP$9WAN8 = WebAccountId
		AND SP$9AN8 = AddressNumber 
		AND SPIDLN = ContactId;
END ;
-- #desc							New Saved Cart			
-- #bl_class						Premier.eCommerce.SavedCart.cs
-- #db_dependencies					N/A
-- #db_references					N/A			

-- #param InstallationID			Installation ID 
-- #param WebAccountID				Web Account ID
-- #param AddressNumber				Address Number
-- #param ContactID					ContactID
-- #param AddressType				Address Type
-- #param ShareFlag					Share Flag
-- #param Description				Description
-- #param Quantity					Quantity
-- #param ItemsList					Items List
-- #param DateSaved					Date Saved
-- #param TimeSaved					Time Saved
-- #param OrderCompany				Order Company
-- #param OrderNumber				Order Number
-- #param OrderType					Order Type
-- #param TransactionDate			TransactionDate
-- #param UserReservedNumber		User Reserved Number 
-- #param UserReservedAmount		User Reserved Amount
-- #param UserReservedCode			User Reserved Code
-- #param UserReservedDate			User Reserved Date
-- #param UserReservedReference		User Reserved Reference
-- #param UserID					User ID
-- #param ProgramID					Program ID
-- #param DateUpdated				Date Updated
-- #param TimeLastUpdated			Time Last Updated
-- #param WorkStationID				WorkStation ID

CREATE OR REPLACE procedure [SCLIBRARY].ECO_UpdSavedCart
(
	InstallationID				GRAPHIC(3) CCSID 13488,
	WebAccountID				DECIMAL(15,0),	
	SavedCartType				GRAPHIC(2) CCSID 13488,
	AddressNumber				NUMERIC(15,0),	
	ContactID					DECIMAL(5,0),	
	AddressType					DECIMAL(10,0),	
	ShareFlag					GRAPHIC(1) CCSID 13488,
	Description					GRAPHIC(60) CCSID 13488,
	Quantity					DECIMAL(7,0),	
	ItemsList					DBCLOB CCSID 13488,
	DateSaved					NUMERIC(6,0),
	TimeSaved					NUMERIC(6,0),	
	OrderCompany				GRAPHIC(5) CCSID 13488,
	OrderNumber					NUMERIC(8,0),	
	OrderType					GRAPHIC(2) CCSID 13488,
	TransactionDate				NUMERIC(6,0),		
	UserReservedNumber			NUMERIC(8,0),
	UserReservedAmount			DECIMAL(15,0),
	UserReservedCode			GRAPHIC(2) CCSID 13488,
	UserReservedDate			NUMERIC(6,0),
	UserReservedReference		GRAPHIC(15) CCSID 13488,
	UserID						GRAPHIC(10) CCSID 13488,
	ProgramID					GRAPHIC(10) CCSID 13488,
	DateUpdated					NUMERIC(6,0),
	TimeLastUpdated				DECIMAL(6,0),
	WorkStationID				GRAPHIC(10) CCSID 13488
)
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_UpdSavedCart
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT
SET OPTION COMMIT = *CHG
BEGIN
	DECLARE UniqueKeyID DECIMAL(15,0);
	
	SELECT MAX(WAUKID) + 1  INTO UniqueKeyID FROM [SCDATA].FQ679913
	WHERE WA$9INID = InstallationID;
 
	IF(UniqueKeyID IS NULL) THEN
		SET UniqueKeyID = 1;
	END IF;

	INSERT INTO [SCDATA].FQ679913 
	(
		WA$9WAN8,
		WA$9INID,		
		WAUKID,
		WA$9TYPECART,
		WA$9AN8,
		WAIDLN,
		WA$9TYP,
		WA$9SHFLG,
		WAPDSC,
		WAQTY,			
		WA$9HTML,			
		WAUPDTDATE,
		WAMUPT,			
		WAKCOO,
		WADOCO,
		WADCTO,
		WATRDJ,	
		WAURAB,
		WAURAT,
		WAURCD,
		WAURDT,
		WAURRF,
		WAUSER,
		WAPID,			
		WAUPMJ,
		WATDAY,			
		WAJOBN
	)
	VALUES
	(
		WebAccountID,
		InstallationID,
		UniqueKeyID,
		SavedCartType,
		AddressNumber,
		ContactID,
		AddressType,
		ShareFlag,
		Description,
		Quantity,	
		ItemsList,
		DateSaved,
		TimeSaved,
		OrderCompany,
		OrderNumber,
		OrderType,
		TransactionDate,
		UserReservedNumber,
		UserReservedAmount,
		UserReservedCode,
		UserReservedDate,
		UserReservedReference,			
		UserID,
		ProgramID,
		DateUpdated,
		TimeLastUpdated,
		WorkStationID
	);
END
 ;
-- #desc						Update Web Account Additional Info
-- #bl_class					Premier.eCommerce.WebAccountRecentlyViewItems.cs/TermsAndConditionsAccept.cs
-- #db_dependencies				N/A
-- #db_references				N/A

-- #param InstallationID		Installation ID.
-- #param ObjectType			Object Type
-- #param WebAccountID			Web Account ID	
-- #param XmlBody				Xml Body
-- #param DateUpdated			Date Updated
-- #param TimeLastUpdated		Time Last Update

CREATE OR REPLACE Procedure [SCLIBRARY].ECO_UpdWebUserAdditionalInfo 
(
	IN InstallationID			VARCHAR(3),
	IN ObjectType				NUMERIC(15,0),
	IN WebAccountID				NUMERIC(15,0),
	IN XmlBody					DBCLOB CCSID 13488,
	IN UserReservedNumber		NUMERIC(15,0),
	IN UserReservedAmount		NUMERIC(15,0),
	IN UserReservedCode			VARCHAR(2),
	IN UserReservedDate			NUMERIC(15,0),
	IN UserReservedReference	VARCHAR(15),
	IN "USERID"					VARCHAR(10),
	IN "PROGRAMID"				VARCHAR(10),
	IN JobNumber				VARCHAR(10),
	IN TimeLastUpdated			NUMERIC(15,0),
	IN DateUpdated				NUMERIC(15,0)
)

DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
SPECIFIC [SCLIBRARY].ECO_UpdWebUserAdditionalInfo
NOT DETERMINISTIC 
MODIFIES SQL DATA 
CALLED ON NULL INPUT 
BEGIN
	
	UPDATE 
		[SCDATA].FQ67120
	SET  
		WI$9HTML	=	XmlBody,
	    WIURAB		=	UserReservedNumber,
		WIURAT		=	UserReservedAmount,
		WIURCD		=	UserReservedCode,
		WIURDT		=	UserReservedDate,
		WIURRF		=	UserReservedReference,
		WIUSER		=	"USERID",
		WIPID		=	"PROGRAMID",
		WIJOBN		=	JobNumber,
		WIUPMJ		=	DateUpdated,
		WIUPMT		=	TimeLastUpdated
	WHERE 
			WI$9INID = InstallationID
		AND	WI$9OBJTY = ObjectType
		AND	WI$9WAN8 = WebAccountID;
END ;
